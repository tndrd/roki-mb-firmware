
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd44  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b3a0  0803ffe4  0803ffe4  0002ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805b384  0805b384  0004b384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0805b38c  0805b38c  0004b38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0805b394  0805b394  0004b394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  0805b39c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003688  24000168  0805b504  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240037f0  0805b504  000537f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   00057acd  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000768f  00000000  00000000  000a7c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003ab8  00000000  00000000  000af2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003850  00000000  00000000  000b2db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045507  00000000  00000000  000b6600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c1bf  00000000  00000000  000fbb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194632  00000000  00000000  00137cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002cc2f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010ca0  00000000  00000000  002cc348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803ffcc 	.word	0x0803ffcc

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803ffcc 	.word	0x0803ffcc

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01e fc37 	bl	803ef24 <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	0803ffe4 	.word	0x0803ffe4
 80206c4:	0803fff0 	.word	0x0803fff0
 80206c8:	0804001c 	.word	0x0804001c

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fac5 	bl	8020c7c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f00a fbda 	bl	802aebe <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f00a fbb4 	bl	802ae8e <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f00a fa8f 	bl	802ac66 <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f00a fb21 	bl	802adb4 <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f00a fb2c 	bl	802adec <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f00a fb51 	bl	802ae56 <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f00a fa7c 	bl	802acce <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f00a faa1 	bl	802ad46 <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f00a fc33 	bl	802b08c <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f00a fa9c 	bl	802ad84 <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f00a fc0f 	bl	802b08c <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f00a fa00 	bl	802ac9a <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f00a fb24 	bl	802af12 <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f9a4 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f9aa 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f00a f85f 	bl	802a9c2 <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f00a fb28 	bl	802af70 <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f00a f970 	bl	802ac24 <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020e4d 	.word	0x08020e4d
 8020968:	08020dc9 	.word	0x08020dc9
 802096c:	08020d4d 	.word	0x08020d4d
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	08040bf8 	.word	0x08040bf8
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f00a fa46 	bl	802ae22 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f945 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f94b 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f00a f800 	bl	802a9c2 <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01e faa8 	bl	803ef24 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	08040038 	.word	0x08040038
 80209fc:	0804008c 	.word	0x0804008c
 8020a00:	0804001c 	.word	0x0804001c

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01e fa69 	bl	803ef24 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f00b fc93 	bl	802c39a <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	080400a4 	.word	0x080400a4
 8020b4c:	080400ac 	.word	0x080400ac
 8020b50:	0804001c 	.word	0x0804001c
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b086      	sub	sp, #24
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d105      	bne.n	8020b76 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	; (8020c04 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b6c:	4a26      	ldr	r2, [pc, #152]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b6e:	2191      	movs	r1, #145	; 0x91
 8020b70:	4826      	ldr	r0, [pc, #152]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b72:	f01e f9d7 	bl	803ef24 <__assert_func>
	assert(size);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d105      	bne.n	8020b88 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b7c:	4b24      	ldr	r3, [pc, #144]	; (8020c10 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b7e:	4a22      	ldr	r2, [pc, #136]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b80:	2192      	movs	r1, #146	; 0x92
 8020b82:	4822      	ldr	r0, [pc, #136]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b84:	f01e f9ce 	bl	803ef24 <__assert_func>

	uint8_t *ptr = dest;
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	3302      	adds	r3, #2
 8020bba:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bc6:	697b      	ldr	r3, [r7, #20]
 8020bc8:	3302      	adds	r3, #2
 8020bca:	617b      	str	r3, [r7, #20]
	/*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	689a      	ldr	r2, [r3, #8]
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68da      	ldr	r2, [r3, #12]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	3304      	adds	r3, #4
 8020be6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	7c1a      	ldrb	r2, [r3, #16]
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2211      	movs	r2, #17
 8020bfa:	701a      	strb	r2, [r3, #0]
}
 8020bfc:	bf00      	nop
 8020bfe:	3718      	adds	r7, #24
 8020c00:	46bd      	mov	sp, r7
 8020c02:	bd80      	pop	{r7, pc}
 8020c04:	080400f8 	.word	0x080400f8
 8020c08:	08040100 	.word	0x08040100
 8020c0c:	0804001c 	.word	0x0804001c
 8020c10:	0804013c 	.word	0x0804013c

08020c14 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020c14:	b480      	push	{r7}
 8020c16:	b083      	sub	sp, #12
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020c22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr

08020c32 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b082      	sub	sp, #8
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f000 f811 	bl	8020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c42:	4603      	mov	r3, r0
 8020c44:	4618      	mov	r0, r3
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c58:	4618      	mov	r0, r3
 8020c5a:	370c      	adds	r7, #12
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c62:	4770      	bx	lr

08020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c64:	b480      	push	{r7}
 8020c66:	b083      	sub	sp, #12
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr
	...

08020c7c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c84:	4a04      	ldr	r2, [pc, #16]	; (8020c98 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6013      	str	r3, [r2, #0]
}
 8020c8a:	bf00      	nop
 8020c8c:	370c      	adds	r7, #12
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	24000184 	.word	0x24000184

08020c9c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b082      	sub	sp, #8
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020ca8:	4b11      	ldr	r3, [pc, #68]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	887a      	ldrh	r2, [r7, #2]
 8020cae:	6879      	ldr	r1, [r7, #4]
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f015 fccd 	bl	8036650 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cb6:	4b0e      	ldr	r3, [pc, #56]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f016 fb56 	bl	803736c <HAL_SPI_GetState>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	bf14      	ite	ne
 8020cc6:	2301      	movne	r3, #1
 8020cc8:	2300      	moveq	r3, #0
 8020cca:	b2db      	uxtb	r3, r3
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d000      	beq.n	8020cd2 <_Z11spiTransmitPht+0x36>
 8020cd0:	e7f1      	b.n	8020cb6 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cd2:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	bf0c      	ite	eq
 8020cde:	2301      	moveq	r3, #1
 8020ce0:	2300      	movne	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	b25b      	sxtb	r3, r3
  }
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	24000184 	.word	0x24000184

08020cf4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b082      	sub	sp, #8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020d00:	4b11      	ldr	r3, [pc, #68]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	887a      	ldrh	r2, [r7, #2]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	4618      	mov	r0, r3
 8020d0a:	f015 fdeb 	bl	80368e4 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020d0e:	4b0e      	ldr	r3, [pc, #56]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	4618      	mov	r0, r3
 8020d14:	f016 fb2a 	bl	803736c <HAL_SPI_GetState>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	bf14      	ite	ne
 8020d1e:	2301      	movne	r3, #1
 8020d20:	2300      	moveq	r3, #0
 8020d22:	b2db      	uxtb	r3, r3
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <_Z9spiReceivPht+0x36>
 8020d28:	e7f1      	b.n	8020d0e <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020d2a:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	b25b      	sxtb	r3, r3
  }
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	24000184 	.word	0x24000184

08020d4c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b084      	sub	sp, #16
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60b9      	str	r1, [r7, #8]
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	603b      	str	r3, [r7, #0]
 8020d58:	4603      	mov	r3, r0
 8020d5a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d5c:	4b19      	ldr	r3, [pc, #100]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d62:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d64:	f107 030f 	add.w	r3, r7, #15
 8020d68:	2101      	movs	r1, #1
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ff ff96 	bl	8020c9c <_Z11spiTransmitPht>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	bf0c      	ite	eq
 8020d76:	2301      	moveq	r3, #1
 8020d78:	2300      	movne	r3, #0
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d80:	f06f 0301 	mvn.w	r3, #1
 8020d84:	e019      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	68b8      	ldr	r0, [r7, #8]
 8020d8e:	f7ff ffb1 	bl	8020cf4 <_Z9spiReceivPht>
 8020d92:	4603      	mov	r3, r0
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	bf14      	ite	ne
 8020d98:	2301      	movne	r3, #1
 8020d9a:	2300      	moveq	r3, #0
 8020d9c:	b2db      	uxtb	r3, r3
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d005      	beq.n	8020dae <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020da8:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020daa:	2300      	movs	r3, #0
 8020dac:	e005      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dae:	4b05      	ldr	r3, [pc, #20]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020db4:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020db6:	f06f 0301 	mvn.w	r3, #1
  }
 8020dba:	4618      	mov	r0, r3
 8020dbc:	3710      	adds	r7, #16
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	58021000 	.word	0x58021000

08020dc8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	60b9      	str	r1, [r7, #8]
 8020dd0:	607a      	str	r2, [r7, #4]
 8020dd2:	603b      	str	r3, [r7, #0]
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d902      	bls.n	8020de4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020dde:	f06f 0303 	mvn.w	r3, #3
 8020de2:	e028      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020de4:	4a16      	ldr	r2, [pc, #88]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020de6:	7bfb      	ldrb	r3, [r7, #15]
 8020de8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	68b9      	ldr	r1, [r7, #8]
 8020df0:	4618      	mov	r0, r3
 8020df2:	f01e f901 	bl	803eff8 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020df6:	4b14      	ldr	r3, [pc, #80]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dfc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3301      	adds	r3, #1
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	4619      	mov	r1, r3
 8020e08:	480d      	ldr	r0, [pc, #52]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020e0a:	f7ff ff47 	bl	8020c9c <_Z11spiTransmitPht>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	bf14      	ite	ne
 8020e14:	2301      	movne	r3, #1
 8020e16:	2300      	moveq	r3, #0
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e1e:	4b0a      	ldr	r3, [pc, #40]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e24:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	e005      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e30:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020e36:	4618      	mov	r0, r3
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	24000188 	.word	0x24000188
 8020e44:	24000189 	.word	0x24000189
 8020e48:	58021000 	.word	0x58021000

08020e4c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b082      	sub	sp, #8
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e5c:	d308      	bcc.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a0b      	ldr	r2, [pc, #44]	; (8020e90 <_Z13bhy2_delay_usmPv+0x44>)
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	099b      	lsrs	r3, r3, #6
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f00c ffed 	bl	802de48 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e6e:	e00b      	b.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	1e5a      	subs	r2, r3, #1
 8020e74:	607a      	str	r2, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	bf14      	ite	ne
 8020e7a:	2301      	movne	r3, #1
 8020e7c:	2300      	moveq	r3, #0
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d001      	beq.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e84:	bf00      	nop
    while( us-- ) {
 8020e86:	e7f3      	b.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	10624dd3 	.word	0x10624dd3

08020e94 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bfb8      	it	lt
 8020ea2:	425b      	neglt	r3, r3
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	370c      	adds	r7, #12
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	4618      	mov	r0, r3
 8020ebc:	370c      	adds	r7, #12
 8020ebe:	46bd      	mov	sp, r7
 8020ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec4:	4770      	bx	lr

08020ec6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020ec6:	b480      	push	{r7}
 8020ec8:	b083      	sub	sp, #12
 8020eca:	af00      	add	r7, sp, #0
 8020ecc:	6078      	str	r0, [r7, #4]
 8020ece:	6039      	str	r1, [r7, #0]
 8020ed0:	683b      	ldr	r3, [r7, #0]
 8020ed2:	4618      	mov	r0, r3
 8020ed4:	370c      	adds	r7, #12
 8020ed6:	46bd      	mov	sp, r7
 8020ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020edc:	4770      	bx	lr

08020ede <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020ede:	b480      	push	{r7}
 8020ee0:	b083      	sub	sp, #12
 8020ee2:	af00      	add	r7, sp, #0
 8020ee4:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020eec:	d205      	bcs.n	8020efa <_ZSt16__deque_buf_sizej+0x1c>
 8020eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ef8:	e000      	b.n	8020efc <_ZSt16__deque_buf_sizej+0x1e>
 8020efa:	2301      	movs	r3, #1
 8020efc:	4618      	mov	r0, r3
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <_ZN11QueueSender11MessageMode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;

		static uint8_t Serialize(Type mode) {
 8020f08:	b480      	push	{r7}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	4603      	mov	r3, r0
 8020f10:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020f12:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f14:	4618      	mov	r0, r3
 8020f16:	370c      	adds	r7, #12
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f1e:	4770      	bx	lr

08020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020f20:	b480      	push	{r7}
 8020f22:	b083      	sub	sp, #12
 8020f24:	af00      	add	r7, sp, #0
 8020f26:	4603      	mov	r3, r0
 8020f28:	71fb      	strb	r3, [r7, #7]
			return val;
 8020f2a:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f2c:	4618      	mov	r0, r3
 8020f2e:	370c      	adds	r7, #12
 8020f30:	46bd      	mov	sp, r7
 8020f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f36:	4770      	bx	lr

08020f38 <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type Success = 0;
		static constexpr Type Timeout = 1;
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;

		static uint8_t Serialize(Type error) {
 8020f38:	b480      	push	{r7}
 8020f3a:	b083      	sub	sp, #12
 8020f3c:	af00      	add	r7, sp, #0
 8020f3e:	4603      	mov	r3, r0
 8020f40:	71fb      	strb	r3, [r7, #7]
			return error;
 8020f42:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f44:	4618      	mov	r0, r3
 8020f46:	370c      	adds	r7, #12
 8020f48:	46bd      	mov	sp, r7
 8020f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f4e:	4770      	bx	lr

08020f50 <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020f50:	b580      	push	{r7, lr}
 8020f52:	b082      	sub	sp, #8
 8020f54:	af00      	add	r7, sp, #0
 8020f56:	6078      	str	r0, [r7, #4]
 8020f58:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020f5a:	683b      	ldr	r3, [r7, #0]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d105      	bne.n	8020f6c <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f60:	4b13      	ldr	r3, [pc, #76]	; (8020fb0 <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f62:	4a14      	ldr	r2, [pc, #80]	; (8020fb4 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f64:	2169      	movs	r1, #105	; 0x69
 8020f66:	4814      	ldr	r0, [pc, #80]	; (8020fb8 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f68:	f01d ffdc 	bl	803ef24 <__assert_func>
			assert(*ptr);
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d105      	bne.n	8020f80 <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f74:	4b11      	ldr	r3, [pc, #68]	; (8020fbc <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f76:	4a0f      	ldr	r2, [pc, #60]	; (8020fb4 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f78:	216a      	movs	r1, #106	; 0x6a
 8020f7a:	480f      	ldr	r0, [pc, #60]	; (8020fb8 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f7c:	f01d ffd2 	bl	803ef24 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	8812      	ldrh	r2, [r2, #0]
 8020f88:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	1c9a      	adds	r2, r3, #2
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f94:	683b      	ldr	r3, [r7, #0]
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	687a      	ldr	r2, [r7, #4]
 8020f9a:	8852      	ldrh	r2, [r2, #2]
 8020f9c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f9e:	683b      	ldr	r3, [r7, #0]
 8020fa0:	681b      	ldr	r3, [r3, #0]
 8020fa2:	1c9a      	adds	r2, r3, #2
 8020fa4:	683b      	ldr	r3, [r7, #0]
 8020fa6:	601a      	str	r2, [r3, #0]
		}
 8020fa8:	bf00      	nop
 8020faa:	3708      	adds	r7, #8
 8020fac:	46bd      	mov	sp, r7
 8020fae:	bd80      	pop	{r7, pc}
 8020fb0:	08040144 	.word	0x08040144
 8020fb4:	08040148 	.word	0x08040148
 8020fb8:	08040178 	.word	0x08040178
 8020fbc:	08040194 	.word	0x08040194

08020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8020fc0:	b580      	push	{r7, lr}
 8020fc2:	b082      	sub	sp, #8
 8020fc4:	af00      	add	r7, sp, #0
 8020fc6:	6078      	str	r0, [r7, #4]
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	4618      	mov	r0, r3
 8020fcc:	f002 f9b4 	bl	8023338 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	3708      	adds	r7, #8
 8020fd6:	46bd      	mov	sp, r7
 8020fd8:	bd80      	pop	{r7, pc}

08020fda <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8020fda:	b580      	push	{r7, lr}
 8020fdc:	b082      	sub	sp, #8
 8020fde:	af00      	add	r7, sp, #0
 8020fe0:	6078      	str	r0, [r7, #4]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	f002 fa20 	bl	802342a <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	4618      	mov	r0, r3
 8020fee:	3708      	adds	r7, #8
 8020ff0:	46bd      	mov	sp, r7
 8020ff2:	bd80      	pop	{r7, pc}

08020ff4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b082      	sub	sp, #8
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	6078      	str	r0, [r7, #4]
 8020ffc:	6878      	ldr	r0, [r7, #4]
 8020ffe:	f002 fa49 	bl	8023494 <_ZNSaIhED1Ev>
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	4618      	mov	r0, r3
 8021006:	3708      	adds	r7, #8
 8021008:	46bd      	mov	sp, r7
 802100a:	bd80      	pop	{r7, pc}

0802100c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 802100c:	b580      	push	{r7, lr}
 802100e:	b082      	sub	sp, #8
 8021010:	af00      	add	r7, sp, #0
 8021012:	6078      	str	r0, [r7, #4]
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	4618      	mov	r0, r3
 8021018:	f002 fa2c 	bl	8023474 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	4618      	mov	r0, r3
 8021020:	3708      	adds	r7, #8
 8021022:	46bd      	mov	sp, r7
 8021024:	bd80      	pop	{r7, pc}

08021026 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8021026:	b580      	push	{r7, lr}
 8021028:	b082      	sub	sp, #8
 802102a:	af00      	add	r7, sp, #0
 802102c:	6078      	str	r0, [r7, #4]
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	4618      	mov	r0, r3
 8021032:	f7ff ffeb 	bl	802100c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	4618      	mov	r0, r3
 802103a:	3708      	adds	r7, #8
 802103c:	46bd      	mov	sp, r7
 802103e:	bd80      	pop	{r7, pc}

08021040 <_ZN7RequestC1Ev>:
struct Request {
 8021040:	b580      	push	{r7, lr}
 8021042:	b082      	sub	sp, #8
 8021044:	af00      	add	r7, sp, #0
 8021046:	6078      	str	r0, [r7, #4]
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	4618      	mov	r0, r3
 802104c:	f7ff ffeb 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	4618      	mov	r0, r3
 8021054:	3708      	adds	r7, #8
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}

0802105a <_ZN7RequestD1Ev>:
 802105a:	b580      	push	{r7, lr}
 802105c:	b082      	sub	sp, #8
 802105e:	af00      	add	r7, sp, #0
 8021060:	6078      	str	r0, [r7, #4]
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	4618      	mov	r0, r3
 8021066:	f002 fa39 	bl	80234dc <_ZNSt6vectorIhSaIhEED1Ev>
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	4618      	mov	r0, r3
 802106e:	3708      	adds	r7, #8
 8021070:	46bd      	mov	sp, r7
 8021072:	bd80      	pop	{r7, pc}

08021074 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021074:	b580      	push	{r7, lr}
 8021076:	b084      	sub	sp, #16
 8021078:	af00      	add	r7, sp, #0
 802107a:	60f8      	str	r0, [r7, #12]
 802107c:	60b9      	str	r1, [r7, #8]
 802107e:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021080:	68fb      	ldr	r3, [r7, #12]
 8021082:	4618      	mov	r0, r3
 8021084:	f7ff ff9c 	bl	8020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8021088:	68fb      	ldr	r3, [r7, #12]
 802108a:	3328      	adds	r3, #40	; 0x28
 802108c:	4618      	mov	r0, r3
 802108e:	f002 f9b8 	bl	8023402 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021092:	68fb      	ldr	r3, [r7, #12]
 8021094:	3350      	adds	r3, #80	; 0x50
 8021096:	4618      	mov	r0, r3
 8021098:	f7ff ffd2 	bl	8021040 <_ZN7RequestC1Ev>
 802109c:	68fb      	ldr	r3, [r7, #12]
 802109e:	2200      	movs	r2, #0
 80210a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80210a4:	68fb      	ldr	r3, [r7, #12]
 80210a6:	2200      	movs	r2, #0
 80210a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80210ac:	68fb      	ldr	r3, [r7, #12]
 80210ae:	3368      	adds	r3, #104	; 0x68
 80210b0:	4618      	mov	r0, r3
 80210b2:	f7ff ffb8 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 80210b6:	68fb      	ldr	r3, [r7, #12]
 80210b8:	68ba      	ldr	r2, [r7, #8]
 80210ba:	675a      	str	r2, [r3, #116]	; 0x74
 80210bc:	68fb      	ldr	r3, [r7, #12]
 80210be:	687a      	ldr	r2, [r7, #4]
 80210c0:	679a      	str	r2, [r3, #120]	; 0x78
 80210c2:	68fb      	ldr	r3, [r7, #12]
 80210c4:	2201      	movs	r2, #1
 80210c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80210ca:	68fb      	ldr	r3, [r7, #12]
 80210cc:	2200      	movs	r2, #0
 80210ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		assert(uart != NULL);
 80210d2:	68bb      	ldr	r3, [r7, #8]
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d105      	bne.n	80210e4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x70>
 80210d8:	4b05      	ldr	r3, [pc, #20]	; (80210f0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x7c>)
 80210da:	4a06      	ldr	r2, [pc, #24]	; (80210f4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x80>)
 80210dc:	2179      	movs	r1, #121	; 0x79
 80210de:	4806      	ldr	r0, [pc, #24]	; (80210f8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x84>)
 80210e0:	f01d ff20 	bl	803ef24 <__assert_func>
	}
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	4618      	mov	r0, r3
 80210e8:	3710      	adds	r7, #16
 80210ea:	46bd      	mov	sp, r7
 80210ec:	bd80      	pop	{r7, pc}
 80210ee:	bf00      	nop
 80210f0:	0804019c 	.word	0x0804019c
 80210f4:	080401ac 	.word	0x080401ac
 80210f8:	08040178 	.word	0x08040178

080210fc <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 80210fc:	b480      	push	{r7}
 80210fe:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8021100:	2301      	movs	r3, #1
 8021102:	4618      	mov	r0, r3
 8021104:	46bd      	mov	sp, r7
 8021106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802110a:	4770      	bx	lr

0802110c <_ZN7RequestaSEOS_>:
struct Request {
 802110c:	b580      	push	{r7, lr}
 802110e:	b082      	sub	sp, #8
 8021110:	af00      	add	r7, sp, #0
 8021112:	6078      	str	r0, [r7, #4]
 8021114:	6039      	str	r1, [r7, #0]
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	683a      	ldr	r2, [r7, #0]
 802111a:	4611      	mov	r1, r2
 802111c:	4618      	mov	r0, r3
 802111e:	f002 fa2e 	bl	802357e <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8021122:	683b      	ldr	r3, [r7, #0]
 8021124:	68da      	ldr	r2, [r3, #12]
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	60da      	str	r2, [r3, #12]
 802112a:	683b      	ldr	r3, [r7, #0]
 802112c:	7c1a      	ldrb	r2, [r3, #16]
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	741a      	strb	r2, [r3, #16]
 8021132:	683b      	ldr	r3, [r7, #0]
 8021134:	7c5a      	ldrb	r2, [r3, #17]
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	745a      	strb	r2, [r3, #17]
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	4618      	mov	r0, r3
 802113e:	3708      	adds	r7, #8
 8021140:	46bd      	mov	sp, r7
 8021142:	bd80      	pop	{r7, pc}

08021144 <_ZN8ResponceD1Ev>:
struct Responce {
 8021144:	b580      	push	{r7, lr}
 8021146:	b082      	sub	sp, #8
 8021148:	af00      	add	r7, sp, #0
 802114a:	6078      	str	r0, [r7, #4]
 802114c:	687b      	ldr	r3, [r7, #4]
 802114e:	4618      	mov	r0, r3
 8021150:	f002 f9c4 	bl	80234dc <_ZNSt6vectorIhSaIhEED1Ev>
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	4618      	mov	r0, r3
 8021158:	3708      	adds	r7, #8
 802115a:	46bd      	mov	sp, r7
 802115c:	bd80      	pop	{r7, pc}

0802115e <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 802115e:	b590      	push	{r4, r7, lr}
 8021160:	b087      	sub	sp, #28
 8021162:	af00      	add	r7, sp, #0
 8021164:	6078      	str	r0, [r7, #4]
 8021166:	6039      	str	r1, [r7, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 8021168:	683b      	ldr	r3, [r7, #0]
 802116a:	7c1b      	ldrb	r3, [r3, #16]
 802116c:	4618      	mov	r0, r3
 802116e:	f7ff fed7 	bl	8020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021172:	4603      	mov	r3, r0
 8021174:	2b02      	cmp	r3, #2
 8021176:	d027      	beq.n	80211c8 <_ZN11QueueSender10AddRequestEO7Request+0x6a>
 8021178:	2b02      	cmp	r3, #2
 802117a:	dc3b      	bgt.n	80211f4 <_ZN11QueueSender10AddRequestEO7Request+0x96>
 802117c:	2b00      	cmp	r3, #0
 802117e:	d00b      	beq.n	8021198 <_ZN11QueueSender10AddRequestEO7Request+0x3a>
 8021180:	2b01      	cmp	r3, #1
 8021182:	d137      	bne.n	80211f4 <_ZN11QueueSender10AddRequestEO7Request+0x96>
		case MessageMode::Async:
			Requests.emplace_back(std::move(request));
 8021184:	687c      	ldr	r4, [r7, #4]
 8021186:	6838      	ldr	r0, [r7, #0]
 8021188:	f002 f9c3 	bl	8023512 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 802118c:	4603      	mov	r3, r0
 802118e:	4619      	mov	r1, r3
 8021190:	4620      	mov	r0, r4
 8021192:	f002 f9c9 	bl	8023528 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 8021196:	e02d      	b.n	80211f4 <_ZN11QueueSender10AddRequestEO7Request+0x96>
		case MessageMode::Sync:
			if (!HasPriorityRequest) {
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 802119e:	f083 0301 	eor.w	r3, r3, #1
 80211a2:	b2db      	uxtb	r3, r3
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	d024      	beq.n	80211f2 <_ZN11QueueSender10AddRequestEO7Request+0x94>
				PriorityRequest = std::move(request);
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80211ae:	6838      	ldr	r0, [r7, #0]
 80211b0:	f002 f9af 	bl	8023512 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80211b4:	4603      	mov	r3, r0
 80211b6:	4619      	mov	r1, r3
 80211b8:	4620      	mov	r0, r4
 80211ba:	f7ff ffa7 	bl	802110c <_ZN7RequestaSEOS_>
				HasPriorityRequest = true;
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	2201      	movs	r2, #1
 80211c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			}
			break;
 80211c6:	e014      	b.n	80211f2 <_ZN11QueueSender10AddRequestEO7Request+0x94>

		case MessageMode::Info:
			Responces.emplace(CreateInfoResponce());
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80211ce:	f107 0308 	add.w	r3, r7, #8
 80211d2:	6879      	ldr	r1, [r7, #4]
 80211d4:	4618      	mov	r0, r3
 80211d6:	f000 fad7 	bl	8021788 <_ZNK11QueueSender18CreateInfoResponceEv>
 80211da:	f107 0308 	add.w	r3, r7, #8
 80211de:	4619      	mov	r1, r3
 80211e0:	4620      	mov	r0, r4
 80211e2:	f002 f9e1 	bl	80235a8 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 80211e6:	f107 0308 	add.w	r3, r7, #8
 80211ea:	4618      	mov	r0, r3
 80211ec:	f7ff ffaa 	bl	8021144 <_ZN8ResponceD1Ev>
			break;
 80211f0:	e000      	b.n	80211f4 <_ZN11QueueSender10AddRequestEO7Request+0x96>
			break;
 80211f2:	bf00      	nop
		}
	}
 80211f4:	bf00      	nop
 80211f6:	371c      	adds	r7, #28
 80211f8:	46bd      	mov	sp, r7
 80211fa:	bd90      	pop	{r4, r7, pc}

080211fc <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 80211fc:	b580      	push	{r7, lr}
 80211fe:	b082      	sub	sp, #8
 8021200:	af00      	add	r7, sp, #0
 8021202:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	3328      	adds	r3, #40	; 0x28
 8021208:	4618      	mov	r0, r3
 802120a:	f002 f9df 	bl	80235cc <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 802120e:	4603      	mov	r3, r0
 8021210:	f083 0301 	eor.w	r3, r3, #1
 8021214:	b2db      	uxtb	r3, r3
	}
 8021216:	4618      	mov	r0, r3
 8021218:	3708      	adds	r7, #8
 802121a:	46bd      	mov	sp, r7
 802121c:	bd80      	pop	{r7, pc}

0802121e <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 802121e:	b480      	push	{r7}
 8021220:	b083      	sub	sp, #12
 8021222:	af00      	add	r7, sp, #0
 8021224:	6078      	str	r0, [r7, #4]
		TimerReady = true;
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	2201      	movs	r2, #1
 802122a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	}
 802122e:	bf00      	nop
 8021230:	370c      	adds	r7, #12
 8021232:	46bd      	mov	sp, r7
 8021234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021238:	4770      	bx	lr

0802123a <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 802123a:	b580      	push	{r7, lr}
 802123c:	b082      	sub	sp, #8
 802123e:	af00      	add	r7, sp, #0
 8021240:	6078      	str	r0, [r7, #4]
 8021242:	6039      	str	r1, [r7, #0]
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	683a      	ldr	r2, [r7, #0]
 8021248:	4611      	mov	r1, r2
 802124a:	4618      	mov	r0, r3
 802124c:	f002 f9e3 	bl	8023616 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	4618      	mov	r0, r3
 8021254:	3708      	adds	r7, #8
 8021256:	46bd      	mov	sp, r7
 8021258:	bd80      	pop	{r7, pc}

0802125a <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 802125a:	b580      	push	{r7, lr}
 802125c:	b082      	sub	sp, #8
 802125e:	af00      	add	r7, sp, #0
 8021260:	6078      	str	r0, [r7, #4]
 8021262:	6039      	str	r1, [r7, #0]
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	683a      	ldr	r2, [r7, #0]
 8021268:	4611      	mov	r1, r2
 802126a:	4618      	mov	r0, r3
 802126c:	f7ff ffe5 	bl	802123a <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	4618      	mov	r0, r3
 8021274:	3708      	adds	r7, #8
 8021276:	46bd      	mov	sp, r7
 8021278:	bd80      	pop	{r7, pc}

0802127a <_ZN8ResponceC1EOS_>:
struct Responce {
 802127a:	b580      	push	{r7, lr}
 802127c:	b082      	sub	sp, #8
 802127e:	af00      	add	r7, sp, #0
 8021280:	6078      	str	r0, [r7, #4]
 8021282:	6039      	str	r1, [r7, #0]
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	683a      	ldr	r2, [r7, #0]
 8021288:	4611      	mov	r1, r2
 802128a:	4618      	mov	r0, r3
 802128c:	f7ff ffe5 	bl	802125a <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8021290:	683b      	ldr	r3, [r7, #0]
 8021292:	7b1a      	ldrb	r2, [r3, #12]
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	731a      	strb	r2, [r3, #12]
 8021298:	683b      	ldr	r3, [r7, #0]
 802129a:	7b5a      	ldrb	r2, [r3, #13]
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	735a      	strb	r2, [r3, #13]
 80212a0:	683b      	ldr	r3, [r7, #0]
 80212a2:	7b9a      	ldrb	r2, [r3, #14]
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	739a      	strb	r2, [r3, #14]
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	4618      	mov	r0, r3
 80212ac:	3708      	adds	r7, #8
 80212ae:	46bd      	mov	sp, r7
 80212b0:	bd80      	pop	{r7, pc}
	...

080212b4 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 80212b4:	b580      	push	{r7, lr}
 80212b6:	b082      	sub	sp, #8
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	6078      	str	r0, [r7, #4]
 80212bc:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 80212be:	6838      	ldr	r0, [r7, #0]
 80212c0:	f7ff ff9c 	bl	80211fc <_ZNK11QueueSender11HasResponceEv>
 80212c4:	4603      	mov	r3, r0
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d105      	bne.n	80212d6 <_ZN11QueueSender11GetResponceEv+0x22>
 80212ca:	4b0f      	ldr	r3, [pc, #60]	; (8021308 <_ZN11QueueSender11GetResponceEv+0x54>)
 80212cc:	4a0f      	ldr	r2, [pc, #60]	; (802130c <_ZN11QueueSender11GetResponceEv+0x58>)
 80212ce:	2197      	movs	r1, #151	; 0x97
 80212d0:	480f      	ldr	r0, [pc, #60]	; (8021310 <_ZN11QueueSender11GetResponceEv+0x5c>)
 80212d2:	f01d fe27 	bl	803ef24 <__assert_func>
		auto responce = std::move(Responces.front());
 80212d6:	683b      	ldr	r3, [r7, #0]
 80212d8:	3328      	adds	r3, #40	; 0x28
 80212da:	4618      	mov	r0, r3
 80212dc:	f002 f983 	bl	80235e6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 80212e0:	4603      	mov	r3, r0
 80212e2:	4618      	mov	r0, r3
 80212e4:	f002 f98c 	bl	8023600 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 80212e8:	4603      	mov	r3, r0
 80212ea:	4619      	mov	r1, r3
 80212ec:	6878      	ldr	r0, [r7, #4]
 80212ee:	f7ff ffc4 	bl	802127a <_ZN8ResponceC1EOS_>
		Responces.pop();
 80212f2:	683b      	ldr	r3, [r7, #0]
 80212f4:	3328      	adds	r3, #40	; 0x28
 80212f6:	4618      	mov	r0, r3
 80212f8:	f002 f9a8 	bl	802364c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 80212fc:	bf00      	nop
	}
 80212fe:	6878      	ldr	r0, [r7, #4]
 8021300:	3708      	adds	r7, #8
 8021302:	46bd      	mov	sp, r7
 8021304:	bd80      	pop	{r7, pc}
 8021306:	bf00      	nop
 8021308:	080401e4 	.word	0x080401e4
 802130c:	080401f4 	.word	0x080401f4
 8021310:	08040178 	.word	0x08040178

08021314 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 8021314:	b5b0      	push	{r4, r5, r7, lr}
 8021316:	b08e      	sub	sp, #56	; 0x38
 8021318:	af02      	add	r7, sp, #8
 802131a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802131c:	b672      	cpsid	i
}
 802131e:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8021326:	2b00      	cmp	r3, #0
 8021328:	f000 8096 	beq.w	8021458 <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8021332:	f083 0301 	eor.w	r3, r3, #1
 8021336:	b2db      	uxtb	r3, r3
 8021338:	2b00      	cmp	r3, #0
 802133a:	f000 808d 	beq.w	8021458 <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021344:	2b00      	cmp	r3, #0
 8021346:	f000 8087 	beq.w	8021458 <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
			HasPriorityRequest = false;
 802134a:	687b      	ldr	r3, [r7, #4]
 802134c:	2200      	movs	r2, #0
 802134e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			WaitResponce = true;
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	2201      	movs	r2, #1
 8021356:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 802135a:	b662      	cpsie	i
}
 802135c:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	3350      	adds	r3, #80	; 0x50
 8021362:	62fb      	str	r3, [r7, #44]	; 0x2c
			auto &data = request.Data;
 8021364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021366:	62bb      	str	r3, [r7, #40]	; 0x28

			assert(
 8021368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802136a:	7c1b      	ldrb	r3, [r3, #16]
 802136c:	4618      	mov	r0, r3
 802136e:	f7ff fdd7 	bl	8020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021372:	4603      	mov	r3, r0
 8021374:	2b00      	cmp	r3, #0
 8021376:	d005      	beq.n	8021384 <_ZN11QueueSender22ProcessPriorityRequestEv+0x70>
 8021378:	4b3a      	ldr	r3, [pc, #232]	; (8021464 <_ZN11QueueSender22ProcessPriorityRequestEv+0x150>)
 802137a:	4a3b      	ldr	r2, [pc, #236]	; (8021468 <_ZN11QueueSender22ProcessPriorityRequestEv+0x154>)
 802137c:	21a7      	movs	r1, #167	; 0xa7
 802137e:	483b      	ldr	r0, [pc, #236]	; (802146c <_ZN11QueueSender22ProcessPriorityRequestEv+0x158>)
 8021380:	f01d fdd0 	bl	803ef24 <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 8021384:	b672      	cpsid	i
}
 8021386:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	2200      	movs	r2, #0
 802138c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  __ASM volatile ("cpsie i" : : : "memory");
 8021390:	b662      	cpsie	i
}
 8021392:	bf00      	nop
			__enable_irq();
			assert(
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8021398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802139a:	f002 f963 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 802139e:	4605      	mov	r5, r0
 80213a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80213a2:	f002 f96e 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80213a6:	4603      	mov	r3, r0
 80213a8:	b29b      	uxth	r3, r3
 80213aa:	461a      	mov	r2, r3
 80213ac:	4629      	mov	r1, r5
 80213ae:	4620      	mov	r0, r4
 80213b0:	f016 ff8c 	bl	80382cc <HAL_UART_Transmit_IT>
 80213b4:	4603      	mov	r3, r0
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d005      	beq.n	80213c6 <_ZN11QueueSender22ProcessPriorityRequestEv+0xb2>
 80213ba:	4b2d      	ldr	r3, [pc, #180]	; (8021470 <_ZN11QueueSender22ProcessPriorityRequestEv+0x15c>)
 80213bc:	4a2a      	ldr	r2, [pc, #168]	; (8021468 <_ZN11QueueSender22ProcessPriorityRequestEv+0x154>)
 80213be:	21ad      	movs	r1, #173	; 0xad
 80213c0:	482a      	ldr	r0, [pc, #168]	; (802146c <_ZN11QueueSender22ProcessPriorityRequestEv+0x158>)
 80213c2:	f01d fdaf 	bl	803ef24 <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(), data.size())
							== HAL_OK);

			while (!TransmitComplete)
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d100      	bne.n	80213d2 <_ZN11QueueSender22ProcessPriorityRequestEv+0xbe>
 80213d0:	e7f9      	b.n	80213c6 <_ZN11QueueSender22ProcessPriorityRequestEv+0xb2>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 80213d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213d4:	68db      	ldr	r3, [r3, #12]
 80213d6:	b2db      	uxtb	r3, r3
 80213d8:	4619      	mov	r1, r3
 80213da:	6878      	ldr	r0, [r7, #4]
 80213dc:	f000 f8fe 	bl	80215dc <_ZN11QueueSender7ReceiveEh>
 80213e0:	4603      	mov	r3, r0
 80213e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (error == ErrorCode::NACK) {
 80213e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213ea:	2b02      	cmp	r3, #2
 80213ec:	d115      	bne.n	802141a <_ZN11QueueSender22ProcessPriorityRequestEv+0x106>
				uint32_t delayMS = 5;
 80213ee:	2305      	movs	r3, #5
 80213f0:	623b      	str	r3, [r7, #32]
				HAL_Delay(delayMS);
 80213f2:	6a38      	ldr	r0, [r7, #32]
 80213f4:	f00c fd28 	bl	802de48 <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80213fc:	f107 010f 	add.w	r1, r7, #15
 8021400:	2300      	movs	r3, #0
 8021402:	2201      	movs	r2, #1
 8021404:	f016 fe8e 	bl	8038124 <HAL_UART_Receive>
 8021408:	4603      	mov	r3, r0
 802140a:	2b00      	cmp	r3, #0
 802140c:	bf0c      	ite	eq
 802140e:	2301      	moveq	r3, #1
 8021410:	2300      	movne	r3, #0
 8021412:	b2db      	uxtb	r3, r3
 8021414:	2b00      	cmp	r3, #0
 8021416:	d000      	beq.n	802141a <_ZN11QueueSender22ProcessPriorityRequestEv+0x106>
 8021418:	e7ee      	b.n	80213f8 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe4>
					;
			}

			Responces.emplace(
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	f103 0428 	add.w	r4, r3, #40	; 0x28
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8021426:	f107 0010 	add.w	r0, r7, #16
 802142a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802142e:	9300      	str	r3, [sp, #0]
 8021430:	2300      	movs	r3, #0
 8021432:	6879      	ldr	r1, [r7, #4]
 8021434:	f000 f981 	bl	802173a <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
			Responces.emplace(
 8021438:	f107 0310 	add.w	r3, r7, #16
 802143c:	4619      	mov	r1, r3
 802143e:	4620      	mov	r0, r4
 8021440:	f002 f8b2 	bl	80235a8 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 8021444:	f107 0310 	add.w	r3, r7, #16
 8021448:	4618      	mov	r0, r3
 802144a:	f7ff fe7b 	bl	8021144 <_ZN8ResponceD1Ev>
							error));

			WaitResponce = false;
 802144e:	687b      	ldr	r3, [r7, #4]
 8021450:	2200      	movs	r2, #0
 8021452:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8021456:	e001      	b.n	802145c <_ZN11QueueSender22ProcessPriorityRequestEv+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
 8021458:	b662      	cpsie	i
}
 802145a:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 802145c:	bf00      	nop
 802145e:	3730      	adds	r7, #48	; 0x30
 8021460:	46bd      	mov	sp, r7
 8021462:	bdb0      	pop	{r4, r5, r7, pc}
 8021464:	08040218 	.word	0x08040218
 8021468:	08040258 	.word	0x08040258
 802146c:	08040178 	.word	0x08040178
 8021470:	08040284 	.word	0x08040284

08021474 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8021474:	b5b0      	push	{r4, r5, r7, lr}
 8021476:	b088      	sub	sp, #32
 8021478:	af00      	add	r7, sp, #0
 802147a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 802147c:	b672      	cpsid	i
}
 802147e:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.empty() && !WaitResponce
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
				&& TransmitComplete) {
 8021486:	2b00      	cmp	r3, #0
 8021488:	d018      	beq.n	80214bc <_ZN11QueueSender15ProcessRequestsEv+0x48>
		if (TimerReady && !Requests.empty() && !WaitResponce
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	4618      	mov	r0, r3
 802148e:	f002 f907 	bl	80236a0 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8021492:	4603      	mov	r3, r0
 8021494:	f083 0301 	eor.w	r3, r3, #1
 8021498:	b2db      	uxtb	r3, r3
 802149a:	2b00      	cmp	r3, #0
 802149c:	d00e      	beq.n	80214bc <_ZN11QueueSender15ProcessRequestsEv+0x48>
 802149e:	687b      	ldr	r3, [r7, #4]
 80214a0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80214a4:	f083 0301 	eor.w	r3, r3, #1
 80214a8:	b2db      	uxtb	r3, r3
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d006      	beq.n	80214bc <_ZN11QueueSender15ProcessRequestsEv+0x48>
				&& TransmitComplete) {
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	d001      	beq.n	80214bc <_ZN11QueueSender15ProcessRequestsEv+0x48>
 80214b8:	2301      	movs	r3, #1
 80214ba:	e000      	b.n	80214be <_ZN11QueueSender15ProcessRequestsEv+0x4a>
 80214bc:	2300      	movs	r3, #0
		if (TimerReady && !Requests.empty() && !WaitResponce
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d07e      	beq.n	80215c0 <_ZN11QueueSender15ProcessRequestsEv+0x14c>
			WaitResponce = true;
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	2201      	movs	r2, #1
 80214c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 80214ca:	b662      	cpsie	i
}
 80214cc:	bf00      	nop
			__enable_irq();

			auto &request = Requests.front();
 80214ce:	687b      	ldr	r3, [r7, #4]
 80214d0:	4618      	mov	r0, r3
 80214d2:	f002 f8f7 	bl	80236c4 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 80214d6:	61b8      	str	r0, [r7, #24]
			auto &data = request.Data;
 80214d8:	69bb      	ldr	r3, [r7, #24]
 80214da:	617b      	str	r3, [r7, #20]

			assert(
 80214dc:	69bb      	ldr	r3, [r7, #24]
 80214de:	7c1b      	ldrb	r3, [r3, #16]
 80214e0:	4618      	mov	r0, r3
 80214e2:	f7ff fd1d 	bl	8020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>
 80214e6:	4603      	mov	r3, r0
 80214e8:	2b01      	cmp	r3, #1
 80214ea:	d005      	beq.n	80214f8 <_ZN11QueueSender15ProcessRequestsEv+0x84>
 80214ec:	4b37      	ldr	r3, [pc, #220]	; (80215cc <_ZN11QueueSender15ProcessRequestsEv+0x158>)
 80214ee:	4a38      	ldr	r2, [pc, #224]	; (80215d0 <_ZN11QueueSender15ProcessRequestsEv+0x15c>)
 80214f0:	21d3      	movs	r1, #211	; 0xd3
 80214f2:	4838      	ldr	r0, [pc, #224]	; (80215d4 <_ZN11QueueSender15ProcessRequestsEv+0x160>)
 80214f4:	f01d fd16 	bl	803ef24 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 80214f8:	2305      	movs	r3, #5
 80214fa:	613b      	str	r3, [r7, #16]
			const uint32_t delayMS = 5;
 80214fc:	2305      	movs	r3, #5
 80214fe:	60fb      	str	r3, [r7, #12]
			size_t i = 0;
 8021500:	2300      	movs	r3, #0
 8021502:	61fb      	str	r3, [r7, #28]

			while (i++ < nAttempts) {
 8021504:	69fb      	ldr	r3, [r7, #28]
 8021506:	1c5a      	adds	r2, r3, #1
 8021508:	61fa      	str	r2, [r7, #28]
 802150a:	2b04      	cmp	r3, #4
 802150c:	bf94      	ite	ls
 802150e:	2301      	movls	r3, #1
 8021510:	2300      	movhi	r3, #0
 8021512:	b2db      	uxtb	r3, r3
 8021514:	2b00      	cmp	r3, #0
 8021516:	d046      	beq.n	80215a6 <_ZN11QueueSender15ProcessRequestsEv+0x132>

				TransmitComplete = false;
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	2200      	movs	r2, #0
 802151c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

				assert(
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8021524:	6978      	ldr	r0, [r7, #20]
 8021526:	f002 f89d 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 802152a:	4605      	mov	r5, r0
 802152c:	6978      	ldr	r0, [r7, #20]
 802152e:	f002 f8a8 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021532:	4603      	mov	r3, r0
 8021534:	b29b      	uxth	r3, r3
 8021536:	461a      	mov	r2, r3
 8021538:	4629      	mov	r1, r5
 802153a:	4620      	mov	r0, r4
 802153c:	f016 fec6 	bl	80382cc <HAL_UART_Transmit_IT>
 8021540:	4603      	mov	r3, r0
 8021542:	2b00      	cmp	r3, #0
 8021544:	d005      	beq.n	8021552 <_ZN11QueueSender15ProcessRequestsEv+0xde>
 8021546:	4b24      	ldr	r3, [pc, #144]	; (80215d8 <_ZN11QueueSender15ProcessRequestsEv+0x164>)
 8021548:	4a21      	ldr	r2, [pc, #132]	; (80215d0 <_ZN11QueueSender15ProcessRequestsEv+0x15c>)
 802154a:	21df      	movs	r1, #223	; 0xdf
 802154c:	4821      	ldr	r0, [pc, #132]	; (80215d4 <_ZN11QueueSender15ProcessRequestsEv+0x160>)
 802154e:	f01d fce9 	bl	803ef24 <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data.data(),
								data.size()) == HAL_OK);

				while (!TransmitComplete)
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021558:	2b00      	cmp	r3, #0
 802155a:	d100      	bne.n	802155e <_ZN11QueueSender15ProcessRequestsEv+0xea>
 802155c:	e7f9      	b.n	8021552 <_ZN11QueueSender15ProcessRequestsEv+0xde>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 802155e:	69bb      	ldr	r3, [r7, #24]
 8021560:	68db      	ldr	r3, [r3, #12]
 8021562:	b2db      	uxtb	r3, r3
 8021564:	4619      	mov	r1, r3
 8021566:	6878      	ldr	r0, [r7, #4]
 8021568:	f000 f838 	bl	80215dc <_ZN11QueueSender7ReceiveEh>
 802156c:	4603      	mov	r3, r0
 802156e:	72fb      	strb	r3, [r7, #11]
				if (error == ErrorCode::Success)
 8021570:	7afb      	ldrb	r3, [r7, #11]
 8021572:	2b00      	cmp	r3, #0
 8021574:	d016      	beq.n	80215a4 <_ZN11QueueSender15ProcessRequestsEv+0x130>
					break;
				HAL_Delay(delayMS);
 8021576:	2005      	movs	r0, #5
 8021578:	f00c fc66 	bl	802de48 <HAL_Delay>
				if (error == ErrorCode::NACK) {
 802157c:	7afb      	ldrb	r3, [r7, #11]
 802157e:	2b02      	cmp	r3, #2
 8021580:	d1c0      	bne.n	8021504 <_ZN11QueueSender15ProcessRequestsEv+0x90>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8021586:	f107 010a 	add.w	r1, r7, #10
 802158a:	2300      	movs	r3, #0
 802158c:	2201      	movs	r2, #1
 802158e:	f016 fdc9 	bl	8038124 <HAL_UART_Receive>
 8021592:	4603      	mov	r3, r0
 8021594:	2b00      	cmp	r3, #0
 8021596:	bf0c      	ite	eq
 8021598:	2301      	moveq	r3, #1
 802159a:	2300      	movne	r3, #0
 802159c:	b2db      	uxtb	r3, r3
 802159e:	2b00      	cmp	r3, #0
 80215a0:	d0b0      	beq.n	8021504 <_ZN11QueueSender15ProcessRequestsEv+0x90>
 80215a2:	e7ee      	b.n	8021582 <_ZN11QueueSender15ProcessRequestsEv+0x10e>
					break;
 80215a4:	bf00      	nop
						;
				}
			}

			Requests.pop_front();
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	4618      	mov	r0, r3
 80215aa:	f002 f89f 	bl	80236ec <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
			WaitResponce = false;
 80215ae:	687b      	ldr	r3, [r7, #4]
 80215b0:	2200      	movs	r2, #0
 80215b2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			TimerReady = false;
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	2200      	movs	r2, #0
 80215ba:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		} else {
			__enable_irq();
		}
	}
 80215be:	e001      	b.n	80215c4 <_ZN11QueueSender15ProcessRequestsEv+0x150>
  __ASM volatile ("cpsie i" : : : "memory");
 80215c0:	b662      	cpsie	i
}
 80215c2:	bf00      	nop
 80215c4:	bf00      	nop
 80215c6:	3720      	adds	r7, #32
 80215c8:	46bd      	mov	sp, r7
 80215ca:	bdb0      	pop	{r4, r5, r7, pc}
 80215cc:	080402cc 	.word	0x080402cc
 80215d0:	08040310 	.word	0x08040310
 80215d4:	08040178 	.word	0x08040178
 80215d8:	08040284 	.word	0x08040284

080215dc <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 80215dc:	b590      	push	{r4, r7, lr}
 80215de:	b085      	sub	sp, #20
 80215e0:	af00      	add	r7, sp, #0
 80215e2:	6078      	str	r0, [r7, #4]
 80215e4:	460b      	mov	r3, r1
 80215e6:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 80215e8:	78fb      	ldrb	r3, [r7, #3]
 80215ea:	2b03      	cmp	r3, #3
 80215ec:	d805      	bhi.n	80215fa <_ZN11QueueSender7ReceiveEh+0x1e>
 80215ee:	4b2f      	ldr	r3, [pc, #188]	; (80216ac <_ZN11QueueSender7ReceiveEh+0xd0>)
 80215f0:	4a2f      	ldr	r2, [pc, #188]	; (80216b0 <_ZN11QueueSender7ReceiveEh+0xd4>)
 80215f2:	21fa      	movs	r1, #250	; 0xfa
 80215f4:	482f      	ldr	r0, [pc, #188]	; (80216b4 <_ZN11QueueSender7ReceiveEh+0xd8>)
 80215f6:	f01d fc95 	bl	803ef24 <__assert_func>
		CurrentResponceBuffer.resize(size);
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	3368      	adds	r3, #104	; 0x68
 80215fe:	78fa      	ldrb	r2, [r7, #3]
 8021600:	4611      	mov	r1, r2
 8021602:	4618      	mov	r0, r3
 8021604:	f002 f896 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	3368      	adds	r3, #104	; 0x68
 8021610:	4618      	mov	r0, r3
 8021612:	f002 f827 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021616:	4601      	mov	r1, r0
				TimeoutS);
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 802161c:	2204      	movs	r2, #4
 802161e:	4620      	mov	r0, r4
 8021620:	f016 fd80 	bl	8038124 <HAL_UART_Receive>
 8021624:	4603      	mov	r3, r0
 8021626:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 8021628:	7bfb      	ldrb	r3, [r7, #15]
 802162a:	2b03      	cmp	r3, #3
 802162c:	d101      	bne.n	8021632 <_ZN11QueueSender7ReceiveEh+0x56>
			return ErrorCode::Timeout;
 802162e:	2301      	movs	r3, #1
 8021630:	e037      	b.n	80216a2 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (IsNack(CurrentResponceBuffer.data()))
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	3368      	adds	r3, #104	; 0x68
 8021636:	4618      	mov	r0, r3
 8021638:	f002 f814 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 802163c:	4603      	mov	r3, r0
 802163e:	4619      	mov	r1, r3
 8021640:	6878      	ldr	r0, [r7, #4]
 8021642:	f000 f839 	bl	80216b8 <_ZN11QueueSender6IsNackEPKh>
 8021646:	4603      	mov	r3, r0
 8021648:	2b00      	cmp	r3, #0
 802164a:	d001      	beq.n	8021650 <_ZN11QueueSender7ReceiveEh+0x74>
			return ErrorCode::NACK;
 802164c:	2302      	movs	r3, #2
 802164e:	e028      	b.n	80216a2 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (ret != HAL_OK)
 8021650:	7bfb      	ldrb	r3, [r7, #15]
 8021652:	2b00      	cmp	r3, #0
 8021654:	d001      	beq.n	802165a <_ZN11QueueSender7ReceiveEh+0x7e>
			return ErrorCode::Unknown;
 8021656:	2303      	movs	r3, #3
 8021658:	e023      	b.n	80216a2 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (size == 4)
 802165a:	78fb      	ldrb	r3, [r7, #3]
 802165c:	2b04      	cmp	r3, #4
 802165e:	d101      	bne.n	8021664 <_ZN11QueueSender7ReceiveEh+0x88>
			return ErrorCode::Success;
 8021660:	2300      	movs	r3, #0
 8021662:	e01e      	b.n	80216a2 <_ZN11QueueSender7ReceiveEh+0xc6>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021664:	687b      	ldr	r3, [r7, #4]
 8021666:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	3368      	adds	r3, #104	; 0x68
 802166c:	4618      	mov	r0, r3
 802166e:	f001 fff9 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021672:	4603      	mov	r3, r0
 8021674:	1d19      	adds	r1, r3, #4
 8021676:	78fb      	ldrb	r3, [r7, #3]
 8021678:	b29b      	uxth	r3, r3
 802167a:	3b04      	subs	r3, #4
 802167c:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021682:	4620      	mov	r0, r4
 8021684:	f016 fd4e 	bl	8038124 <HAL_UART_Receive>
 8021688:	4603      	mov	r3, r0
 802168a:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 802168c:	7bfb      	ldrb	r3, [r7, #15]
 802168e:	2b03      	cmp	r3, #3
 8021690:	d101      	bne.n	8021696 <_ZN11QueueSender7ReceiveEh+0xba>
			return ErrorCode::Timeout;
 8021692:	2301      	movs	r3, #1
 8021694:	e005      	b.n	80216a2 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (ret != HAL_OK)
 8021696:	7bfb      	ldrb	r3, [r7, #15]
 8021698:	2b00      	cmp	r3, #0
 802169a:	d001      	beq.n	80216a0 <_ZN11QueueSender7ReceiveEh+0xc4>
			return ErrorCode::Unknown;
 802169c:	2303      	movs	r3, #3
 802169e:	e000      	b.n	80216a2 <_ZN11QueueSender7ReceiveEh+0xc6>

		return ErrorCode::Success;
 80216a0:	2300      	movs	r3, #0
	}
 80216a2:	4618      	mov	r0, r3
 80216a4:	3714      	adds	r7, #20
 80216a6:	46bd      	mov	sp, r7
 80216a8:	bd90      	pop	{r4, r7, pc}
 80216aa:	bf00      	nop
 80216ac:	08040334 	.word	0x08040334
 80216b0:	08040340 	.word	0x08040340
 80216b4:	08040178 	.word	0x08040178

080216b8 <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 80216b8:	b580      	push	{r7, lr}
 80216ba:	b084      	sub	sp, #16
 80216bc:	af00      	add	r7, sp, #0
 80216be:	6078      	str	r0, [r7, #4]
 80216c0:	6039      	str	r1, [r7, #0]
		assert(data);
 80216c2:	683b      	ldr	r3, [r7, #0]
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d106      	bne.n	80216d6 <_ZN11QueueSender6IsNackEPKh+0x1e>
 80216c8:	4b11      	ldr	r3, [pc, #68]	; (8021710 <_ZN11QueueSender6IsNackEPKh+0x58>)
 80216ca:	4a12      	ldr	r2, [pc, #72]	; (8021714 <_ZN11QueueSender6IsNackEPKh+0x5c>)
 80216cc:	f240 1119 	movw	r1, #281	; 0x119
 80216d0:	4811      	ldr	r0, [pc, #68]	; (8021718 <_ZN11QueueSender6IsNackEPKh+0x60>)
 80216d2:	f01d fc27 	bl	803ef24 <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 80216d6:	4b11      	ldr	r3, [pc, #68]	; (802171c <_ZN11QueueSender6IsNackEPKh+0x64>)
 80216d8:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 80216da:	2300      	movs	r3, #0
 80216dc:	60fb      	str	r3, [r7, #12]
 80216de:	68fb      	ldr	r3, [r7, #12]
 80216e0:	2b03      	cmp	r3, #3
 80216e2:	dc10      	bgt.n	8021706 <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 80216e4:	68fb      	ldr	r3, [r7, #12]
 80216e6:	683a      	ldr	r2, [r7, #0]
 80216e8:	4413      	add	r3, r2
 80216ea:	781a      	ldrb	r2, [r3, #0]
 80216ec:	f107 0108 	add.w	r1, r7, #8
 80216f0:	68fb      	ldr	r3, [r7, #12]
 80216f2:	440b      	add	r3, r1
 80216f4:	781b      	ldrb	r3, [r3, #0]
 80216f6:	429a      	cmp	r2, r3
 80216f8:	d001      	beq.n	80216fe <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 80216fa:	2300      	movs	r3, #0
 80216fc:	e004      	b.n	8021708 <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 80216fe:	68fb      	ldr	r3, [r7, #12]
 8021700:	3301      	adds	r3, #1
 8021702:	60fb      	str	r3, [r7, #12]
 8021704:	e7eb      	b.n	80216de <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 8021706:	2301      	movs	r3, #1
	}
 8021708:	4618      	mov	r0, r3
 802170a:	3710      	adds	r7, #16
 802170c:	46bd      	mov	sp, r7
 802170e:	bd80      	pop	{r7, pc}
 8021710:	0804037c 	.word	0x0804037c
 8021714:	08040384 	.word	0x08040384
 8021718:	08040178 	.word	0x08040178
 802171c:	1715fe04 	.word	0x1715fe04

08021720 <_ZN8ResponceC1Ev>:
struct Responce {
 8021720:	b580      	push	{r7, lr}
 8021722:	b082      	sub	sp, #8
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	4618      	mov	r0, r3
 802172c:	f7ff fc7b 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8021730:	687b      	ldr	r3, [r7, #4]
 8021732:	4618      	mov	r0, r3
 8021734:	3708      	adds	r7, #8
 8021736:	46bd      	mov	sp, r7
 8021738:	bd80      	pop	{r7, pc}

0802173a <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 802173a:	b580      	push	{r7, lr}
 802173c:	b084      	sub	sp, #16
 802173e:	af00      	add	r7, sp, #0
 8021740:	60f8      	str	r0, [r7, #12]
 8021742:	60b9      	str	r1, [r7, #8]
 8021744:	607a      	str	r2, [r7, #4]
 8021746:	70fb      	strb	r3, [r7, #3]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
 8021748:	68f8      	ldr	r0, [r7, #12]
 802174a:	f7ff ffe9 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.Data = data;
 802174e:	68fb      	ldr	r3, [r7, #12]
 8021750:	6879      	ldr	r1, [r7, #4]
 8021752:	4618      	mov	r0, r3
 8021754:	f002 f82a 	bl	80237ac <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 8021758:	68fb      	ldr	r3, [r7, #12]
 802175a:	2200      	movs	r2, #0
 802175c:	731a      	strb	r2, [r3, #12]
		responce.Error = ErrorCode::Serialize(error);
 802175e:	7e3b      	ldrb	r3, [r7, #24]
 8021760:	4618      	mov	r0, r3
 8021762:	f7ff fbe9 	bl	8020f38 <_ZN11QueueSender9ErrorCode9SerializeEh>
 8021766:	4603      	mov	r3, r0
 8021768:	461a      	mov	r2, r3
 802176a:	68fb      	ldr	r3, [r7, #12]
 802176c:	739a      	strb	r2, [r3, #14]
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 802176e:	78fb      	ldrb	r3, [r7, #3]
 8021770:	4618      	mov	r0, r3
 8021772:	f7ff fbc9 	bl	8020f08 <_ZN11QueueSender11MessageMode9SerializeEh>
 8021776:	4603      	mov	r3, r0
 8021778:	461a      	mov	r2, r3
 802177a:	68fb      	ldr	r3, [r7, #12]
 802177c:	735a      	strb	r2, [r3, #13]
		return responce;
 802177e:	bf00      	nop
	}
 8021780:	68f8      	ldr	r0, [r7, #12]
 8021782:	3710      	adds	r7, #16
 8021784:	46bd      	mov	sp, r7
 8021786:	bd80      	pop	{r7, pc}

08021788 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 8021788:	b580      	push	{r7, lr}
 802178a:	b08a      	sub	sp, #40	; 0x28
 802178c:	af02      	add	r7, sp, #8
 802178e:	6078      	str	r0, [r7, #4]
 8021790:	6039      	str	r1, [r7, #0]
		std::vector<uint8_t> data;
 8021792:	f107 0310 	add.w	r3, r7, #16
 8021796:	4618      	mov	r0, r3
 8021798:	f7ff fc45 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
		data.resize(Info::Size);
 802179c:	f107 0310 	add.w	r3, r7, #16
 80217a0:	2104      	movs	r1, #4
 80217a2:	4618      	mov	r0, r3
 80217a4:	f001 ffc6 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = data.data();
 80217a8:	f107 0310 	add.w	r3, r7, #16
 80217ac:	4618      	mov	r0, r3
 80217ae:	f001 ff59 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 80217b2:	4603      	mov	r3, r0
 80217b4:	60fb      	str	r3, [r7, #12]
		GetInfo().SerializeTo(&ptr);
 80217b6:	6838      	ldr	r0, [r7, #0]
 80217b8:	f000 f835 	bl	8021826 <_ZNK11QueueSender7GetInfoEv>
 80217bc:	4603      	mov	r3, r0
 80217be:	61fb      	str	r3, [r7, #28]
 80217c0:	f107 020c 	add.w	r2, r7, #12
 80217c4:	f107 031c 	add.w	r3, r7, #28
 80217c8:	4611      	mov	r1, r2
 80217ca:	4618      	mov	r0, r3
 80217cc:	f7ff fbc0 	bl	8020f50 <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 80217d0:	6878      	ldr	r0, [r7, #4]
 80217d2:	f107 0210 	add.w	r2, r7, #16
 80217d6:	2300      	movs	r3, #0
 80217d8:	9300      	str	r3, [sp, #0]
 80217da:	2302      	movs	r3, #2
 80217dc:	6839      	ldr	r1, [r7, #0]
 80217de:	f7ff ffac 	bl	802173a <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
		std::vector<uint8_t> data;
 80217e2:	f107 0310 	add.w	r3, r7, #16
 80217e6:	4618      	mov	r0, r3
 80217e8:	f001 fe78 	bl	80234dc <_ZNSt6vectorIhSaIhEED1Ev>
		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 80217ec:	bf00      	nop
	}
 80217ee:	6878      	ldr	r0, [r7, #4]
 80217f0:	3720      	adds	r7, #32
 80217f2:	46bd      	mov	sp, r7
 80217f4:	bd80      	pop	{r7, pc}

080217f6 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 80217f6:	b480      	push	{r7}
 80217f8:	b083      	sub	sp, #12
 80217fa:	af00      	add	r7, sp, #0
 80217fc:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 80217fe:	bf00      	nop
 8021800:	370c      	adds	r7, #12
 8021802:	46bd      	mov	sp, r7
 8021804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021808:	4770      	bx	lr

0802180a <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 802180a:	b480      	push	{r7}
 802180c:	b083      	sub	sp, #12
 802180e:	af00      	add	r7, sp, #0
 8021810:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	2201      	movs	r2, #1
 8021816:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}
 802181a:	bf00      	nop
 802181c:	370c      	adds	r7, #12
 802181e:	46bd      	mov	sp, r7
 8021820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021824:	4770      	bx	lr

08021826 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 8021826:	b580      	push	{r7, lr}
 8021828:	b084      	sub	sp, #16
 802182a:	af00      	add	r7, sp, #0
 802182c:	6078      	str	r0, [r7, #4]
		return {Requests.size(), Responces.size()};
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	4618      	mov	r0, r3
 8021832:	f002 f8aa 	bl	802398a <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8021836:	4603      	mov	r3, r0
 8021838:	b29b      	uxth	r3, r3
 802183a:	81bb      	strh	r3, [r7, #12]
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	3328      	adds	r3, #40	; 0x28
 8021840:	4618      	mov	r0, r3
 8021842:	f002 f8b4 	bl	80239ae <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>
 8021846:	4603      	mov	r3, r0
 8021848:	b29b      	uxth	r3, r3
 802184a:	81fb      	strh	r3, [r7, #14]
 802184c:	2300      	movs	r3, #0
 802184e:	89ba      	ldrh	r2, [r7, #12]
 8021850:	f362 030f 	bfi	r3, r2, #0, #16
 8021854:	89fa      	ldrh	r2, [r7, #14]
 8021856:	f362 431f 	bfi	r3, r2, #16, #16
	}
 802185a:	4618      	mov	r0, r3
 802185c:	3710      	adds	r7, #16
 802185e:	46bd      	mov	sp, r7
 8021860:	bd80      	pop	{r7, pc}

08021862 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 8021862:	b580      	push	{r7, lr}
 8021864:	b082      	sub	sp, #8
 8021866:	af00      	add	r7, sp, #0
 8021868:	6078      	str	r0, [r7, #4]
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	4618      	mov	r0, r3
 802186e:	f001 fd96 	bl	802339e <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	4618      	mov	r0, r3
 8021876:	3708      	adds	r7, #8
 8021878:	46bd      	mov	sp, r7
 802187a:	bd80      	pop	{r7, pc}

0802187c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 802187c:	b580      	push	{r7, lr}
 802187e:	b084      	sub	sp, #16
 8021880:	af00      	add	r7, sp, #0
 8021882:	60f8      	str	r0, [r7, #12]
 8021884:	60b9      	str	r1, [r7, #8]
 8021886:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021888:	68fb      	ldr	r3, [r7, #12]
 802188a:	4618      	mov	r0, r3
 802188c:	f002 f89c 	bl	80239c8 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	3334      	adds	r3, #52	; 0x34
 8021894:	4618      	mov	r0, r3
 8021896:	f7ff fbd3 	bl	8021040 <_ZN7RequestC1Ev>
 802189a:	68fb      	ldr	r3, [r7, #12]
 802189c:	3348      	adds	r3, #72	; 0x48
 802189e:	4618      	mov	r0, r3
 80218a0:	f7ff fbc1 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	68ba      	ldr	r2, [r7, #8]
 80218a8:	655a      	str	r2, [r3, #84]	; 0x54
 80218aa:	68fb      	ldr	r3, [r7, #12]
 80218ac:	687a      	ldr	r2, [r7, #4]
 80218ae:	659a      	str	r2, [r3, #88]	; 0x58
 80218b0:	68fb      	ldr	r3, [r7, #12]
 80218b2:	2201      	movs	r2, #1
 80218b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 80218b8:	68bb      	ldr	r3, [r7, #8]
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	d106      	bne.n	80218cc <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>
 80218be:	4b06      	ldr	r3, [pc, #24]	; (80218d8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 80218c0:	4a06      	ldr	r2, [pc, #24]	; (80218dc <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 80218c2:	f240 1161 	movw	r1, #353	; 0x161
 80218c6:	4806      	ldr	r0, [pc, #24]	; (80218e0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x64>)
 80218c8:	f01d fb2c 	bl	803ef24 <__assert_func>
	}
 80218cc:	68fb      	ldr	r3, [r7, #12]
 80218ce:	4618      	mov	r0, r3
 80218d0:	3710      	adds	r7, #16
 80218d2:	46bd      	mov	sp, r7
 80218d4:	bd80      	pop	{r7, pc}
 80218d6:	bf00      	nop
 80218d8:	0804019c 	.word	0x0804019c
 80218dc:	080403b0 	.word	0x080403b0
 80218e0:	08040178 	.word	0x08040178

080218e4 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 80218e4:	b580      	push	{r7, lr}
 80218e6:	b082      	sub	sp, #8
 80218e8:	af00      	add	r7, sp, #0
 80218ea:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	2200      	movs	r2, #0
 80218f0:	631a      	str	r2, [r3, #48]	; 0x30
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 80218f2:	687b      	ldr	r3, [r7, #4]
 80218f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	3328      	adds	r3, #40	; 0x28
 80218fa:	2201      	movs	r2, #1
 80218fc:	4619      	mov	r1, r3
 80218fe:	f016 fd8d 	bl	803841c <HAL_UART_Receive_IT>
 8021902:	4603      	mov	r3, r0
 8021904:	2b00      	cmp	r3, #0
 8021906:	d006      	beq.n	8021916 <_ZN13HeadInterface14ResetReadStateEv+0x32>
 8021908:	4b05      	ldr	r3, [pc, #20]	; (8021920 <_ZN13HeadInterface14ResetReadStateEv+0x3c>)
 802190a:	4a06      	ldr	r2, [pc, #24]	; (8021924 <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 802190c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8021910:	4805      	ldr	r0, [pc, #20]	; (8021928 <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021912:	f01d fb07 	bl	803ef24 <__assert_func>
	}
 8021916:	bf00      	nop
 8021918:	3708      	adds	r7, #8
 802191a:	46bd      	mov	sp, r7
 802191c:	bd80      	pop	{r7, pc}
 802191e:	bf00      	nop
 8021920:	080403ec 	.word	0x080403ec
 8021924:	08040428 	.word	0x08040428
 8021928:	08040178 	.word	0x08040178

0802192c <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 802192c:	b580      	push	{r7, lr}
 802192e:	b082      	sub	sp, #8
 8021930:	af00      	add	r7, sp, #0
 8021932:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 8021934:	687b      	ldr	r3, [r7, #4]
 8021936:	4618      	mov	r0, r3
 8021938:	f002 f85a 	bl	80239f0 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 802193c:	4603      	mov	r3, r0
 802193e:	f083 0301 	eor.w	r3, r3, #1
 8021942:	b2db      	uxtb	r3, r3
	}
 8021944:	4618      	mov	r0, r3
 8021946:	3708      	adds	r7, #8
 8021948:	46bd      	mov	sp, r7
 802194a:	bd80      	pop	{r7, pc}

0802194c <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 802194c:	b590      	push	{r4, r7, lr}
 802194e:	b097      	sub	sp, #92	; 0x5c
 8021950:	af00      	add	r7, sp, #0
 8021952:	6078      	str	r0, [r7, #4]
 8021954:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802195c:	2b00      	cmp	r3, #0
 802195e:	d100      	bne.n	8021962 <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021960:	e7f9      	b.n	8021956 <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 8021962:	683b      	ldr	r3, [r7, #0]
 8021964:	4618      	mov	r0, r3
 8021966:	f001 fe8c 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802196a:	4603      	mov	r3, r0
 802196c:	3306      	adds	r3, #6
 802196e:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	3348      	adds	r3, #72	; 0x48
 8021974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021976:	4618      	mov	r0, r3
 8021978:	f001 fedc 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	3348      	adds	r3, #72	; 0x48
 8021980:	4618      	mov	r0, r3
 8021982:	f001 fe6f 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021986:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 8021988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802198a:	1c5a      	adds	r2, r3, #1
 802198c:	653a      	str	r2, [r7, #80]	; 0x50
 802198e:	22ff      	movs	r2, #255	; 0xff
 8021990:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021994:	1c5a      	adds	r2, r3, #1
 8021996:	653a      	str	r2, [r7, #80]	; 0x50
 8021998:	22aa      	movs	r2, #170	; 0xaa
 802199a:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 802199c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802199e:	1c5a      	adds	r2, r3, #1
 80219a0:	653a      	str	r2, [r7, #80]	; 0x50
 80219a2:	683a      	ldr	r2, [r7, #0]
 80219a4:	7b12      	ldrb	r2, [r2, #12]
 80219a6:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 80219a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80219aa:	1c5a      	adds	r2, r3, #1
 80219ac:	653a      	str	r2, [r7, #80]	; 0x50
 80219ae:	683a      	ldr	r2, [r7, #0]
 80219b0:	7b52      	ldrb	r2, [r2, #13]
 80219b2:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 80219b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80219b6:	1c5a      	adds	r2, r3, #1
 80219b8:	653a      	str	r2, [r7, #80]	; 0x50
 80219ba:	683a      	ldr	r2, [r7, #0]
 80219bc:	7b92      	ldrb	r2, [r2, #14]
 80219be:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 80219c0:	683b      	ldr	r3, [r7, #0]
 80219c2:	4618      	mov	r0, r3
 80219c4:	f002 f821 	bl	8023a0a <_ZNKSt6vectorIhSaIhEE4dataEv>
 80219c8:	4604      	mov	r4, r0
 80219ca:	683b      	ldr	r3, [r7, #0]
 80219cc:	4618      	mov	r0, r3
 80219ce:	f001 fe58 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80219d2:	4603      	mov	r3, r0
 80219d4:	461a      	mov	r2, r3
 80219d6:	4621      	mov	r1, r4
 80219d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80219da:	f01d fb0d 	bl	803eff8 <memcpy>

		ptr += responce.Data.size();
 80219de:	683b      	ldr	r3, [r7, #0]
 80219e0:	4618      	mov	r0, r3
 80219e2:	f001 fe4e 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80219e6:	4602      	mov	r2, r0
 80219e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80219ea:	4413      	add	r3, r2
 80219ec:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 80219ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80219f0:	22af      	movs	r2, #175	; 0xaf
 80219f2:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	2200      	movs	r2, #0
 80219f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	3348      	adds	r3, #72	; 0x48
 8021a00:	4618      	mov	r0, r3
 8021a02:	f001 fe3e 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021a06:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	3348      	adds	r3, #72	; 0x48
 8021a0c:	4618      	mov	r0, r3
 8021a0e:	f001 fe29 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021a12:	4601      	mov	r1, r0
 8021a14:	f107 030c 	add.w	r3, r7, #12
 8021a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021a1a:	4618      	mov	r0, r3
 8021a1c:	f01d faec 	bl	803eff8 <memcpy>

		assert(
 8021a20:	687b      	ldr	r3, [r7, #4]
 8021a22:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	3348      	adds	r3, #72	; 0x48
 8021a28:	4618      	mov	r0, r3
 8021a2a:	f001 fe1b 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021a2e:	4601      	mov	r1, r0
 8021a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021a32:	b29b      	uxth	r3, r3
 8021a34:	461a      	mov	r2, r3
 8021a36:	4620      	mov	r0, r4
 8021a38:	f016 fc48 	bl	80382cc <HAL_UART_Transmit_IT>
 8021a3c:	4603      	mov	r3, r0
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d006      	beq.n	8021a50 <_ZN13HeadInterface4SendERK8Responce+0x104>
 8021a42:	4b05      	ldr	r3, [pc, #20]	; (8021a58 <_ZN13HeadInterface4SendERK8Responce+0x10c>)
 8021a44:	4a05      	ldr	r2, [pc, #20]	; (8021a5c <_ZN13HeadInterface4SendERK8Responce+0x110>)
 8021a46:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8021a4a:	4805      	ldr	r0, [pc, #20]	; (8021a60 <_ZN13HeadInterface4SendERK8Responce+0x114>)
 8021a4c:	f01d fa6a 	bl	803ef24 <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021a50:	bf00      	nop
 8021a52:	375c      	adds	r7, #92	; 0x5c
 8021a54:	46bd      	mov	sp, r7
 8021a56:	bd90      	pop	{r4, r7, pc}
 8021a58:	08040450 	.word	0x08040450
 8021a5c:	080404a0 	.word	0x080404a0
 8021a60:	08040178 	.word	0x08040178

08021a64 <_ZN7RequestC1EOS_>:
struct Request {
 8021a64:	b580      	push	{r7, lr}
 8021a66:	b082      	sub	sp, #8
 8021a68:	af00      	add	r7, sp, #0
 8021a6a:	6078      	str	r0, [r7, #4]
 8021a6c:	6039      	str	r1, [r7, #0]
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	683a      	ldr	r2, [r7, #0]
 8021a72:	4611      	mov	r1, r2
 8021a74:	4618      	mov	r0, r3
 8021a76:	f7ff fbf0 	bl	802125a <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8021a7a:	683b      	ldr	r3, [r7, #0]
 8021a7c:	68da      	ldr	r2, [r3, #12]
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	60da      	str	r2, [r3, #12]
 8021a82:	683b      	ldr	r3, [r7, #0]
 8021a84:	7c1a      	ldrb	r2, [r3, #16]
 8021a86:	687b      	ldr	r3, [r7, #4]
 8021a88:	741a      	strb	r2, [r3, #16]
 8021a8a:	683b      	ldr	r3, [r7, #0]
 8021a8c:	7c5a      	ldrb	r2, [r3, #17]
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	745a      	strb	r2, [r3, #17]
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	4618      	mov	r0, r3
 8021a96:	3708      	adds	r7, #8
 8021a98:	46bd      	mov	sp, r7
 8021a9a:	bd80      	pop	{r7, pc}

08021a9c <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021a9c:	b580      	push	{r7, lr}
 8021a9e:	b082      	sub	sp, #8
 8021aa0:	af00      	add	r7, sp, #0
 8021aa2:	6078      	str	r0, [r7, #4]
 8021aa4:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021aa6:	6838      	ldr	r0, [r7, #0]
 8021aa8:	f7ff ff40 	bl	802192c <_ZNK13HeadInterface10HasRequestEv>
 8021aac:	4603      	mov	r3, r0
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d106      	bne.n	8021ac0 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021ab2:	4b0e      	ldr	r3, [pc, #56]	; (8021aec <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021ab4:	4a0e      	ldr	r2, [pc, #56]	; (8021af0 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021ab6:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8021aba:	480e      	ldr	r0, [pc, #56]	; (8021af4 <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021abc:	f01d fa32 	bl	803ef24 <__assert_func>
		auto request = std::move(Requests.front());
 8021ac0:	683b      	ldr	r3, [r7, #0]
 8021ac2:	4618      	mov	r0, r3
 8021ac4:	f001 ffb0 	bl	8023a28 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 8021ac8:	4603      	mov	r3, r0
 8021aca:	4618      	mov	r0, r3
 8021acc:	f001 fd21 	bl	8023512 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021ad0:	4603      	mov	r3, r0
 8021ad2:	4619      	mov	r1, r3
 8021ad4:	6878      	ldr	r0, [r7, #4]
 8021ad6:	f7ff ffc5 	bl	8021a64 <_ZN7RequestC1EOS_>
		Requests.pop();
 8021ada:	683b      	ldr	r3, [r7, #0]
 8021adc:	4618      	mov	r0, r3
 8021ade:	f001 ffb0 	bl	8023a42 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8021ae2:	bf00      	nop
	}
 8021ae4:	6878      	ldr	r0, [r7, #4]
 8021ae6:	3708      	adds	r7, #8
 8021ae8:	46bd      	mov	sp, r7
 8021aea:	bd80      	pop	{r7, pc}
 8021aec:	080404cc 	.word	0x080404cc
 8021af0:	080404dc 	.word	0x080404dc
 8021af4:	08040178 	.word	0x08040178

08021af8 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021af8:	b480      	push	{r7}
 8021afa:	b083      	sub	sp, #12
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	2201      	movs	r2, #1
 8021b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8021b08:	bf00      	nop
 8021b0a:	370c      	adds	r7, #12
 8021b0c:	46bd      	mov	sp, r7
 8021b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b12:	4770      	bx	lr

08021b14 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021b14:	b590      	push	{r4, r7, lr}
 8021b16:	b089      	sub	sp, #36	; 0x24
 8021b18:	af00      	add	r7, sp, #0
 8021b1a:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b20:	2b07      	cmp	r3, #7
 8021b22:	f200 80d6 	bhi.w	8021cd2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 8021b26:	a201      	add	r2, pc, #4	; (adr r2, 8021b2c <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 8021b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b2c:	08021b4d 	.word	0x08021b4d
 8021b30:	08021b77 	.word	0x08021b77
 8021b34:	08021ba1 	.word	0x08021ba1
 8021b38:	08021bc5 	.word	0x08021bc5
 8021b3c:	08021bfb 	.word	0x08021bfb
 8021b40:	08021c1f 	.word	0x08021c1f
 8021b44:	08021c51 	.word	0x08021c51
 8021b48:	08021c69 	.word	0x08021c69
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021b52:	2bff      	cmp	r3, #255	; 0xff
 8021b54:	d10b      	bne.n	8021b6e <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	2201      	movs	r2, #1
 8021b5a:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	3328      	adds	r3, #40	; 0x28
 8021b64:	2201      	movs	r2, #1
 8021b66:	4619      	mov	r1, r3
 8021b68:	f016 fc58 	bl	803841c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021b6c:	e0b5      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8021b6e:	6878      	ldr	r0, [r7, #4]
 8021b70:	f7ff feb8 	bl	80218e4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021b74:	e0b1      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021b76:	687b      	ldr	r3, [r7, #4]
 8021b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021b7c:	2baa      	cmp	r3, #170	; 0xaa
 8021b7e:	d10b      	bne.n	8021b98 <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	2202      	movs	r2, #2
 8021b84:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	3328      	adds	r3, #40	; 0x28
 8021b8e:	2201      	movs	r2, #1
 8021b90:	4619      	mov	r1, r3
 8021b92:	f016 fc43 	bl	803841c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021b96:	e0a0      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8021b98:	6878      	ldr	r0, [r7, #4]
 8021b9a:	f7ff fea3 	bl	80218e4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021b9e:	e09c      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	2203      	movs	r2, #3
 8021bb0:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021bb2:	687b      	ldr	r3, [r7, #4]
 8021bb4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	3328      	adds	r3, #40	; 0x28
 8021bba:	2201      	movs	r2, #1
 8021bbc:	4619      	mov	r1, r3
 8021bbe:	f016 fc2d 	bl	803841c <HAL_UART_Receive_IT>
			break;
 8021bc2:	e08a      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021bca:	461a      	mov	r2, r3
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 8021bd0:	687b      	ldr	r3, [r7, #4]
 8021bd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021bda:	4619      	mov	r1, r3
 8021bdc:	4610      	mov	r0, r2
 8021bde:	f001 fda9 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	2204      	movs	r2, #4
 8021be6:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	3328      	adds	r3, #40	; 0x28
 8021bf0:	2201      	movs	r2, #1
 8021bf2:	4619      	mov	r1, r3
 8021bf4:	f016 fc12 	bl	803841c <HAL_UART_Receive_IT>
			break;
 8021bf8:	e06f      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021c00:	461a      	mov	r2, r3
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	2205      	movs	r2, #5
 8021c0a:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	3328      	adds	r3, #40	; 0x28
 8021c14:	2201      	movs	r2, #1
 8021c16:	4619      	mov	r1, r3
 8021c18:	f016 fc00 	bl	803841c <HAL_UART_Receive_IT>
			break;
 8021c1c:	e05d      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	2206      	movs	r2, #6
 8021c2e:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	3334      	adds	r3, #52	; 0x34
 8021c38:	4618      	mov	r0, r3
 8021c3a:	f001 fd13 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021c3e:	4601      	mov	r1, r0
					RequestSize);
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021c44:	b29b      	uxth	r3, r3
 8021c46:	461a      	mov	r2, r3
 8021c48:	4620      	mov	r0, r4
 8021c4a:	f016 fbe7 	bl	803841c <HAL_UART_Receive_IT>
			break;
 8021c4e:	e044      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	2207      	movs	r2, #7
 8021c54:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	3328      	adds	r3, #40	; 0x28
 8021c5e:	2201      	movs	r2, #1
 8021c60:	4619      	mov	r1, r3
 8021c62:	f016 fbdb 	bl	803841c <HAL_UART_Receive_IT>
			break;
 8021c66:	e038      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021c6e:	2baf      	cmp	r3, #175	; 0xaf
 8021c70:	d12b      	bne.n	8021cca <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.emplace(std::move(CurrentRequest));
 8021c72:	687c      	ldr	r4, [r7, #4]
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	3334      	adds	r3, #52	; 0x34
 8021c78:	4618      	mov	r0, r3
 8021c7a:	f001 fc4a 	bl	8023512 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021c7e:	4603      	mov	r3, r0
 8021c80:	4619      	mov	r1, r3
 8021c82:	4620      	mov	r0, r4
 8021c84:	f001 fee9 	bl	8023a5a <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
				CurrentRequest = { };
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8021c8e:	f107 030c 	add.w	r3, r7, #12
 8021c92:	2200      	movs	r2, #0
 8021c94:	601a      	str	r2, [r3, #0]
 8021c96:	605a      	str	r2, [r3, #4]
 8021c98:	609a      	str	r2, [r3, #8]
 8021c9a:	60da      	str	r2, [r3, #12]
 8021c9c:	611a      	str	r2, [r3, #16]
 8021c9e:	2300      	movs	r3, #0
 8021ca0:	60fb      	str	r3, [r7, #12]
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	613b      	str	r3, [r7, #16]
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	617b      	str	r3, [r7, #20]
 8021caa:	f107 030c 	add.w	r3, r7, #12
 8021cae:	4618      	mov	r0, r3
 8021cb0:	f7ff f9b9 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8021cb4:	f107 030c 	add.w	r3, r7, #12
 8021cb8:	4619      	mov	r1, r3
 8021cba:	4620      	mov	r0, r4
 8021cbc:	f7ff fa26 	bl	802110c <_ZN7RequestaSEOS_>
 8021cc0:	f107 030c 	add.w	r3, r7, #12
 8021cc4:	4618      	mov	r0, r3
 8021cc6:	f7ff f9c8 	bl	802105a <_ZN7RequestD1Ev>
			}
			ResetReadState();
 8021cca:	6878      	ldr	r0, [r7, #4]
 8021ccc:	f7ff fe0a 	bl	80218e4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021cd0:	e003      	b.n	8021cda <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 8021cd2:	6878      	ldr	r0, [r7, #4]
 8021cd4:	f7ff fe06 	bl	80218e4 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8021cd8:	bf00      	nop
 8021cda:	bf00      	nop
 8021cdc:	3724      	adds	r7, #36	; 0x24
 8021cde:	46bd      	mov	sp, r7
 8021ce0:	bd90      	pop	{r4, r7, pc}
 8021ce2:	bf00      	nop

08021ce4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8021ce4:	b580      	push	{r7, lr}
 8021ce6:	b082      	sub	sp, #8
 8021ce8:	af00      	add	r7, sp, #0
 8021cea:	6078      	str	r0, [r7, #4]
 8021cec:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8021cee:	683b      	ldr	r3, [r7, #0]
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d106      	bne.n	8021d02 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8021cf4:	4b19      	ldr	r3, [pc, #100]	; (8021d5c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8021cf6:	4a1a      	ldr	r2, [pc, #104]	; (8021d60 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021cf8:	f240 11eb 	movw	r1, #491	; 0x1eb
 8021cfc:	4819      	ldr	r0, [pc, #100]	; (8021d64 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021cfe:	f01d f911 	bl	803ef24 <__assert_func>
			assert(*ptr);
 8021d02:	683b      	ldr	r3, [r7, #0]
 8021d04:	681b      	ldr	r3, [r3, #0]
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d106      	bne.n	8021d18 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8021d0a:	4b17      	ldr	r3, [pc, #92]	; (8021d68 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8021d0c:	4a14      	ldr	r2, [pc, #80]	; (8021d60 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021d0e:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8021d12:	4814      	ldr	r0, [pc, #80]	; (8021d64 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021d14:	f01d f906 	bl	803ef24 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8021d18:	683b      	ldr	r3, [r7, #0]
 8021d1a:	681b      	ldr	r3, [r3, #0]
 8021d1c:	687a      	ldr	r2, [r7, #4]
 8021d1e:	8812      	ldrh	r2, [r2, #0]
 8021d20:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021d22:	683b      	ldr	r3, [r7, #0]
 8021d24:	681b      	ldr	r3, [r3, #0]
 8021d26:	1c9a      	adds	r2, r3, #2
 8021d28:	683b      	ldr	r3, [r7, #0]
 8021d2a:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8021d2c:	683b      	ldr	r3, [r7, #0]
 8021d2e:	681b      	ldr	r3, [r3, #0]
 8021d30:	687a      	ldr	r2, [r7, #4]
 8021d32:	8852      	ldrh	r2, [r2, #2]
 8021d34:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021d36:	683b      	ldr	r3, [r7, #0]
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	1c9a      	adds	r2, r3, #2
 8021d3c:	683b      	ldr	r3, [r7, #0]
 8021d3e:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8021d40:	683b      	ldr	r3, [r7, #0]
 8021d42:	681b      	ldr	r3, [r3, #0]
 8021d44:	687a      	ldr	r2, [r7, #4]
 8021d46:	8892      	ldrh	r2, [r2, #4]
 8021d48:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021d4a:	683b      	ldr	r3, [r7, #0]
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	1c9a      	adds	r2, r3, #2
 8021d50:	683b      	ldr	r3, [r7, #0]
 8021d52:	601a      	str	r2, [r3, #0]
		}
 8021d54:	bf00      	nop
 8021d56:	3708      	adds	r7, #8
 8021d58:	46bd      	mov	sp, r7
 8021d5a:	bd80      	pop	{r7, pc}
 8021d5c:	08040144 	.word	0x08040144
 8021d60:	08040500 	.word	0x08040500
 8021d64:	08040178 	.word	0x08040178
 8021d68:	08040194 	.word	0x08040194

08021d6c <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8021d6c:	b580      	push	{r7, lr}
 8021d6e:	b084      	sub	sp, #16
 8021d70:	af00      	add	r7, sp, #0
 8021d72:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8021d74:	6878      	ldr	r0, [r7, #4]
 8021d76:	2300      	movs	r3, #0
 8021d78:	60bb      	str	r3, [r7, #8]
 8021d7a:	2300      	movs	r3, #0
 8021d7c:	60fb      	str	r3, [r7, #12]
 8021d7e:	f107 0308 	add.w	r3, r7, #8
 8021d82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8021d86:	f001 fe7a 	bl	8023a7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	2200      	movs	r2, #0
 8021d8e:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021d90:	bf00      	nop
 8021d92:	3710      	adds	r7, #16
 8021d94:	46bd      	mov	sp, r7
 8021d96:	bd80      	pop	{r7, pc}

08021d98 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8021d98:	b580      	push	{r7, lr}
 8021d9a:	b082      	sub	sp, #8
 8021d9c:	af00      	add	r7, sp, #0
 8021d9e:	6078      	str	r0, [r7, #4]
 8021da0:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	6839      	ldr	r1, [r7, #0]
 8021da6:	4618      	mov	r0, r3
 8021da8:	f001 fe84 	bl	8023ab4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	4618      	mov	r0, r3
 8021db0:	f001 fea2 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021db4:	4602      	mov	r2, r0
 8021db6:	687b      	ldr	r3, [r7, #4]
 8021db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dba:	429a      	cmp	r2, r3
 8021dbc:	bf8c      	ite	hi
 8021dbe:	2301      	movhi	r3, #1
 8021dc0:	2300      	movls	r3, #0
 8021dc2:	b2db      	uxtb	r3, r3
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d002      	beq.n	8021dce <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 8021dc8:	6878      	ldr	r0, [r7, #4]
 8021dca:	f000 f804 	bl	8021dd6 <_ZN17IMUFrameContainer6RemoveEv>
	}
 8021dce:	bf00      	nop
 8021dd0:	3708      	adds	r7, #8
 8021dd2:	46bd      	mov	sp, r7
 8021dd4:	bd80      	pop	{r7, pc}

08021dd6 <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 8021dd6:	b580      	push	{r7, lr}
 8021dd8:	b082      	sub	sp, #8
 8021dda:	af00      	add	r7, sp, #0
 8021ddc:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	4618      	mov	r0, r3
 8021de2:	f001 fe9b 	bl	8023b1c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021dea:	1c5a      	adds	r2, r3, #1
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021df0:	bf00      	nop
 8021df2:	3708      	adds	r7, #8
 8021df4:	46bd      	mov	sp, r7
 8021df6:	bd80      	pop	{r7, pc}

08021df8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8021df8:	b5b0      	push	{r4, r5, r7, lr}
 8021dfa:	b08a      	sub	sp, #40	; 0x28
 8021dfc:	af00      	add	r7, sp, #0
 8021dfe:	60f8      	str	r0, [r7, #12]
 8021e00:	60b9      	str	r1, [r7, #8]
 8021e02:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8021e04:	68fb      	ldr	r3, [r7, #12]
 8021e06:	4618      	mov	r0, r3
 8021e08:	f001 feab 	bl	8023b62 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8021e0c:	4603      	mov	r3, r0
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	d001      	beq.n	8021e16 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8021e12:	2300      	movs	r3, #0
 8021e14:	e038      	b.n	8021e88 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8021e16:	68fb      	ldr	r3, [r7, #12]
 8021e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e1a:	68ba      	ldr	r2, [r7, #8]
 8021e1c:	429a      	cmp	r2, r3
 8021e1e:	d30b      	bcc.n	8021e38 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8021e20:	68fb      	ldr	r3, [r7, #12]
 8021e22:	4618      	mov	r0, r3
 8021e24:	f001 fe68 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021e28:	4602      	mov	r2, r0
 8021e2a:	68fb      	ldr	r3, [r7, #12]
 8021e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e2e:	4413      	add	r3, r2
 8021e30:	3b01      	subs	r3, #1
 8021e32:	68ba      	ldr	r2, [r7, #8]
 8021e34:	429a      	cmp	r2, r3
 8021e36:	d901      	bls.n	8021e3c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8021e38:	2301      	movs	r3, #1
 8021e3a:	e000      	b.n	8021e3e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8021e3c:	2300      	movs	r3, #0
 8021e3e:	2b00      	cmp	r3, #0
 8021e40:	d001      	beq.n	8021e46 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8021e42:	2300      	movs	r3, #0
 8021e44:	e020      	b.n	8021e88 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8021e46:	68fc      	ldr	r4, [r7, #12]
 8021e48:	68fb      	ldr	r3, [r7, #12]
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	f001 fe54 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021e50:	4601      	mov	r1, r0
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021e56:	68bb      	ldr	r3, [r7, #8]
 8021e58:	1ad3      	subs	r3, r2, r3
 8021e5a:	440b      	add	r3, r1
 8021e5c:	3b01      	subs	r3, #1
 8021e5e:	4619      	mov	r1, r3
 8021e60:	4620      	mov	r0, r4
 8021e62:	f001 fe90 	bl	8023b86 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8021e66:	4603      	mov	r3, r0
 8021e68:	f107 0414 	add.w	r4, r7, #20
 8021e6c:	461d      	mov	r5, r3
 8021e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021e72:	682b      	ldr	r3, [r5, #0]
 8021e74:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	461d      	mov	r5, r3
 8021e7a:	f107 0414 	add.w	r4, r7, #20
 8021e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021e82:	6823      	ldr	r3, [r4, #0]
 8021e84:	602b      	str	r3, [r5, #0]
		return true;
 8021e86:	2301      	movs	r3, #1
	}
 8021e88:	4618      	mov	r0, r3
 8021e8a:	3728      	adds	r7, #40	; 0x28
 8021e8c:	46bd      	mov	sp, r7
 8021e8e:	bdb0      	pop	{r4, r5, r7, pc}

08021e90 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8021e90:	b580      	push	{r7, lr}
 8021e92:	b082      	sub	sp, #8
 8021e94:	af00      	add	r7, sp, #0
 8021e96:	6078      	str	r0, [r7, #4]
 8021e98:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8021e9a:	683b      	ldr	r3, [r7, #0]
 8021e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e9e:	b29a      	uxth	r2, r3
 8021ea0:	687b      	ldr	r3, [r7, #4]
 8021ea2:	801a      	strh	r2, [r3, #0]
 8021ea4:	683b      	ldr	r3, [r7, #0]
 8021ea6:	4618      	mov	r0, r3
 8021ea8:	f001 fe26 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021eac:	4603      	mov	r3, r0
 8021eae:	b29a      	uxth	r2, r3
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	805a      	strh	r2, [r3, #2]
 8021eb4:	683b      	ldr	r3, [r7, #0]
 8021eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021eb8:	b29a      	uxth	r2, r3
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	809a      	strh	r2, [r3, #4]
	}
 8021ebe:	6878      	ldr	r0, [r7, #4]
 8021ec0:	3708      	adds	r7, #8
 8021ec2:	46bd      	mov	sp, r7
 8021ec4:	bd80      	pop	{r7, pc}

08021ec6 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 8021ec6:	b580      	push	{r7, lr}
 8021ec8:	b086      	sub	sp, #24
 8021eca:	af00      	add	r7, sp, #0
 8021ecc:	6078      	str	r0, [r7, #4]
 8021ece:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 8021ed0:	f00b ffae 	bl	802de30 <HAL_GetTick>
 8021ed4:	6178      	str	r0, [r7, #20]

		switch (State) {
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	689b      	ldr	r3, [r3, #8]
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	d04e      	beq.n	8021f7c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 8021ede:	2b01      	cmp	r3, #1
 8021ee0:	d154      	bne.n	8021f8c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 8021ee2:	687b      	ldr	r3, [r7, #4]
 8021ee4:	2200      	movs	r2, #0
 8021ee6:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	685b      	ldr	r3, [r3, #4]
 8021eec:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	697a      	ldr	r2, [r7, #20]
 8021ef2:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	681b      	ldr	r3, [r3, #0]
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d046      	beq.n	8021f8a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	685b      	ldr	r3, [r3, #4]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d042      	beq.n	8021f8a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 8021f04:	697a      	ldr	r2, [r7, #20]
 8021f06:	693b      	ldr	r3, [r7, #16]
 8021f08:	1ad3      	subs	r3, r2, r3
 8021f0a:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8021f12:	68fb      	ldr	r3, [r7, #12]
 8021f14:	ee07 3a90 	vmov	s15, r3
 8021f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021f20:	687b      	ldr	r3, [r7, #4]
 8021f22:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	ed93 7a05 	vldr	s14, [r3, #20]
 8021f2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8021f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration)) < long(DurationThreshold))
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	691b      	ldr	r3, [r3, #16]
 8021f3e:	68fa      	ldr	r2, [r7, #12]
 8021f40:	1ad3      	subs	r3, r2, r3
 8021f42:	4618      	mov	r0, r3
 8021f44:	f7fe ffa6 	bl	8020e94 <_ZSt3absl>
 8021f48:	4602      	mov	r2, r0
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	68db      	ldr	r3, [r3, #12]
 8021f4e:	429a      	cmp	r2, r3
 8021f50:	bfb4      	ite	lt
 8021f52:	2301      	movlt	r3, #1
 8021f54:	2300      	movge	r3, #0
 8021f56:	b2db      	uxtb	r3, r3
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d008      	beq.n	8021f6e <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	f103 0218 	add.w	r2, r3, #24
 8021f62:	687b      	ldr	r3, [r7, #4]
 8021f64:	3340      	adds	r3, #64	; 0x40
 8021f66:	4619      	mov	r1, r3
 8021f68:	4610      	mov	r0, r2
 8021f6a:	f001 fe1d 	bl	8023ba8 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 8021f6e:	6838      	ldr	r0, [r7, #0]
 8021f70:	f7fe fe50 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8021f74:	4602      	mov	r2, r0
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8021f7a:	e007      	b.n	8021f8c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8021f7c:	687b      	ldr	r3, [r7, #4]
 8021f7e:	2201      	movs	r2, #1
 8021f80:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	697a      	ldr	r2, [r7, #20]
 8021f86:	601a      	str	r2, [r3, #0]
			break;
 8021f88:	e000      	b.n	8021f8c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 8021f8a:	bf00      	nop
		}
	}
 8021f8c:	3718      	adds	r7, #24
 8021f8e:	46bd      	mov	sp, r7
 8021f90:	bd80      	pop	{r7, pc}

08021f92 <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 8021f92:	b480      	push	{r7}
 8021f94:	b083      	sub	sp, #12
 8021f96:	af00      	add	r7, sp, #0
 8021f98:	6078      	str	r0, [r7, #4]
 8021f9a:	460b      	mov	r3, r1
 8021f9c:	70fb      	strb	r3, [r7, #3]
 8021f9e:	4613      	mov	r3, r2
 8021fa0:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 8021fa2:	78fa      	ldrb	r2, [r7, #3]
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 8021fa8:	78ba      	ldrb	r2, [r7, #2]
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	60da      	str	r2, [r3, #12]
	}
 8021fae:	bf00      	nop
 8021fb0:	370c      	adds	r7, #12
 8021fb2:	46bd      	mov	sp, r7
 8021fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fb8:	4770      	bx	lr

08021fba <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 8021fba:	b480      	push	{r7}
 8021fbc:	b083      	sub	sp, #12
 8021fbe:	af00      	add	r7, sp, #0
 8021fc0:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	695b      	ldr	r3, [r3, #20]
 8021fc6:	ee07 3a90 	vmov	s15, r3
	}
 8021fca:	eeb0 0a67 	vmov.f32	s0, s15
 8021fce:	370c      	adds	r7, #12
 8021fd0:	46bd      	mov	sp, r7
 8021fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fd6:	4770      	bx	lr

08021fd8 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>:

	void ResetStrobeDuration() {
 8021fd8:	b480      	push	{r7}
 8021fda:	b083      	sub	sp, #12
 8021fdc:	af00      	add	r7, sp, #0
 8021fde:	6078      	str	r0, [r7, #4]
		StrobeDuration = 1;
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8021fe6:	615a      	str	r2, [r3, #20]
	}
 8021fe8:	bf00      	nop
 8021fea:	370c      	adds	r7, #12
 8021fec:	46bd      	mov	sp, r7
 8021fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff2:	4770      	bx	lr

08021ff4 <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	size_t GetStrobe() const {
 8021ff4:	b580      	push	{r7, lr}
 8021ff6:	b082      	sub	sp, #8
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 8021ffc:	6878      	ldr	r0, [r7, #4]
 8021ffe:	f000 f81b 	bl	8022038 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 8022002:	4603      	mov	r3, r0
 8022004:	2b00      	cmp	r3, #0
 8022006:	d106      	bne.n	8022016 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 8022008:	4b08      	ldr	r3, [pc, #32]	; (802202c <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 802200a:	4a09      	ldr	r2, [pc, #36]	; (8022030 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 802200c:	f240 2163 	movw	r1, #611	; 0x263
 8022010:	4808      	ldr	r0, [pc, #32]	; (8022034 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 8022012:	f01c ff87 	bl	803ef24 <__assert_func>
		return StrobeQueue.front();
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	3318      	adds	r3, #24
 802201a:	4618      	mov	r0, r3
 802201c:	f001 fdd2 	bl	8023bc4 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 8022020:	4603      	mov	r3, r0
 8022022:	681b      	ldr	r3, [r3, #0]
	}
 8022024:	4618      	mov	r0, r3
 8022026:	3708      	adds	r7, #8
 8022028:	46bd      	mov	sp, r7
 802202a:	bd80      	pop	{r7, pc}
 802202c:	08040538 	.word	0x08040538
 8022030:	08040544 	.word	0x08040544
 8022034:	08040178 	.word	0x08040178

08022038 <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 8022038:	b580      	push	{r7, lr}
 802203a:	b082      	sub	sp, #8
 802203c:	af00      	add	r7, sp, #0
 802203e:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	3318      	adds	r3, #24
 8022044:	4618      	mov	r0, r3
 8022046:	f001 fdca 	bl	8023bde <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 802204a:	4603      	mov	r3, r0
 802204c:	f083 0301 	eor.w	r3, r3, #1
 8022050:	b2db      	uxtb	r3, r3
	}
 8022052:	4618      	mov	r0, r3
 8022054:	3708      	adds	r7, #8
 8022056:	46bd      	mov	sp, r7
 8022058:	bd80      	pop	{r7, pc}

0802205a <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 802205a:	b580      	push	{r7, lr}
 802205c:	b082      	sub	sp, #8
 802205e:	af00      	add	r7, sp, #0
 8022060:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	3318      	adds	r3, #24
 8022066:	4618      	mov	r0, r3
 8022068:	f001 fdc6 	bl	8023bf8 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 802206c:	bf00      	nop
 802206e:	3708      	adds	r7, #8
 8022070:	46bd      	mov	sp, r7
 8022072:	bd80      	pop	{r7, pc}

08022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type Reset = 3;
		static constexpr Type SetOffset = 4;
		static constexpr Type StrobeWidth = 5;
		static constexpr Type ConfigureFilter = 6;

		static uint8_t Serialize(Type mode) {
 8022074:	b480      	push	{r7}
 8022076:	b083      	sub	sp, #12
 8022078:	af00      	add	r7, sp, #0
 802207a:	4603      	mov	r3, r0
 802207c:	71fb      	strb	r3, [r7, #7]
			return mode;
 802207e:	79fb      	ldrb	r3, [r7, #7]
		}
 8022080:	4618      	mov	r0, r3
 8022082:	370c      	adds	r7, #12
 8022084:	46bd      	mov	sp, r7
 8022086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802208a:	4770      	bx	lr

0802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 802208c:	b480      	push	{r7}
 802208e:	b083      	sub	sp, #12
 8022090:	af00      	add	r7, sp, #0
 8022092:	4603      	mov	r3, r0
 8022094:	71fb      	strb	r3, [r7, #7]
			return meta;
 8022096:	79fb      	ldrb	r3, [r7, #7]
		}
 8022098:	4618      	mov	r0, r3
 802209a:	370c      	adds	r7, #12
 802209c:	46bd      	mov	sp, r7
 802209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220a2:	4770      	bx	lr

080220a4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type BadRequest = 3;
		static constexpr Type BadOffset = 4;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 80220a4:	b580      	push	{r7, lr}
 80220a6:	b08c      	sub	sp, #48	; 0x30
 80220a8:	af00      	add	r7, sp, #0
 80220aa:	60f8      	str	r0, [r7, #12]
 80220ac:	60b9      	str	r1, [r7, #8]
 80220ae:	607a      	str	r2, [r7, #4]
 80220b0:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	7c1b      	ldrb	r3, [r3, #16]
 80220b6:	4618      	mov	r0, r3
 80220b8:	f7ff ffe8 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80220bc:	4603      	mov	r3, r0
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d006      	beq.n	80220d0 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 80220c2:	4b2c      	ldr	r3, [pc, #176]	; (8022174 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 80220c4:	4a2c      	ldr	r2, [pc, #176]	; (8022178 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 80220c6:	f44f 7124 	mov.w	r1, #656	; 0x290
 80220ca:	482c      	ldr	r0, [pc, #176]	; (802217c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 80220cc:	f01c ff2a 	bl	803ef24 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 80220d0:	68f8      	ldr	r0, [r7, #12]
 80220d2:	f7ff fb25 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80220d6:	68fb      	ldr	r3, [r7, #12]
 80220d8:	2201      	movs	r2, #1
 80220da:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 80220dc:	2000      	movs	r0, #0
 80220de:	f7ff ffc9 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80220e2:	4603      	mov	r3, r0
 80220e4:	461a      	mov	r2, r3
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 80220ea:	68fb      	ldr	r3, [r7, #12]
 80220ec:	2111      	movs	r1, #17
 80220ee:	4618      	mov	r0, r3
 80220f0:	f001 fb20 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	4618      	mov	r0, r3
 80220f8:	f001 fac3 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80220fc:	4603      	mov	r3, r0
 80220fe:	2b02      	cmp	r3, #2
 8022100:	bf14      	ite	ne
 8022102:	2301      	movne	r3, #1
 8022104:	2300      	moveq	r3, #0
 8022106:	b2db      	uxtb	r3, r3
 8022108:	2b00      	cmp	r3, #0
 802210a:	d003      	beq.n	8022114 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x70>
			responce.Error = ErrorCodes::BadRequest;
 802210c:	68fb      	ldr	r3, [r7, #12]
 802210e:	2203      	movs	r2, #3
 8022110:	739a      	strb	r2, [r3, #14]
			return responce;
 8022112:	e02b      	b.n	802216c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	4618      	mov	r0, r3
 8022118:	f001 fc77 	bl	8023a0a <_ZNKSt6vectorIhSaIhEE4dataEv>
 802211c:	4603      	mov	r3, r0
 802211e:	881b      	ldrh	r3, [r3, #0]
 8022120:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8022122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022124:	f107 0218 	add.w	r2, r7, #24
 8022128:	4619      	mov	r1, r3
 802212a:	6838      	ldr	r0, [r7, #0]
 802212c:	f7ff fe64 	bl	8021df8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8022130:	4603      	mov	r3, r0
 8022132:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8022136:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802213a:	f083 0301 	eor.w	r3, r3, #1
 802213e:	b2db      	uxtb	r3, r3
 8022140:	2b00      	cmp	r3, #0
 8022142:	d003      	beq.n	802214c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa8>
			responce.Error = ErrorCodes::FrameUnavailable;
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	2201      	movs	r2, #1
 8022148:	739a      	strb	r2, [r3, #14]
			return responce;
 802214a:	e00f      	b.n	802216c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 802214c:	68fb      	ldr	r3, [r7, #12]
 802214e:	4618      	mov	r0, r3
 8022150:	f001 fa88 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8022154:	4601      	mov	r1, r0
 8022156:	f107 0217 	add.w	r2, r7, #23
 802215a:	f107 0318 	add.w	r3, r7, #24
 802215e:	4618      	mov	r0, r3
 8022160:	f7fe fcfa 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8022164:	68fb      	ldr	r3, [r7, #12]
 8022166:	2200      	movs	r2, #0
 8022168:	739a      	strb	r2, [r3, #14]

		return responce;
 802216a:	bf00      	nop
	}
 802216c:	68f8      	ldr	r0, [r7, #12]
 802216e:	3730      	adds	r7, #48	; 0x30
 8022170:	46bd      	mov	sp, r7
 8022172:	bd80      	pop	{r7, pc}
 8022174:	08040574 	.word	0x08040574
 8022178:	080405bc 	.word	0x080405bc
 802217c:	08040178 	.word	0x08040178

08022180 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8022180:	b580      	push	{r7, lr}
 8022182:	b088      	sub	sp, #32
 8022184:	af00      	add	r7, sp, #0
 8022186:	60f8      	str	r0, [r7, #12]
 8022188:	60b9      	str	r1, [r7, #8]
 802218a:	607a      	str	r2, [r7, #4]
 802218c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	7c1b      	ldrb	r3, [r3, #16]
 8022192:	4618      	mov	r0, r3
 8022194:	f7ff ff7a 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022198:	4603      	mov	r3, r0
 802219a:	2b01      	cmp	r3, #1
 802219c:	d006      	beq.n	80221ac <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 802219e:	4b22      	ldr	r3, [pc, #136]	; (8022228 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa8>)
 80221a0:	4a22      	ldr	r2, [pc, #136]	; (802222c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 80221a2:	f240 21b2 	movw	r1, #690	; 0x2b2
 80221a6:	4822      	ldr	r0, [pc, #136]	; (8022230 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 80221a8:	f01c febc 	bl	803ef24 <__assert_func>

		Responce responce;
 80221ac:	68f8      	ldr	r0, [r7, #12]
 80221ae:	f7ff fab7 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80221b2:	68fb      	ldr	r3, [r7, #12]
 80221b4:	2201      	movs	r2, #1
 80221b6:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 80221b8:	2001      	movs	r0, #1
 80221ba:	f7ff ff5b 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80221be:	4603      	mov	r3, r0
 80221c0:	461a      	mov	r2, r3
 80221c2:	68fb      	ldr	r3, [r7, #12]
 80221c4:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 80221c6:	68fb      	ldr	r3, [r7, #12]
 80221c8:	2106      	movs	r1, #6
 80221ca:	4618      	mov	r0, r3
 80221cc:	f001 fab2 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	4618      	mov	r0, r3
 80221d4:	f001 fa55 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80221d8:	4603      	mov	r3, r0
 80221da:	2b01      	cmp	r3, #1
 80221dc:	bf14      	ite	ne
 80221de:	2301      	movne	r3, #1
 80221e0:	2300      	moveq	r3, #0
 80221e2:	b2db      	uxtb	r3, r3
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d003      	beq.n	80221f0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x70>
			responce.Error = ErrorCodes::BadRequest;
 80221e8:	68fb      	ldr	r3, [r7, #12]
 80221ea:	2203      	movs	r2, #3
 80221ec:	739a      	strb	r2, [r3, #14]
			return responce;
 80221ee:	e017      	b.n	8022220 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa0>
		}

		uint8_t *ptr = responce.Data.data();
 80221f0:	68fb      	ldr	r3, [r7, #12]
 80221f2:	4618      	mov	r0, r3
 80221f4:	f001 fa36 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 80221f8:	4603      	mov	r3, r0
 80221fa:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 80221fc:	f107 0314 	add.w	r3, r7, #20
 8022200:	6839      	ldr	r1, [r7, #0]
 8022202:	4618      	mov	r0, r3
 8022204:	f7ff fe44 	bl	8021e90 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 8022208:	f107 021c 	add.w	r2, r7, #28
 802220c:	f107 0314 	add.w	r3, r7, #20
 8022210:	4611      	mov	r1, r2
 8022212:	4618      	mov	r0, r3
 8022214:	f7ff fd66 	bl	8021ce4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	2200      	movs	r2, #0
 802221c:	739a      	strb	r2, [r3, #14]

		return responce;
 802221e:	bf00      	nop
	}
 8022220:	68f8      	ldr	r0, [r7, #12]
 8022222:	3720      	adds	r7, #32
 8022224:	46bd      	mov	sp, r7
 8022226:	bd80      	pop	{r7, pc}
 8022228:	08040610 	.word	0x08040610
 802222c:	08040650 	.word	0x08040650
 8022230:	08040178 	.word	0x08040178

08022234 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8022234:	b580      	push	{r7, lr}
 8022236:	b08a      	sub	sp, #40	; 0x28
 8022238:	af00      	add	r7, sp, #0
 802223a:	60f8      	str	r0, [r7, #12]
 802223c:	60b9      	str	r1, [r7, #8]
 802223e:	607a      	str	r2, [r7, #4]
 8022240:	603b      	str	r3, [r7, #0]
		assert(
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	7c1b      	ldrb	r3, [r3, #16]
 8022246:	4618      	mov	r0, r3
 8022248:	f7ff ff20 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802224c:	4603      	mov	r3, r0
 802224e:	2b02      	cmp	r3, #2
 8022250:	d006      	beq.n	8022260 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 8022252:	4b21      	ldr	r3, [pc, #132]	; (80222d8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 8022254:	4a21      	ldr	r2, [pc, #132]	; (80222dc <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 8022256:	f240 21c9 	movw	r1, #713	; 0x2c9
 802225a:	4821      	ldr	r0, [pc, #132]	; (80222e0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 802225c:	f01c fe62 	bl	803ef24 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8022260:	68f8      	ldr	r0, [r7, #12]
 8022262:	f7ff fa5d 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8022266:	68fb      	ldr	r3, [r7, #12]
 8022268:	2201      	movs	r2, #1
 802226a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 802226c:	2002      	movs	r0, #2
 802226e:	f7ff ff01 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022272:	4603      	mov	r3, r0
 8022274:	461a      	mov	r2, r3
 8022276:	68fb      	ldr	r3, [r7, #12]
 8022278:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 802227a:	68fb      	ldr	r3, [r7, #12]
 802227c:	2111      	movs	r1, #17
 802227e:	4618      	mov	r0, r3
 8022280:	f001 fa58 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8022284:	687b      	ldr	r3, [r7, #4]
 8022286:	4618      	mov	r0, r3
 8022288:	f001 f9fb 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802228c:	4603      	mov	r3, r0
 802228e:	2b01      	cmp	r3, #1
 8022290:	bf14      	ite	ne
 8022292:	2301      	movne	r3, #1
 8022294:	2300      	moveq	r3, #0
 8022296:	b2db      	uxtb	r3, r3
 8022298:	2b00      	cmp	r3, #0
 802229a:	d003      	beq.n	80222a4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x70>
			responce.Error = ErrorCodes::BadRequest;
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	2203      	movs	r2, #3
 80222a0:	739a      	strb	r2, [r3, #14]
			return responce;
 80222a2:	e015      	b.n	80222d0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x9c>
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 80222a4:	f107 0314 	add.w	r3, r7, #20
 80222a8:	6839      	ldr	r1, [r7, #0]
 80222aa:	4618      	mov	r0, r3
 80222ac:	f7fe fbaa 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 80222b0:	68fb      	ldr	r3, [r7, #12]
 80222b2:	4618      	mov	r0, r3
 80222b4:	f001 f9d6 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 80222b8:	4601      	mov	r1, r0
 80222ba:	f107 0213 	add.w	r2, r7, #19
 80222be:	f107 0314 	add.w	r3, r7, #20
 80222c2:	4618      	mov	r0, r3
 80222c4:	f7fe fc48 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 80222c8:	68fb      	ldr	r3, [r7, #12]
 80222ca:	2200      	movs	r2, #0
 80222cc:	739a      	strb	r2, [r3, #14]

		return responce;
 80222ce:	bf00      	nop
	}
 80222d0:	68f8      	ldr	r0, [r7, #12]
 80222d2:	3728      	adds	r7, #40	; 0x28
 80222d4:	46bd      	mov	sp, r7
 80222d6:	bd80      	pop	{r7, pc}
 80222d8:	080406a0 	.word	0x080406a0
 80222dc:	080406e8 	.word	0x080406e8
 80222e0:	08040178 	.word	0x08040178

080222e4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>:

	Responce DoReset(const Request &request, IMUFrameContainer &container,
 80222e4:	b580      	push	{r7, lr}
 80222e6:	b084      	sub	sp, #16
 80222e8:	af00      	add	r7, sp, #0
 80222ea:	60f8      	str	r0, [r7, #12]
 80222ec:	60b9      	str	r1, [r7, #8]
 80222ee:	607a      	str	r2, [r7, #4]
 80222f0:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	7c1b      	ldrb	r3, [r3, #16]
 80222f6:	4618      	mov	r0, r3
 80222f8:	f7ff fec8 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80222fc:	4603      	mov	r3, r0
 80222fe:	2b03      	cmp	r3, #3
 8022300:	d006      	beq.n	8022310 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x2c>
 8022302:	4b1b      	ldr	r3, [pc, #108]	; (8022370 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x8c>)
 8022304:	4a1b      	ldr	r2, [pc, #108]	; (8022374 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x90>)
 8022306:	f240 21e3 	movw	r1, #739	; 0x2e3
 802230a:	481b      	ldr	r0, [pc, #108]	; (8022378 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x94>)
 802230c:	f01c fe0a 	bl	803ef24 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
 8022310:	68f8      	ldr	r0, [r7, #12]
 8022312:	f7ff fa05 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8022316:	68fb      	ldr	r3, [r7, #12]
 8022318:	2201      	movs	r2, #1
 802231a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 802231c:	2003      	movs	r0, #3
 802231e:	f7ff fea9 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022322:	4603      	mov	r3, r0
 8022324:	461a      	mov	r2, r3
 8022326:	68fb      	ldr	r3, [r7, #12]
 8022328:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 802232a:	68fb      	ldr	r3, [r7, #12]
 802232c:	2101      	movs	r1, #1
 802232e:	4618      	mov	r0, r3
 8022330:	f001 fa00 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	4618      	mov	r0, r3
 8022338:	f001 f9a3 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802233c:	4603      	mov	r3, r0
 802233e:	2b01      	cmp	r3, #1
 8022340:	bf14      	ite	ne
 8022342:	2301      	movne	r3, #1
 8022344:	2300      	moveq	r3, #0
 8022346:	b2db      	uxtb	r3, r3
 8022348:	2b00      	cmp	r3, #0
 802234a:	d003      	beq.n	8022354 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x70>
			responce.Error = ErrorCodes::BadRequest;
 802234c:	68fb      	ldr	r3, [r7, #12]
 802234e:	2203      	movs	r2, #3
 8022350:	739a      	strb	r2, [r3, #14]
			return responce;
 8022352:	e009      	b.n	8022368 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x84>
		}

		container.Reset();
 8022354:	6838      	ldr	r0, [r7, #0]
 8022356:	f7ff fd09 	bl	8021d6c <_ZN17IMUFrameContainer5ResetEv>
		sFilter.ResetStrobeDuration();
 802235a:	69b8      	ldr	r0, [r7, #24]
 802235c:	f7ff fe3c 	bl	8021fd8 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>

		responce.Error = ErrorCodes::Success;
 8022360:	68fb      	ldr	r3, [r7, #12]
 8022362:	2200      	movs	r2, #0
 8022364:	739a      	strb	r2, [r3, #14]

		return responce;
 8022366:	bf00      	nop
	}
 8022368:	68f8      	ldr	r0, [r7, #12]
 802236a:	3710      	adds	r7, #16
 802236c:	46bd      	mov	sp, r7
 802236e:	bd80      	pop	{r7, pc}
 8022370:	08040738 	.word	0x08040738
 8022374:	0804077c 	.word	0x0804077c
 8022378:	08040178 	.word	0x08040178

0802237c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 802237c:	b580      	push	{r7, lr}
 802237e:	b086      	sub	sp, #24
 8022380:	af00      	add	r7, sp, #0
 8022382:	60f8      	str	r0, [r7, #12]
 8022384:	60b9      	str	r1, [r7, #8]
 8022386:	607a      	str	r2, [r7, #4]
 8022388:	603b      	str	r3, [r7, #0]
		assert(
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	7c1b      	ldrb	r3, [r3, #16]
 802238e:	4618      	mov	r0, r3
 8022390:	f7ff fe7c 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022394:	4603      	mov	r3, r0
 8022396:	2b04      	cmp	r3, #4
 8022398:	d006      	beq.n	80223a8 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x2c>
 802239a:	4b1e      	ldr	r3, [pc, #120]	; (8022414 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x98>)
 802239c:	4a1e      	ldr	r2, [pc, #120]	; (8022418 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x9c>)
 802239e:	f240 21fa 	movw	r1, #762	; 0x2fa
 80223a2:	481e      	ldr	r0, [pc, #120]	; (802241c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0xa0>)
 80223a4:	f01c fdbe 	bl	803ef24 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::SetOffset);

		Responce responce;
 80223a8:	68f8      	ldr	r0, [r7, #12]
 80223aa:	f7ff f9b9 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80223ae:	68fb      	ldr	r3, [r7, #12]
 80223b0:	2201      	movs	r2, #1
 80223b2:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::SetOffset);
 80223b4:	2004      	movs	r0, #4
 80223b6:	f7ff fe5d 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80223ba:	4603      	mov	r3, r0
 80223bc:	461a      	mov	r2, r3
 80223be:	68fb      	ldr	r3, [r7, #12]
 80223c0:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 80223c2:	68fb      	ldr	r3, [r7, #12]
 80223c4:	2101      	movs	r1, #1
 80223c6:	4618      	mov	r0, r3
 80223c8:	f001 f9b4 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 80223cc:	687b      	ldr	r3, [r7, #4]
 80223ce:	4618      	mov	r0, r3
 80223d0:	f001 f957 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80223d4:	4603      	mov	r3, r0
 80223d6:	2b01      	cmp	r3, #1
 80223d8:	bf14      	ite	ne
 80223da:	2301      	movne	r3, #1
 80223dc:	2300      	moveq	r3, #0
 80223de:	b2db      	uxtb	r3, r3
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d003      	beq.n	80223ec <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x70>
			responce.Error = ErrorCodes::BadRequest;
 80223e4:	68fb      	ldr	r3, [r7, #12]
 80223e6:	2203      	movs	r2, #3
 80223e8:	739a      	strb	r2, [r3, #14]
			return responce;
 80223ea:	e00e      	b.n	802240a <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x8e>
		}

		uint8_t newOffset = request.Data[0];
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	2100      	movs	r1, #0
 80223f0:	4618      	mov	r0, r3
 80223f2:	f001 fc0d 	bl	8023c10 <_ZNKSt6vectorIhSaIhEEixEj>
 80223f6:	4603      	mov	r3, r0
 80223f8:	781b      	ldrb	r3, [r3, #0]
 80223fa:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 80223fc:	7dfa      	ldrb	r2, [r7, #23]
 80223fe:	683b      	ldr	r3, [r7, #0]
 8022400:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 8022402:	68fb      	ldr	r3, [r7, #12]
 8022404:	2200      	movs	r2, #0
 8022406:	739a      	strb	r2, [r3, #14]

		return responce;
 8022408:	bf00      	nop
	}
 802240a:	68f8      	ldr	r0, [r7, #12]
 802240c:	3718      	adds	r7, #24
 802240e:	46bd      	mov	sp, r7
 8022410:	bd80      	pop	{r7, pc}
 8022412:	bf00      	nop
 8022414:	080407dc 	.word	0x080407dc
 8022418:	08040824 	.word	0x08040824
 802241c:	08040178 	.word	0x08040178

08022420 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 8022420:	b580      	push	{r7, lr}
 8022422:	b086      	sub	sp, #24
 8022424:	af00      	add	r7, sp, #0
 8022426:	60f8      	str	r0, [r7, #12]
 8022428:	60b9      	str	r1, [r7, #8]
 802242a:	607a      	str	r2, [r7, #4]
 802242c:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 802242e:	687b      	ldr	r3, [r7, #4]
 8022430:	7c1b      	ldrb	r3, [r3, #16]
 8022432:	4618      	mov	r0, r3
 8022434:	f7ff fe2a 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022438:	4603      	mov	r3, r0
 802243a:	2b06      	cmp	r3, #6
 802243c:	d006      	beq.n	802244c <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2c>
 802243e:	4b23      	ldr	r3, [pc, #140]	; (80224cc <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xac>)
 8022440:	4a23      	ldr	r2, [pc, #140]	; (80224d0 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xb0>)
 8022442:	f240 3112 	movw	r1, #786	; 0x312
 8022446:	4823      	ldr	r0, [pc, #140]	; (80224d4 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xb4>)
 8022448:	f01c fd6c 	bl	803ef24 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::ConfigureFilter);

		Responce responce;
 802244c:	68f8      	ldr	r0, [r7, #12]
 802244e:	f7ff f967 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8022452:	68fb      	ldr	r3, [r7, #12]
 8022454:	2201      	movs	r2, #1
 8022456:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(
 8022458:	2006      	movs	r0, #6
 802245a:	f7ff fe0b 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802245e:	4603      	mov	r3, r0
 8022460:	461a      	mov	r2, r3
 8022462:	68fb      	ldr	r3, [r7, #12]
 8022464:	735a      	strb	r2, [r3, #13]
				RequestMode::ConfigureFilter);
		responce.Data.resize(1);
 8022466:	68fb      	ldr	r3, [r7, #12]
 8022468:	2101      	movs	r1, #1
 802246a:	4618      	mov	r0, r3
 802246c:	f001 f962 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	4618      	mov	r0, r3
 8022474:	f001 f905 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022478:	4603      	mov	r3, r0
 802247a:	2b02      	cmp	r3, #2
 802247c:	bf14      	ite	ne
 802247e:	2301      	movne	r3, #1
 8022480:	2300      	moveq	r3, #0
 8022482:	b2db      	uxtb	r3, r3
 8022484:	2b00      	cmp	r3, #0
 8022486:	d003      	beq.n	8022490 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x70>
			responce.Error = ErrorCodes::BadRequest;
 8022488:	68fb      	ldr	r3, [r7, #12]
 802248a:	2203      	movs	r2, #3
 802248c:	739a      	strb	r2, [r3, #14]
			return responce;
 802248e:	e019      	b.n	80224c4 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa4>
		}

		uint8_t targetDuration = request.Data[0];
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	2100      	movs	r1, #0
 8022494:	4618      	mov	r0, r3
 8022496:	f001 fbbb 	bl	8023c10 <_ZNKSt6vectorIhSaIhEEixEj>
 802249a:	4603      	mov	r3, r0
 802249c:	781b      	ldrb	r3, [r3, #0]
 802249e:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 80224a0:	687b      	ldr	r3, [r7, #4]
 80224a2:	2101      	movs	r1, #1
 80224a4:	4618      	mov	r0, r3
 80224a6:	f001 fbb3 	bl	8023c10 <_ZNKSt6vectorIhSaIhEEixEj>
 80224aa:	4603      	mov	r3, r0
 80224ac:	781b      	ldrb	r3, [r3, #0]
 80224ae:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 80224b0:	7dba      	ldrb	r2, [r7, #22]
 80224b2:	7dfb      	ldrb	r3, [r7, #23]
 80224b4:	4619      	mov	r1, r3
 80224b6:	6838      	ldr	r0, [r7, #0]
 80224b8:	f7ff fd6b 	bl	8021f92 <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 80224bc:	68fb      	ldr	r3, [r7, #12]
 80224be:	2200      	movs	r2, #0
 80224c0:	739a      	strb	r2, [r3, #14]

		return responce;
 80224c2:	bf00      	nop
	}
 80224c4:	68f8      	ldr	r0, [r7, #12]
 80224c6:	3718      	adds	r7, #24
 80224c8:	46bd      	mov	sp, r7
 80224ca:	bd80      	pop	{r7, pc}
 80224cc:	08040864 	.word	0x08040864
 80224d0:	080408b0 	.word	0x080408b0
 80224d4:	08040178 	.word	0x08040178

080224d8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 80224d8:	b580      	push	{r7, lr}
 80224da:	b088      	sub	sp, #32
 80224dc:	af00      	add	r7, sp, #0
 80224de:	6178      	str	r0, [r7, #20]
 80224e0:	6139      	str	r1, [r7, #16]
 80224e2:	60fa      	str	r2, [r7, #12]
 80224e4:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		assert(
 80224e6:	68fb      	ldr	r3, [r7, #12]
 80224e8:	7c1b      	ldrb	r3, [r3, #16]
 80224ea:	4618      	mov	r0, r3
 80224ec:	f7ff fdce 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80224f0:	4603      	mov	r3, r0
 80224f2:	2b05      	cmp	r3, #5
 80224f4:	d006      	beq.n	8022504 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2c>
 80224f6:	4b2d      	ldr	r3, [pc, #180]	; (80225ac <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd4>)
 80224f8:	4a2d      	ldr	r2, [pc, #180]	; (80225b0 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd8>)
 80224fa:	f44f 714b 	mov.w	r1, #812	; 0x32c
 80224fe:	482d      	ldr	r0, [pc, #180]	; (80225b4 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xdc>)
 8022500:	f01c fd10 	bl	803ef24 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::StrobeWidth);

		Responce responce;
 8022504:	6978      	ldr	r0, [r7, #20]
 8022506:	f7ff f90b 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 802250a:	697b      	ldr	r3, [r7, #20]
 802250c:	2201      	movs	r2, #1
 802250e:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::StrobeWidth);
 8022510:	2005      	movs	r0, #5
 8022512:	f7ff fdaf 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022516:	4603      	mov	r3, r0
 8022518:	461a      	mov	r2, r3
 802251a:	697b      	ldr	r3, [r7, #20]
 802251c:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 802251e:	697b      	ldr	r3, [r7, #20]
 8022520:	2101      	movs	r1, #1
 8022522:	4618      	mov	r0, r3
 8022524:	f001 f906 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8022528:	68fb      	ldr	r3, [r7, #12]
 802252a:	4618      	mov	r0, r3
 802252c:	f001 f8a9 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022530:	4603      	mov	r3, r0
 8022532:	2b01      	cmp	r3, #1
 8022534:	bf14      	ite	ne
 8022536:	2301      	movne	r3, #1
 8022538:	2300      	moveq	r3, #0
 802253a:	b2db      	uxtb	r3, r3
 802253c:	2b00      	cmp	r3, #0
 802253e:	d003      	beq.n	8022548 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x70>
			responce.Error = ErrorCodes::BadRequest;
 8022540:	697b      	ldr	r3, [r7, #20]
 8022542:	2203      	movs	r2, #3
 8022544:	739a      	strb	r2, [r3, #14]
			return responce;
 8022546:	e02c      	b.n	80225a2 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xca>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 8022548:	68b8      	ldr	r0, [r7, #8]
 802254a:	f7ff fd36 	bl	8021fba <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 802254e:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 8022552:	edd7 7a07 	vldr	s15, [r7, #28]
 8022556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802255e:	d502      	bpl.n	8022566 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x8e>
			strobeWidth = 0;
 8022560:	f04f 0300 	mov.w	r3, #0
 8022564:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 8022566:	edd7 7a07 	vldr	s15, [r7, #28]
 802256a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80225b8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xe0>
 802256e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022576:	dd01      	ble.n	802257c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xa4>
			strobeWidth = 255;
 8022578:	4b10      	ldr	r3, [pc, #64]	; (80225bc <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xe4>)
 802257a:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 802257c:	697b      	ldr	r3, [r7, #20]
 802257e:	2100      	movs	r1, #0
 8022580:	4618      	mov	r0, r3
 8022582:	f001 fb54 	bl	8023c2e <_ZNSt6vectorIhSaIhEEixEj>
 8022586:	4603      	mov	r3, r0
 8022588:	edd7 7a07 	vldr	s15, [r7, #28]
 802258c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022590:	edc7 7a01 	vstr	s15, [r7, #4]
 8022594:	793a      	ldrb	r2, [r7, #4]
 8022596:	b2d2      	uxtb	r2, r2
 8022598:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 802259a:	697b      	ldr	r3, [r7, #20]
 802259c:	2200      	movs	r2, #0
 802259e:	739a      	strb	r2, [r3, #14]

		return responce;
 80225a0:	bf00      	nop
	}
 80225a2:	6978      	ldr	r0, [r7, #20]
 80225a4:	3720      	adds	r7, #32
 80225a6:	46bd      	mov	sp, r7
 80225a8:	bd80      	pop	{r7, pc}
 80225aa:	bf00      	nop
 80225ac:	08040904 	.word	0x08040904
 80225b0:	0804094c 	.word	0x0804094c
 80225b4:	08040178 	.word	0x08040178
 80225b8:	437f0000 	.word	0x437f0000
 80225bc:	437f0000 	.word	0x437f0000

080225c0 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 80225c0:	b580      	push	{r7, lr}
 80225c2:	b084      	sub	sp, #16
 80225c4:	af00      	add	r7, sp, #0
 80225c6:	60f8      	str	r0, [r7, #12]
 80225c8:	60b9      	str	r1, [r7, #8]
 80225ca:	607a      	str	r2, [r7, #4]
		Responce responce;
 80225cc:	68f8      	ldr	r0, [r7, #12]
 80225ce:	f7ff f8a7 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80225d2:	68fb      	ldr	r3, [r7, #12]
 80225d4:	2201      	movs	r2, #1
 80225d6:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(
				RequestMode::Deserialize(request.MetaInfo));
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	7c1b      	ldrb	r3, [r3, #16]
		responce.MetaInfo = RequestMode::Serialize(
 80225dc:	4618      	mov	r0, r3
 80225de:	f7ff fd55 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80225e2:	4603      	mov	r3, r0
 80225e4:	4618      	mov	r0, r3
 80225e6:	f7ff fd45 	bl	8022074 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80225ea:	4603      	mov	r3, r0
 80225ec:	461a      	mov	r2, r3
 80225ee:	68fb      	ldr	r3, [r7, #12]
 80225f0:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(request.ResponceSize);
 80225f2:	68fa      	ldr	r2, [r7, #12]
 80225f4:	687b      	ldr	r3, [r7, #4]
 80225f6:	68db      	ldr	r3, [r3, #12]
 80225f8:	4619      	mov	r1, r3
 80225fa:	4610      	mov	r0, r2
 80225fc:	f001 f89a 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>
		responce.Error = ErrorCodes::UnknownMode;
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	2202      	movs	r2, #2
 8022604:	739a      	strb	r2, [r3, #14]
		return responce;
 8022606:	bf00      	nop
	}
 8022608:	68f8      	ldr	r0, [r7, #12]
 802260a:	3710      	adds	r7, #16
 802260c:	46bd      	mov	sp, r7
 802260e:	bd80      	pop	{r7, pc}

08022610 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 8022610:	b580      	push	{r7, lr}
 8022612:	b086      	sub	sp, #24
 8022614:	af02      	add	r7, sp, #8
 8022616:	60f8      	str	r0, [r7, #12]
 8022618:	60b9      	str	r1, [r7, #8]
 802261a:	607a      	str	r2, [r7, #4]
 802261c:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU, size_t &strobeOffset,
			StrobeDurationFilter &sFilter) {
		assert(request.PeripheryID == Periphery::Imu);
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	7c5b      	ldrb	r3, [r3, #17]
 8022622:	2b01      	cmp	r3, #1
 8022624:	d006      	beq.n	8022634 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x24>
 8022626:	4b2f      	ldr	r3, [pc, #188]	; (80226e4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd4>)
 8022628:	4a2f      	ldr	r2, [pc, #188]	; (80226e8 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd8>)
 802262a:	f240 3155 	movw	r1, #853	; 0x355
 802262e:	482f      	ldr	r0, [pc, #188]	; (80226ec <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xdc>)
 8022630:	f01c fc78 	bl	803ef24 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	7c1b      	ldrb	r3, [r3, #16]
 8022638:	4618      	mov	r0, r3
 802263a:	f7ff fd27 	bl	802208c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802263e:	4603      	mov	r3, r0
 8022640:	2b06      	cmp	r3, #6
 8022642:	d844      	bhi.n	80226ce <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xbe>
 8022644:	a201      	add	r2, pc, #4	; (adr r2, 802264c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x3c>)
 8022646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802264a:	bf00      	nop
 802264c:	08022669 	.word	0x08022669
 8022650:	08022677 	.word	0x08022677
 8022654:	08022685 	.word	0x08022685
 8022658:	08022693 	.word	0x08022693
 802265c:	080226a5 	.word	0x080226a5
 8022660:	080226b3 	.word	0x080226b3
 8022664:	080226c1 	.word	0x080226c1
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8022668:	68f8      	ldr	r0, [r7, #12]
 802266a:	683b      	ldr	r3, [r7, #0]
 802266c:	687a      	ldr	r2, [r7, #4]
 802266e:	68b9      	ldr	r1, [r7, #8]
 8022670:	f7ff fd18 	bl	80220a4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8022674:	e031      	b.n	80226da <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::Info:
			return GetInfo(request, container);
 8022676:	68f8      	ldr	r0, [r7, #12]
 8022678:	683b      	ldr	r3, [r7, #0]
 802267a:	687a      	ldr	r2, [r7, #4]
 802267c:	68b9      	ldr	r1, [r7, #8]
 802267e:	f7ff fd7f 	bl	8022180 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8022682:	e02a      	b.n	80226da <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8022684:	68f8      	ldr	r0, [r7, #12]
 8022686:	69bb      	ldr	r3, [r7, #24]
 8022688:	687a      	ldr	r2, [r7, #4]
 802268a:	68b9      	ldr	r1, [r7, #8]
 802268c:	f7ff fdd2 	bl	8022234 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8022690:	e023      	b.n	80226da <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::Reset:
			return DoReset(request, container, sFilter);
 8022692:	68f8      	ldr	r0, [r7, #12]
 8022694:	6a3b      	ldr	r3, [r7, #32]
 8022696:	9300      	str	r3, [sp, #0]
 8022698:	683b      	ldr	r3, [r7, #0]
 802269a:	687a      	ldr	r2, [r7, #4]
 802269c:	68b9      	ldr	r1, [r7, #8]
 802269e:	f7ff fe21 	bl	80222e4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>
 80226a2:	e01a      	b.n	80226da <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::SetOffset:
			return SetOffset(request, strobeOffset);
 80226a4:	68f8      	ldr	r0, [r7, #12]
 80226a6:	69fb      	ldr	r3, [r7, #28]
 80226a8:	687a      	ldr	r2, [r7, #4]
 80226aa:	68b9      	ldr	r1, [r7, #8]
 80226ac:	f7ff fe66 	bl	802237c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>
 80226b0:	e013      	b.n	80226da <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::StrobeWidth:
			return StrobeWidth(request, sFilter);
 80226b2:	68f8      	ldr	r0, [r7, #12]
 80226b4:	6a3b      	ldr	r3, [r7, #32]
 80226b6:	687a      	ldr	r2, [r7, #4]
 80226b8:	68b9      	ldr	r1, [r7, #8]
 80226ba:	f7ff ff0d 	bl	80224d8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 80226be:	e00c      	b.n	80226da <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::ConfigureFilter:
			return ConfigureFilter(request, sFilter);
 80226c0:	68f8      	ldr	r0, [r7, #12]
 80226c2:	6a3b      	ldr	r3, [r7, #32]
 80226c4:	687a      	ldr	r2, [r7, #4]
 80226c6:	68b9      	ldr	r1, [r7, #8]
 80226c8:	f7ff feaa 	bl	8022420 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 80226cc:	e005      	b.n	80226da <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		default:
			return UnknownModeResponce(request);
 80226ce:	68fb      	ldr	r3, [r7, #12]
 80226d0:	687a      	ldr	r2, [r7, #4]
 80226d2:	68b9      	ldr	r1, [r7, #8]
 80226d4:	4618      	mov	r0, r3
 80226d6:	f7ff ff73 	bl	80225c0 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>
		}
	}
 80226da:	68f8      	ldr	r0, [r7, #12]
 80226dc:	3710      	adds	r7, #16
 80226de:	46bd      	mov	sp, r7
 80226e0:	bd80      	pop	{r7, pc}
 80226e2:	bf00      	nop
 80226e4:	080409a4 	.word	0x080409a4
 80226e8:	080409cc 	.word	0x080409cc
 80226ec:	08040178 	.word	0x08040178

080226f0 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 80226f0:	b580      	push	{r7, lr}
 80226f2:	b084      	sub	sp, #16
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	60f8      	str	r0, [r7, #12]
 80226f8:	60b9      	str	r1, [r7, #8]
 80226fa:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 80226fc:	68fb      	ldr	r3, [r7, #12]
 80226fe:	4618      	mov	r0, r3
 8022700:	f001 fa2f 	bl	8023b62 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022704:	4603      	mov	r3, r0
 8022706:	2b00      	cmp	r3, #0
 8022708:	d002      	beq.n	8022710 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 802270a:	68fb      	ldr	r3, [r7, #12]
 802270c:	687a      	ldr	r2, [r7, #4]
 802270e:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 8022710:	68fb      	ldr	r3, [r7, #12]
 8022712:	68b9      	ldr	r1, [r7, #8]
 8022714:	4618      	mov	r0, r3
 8022716:	f001 f9cd 	bl	8023ab4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 802271a:	68fb      	ldr	r3, [r7, #12]
 802271c:	4618      	mov	r0, r3
 802271e:	f001 f9eb 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022722:	4602      	mov	r2, r0
 8022724:	68fb      	ldr	r3, [r7, #12]
 8022726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022728:	429a      	cmp	r2, r3
 802272a:	bf8c      	ite	hi
 802272c:	2301      	movhi	r3, #1
 802272e:	2300      	movls	r3, #0
 8022730:	b2db      	uxtb	r3, r3
 8022732:	2b00      	cmp	r3, #0
 8022734:	d008      	beq.n	8022748 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 8022736:	68fb      	ldr	r3, [r7, #12]
 8022738:	4618      	mov	r0, r3
 802273a:	f001 f9ef 	bl	8023b1c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 802273e:	68fb      	ldr	r3, [r7, #12]
 8022740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022742:	1c5a      	adds	r2, r3, #1
 8022744:	68fb      	ldr	r3, [r7, #12]
 8022746:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 8022748:	bf00      	nop
 802274a:	3710      	adds	r7, #16
 802274c:	46bd      	mov	sp, r7
 802274e:	bd80      	pop	{r7, pc}

08022750 <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 8022750:	b590      	push	{r4, r7, lr}
 8022752:	b083      	sub	sp, #12
 8022754:	af00      	add	r7, sp, #0
 8022756:	6078      	str	r0, [r7, #4]
 8022758:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	4618      	mov	r0, r3
 802275e:	f001 fa00 	bl	8023b62 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022762:	4603      	mov	r3, r0
 8022764:	2b00      	cmp	r3, #0
 8022766:	d001      	beq.n	802276c <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 8022768:	2300      	movs	r3, #0
 802276a:	e012      	b.n	8022792 <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	4618      	mov	r0, r3
 8022774:	f001 f9c0 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022778:	4603      	mov	r3, r0
 802277a:	4423      	add	r3, r4
 802277c:	683a      	ldr	r2, [r7, #0]
 802277e:	429a      	cmp	r2, r3
 8022780:	bf34      	ite	cc
 8022782:	2301      	movcc	r3, #1
 8022784:	2300      	movcs	r3, #0
 8022786:	b2db      	uxtb	r3, r3
 8022788:	2b00      	cmp	r3, #0
 802278a:	d001      	beq.n	8022790 <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 802278c:	2301      	movs	r3, #1
 802278e:	e000      	b.n	8022792 <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 8022790:	2300      	movs	r3, #0
	}
 8022792:	4618      	mov	r0, r3
 8022794:	370c      	adds	r7, #12
 8022796:	46bd      	mov	sp, r7
 8022798:	bd90      	pop	{r4, r7, pc}
	...

0802279c <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 802279c:	b5b0      	push	{r4, r5, r7, lr}
 802279e:	b084      	sub	sp, #16
 80227a0:	af00      	add	r7, sp, #0
 80227a2:	60f8      	str	r0, [r7, #12]
 80227a4:	60b9      	str	r1, [r7, #8]
 80227a6:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 80227a8:	6879      	ldr	r1, [r7, #4]
 80227aa:	68b8      	ldr	r0, [r7, #8]
 80227ac:	f7ff ffd0 	bl	8022750 <_ZNK12IMUFrameMemo3HasEj>
 80227b0:	4603      	mov	r3, r0
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	d106      	bne.n	80227c4 <_ZNK12IMUFrameMemo3GetEj+0x28>
 80227b6:	4b1a      	ldr	r3, [pc, #104]	; (8022820 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 80227b8:	4a1a      	ldr	r2, [pc, #104]	; (8022824 <_ZNK12IMUFrameMemo3GetEj+0x88>)
 80227ba:	f240 318a 	movw	r1, #906	; 0x38a
 80227be:	481a      	ldr	r0, [pc, #104]	; (8022828 <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 80227c0:	f01c fbb0 	bl	803ef24 <__assert_func>

		if (seq < FirstSeq) {
 80227c4:	68bb      	ldr	r3, [r7, #8]
 80227c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227c8:	687a      	ldr	r2, [r7, #4]
 80227ca:	429a      	cmp	r2, r3
 80227cc:	d20c      	bcs.n	80227e8 <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 80227ce:	68bb      	ldr	r3, [r7, #8]
 80227d0:	4618      	mov	r0, r3
 80227d2:	f001 fa3b 	bl	8023c4c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 80227d6:	4602      	mov	r2, r0
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	461c      	mov	r4, r3
 80227dc:	4615      	mov	r5, r2
 80227de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80227e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80227e2:	682b      	ldr	r3, [r5, #0]
 80227e4:	6023      	str	r3, [r4, #0]
 80227e6:	e017      	b.n	8022818 <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 80227e8:	68bc      	ldr	r4, [r7, #8]
 80227ea:	68bb      	ldr	r3, [r7, #8]
 80227ec:	4618      	mov	r0, r3
 80227ee:	f001 f983 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80227f2:	4601      	mov	r1, r0
 80227f4:	68bb      	ldr	r3, [r7, #8]
 80227f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	1ad3      	subs	r3, r2, r3
 80227fc:	440b      	add	r3, r1
 80227fe:	3b01      	subs	r3, #1
 8022800:	4619      	mov	r1, r3
 8022802:	4620      	mov	r0, r4
 8022804:	f001 f9bf 	bl	8023b86 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022808:	4602      	mov	r2, r0
 802280a:	68fb      	ldr	r3, [r7, #12]
 802280c:	461c      	mov	r4, r3
 802280e:	4615      	mov	r5, r2
 8022810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022814:	682b      	ldr	r3, [r5, #0]
 8022816:	6023      	str	r3, [r4, #0]
	}
 8022818:	68f8      	ldr	r0, [r7, #12]
 802281a:	3710      	adds	r7, #16
 802281c:	46bd      	mov	sp, r7
 802281e:	bdb0      	pop	{r4, r5, r7, pc}
 8022820:	08040a48 	.word	0x08040a48
 8022824:	08040a54 	.word	0x08040a54
 8022828:	08040178 	.word	0x08040178

0802282c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 802282c:	b580      	push	{r7, lr}
 802282e:	b082      	sub	sp, #8
 8022830:	af00      	add	r7, sp, #0
 8022832:	6078      	str	r0, [r7, #4]
 8022834:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8022836:	683b      	ldr	r3, [r7, #0]
 8022838:	2b00      	cmp	r3, #0
 802283a:	d106      	bne.n	802284a <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 802283c:	4b14      	ldr	r3, [pc, #80]	; (8022890 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 802283e:	4a15      	ldr	r2, [pc, #84]	; (8022894 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022840:	f240 319b 	movw	r1, #923	; 0x39b
 8022844:	4814      	ldr	r0, [pc, #80]	; (8022898 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022846:	f01c fb6d 	bl	803ef24 <__assert_func>
			assert(*ptr);
 802284a:	683b      	ldr	r3, [r7, #0]
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d106      	bne.n	8022860 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 8022852:	4b12      	ldr	r3, [pc, #72]	; (802289c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 8022854:	4a0f      	ldr	r2, [pc, #60]	; (8022894 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022856:	f44f 7167 	mov.w	r1, #924	; 0x39c
 802285a:	480f      	ldr	r0, [pc, #60]	; (8022898 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 802285c:	f01c fb62 	bl	803ef24 <__assert_func>

			**ptr = Major;
 8022860:	683b      	ldr	r3, [r7, #0]
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	687a      	ldr	r2, [r7, #4]
 8022866:	7812      	ldrb	r2, [r2, #0]
 8022868:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 802286a:	683b      	ldr	r3, [r7, #0]
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	1c5a      	adds	r2, r3, #1
 8022870:	683b      	ldr	r3, [r7, #0]
 8022872:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022874:	683b      	ldr	r3, [r7, #0]
 8022876:	681b      	ldr	r3, [r3, #0]
 8022878:	687a      	ldr	r2, [r7, #4]
 802287a:	7852      	ldrb	r2, [r2, #1]
 802287c:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 802287e:	683b      	ldr	r3, [r7, #0]
 8022880:	681b      	ldr	r3, [r3, #0]
 8022882:	1c5a      	adds	r2, r3, #1
 8022884:	683b      	ldr	r3, [r7, #0]
 8022886:	601a      	str	r2, [r3, #0]
		}
 8022888:	bf00      	nop
 802288a:	3708      	adds	r7, #8
 802288c:	46bd      	mov	sp, r7
 802288e:	bd80      	pop	{r7, pc}
 8022890:	08040144 	.word	0x08040144
 8022894:	08040a8c 	.word	0x08040a8c
 8022898:	08040178 	.word	0x08040178
 802289c:	08040194 	.word	0x08040194

080228a0 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 80228a0:	b480      	push	{r7}
 80228a2:	b083      	sub	sp, #12
 80228a4:	af00      	add	r7, sp, #0
 80228a6:	6078      	str	r0, [r7, #4]
 80228a8:	460b      	mov	r3, r1
 80228aa:	70fb      	strb	r3, [r7, #3]
 80228ac:	4613      	mov	r3, r2
 80228ae:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 80228b0:	687b      	ldr	r3, [r7, #4]
 80228b2:	78fa      	ldrb	r2, [r7, #3]
 80228b4:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	78ba      	ldrb	r2, [r7, #2]
 80228ba:	705a      	strb	r2, [r3, #1]
	}
 80228bc:	687b      	ldr	r3, [r7, #4]
 80228be:	4618      	mov	r0, r3
 80228c0:	370c      	adds	r7, #12
 80228c2:	46bd      	mov	sp, r7
 80228c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c8:	4770      	bx	lr
	...

080228cc <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 80228cc:	b580      	push	{r7, lr}
 80228ce:	b086      	sub	sp, #24
 80228d0:	af00      	add	r7, sp, #0
 80228d2:	60f8      	str	r0, [r7, #12]
 80228d4:	60b9      	str	r1, [r7, #8]
 80228d6:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	7c5b      	ldrb	r3, [r3, #17]
 80228dc:	2b02      	cmp	r3, #2
 80228de:	d006      	beq.n	80228ee <_ZN18AcknowledgeHandler6HandleERK7Request+0x22>
 80228e0:	4b14      	ldr	r3, [pc, #80]	; (8022934 <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 80228e2:	4a15      	ldr	r2, [pc, #84]	; (8022938 <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 80228e4:	f240 31af 	movw	r1, #943	; 0x3af
 80228e8:	4814      	ldr	r0, [pc, #80]	; (802293c <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 80228ea:	f01c fb1b 	bl	803ef24 <__assert_func>

		Responce responce;
 80228ee:	68f8      	ldr	r0, [r7, #12]
 80228f0:	f7fe ff16 	bl	8021720 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Ack;
 80228f4:	68fb      	ldr	r3, [r7, #12]
 80228f6:	2202      	movs	r2, #2
 80228f8:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = 0;
 80228fa:	68fb      	ldr	r3, [r7, #12]
 80228fc:	2200      	movs	r2, #0
 80228fe:	735a      	strb	r2, [r3, #13]
		responce.Error = 0;
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	2200      	movs	r2, #0
 8022904:	739a      	strb	r2, [r3, #14]
		responce.Data.resize(2);
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	2102      	movs	r1, #2
 802290a:	4618      	mov	r0, r3
 802290c:	f000 ff12 	bl	8023734 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = responce.Data.data();
 8022910:	68fb      	ldr	r3, [r7, #12]
 8022912:	4618      	mov	r0, r3
 8022914:	f000 fea6 	bl	8023664 <_ZNSt6vectorIhSaIhEE4dataEv>
 8022918:	4603      	mov	r3, r0
 802291a:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 802291c:	68bb      	ldr	r3, [r7, #8]
 802291e:	f107 0214 	add.w	r2, r7, #20
 8022922:	4611      	mov	r1, r2
 8022924:	4618      	mov	r0, r3
 8022926:	f7ff ff81 	bl	802282c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 802292a:	bf00      	nop
	}
 802292c:	68f8      	ldr	r0, [r7, #12]
 802292e:	3718      	adds	r7, #24
 8022930:	46bd      	mov	sp, r7
 8022932:	bd80      	pop	{r7, pc}
 8022934:	08040ac8 	.word	0x08040ac8
 8022938:	08040af0 	.word	0x08040af0
 802293c:	08040178 	.word	0x08040178

08022940 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 8022940:	b580      	push	{r7, lr}
 8022942:	b082      	sub	sp, #8
 8022944:	af00      	add	r7, sp, #0
 8022946:	6078      	str	r0, [r7, #4]
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	3348      	adds	r3, #72	; 0x48
 802294c:	4618      	mov	r0, r3
 802294e:	f000 fdc5 	bl	80234dc <_ZNSt6vectorIhSaIhEED1Ev>
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	3334      	adds	r3, #52	; 0x34
 8022956:	4618      	mov	r0, r3
 8022958:	f7fe fb7f 	bl	802105a <_ZN7RequestD1Ev>
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	4618      	mov	r0, r3
 8022960:	f7fe ff7f 	bl	8021862 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	4618      	mov	r0, r3
 8022968:	3708      	adds	r7, #8
 802296a:	46bd      	mov	sp, r7
 802296c:	bd80      	pop	{r7, pc}

0802296e <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 802296e:	b580      	push	{r7, lr}
 8022970:	b082      	sub	sp, #8
 8022972:	af00      	add	r7, sp, #0
 8022974:	6078      	str	r0, [r7, #4]
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	3368      	adds	r3, #104	; 0x68
 802297a:	4618      	mov	r0, r3
 802297c:	f000 fdae 	bl	80234dc <_ZNSt6vectorIhSaIhEED1Ev>
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	3350      	adds	r3, #80	; 0x50
 8022984:	4618      	mov	r0, r3
 8022986:	f7fe fb68 	bl	802105a <_ZN7RequestD1Ev>
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	3328      	adds	r3, #40	; 0x28
 802298e:	4618      	mov	r0, r3
 8022990:	f7fe fb23 	bl	8020fda <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8022994:	687b      	ldr	r3, [r7, #4]
 8022996:	4618      	mov	r0, r3
 8022998:	f000 fd01 	bl	802339e <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 802299c:	687b      	ldr	r3, [r7, #4]
 802299e:	4618      	mov	r0, r3
 80229a0:	3708      	adds	r7, #8
 80229a2:	46bd      	mov	sp, r7
 80229a4:	bd80      	pop	{r7, pc}

080229a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
 80229a6:	b580      	push	{r7, lr}
 80229a8:	b082      	sub	sp, #8
 80229aa:	af00      	add	r7, sp, #0
 80229ac:	6078      	str	r0, [r7, #4]
 80229ae:	687b      	ldr	r3, [r7, #4]
 80229b0:	4618      	mov	r0, r3
 80229b2:	f001 f96b 	bl	8023c8c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	4618      	mov	r0, r3
 80229ba:	3708      	adds	r7, #8
 80229bc:	46bd      	mov	sp, r7
 80229be:	bd80      	pop	{r7, pc}

080229c0 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 80229c0:	b580      	push	{r7, lr}
 80229c2:	b082      	sub	sp, #8
 80229c4:	af00      	add	r7, sp, #0
 80229c6:	6078      	str	r0, [r7, #4]
 80229c8:	687b      	ldr	r3, [r7, #4]
 80229ca:	4618      	mov	r0, r3
 80229cc:	f7ff ffeb 	bl	80229a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	2200      	movs	r2, #0
 80229d4:	629a      	str	r2, [r3, #40]	; 0x28
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80229dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80229de:	687b      	ldr	r3, [r7, #4]
 80229e0:	4618      	mov	r0, r3
 80229e2:	3708      	adds	r7, #8
 80229e4:	46bd      	mov	sp, r7
 80229e6:	bd80      	pop	{r7, pc}

080229e8 <_ZN17IMUFrameContainerD1Ev>:
 80229e8:	b580      	push	{r7, lr}
 80229ea:	b082      	sub	sp, #8
 80229ec:	af00      	add	r7, sp, #0
 80229ee:	6078      	str	r0, [r7, #4]
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	4618      	mov	r0, r3
 80229f4:	f001 f97d 	bl	8023cf2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	4618      	mov	r0, r3
 80229fc:	3708      	adds	r7, #8
 80229fe:	46bd      	mov	sp, r7
 8022a00:	bd80      	pop	{r7, pc}

08022a02 <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022a02:	b580      	push	{r7, lr}
 8022a04:	b082      	sub	sp, #8
 8022a06:	af00      	add	r7, sp, #0
 8022a08:	6078      	str	r0, [r7, #4]
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	4618      	mov	r0, r3
 8022a0e:	f7ff ffca 	bl	80229a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	22a0      	movs	r2, #160	; 0xa0
 8022a16:	629a      	str	r2, [r3, #40]	; 0x28
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	2200      	movs	r2, #0
 8022a1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8022a1e:	687b      	ldr	r3, [r7, #4]
 8022a20:	4618      	mov	r0, r3
 8022a22:	3708      	adds	r7, #8
 8022a24:	46bd      	mov	sp, r7
 8022a26:	bd80      	pop	{r7, pc}

08022a28 <_ZN12IMUFrameMemoD1Ev>:
 8022a28:	b580      	push	{r7, lr}
 8022a2a:	b082      	sub	sp, #8
 8022a2c:	af00      	add	r7, sp, #0
 8022a2e:	6078      	str	r0, [r7, #4]
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	4618      	mov	r0, r3
 8022a34:	f001 f95d 	bl	8023cf2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	4618      	mov	r0, r3
 8022a3c:	3708      	adds	r7, #8
 8022a3e:	46bd      	mov	sp, r7
 8022a40:	bd80      	pop	{r7, pc}

08022a42 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
 8022a42:	b580      	push	{r7, lr}
 8022a44:	b082      	sub	sp, #8
 8022a46:	af00      	add	r7, sp, #0
 8022a48:	6078      	str	r0, [r7, #4]
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	4618      	mov	r0, r3
 8022a4e:	f001 f996 	bl	8023d7e <_ZNSt5dequeIjSaIjEED1Ev>
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	4618      	mov	r0, r3
 8022a56:	3708      	adds	r7, #8
 8022a58:	46bd      	mov	sp, r7
 8022a5a:	bd80      	pop	{r7, pc}

08022a5c <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b082      	sub	sp, #8
 8022a60:	af00      	add	r7, sp, #0
 8022a62:	6078      	str	r0, [r7, #4]
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	2200      	movs	r2, #0
 8022a68:	601a      	str	r2, [r3, #0]
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	2200      	movs	r2, #0
 8022a6e:	605a      	str	r2, [r3, #4]
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	2201      	movs	r2, #1
 8022a74:	609a      	str	r2, [r3, #8]
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	2200      	movs	r2, #0
 8022a7a:	60da      	str	r2, [r3, #12]
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	2200      	movs	r2, #0
 8022a80:	611a      	str	r2, [r3, #16]
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022a88:	615a      	str	r2, [r3, #20]
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	3318      	adds	r3, #24
 8022a8e:	4618      	mov	r0, r3
 8022a90:	f001 f961 	bl	8023d56 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	2200      	movs	r2, #0
 8022a98:	641a      	str	r2, [r3, #64]	; 0x40
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	4618      	mov	r0, r3
 8022a9e:	3708      	adds	r7, #8
 8022aa0:	46bd      	mov	sp, r7
 8022aa2:	bd80      	pop	{r7, pc}

08022aa4 <_ZN20StrobeDurationFilterD1Ev>:
 8022aa4:	b580      	push	{r7, lr}
 8022aa6:	b082      	sub	sp, #8
 8022aa8:	af00      	add	r7, sp, #0
 8022aaa:	6078      	str	r0, [r7, #4]
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	3318      	adds	r3, #24
 8022ab0:	4618      	mov	r0, r3
 8022ab2:	f7ff ffc6 	bl	8022a42 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	4618      	mov	r0, r3
 8022aba:	3708      	adds	r7, #8
 8022abc:	46bd      	mov	sp, r7
 8022abe:	bd80      	pop	{r7, pc}

08022ac0 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	StrobeDurationFilter StrobeFilter;
	size_t StrobeOffset;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022ac0:	b084      	sub	sp, #16
 8022ac2:	b580      	push	{r7, lr}
 8022ac4:	b082      	sub	sp, #8
 8022ac6:	af00      	add	r7, sp, #0
 8022ac8:	6078      	str	r0, [r7, #4]
 8022aca:	f107 0014 	add.w	r0, r7, #20
 8022ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor }, StrobeOffset {
					conf.StrobeOffset } {
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	6979      	ldr	r1, [r7, #20]
 8022ad6:	69fa      	ldr	r2, [r7, #28]
 8022ad8:	4618      	mov	r0, r3
 8022ada:	f7fe fecf 	bl	802187c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	3360      	adds	r3, #96	; 0x60
 8022ae2:	69b9      	ldr	r1, [r7, #24]
 8022ae4:	69fa      	ldr	r2, [r7, #28]
 8022ae6:	4618      	mov	r0, r3
 8022ae8:	f7fe fec8 	bl	802187c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	33c0      	adds	r3, #192	; 0xc0
 8022af0:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8022af4:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8022af8:	4618      	mov	r0, r3
 8022afa:	f7ff fed1 	bl	80228a0 <_ZN18AcknowledgeHandlerC1Ehh>
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	33c4      	adds	r3, #196	; 0xc4
 8022b02:	6a39      	ldr	r1, [r7, #32]
 8022b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022b06:	4618      	mov	r0, r3
 8022b08:	f7fe fab4 	bl	8021074 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022b12:	2230      	movs	r2, #48	; 0x30
 8022b14:	2100      	movs	r1, #0
 8022b16:	4618      	mov	r0, r3
 8022b18:	f01c fa96 	bl	803f048 <memset>
 8022b1c:	687b      	ldr	r3, [r7, #4]
 8022b1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022b22:	4618      	mov	r0, r3
 8022b24:	f7ff ff4c 	bl	80229c0 <_ZN17IMUFrameContainerC1Ev>
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8022b2e:	4618      	mov	r0, r3
 8022b30:	f7ff ff67 	bl	8022a02 <_ZN12IMUFrameMemoC1Ev>
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8022b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022b3c:	4611      	mov	r1, r2
 8022b3e:	4618      	mov	r0, r3
 8022b40:	f7fd fda0 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022b44:	687a      	ldr	r2, [r7, #4]
 8022b46:	f241 3304 	movw	r3, #4868	; 0x1304
 8022b4a:	4413      	add	r3, r2
 8022b4c:	4618      	mov	r0, r3
 8022b4e:	f7ff ff85 	bl	8022a5c <_ZN20StrobeDurationFilterC1Ev>
 8022b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b54:	687a      	ldr	r2, [r7, #4]
 8022b56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8022b5a:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
 8022b5e:	687b      	ldr	r3, [r7, #4]
 8022b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022b64:	2200      	movs	r2, #0
 8022b66:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
	}
 8022b6a:	687b      	ldr	r3, [r7, #4]
 8022b6c:	4618      	mov	r0, r3
 8022b6e:	3708      	adds	r7, #8
 8022b70:	46bd      	mov	sp, r7
 8022b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022b76:	b004      	add	sp, #16
 8022b78:	4770      	bx	lr

08022b7a <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022b7a:	b580      	push	{r7, lr}
 8022b7c:	b082      	sub	sp, #8
 8022b7e:	af00      	add	r7, sp, #0
 8022b80:	6078      	str	r0, [r7, #4]
 8022b82:	687b      	ldr	r3, [r7, #4]
 8022b84:	4618      	mov	r0, r3
 8022b86:	f000 ff1f 	bl	80239c8 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8022b8a:	687b      	ldr	r3, [r7, #4]
 8022b8c:	3334      	adds	r3, #52	; 0x34
 8022b8e:	4618      	mov	r0, r3
 8022b90:	f7fe fa56 	bl	8021040 <_ZN7RequestC1Ev>
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	3348      	adds	r3, #72	; 0x48
 8022b98:	4618      	mov	r0, r3
 8022b9a:	f7fe fa44 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	2201      	movs	r2, #1
 8022ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	4618      	mov	r0, r3
 8022baa:	3708      	adds	r7, #8
 8022bac:	46bd      	mov	sp, r7
 8022bae:	bd80      	pop	{r7, pc}

08022bb0 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022bb0:	b580      	push	{r7, lr}
 8022bb2:	b082      	sub	sp, #8
 8022bb4:	af00      	add	r7, sp, #0
 8022bb6:	6078      	str	r0, [r7, #4]
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	4618      	mov	r0, r3
 8022bbc:	f7fe fa00 	bl	8020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	3328      	adds	r3, #40	; 0x28
 8022bc4:	4618      	mov	r0, r3
 8022bc6:	f000 fc1c 	bl	8023402 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	3350      	adds	r3, #80	; 0x50
 8022bce:	4618      	mov	r0, r3
 8022bd0:	f7fe fa36 	bl	8021040 <_ZN7RequestC1Ev>
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	2200      	movs	r2, #0
 8022bd8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	2200      	movs	r2, #0
 8022be0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	3368      	adds	r3, #104	; 0x68
 8022be8:	4618      	mov	r0, r3
 8022bea:	f7fe fa1c 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	2201      	movs	r2, #1
 8022bf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	2200      	movs	r2, #0
 8022bfa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	4618      	mov	r0, r3
 8022c02:	3708      	adds	r7, #8
 8022c04:	46bd      	mov	sp, r7
 8022c06:	bd80      	pop	{r7, pc}

08022c08 <_ZN10BHYWrapperC1Ev>:

		void SerializeTo(uint8_t* dest, uint8_t* size);
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022c08:	b480      	push	{r7}
 8022c0a:	b083      	sub	sp, #12
 8022c0c:	af00      	add	r7, sp, #0
 8022c0e:	6078      	str	r0, [r7, #4]
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022c16:	461a      	mov	r2, r3
 8022c18:	2300      	movs	r3, #0
 8022c1a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	4618      	mov	r0, r3
 8022c22:	370c      	adds	r7, #12
 8022c24:	46bd      	mov	sp, r7
 8022c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c2a:	4770      	bx	lr

08022c2c <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022c2c:	b580      	push	{r7, lr}
 8022c2e:	b082      	sub	sp, #8
 8022c30:	af00      	add	r7, sp, #0
 8022c32:	6078      	str	r0, [r7, #4]
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	4618      	mov	r0, r3
 8022c38:	f7ff ff9f 	bl	8022b7a <_ZN13HeadInterfaceC1Ev>
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	3360      	adds	r3, #96	; 0x60
 8022c40:	4618      	mov	r0, r3
 8022c42:	f7ff ff9a 	bl	8022b7a <_ZN13HeadInterfaceC1Ev>
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	33c0      	adds	r3, #192	; 0xc0
 8022c4a:	2200      	movs	r2, #0
 8022c4c:	2100      	movs	r1, #0
 8022c4e:	4618      	mov	r0, r3
 8022c50:	f7ff fe26 	bl	80228a0 <_ZN18AcknowledgeHandlerC1Ehh>
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	33c4      	adds	r3, #196	; 0xc4
 8022c58:	4618      	mov	r0, r3
 8022c5a:	f7ff ffa9 	bl	8022bb0 <_ZN11QueueSenderC1Ev>
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022c64:	4618      	mov	r0, r3
 8022c66:	f7ff feab 	bl	80229c0 <_ZN17IMUFrameContainerC1Ev>
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8022c70:	4618      	mov	r0, r3
 8022c72:	f7ff fec6 	bl	8022a02 <_ZN12IMUFrameMemoC1Ev>
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8022c7c:	4618      	mov	r0, r3
 8022c7e:	f7ff ffc3 	bl	8022c08 <_ZN10BHYWrapperC1Ev>
 8022c82:	687a      	ldr	r2, [r7, #4]
 8022c84:	f241 3304 	movw	r3, #4868	; 0x1304
 8022c88:	4413      	add	r3, r2
 8022c8a:	4618      	mov	r0, r3
 8022c8c:	f7ff fee6 	bl	8022a5c <_ZN20StrobeDurationFilterC1Ev>
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022c96:	2200      	movs	r2, #0
 8022c98:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
 8022c9c:	687b      	ldr	r3, [r7, #4]
 8022c9e:	4618      	mov	r0, r3
 8022ca0:	3708      	adds	r7, #8
 8022ca2:	46bd      	mov	sp, r7
 8022ca4:	bd80      	pop	{r7, pc}

08022ca6 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022ca6:	b580      	push	{r7, lr}
 8022ca8:	b082      	sub	sp, #8
 8022caa:	af00      	add	r7, sp, #0
 8022cac:	6078      	str	r0, [r7, #4]
 8022cae:	687a      	ldr	r2, [r7, #4]
 8022cb0:	f241 3304 	movw	r3, #4868	; 0x1304
 8022cb4:	4413      	add	r3, r2
 8022cb6:	4618      	mov	r0, r3
 8022cb8:	f7ff fef4 	bl	8022aa4 <_ZN20StrobeDurationFilterD1Ev>
 8022cbc:	687b      	ldr	r3, [r7, #4]
 8022cbe:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8022cc2:	4618      	mov	r0, r3
 8022cc4:	f7ff feb0 	bl	8022a28 <_ZN12IMUFrameMemoD1Ev>
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022cce:	4618      	mov	r0, r3
 8022cd0:	f7ff fe8a 	bl	80229e8 <_ZN17IMUFrameContainerD1Ev>
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	33c4      	adds	r3, #196	; 0xc4
 8022cd8:	4618      	mov	r0, r3
 8022cda:	f7ff fe48 	bl	802296e <_ZN11QueueSenderD1Ev>
 8022cde:	687b      	ldr	r3, [r7, #4]
 8022ce0:	3360      	adds	r3, #96	; 0x60
 8022ce2:	4618      	mov	r0, r3
 8022ce4:	f7ff fe2c 	bl	8022940 <_ZN13HeadInterfaceD1Ev>
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	4618      	mov	r0, r3
 8022cec:	f7ff fe28 	bl	8022940 <_ZN13HeadInterfaceD1Ev>
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	4618      	mov	r0, r3
 8022cf4:	3708      	adds	r7, #8
 8022cf6:	46bd      	mov	sp, r7
 8022cf8:	bd80      	pop	{r7, pc}

08022cfa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8022cfa:	b580      	push	{r7, lr}
 8022cfc:	b082      	sub	sp, #8
 8022cfe:	af00      	add	r7, sp, #0
 8022d00:	6078      	str	r0, [r7, #4]
 8022d02:	6039      	str	r1, [r7, #0]
 8022d04:	687b      	ldr	r3, [r7, #4]
 8022d06:	683a      	ldr	r2, [r7, #0]
 8022d08:	4611      	mov	r1, r2
 8022d0a:	4618      	mov	r0, r3
 8022d0c:	f001 f85c 	bl	8023dc8 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	4618      	mov	r0, r3
 8022d14:	3708      	adds	r7, #8
 8022d16:	46bd      	mov	sp, r7
 8022d18:	bd80      	pop	{r7, pc}

08022d1a <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8022d1a:	b580      	push	{r7, lr}
 8022d1c:	b082      	sub	sp, #8
 8022d1e:	af00      	add	r7, sp, #0
 8022d20:	6078      	str	r0, [r7, #4]
 8022d22:	6039      	str	r1, [r7, #0]
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	683a      	ldr	r2, [r7, #0]
 8022d28:	4611      	mov	r1, r2
 8022d2a:	4618      	mov	r0, r3
 8022d2c:	f7ff ffe5 	bl	8022cfa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8022d30:	683b      	ldr	r3, [r7, #0]
 8022d32:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8022d3c:	683b      	ldr	r3, [r7, #0]
 8022d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022d40:	687b      	ldr	r3, [r7, #4]
 8022d42:	62da      	str	r2, [r3, #44]	; 0x2c
 8022d44:	683b      	ldr	r3, [r7, #0]
 8022d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022d48:	687b      	ldr	r3, [r7, #4]
 8022d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022d52:	683b      	ldr	r3, [r7, #0]
 8022d54:	3334      	adds	r3, #52	; 0x34
 8022d56:	4619      	mov	r1, r3
 8022d58:	4610      	mov	r0, r2
 8022d5a:	f7fe f9d7 	bl	802110c <_ZN7RequestaSEOS_>
 8022d5e:	687b      	ldr	r3, [r7, #4]
 8022d60:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8022d64:	683b      	ldr	r3, [r7, #0]
 8022d66:	3348      	adds	r3, #72	; 0x48
 8022d68:	4619      	mov	r1, r3
 8022d6a:	4610      	mov	r0, r2
 8022d6c:	f000 fc07 	bl	802357e <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8022d70:	683b      	ldr	r3, [r7, #0]
 8022d72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	655a      	str	r2, [r3, #84]	; 0x54
 8022d78:	683b      	ldr	r3, [r7, #0]
 8022d7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8022d80:	683b      	ldr	r3, [r7, #0]
 8022d82:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8022d86:	687b      	ldr	r3, [r7, #4]
 8022d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	4618      	mov	r0, r3
 8022d90:	3708      	adds	r7, #8
 8022d92:	46bd      	mov	sp, r7
 8022d94:	bd80      	pop	{r7, pc}

08022d96 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8022d96:	b580      	push	{r7, lr}
 8022d98:	b082      	sub	sp, #8
 8022d9a:	af00      	add	r7, sp, #0
 8022d9c:	6078      	str	r0, [r7, #4]
 8022d9e:	6039      	str	r1, [r7, #0]
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	683a      	ldr	r2, [r7, #0]
 8022da4:	4611      	mov	r1, r2
 8022da6:	4618      	mov	r0, r3
 8022da8:	f001 f821 	bl	8023dee <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	4618      	mov	r0, r3
 8022db0:	3708      	adds	r7, #8
 8022db2:	46bd      	mov	sp, r7
 8022db4:	bd80      	pop	{r7, pc}

08022db6 <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 8022db6:	b580      	push	{r7, lr}
 8022db8:	b082      	sub	sp, #8
 8022dba:	af00      	add	r7, sp, #0
 8022dbc:	6078      	str	r0, [r7, #4]
 8022dbe:	6039      	str	r1, [r7, #0]
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	683a      	ldr	r2, [r7, #0]
 8022dc4:	4611      	mov	r1, r2
 8022dc6:	4618      	mov	r0, r3
 8022dc8:	f000 fffe 	bl	8023dc8 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8022dd2:	683b      	ldr	r3, [r7, #0]
 8022dd4:	3328      	adds	r3, #40	; 0x28
 8022dd6:	4619      	mov	r1, r3
 8022dd8:	4610      	mov	r0, r2
 8022dda:	f7ff ffdc 	bl	8022d96 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8022de4:	683b      	ldr	r3, [r7, #0]
 8022de6:	3350      	adds	r3, #80	; 0x50
 8022de8:	4619      	mov	r1, r3
 8022dea:	4610      	mov	r0, r2
 8022dec:	f7fe f98e 	bl	802110c <_ZN7RequestaSEOS_>
 8022df0:	683b      	ldr	r3, [r7, #0]
 8022df2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8022dfc:	683b      	ldr	r3, [r7, #0]
 8022dfe:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8022e02:	687b      	ldr	r3, [r7, #4]
 8022e04:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8022e0e:	683b      	ldr	r3, [r7, #0]
 8022e10:	3368      	adds	r3, #104	; 0x68
 8022e12:	4619      	mov	r1, r3
 8022e14:	4610      	mov	r0, r2
 8022e16:	f000 fbb2 	bl	802357e <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8022e1a:	683b      	ldr	r3, [r7, #0]
 8022e1c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	675a      	str	r2, [r3, #116]	; 0x74
 8022e22:	683b      	ldr	r3, [r7, #0]
 8022e24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	679a      	str	r2, [r3, #120]	; 0x78
 8022e2a:	683b      	ldr	r3, [r7, #0]
 8022e2c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8022e36:	683b      	ldr	r3, [r7, #0]
 8022e38:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8022e42:	687b      	ldr	r3, [r7, #4]
 8022e44:	4618      	mov	r0, r3
 8022e46:	3708      	adds	r7, #8
 8022e48:	46bd      	mov	sp, r7
 8022e4a:	bd80      	pop	{r7, pc}

08022e4c <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b082      	sub	sp, #8
 8022e50:	af00      	add	r7, sp, #0
 8022e52:	6078      	str	r0, [r7, #4]
 8022e54:	6039      	str	r1, [r7, #0]
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	683a      	ldr	r2, [r7, #0]
 8022e5a:	4611      	mov	r1, r2
 8022e5c:	4618      	mov	r0, r3
 8022e5e:	f000 ffd9 	bl	8023e14 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022e62:	683b      	ldr	r3, [r7, #0]
 8022e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	629a      	str	r2, [r3, #40]	; 0x28
 8022e6a:	683b      	ldr	r3, [r7, #0]
 8022e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022e6e:	687b      	ldr	r3, [r7, #4]
 8022e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8022e72:	687b      	ldr	r3, [r7, #4]
 8022e74:	4618      	mov	r0, r3
 8022e76:	3708      	adds	r7, #8
 8022e78:	46bd      	mov	sp, r7
 8022e7a:	bd80      	pop	{r7, pc}

08022e7c <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 8022e7c:	b580      	push	{r7, lr}
 8022e7e:	b082      	sub	sp, #8
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	6078      	str	r0, [r7, #4]
 8022e84:	6039      	str	r1, [r7, #0]
 8022e86:	687b      	ldr	r3, [r7, #4]
 8022e88:	683a      	ldr	r2, [r7, #0]
 8022e8a:	4611      	mov	r1, r2
 8022e8c:	4618      	mov	r0, r3
 8022e8e:	f000 ffc1 	bl	8023e14 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022e92:	683b      	ldr	r3, [r7, #0]
 8022e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	629a      	str	r2, [r3, #40]	; 0x28
 8022e9a:	683b      	ldr	r3, [r7, #0]
 8022e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	4618      	mov	r0, r3
 8022ea6:	3708      	adds	r7, #8
 8022ea8:	46bd      	mov	sp, r7
 8022eaa:	bd80      	pop	{r7, pc}

08022eac <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 8022eac:	b580      	push	{r7, lr}
 8022eae:	b082      	sub	sp, #8
 8022eb0:	af00      	add	r7, sp, #0
 8022eb2:	6078      	str	r0, [r7, #4]
 8022eb4:	6039      	str	r1, [r7, #0]
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	683a      	ldr	r2, [r7, #0]
 8022eba:	4611      	mov	r1, r2
 8022ebc:	4618      	mov	r0, r3
 8022ebe:	f000 ffbc 	bl	8023e3a <_ZNSt5dequeIjSaIjEEaSEOS1_>
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	4618      	mov	r0, r3
 8022ec6:	3708      	adds	r7, #8
 8022ec8:	46bd      	mov	sp, r7
 8022eca:	bd80      	pop	{r7, pc}

08022ecc <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 8022ecc:	b580      	push	{r7, lr}
 8022ece:	b082      	sub	sp, #8
 8022ed0:	af00      	add	r7, sp, #0
 8022ed2:	6078      	str	r0, [r7, #4]
 8022ed4:	6039      	str	r1, [r7, #0]
 8022ed6:	683b      	ldr	r3, [r7, #0]
 8022ed8:	681a      	ldr	r2, [r3, #0]
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	601a      	str	r2, [r3, #0]
 8022ede:	683b      	ldr	r3, [r7, #0]
 8022ee0:	685a      	ldr	r2, [r3, #4]
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	605a      	str	r2, [r3, #4]
 8022ee6:	683b      	ldr	r3, [r7, #0]
 8022ee8:	689a      	ldr	r2, [r3, #8]
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	609a      	str	r2, [r3, #8]
 8022eee:	683b      	ldr	r3, [r7, #0]
 8022ef0:	68da      	ldr	r2, [r3, #12]
 8022ef2:	687b      	ldr	r3, [r7, #4]
 8022ef4:	60da      	str	r2, [r3, #12]
 8022ef6:	683b      	ldr	r3, [r7, #0]
 8022ef8:	691a      	ldr	r2, [r3, #16]
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	611a      	str	r2, [r3, #16]
 8022efe:	683b      	ldr	r3, [r7, #0]
 8022f00:	695a      	ldr	r2, [r3, #20]
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	615a      	str	r2, [r3, #20]
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	f103 0218 	add.w	r2, r3, #24
 8022f0c:	683b      	ldr	r3, [r7, #0]
 8022f0e:	3318      	adds	r3, #24
 8022f10:	4619      	mov	r1, r3
 8022f12:	4610      	mov	r0, r2
 8022f14:	f7ff ffca 	bl	8022eac <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 8022f18:	683b      	ldr	r3, [r7, #0]
 8022f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022f1c:	687b      	ldr	r3, [r7, #4]
 8022f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	4618      	mov	r0, r3
 8022f24:	3708      	adds	r7, #8
 8022f26:	46bd      	mov	sp, r7
 8022f28:	bd80      	pop	{r7, pc}

08022f2a <_ZN18MotherboardContextaSEOS_>:
 8022f2a:	b580      	push	{r7, lr}
 8022f2c:	b082      	sub	sp, #8
 8022f2e:	af00      	add	r7, sp, #0
 8022f30:	6078      	str	r0, [r7, #4]
 8022f32:	6039      	str	r1, [r7, #0]
 8022f34:	687b      	ldr	r3, [r7, #4]
 8022f36:	683a      	ldr	r2, [r7, #0]
 8022f38:	4611      	mov	r1, r2
 8022f3a:	4618      	mov	r0, r3
 8022f3c:	f7ff feed 	bl	8022d1a <_ZN13HeadInterfaceaSEOS_>
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8022f46:	683b      	ldr	r3, [r7, #0]
 8022f48:	3360      	adds	r3, #96	; 0x60
 8022f4a:	4619      	mov	r1, r3
 8022f4c:	4610      	mov	r0, r2
 8022f4e:	f7ff fee4 	bl	8022d1a <_ZN13HeadInterfaceaSEOS_>
 8022f52:	687b      	ldr	r3, [r7, #4]
 8022f54:	683a      	ldr	r2, [r7, #0]
 8022f56:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8022f5a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8022f64:	683b      	ldr	r3, [r7, #0]
 8022f66:	33c4      	adds	r3, #196	; 0xc4
 8022f68:	4619      	mov	r1, r3
 8022f6a:	4610      	mov	r0, r2
 8022f6c:	f7ff ff23 	bl	8022db6 <_ZN11QueueSenderaSEOS_>
 8022f70:	687b      	ldr	r3, [r7, #4]
 8022f72:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8022f76:	683b      	ldr	r3, [r7, #0]
 8022f78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022f7c:	4619      	mov	r1, r3
 8022f7e:	4610      	mov	r0, r2
 8022f80:	f7ff ff64 	bl	8022e4c <_ZN17IMUFrameContaineraSEOS_>
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8022f8a:	683b      	ldr	r3, [r7, #0]
 8022f8c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8022f90:	4619      	mov	r1, r3
 8022f92:	4610      	mov	r0, r2
 8022f94:	f7ff ff72 	bl	8022e7c <_ZN12IMUFrameMemoaSEOS_>
 8022f98:	687a      	ldr	r2, [r7, #4]
 8022f9a:	683b      	ldr	r3, [r7, #0]
 8022f9c:	f502 70d4 	add.w	r0, r2, #424	; 0x1a8
 8022fa0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8022fa4:	f241 1254 	movw	r2, #4436	; 0x1154
 8022fa8:	4619      	mov	r1, r3
 8022faa:	f01c f825 	bl	803eff8 <memcpy>
 8022fae:	687a      	ldr	r2, [r7, #4]
 8022fb0:	f241 3304 	movw	r3, #4868	; 0x1304
 8022fb4:	4413      	add	r3, r2
 8022fb6:	6839      	ldr	r1, [r7, #0]
 8022fb8:	f241 3204 	movw	r2, #4868	; 0x1304
 8022fbc:	440a      	add	r2, r1
 8022fbe:	4611      	mov	r1, r2
 8022fc0:	4618      	mov	r0, r3
 8022fc2:	f7ff ff83 	bl	8022ecc <_ZN20StrobeDurationFilteraSEOS_>
 8022fc6:	683b      	ldr	r3, [r7, #0]
 8022fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022fcc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8022fd0:	687a      	ldr	r2, [r7, #4]
 8022fd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8022fd6:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
 8022fda:	683b      	ldr	r3, [r7, #0]
 8022fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022fe0:	f893 234c 	ldrb.w	r2, [r3, #844]	; 0x34c
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022fea:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	4618      	mov	r0, r3
 8022ff2:	3708      	adds	r7, #8
 8022ff4:	46bd      	mov	sp, r7
 8022ff6:	bd80      	pop	{r7, pc}

08022ff8 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8022ff8:	b084      	sub	sp, #16
 8022ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ffc:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 8023000:	b083      	sub	sp, #12
 8023002:	af06      	add	r7, sp, #24
 8023004:	f241 3468 	movw	r4, #4968	; 0x1368
 8023008:	443c      	add	r4, r7
 802300a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 802300e:	4e1e      	ldr	r6, [pc, #120]	; (8023088 <MotherboardInit+0x90>)
 8023010:	f241 3350 	movw	r3, #4944	; 0x1350
 8023014:	4433      	add	r3, r6
 8023016:	19de      	adds	r6, r3, r7
 8023018:	466d      	mov	r5, sp
 802301a:	f241 3474 	movw	r4, #4980	; 0x1374
 802301e:	443c      	add	r4, r7
 8023020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8023022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023024:	6823      	ldr	r3, [r4, #0]
 8023026:	602b      	str	r3, [r5, #0]
 8023028:	f241 3368 	movw	r3, #4968	; 0x1368
 802302c:	443b      	add	r3, r7
 802302e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8023030:	4630      	mov	r0, r6
 8023032:	f7ff fd45 	bl	8022ac0 <_ZN18MotherboardContextC1E17MotherboardConfig>
 8023036:	4b14      	ldr	r3, [pc, #80]	; (8023088 <MotherboardInit+0x90>)
 8023038:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 802303c:	f103 0310 	add.w	r3, r3, #16
 8023040:	443b      	add	r3, r7
 8023042:	4619      	mov	r1, r3
 8023044:	4811      	ldr	r0, [pc, #68]	; (802308c <MotherboardInit+0x94>)
 8023046:	f7ff ff70 	bl	8022f2a <_ZN18MotherboardContextaSEOS_>
 802304a:	4b0f      	ldr	r3, [pc, #60]	; (8023088 <MotherboardInit+0x90>)
 802304c:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8023050:	f103 0310 	add.w	r3, r3, #16
 8023054:	443b      	add	r3, r7
 8023056:	4618      	mov	r0, r3
 8023058:	f7ff fe25 	bl	8022ca6 <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 802305c:	480b      	ldr	r0, [pc, #44]	; (802308c <MotherboardInit+0x94>)
 802305e:	f7fe fc41 	bl	80218e4 <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 8023062:	480b      	ldr	r0, [pc, #44]	; (8023090 <MotherboardInit+0x98>)
 8023064:	f7fe fc3e 	bl	80218e4 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8023068:	2100      	movs	r1, #0
 802306a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8023094 <MotherboardInit+0x9c>
 802306e:	480a      	ldr	r0, [pc, #40]	; (8023098 <MotherboardInit+0xa0>)
 8023070:	f7fd fb2c 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 8023074:	4603      	mov	r3, r0
}
 8023076:	4618      	mov	r0, r3
 8023078:	f507 579a 	add.w	r7, r7, #4928	; 0x1340
 802307c:	3714      	adds	r7, #20
 802307e:	46bd      	mov	sp, r7
 8023080:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023084:	b004      	add	sp, #16
 8023086:	4770      	bx	lr
 8023088:	ffffecb0 	.word	0xffffecb0
 802308c:	240001d0 	.word	0x240001d0
 8023090:	24000230 	.word	0x24000230
 8023094:	44480000 	.word	0x44480000
 8023098:	24000378 	.word	0x24000378

0802309c <MotherboardTick>:

int MotherboardTick() {
 802309c:	b580      	push	{r7, lr}
 802309e:	b0a0      	sub	sp, #128	; 0x80
 80230a0:	af04      	add	r7, sp, #16
	if (mbctx.StrobeFilter.HasStrobe()) {
 80230a2:	4860      	ldr	r0, [pc, #384]	; (8023224 <MotherboardTick+0x188>)
 80230a4:	f7fe ffc8 	bl	8022038 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80230a8:	4603      	mov	r3, r0
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	d021      	beq.n	80230f2 <MotherboardTick+0x56>
		size_t targetSeq = mbctx.StrobeFilter.GetStrobe() + mbctx.StrobeOffset;
 80230ae:	485d      	ldr	r0, [pc, #372]	; (8023224 <MotherboardTick+0x188>)
 80230b0:	f7fe ffa0 	bl	8021ff4 <_ZNK20StrobeDurationFilter9GetStrobeEv>
 80230b4:	4602      	mov	r2, r0
 80230b6:	4b5c      	ldr	r3, [pc, #368]	; (8023228 <MotherboardTick+0x18c>)
 80230b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80230bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80230c0:	4413      	add	r3, r2
 80230c2:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (mbctx.FrameMemo.Has(targetSeq)) {
 80230c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80230c6:	4859      	ldr	r0, [pc, #356]	; (802322c <MotherboardTick+0x190>)
 80230c8:	f7ff fb42 	bl	8022750 <_ZNK12IMUFrameMemo3HasEj>
 80230cc:	4603      	mov	r3, r0
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	d00f      	beq.n	80230f2 <MotherboardTick+0x56>
			mbctx.FrameContainer.Add(mbctx.FrameMemo.Get(targetSeq));
 80230d2:	f107 0314 	add.w	r3, r7, #20
 80230d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80230d8:	4954      	ldr	r1, [pc, #336]	; (802322c <MotherboardTick+0x190>)
 80230da:	4618      	mov	r0, r3
 80230dc:	f7ff fb5e 	bl	802279c <_ZNK12IMUFrameMemo3GetEj>
 80230e0:	f107 0314 	add.w	r3, r7, #20
 80230e4:	4619      	mov	r1, r3
 80230e6:	4852      	ldr	r0, [pc, #328]	; (8023230 <MotherboardTick+0x194>)
 80230e8:	f7fe fe56 	bl	8021d98 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
			mbctx.StrobeFilter.PopStrobe();
 80230ec:	484d      	ldr	r0, [pc, #308]	; (8023224 <MotherboardTick+0x188>)
 80230ee:	f7fe ffb4 	bl	802205a <_ZN20StrobeDurationFilter9PopStrobeEv>
		}
	}

	if (mbctx.UpdateIMU && mbctx.IMU.Poll()) {
 80230f2:	4b4d      	ldr	r3, [pc, #308]	; (8023228 <MotherboardTick+0x18c>)
 80230f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80230f8:	f893 334c 	ldrb.w	r3, [r3, #844]	; 0x34c
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	d007      	beq.n	8023110 <MotherboardTick+0x74>
 8023100:	484c      	ldr	r0, [pc, #304]	; (8023234 <MotherboardTick+0x198>)
 8023102:	f7fd fc3b 	bl	802097c <_ZN10BHYWrapper4PollEv>
 8023106:	4603      	mov	r3, r0
 8023108:	2b00      	cmp	r3, #0
 802310a:	d001      	beq.n	8023110 <MotherboardTick+0x74>
 802310c:	2301      	movs	r3, #1
 802310e:	e000      	b.n	8023112 <MotherboardTick+0x76>
 8023110:	2300      	movs	r3, #0
 8023112:	2b00      	cmp	r3, #0
 8023114:	d015      	beq.n	8023142 <MotherboardTick+0xa6>
		mbctx.FrameMemo.Add(mbctx.IMU.GetFrame(), mbctx.IMU.GetSeq());
 8023116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802311a:	4946      	ldr	r1, [pc, #280]	; (8023234 <MotherboardTick+0x198>)
 802311c:	4618      	mov	r0, r3
 802311e:	f7fd fc71 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 8023122:	4844      	ldr	r0, [pc, #272]	; (8023234 <MotherboardTick+0x198>)
 8023124:	f7fd fd76 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8023128:	4602      	mov	r2, r0
 802312a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802312e:	4619      	mov	r1, r3
 8023130:	483e      	ldr	r0, [pc, #248]	; (802322c <MotherboardTick+0x190>)
 8023132:	f7ff fadd 	bl	80226f0 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbctx.UpdateIMU = false;
 8023136:	4b3c      	ldr	r3, [pc, #240]	; (8023228 <MotherboardTick+0x18c>)
 8023138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802313c:	2200      	movs	r2, #0
 802313e:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
	}

	if (mbctx.HeadService.HasRequest()) {
 8023142:	4839      	ldr	r0, [pc, #228]	; (8023228 <MotherboardTick+0x18c>)
 8023144:	f7fe fbf2 	bl	802192c <_ZNK13HeadInterface10HasRequestEv>
 8023148:	4603      	mov	r3, r0
 802314a:	2b00      	cmp	r3, #0
 802314c:	d048      	beq.n	80231e0 <MotherboardTick+0x144>
		auto request = mbctx.HeadService.GetRequest();
 802314e:	463b      	mov	r3, r7
 8023150:	4935      	ldr	r1, [pc, #212]	; (8023228 <MotherboardTick+0x18c>)
 8023152:	4618      	mov	r0, r3
 8023154:	f7fe fca2 	bl	8021a9c <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 8023158:	7c7b      	ldrb	r3, [r7, #17]
 802315a:	2b02      	cmp	r3, #2
 802315c:	d006      	beq.n	802316c <MotherboardTick+0xd0>
 802315e:	2b02      	cmp	r3, #2
 8023160:	dc3a      	bgt.n	80231d8 <MotherboardTick+0x13c>
 8023162:	2b00      	cmp	r3, #0
 8023164:	d015      	beq.n	8023192 <MotherboardTick+0xf6>
 8023166:	2b01      	cmp	r3, #1
 8023168:	d01d      	beq.n	80231a6 <MotherboardTick+0x10a>
 802316a:	e035      	b.n	80231d8 <MotherboardTick+0x13c>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 802316c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8023170:	463a      	mov	r2, r7
 8023172:	4931      	ldr	r1, [pc, #196]	; (8023238 <MotherboardTick+0x19c>)
 8023174:	4618      	mov	r0, r3
 8023176:	f7ff fba9 	bl	80228cc <_ZN18AcknowledgeHandler6HandleERK7Request>
 802317a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802317e:	4619      	mov	r1, r3
 8023180:	4829      	ldr	r0, [pc, #164]	; (8023228 <MotherboardTick+0x18c>)
 8023182:	f7fe fbe3 	bl	802194c <_ZN13HeadInterface4SendERK8Responce>
 8023186:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802318a:	4618      	mov	r0, r3
 802318c:	f7fd ffda 	bl	8021144 <_ZN8ResponceD1Ev>
			break;
 8023190:	e022      	b.n	80231d8 <MotherboardTick+0x13c>

		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 8023192:	463b      	mov	r3, r7
 8023194:	4618      	mov	r0, r3
 8023196:	f000 f9bc 	bl	8023512 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 802319a:	4603      	mov	r3, r0
 802319c:	4619      	mov	r1, r3
 802319e:	4827      	ldr	r0, [pc, #156]	; (802323c <MotherboardTick+0x1a0>)
 80231a0:	f7fd ffdd 	bl	802115e <_ZN11QueueSender10AddRequestEO7Request>
			break;
 80231a4:	e018      	b.n	80231d8 <MotherboardTick+0x13c>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 80231a6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80231aa:	463a      	mov	r2, r7
 80231ac:	4b1d      	ldr	r3, [pc, #116]	; (8023224 <MotherboardTick+0x188>)
 80231ae:	9302      	str	r3, [sp, #8]
 80231b0:	4b23      	ldr	r3, [pc, #140]	; (8023240 <MotherboardTick+0x1a4>)
 80231b2:	9301      	str	r3, [sp, #4]
 80231b4:	4b1f      	ldr	r3, [pc, #124]	; (8023234 <MotherboardTick+0x198>)
 80231b6:	9300      	str	r3, [sp, #0]
 80231b8:	4b1d      	ldr	r3, [pc, #116]	; (8023230 <MotherboardTick+0x194>)
 80231ba:	4922      	ldr	r1, [pc, #136]	; (8023244 <MotherboardTick+0x1a8>)
 80231bc:	f7ff fa28 	bl	8022610 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>
			mbctx.HeadService.Send(
 80231c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80231c4:	4619      	mov	r1, r3
 80231c6:	4818      	ldr	r0, [pc, #96]	; (8023228 <MotherboardTick+0x18c>)
 80231c8:	f7fe fbc0 	bl	802194c <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 80231cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80231d0:	4618      	mov	r0, r3
 80231d2:	f7fd ffb7 	bl	8021144 <_ZN8ResponceD1Ev>
							mbctx.IMU, mbctx.StrobeOffset, mbctx.StrobeFilter));
			break;
 80231d6:	bf00      	nop
		auto request = mbctx.HeadService.GetRequest();
 80231d8:	463b      	mov	r3, r7
 80231da:	4618      	mov	r0, r3
 80231dc:	f7fd ff3d 	bl	802105a <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 80231e0:	4816      	ldr	r0, [pc, #88]	; (802323c <MotherboardTick+0x1a0>)
 80231e2:	f7fe f80b 	bl	80211fc <_ZNK11QueueSender11HasResponceEv>
 80231e6:	4603      	mov	r3, r0
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d010      	beq.n	802320e <MotherboardTick+0x172>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 80231ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80231f0:	4912      	ldr	r1, [pc, #72]	; (802323c <MotherboardTick+0x1a0>)
 80231f2:	4618      	mov	r0, r3
 80231f4:	f7fe f85e 	bl	80212b4 <_ZN11QueueSender11GetResponceEv>
 80231f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80231fc:	4619      	mov	r1, r3
 80231fe:	480a      	ldr	r0, [pc, #40]	; (8023228 <MotherboardTick+0x18c>)
 8023200:	f7fe fba4 	bl	802194c <_ZN13HeadInterface4SendERK8Responce>
 8023204:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023208:	4618      	mov	r0, r3
 802320a:	f7fd ff9b 	bl	8021144 <_ZN8ResponceD1Ev>
	}

	mbctx.Body.ProcessPriorityRequest();
 802320e:	480b      	ldr	r0, [pc, #44]	; (802323c <MotherboardTick+0x1a0>)
 8023210:	f7fe f880 	bl	8021314 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 8023214:	4809      	ldr	r0, [pc, #36]	; (802323c <MotherboardTick+0x1a0>)
 8023216:	f7fe f92d 	bl	8021474 <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 802321a:	2300      	movs	r3, #0
}
 802321c:	4618      	mov	r0, r3
 802321e:	3770      	adds	r7, #112	; 0x70
 8023220:	46bd      	mov	sp, r7
 8023222:	bd80      	pop	{r7, pc}
 8023224:	240014d4 	.word	0x240014d4
 8023228:	240001d0 	.word	0x240001d0
 802322c:	24000344 	.word	0x24000344
 8023230:	24000314 	.word	0x24000314
 8023234:	24000378 	.word	0x24000378
 8023238:	24000290 	.word	0x24000290
 802323c:	24000294 	.word	0x24000294
 8023240:	24001518 	.word	0x24001518
 8023244:	240014d0 	.word	0x240014d0

08023248 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8023248:	b580      	push	{r7, lr}
 802324a:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 802324c:	4b06      	ldr	r3, [pc, #24]	; (8023268 <MotherboardOnStrobe+0x20>)
 802324e:	781b      	ldrb	r3, [r3, #0]
 8023250:	2b00      	cmp	r3, #0
 8023252:	d003      	beq.n	802325c <MotherboardOnStrobe+0x14>
		firstEntry = false;
 8023254:	4b04      	ldr	r3, [pc, #16]	; (8023268 <MotherboardOnStrobe+0x20>)
 8023256:	2200      	movs	r2, #0
 8023258:	701a      	strb	r2, [r3, #0]
		return;
 802325a:	e003      	b.n	8023264 <MotherboardOnStrobe+0x1c>
	}

	mbctx.StrobeFilter.ProcessStrobe(mbctx.IMU);
 802325c:	4903      	ldr	r1, [pc, #12]	; (802326c <MotherboardOnStrobe+0x24>)
 802325e:	4804      	ldr	r0, [pc, #16]	; (8023270 <MotherboardOnStrobe+0x28>)
 8023260:	f7fe fe31 	bl	8021ec6 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 8023264:	bd80      	pop	{r7, pc}
 8023266:	bf00      	nop
 8023268:	24000000 	.word	0x24000000
 802326c:	24000378 	.word	0x24000378
 8023270:	240014d4 	.word	0x240014d4

08023274 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 8023274:	b580      	push	{r7, lr}
 8023276:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 8023278:	4802      	ldr	r0, [pc, #8]	; (8023284 <MotherboardOnBodyRecieveComplete+0x10>)
 802327a:	f7fe fabc 	bl	80217f6 <_ZN11QueueSender16ProcessResponcesEv>
}
 802327e:	bf00      	nop
 8023280:	bd80      	pop	{r7, pc}
 8023282:	bf00      	nop
 8023284:	24000294 	.word	0x24000294

08023288 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 8023288:	b580      	push	{r7, lr}
 802328a:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 802328c:	4802      	ldr	r0, [pc, #8]	; (8023298 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 802328e:	f7fe fc41 	bl	8021b14 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 8023292:	bf00      	nop
 8023294:	bd80      	pop	{r7, pc}
 8023296:	bf00      	nop
 8023298:	240001d0 	.word	0x240001d0

0802329c <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 802329c:	b580      	push	{r7, lr}
 802329e:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 80232a0:	4802      	ldr	r0, [pc, #8]	; (80232ac <MotherboardOnHeadStreamRecieveComplete+0x10>)
 80232a2:	f7fe fc37 	bl	8021b14 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80232a6:	bf00      	nop
 80232a8:	bd80      	pop	{r7, pc}
 80232aa:	bf00      	nop
 80232ac:	24000230 	.word	0x24000230

080232b0 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 80232b0:	b580      	push	{r7, lr}
 80232b2:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 80232b4:	4802      	ldr	r0, [pc, #8]	; (80232c0 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 80232b6:	f7fe fc1f 	bl	8021af8 <_ZN13HeadInterface14FinishTransmitEv>
}
 80232ba:	bf00      	nop
 80232bc:	bd80      	pop	{r7, pc}
 80232be:	bf00      	nop
 80232c0:	240001d0 	.word	0x240001d0

080232c4 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 80232c4:	b580      	push	{r7, lr}
 80232c6:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 80232c8:	4802      	ldr	r0, [pc, #8]	; (80232d4 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 80232ca:	f7fe fc15 	bl	8021af8 <_ZN13HeadInterface14FinishTransmitEv>
}
 80232ce:	bf00      	nop
 80232d0:	bd80      	pop	{r7, pc}
 80232d2:	bf00      	nop
 80232d4:	24000230 	.word	0x24000230

080232d8 <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 80232d8:	b580      	push	{r7, lr}
 80232da:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 80232dc:	4802      	ldr	r0, [pc, #8]	; (80232e8 <MotherboardOnBodyTransmitComplete+0x10>)
 80232de:	f7fe fa94 	bl	802180a <_ZN11QueueSender14FinishTransmitEv>
}
 80232e2:	bf00      	nop
 80232e4:	bd80      	pop	{r7, pc}
 80232e6:	bf00      	nop
 80232e8:	24000294 	.word	0x24000294

080232ec <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 80232ec:	b580      	push	{r7, lr}
 80232ee:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 80232f0:	4802      	ldr	r0, [pc, #8]	; (80232fc <MotherboardOnBodyTimerTick+0x10>)
 80232f2:	f7fd ff94 	bl	802121e <_ZN11QueueSender9TickTimerEv>
}
 80232f6:	bf00      	nop
 80232f8:	bd80      	pop	{r7, pc}
 80232fa:	bf00      	nop
 80232fc:	24000294 	.word	0x24000294

08023300 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 8023300:	b480      	push	{r7}
 8023302:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8023304:	4b05      	ldr	r3, [pc, #20]	; (802331c <MotherboardOnImuTimerTick+0x1c>)
 8023306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802330a:	2201      	movs	r2, #1
 802330c:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
}
 8023310:	bf00      	nop
 8023312:	46bd      	mov	sp, r7
 8023314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023318:	4770      	bx	lr
 802331a:	bf00      	nop
 802331c:	240001d0 	.word	0x240001d0

08023320 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023320:	b580      	push	{r7, lr}
 8023322:	b082      	sub	sp, #8
 8023324:	af00      	add	r7, sp, #0
 8023326:	6078      	str	r0, [r7, #4]
 8023328:	6878      	ldr	r0, [r7, #4]
 802332a:	f000 fda9 	bl	8023e80 <_ZNSaI7RequestED1Ev>
 802332e:	687b      	ldr	r3, [r7, #4]
 8023330:	4618      	mov	r0, r3
 8023332:	3708      	adds	r7, #8
 8023334:	46bd      	mov	sp, r7
 8023336:	bd80      	pop	{r7, pc}

08023338 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8023338:	b580      	push	{r7, lr}
 802333a:	b082      	sub	sp, #8
 802333c:	af00      	add	r7, sp, #0
 802333e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	4618      	mov	r0, r3
 8023344:	f000 fd8c 	bl	8023e60 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023348:	2100      	movs	r1, #0
 802334a:	6878      	ldr	r0, [r7, #4]
 802334c:	f000 fda4 	bl	8023e98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	4618      	mov	r0, r3
 8023354:	3708      	adds	r7, #8
 8023356:	46bd      	mov	sp, r7
 8023358:	bd80      	pop	{r7, pc}

0802335a <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802335a:	b580      	push	{r7, lr}
 802335c:	b082      	sub	sp, #8
 802335e:	af00      	add	r7, sp, #0
 8023360:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023362:	687b      	ldr	r3, [r7, #4]
 8023364:	681b      	ldr	r3, [r3, #0]
 8023366:	2b00      	cmp	r3, #0
 8023368:	d010      	beq.n	802338c <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023372:	3304      	adds	r3, #4
 8023374:	461a      	mov	r2, r3
 8023376:	6878      	ldr	r0, [r7, #4]
 8023378:	f000 fdf4 	bl	8023f64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	6819      	ldr	r1, [r3, #0]
 8023380:	687b      	ldr	r3, [r7, #4]
 8023382:	685b      	ldr	r3, [r3, #4]
 8023384:	461a      	mov	r2, r3
 8023386:	6878      	ldr	r0, [r7, #4]
 8023388:	f000 fe06 	bl	8023f98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	4618      	mov	r0, r3
 8023390:	f7ff ffc6 	bl	8023320 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	4618      	mov	r0, r3
 8023398:	3708      	adds	r7, #8
 802339a:	46bd      	mov	sp, r7
 802339c:	bd80      	pop	{r7, pc}

0802339e <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 802339e:	b580      	push	{r7, lr}
 80233a0:	b08a      	sub	sp, #40	; 0x28
 80233a2:	af00      	add	r7, sp, #0
 80233a4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80233a6:	f107 0308 	add.w	r3, r7, #8
 80233aa:	6879      	ldr	r1, [r7, #4]
 80233ac:	4618      	mov	r0, r3
 80233ae:	f000 fe0f 	bl	8023fd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80233b2:	f107 0318 	add.w	r3, r7, #24
 80233b6:	6879      	ldr	r1, [r7, #4]
 80233b8:	4618      	mov	r0, r3
 80233ba:	f000 fe18 	bl	8023fee <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80233be:	687b      	ldr	r3, [r7, #4]
 80233c0:	4618      	mov	r0, r3
 80233c2:	f000 fe23 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80233c6:	4603      	mov	r3, r0
 80233c8:	f107 0218 	add.w	r2, r7, #24
 80233cc:	f107 0108 	add.w	r1, r7, #8
 80233d0:	6878      	ldr	r0, [r7, #4]
 80233d2:	f000 fe42 	bl	802405a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	4618      	mov	r0, r3
 80233da:	f7ff ffbe 	bl	802335a <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	4618      	mov	r0, r3
 80233e2:	3728      	adds	r7, #40	; 0x28
 80233e4:	46bd      	mov	sp, r7
 80233e6:	bd80      	pop	{r7, pc}

080233e8 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 80233e8:	b580      	push	{r7, lr}
 80233ea:	b082      	sub	sp, #8
 80233ec:	af00      	add	r7, sp, #0
 80233ee:	6078      	str	r0, [r7, #4]
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	4618      	mov	r0, r3
 80233f4:	f000 fe5c 	bl	80240b0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	4618      	mov	r0, r3
 80233fc:	3708      	adds	r7, #8
 80233fe:	46bd      	mov	sp, r7
 8023400:	bd80      	pop	{r7, pc}

08023402 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8023402:	b580      	push	{r7, lr}
 8023404:	b082      	sub	sp, #8
 8023406:	af00      	add	r7, sp, #0
 8023408:	6078      	str	r0, [r7, #4]
	: c() { }
 802340a:	687b      	ldr	r3, [r7, #4]
 802340c:	4618      	mov	r0, r3
 802340e:	2328      	movs	r3, #40	; 0x28
 8023410:	461a      	mov	r2, r3
 8023412:	2100      	movs	r1, #0
 8023414:	f01b fe18 	bl	803f048 <memset>
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	4618      	mov	r0, r3
 802341c:	f7ff ffe4 	bl	80233e8 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 8023420:	687b      	ldr	r3, [r7, #4]
 8023422:	4618      	mov	r0, r3
 8023424:	3708      	adds	r7, #8
 8023426:	46bd      	mov	sp, r7
 8023428:	bd80      	pop	{r7, pc}

0802342a <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 802342a:	b580      	push	{r7, lr}
 802342c:	b08a      	sub	sp, #40	; 0x28
 802342e:	af00      	add	r7, sp, #0
 8023430:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023432:	f107 0308 	add.w	r3, r7, #8
 8023436:	6879      	ldr	r1, [r7, #4]
 8023438:	4618      	mov	r0, r3
 802343a:	f000 fe6c 	bl	8024116 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 802343e:	f107 0318 	add.w	r3, r7, #24
 8023442:	6879      	ldr	r1, [r7, #4]
 8023444:	4618      	mov	r0, r3
 8023446:	f000 fe75 	bl	8024134 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	4618      	mov	r0, r3
 802344e:	f000 fe80 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8023452:	4603      	mov	r3, r0
 8023454:	f107 0218 	add.w	r2, r7, #24
 8023458:	f107 0108 	add.w	r1, r7, #8
 802345c:	6878      	ldr	r0, [r7, #4]
 802345e:	f000 fe9f 	bl	80241a0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	4618      	mov	r0, r3
 8023466:	f000 fe34 	bl	80240d2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 802346a:	687b      	ldr	r3, [r7, #4]
 802346c:	4618      	mov	r0, r3
 802346e:	3728      	adds	r7, #40	; 0x28
 8023470:	46bd      	mov	sp, r7
 8023472:	bd80      	pop	{r7, pc}

08023474 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8023474:	b580      	push	{r7, lr}
 8023476:	b082      	sub	sp, #8
 8023478:	af00      	add	r7, sp, #0
 802347a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802347c:	6878      	ldr	r0, [r7, #4]
 802347e:	f000 feae 	bl	80241de <_ZNSaIhEC1Ev>
 8023482:	687b      	ldr	r3, [r7, #4]
 8023484:	4618      	mov	r0, r3
 8023486:	f000 feb6 	bl	80241f6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	4618      	mov	r0, r3
 802348e:	3708      	adds	r7, #8
 8023490:	46bd      	mov	sp, r7
 8023492:	bd80      	pop	{r7, pc}

08023494 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8023494:	b580      	push	{r7, lr}
 8023496:	b082      	sub	sp, #8
 8023498:	af00      	add	r7, sp, #0
 802349a:	6078      	str	r0, [r7, #4]
 802349c:	6878      	ldr	r0, [r7, #4]
 802349e:	f000 febe 	bl	802421e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80234a2:	687b      	ldr	r3, [r7, #4]
 80234a4:	4618      	mov	r0, r3
 80234a6:	3708      	adds	r7, #8
 80234a8:	46bd      	mov	sp, r7
 80234aa:	bd80      	pop	{r7, pc}

080234ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80234ac:	b580      	push	{r7, lr}
 80234ae:	b082      	sub	sp, #8
 80234b0:	af00      	add	r7, sp, #0
 80234b2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80234b8:	687b      	ldr	r3, [r7, #4]
 80234ba:	689a      	ldr	r2, [r3, #8]
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80234c2:	461a      	mov	r2, r3
 80234c4:	6878      	ldr	r0, [r7, #4]
 80234c6:	f000 feb5 	bl	8024234 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 80234ca:	687b      	ldr	r3, [r7, #4]
 80234cc:	4618      	mov	r0, r3
 80234ce:	f7fd fd91 	bl	8020ff4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	4618      	mov	r0, r3
 80234d6:	3708      	adds	r7, #8
 80234d8:	46bd      	mov	sp, r7
 80234da:	bd80      	pop	{r7, pc}

080234dc <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80234dc:	b5b0      	push	{r4, r5, r7, lr}
 80234de:	b082      	sub	sp, #8
 80234e0:	af00      	add	r7, sp, #0
 80234e2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	681c      	ldr	r4, [r3, #0]
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	4618      	mov	r0, r3
 80234f0:	f000 feb3 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80234f4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80234f6:	461a      	mov	r2, r3
 80234f8:	4629      	mov	r1, r5
 80234fa:	4620      	mov	r0, r4
 80234fc:	f000 feb8 	bl	8024270 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	4618      	mov	r0, r3
 8023504:	f7ff ffd2 	bl	80234ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	4618      	mov	r0, r3
 802350c:	3708      	adds	r7, #8
 802350e:	46bd      	mov	sp, r7
 8023510:	bdb0      	pop	{r4, r5, r7, pc}

08023512 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8023512:	b480      	push	{r7}
 8023514:	b083      	sub	sp, #12
 8023516:	af00      	add	r7, sp, #0
 8023518:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	4618      	mov	r0, r3
 802351e:	370c      	adds	r7, #12
 8023520:	46bd      	mov	sp, r7
 8023522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023526:	4770      	bx	lr

08023528 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8023528:	b5b0      	push	{r4, r5, r7, lr}
 802352a:	b082      	sub	sp, #8
 802352c:	af00      	add	r7, sp, #0
 802352e:	6078      	str	r0, [r7, #4]
 8023530:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8023532:	687b      	ldr	r3, [r7, #4]
 8023534:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8023536:	687b      	ldr	r3, [r7, #4]
 8023538:	6a1b      	ldr	r3, [r3, #32]
 802353a:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 802353c:	429a      	cmp	r2, r3
 802353e:	d012      	beq.n	8023566 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8023540:	687c      	ldr	r4, [r7, #4]
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	699d      	ldr	r5, [r3, #24]
 8023546:	6838      	ldr	r0, [r7, #0]
 8023548:	f000 fea0 	bl	802428c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802354c:	4603      	mov	r3, r0
 802354e:	461a      	mov	r2, r3
 8023550:	4629      	mov	r1, r5
 8023552:	4620      	mov	r0, r4
 8023554:	f000 fea5 	bl	80242a2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	699b      	ldr	r3, [r3, #24]
 802355c:	f103 0214 	add.w	r2, r3, #20
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8023564:	e007      	b.n	8023576 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8023566:	6838      	ldr	r0, [r7, #0]
 8023568:	f000 fe90 	bl	802428c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802356c:	4603      	mov	r3, r0
 802356e:	4619      	mov	r1, r3
 8023570:	6878      	ldr	r0, [r7, #4]
 8023572:	f000 fea9 	bl	80242c8 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8023576:	bf00      	nop
 8023578:	3708      	adds	r7, #8
 802357a:	46bd      	mov	sp, r7
 802357c:	bdb0      	pop	{r4, r5, r7, pc}

0802357e <_ZNSt6vectorIhSaIhEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 802357e:	b590      	push	{r4, r7, lr}
 8023580:	b085      	sub	sp, #20
 8023582:	af00      	add	r7, sp, #0
 8023584:	6078      	str	r0, [r7, #4]
 8023586:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8023588:	2301      	movs	r3, #1
 802358a:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 802358c:	6838      	ldr	r0, [r7, #0]
 802358e:	f000 fedf 	bl	8024350 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023592:	4603      	mov	r3, r0
 8023594:	4622      	mov	r2, r4
 8023596:	4619      	mov	r1, r3
 8023598:	6878      	ldr	r0, [r7, #4]
 802359a:	f000 fee4 	bl	8024366 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 802359e:	687b      	ldr	r3, [r7, #4]
      }
 80235a0:	4618      	mov	r0, r3
 80235a2:	3714      	adds	r7, #20
 80235a4:	46bd      	mov	sp, r7
 80235a6:	bd90      	pop	{r4, r7, pc}

080235a8 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
	{ return c.emplace_back(std::forward<_Args>(__args)...); }
#else
      template<typename... _Args>
	void
	emplace(_Args&&... __args)
 80235a8:	b590      	push	{r4, r7, lr}
 80235aa:	b083      	sub	sp, #12
 80235ac:	af00      	add	r7, sp, #0
 80235ae:	6078      	str	r0, [r7, #4]
 80235b0:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 80235b2:	687c      	ldr	r4, [r7, #4]
 80235b4:	6838      	ldr	r0, [r7, #0]
 80235b6:	f000 ff14 	bl	80243e2 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80235ba:	4603      	mov	r3, r0
 80235bc:	4619      	mov	r1, r3
 80235be:	4620      	mov	r0, r4
 80235c0:	f000 ff1a 	bl	80243f8 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 80235c4:	bf00      	nop
 80235c6:	370c      	adds	r7, #12
 80235c8:	46bd      	mov	sp, r7
 80235ca:	bd90      	pop	{r4, r7, pc}

080235cc <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 80235cc:	b580      	push	{r7, lr}
 80235ce:	b082      	sub	sp, #8
 80235d0:	af00      	add	r7, sp, #0
 80235d2:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80235d4:	687b      	ldr	r3, [r7, #4]
 80235d6:	4618      	mov	r0, r3
 80235d8:	f000 ff39 	bl	802444e <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 80235dc:	4603      	mov	r3, r0
 80235de:	4618      	mov	r0, r3
 80235e0:	3708      	adds	r7, #8
 80235e2:	46bd      	mov	sp, r7
 80235e4:	bd80      	pop	{r7, pc}

080235e6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 80235e6:	b580      	push	{r7, lr}
 80235e8:	b082      	sub	sp, #8
 80235ea:	af00      	add	r7, sp, #0
 80235ec:	6078      	str	r0, [r7, #4]
	return c.front();
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	4618      	mov	r0, r3
 80235f2:	f000 ff3e 	bl	8024472 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 80235f6:	4603      	mov	r3, r0
      }
 80235f8:	4618      	mov	r0, r3
 80235fa:	3708      	adds	r7, #8
 80235fc:	46bd      	mov	sp, r7
 80235fe:	bd80      	pop	{r7, pc}

08023600 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8023600:	b480      	push	{r7}
 8023602:	b083      	sub	sp, #12
 8023604:	af00      	add	r7, sp, #0
 8023606:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	4618      	mov	r0, r3
 802360c:	370c      	adds	r7, #12
 802360e:	46bd      	mov	sp, r7
 8023610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023614:	4770      	bx	lr

08023616 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8023616:	b590      	push	{r4, r7, lr}
 8023618:	b083      	sub	sp, #12
 802361a:	af00      	add	r7, sp, #0
 802361c:	6078      	str	r0, [r7, #4]
 802361e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8023620:	6838      	ldr	r0, [r7, #0]
 8023622:	f000 ff3a 	bl	802449a <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8023626:	4603      	mov	r3, r0
 8023628:	4619      	mov	r1, r3
 802362a:	6878      	ldr	r0, [r7, #4]
 802362c:	f000 ff40 	bl	80244b0 <_ZNSaIhEC1ERKS_>
 8023630:	687c      	ldr	r4, [r7, #4]
 8023632:	6838      	ldr	r0, [r7, #0]
 8023634:	f000 ff31 	bl	802449a <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8023638:	4603      	mov	r3, r0
 802363a:	4619      	mov	r1, r3
 802363c:	4620      	mov	r0, r4
 802363e:	f000 ff45 	bl	80244cc <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	4618      	mov	r0, r3
 8023646:	370c      	adds	r7, #12
 8023648:	46bd      	mov	sp, r7
 802364a:	bd90      	pop	{r4, r7, pc}

0802364c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 802364c:	b580      	push	{r7, lr}
 802364e:	b082      	sub	sp, #8
 8023650:	af00      	add	r7, sp, #0
 8023652:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	4618      	mov	r0, r3
 8023658:	f000 ff5b 	bl	8024512 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 802365c:	bf00      	nop
 802365e:	3708      	adds	r7, #8
 8023660:	46bd      	mov	sp, r7
 8023662:	bd80      	pop	{r7, pc}

08023664 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8023664:	b580      	push	{r7, lr}
 8023666:	b082      	sub	sp, #8
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	681b      	ldr	r3, [r3, #0]
 8023670:	4619      	mov	r1, r3
 8023672:	6878      	ldr	r0, [r7, #4]
 8023674:	f000 ff71 	bl	802455a <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8023678:	4603      	mov	r3, r0
 802367a:	4618      	mov	r0, r3
 802367c:	3708      	adds	r7, #8
 802367e:	46bd      	mov	sp, r7
 8023680:	bd80      	pop	{r7, pc}

08023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023682:	b480      	push	{r7}
 8023684:	b083      	sub	sp, #12
 8023686:	af00      	add	r7, sp, #0
 8023688:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 802368a:	687b      	ldr	r3, [r7, #4]
 802368c:	685a      	ldr	r2, [r3, #4]
 802368e:	687b      	ldr	r3, [r7, #4]
 8023690:	681b      	ldr	r3, [r3, #0]
 8023692:	1ad3      	subs	r3, r2, r3
 8023694:	4618      	mov	r0, r3
 8023696:	370c      	adds	r7, #12
 8023698:	46bd      	mov	sp, r7
 802369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802369e:	4770      	bx	lr

080236a0 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80236a0:	b580      	push	{r7, lr}
 80236a2:	b082      	sub	sp, #8
 80236a4:	af00      	add	r7, sp, #0
 80236a6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80236a8:	687b      	ldr	r3, [r7, #4]
 80236aa:	f103 0218 	add.w	r2, r3, #24
 80236ae:	687b      	ldr	r3, [r7, #4]
 80236b0:	3308      	adds	r3, #8
 80236b2:	4619      	mov	r1, r3
 80236b4:	4610      	mov	r0, r2
 80236b6:	f000 ff5c 	bl	8024572 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80236ba:	4603      	mov	r3, r0
 80236bc:	4618      	mov	r0, r3
 80236be:	3708      	adds	r7, #8
 80236c0:	46bd      	mov	sp, r7
 80236c2:	bd80      	pop	{r7, pc}

080236c4 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 80236c4:	b580      	push	{r7, lr}
 80236c6:	b086      	sub	sp, #24
 80236c8:	af00      	add	r7, sp, #0
 80236ca:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 80236cc:	f107 0308 	add.w	r3, r7, #8
 80236d0:	6879      	ldr	r1, [r7, #4]
 80236d2:	4618      	mov	r0, r3
 80236d4:	f000 fc7c 	bl	8023fd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80236d8:	f107 0308 	add.w	r3, r7, #8
 80236dc:	4618      	mov	r0, r3
 80236de:	f000 ff5c 	bl	802459a <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 80236e2:	4603      	mov	r3, r0
      }
 80236e4:	4618      	mov	r0, r3
 80236e6:	3718      	adds	r7, #24
 80236e8:	46bd      	mov	sp, r7
 80236ea:	bd80      	pop	{r7, pc}

080236ec <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80236ec:	b580      	push	{r7, lr}
 80236ee:	b082      	sub	sp, #8
 80236f0:	af00      	add	r7, sp, #0
 80236f2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	691b      	ldr	r3, [r3, #16]
 80236fc:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 80236fe:	429a      	cmp	r2, r3
 8023700:	d011      	beq.n	8023726 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	4618      	mov	r0, r3
 8023706:	f000 fc81 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 802370a:	4602      	mov	r2, r0
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	689b      	ldr	r3, [r3, #8]
 8023710:	4619      	mov	r1, r3
 8023712:	4610      	mov	r0, r2
 8023714:	f000 ff4d 	bl	80245b2 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	689b      	ldr	r3, [r3, #8]
 802371c:	f103 0214 	add.w	r2, r3, #20
 8023720:	687b      	ldr	r3, [r7, #4]
 8023722:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8023724:	e002      	b.n	802372c <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8023726:	6878      	ldr	r0, [r7, #4]
 8023728:	f000 ff50 	bl	80245cc <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 802372c:	bf00      	nop
 802372e:	3708      	adds	r7, #8
 8023730:	46bd      	mov	sp, r7
 8023732:	bd80      	pop	{r7, pc}

08023734 <_ZNSt6vectorIhSaIhEE6resizeEj>:
      resize(size_type __new_size)
 8023734:	b580      	push	{r7, lr}
 8023736:	b082      	sub	sp, #8
 8023738:	af00      	add	r7, sp, #0
 802373a:	6078      	str	r0, [r7, #4]
 802373c:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 802373e:	6878      	ldr	r0, [r7, #4]
 8023740:	f7ff ff9f 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023744:	4602      	mov	r2, r0
 8023746:	683b      	ldr	r3, [r7, #0]
 8023748:	4293      	cmp	r3, r2
 802374a:	bf8c      	ite	hi
 802374c:	2301      	movhi	r3, #1
 802374e:	2300      	movls	r3, #0
 8023750:	b2db      	uxtb	r3, r3
 8023752:	2b00      	cmp	r3, #0
 8023754:	d00a      	beq.n	802376c <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8023756:	6878      	ldr	r0, [r7, #4]
 8023758:	f7ff ff93 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802375c:	4602      	mov	r2, r0
 802375e:	683b      	ldr	r3, [r7, #0]
 8023760:	1a9b      	subs	r3, r3, r2
 8023762:	4619      	mov	r1, r3
 8023764:	6878      	ldr	r0, [r7, #4]
 8023766:	f000 ff6f 	bl	8024648 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
      }
 802376a:	e013      	b.n	8023794 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 802376c:	6878      	ldr	r0, [r7, #4]
 802376e:	f7ff ff88 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023772:	4602      	mov	r2, r0
 8023774:	683b      	ldr	r3, [r7, #0]
 8023776:	4293      	cmp	r3, r2
 8023778:	bf34      	ite	cc
 802377a:	2301      	movcc	r3, #1
 802377c:	2300      	movcs	r3, #0
 802377e:	b2db      	uxtb	r3, r3
 8023780:	2b00      	cmp	r3, #0
 8023782:	d007      	beq.n	8023794 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	681a      	ldr	r2, [r3, #0]
 8023788:	683b      	ldr	r3, [r7, #0]
 802378a:	4413      	add	r3, r2
 802378c:	4619      	mov	r1, r3
 802378e:	6878      	ldr	r0, [r7, #4]
 8023790:	f001 f812 	bl	80247b8 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8023794:	bf00      	nop
 8023796:	3708      	adds	r7, #8
 8023798:	46bd      	mov	sp, r7
 802379a:	bd80      	pop	{r7, pc}

0802379c <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 802379c:	b480      	push	{r7}
 802379e:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 80237a0:	2300      	movs	r3, #0
 80237a2:	4618      	mov	r0, r3
 80237a4:	46bd      	mov	sp, r7
 80237a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237aa:	4770      	bx	lr

080237ac <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 80237ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237ae:	b085      	sub	sp, #20
 80237b0:	af00      	add	r7, sp, #0
 80237b2:	6078      	str	r0, [r7, #4]
 80237b4:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 80237b6:	683a      	ldr	r2, [r7, #0]
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	429a      	cmp	r2, r3
 80237bc:	f000 80e0 	beq.w	8023980 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 80237c0:	f7ff ffec 	bl	802379c <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 80237c4:	4603      	mov	r3, r0
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d042      	beq.n	8023850 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 80237ca:	f7fd fc97 	bl	80210fc <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 80237ce:	4603      	mov	r3, r0
 80237d0:	f083 0301 	eor.w	r3, r3, #1
 80237d4:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	d012      	beq.n	8023800 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 80237da:	687b      	ldr	r3, [r7, #4]
 80237dc:	4618      	mov	r0, r3
 80237de:	f000 fd3c 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80237e2:	4604      	mov	r4, r0
 80237e4:	683b      	ldr	r3, [r7, #0]
 80237e6:	4618      	mov	r0, r3
 80237e8:	f001 f806 	bl	80247f8 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80237ec:	4603      	mov	r3, r0
 80237ee:	4619      	mov	r1, r3
 80237f0:	4620      	mov	r0, r4
 80237f2:	f001 f80c 	bl	802480e <_ZStneRKSaIhES1_>
 80237f6:	4603      	mov	r3, r0
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	d001      	beq.n	8023800 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 80237fc:	2301      	movs	r3, #1
 80237fe:	e000      	b.n	8023802 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 8023800:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8023802:	2b00      	cmp	r3, #0
 8023804:	d016      	beq.n	8023834 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8023806:	6878      	ldr	r0, [r7, #4]
 8023808:	f001 f80d 	bl	8024826 <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 802380c:	6878      	ldr	r0, [r7, #4]
 802380e:	687b      	ldr	r3, [r7, #4]
 8023810:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8023812:	687b      	ldr	r3, [r7, #4]
 8023814:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8023816:	687b      	ldr	r3, [r7, #4]
 8023818:	681b      	ldr	r3, [r3, #0]
 802381a:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 802381c:	461a      	mov	r2, r3
 802381e:	f000 fd09 	bl	8024234 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	2200      	movs	r2, #0
 8023826:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	2200      	movs	r2, #0
 802382c:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	2200      	movs	r2, #0
 8023832:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	4618      	mov	r0, r3
 8023838:	f000 fd0f 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802383c:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 802383e:	683b      	ldr	r3, [r7, #0]
 8023840:	4618      	mov	r0, r3
 8023842:	f000 ffd9 	bl	80247f8 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023846:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8023848:	4619      	mov	r1, r3
 802384a:	4620      	mov	r0, r4
 802384c:	f000 fff9 	bl	8024842 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8023850:	6838      	ldr	r0, [r7, #0]
 8023852:	f7ff ff16 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023856:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8023858:	6878      	ldr	r0, [r7, #4]
 802385a:	f001 f800 	bl	802485e <_ZNKSt6vectorIhSaIhEE8capacityEv>
 802385e:	4602      	mov	r2, r0
 8023860:	68fb      	ldr	r3, [r7, #12]
 8023862:	4293      	cmp	r3, r2
 8023864:	bf8c      	ite	hi
 8023866:	2301      	movhi	r3, #1
 8023868:	2300      	movls	r3, #0
 802386a:	b2db      	uxtb	r3, r3
 802386c:	2b00      	cmp	r3, #0
 802386e:	d030      	beq.n	80238d2 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8023870:	6838      	ldr	r0, [r7, #0]
 8023872:	f001 f803 	bl	802487c <_ZNKSt6vectorIhSaIhEE5beginEv>
 8023876:	4604      	mov	r4, r0
 8023878:	6838      	ldr	r0, [r7, #0]
 802387a:	f001 f80f 	bl	802489c <_ZNKSt6vectorIhSaIhEE3endEv>
 802387e:	4603      	mov	r3, r0
 8023880:	4622      	mov	r2, r4
 8023882:	68f9      	ldr	r1, [r7, #12]
 8023884:	6878      	ldr	r0, [r7, #4]
 8023886:	f001 f81a 	bl	80248be <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 802388a:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 802388c:	687b      	ldr	r3, [r7, #4]
 802388e:	681c      	ldr	r4, [r3, #0]
 8023890:	687b      	ldr	r3, [r7, #4]
 8023892:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	4618      	mov	r0, r3
 8023898:	f000 fcdf 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802389c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 802389e:	461a      	mov	r2, r3
 80238a0:	4629      	mov	r1, r5
 80238a2:	4620      	mov	r0, r4
 80238a4:	f000 fce4 	bl	8024270 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80238a8:	6878      	ldr	r0, [r7, #4]
 80238aa:	687b      	ldr	r3, [r7, #4]
 80238ac:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 80238b8:	461a      	mov	r2, r3
 80238ba:	f000 fcbb 	bl	8024234 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	68ba      	ldr	r2, [r7, #8]
 80238c2:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	681a      	ldr	r2, [r3, #0]
 80238c8:	68fb      	ldr	r3, [r7, #12]
 80238ca:	441a      	add	r2, r3
 80238cc:	687b      	ldr	r3, [r7, #4]
 80238ce:	609a      	str	r2, [r3, #8]
 80238d0:	e050      	b.n	8023974 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 80238d2:	6878      	ldr	r0, [r7, #4]
 80238d4:	f7ff fed5 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80238d8:	4602      	mov	r2, r0
 80238da:	68fb      	ldr	r3, [r7, #12]
 80238dc:	4293      	cmp	r3, r2
 80238de:	bf94      	ite	ls
 80238e0:	2301      	movls	r3, #1
 80238e2:	2300      	movhi	r3, #0
 80238e4:	b2db      	uxtb	r3, r3
 80238e6:	2b00      	cmp	r3, #0
 80238e8:	d020      	beq.n	802392c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80238ea:	6838      	ldr	r0, [r7, #0]
 80238ec:	f000 ffc6 	bl	802487c <_ZNKSt6vectorIhSaIhEE5beginEv>
 80238f0:	4604      	mov	r4, r0
 80238f2:	6838      	ldr	r0, [r7, #0]
 80238f4:	f000 ffd2 	bl	802489c <_ZNKSt6vectorIhSaIhEE3endEv>
 80238f8:	4605      	mov	r5, r0
 80238fa:	6878      	ldr	r0, [r7, #4]
 80238fc:	f000 fffb 	bl	80248f6 <_ZNSt6vectorIhSaIhEE5beginEv>
 8023900:	4603      	mov	r3, r0
 8023902:	461a      	mov	r2, r3
 8023904:	4629      	mov	r1, r5
 8023906:	4620      	mov	r0, r4
 8023908:	f001 f805 	bl	8024916 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 802390c:	4604      	mov	r4, r0
 802390e:	6878      	ldr	r0, [r7, #4]
 8023910:	f001 f819 	bl	8024946 <_ZNSt6vectorIhSaIhEE3endEv>
 8023914:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	4618      	mov	r0, r3
 802391a:	f000 fc9e 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802391e:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8023920:	461a      	mov	r2, r3
 8023922:	4629      	mov	r1, r5
 8023924:	4620      	mov	r0, r4
 8023926:	f001 f81f 	bl	8024968 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 802392a:	e023      	b.n	8023974 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 802392c:	683b      	ldr	r3, [r7, #0]
 802392e:	681d      	ldr	r5, [r3, #0]
 8023930:	683b      	ldr	r3, [r7, #0]
 8023932:	681c      	ldr	r4, [r3, #0]
 8023934:	6878      	ldr	r0, [r7, #4]
 8023936:	f7ff fea4 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802393a:	4603      	mov	r3, r0
 802393c:	18e1      	adds	r1, r4, r3
 802393e:	687b      	ldr	r3, [r7, #4]
 8023940:	681b      	ldr	r3, [r3, #0]
 8023942:	461a      	mov	r2, r3
 8023944:	4628      	mov	r0, r5
 8023946:	f001 f81d 	bl	8024984 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 802394a:	683b      	ldr	r3, [r7, #0]
 802394c:	681c      	ldr	r4, [r3, #0]
 802394e:	6878      	ldr	r0, [r7, #4]
 8023950:	f7ff fe97 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023954:	4603      	mov	r3, r0
 8023956:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8023958:	683b      	ldr	r3, [r7, #0]
 802395a:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 802395c:	687b      	ldr	r3, [r7, #4]
 802395e:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	4618      	mov	r0, r3
 8023964:	f000 fc79 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023968:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 802396a:	4632      	mov	r2, r6
 802396c:	4629      	mov	r1, r5
 802396e:	4620      	mov	r0, r4
 8023970:	f001 f820 	bl	80249b4 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	681a      	ldr	r2, [r3, #0]
 8023978:	68fb      	ldr	r3, [r7, #12]
 802397a:	441a      	add	r2, r3
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8023980:	687b      	ldr	r3, [r7, #4]
    }
 8023982:	4618      	mov	r0, r3
 8023984:	3714      	adds	r7, #20
 8023986:	46bd      	mov	sp, r7
 8023988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802398a <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 802398a:	b580      	push	{r7, lr}
 802398c:	b082      	sub	sp, #8
 802398e:	af00      	add	r7, sp, #0
 8023990:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	f103 0218 	add.w	r2, r3, #24
 8023998:	687b      	ldr	r3, [r7, #4]
 802399a:	3308      	adds	r3, #8
 802399c:	4619      	mov	r1, r3
 802399e:	4610      	mov	r0, r2
 80239a0:	f001 f81a 	bl	80249d8 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80239a4:	4603      	mov	r3, r0
 80239a6:	4618      	mov	r0, r3
 80239a8:	3708      	adds	r7, #8
 80239aa:	46bd      	mov	sp, r7
 80239ac:	bd80      	pop	{r7, pc}

080239ae <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>:
      size() const
 80239ae:	b580      	push	{r7, lr}
 80239b0:	b082      	sub	sp, #8
 80239b2:	af00      	add	r7, sp, #0
 80239b4:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	4618      	mov	r0, r3
 80239ba:	f001 f839 	bl	8024a30 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 80239be:	4603      	mov	r3, r0
 80239c0:	4618      	mov	r0, r3
 80239c2:	3708      	adds	r7, #8
 80239c4:	46bd      	mov	sp, r7
 80239c6:	bd80      	pop	{r7, pc}

080239c8 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 80239c8:	b580      	push	{r7, lr}
 80239ca:	b082      	sub	sp, #8
 80239cc:	af00      	add	r7, sp, #0
 80239ce:	6078      	str	r0, [r7, #4]
	: c() { }
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	4618      	mov	r0, r3
 80239d4:	2328      	movs	r3, #40	; 0x28
 80239d6:	461a      	mov	r2, r3
 80239d8:	2100      	movs	r1, #0
 80239da:	f01b fb35 	bl	803f048 <memset>
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	4618      	mov	r0, r3
 80239e2:	f7fd faed 	bl	8020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	4618      	mov	r0, r3
 80239ea:	3708      	adds	r7, #8
 80239ec:	46bd      	mov	sp, r7
 80239ee:	bd80      	pop	{r7, pc}

080239f0 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 80239f0:	b580      	push	{r7, lr}
 80239f2:	b082      	sub	sp, #8
 80239f4:	af00      	add	r7, sp, #0
 80239f6:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	4618      	mov	r0, r3
 80239fc:	f7ff fe50 	bl	80236a0 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8023a00:	4603      	mov	r3, r0
 8023a02:	4618      	mov	r0, r3
 8023a04:	3708      	adds	r7, #8
 8023a06:	46bd      	mov	sp, r7
 8023a08:	bd80      	pop	{r7, pc}

08023a0a <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8023a0a:	b580      	push	{r7, lr}
 8023a0c:	b082      	sub	sp, #8
 8023a0e:	af00      	add	r7, sp, #0
 8023a10:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	681b      	ldr	r3, [r3, #0]
 8023a16:	4619      	mov	r1, r3
 8023a18:	6878      	ldr	r0, [r7, #4]
 8023a1a:	f000 fd9e 	bl	802455a <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8023a1e:	4603      	mov	r3, r0
 8023a20:	4618      	mov	r0, r3
 8023a22:	3708      	adds	r7, #8
 8023a24:	46bd      	mov	sp, r7
 8023a26:	bd80      	pop	{r7, pc}

08023a28 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8023a28:	b580      	push	{r7, lr}
 8023a2a:	b082      	sub	sp, #8
 8023a2c:	af00      	add	r7, sp, #0
 8023a2e:	6078      	str	r0, [r7, #4]
	return c.front();
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	4618      	mov	r0, r3
 8023a34:	f7ff fe46 	bl	80236c4 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8023a38:	4603      	mov	r3, r0
      }
 8023a3a:	4618      	mov	r0, r3
 8023a3c:	3708      	adds	r7, #8
 8023a3e:	46bd      	mov	sp, r7
 8023a40:	bd80      	pop	{r7, pc}

08023a42 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8023a42:	b580      	push	{r7, lr}
 8023a44:	b082      	sub	sp, #8
 8023a46:	af00      	add	r7, sp, #0
 8023a48:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	f7ff fe4d 	bl	80236ec <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8023a52:	bf00      	nop
 8023a54:	3708      	adds	r7, #8
 8023a56:	46bd      	mov	sp, r7
 8023a58:	bd80      	pop	{r7, pc}

08023a5a <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
 8023a5a:	b590      	push	{r4, r7, lr}
 8023a5c:	b083      	sub	sp, #12
 8023a5e:	af00      	add	r7, sp, #0
 8023a60:	6078      	str	r0, [r7, #4]
 8023a62:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8023a64:	687c      	ldr	r4, [r7, #4]
 8023a66:	6838      	ldr	r0, [r7, #0]
 8023a68:	f000 fc10 	bl	802428c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8023a6c:	4603      	mov	r3, r0
 8023a6e:	4619      	mov	r1, r3
 8023a70:	4620      	mov	r0, r4
 8023a72:	f7ff fd59 	bl	8023528 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8023a76:	bf00      	nop
 8023a78:	370c      	adds	r7, #12
 8023a7a:	46bd      	mov	sp, r7
 8023a7c:	bd90      	pop	{r4, r7, pc}

08023a7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 8023a7e:	b5b0      	push	{r4, r5, r7, lr}
 8023a80:	b086      	sub	sp, #24
 8023a82:	af00      	add	r7, sp, #0
 8023a84:	60f8      	str	r0, [r7, #12]
 8023a86:	1d3b      	adds	r3, r7, #4
 8023a88:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8023a8c:	1d3b      	adds	r3, r7, #4
 8023a8e:	4618      	mov	r0, r3
 8023a90:	f000 ffe0 	bl	8024a54 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023a94:	4604      	mov	r4, r0
 8023a96:	1d3b      	adds	r3, r7, #4
 8023a98:	4618      	mov	r0, r3
 8023a9a:	f000 ffe7 	bl	8024a6c <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 8023a9e:	4602      	mov	r2, r0
 8023aa0:	462b      	mov	r3, r5
 8023aa2:	4621      	mov	r1, r4
 8023aa4:	68f8      	ldr	r0, [r7, #12]
 8023aa6:	f000 fff6 	bl	8024a96 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 8023aaa:	68fb      	ldr	r3, [r7, #12]
      }
 8023aac:	4618      	mov	r0, r3
 8023aae:	3718      	adds	r7, #24
 8023ab0:	46bd      	mov	sp, r7
 8023ab2:	bdb0      	pop	{r4, r5, r7, pc}

08023ab4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
      push_front(const value_type& __x)
 8023ab4:	b580      	push	{r7, lr}
 8023ab6:	b082      	sub	sp, #8
 8023ab8:	af00      	add	r7, sp, #0
 8023aba:	6078      	str	r0, [r7, #4]
 8023abc:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8023abe:	687b      	ldr	r3, [r7, #4]
 8023ac0:	689a      	ldr	r2, [r3, #8]
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	68db      	ldr	r3, [r3, #12]
 8023ac6:	429a      	cmp	r2, r3
 8023ac8:	d00e      	beq.n	8023ae8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8023aca:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8023ad0:	3b14      	subs	r3, #20
 8023ad2:	683a      	ldr	r2, [r7, #0]
 8023ad4:	4619      	mov	r1, r3
 8023ad6:	f001 f843 	bl	8024b60 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	689b      	ldr	r3, [r3, #8]
 8023ade:	f1a3 0214 	sub.w	r2, r3, #20
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	609a      	str	r2, [r3, #8]
      }
 8023ae6:	e003      	b.n	8023af0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023ae8:	6839      	ldr	r1, [r7, #0]
 8023aea:	6878      	ldr	r0, [r7, #4]
 8023aec:	f001 f84c 	bl	8024b88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8023af0:	bf00      	nop
 8023af2:	3708      	adds	r7, #8
 8023af4:	46bd      	mov	sp, r7
 8023af6:	bd80      	pop	{r7, pc}

08023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023af8:	b580      	push	{r7, lr}
 8023afa:	b082      	sub	sp, #8
 8023afc:	af00      	add	r7, sp, #0
 8023afe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	f103 0218 	add.w	r2, r3, #24
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	3308      	adds	r3, #8
 8023b0a:	4619      	mov	r1, r3
 8023b0c:	4610      	mov	r0, r2
 8023b0e:	f001 f881 	bl	8024c14 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023b12:	4603      	mov	r3, r0
 8023b14:	4618      	mov	r0, r3
 8023b16:	3708      	adds	r7, #8
 8023b18:	46bd      	mov	sp, r7
 8023b1a:	bd80      	pop	{r7, pc}

08023b1c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8023b1c:	b580      	push	{r7, lr}
 8023b1e:	b082      	sub	sp, #8
 8023b20:	af00      	add	r7, sp, #0
 8023b22:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8023b28:	687b      	ldr	r3, [r7, #4]
 8023b2a:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8023b2c:	429a      	cmp	r2, r3
 8023b2e:	d011      	beq.n	8023b54 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	699b      	ldr	r3, [r3, #24]
 8023b34:	f1a3 0214 	sub.w	r2, r3, #20
 8023b38:	687b      	ldr	r3, [r7, #4]
 8023b3a:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	4618      	mov	r0, r3
 8023b40:	f001 f894 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023b44:	4602      	mov	r2, r0
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	699b      	ldr	r3, [r3, #24]
 8023b4a:	4619      	mov	r1, r3
 8023b4c:	4610      	mov	r0, r2
 8023b4e:	f001 f898 	bl	8024c82 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8023b52:	e002      	b.n	8023b5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8023b54:	6878      	ldr	r0, [r7, #4]
 8023b56:	f001 f8a1 	bl	8024c9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 8023b5a:	bf00      	nop
 8023b5c:	3708      	adds	r7, #8
 8023b5e:	46bd      	mov	sp, r7
 8023b60:	bd80      	pop	{r7, pc}

08023b62 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023b62:	b580      	push	{r7, lr}
 8023b64:	b082      	sub	sp, #8
 8023b66:	af00      	add	r7, sp, #0
 8023b68:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	f103 0218 	add.w	r2, r3, #24
 8023b70:	687b      	ldr	r3, [r7, #4]
 8023b72:	3308      	adds	r3, #8
 8023b74:	4619      	mov	r1, r3
 8023b76:	4610      	mov	r0, r2
 8023b78:	f001 f8ba 	bl	8024cf0 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023b7c:	4603      	mov	r3, r0
 8023b7e:	4618      	mov	r0, r3
 8023b80:	3708      	adds	r7, #8
 8023b82:	46bd      	mov	sp, r7
 8023b84:	bd80      	pop	{r7, pc}

08023b86 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023b86:	b580      	push	{r7, lr}
 8023b88:	b082      	sub	sp, #8
 8023b8a:	af00      	add	r7, sp, #0
 8023b8c:	6078      	str	r0, [r7, #4]
 8023b8e:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	3308      	adds	r3, #8
 8023b94:	683a      	ldr	r2, [r7, #0]
 8023b96:	4611      	mov	r1, r2
 8023b98:	4618      	mov	r0, r3
 8023b9a:	f001 f8bd 	bl	8024d18 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023b9e:	4603      	mov	r3, r0
      }
 8023ba0:	4618      	mov	r0, r3
 8023ba2:	3708      	adds	r7, #8
 8023ba4:	46bd      	mov	sp, r7
 8023ba6:	bd80      	pop	{r7, pc}

08023ba8 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
      push(const value_type& __x)
 8023ba8:	b580      	push	{r7, lr}
 8023baa:	b082      	sub	sp, #8
 8023bac:	af00      	add	r7, sp, #0
 8023bae:	6078      	str	r0, [r7, #4]
 8023bb0:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	6839      	ldr	r1, [r7, #0]
 8023bb6:	4618      	mov	r0, r3
 8023bb8:	f001 f8c4 	bl	8024d44 <_ZNSt5dequeIjSaIjEE9push_backERKj>
 8023bbc:	bf00      	nop
 8023bbe:	3708      	adds	r7, #8
 8023bc0:	46bd      	mov	sp, r7
 8023bc2:	bd80      	pop	{r7, pc}

08023bc4 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 8023bc4:	b580      	push	{r7, lr}
 8023bc6:	b082      	sub	sp, #8
 8023bc8:	af00      	add	r7, sp, #0
 8023bca:	6078      	str	r0, [r7, #4]
	return c.front();
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	4618      	mov	r0, r3
 8023bd0:	f001 f8d9 	bl	8024d86 <_ZNKSt5dequeIjSaIjEE5frontEv>
 8023bd4:	4603      	mov	r3, r0
      }
 8023bd6:	4618      	mov	r0, r3
 8023bd8:	3708      	adds	r7, #8
 8023bda:	46bd      	mov	sp, r7
 8023bdc:	bd80      	pop	{r7, pc}

08023bde <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 8023bde:	b580      	push	{r7, lr}
 8023be0:	b082      	sub	sp, #8
 8023be2:	af00      	add	r7, sp, #0
 8023be4:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	4618      	mov	r0, r3
 8023bea:	f001 f8e0 	bl	8024dae <_ZNKSt5dequeIjSaIjEE5emptyEv>
 8023bee:	4603      	mov	r3, r0
 8023bf0:	4618      	mov	r0, r3
 8023bf2:	3708      	adds	r7, #8
 8023bf4:	46bd      	mov	sp, r7
 8023bf6:	bd80      	pop	{r7, pc}

08023bf8 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
      pop()
 8023bf8:	b580      	push	{r7, lr}
 8023bfa:	b082      	sub	sp, #8
 8023bfc:	af00      	add	r7, sp, #0
 8023bfe:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8023c00:	687b      	ldr	r3, [r7, #4]
 8023c02:	4618      	mov	r0, r3
 8023c04:	f001 f8e5 	bl	8024dd2 <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023c08:	bf00      	nop
 8023c0a:	3708      	adds	r7, #8
 8023c0c:	46bd      	mov	sp, r7
 8023c0e:	bd80      	pop	{r7, pc}

08023c10 <_ZNKSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023c10:	b480      	push	{r7}
 8023c12:	b083      	sub	sp, #12
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	6078      	str	r0, [r7, #4]
 8023c18:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	681a      	ldr	r2, [r3, #0]
 8023c1e:	683b      	ldr	r3, [r7, #0]
 8023c20:	4413      	add	r3, r2
      }
 8023c22:	4618      	mov	r0, r3
 8023c24:	370c      	adds	r7, #12
 8023c26:	46bd      	mov	sp, r7
 8023c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c2c:	4770      	bx	lr

08023c2e <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8023c2e:	b480      	push	{r7}
 8023c30:	b083      	sub	sp, #12
 8023c32:	af00      	add	r7, sp, #0
 8023c34:	6078      	str	r0, [r7, #4]
 8023c36:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	681a      	ldr	r2, [r3, #0]
 8023c3c:	683b      	ldr	r3, [r7, #0]
 8023c3e:	4413      	add	r3, r2
      }
 8023c40:	4618      	mov	r0, r3
 8023c42:	370c      	adds	r7, #12
 8023c44:	46bd      	mov	sp, r7
 8023c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c4a:	4770      	bx	lr

08023c4c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8023c4c:	b580      	push	{r7, lr}
 8023c4e:	b086      	sub	sp, #24
 8023c50:	af00      	add	r7, sp, #0
 8023c52:	6078      	str	r0, [r7, #4]
	return *begin();
 8023c54:	f107 0308 	add.w	r3, r7, #8
 8023c58:	6879      	ldr	r1, [r7, #4]
 8023c5a:	4618      	mov	r0, r3
 8023c5c:	f001 f8dc 	bl	8024e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023c60:	f107 0308 	add.w	r3, r7, #8
 8023c64:	4618      	mov	r0, r3
 8023c66:	f001 f8e6 	bl	8024e36 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 8023c6a:	4603      	mov	r3, r0
      }
 8023c6c:	4618      	mov	r0, r3
 8023c6e:	3718      	adds	r7, #24
 8023c70:	46bd      	mov	sp, r7
 8023c72:	bd80      	pop	{r7, pc}

08023c74 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023c74:	b580      	push	{r7, lr}
 8023c76:	b082      	sub	sp, #8
 8023c78:	af00      	add	r7, sp, #0
 8023c7a:	6078      	str	r0, [r7, #4]
 8023c7c:	6878      	ldr	r0, [r7, #4]
 8023c7e:	f001 f8f6 	bl	8024e6e <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	4618      	mov	r0, r3
 8023c86:	3708      	adds	r7, #8
 8023c88:	46bd      	mov	sp, r7
 8023c8a:	bd80      	pop	{r7, pc}

08023c8c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023c8c:	b580      	push	{r7, lr}
 8023c8e:	b082      	sub	sp, #8
 8023c90:	af00      	add	r7, sp, #0
 8023c92:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023c94:	687b      	ldr	r3, [r7, #4]
 8023c96:	4618      	mov	r0, r3
 8023c98:	f001 f8d9 	bl	8024e4e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023c9c:	2100      	movs	r1, #0
 8023c9e:	6878      	ldr	r0, [r7, #4]
 8023ca0:	f001 f8f1 	bl	8024e86 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	4618      	mov	r0, r3
 8023ca8:	3708      	adds	r7, #8
 8023caa:	46bd      	mov	sp, r7
 8023cac:	bd80      	pop	{r7, pc}

08023cae <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023cae:	b580      	push	{r7, lr}
 8023cb0:	b082      	sub	sp, #8
 8023cb2:	af00      	add	r7, sp, #0
 8023cb4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	681b      	ldr	r3, [r3, #0]
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d010      	beq.n	8023ce0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023cbe:	687b      	ldr	r3, [r7, #4]
 8023cc0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023cc2:	687b      	ldr	r3, [r7, #4]
 8023cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023cc6:	3304      	adds	r3, #4
 8023cc8:	461a      	mov	r2, r3
 8023cca:	6878      	ldr	r0, [r7, #4]
 8023ccc:	f001 f941 	bl	8024f52 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023cd0:	687b      	ldr	r3, [r7, #4]
 8023cd2:	6819      	ldr	r1, [r3, #0]
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	685b      	ldr	r3, [r3, #4]
 8023cd8:	461a      	mov	r2, r3
 8023cda:	6878      	ldr	r0, [r7, #4]
 8023cdc:	f001 f953 	bl	8024f86 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023ce0:	687b      	ldr	r3, [r7, #4]
 8023ce2:	4618      	mov	r0, r3
 8023ce4:	f7ff ffc6 	bl	8023c74 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	4618      	mov	r0, r3
 8023cec:	3708      	adds	r7, #8
 8023cee:	46bd      	mov	sp, r7
 8023cf0:	bd80      	pop	{r7, pc}

08023cf2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023cf2:	b580      	push	{r7, lr}
 8023cf4:	b08a      	sub	sp, #40	; 0x28
 8023cf6:	af00      	add	r7, sp, #0
 8023cf8:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023cfa:	f107 0308 	add.w	r3, r7, #8
 8023cfe:	6879      	ldr	r1, [r7, #4]
 8023d00:	4618      	mov	r0, r3
 8023d02:	f001 f95c 	bl	8024fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023d06:	f107 0318 	add.w	r3, r7, #24
 8023d0a:	6879      	ldr	r1, [r7, #4]
 8023d0c:	4618      	mov	r0, r3
 8023d0e:	f001 f965 	bl	8024fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023d12:	687b      	ldr	r3, [r7, #4]
 8023d14:	4618      	mov	r0, r3
 8023d16:	f000 ffa9 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023d1a:	4603      	mov	r3, r0
 8023d1c:	f107 0218 	add.w	r2, r7, #24
 8023d20:	f107 0108 	add.w	r1, r7, #8
 8023d24:	6878      	ldr	r0, [r7, #4]
 8023d26:	f001 f984 	bl	8025032 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	4618      	mov	r0, r3
 8023d2e:	f7ff ffbe 	bl	8023cae <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023d32:	687b      	ldr	r3, [r7, #4]
 8023d34:	4618      	mov	r0, r3
 8023d36:	3728      	adds	r7, #40	; 0x28
 8023d38:	46bd      	mov	sp, r7
 8023d3a:	bd80      	pop	{r7, pc}

08023d3c <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023d3c:	b580      	push	{r7, lr}
 8023d3e:	b082      	sub	sp, #8
 8023d40:	af00      	add	r7, sp, #0
 8023d42:	6078      	str	r0, [r7, #4]
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	4618      	mov	r0, r3
 8023d48:	f001 f98c 	bl	8025064 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023d4c:	687b      	ldr	r3, [r7, #4]
 8023d4e:	4618      	mov	r0, r3
 8023d50:	3708      	adds	r7, #8
 8023d52:	46bd      	mov	sp, r7
 8023d54:	bd80      	pop	{r7, pc}

08023d56 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023d56:	b580      	push	{r7, lr}
 8023d58:	b082      	sub	sp, #8
 8023d5a:	af00      	add	r7, sp, #0
 8023d5c:	6078      	str	r0, [r7, #4]
	: c() { }
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	4618      	mov	r0, r3
 8023d62:	2328      	movs	r3, #40	; 0x28
 8023d64:	461a      	mov	r2, r3
 8023d66:	2100      	movs	r1, #0
 8023d68:	f01b f96e 	bl	803f048 <memset>
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	4618      	mov	r0, r3
 8023d70:	f7ff ffe4 	bl	8023d3c <_ZNSt5dequeIjSaIjEEC1Ev>
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	4618      	mov	r0, r3
 8023d78:	3708      	adds	r7, #8
 8023d7a:	46bd      	mov	sp, r7
 8023d7c:	bd80      	pop	{r7, pc}

08023d7e <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023d7e:	b580      	push	{r7, lr}
 8023d80:	b08a      	sub	sp, #40	; 0x28
 8023d82:	af00      	add	r7, sp, #0
 8023d84:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023d86:	f107 0308 	add.w	r3, r7, #8
 8023d8a:	6879      	ldr	r1, [r7, #4]
 8023d8c:	4618      	mov	r0, r3
 8023d8e:	f001 f99c 	bl	80250ca <_ZNSt5dequeIjSaIjEE5beginEv>
 8023d92:	f107 0318 	add.w	r3, r7, #24
 8023d96:	6879      	ldr	r1, [r7, #4]
 8023d98:	4618      	mov	r0, r3
 8023d9a:	f001 f9a5 	bl	80250e8 <_ZNSt5dequeIjSaIjEE3endEv>
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	4618      	mov	r0, r3
 8023da2:	f001 f9b0 	bl	8025106 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023da6:	4603      	mov	r3, r0
 8023da8:	f107 0218 	add.w	r2, r7, #24
 8023dac:	f107 0108 	add.w	r1, r7, #8
 8023db0:	6878      	ldr	r0, [r7, #4]
 8023db2:	f001 f9cf 	bl	8025154 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	4618      	mov	r0, r3
 8023dba:	f001 f964 	bl	8025086 <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8023dbe:	687b      	ldr	r3, [r7, #4]
 8023dc0:	4618      	mov	r0, r3
 8023dc2:	3728      	adds	r7, #40	; 0x28
 8023dc4:	46bd      	mov	sp, r7
 8023dc6:	bd80      	pop	{r7, pc}

08023dc8 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023dc8:	b590      	push	{r4, r7, lr}
 8023dca:	b083      	sub	sp, #12
 8023dcc:	af00      	add	r7, sp, #0
 8023dce:	6078      	str	r0, [r7, #4]
 8023dd0:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023dd2:	6838      	ldr	r0, [r7, #0]
 8023dd4:	f001 f9cb 	bl	802516e <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8023dd8:	4603      	mov	r3, r0
 8023dda:	4622      	mov	r2, r4
 8023ddc:	4619      	mov	r1, r3
 8023dde:	6878      	ldr	r0, [r7, #4]
 8023de0:	f001 f9d0 	bl	8025184 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8023de4:	687b      	ldr	r3, [r7, #4]
      }
 8023de6:	4618      	mov	r0, r3
 8023de8:	370c      	adds	r7, #12
 8023dea:	46bd      	mov	sp, r7
 8023dec:	bd90      	pop	{r4, r7, pc}

08023dee <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023dee:	b590      	push	{r4, r7, lr}
 8023df0:	b083      	sub	sp, #12
 8023df2:	af00      	add	r7, sp, #0
 8023df4:	6078      	str	r0, [r7, #4]
 8023df6:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023df8:	6838      	ldr	r0, [r7, #0]
 8023dfa:	f001 f9e4 	bl	80251c6 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8023dfe:	4603      	mov	r3, r0
 8023e00:	4622      	mov	r2, r4
 8023e02:	4619      	mov	r1, r3
 8023e04:	6878      	ldr	r0, [r7, #4]
 8023e06:	f001 f9e9 	bl	80251dc <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8023e0a:	687b      	ldr	r3, [r7, #4]
      }
 8023e0c:	4618      	mov	r0, r3
 8023e0e:	370c      	adds	r7, #12
 8023e10:	46bd      	mov	sp, r7
 8023e12:	bd90      	pop	{r4, r7, pc}

08023e14 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023e14:	b590      	push	{r4, r7, lr}
 8023e16:	b083      	sub	sp, #12
 8023e18:	af00      	add	r7, sp, #0
 8023e1a:	6078      	str	r0, [r7, #4]
 8023e1c:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023e1e:	6838      	ldr	r0, [r7, #0]
 8023e20:	f001 f9fd 	bl	802521e <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8023e24:	4603      	mov	r3, r0
 8023e26:	4622      	mov	r2, r4
 8023e28:	4619      	mov	r1, r3
 8023e2a:	6878      	ldr	r0, [r7, #4]
 8023e2c:	f001 fa02 	bl	8025234 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8023e30:	687b      	ldr	r3, [r7, #4]
      }
 8023e32:	4618      	mov	r0, r3
 8023e34:	370c      	adds	r7, #12
 8023e36:	46bd      	mov	sp, r7
 8023e38:	bd90      	pop	{r4, r7, pc}

08023e3a <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023e3a:	b590      	push	{r4, r7, lr}
 8023e3c:	b083      	sub	sp, #12
 8023e3e:	af00      	add	r7, sp, #0
 8023e40:	6078      	str	r0, [r7, #4]
 8023e42:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023e44:	6838      	ldr	r0, [r7, #0]
 8023e46:	f001 fa16 	bl	8025276 <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023e4a:	4603      	mov	r3, r0
 8023e4c:	4622      	mov	r2, r4
 8023e4e:	4619      	mov	r1, r3
 8023e50:	6878      	ldr	r0, [r7, #4]
 8023e52:	f001 fa1b 	bl	802528c <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 8023e56:	687b      	ldr	r3, [r7, #4]
      }
 8023e58:	4618      	mov	r0, r3
 8023e5a:	370c      	adds	r7, #12
 8023e5c:	46bd      	mov	sp, r7
 8023e5e:	bd90      	pop	{r4, r7, pc}

08023e60 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8023e60:	b580      	push	{r7, lr}
 8023e62:	b082      	sub	sp, #8
 8023e64:	af00      	add	r7, sp, #0
 8023e66:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8023e68:	6878      	ldr	r0, [r7, #4]
 8023e6a:	f001 fa30 	bl	80252ce <_ZNSaI7RequestEC1Ev>
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	4618      	mov	r0, r3
 8023e72:	f001 fa38 	bl	80252e6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8023e76:	687b      	ldr	r3, [r7, #4]
 8023e78:	4618      	mov	r0, r3
 8023e7a:	3708      	adds	r7, #8
 8023e7c:	46bd      	mov	sp, r7
 8023e7e:	bd80      	pop	{r7, pc}

08023e80 <_ZNSaI7RequestED1Ev>:
 8023e80:	b580      	push	{r7, lr}
 8023e82:	b082      	sub	sp, #8
 8023e84:	af00      	add	r7, sp, #0
 8023e86:	6078      	str	r0, [r7, #4]
 8023e88:	6878      	ldr	r0, [r7, #4]
 8023e8a:	f001 fa45 	bl	8025318 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 8023e8e:	687b      	ldr	r3, [r7, #4]
 8023e90:	4618      	mov	r0, r3
 8023e92:	3708      	adds	r7, #8
 8023e94:	46bd      	mov	sp, r7
 8023e96:	bd80      	pop	{r7, pc}

08023e98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8023e98:	b590      	push	{r4, r7, lr}
 8023e9a:	b089      	sub	sp, #36	; 0x24
 8023e9c:	af00      	add	r7, sp, #0
 8023e9e:	6078      	str	r0, [r7, #4]
 8023ea0:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8023ea2:	2014      	movs	r0, #20
 8023ea4:	f7fd f81b 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8023ea8:	4602      	mov	r2, r0
 8023eaa:	683b      	ldr	r3, [r7, #0]
 8023eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8023eb0:	3301      	adds	r3, #1
 8023eb2:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8023eb4:	2308      	movs	r3, #8
 8023eb6:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8023eb8:	69fb      	ldr	r3, [r7, #28]
 8023eba:	3302      	adds	r3, #2
 8023ebc:	613b      	str	r3, [r7, #16]
 8023ebe:	f107 0210 	add.w	r2, r7, #16
 8023ec2:	f107 030c 	add.w	r3, r7, #12
 8023ec6:	4611      	mov	r1, r2
 8023ec8:	4618      	mov	r0, r3
 8023eca:	f001 fa30 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 8023ece:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8023ed0:	681a      	ldr	r2, [r3, #0]
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8023ed6:	687b      	ldr	r3, [r7, #4]
 8023ed8:	685b      	ldr	r3, [r3, #4]
 8023eda:	4619      	mov	r1, r3
 8023edc:	6878      	ldr	r0, [r7, #4]
 8023ede:	f001 fa3a 	bl	8025356 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8023ee2:	4602      	mov	r2, r0
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8023ee8:	687b      	ldr	r3, [r7, #4]
 8023eea:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8023eec:	687b      	ldr	r3, [r7, #4]
 8023eee:	6859      	ldr	r1, [r3, #4]
 8023ef0:	69fb      	ldr	r3, [r7, #28]
 8023ef2:	1acb      	subs	r3, r1, r3
 8023ef4:	085b      	lsrs	r3, r3, #1
 8023ef6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8023ef8:	4413      	add	r3, r2
 8023efa:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8023efc:	69fb      	ldr	r3, [r7, #28]
 8023efe:	009b      	lsls	r3, r3, #2
 8023f00:	69ba      	ldr	r2, [r7, #24]
 8023f02:	4413      	add	r3, r2
 8023f04:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8023f06:	697a      	ldr	r2, [r7, #20]
 8023f08:	69b9      	ldr	r1, [r7, #24]
 8023f0a:	6878      	ldr	r0, [r7, #4]
 8023f0c:	f001 fa40 	bl	8025390 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	3308      	adds	r3, #8
 8023f14:	69b9      	ldr	r1, [r7, #24]
 8023f16:	4618      	mov	r0, r3
 8023f18:	f001 fa54 	bl	80253c4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	f103 0218 	add.w	r2, r3, #24
 8023f22:	697b      	ldr	r3, [r7, #20]
 8023f24:	3b04      	subs	r3, #4
 8023f26:	4619      	mov	r1, r3
 8023f28:	4610      	mov	r0, r2
 8023f2a:	f001 fa4b 	bl	80253c4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8023f2e:	687b      	ldr	r3, [r7, #4]
 8023f30:	68da      	ldr	r2, [r3, #12]
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8023f36:	687b      	ldr	r3, [r7, #4]
 8023f38:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8023f3a:	2014      	movs	r0, #20
 8023f3c:	f7fc ffcf 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8023f40:	4602      	mov	r2, r0
 8023f42:	683b      	ldr	r3, [r7, #0]
 8023f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8023f48:	fb01 f202 	mul.w	r2, r1, r2
 8023f4c:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8023f4e:	4613      	mov	r3, r2
 8023f50:	009b      	lsls	r3, r3, #2
 8023f52:	4413      	add	r3, r2
 8023f54:	009b      	lsls	r3, r3, #2
 8023f56:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8023f58:	687b      	ldr	r3, [r7, #4]
 8023f5a:	619a      	str	r2, [r3, #24]
    }
 8023f5c:	bf00      	nop
 8023f5e:	3724      	adds	r7, #36	; 0x24
 8023f60:	46bd      	mov	sp, r7
 8023f62:	bd90      	pop	{r4, r7, pc}

08023f64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8023f64:	b580      	push	{r7, lr}
 8023f66:	b086      	sub	sp, #24
 8023f68:	af00      	add	r7, sp, #0
 8023f6a:	60f8      	str	r0, [r7, #12]
 8023f6c:	60b9      	str	r1, [r7, #8]
 8023f6e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8023f70:	68bb      	ldr	r3, [r7, #8]
 8023f72:	617b      	str	r3, [r7, #20]
 8023f74:	697a      	ldr	r2, [r7, #20]
 8023f76:	687b      	ldr	r3, [r7, #4]
 8023f78:	429a      	cmp	r2, r3
 8023f7a:	d209      	bcs.n	8023f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8023f7c:	697b      	ldr	r3, [r7, #20]
 8023f7e:	681b      	ldr	r3, [r3, #0]
 8023f80:	4619      	mov	r1, r3
 8023f82:	68f8      	ldr	r0, [r7, #12]
 8023f84:	f001 fa3a 	bl	80253fc <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8023f88:	697b      	ldr	r3, [r7, #20]
 8023f8a:	3304      	adds	r3, #4
 8023f8c:	617b      	str	r3, [r7, #20]
 8023f8e:	e7f1      	b.n	8023f74 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8023f90:	bf00      	nop
 8023f92:	3718      	adds	r7, #24
 8023f94:	46bd      	mov	sp, r7
 8023f96:	bd80      	pop	{r7, pc}

08023f98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8023f98:	b580      	push	{r7, lr}
 8023f9a:	b086      	sub	sp, #24
 8023f9c:	af00      	add	r7, sp, #0
 8023f9e:	60f8      	str	r0, [r7, #12]
 8023fa0:	60b9      	str	r1, [r7, #8]
 8023fa2:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8023fa4:	f107 0314 	add.w	r3, r7, #20
 8023fa8:	68f9      	ldr	r1, [r7, #12]
 8023faa:	4618      	mov	r0, r3
 8023fac:	f001 fa39 	bl	8025422 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8023fb0:	f107 0314 	add.w	r3, r7, #20
 8023fb4:	687a      	ldr	r2, [r7, #4]
 8023fb6:	68b9      	ldr	r1, [r7, #8]
 8023fb8:	4618      	mov	r0, r3
 8023fba:	f001 fa4f 	bl	802545c <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8023fbe:	f107 0314 	add.w	r3, r7, #20
 8023fc2:	4618      	mov	r0, r3
 8023fc4:	f001 fa3e 	bl	8025444 <_ZNSaIP7RequestED1Ev>
      }
 8023fc8:	bf00      	nop
 8023fca:	3718      	adds	r7, #24
 8023fcc:	46bd      	mov	sp, r7
 8023fce:	bd80      	pop	{r7, pc}

08023fd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023fd0:	b580      	push	{r7, lr}
 8023fd2:	b082      	sub	sp, #8
 8023fd4:	af00      	add	r7, sp, #0
 8023fd6:	6078      	str	r0, [r7, #4]
 8023fd8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8023fda:	683b      	ldr	r3, [r7, #0]
 8023fdc:	3308      	adds	r3, #8
 8023fde:	4619      	mov	r1, r3
 8023fe0:	6878      	ldr	r0, [r7, #4]
 8023fe2:	f000 f81e 	bl	8024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8023fe6:	6878      	ldr	r0, [r7, #4]
 8023fe8:	3708      	adds	r7, #8
 8023fea:	46bd      	mov	sp, r7
 8023fec:	bd80      	pop	{r7, pc}

08023fee <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8023fee:	b580      	push	{r7, lr}
 8023ff0:	b082      	sub	sp, #8
 8023ff2:	af00      	add	r7, sp, #0
 8023ff4:	6078      	str	r0, [r7, #4]
 8023ff6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8023ff8:	683b      	ldr	r3, [r7, #0]
 8023ffa:	3318      	adds	r3, #24
 8023ffc:	4619      	mov	r1, r3
 8023ffe:	6878      	ldr	r0, [r7, #4]
 8024000:	f000 f80f 	bl	8024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8024004:	6878      	ldr	r0, [r7, #4]
 8024006:	3708      	adds	r7, #8
 8024008:	46bd      	mov	sp, r7
 802400a:	bd80      	pop	{r7, pc}

0802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 802400c:	b480      	push	{r7}
 802400e:	b083      	sub	sp, #12
 8024010:	af00      	add	r7, sp, #0
 8024012:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024014:	687b      	ldr	r3, [r7, #4]
 8024016:	4618      	mov	r0, r3
 8024018:	370c      	adds	r7, #12
 802401a:	46bd      	mov	sp, r7
 802401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024020:	4770      	bx	lr

08024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024022:	b480      	push	{r7}
 8024024:	b083      	sub	sp, #12
 8024026:	af00      	add	r7, sp, #0
 8024028:	6078      	str	r0, [r7, #4]
 802402a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802402c:	683b      	ldr	r3, [r7, #0]
 802402e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024030:	687b      	ldr	r3, [r7, #4]
 8024032:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024034:	683b      	ldr	r3, [r7, #0]
 8024036:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024038:	687b      	ldr	r3, [r7, #4]
 802403a:	605a      	str	r2, [r3, #4]
 802403c:	683b      	ldr	r3, [r7, #0]
 802403e:	689a      	ldr	r2, [r3, #8]
 8024040:	687b      	ldr	r3, [r7, #4]
 8024042:	609a      	str	r2, [r3, #8]
 8024044:	683b      	ldr	r3, [r7, #0]
 8024046:	68da      	ldr	r2, [r3, #12]
 8024048:	687b      	ldr	r3, [r7, #4]
 802404a:	60da      	str	r2, [r3, #12]
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	4618      	mov	r0, r3
 8024050:	370c      	adds	r7, #12
 8024052:	46bd      	mov	sp, r7
 8024054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024058:	4770      	bx	lr

0802405a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 802405a:	b580      	push	{r7, lr}
 802405c:	b08c      	sub	sp, #48	; 0x30
 802405e:	af00      	add	r7, sp, #0
 8024060:	60f8      	str	r0, [r7, #12]
 8024062:	60b9      	str	r1, [r7, #8]
 8024064:	607a      	str	r2, [r7, #4]
 8024066:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8024068:	f107 0310 	add.w	r3, r7, #16
 802406c:	68b9      	ldr	r1, [r7, #8]
 802406e:	4618      	mov	r0, r3
 8024070:	f7ff ffd7 	bl	8024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8024074:	f107 0320 	add.w	r3, r7, #32
 8024078:	6879      	ldr	r1, [r7, #4]
 802407a:	4618      	mov	r0, r3
 802407c:	f7ff ffd1 	bl	8024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8024080:	f107 0220 	add.w	r2, r7, #32
 8024084:	f107 0310 	add.w	r3, r7, #16
 8024088:	4619      	mov	r1, r3
 802408a:	68f8      	ldr	r0, [r7, #12]
 802408c:	f001 f9f5 	bl	802547a <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8024090:	bf00      	nop
 8024092:	3730      	adds	r7, #48	; 0x30
 8024094:	46bd      	mov	sp, r7
 8024096:	bd80      	pop	{r7, pc}

08024098 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8024098:	b580      	push	{r7, lr}
 802409a:	b082      	sub	sp, #8
 802409c:	af00      	add	r7, sp, #0
 802409e:	6078      	str	r0, [r7, #4]
 80240a0:	6878      	ldr	r0, [r7, #4]
 80240a2:	f001 fa58 	bl	8025556 <_ZNSaI8ResponceED1Ev>
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	4618      	mov	r0, r3
 80240aa:	3708      	adds	r7, #8
 80240ac:	46bd      	mov	sp, r7
 80240ae:	bd80      	pop	{r7, pc}

080240b0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 80240b0:	b580      	push	{r7, lr}
 80240b2:	b082      	sub	sp, #8
 80240b4:	af00      	add	r7, sp, #0
 80240b6:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	4618      	mov	r0, r3
 80240bc:	f001 fa3b 	bl	8025536 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80240c0:	2100      	movs	r1, #0
 80240c2:	6878      	ldr	r0, [r7, #4]
 80240c4:	f001 fa53 	bl	802556e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	4618      	mov	r0, r3
 80240cc:	3708      	adds	r7, #8
 80240ce:	46bd      	mov	sp, r7
 80240d0:	bd80      	pop	{r7, pc}

080240d2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80240d2:	b580      	push	{r7, lr}
 80240d4:	b082      	sub	sp, #8
 80240d6:	af00      	add	r7, sp, #0
 80240d8:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80240da:	687b      	ldr	r3, [r7, #4]
 80240dc:	681b      	ldr	r3, [r3, #0]
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d010      	beq.n	8024104 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80240ea:	3304      	adds	r3, #4
 80240ec:	461a      	mov	r2, r3
 80240ee:	6878      	ldr	r0, [r7, #4]
 80240f0:	f001 faa0 	bl	8025634 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	6819      	ldr	r1, [r3, #0]
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	685b      	ldr	r3, [r3, #4]
 80240fc:	461a      	mov	r2, r3
 80240fe:	6878      	ldr	r0, [r7, #4]
 8024100:	f001 fab2 	bl	8025668 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	4618      	mov	r0, r3
 8024108:	f7ff ffc6 	bl	8024098 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 802410c:	687b      	ldr	r3, [r7, #4]
 802410e:	4618      	mov	r0, r3
 8024110:	3708      	adds	r7, #8
 8024112:	46bd      	mov	sp, r7
 8024114:	bd80      	pop	{r7, pc}

08024116 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024116:	b580      	push	{r7, lr}
 8024118:	b082      	sub	sp, #8
 802411a:	af00      	add	r7, sp, #0
 802411c:	6078      	str	r0, [r7, #4]
 802411e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024120:	683b      	ldr	r3, [r7, #0]
 8024122:	3308      	adds	r3, #8
 8024124:	4619      	mov	r1, r3
 8024126:	6878      	ldr	r0, [r7, #4]
 8024128:	f000 f81e 	bl	8024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 802412c:	6878      	ldr	r0, [r7, #4]
 802412e:	3708      	adds	r7, #8
 8024130:	46bd      	mov	sp, r7
 8024132:	bd80      	pop	{r7, pc}

08024134 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8024134:	b580      	push	{r7, lr}
 8024136:	b082      	sub	sp, #8
 8024138:	af00      	add	r7, sp, #0
 802413a:	6078      	str	r0, [r7, #4]
 802413c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 802413e:	683b      	ldr	r3, [r7, #0]
 8024140:	3318      	adds	r3, #24
 8024142:	4619      	mov	r1, r3
 8024144:	6878      	ldr	r0, [r7, #4]
 8024146:	f000 f80f 	bl	8024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 802414a:	6878      	ldr	r0, [r7, #4]
 802414c:	3708      	adds	r7, #8
 802414e:	46bd      	mov	sp, r7
 8024150:	bd80      	pop	{r7, pc}

08024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024152:	b480      	push	{r7}
 8024154:	b083      	sub	sp, #12
 8024156:	af00      	add	r7, sp, #0
 8024158:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	4618      	mov	r0, r3
 802415e:	370c      	adds	r7, #12
 8024160:	46bd      	mov	sp, r7
 8024162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024166:	4770      	bx	lr

08024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024168:	b480      	push	{r7}
 802416a:	b083      	sub	sp, #12
 802416c:	af00      	add	r7, sp, #0
 802416e:	6078      	str	r0, [r7, #4]
 8024170:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024172:	683b      	ldr	r3, [r7, #0]
 8024174:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024176:	687b      	ldr	r3, [r7, #4]
 8024178:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802417a:	683b      	ldr	r3, [r7, #0]
 802417c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	605a      	str	r2, [r3, #4]
 8024182:	683b      	ldr	r3, [r7, #0]
 8024184:	689a      	ldr	r2, [r3, #8]
 8024186:	687b      	ldr	r3, [r7, #4]
 8024188:	609a      	str	r2, [r3, #8]
 802418a:	683b      	ldr	r3, [r7, #0]
 802418c:	68da      	ldr	r2, [r3, #12]
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	60da      	str	r2, [r3, #12]
 8024192:	687b      	ldr	r3, [r7, #4]
 8024194:	4618      	mov	r0, r3
 8024196:	370c      	adds	r7, #12
 8024198:	46bd      	mov	sp, r7
 802419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802419e:	4770      	bx	lr

080241a0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 80241a0:	b580      	push	{r7, lr}
 80241a2:	b08c      	sub	sp, #48	; 0x30
 80241a4:	af00      	add	r7, sp, #0
 80241a6:	60f8      	str	r0, [r7, #12]
 80241a8:	60b9      	str	r1, [r7, #8]
 80241aa:	607a      	str	r2, [r7, #4]
 80241ac:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 80241ae:	f107 0310 	add.w	r3, r7, #16
 80241b2:	68b9      	ldr	r1, [r7, #8]
 80241b4:	4618      	mov	r0, r3
 80241b6:	f7ff ffd7 	bl	8024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80241ba:	f107 0320 	add.w	r3, r7, #32
 80241be:	6879      	ldr	r1, [r7, #4]
 80241c0:	4618      	mov	r0, r3
 80241c2:	f7ff ffd1 	bl	8024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80241c6:	f107 0220 	add.w	r2, r7, #32
 80241ca:	f107 0310 	add.w	r3, r7, #16
 80241ce:	4619      	mov	r1, r3
 80241d0:	68f8      	ldr	r0, [r7, #12]
 80241d2:	f001 fa65 	bl	80256a0 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 80241d6:	bf00      	nop
 80241d8:	3730      	adds	r7, #48	; 0x30
 80241da:	46bd      	mov	sp, r7
 80241dc:	bd80      	pop	{r7, pc}

080241de <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80241de:	b580      	push	{r7, lr}
 80241e0:	b082      	sub	sp, #8
 80241e2:	af00      	add	r7, sp, #0
 80241e4:	6078      	str	r0, [r7, #4]
 80241e6:	6878      	ldr	r0, [r7, #4]
 80241e8:	f001 fab5 	bl	8025756 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 80241ec:	687b      	ldr	r3, [r7, #4]
 80241ee:	4618      	mov	r0, r3
 80241f0:	3708      	adds	r7, #8
 80241f2:	46bd      	mov	sp, r7
 80241f4:	bd80      	pop	{r7, pc}

080241f6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80241f6:	b480      	push	{r7}
 80241f8:	b083      	sub	sp, #12
 80241fa:	af00      	add	r7, sp, #0
 80241fc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80241fe:	687b      	ldr	r3, [r7, #4]
 8024200:	2200      	movs	r2, #0
 8024202:	601a      	str	r2, [r3, #0]
 8024204:	687b      	ldr	r3, [r7, #4]
 8024206:	2200      	movs	r2, #0
 8024208:	605a      	str	r2, [r3, #4]
 802420a:	687b      	ldr	r3, [r7, #4]
 802420c:	2200      	movs	r2, #0
 802420e:	609a      	str	r2, [r3, #8]
	{ }
 8024210:	687b      	ldr	r3, [r7, #4]
 8024212:	4618      	mov	r0, r3
 8024214:	370c      	adds	r7, #12
 8024216:	46bd      	mov	sp, r7
 8024218:	f85d 7b04 	ldr.w	r7, [sp], #4
 802421c:	4770      	bx	lr

0802421e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802421e:	b480      	push	{r7}
 8024220:	b083      	sub	sp, #12
 8024222:	af00      	add	r7, sp, #0
 8024224:	6078      	str	r0, [r7, #4]
 8024226:	687b      	ldr	r3, [r7, #4]
 8024228:	4618      	mov	r0, r3
 802422a:	370c      	adds	r7, #12
 802422c:	46bd      	mov	sp, r7
 802422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024232:	4770      	bx	lr

08024234 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8024234:	b580      	push	{r7, lr}
 8024236:	b084      	sub	sp, #16
 8024238:	af00      	add	r7, sp, #0
 802423a:	60f8      	str	r0, [r7, #12]
 802423c:	60b9      	str	r1, [r7, #8]
 802423e:	607a      	str	r2, [r7, #4]
	if (__p)
 8024240:	68bb      	ldr	r3, [r7, #8]
 8024242:	2b00      	cmp	r3, #0
 8024244:	d005      	beq.n	8024252 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8024246:	68fb      	ldr	r3, [r7, #12]
 8024248:	687a      	ldr	r2, [r7, #4]
 802424a:	68b9      	ldr	r1, [r7, #8]
 802424c:	4618      	mov	r0, r3
 802424e:	f001 fa8d 	bl	802576c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8024252:	bf00      	nop
 8024254:	3710      	adds	r7, #16
 8024256:	46bd      	mov	sp, r7
 8024258:	bd80      	pop	{r7, pc}

0802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 802425a:	b480      	push	{r7}
 802425c:	b083      	sub	sp, #12
 802425e:	af00      	add	r7, sp, #0
 8024260:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	4618      	mov	r0, r3
 8024266:	370c      	adds	r7, #12
 8024268:	46bd      	mov	sp, r7
 802426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802426e:	4770      	bx	lr

08024270 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8024270:	b580      	push	{r7, lr}
 8024272:	b084      	sub	sp, #16
 8024274:	af00      	add	r7, sp, #0
 8024276:	60f8      	str	r0, [r7, #12]
 8024278:	60b9      	str	r1, [r7, #8]
 802427a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 802427c:	68b9      	ldr	r1, [r7, #8]
 802427e:	68f8      	ldr	r0, [r7, #12]
 8024280:	f001 fa83 	bl	802578a <_ZSt8_DestroyIPhEvT_S1_>
    }
 8024284:	bf00      	nop
 8024286:	3710      	adds	r7, #16
 8024288:	46bd      	mov	sp, r7
 802428a:	bd80      	pop	{r7, pc}

0802428c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802428c:	b480      	push	{r7}
 802428e:	b083      	sub	sp, #12
 8024290:	af00      	add	r7, sp, #0
 8024292:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8024294:	687b      	ldr	r3, [r7, #4]
 8024296:	4618      	mov	r0, r3
 8024298:	370c      	adds	r7, #12
 802429a:	46bd      	mov	sp, r7
 802429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242a0:	4770      	bx	lr

080242a2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80242a2:	b580      	push	{r7, lr}
 80242a4:	b084      	sub	sp, #16
 80242a6:	af00      	add	r7, sp, #0
 80242a8:	60f8      	str	r0, [r7, #12]
 80242aa:	60b9      	str	r1, [r7, #8]
 80242ac:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80242ae:	6878      	ldr	r0, [r7, #4]
 80242b0:	f7ff ffec 	bl	802428c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80242b4:	4603      	mov	r3, r0
 80242b6:	461a      	mov	r2, r3
 80242b8:	68b9      	ldr	r1, [r7, #8]
 80242ba:	68f8      	ldr	r0, [r7, #12]
 80242bc:	f001 fa72 	bl	80257a4 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80242c0:	bf00      	nop
 80242c2:	3710      	adds	r7, #16
 80242c4:	46bd      	mov	sp, r7
 80242c6:	bd80      	pop	{r7, pc}

080242c8 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80242c8:	b5b0      	push	{r4, r5, r7, lr}
 80242ca:	b082      	sub	sp, #8
 80242cc:	af00      	add	r7, sp, #0
 80242ce:	6078      	str	r0, [r7, #4]
 80242d0:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 80242d2:	6878      	ldr	r0, [r7, #4]
 80242d4:	f7ff fb59 	bl	802398a <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 80242d8:	4604      	mov	r4, r0
 80242da:	6878      	ldr	r0, [r7, #4]
 80242dc:	f001 fa7a 	bl	80257d4 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 80242e0:	4603      	mov	r3, r0
 80242e2:	429c      	cmp	r4, r3
 80242e4:	bf0c      	ite	eq
 80242e6:	2301      	moveq	r3, #1
 80242e8:	2300      	movne	r3, #0
 80242ea:	b2db      	uxtb	r3, r3
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	d002      	beq.n	80242f6 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80242f0:	4816      	ldr	r0, [pc, #88]	; (802434c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 80242f2:	f01a fe01 	bl	803eef8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80242f6:	2101      	movs	r1, #1
 80242f8:	6878      	ldr	r0, [r7, #4]
 80242fa:	f001 fa7c 	bl	80257f6 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80242fe:	687a      	ldr	r2, [r7, #4]
 8024300:	687b      	ldr	r3, [r7, #4]
 8024302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024304:	1d1c      	adds	r4, r3, #4
 8024306:	4610      	mov	r0, r2
 8024308:	f001 fa90 	bl	802582c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 802430c:	4603      	mov	r3, r0
 802430e:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8024310:	687c      	ldr	r4, [r7, #4]
 8024312:	687b      	ldr	r3, [r7, #4]
 8024314:	699d      	ldr	r5, [r3, #24]
 8024316:	6838      	ldr	r0, [r7, #0]
 8024318:	f7ff ffb8 	bl	802428c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802431c:	4603      	mov	r3, r0
 802431e:	461a      	mov	r2, r3
 8024320:	4629      	mov	r1, r5
 8024322:	4620      	mov	r0, r4
 8024324:	f7ff ffbd 	bl	80242a2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024328:	687b      	ldr	r3, [r7, #4]
 802432a:	f103 0218 	add.w	r2, r3, #24
 802432e:	687b      	ldr	r3, [r7, #4]
 8024330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024332:	3304      	adds	r3, #4
 8024334:	4619      	mov	r1, r3
 8024336:	4610      	mov	r0, r2
 8024338:	f001 f844 	bl	80253c4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	69da      	ldr	r2, [r3, #28]
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8024344:	bf00      	nop
 8024346:	3708      	adds	r7, #8
 8024348:	46bd      	mov	sp, r7
 802434a:	bdb0      	pop	{r4, r5, r7, pc}
 802434c:	08040b24 	.word	0x08040b24

08024350 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8024350:	b480      	push	{r7}
 8024352:	b083      	sub	sp, #12
 8024354:	af00      	add	r7, sp, #0
 8024356:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024358:	687b      	ldr	r3, [r7, #4]
 802435a:	4618      	mov	r0, r3
 802435c:	370c      	adds	r7, #12
 802435e:	46bd      	mov	sp, r7
 8024360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024364:	4770      	bx	lr

08024366 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8024366:	b590      	push	{r4, r7, lr}
 8024368:	b089      	sub	sp, #36	; 0x24
 802436a:	af00      	add	r7, sp, #0
 802436c:	60f8      	str	r0, [r7, #12]
 802436e:	60b9      	str	r1, [r7, #8]
 8024370:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8024372:	68fa      	ldr	r2, [r7, #12]
 8024374:	f107 031c 	add.w	r3, r7, #28
 8024378:	4611      	mov	r1, r2
 802437a:	4618      	mov	r0, r3
 802437c:	f001 fa68 	bl	8025850 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8024380:	f107 021c 	add.w	r2, r7, #28
 8024384:	f107 0310 	add.w	r3, r7, #16
 8024388:	4611      	mov	r1, r2
 802438a:	4618      	mov	r0, r3
 802438c:	f001 fa71 	bl	8025872 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8024390:	f107 031c 	add.w	r3, r7, #28
 8024394:	4618      	mov	r0, r3
 8024396:	f7ff f87d 	bl	8023494 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 802439a:	68fb      	ldr	r3, [r7, #12]
 802439c:	68ba      	ldr	r2, [r7, #8]
 802439e:	4611      	mov	r1, r2
 80243a0:	4618      	mov	r0, r3
 80243a2:	f001 fa75 	bl	8025890 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80243a6:	68ba      	ldr	r2, [r7, #8]
 80243a8:	f107 0310 	add.w	r3, r7, #16
 80243ac:	4611      	mov	r1, r2
 80243ae:	4618      	mov	r0, r3
 80243b0:	f001 fa6e 	bl	8025890 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80243b4:	68fb      	ldr	r3, [r7, #12]
 80243b6:	4618      	mov	r0, r3
 80243b8:	f7ff ff4f 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80243bc:	4604      	mov	r4, r0
 80243be:	68bb      	ldr	r3, [r7, #8]
 80243c0:	4618      	mov	r0, r3
 80243c2:	f7ff ff4a 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80243c6:	4603      	mov	r3, r0
 80243c8:	4619      	mov	r1, r3
 80243ca:	4620      	mov	r0, r4
 80243cc:	f001 fa7e 	bl	80258cc <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 80243d0:	f107 0310 	add.w	r3, r7, #16
 80243d4:	4618      	mov	r0, r3
 80243d6:	f7ff f881 	bl	80234dc <_ZNSt6vectorIhSaIhEED1Ev>
      }
 80243da:	bf00      	nop
 80243dc:	3724      	adds	r7, #36	; 0x24
 80243de:	46bd      	mov	sp, r7
 80243e0:	bd90      	pop	{r4, r7, pc}

080243e2 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80243e2:	b480      	push	{r7}
 80243e4:	b083      	sub	sp, #12
 80243e6:	af00      	add	r7, sp, #0
 80243e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80243ea:	687b      	ldr	r3, [r7, #4]
 80243ec:	4618      	mov	r0, r3
 80243ee:	370c      	adds	r7, #12
 80243f0:	46bd      	mov	sp, r7
 80243f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243f6:	4770      	bx	lr

080243f8 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80243f8:	b5b0      	push	{r4, r5, r7, lr}
 80243fa:	b082      	sub	sp, #8
 80243fc:	af00      	add	r7, sp, #0
 80243fe:	6078      	str	r0, [r7, #4]
 8024400:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8024406:	687b      	ldr	r3, [r7, #4]
 8024408:	6a1b      	ldr	r3, [r3, #32]
 802440a:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 802440c:	429a      	cmp	r2, r3
 802440e:	d012      	beq.n	8024436 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 8024410:	687c      	ldr	r4, [r7, #4]
 8024412:	687b      	ldr	r3, [r7, #4]
 8024414:	699d      	ldr	r5, [r3, #24]
 8024416:	6838      	ldr	r0, [r7, #0]
 8024418:	f7ff ffe3 	bl	80243e2 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 802441c:	4603      	mov	r3, r0
 802441e:	461a      	mov	r2, r3
 8024420:	4629      	mov	r1, r5
 8024422:	4620      	mov	r0, r4
 8024424:	f001 fa60 	bl	80258e8 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	699b      	ldr	r3, [r3, #24]
 802442c:	f103 0210 	add.w	r2, r3, #16
 8024430:	687b      	ldr	r3, [r7, #4]
 8024432:	619a      	str	r2, [r3, #24]
      }
 8024434:	e007      	b.n	8024446 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8024436:	6838      	ldr	r0, [r7, #0]
 8024438:	f7ff ffd3 	bl	80243e2 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 802443c:	4603      	mov	r3, r0
 802443e:	4619      	mov	r1, r3
 8024440:	6878      	ldr	r0, [r7, #4]
 8024442:	f001 fa65 	bl	8025910 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8024446:	bf00      	nop
 8024448:	3708      	adds	r7, #8
 802444a:	46bd      	mov	sp, r7
 802444c:	bdb0      	pop	{r4, r5, r7, pc}

0802444e <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 802444e:	b580      	push	{r7, lr}
 8024450:	b082      	sub	sp, #8
 8024452:	af00      	add	r7, sp, #0
 8024454:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8024456:	687b      	ldr	r3, [r7, #4]
 8024458:	f103 0218 	add.w	r2, r3, #24
 802445c:	687b      	ldr	r3, [r7, #4]
 802445e:	3308      	adds	r3, #8
 8024460:	4619      	mov	r1, r3
 8024462:	4610      	mov	r0, r2
 8024464:	f001 fa98 	bl	8025998 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8024468:	4603      	mov	r3, r0
 802446a:	4618      	mov	r0, r3
 802446c:	3708      	adds	r7, #8
 802446e:	46bd      	mov	sp, r7
 8024470:	bd80      	pop	{r7, pc}

08024472 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8024472:	b580      	push	{r7, lr}
 8024474:	b086      	sub	sp, #24
 8024476:	af00      	add	r7, sp, #0
 8024478:	6078      	str	r0, [r7, #4]
	return *begin();
 802447a:	f107 0308 	add.w	r3, r7, #8
 802447e:	6879      	ldr	r1, [r7, #4]
 8024480:	4618      	mov	r0, r3
 8024482:	f7ff fe48 	bl	8024116 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8024486:	f107 0308 	add.w	r3, r7, #8
 802448a:	4618      	mov	r0, r3
 802448c:	f001 fa98 	bl	80259c0 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 8024490:	4603      	mov	r3, r0
      }
 8024492:	4618      	mov	r0, r3
 8024494:	3718      	adds	r7, #24
 8024496:	46bd      	mov	sp, r7
 8024498:	bd80      	pop	{r7, pc}

0802449a <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 802449a:	b480      	push	{r7}
 802449c:	b083      	sub	sp, #12
 802449e:	af00      	add	r7, sp, #0
 80244a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	4618      	mov	r0, r3
 80244a6:	370c      	adds	r7, #12
 80244a8:	46bd      	mov	sp, r7
 80244aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244ae:	4770      	bx	lr

080244b0 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80244b0:	b580      	push	{r7, lr}
 80244b2:	b082      	sub	sp, #8
 80244b4:	af00      	add	r7, sp, #0
 80244b6:	6078      	str	r0, [r7, #4]
 80244b8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80244ba:	6839      	ldr	r1, [r7, #0]
 80244bc:	6878      	ldr	r0, [r7, #4]
 80244be:	f001 fa8b 	bl	80259d8 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80244c2:	687b      	ldr	r3, [r7, #4]
 80244c4:	4618      	mov	r0, r3
 80244c6:	3708      	adds	r7, #8
 80244c8:	46bd      	mov	sp, r7
 80244ca:	bd80      	pop	{r7, pc}

080244cc <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 80244cc:	b480      	push	{r7}
 80244ce:	b083      	sub	sp, #12
 80244d0:	af00      	add	r7, sp, #0
 80244d2:	6078      	str	r0, [r7, #4]
 80244d4:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80244d6:	683b      	ldr	r3, [r7, #0]
 80244d8:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 80244da:	687b      	ldr	r3, [r7, #4]
 80244dc:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80244de:	683b      	ldr	r3, [r7, #0]
 80244e0:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80244e2:	687b      	ldr	r3, [r7, #4]
 80244e4:	605a      	str	r2, [r3, #4]
 80244e6:	683b      	ldr	r3, [r7, #0]
 80244e8:	689a      	ldr	r2, [r3, #8]
 80244ea:	687b      	ldr	r3, [r7, #4]
 80244ec:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80244ee:	683b      	ldr	r3, [r7, #0]
 80244f0:	2200      	movs	r2, #0
 80244f2:	609a      	str	r2, [r3, #8]
 80244f4:	683b      	ldr	r3, [r7, #0]
 80244f6:	689a      	ldr	r2, [r3, #8]
 80244f8:	683b      	ldr	r3, [r7, #0]
 80244fa:	605a      	str	r2, [r3, #4]
 80244fc:	683b      	ldr	r3, [r7, #0]
 80244fe:	685a      	ldr	r2, [r3, #4]
 8024500:	683b      	ldr	r3, [r7, #0]
 8024502:	601a      	str	r2, [r3, #0]
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	4618      	mov	r0, r3
 8024508:	370c      	adds	r7, #12
 802450a:	46bd      	mov	sp, r7
 802450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024510:	4770      	bx	lr

08024512 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8024512:	b580      	push	{r7, lr}
 8024514:	b082      	sub	sp, #8
 8024516:	af00      	add	r7, sp, #0
 8024518:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 802451a:	687b      	ldr	r3, [r7, #4]
 802451c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 802451e:	687b      	ldr	r3, [r7, #4]
 8024520:	691b      	ldr	r3, [r3, #16]
 8024522:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8024524:	429a      	cmp	r2, r3
 8024526:	d011      	beq.n	802454c <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024528:	687b      	ldr	r3, [r7, #4]
 802452a:	4618      	mov	r0, r3
 802452c:	f7ff fe11 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024530:	4602      	mov	r2, r0
 8024532:	687b      	ldr	r3, [r7, #4]
 8024534:	689b      	ldr	r3, [r3, #8]
 8024536:	4619      	mov	r1, r3
 8024538:	4610      	mov	r0, r2
 802453a:	f001 fa59 	bl	80259f0 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 802453e:	687b      	ldr	r3, [r7, #4]
 8024540:	689b      	ldr	r3, [r3, #8]
 8024542:	f103 0210 	add.w	r2, r3, #16
 8024546:	687b      	ldr	r3, [r7, #4]
 8024548:	609a      	str	r2, [r3, #8]
      }
 802454a:	e002      	b.n	8024552 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 802454c:	6878      	ldr	r0, [r7, #4]
 802454e:	f001 fa5c 	bl	8025a0a <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 8024552:	bf00      	nop
 8024554:	3708      	adds	r7, #8
 8024556:	46bd      	mov	sp, r7
 8024558:	bd80      	pop	{r7, pc}

0802455a <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 802455a:	b480      	push	{r7}
 802455c:	b083      	sub	sp, #12
 802455e:	af00      	add	r7, sp, #0
 8024560:	6078      	str	r0, [r7, #4]
 8024562:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8024564:	683b      	ldr	r3, [r7, #0]
 8024566:	4618      	mov	r0, r3
 8024568:	370c      	adds	r7, #12
 802456a:	46bd      	mov	sp, r7
 802456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024570:	4770      	bx	lr

08024572 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024572:	b480      	push	{r7}
 8024574:	b083      	sub	sp, #12
 8024576:	af00      	add	r7, sp, #0
 8024578:	6078      	str	r0, [r7, #4]
 802457a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 802457c:	687b      	ldr	r3, [r7, #4]
 802457e:	681a      	ldr	r2, [r3, #0]
 8024580:	683b      	ldr	r3, [r7, #0]
 8024582:	681b      	ldr	r3, [r3, #0]
 8024584:	429a      	cmp	r2, r3
 8024586:	bf0c      	ite	eq
 8024588:	2301      	moveq	r3, #1
 802458a:	2300      	movne	r3, #0
 802458c:	b2db      	uxtb	r3, r3
 802458e:	4618      	mov	r0, r3
 8024590:	370c      	adds	r7, #12
 8024592:	46bd      	mov	sp, r7
 8024594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024598:	4770      	bx	lr

0802459a <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 802459a:	b480      	push	{r7}
 802459c:	b083      	sub	sp, #12
 802459e:	af00      	add	r7, sp, #0
 80245a0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80245a2:	687b      	ldr	r3, [r7, #4]
 80245a4:	681b      	ldr	r3, [r3, #0]
 80245a6:	4618      	mov	r0, r3
 80245a8:	370c      	adds	r7, #12
 80245aa:	46bd      	mov	sp, r7
 80245ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245b0:	4770      	bx	lr

080245b2 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80245b2:	b580      	push	{r7, lr}
 80245b4:	b082      	sub	sp, #8
 80245b6:	af00      	add	r7, sp, #0
 80245b8:	6078      	str	r0, [r7, #4]
 80245ba:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80245bc:	6839      	ldr	r1, [r7, #0]
 80245be:	6878      	ldr	r0, [r7, #4]
 80245c0:	f001 fa4b 	bl	8025a5a <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 80245c4:	bf00      	nop
 80245c6:	3708      	adds	r7, #8
 80245c8:	46bd      	mov	sp, r7
 80245ca:	bd80      	pop	{r7, pc}

080245cc <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80245cc:	b580      	push	{r7, lr}
 80245ce:	b082      	sub	sp, #8
 80245d0:	af00      	add	r7, sp, #0
 80245d2:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	4618      	mov	r0, r3
 80245d8:	f7ff fd18 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80245dc:	4602      	mov	r2, r0
 80245de:	687b      	ldr	r3, [r7, #4]
 80245e0:	689b      	ldr	r3, [r3, #8]
 80245e2:	4619      	mov	r1, r3
 80245e4:	4610      	mov	r0, r2
 80245e6:	f7ff ffe4 	bl	80245b2 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80245ea:	687a      	ldr	r2, [r7, #4]
 80245ec:	687b      	ldr	r3, [r7, #4]
 80245ee:	68db      	ldr	r3, [r3, #12]
 80245f0:	4619      	mov	r1, r3
 80245f2:	4610      	mov	r0, r2
 80245f4:	f000 ff02 	bl	80253fc <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	f103 0208 	add.w	r2, r3, #8
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	695b      	ldr	r3, [r3, #20]
 8024602:	3304      	adds	r3, #4
 8024604:	4619      	mov	r1, r3
 8024606:	4610      	mov	r0, r2
 8024608:	f000 fedc 	bl	80253c4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	68da      	ldr	r2, [r3, #12]
 8024610:	687b      	ldr	r3, [r7, #4]
 8024612:	609a      	str	r2, [r3, #8]
    }
 8024614:	bf00      	nop
 8024616:	3708      	adds	r7, #8
 8024618:	46bd      	mov	sp, r7
 802461a:	bd80      	pop	{r7, pc}

0802461c <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 802461c:	b580      	push	{r7, lr}
 802461e:	b082      	sub	sp, #8
 8024620:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8024622:	4618      	mov	r0, r3
 8024624:	f000 f805 	bl	8024632 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8024628:	4603      	mov	r3, r0
      }
 802462a:	4618      	mov	r0, r3
 802462c:	3708      	adds	r7, #8
 802462e:	46bd      	mov	sp, r7
 8024630:	bd80      	pop	{r7, pc}

08024632 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8024632:	b480      	push	{r7}
 8024634:	b083      	sub	sp, #12
 8024636:	af00      	add	r7, sp, #0
 8024638:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 802463a:	2301      	movs	r3, #1
      }
 802463c:	4618      	mov	r0, r3
 802463e:	370c      	adds	r7, #12
 8024640:	46bd      	mov	sp, r7
 8024642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024646:	4770      	bx	lr

08024648 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8024648:	b5b0      	push	{r4, r5, r7, lr}
 802464a:	b088      	sub	sp, #32
 802464c:	af00      	add	r7, sp, #0
 802464e:	6078      	str	r0, [r7, #4]
 8024650:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8024652:	683b      	ldr	r3, [r7, #0]
 8024654:	2b00      	cmp	r3, #0
 8024656:	f000 80a8 	beq.w	80247aa <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 802465a:	6878      	ldr	r0, [r7, #4]
 802465c:	f7ff f811 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024660:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8024662:	687b      	ldr	r3, [r7, #4]
 8024664:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8024666:	687b      	ldr	r3, [r7, #4]
 8024668:	685b      	ldr	r3, [r3, #4]
 802466a:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 802466c:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 802466e:	6878      	ldr	r0, [r7, #4]
 8024670:	f001 f9ff 	bl	8025a72 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024674:	4602      	mov	r2, r0
 8024676:	69fb      	ldr	r3, [r7, #28]
 8024678:	4293      	cmp	r3, r2
 802467a:	d808      	bhi.n	802468e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 802467c:	6878      	ldr	r0, [r7, #4]
 802467e:	f001 f9f8 	bl	8025a72 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024682:	4602      	mov	r2, r0
 8024684:	69fb      	ldr	r3, [r7, #28]
 8024686:	1ad3      	subs	r3, r2, r3
 8024688:	69ba      	ldr	r2, [r7, #24]
 802468a:	429a      	cmp	r2, r3
 802468c:	d901      	bls.n	8024692 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 802468e:	2301      	movs	r3, #1
 8024690:	e000      	b.n	8024694 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8024692:	2300      	movs	r3, #0
 8024694:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8024696:	69ba      	ldr	r2, [r7, #24]
 8024698:	683b      	ldr	r3, [r7, #0]
 802469a:	429a      	cmp	r2, r3
 802469c:	d30f      	bcc.n	80246be <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 802469e:	687b      	ldr	r3, [r7, #4]
 80246a0:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 80246a2:	687b      	ldr	r3, [r7, #4]
 80246a4:	4618      	mov	r0, r3
 80246a6:	f7ff fdd8 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80246aa:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 80246ac:	461a      	mov	r2, r3
 80246ae:	6839      	ldr	r1, [r7, #0]
 80246b0:	4620      	mov	r0, r4
 80246b2:	f001 f9ef 	bl	8025a94 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 80246b6:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 80246b8:	687b      	ldr	r3, [r7, #4]
 80246ba:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 80246bc:	e075      	b.n	80247aa <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 80246be:	4a3d      	ldr	r2, [pc, #244]	; (80247b4 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 80246c0:	6839      	ldr	r1, [r7, #0]
 80246c2:	6878      	ldr	r0, [r7, #4]
 80246c4:	f001 f9f5 	bl	8025ab2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80246c8:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 80246ca:	687b      	ldr	r3, [r7, #4]
 80246cc:	6979      	ldr	r1, [r7, #20]
 80246ce:	4618      	mov	r0, r3
 80246d0:	f001 fa36 	bl	8025b40 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80246d4:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80246d6:	f7ff ffa1 	bl	802461c <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 80246da:	4603      	mov	r3, r0
 80246dc:	2b00      	cmp	r3, #0
 80246de:	d01b      	beq.n	8024718 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 80246e0:	693a      	ldr	r2, [r7, #16]
 80246e2:	69fb      	ldr	r3, [r7, #28]
 80246e4:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80246e6:	687b      	ldr	r3, [r7, #4]
 80246e8:	4618      	mov	r0, r3
 80246ea:	f7ff fdb6 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80246ee:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80246f0:	461a      	mov	r2, r3
 80246f2:	6839      	ldr	r1, [r7, #0]
 80246f4:	4620      	mov	r0, r4
 80246f6:	f001 f9cd 	bl	8025a94 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	681c      	ldr	r4, [r3, #0]
 80246fe:	687b      	ldr	r3, [r7, #4]
 8024700:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8024702:	687b      	ldr	r3, [r7, #4]
 8024704:	4618      	mov	r0, r3
 8024706:	f7ff fda8 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802470a:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 802470c:	693a      	ldr	r2, [r7, #16]
 802470e:	4629      	mov	r1, r5
 8024710:	4620      	mov	r0, r4
 8024712:	f001 fa29 	bl	8025b68 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8024716:	e02e      	b.n	8024776 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8024718:	2300      	movs	r3, #0
 802471a:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 802471c:	693a      	ldr	r2, [r7, #16]
 802471e:	69fb      	ldr	r3, [r7, #28]
 8024720:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8024722:	687b      	ldr	r3, [r7, #4]
 8024724:	4618      	mov	r0, r3
 8024726:	f7ff fd98 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802472a:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 802472c:	461a      	mov	r2, r3
 802472e:	6839      	ldr	r1, [r7, #0]
 8024730:	4620      	mov	r0, r4
 8024732:	f001 f9af 	bl	8025a94 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 8024736:	693a      	ldr	r2, [r7, #16]
 8024738:	69fb      	ldr	r3, [r7, #28]
 802473a:	4413      	add	r3, r2
 802473c:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	681c      	ldr	r4, [r3, #0]
 8024742:	687b      	ldr	r3, [r7, #4]
 8024744:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8024746:	687b      	ldr	r3, [r7, #4]
 8024748:	4618      	mov	r0, r3
 802474a:	f7ff fd86 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802474e:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 8024750:	693a      	ldr	r2, [r7, #16]
 8024752:	4629      	mov	r1, r5
 8024754:	4620      	mov	r0, r4
 8024756:	f001 fa1b 	bl	8025b90 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 802475a:	687b      	ldr	r3, [r7, #4]
 802475c:	681c      	ldr	r4, [r3, #0]
 802475e:	687b      	ldr	r3, [r7, #4]
 8024760:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 8024762:	687b      	ldr	r3, [r7, #4]
 8024764:	4618      	mov	r0, r3
 8024766:	f7ff fd78 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802476a:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 802476c:	461a      	mov	r2, r3
 802476e:	4629      	mov	r1, r5
 8024770:	4620      	mov	r0, r4
 8024772:	f7ff fd7d 	bl	8024270 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8024776:	6878      	ldr	r0, [r7, #4]
 8024778:	687b      	ldr	r3, [r7, #4]
 802477a:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8024780:	687b      	ldr	r3, [r7, #4]
 8024782:	681b      	ldr	r3, [r3, #0]
 8024784:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8024786:	461a      	mov	r2, r3
 8024788:	f7ff fd54 	bl	8024234 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	693a      	ldr	r2, [r7, #16]
 8024790:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8024792:	69fa      	ldr	r2, [r7, #28]
 8024794:	683b      	ldr	r3, [r7, #0]
 8024796:	4413      	add	r3, r2
 8024798:	693a      	ldr	r2, [r7, #16]
 802479a:	441a      	add	r2, r3
 802479c:	687b      	ldr	r3, [r7, #4]
 802479e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80247a0:	693a      	ldr	r2, [r7, #16]
 80247a2:	697b      	ldr	r3, [r7, #20]
 80247a4:	441a      	add	r2, r3
 80247a6:	687b      	ldr	r3, [r7, #4]
 80247a8:	609a      	str	r2, [r3, #8]
    }
 80247aa:	bf00      	nop
 80247ac:	3720      	adds	r7, #32
 80247ae:	46bd      	mov	sp, r7
 80247b0:	bdb0      	pop	{r4, r5, r7, pc}
 80247b2:	bf00      	nop
 80247b4:	08040b54 	.word	0x08040b54

080247b8 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80247b8:	b590      	push	{r4, r7, lr}
 80247ba:	b085      	sub	sp, #20
 80247bc:	af00      	add	r7, sp, #0
 80247be:	6078      	str	r0, [r7, #4]
 80247c0:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80247c2:	687b      	ldr	r3, [r7, #4]
 80247c4:	685a      	ldr	r2, [r3, #4]
 80247c6:	683b      	ldr	r3, [r7, #0]
 80247c8:	1ad3      	subs	r3, r2, r3
 80247ca:	60fb      	str	r3, [r7, #12]
 80247cc:	68fb      	ldr	r3, [r7, #12]
 80247ce:	2b00      	cmp	r3, #0
 80247d0:	d00e      	beq.n	80247f0 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80247d2:	687b      	ldr	r3, [r7, #4]
 80247d4:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80247d6:	687b      	ldr	r3, [r7, #4]
 80247d8:	4618      	mov	r0, r3
 80247da:	f7ff fd3e 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80247de:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80247e0:	461a      	mov	r2, r3
 80247e2:	4621      	mov	r1, r4
 80247e4:	6838      	ldr	r0, [r7, #0]
 80247e6:	f7ff fd43 	bl	8024270 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80247ea:	687b      	ldr	r3, [r7, #4]
 80247ec:	683a      	ldr	r2, [r7, #0]
 80247ee:	605a      	str	r2, [r3, #4]
      }
 80247f0:	bf00      	nop
 80247f2:	3714      	adds	r7, #20
 80247f4:	46bd      	mov	sp, r7
 80247f6:	bd90      	pop	{r4, r7, pc}

080247f8 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80247f8:	b480      	push	{r7}
 80247fa:	b083      	sub	sp, #12
 80247fc:	af00      	add	r7, sp, #0
 80247fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	4618      	mov	r0, r3
 8024804:	370c      	adds	r7, #12
 8024806:	46bd      	mov	sp, r7
 8024808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802480c:	4770      	bx	lr

0802480e <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 802480e:	b480      	push	{r7}
 8024810:	b083      	sub	sp, #12
 8024812:	af00      	add	r7, sp, #0
 8024814:	6078      	str	r0, [r7, #4]
 8024816:	6039      	str	r1, [r7, #0]
      { return false; }
 8024818:	2300      	movs	r3, #0
 802481a:	4618      	mov	r0, r3
 802481c:	370c      	adds	r7, #12
 802481e:	46bd      	mov	sp, r7
 8024820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024824:	4770      	bx	lr

08024826 <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024826:	b580      	push	{r7, lr}
 8024828:	b082      	sub	sp, #8
 802482a:	af00      	add	r7, sp, #0
 802482c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 802482e:	687b      	ldr	r3, [r7, #4]
 8024830:	681b      	ldr	r3, [r3, #0]
 8024832:	4619      	mov	r1, r3
 8024834:	6878      	ldr	r0, [r7, #4]
 8024836:	f7ff ffbf 	bl	80247b8 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 802483a:	bf00      	nop
 802483c:	3708      	adds	r7, #8
 802483e:	46bd      	mov	sp, r7
 8024840:	bd80      	pop	{r7, pc}

08024842 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8024842:	b580      	push	{r7, lr}
 8024844:	b082      	sub	sp, #8
 8024846:	af00      	add	r7, sp, #0
 8024848:	6078      	str	r0, [r7, #4]
 802484a:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 802484c:	461a      	mov	r2, r3
 802484e:	6839      	ldr	r1, [r7, #0]
 8024850:	6878      	ldr	r0, [r7, #4]
 8024852:	f001 f9b6 	bl	8025bc2 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8024856:	bf00      	nop
 8024858:	3708      	adds	r7, #8
 802485a:	46bd      	mov	sp, r7
 802485c:	bd80      	pop	{r7, pc}

0802485e <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 802485e:	b480      	push	{r7}
 8024860:	b083      	sub	sp, #12
 8024862:	af00      	add	r7, sp, #0
 8024864:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	681b      	ldr	r3, [r3, #0]
 802486e:	1ad3      	subs	r3, r2, r3
 8024870:	4618      	mov	r0, r3
 8024872:	370c      	adds	r7, #12
 8024874:	46bd      	mov	sp, r7
 8024876:	f85d 7b04 	ldr.w	r7, [sp], #4
 802487a:	4770      	bx	lr

0802487c <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 802487c:	b580      	push	{r7, lr}
 802487e:	b084      	sub	sp, #16
 8024880:	af00      	add	r7, sp, #0
 8024882:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8024884:	687a      	ldr	r2, [r7, #4]
 8024886:	f107 030c 	add.w	r3, r7, #12
 802488a:	4611      	mov	r1, r2
 802488c:	4618      	mov	r0, r3
 802488e:	f001 f9a4 	bl	8025bda <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8024892:	68fb      	ldr	r3, [r7, #12]
 8024894:	4618      	mov	r0, r3
 8024896:	3710      	adds	r7, #16
 8024898:	46bd      	mov	sp, r7
 802489a:	bd80      	pop	{r7, pc}

0802489c <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 802489c:	b580      	push	{r7, lr}
 802489e:	b084      	sub	sp, #16
 80248a0:	af00      	add	r7, sp, #0
 80248a2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	1d1a      	adds	r2, r3, #4
 80248a8:	f107 030c 	add.w	r3, r7, #12
 80248ac:	4611      	mov	r1, r2
 80248ae:	4618      	mov	r0, r3
 80248b0:	f001 f993 	bl	8025bda <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80248b4:	68fb      	ldr	r3, [r7, #12]
 80248b6:	4618      	mov	r0, r3
 80248b8:	3710      	adds	r7, #16
 80248ba:	46bd      	mov	sp, r7
 80248bc:	bd80      	pop	{r7, pc}

080248be <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 80248be:	b580      	push	{r7, lr}
 80248c0:	b086      	sub	sp, #24
 80248c2:	af00      	add	r7, sp, #0
 80248c4:	60f8      	str	r0, [r7, #12]
 80248c6:	60b9      	str	r1, [r7, #8]
 80248c8:	607a      	str	r2, [r7, #4]
 80248ca:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	68b9      	ldr	r1, [r7, #8]
 80248d0:	4618      	mov	r0, r3
 80248d2:	f001 f935 	bl	8025b40 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80248d6:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 80248d8:	68fb      	ldr	r3, [r7, #12]
 80248da:	4618      	mov	r0, r3
 80248dc:	f7ff fcbd 	bl	802425a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80248e0:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80248e2:	697a      	ldr	r2, [r7, #20]
 80248e4:	6839      	ldr	r1, [r7, #0]
 80248e6:	6878      	ldr	r0, [r7, #4]
 80248e8:	f001 f987 	bl	8025bfa <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 80248ec:	697b      	ldr	r3, [r7, #20]
	}
 80248ee:	4618      	mov	r0, r3
 80248f0:	3718      	adds	r7, #24
 80248f2:	46bd      	mov	sp, r7
 80248f4:	bd80      	pop	{r7, pc}

080248f6 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80248f6:	b580      	push	{r7, lr}
 80248f8:	b084      	sub	sp, #16
 80248fa:	af00      	add	r7, sp, #0
 80248fc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80248fe:	687a      	ldr	r2, [r7, #4]
 8024900:	f107 030c 	add.w	r3, r7, #12
 8024904:	4611      	mov	r1, r2
 8024906:	4618      	mov	r0, r3
 8024908:	f001 f988 	bl	8025c1c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 802490c:	68fb      	ldr	r3, [r7, #12]
 802490e:	4618      	mov	r0, r3
 8024910:	3710      	adds	r7, #16
 8024912:	46bd      	mov	sp, r7
 8024914:	bd80      	pop	{r7, pc}

08024916 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8024916:	b590      	push	{r4, r7, lr}
 8024918:	b085      	sub	sp, #20
 802491a:	af00      	add	r7, sp, #0
 802491c:	60f8      	str	r0, [r7, #12]
 802491e:	60b9      	str	r1, [r7, #8]
 8024920:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8024922:	68f8      	ldr	r0, [r7, #12]
 8024924:	f001 f98a 	bl	8025c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8024928:	4604      	mov	r4, r0
 802492a:	68b8      	ldr	r0, [r7, #8]
 802492c:	f001 f986 	bl	8025c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8024930:	4603      	mov	r3, r0
 8024932:	687a      	ldr	r2, [r7, #4]
 8024934:	4619      	mov	r1, r3
 8024936:	4620      	mov	r0, r4
 8024938:	f001 f98b 	bl	8025c52 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 802493c:	4603      	mov	r3, r0
    }
 802493e:	4618      	mov	r0, r3
 8024940:	3714      	adds	r7, #20
 8024942:	46bd      	mov	sp, r7
 8024944:	bd90      	pop	{r4, r7, pc}

08024946 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8024946:	b580      	push	{r7, lr}
 8024948:	b084      	sub	sp, #16
 802494a:	af00      	add	r7, sp, #0
 802494c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 802494e:	687b      	ldr	r3, [r7, #4]
 8024950:	1d1a      	adds	r2, r3, #4
 8024952:	f107 030c 	add.w	r3, r7, #12
 8024956:	4611      	mov	r1, r2
 8024958:	4618      	mov	r0, r3
 802495a:	f001 f95f 	bl	8025c1c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 802495e:	68fb      	ldr	r3, [r7, #12]
 8024960:	4618      	mov	r0, r3
 8024962:	3710      	adds	r7, #16
 8024964:	46bd      	mov	sp, r7
 8024966:	bd80      	pop	{r7, pc}

08024968 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8024968:	b580      	push	{r7, lr}
 802496a:	b084      	sub	sp, #16
 802496c:	af00      	add	r7, sp, #0
 802496e:	60f8      	str	r0, [r7, #12]
 8024970:	60b9      	str	r1, [r7, #8]
 8024972:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8024974:	68b9      	ldr	r1, [r7, #8]
 8024976:	68f8      	ldr	r0, [r7, #12]
 8024978:	f001 f98c 	bl	8025c94 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 802497c:	bf00      	nop
 802497e:	3710      	adds	r7, #16
 8024980:	46bd      	mov	sp, r7
 8024982:	bd80      	pop	{r7, pc}

08024984 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8024984:	b590      	push	{r4, r7, lr}
 8024986:	b085      	sub	sp, #20
 8024988:	af00      	add	r7, sp, #0
 802498a:	60f8      	str	r0, [r7, #12]
 802498c:	60b9      	str	r1, [r7, #8]
 802498e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8024990:	68f8      	ldr	r0, [r7, #12]
 8024992:	f001 f98c 	bl	8025cae <_ZSt12__miter_baseIPhET_S1_>
 8024996:	4604      	mov	r4, r0
 8024998:	68b8      	ldr	r0, [r7, #8]
 802499a:	f001 f988 	bl	8025cae <_ZSt12__miter_baseIPhET_S1_>
 802499e:	4603      	mov	r3, r0
 80249a0:	687a      	ldr	r2, [r7, #4]
 80249a2:	4619      	mov	r1, r3
 80249a4:	4620      	mov	r0, r4
 80249a6:	f001 f98d 	bl	8025cc4 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80249aa:	4603      	mov	r3, r0
    }
 80249ac:	4618      	mov	r0, r3
 80249ae:	3714      	adds	r7, #20
 80249b0:	46bd      	mov	sp, r7
 80249b2:	bd90      	pop	{r4, r7, pc}

080249b4 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80249b4:	b580      	push	{r7, lr}
 80249b6:	b084      	sub	sp, #16
 80249b8:	af00      	add	r7, sp, #0
 80249ba:	60f8      	str	r0, [r7, #12]
 80249bc:	60b9      	str	r1, [r7, #8]
 80249be:	607a      	str	r2, [r7, #4]
 80249c0:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80249c2:	687a      	ldr	r2, [r7, #4]
 80249c4:	68b9      	ldr	r1, [r7, #8]
 80249c6:	68f8      	ldr	r0, [r7, #12]
 80249c8:	f001 f99f 	bl	8025d0a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 80249cc:	4603      	mov	r3, r0
 80249ce:	4618      	mov	r0, r3
 80249d0:	3710      	adds	r7, #16
 80249d2:	46bd      	mov	sp, r7
 80249d4:	bd80      	pop	{r7, pc}
	...

080249d8 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80249d8:	b580      	push	{r7, lr}
 80249da:	b082      	sub	sp, #8
 80249dc:	af00      	add	r7, sp, #0
 80249de:	6078      	str	r0, [r7, #4]
 80249e0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80249e2:	f001 f9a4 	bl	8025d2e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 80249e6:	4603      	mov	r3, r0
 80249e8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80249ea:	687b      	ldr	r3, [r7, #4]
 80249ec:	68da      	ldr	r2, [r3, #12]
 80249ee:	683b      	ldr	r3, [r7, #0]
 80249f0:	68db      	ldr	r3, [r3, #12]
 80249f2:	1ad3      	subs	r3, r2, r3
 80249f4:	109b      	asrs	r3, r3, #2
 80249f6:	3b01      	subs	r3, #1
 80249f8:	fb01 f303 	mul.w	r3, r1, r3
 80249fc:	687a      	ldr	r2, [r7, #4]
 80249fe:	6811      	ldr	r1, [r2, #0]
 8024a00:	687a      	ldr	r2, [r7, #4]
 8024a02:	6852      	ldr	r2, [r2, #4]
 8024a04:	1a8a      	subs	r2, r1, r2
 8024a06:	1092      	asrs	r2, r2, #2
 8024a08:	4908      	ldr	r1, [pc, #32]	; (8024a2c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8024a0a:	fb01 f202 	mul.w	r2, r1, r2
 8024a0e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8024a10:	683a      	ldr	r2, [r7, #0]
 8024a12:	6891      	ldr	r1, [r2, #8]
 8024a14:	683a      	ldr	r2, [r7, #0]
 8024a16:	6812      	ldr	r2, [r2, #0]
 8024a18:	1a8a      	subs	r2, r1, r2
 8024a1a:	1092      	asrs	r2, r2, #2
 8024a1c:	4903      	ldr	r1, [pc, #12]	; (8024a2c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8024a1e:	fb01 f202 	mul.w	r2, r1, r2
 8024a22:	4413      	add	r3, r2
      }
 8024a24:	4618      	mov	r0, r3
 8024a26:	3708      	adds	r7, #8
 8024a28:	46bd      	mov	sp, r7
 8024a2a:	bd80      	pop	{r7, pc}
 8024a2c:	cccccccd 	.word	0xcccccccd

08024a30 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8024a30:	b580      	push	{r7, lr}
 8024a32:	b082      	sub	sp, #8
 8024a34:	af00      	add	r7, sp, #0
 8024a36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8024a38:	687b      	ldr	r3, [r7, #4]
 8024a3a:	f103 0218 	add.w	r2, r3, #24
 8024a3e:	687b      	ldr	r3, [r7, #4]
 8024a40:	3308      	adds	r3, #8
 8024a42:	4619      	mov	r1, r3
 8024a44:	4610      	mov	r0, r2
 8024a46:	f001 f97a 	bl	8025d3e <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8024a4a:	4603      	mov	r3, r0
 8024a4c:	4618      	mov	r0, r3
 8024a4e:	3708      	adds	r7, #8
 8024a50:	46bd      	mov	sp, r7
 8024a52:	bd80      	pop	{r7, pc}

08024a54 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8024a54:	b480      	push	{r7}
 8024a56:	b083      	sub	sp, #12
 8024a58:	af00      	add	r7, sp, #0
 8024a5a:	6078      	str	r0, [r7, #4]
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	4618      	mov	r0, r3
 8024a62:	370c      	adds	r7, #12
 8024a64:	46bd      	mov	sp, r7
 8024a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a6a:	4770      	bx	lr

08024a6c <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8024a6c:	b590      	push	{r4, r7, lr}
 8024a6e:	b083      	sub	sp, #12
 8024a70:	af00      	add	r7, sp, #0
 8024a72:	6078      	str	r0, [r7, #4]
 8024a74:	6878      	ldr	r0, [r7, #4]
 8024a76:	f7ff ffed 	bl	8024a54 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8024a7a:	4604      	mov	r4, r0
 8024a7c:	6878      	ldr	r0, [r7, #4]
 8024a7e:	f001 f982 	bl	8025d86 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8024a82:	4602      	mov	r2, r0
 8024a84:	4613      	mov	r3, r2
 8024a86:	009b      	lsls	r3, r3, #2
 8024a88:	4413      	add	r3, r2
 8024a8a:	009b      	lsls	r3, r3, #2
 8024a8c:	4423      	add	r3, r4
 8024a8e:	4618      	mov	r0, r3
 8024a90:	370c      	adds	r7, #12
 8024a92:	46bd      	mov	sp, r7
 8024a94:	bd90      	pop	{r4, r7, pc}

08024a96 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8024a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a98:	b09f      	sub	sp, #124	; 0x7c
 8024a9a:	af02      	add	r7, sp, #8
 8024a9c:	60f8      	str	r0, [r7, #12]
 8024a9e:	60b9      	str	r1, [r7, #8]
 8024aa0:	607a      	str	r2, [r7, #4]
 8024aa2:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 8024aa4:	68bb      	ldr	r3, [r7, #8]
 8024aa6:	6879      	ldr	r1, [r7, #4]
 8024aa8:	4618      	mov	r0, r3
 8024aaa:	f001 f978 	bl	8025d9e <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024aae:	4603      	mov	r3, r0
 8024ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8024ab2:	68f8      	ldr	r0, [r7, #12]
 8024ab4:	f7ff f820 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024ab8:	4602      	mov	r2, r0
 8024aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024abc:	4293      	cmp	r3, r2
 8024abe:	bf8c      	ite	hi
 8024ac0:	2301      	movhi	r3, #1
 8024ac2:	2300      	movls	r3, #0
 8024ac4:	b2db      	uxtb	r3, r3
 8024ac6:	2b00      	cmp	r3, #0
 8024ac8:	d031      	beq.n	8024b2e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 8024aca:	68bb      	ldr	r3, [r7, #8]
 8024acc:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8024ace:	68f8      	ldr	r0, [r7, #12]
 8024ad0:	f7ff f812 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024ad4:	4602      	mov	r2, r0
 8024ad6:	f107 0314 	add.w	r3, r7, #20
 8024ada:	4611      	mov	r1, r2
 8024adc:	4618      	mov	r0, r3
 8024ade:	f001 f972 	bl	8025dc6 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8024ae2:	68bc      	ldr	r4, [r7, #8]
 8024ae4:	697d      	ldr	r5, [r7, #20]
 8024ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8024aea:	68f9      	ldr	r1, [r7, #12]
 8024aec:	4618      	mov	r0, r3
 8024aee:	f000 fa66 	bl	8024fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024af2:	f107 0018 	add.w	r0, r7, #24
 8024af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8024afa:	462a      	mov	r2, r5
 8024afc:	4621      	mov	r1, r4
 8024afe:	f001 f975 	bl	8025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8024b02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8024b06:	68f9      	ldr	r1, [r7, #12]
 8024b08:	4618      	mov	r0, r3
 8024b0a:	f000 fa67 	bl	8024fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8024b0e:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8024b10:	f107 0308 	add.w	r3, r7, #8
 8024b14:	4618      	mov	r0, r3
 8024b16:	f001 f989 	bl	8025e2c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8024b1a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8024b1e:	f88d 6000 	strb.w	r6, [sp]
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	4622      	mov	r2, r4
 8024b26:	68f8      	ldr	r0, [r7, #12]
 8024b28:	f001 f98b 	bl	8025e42 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	}
 8024b2c:	e014      	b.n	8024b58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8024b2e:	68bc      	ldr	r4, [r7, #8]
 8024b30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8024b34:	68f9      	ldr	r1, [r7, #12]
 8024b36:	4618      	mov	r0, r3
 8024b38:	f000 fa41 	bl	8024fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024b3c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8024b40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8024b44:	687a      	ldr	r2, [r7, #4]
 8024b46:	4621      	mov	r1, r4
 8024b48:	f001 f950 	bl	8025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8024b4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024b50:	4619      	mov	r1, r3
 8024b52:	68f8      	ldr	r0, [r7, #12]
 8024b54:	f001 f9f2 	bl	8025f3c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8024b58:	bf00      	nop
 8024b5a:	3774      	adds	r7, #116	; 0x74
 8024b5c:	46bd      	mov	sp, r7
 8024b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024b60 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8024b60:	b580      	push	{r7, lr}
 8024b62:	b084      	sub	sp, #16
 8024b64:	af00      	add	r7, sp, #0
 8024b66:	60f8      	str	r0, [r7, #12]
 8024b68:	60b9      	str	r1, [r7, #8]
 8024b6a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8024b6c:	6878      	ldr	r0, [r7, #4]
 8024b6e:	f001 fa18 	bl	8025fa2 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8024b72:	4603      	mov	r3, r0
 8024b74:	461a      	mov	r2, r3
 8024b76:	68b9      	ldr	r1, [r7, #8]
 8024b78:	68f8      	ldr	r0, [r7, #12]
 8024b7a:	f001 fa1d 	bl	8025fb8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8024b7e:	bf00      	nop
 8024b80:	3710      	adds	r7, #16
 8024b82:	46bd      	mov	sp, r7
 8024b84:	bd80      	pop	{r7, pc}
	...

08024b88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024b88:	b5b0      	push	{r4, r5, r7, lr}
 8024b8a:	b082      	sub	sp, #8
 8024b8c:	af00      	add	r7, sp, #0
 8024b8e:	6078      	str	r0, [r7, #4]
 8024b90:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8024b92:	6878      	ldr	r0, [r7, #4]
 8024b94:	f7fe ffb0 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024b98:	4604      	mov	r4, r0
 8024b9a:	6878      	ldr	r0, [r7, #4]
 8024b9c:	f001 fa25 	bl	8025fea <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8024ba0:	4603      	mov	r3, r0
 8024ba2:	429c      	cmp	r4, r3
 8024ba4:	bf0c      	ite	eq
 8024ba6:	2301      	moveq	r3, #1
 8024ba8:	2300      	movne	r3, #0
 8024baa:	b2db      	uxtb	r3, r3
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d002      	beq.n	8024bb6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8024bb0:	4817      	ldr	r0, [pc, #92]	; (8024c10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8024bb2:	f01a f9a1 	bl	803eef8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8024bb6:	2101      	movs	r1, #1
 8024bb8:	6878      	ldr	r0, [r7, #4]
 8024bba:	f001 fa27 	bl	802600c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8024bbe:	687a      	ldr	r2, [r7, #4]
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	695b      	ldr	r3, [r3, #20]
 8024bc4:	1f1c      	subs	r4, r3, #4
 8024bc6:	4610      	mov	r0, r2
 8024bc8:	f001 fa38 	bl	802603c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024bcc:	4603      	mov	r3, r0
 8024bce:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8024bd0:	687b      	ldr	r3, [r7, #4]
 8024bd2:	f103 0208 	add.w	r2, r3, #8
 8024bd6:	687b      	ldr	r3, [r7, #4]
 8024bd8:	695b      	ldr	r3, [r3, #20]
 8024bda:	3b04      	subs	r3, #4
 8024bdc:	4619      	mov	r1, r3
 8024bde:	4610      	mov	r0, r2
 8024be0:	f001 fa3e 	bl	8026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	691b      	ldr	r3, [r3, #16]
 8024be8:	f1a3 0214 	sub.w	r2, r3, #20
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8024bf0:	687c      	ldr	r4, [r7, #4]
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	689d      	ldr	r5, [r3, #8]
 8024bf6:	6838      	ldr	r0, [r7, #0]
 8024bf8:	f001 f9d3 	bl	8025fa2 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8024bfc:	4603      	mov	r3, r0
 8024bfe:	461a      	mov	r2, r3
 8024c00:	4629      	mov	r1, r5
 8024c02:	4620      	mov	r0, r4
 8024c04:	f7ff ffac 	bl	8024b60 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
      }
 8024c08:	bf00      	nop
 8024c0a:	3708      	adds	r7, #8
 8024c0c:	46bd      	mov	sp, r7
 8024c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8024c10:	08040b24 	.word	0x08040b24

08024c14 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024c14:	b580      	push	{r7, lr}
 8024c16:	b082      	sub	sp, #8
 8024c18:	af00      	add	r7, sp, #0
 8024c1a:	6078      	str	r0, [r7, #4]
 8024c1c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8024c1e:	f001 fa4e 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8024c22:	4603      	mov	r3, r0
 8024c24:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8024c26:	687b      	ldr	r3, [r7, #4]
 8024c28:	68da      	ldr	r2, [r3, #12]
 8024c2a:	683b      	ldr	r3, [r7, #0]
 8024c2c:	68db      	ldr	r3, [r3, #12]
 8024c2e:	1ad3      	subs	r3, r2, r3
 8024c30:	109b      	asrs	r3, r3, #2
 8024c32:	3b01      	subs	r3, #1
 8024c34:	fb01 f303 	mul.w	r3, r1, r3
 8024c38:	687a      	ldr	r2, [r7, #4]
 8024c3a:	6811      	ldr	r1, [r2, #0]
 8024c3c:	687a      	ldr	r2, [r7, #4]
 8024c3e:	6852      	ldr	r2, [r2, #4]
 8024c40:	1a8a      	subs	r2, r1, r2
 8024c42:	1092      	asrs	r2, r2, #2
 8024c44:	4908      	ldr	r1, [pc, #32]	; (8024c68 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024c46:	fb01 f202 	mul.w	r2, r1, r2
 8024c4a:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8024c4c:	683a      	ldr	r2, [r7, #0]
 8024c4e:	6891      	ldr	r1, [r2, #8]
 8024c50:	683a      	ldr	r2, [r7, #0]
 8024c52:	6812      	ldr	r2, [r2, #0]
 8024c54:	1a8a      	subs	r2, r1, r2
 8024c56:	1092      	asrs	r2, r2, #2
 8024c58:	4903      	ldr	r1, [pc, #12]	; (8024c68 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024c5a:	fb01 f202 	mul.w	r2, r1, r2
 8024c5e:	4413      	add	r3, r2
      }
 8024c60:	4618      	mov	r0, r3
 8024c62:	3708      	adds	r7, #8
 8024c64:	46bd      	mov	sp, r7
 8024c66:	bd80      	pop	{r7, pc}
 8024c68:	cccccccd 	.word	0xcccccccd

08024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024c6c:	b480      	push	{r7}
 8024c6e:	b083      	sub	sp, #12
 8024c70:	af00      	add	r7, sp, #0
 8024c72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	4618      	mov	r0, r3
 8024c78:	370c      	adds	r7, #12
 8024c7a:	46bd      	mov	sp, r7
 8024c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c80:	4770      	bx	lr

08024c82 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024c82:	b580      	push	{r7, lr}
 8024c84:	b082      	sub	sp, #8
 8024c86:	af00      	add	r7, sp, #0
 8024c88:	6078      	str	r0, [r7, #4]
 8024c8a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024c8c:	6839      	ldr	r1, [r7, #0]
 8024c8e:	6878      	ldr	r0, [r7, #4]
 8024c90:	f001 fa1d 	bl	80260ce <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
	}
 8024c94:	bf00      	nop
 8024c96:	3708      	adds	r7, #8
 8024c98:	46bd      	mov	sp, r7
 8024c9a:	bd80      	pop	{r7, pc}

08024c9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8024c9c:	b580      	push	{r7, lr}
 8024c9e:	b082      	sub	sp, #8
 8024ca0:	af00      	add	r7, sp, #0
 8024ca2:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8024ca4:	687a      	ldr	r2, [r7, #4]
 8024ca6:	687b      	ldr	r3, [r7, #4]
 8024ca8:	69db      	ldr	r3, [r3, #28]
 8024caa:	4619      	mov	r1, r3
 8024cac:	4610      	mov	r0, r2
 8024cae:	f001 f9f3 	bl	8026098 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8024cb2:	687b      	ldr	r3, [r7, #4]
 8024cb4:	f103 0218 	add.w	r2, r3, #24
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024cbc:	3b04      	subs	r3, #4
 8024cbe:	4619      	mov	r1, r3
 8024cc0:	4610      	mov	r0, r2
 8024cc2:	f001 f9cd 	bl	8026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8024cc6:	687b      	ldr	r3, [r7, #4]
 8024cc8:	6a1b      	ldr	r3, [r3, #32]
 8024cca:	f1a3 0214 	sub.w	r2, r3, #20
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024cd2:	687b      	ldr	r3, [r7, #4]
 8024cd4:	4618      	mov	r0, r3
 8024cd6:	f7ff ffc9 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024cda:	4602      	mov	r2, r0
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	699b      	ldr	r3, [r3, #24]
 8024ce0:	4619      	mov	r1, r3
 8024ce2:	4610      	mov	r0, r2
 8024ce4:	f7ff ffcd 	bl	8024c82 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
    }
 8024ce8:	bf00      	nop
 8024cea:	3708      	adds	r7, #8
 8024cec:	46bd      	mov	sp, r7
 8024cee:	bd80      	pop	{r7, pc}

08024cf0 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024cf0:	b480      	push	{r7}
 8024cf2:	b083      	sub	sp, #12
 8024cf4:	af00      	add	r7, sp, #0
 8024cf6:	6078      	str	r0, [r7, #4]
 8024cf8:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024cfa:	687b      	ldr	r3, [r7, #4]
 8024cfc:	681a      	ldr	r2, [r3, #0]
 8024cfe:	683b      	ldr	r3, [r7, #0]
 8024d00:	681b      	ldr	r3, [r3, #0]
 8024d02:	429a      	cmp	r2, r3
 8024d04:	bf0c      	ite	eq
 8024d06:	2301      	moveq	r3, #1
 8024d08:	2300      	movne	r3, #0
 8024d0a:	b2db      	uxtb	r3, r3
 8024d0c:	4618      	mov	r0, r3
 8024d0e:	370c      	adds	r7, #12
 8024d10:	46bd      	mov	sp, r7
 8024d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d16:	4770      	bx	lr

08024d18 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8024d18:	b580      	push	{r7, lr}
 8024d1a:	b086      	sub	sp, #24
 8024d1c:	af00      	add	r7, sp, #0
 8024d1e:	6078      	str	r0, [r7, #4]
 8024d20:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8024d22:	f107 0308 	add.w	r3, r7, #8
 8024d26:	683a      	ldr	r2, [r7, #0]
 8024d28:	6879      	ldr	r1, [r7, #4]
 8024d2a:	4618      	mov	r0, r3
 8024d2c:	f001 f9da 	bl	80260e4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8024d30:	f107 0308 	add.w	r3, r7, #8
 8024d34:	4618      	mov	r0, r3
 8024d36:	f001 f9e8 	bl	802610a <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8024d3a:	4603      	mov	r3, r0
 8024d3c:	4618      	mov	r0, r3
 8024d3e:	3718      	adds	r7, #24
 8024d40:	46bd      	mov	sp, r7
 8024d42:	bd80      	pop	{r7, pc}

08024d44 <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 8024d44:	b580      	push	{r7, lr}
 8024d46:	b082      	sub	sp, #8
 8024d48:	af00      	add	r7, sp, #0
 8024d4a:	6078      	str	r0, [r7, #4]
 8024d4c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	6a1b      	ldr	r3, [r3, #32]
 8024d56:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8024d58:	429a      	cmp	r2, r3
 8024d5a:	d00c      	beq.n	8024d76 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8024d5c:	6878      	ldr	r0, [r7, #4]
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	699b      	ldr	r3, [r3, #24]
 8024d62:	683a      	ldr	r2, [r7, #0]
 8024d64:	4619      	mov	r1, r3
 8024d66:	f001 f9dc 	bl	8026122 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	699b      	ldr	r3, [r3, #24]
 8024d6e:	1d1a      	adds	r2, r3, #4
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	619a      	str	r2, [r3, #24]
      }
 8024d74:	e003      	b.n	8024d7e <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 8024d76:	6839      	ldr	r1, [r7, #0]
 8024d78:	6878      	ldr	r0, [r7, #4]
 8024d7a:	f001 f9e5 	bl	8026148 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 8024d7e:	bf00      	nop
 8024d80:	3708      	adds	r7, #8
 8024d82:	46bd      	mov	sp, r7
 8024d84:	bd80      	pop	{r7, pc}

08024d86 <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8024d86:	b580      	push	{r7, lr}
 8024d88:	b086      	sub	sp, #24
 8024d8a:	af00      	add	r7, sp, #0
 8024d8c:	6078      	str	r0, [r7, #4]
	return *begin();
 8024d8e:	f107 0308 	add.w	r3, r7, #8
 8024d92:	6879      	ldr	r1, [r7, #4]
 8024d94:	4618      	mov	r0, r3
 8024d96:	f001 fa1b 	bl	80261d0 <_ZNKSt5dequeIjSaIjEE5beginEv>
 8024d9a:	f107 0308 	add.w	r3, r7, #8
 8024d9e:	4618      	mov	r0, r3
 8024da0:	f001 fa25 	bl	80261ee <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 8024da4:	4603      	mov	r3, r0
      }
 8024da6:	4618      	mov	r0, r3
 8024da8:	3718      	adds	r7, #24
 8024daa:	46bd      	mov	sp, r7
 8024dac:	bd80      	pop	{r7, pc}

08024dae <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8024dae:	b580      	push	{r7, lr}
 8024db0:	b082      	sub	sp, #8
 8024db2:	af00      	add	r7, sp, #0
 8024db4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	f103 0218 	add.w	r2, r3, #24
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	3308      	adds	r3, #8
 8024dc0:	4619      	mov	r1, r3
 8024dc2:	4610      	mov	r0, r2
 8024dc4:	f001 fa1f 	bl	8026206 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 8024dc8:	4603      	mov	r3, r0
 8024dca:	4618      	mov	r0, r3
 8024dcc:	3708      	adds	r7, #8
 8024dce:	46bd      	mov	sp, r7
 8024dd0:	bd80      	pop	{r7, pc}

08024dd2 <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8024dd2:	b580      	push	{r7, lr}
 8024dd4:	b082      	sub	sp, #8
 8024dd6:	af00      	add	r7, sp, #0
 8024dd8:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8024dda:	687b      	ldr	r3, [r7, #4]
 8024ddc:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8024dde:	687b      	ldr	r3, [r7, #4]
 8024de0:	691b      	ldr	r3, [r3, #16]
 8024de2:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8024de4:	429a      	cmp	r2, r3
 8024de6:	d010      	beq.n	8024e0a <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024de8:	687b      	ldr	r3, [r7, #4]
 8024dea:	4618      	mov	r0, r3
 8024dec:	f000 f98b 	bl	8025106 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024df0:	4602      	mov	r2, r0
 8024df2:	687b      	ldr	r3, [r7, #4]
 8024df4:	689b      	ldr	r3, [r3, #8]
 8024df6:	4619      	mov	r1, r3
 8024df8:	4610      	mov	r0, r2
 8024dfa:	f001 fa18 	bl	802622e <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8024dfe:	687b      	ldr	r3, [r7, #4]
 8024e00:	689b      	ldr	r3, [r3, #8]
 8024e02:	1d1a      	adds	r2, r3, #4
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	609a      	str	r2, [r3, #8]
      }
 8024e08:	e002      	b.n	8024e10 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8024e0a:	6878      	ldr	r0, [r7, #4]
 8024e0c:	f001 fa1c 	bl	8026248 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 8024e10:	bf00      	nop
 8024e12:	3708      	adds	r7, #8
 8024e14:	46bd      	mov	sp, r7
 8024e16:	bd80      	pop	{r7, pc}

08024e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8024e18:	b580      	push	{r7, lr}
 8024e1a:	b082      	sub	sp, #8
 8024e1c:	af00      	add	r7, sp, #0
 8024e1e:	6078      	str	r0, [r7, #4]
 8024e20:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024e22:	683b      	ldr	r3, [r7, #0]
 8024e24:	3308      	adds	r3, #8
 8024e26:	4619      	mov	r1, r3
 8024e28:	6878      	ldr	r0, [r7, #4]
 8024e2a:	f001 fa35 	bl	8026298 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 8024e2e:	6878      	ldr	r0, [r7, #4]
 8024e30:	3708      	adds	r7, #8
 8024e32:	46bd      	mov	sp, r7
 8024e34:	bd80      	pop	{r7, pc}

08024e36 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024e36:	b480      	push	{r7}
 8024e38:	b083      	sub	sp, #12
 8024e3a:	af00      	add	r7, sp, #0
 8024e3c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024e3e:	687b      	ldr	r3, [r7, #4]
 8024e40:	681b      	ldr	r3, [r3, #0]
 8024e42:	4618      	mov	r0, r3
 8024e44:	370c      	adds	r7, #12
 8024e46:	46bd      	mov	sp, r7
 8024e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e4c:	4770      	bx	lr

08024e4e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024e4e:	b580      	push	{r7, lr}
 8024e50:	b082      	sub	sp, #8
 8024e52:	af00      	add	r7, sp, #0
 8024e54:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024e56:	6878      	ldr	r0, [r7, #4]
 8024e58:	f001 fa3a 	bl	80262d0 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8024e5c:	687b      	ldr	r3, [r7, #4]
 8024e5e:	4618      	mov	r0, r3
 8024e60:	f001 fa42 	bl	80262e8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8024e64:	687b      	ldr	r3, [r7, #4]
 8024e66:	4618      	mov	r0, r3
 8024e68:	3708      	adds	r7, #8
 8024e6a:	46bd      	mov	sp, r7
 8024e6c:	bd80      	pop	{r7, pc}

08024e6e <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024e6e:	b580      	push	{r7, lr}
 8024e70:	b082      	sub	sp, #8
 8024e72:	af00      	add	r7, sp, #0
 8024e74:	6078      	str	r0, [r7, #4]
 8024e76:	6878      	ldr	r0, [r7, #4]
 8024e78:	f001 fa4f 	bl	802631a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8024e7c:	687b      	ldr	r3, [r7, #4]
 8024e7e:	4618      	mov	r0, r3
 8024e80:	3708      	adds	r7, #8
 8024e82:	46bd      	mov	sp, r7
 8024e84:	bd80      	pop	{r7, pc}

08024e86 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024e86:	b590      	push	{r4, r7, lr}
 8024e88:	b089      	sub	sp, #36	; 0x24
 8024e8a:	af00      	add	r7, sp, #0
 8024e8c:	6078      	str	r0, [r7, #4]
 8024e8e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024e90:	2014      	movs	r0, #20
 8024e92:	f7fc f824 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8024e96:	4602      	mov	r2, r0
 8024e98:	683b      	ldr	r3, [r7, #0]
 8024e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8024e9e:	3301      	adds	r3, #1
 8024ea0:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024ea2:	2308      	movs	r3, #8
 8024ea4:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024ea6:	69fb      	ldr	r3, [r7, #28]
 8024ea8:	3302      	adds	r3, #2
 8024eaa:	613b      	str	r3, [r7, #16]
 8024eac:	f107 0210 	add.w	r2, r7, #16
 8024eb0:	f107 030c 	add.w	r3, r7, #12
 8024eb4:	4611      	mov	r1, r2
 8024eb6:	4618      	mov	r0, r3
 8024eb8:	f000 fa39 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 8024ebc:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024ebe:	681a      	ldr	r2, [r3, #0]
 8024ec0:	687b      	ldr	r3, [r7, #4]
 8024ec2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	685b      	ldr	r3, [r3, #4]
 8024ec8:	4619      	mov	r1, r3
 8024eca:	6878      	ldr	r0, [r7, #4]
 8024ecc:	f001 fa30 	bl	8026330 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8024ed0:	4602      	mov	r2, r0
 8024ed2:	687b      	ldr	r3, [r7, #4]
 8024ed4:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	6859      	ldr	r1, [r3, #4]
 8024ede:	69fb      	ldr	r3, [r7, #28]
 8024ee0:	1acb      	subs	r3, r1, r3
 8024ee2:	085b      	lsrs	r3, r3, #1
 8024ee4:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024ee6:	4413      	add	r3, r2
 8024ee8:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024eea:	69fb      	ldr	r3, [r7, #28]
 8024eec:	009b      	lsls	r3, r3, #2
 8024eee:	69ba      	ldr	r2, [r7, #24]
 8024ef0:	4413      	add	r3, r2
 8024ef2:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024ef4:	697a      	ldr	r2, [r7, #20]
 8024ef6:	69b9      	ldr	r1, [r7, #24]
 8024ef8:	6878      	ldr	r0, [r7, #4]
 8024efa:	f001 fa36 	bl	802636a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024efe:	687b      	ldr	r3, [r7, #4]
 8024f00:	3308      	adds	r3, #8
 8024f02:	69b9      	ldr	r1, [r7, #24]
 8024f04:	4618      	mov	r0, r3
 8024f06:	f001 f8ab 	bl	8026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024f0a:	687b      	ldr	r3, [r7, #4]
 8024f0c:	f103 0218 	add.w	r2, r3, #24
 8024f10:	697b      	ldr	r3, [r7, #20]
 8024f12:	3b04      	subs	r3, #4
 8024f14:	4619      	mov	r1, r3
 8024f16:	4610      	mov	r0, r2
 8024f18:	f001 f8a2 	bl	8026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	68da      	ldr	r2, [r3, #12]
 8024f20:	687b      	ldr	r3, [r7, #4]
 8024f22:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024f24:	687b      	ldr	r3, [r7, #4]
 8024f26:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024f28:	2014      	movs	r0, #20
 8024f2a:	f7fb ffd8 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8024f2e:	4602      	mov	r2, r0
 8024f30:	683b      	ldr	r3, [r7, #0]
 8024f32:	fbb3 f1f2 	udiv	r1, r3, r2
 8024f36:	fb01 f202 	mul.w	r2, r1, r2
 8024f3a:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8024f3c:	4613      	mov	r3, r2
 8024f3e:	009b      	lsls	r3, r3, #2
 8024f40:	4413      	add	r3, r2
 8024f42:	009b      	lsls	r3, r3, #2
 8024f44:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024f46:	687b      	ldr	r3, [r7, #4]
 8024f48:	619a      	str	r2, [r3, #24]
    }
 8024f4a:	bf00      	nop
 8024f4c:	3724      	adds	r7, #36	; 0x24
 8024f4e:	46bd      	mov	sp, r7
 8024f50:	bd90      	pop	{r4, r7, pc}

08024f52 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8024f52:	b580      	push	{r7, lr}
 8024f54:	b086      	sub	sp, #24
 8024f56:	af00      	add	r7, sp, #0
 8024f58:	60f8      	str	r0, [r7, #12]
 8024f5a:	60b9      	str	r1, [r7, #8]
 8024f5c:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024f5e:	68bb      	ldr	r3, [r7, #8]
 8024f60:	617b      	str	r3, [r7, #20]
 8024f62:	697a      	ldr	r2, [r7, #20]
 8024f64:	687b      	ldr	r3, [r7, #4]
 8024f66:	429a      	cmp	r2, r3
 8024f68:	d209      	bcs.n	8024f7e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8024f6a:	697b      	ldr	r3, [r7, #20]
 8024f6c:	681b      	ldr	r3, [r3, #0]
 8024f6e:	4619      	mov	r1, r3
 8024f70:	68f8      	ldr	r0, [r7, #12]
 8024f72:	f001 f891 	bl	8026098 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024f76:	697b      	ldr	r3, [r7, #20]
 8024f78:	3304      	adds	r3, #4
 8024f7a:	617b      	str	r3, [r7, #20]
 8024f7c:	e7f1      	b.n	8024f62 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8024f7e:	bf00      	nop
 8024f80:	3718      	adds	r7, #24
 8024f82:	46bd      	mov	sp, r7
 8024f84:	bd80      	pop	{r7, pc}

08024f86 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024f86:	b580      	push	{r7, lr}
 8024f88:	b086      	sub	sp, #24
 8024f8a:	af00      	add	r7, sp, #0
 8024f8c:	60f8      	str	r0, [r7, #12]
 8024f8e:	60b9      	str	r1, [r7, #8]
 8024f90:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024f92:	f107 0314 	add.w	r3, r7, #20
 8024f96:	68f9      	ldr	r1, [r7, #12]
 8024f98:	4618      	mov	r0, r3
 8024f9a:	f001 fa00 	bl	802639e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024f9e:	f107 0314 	add.w	r3, r7, #20
 8024fa2:	687a      	ldr	r2, [r7, #4]
 8024fa4:	68b9      	ldr	r1, [r7, #8]
 8024fa6:	4618      	mov	r0, r3
 8024fa8:	f001 fa16 	bl	80263d8 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024fac:	f107 0314 	add.w	r3, r7, #20
 8024fb0:	4618      	mov	r0, r3
 8024fb2:	f001 fa05 	bl	80263c0 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 8024fb6:	bf00      	nop
 8024fb8:	3718      	adds	r7, #24
 8024fba:	46bd      	mov	sp, r7
 8024fbc:	bd80      	pop	{r7, pc}

08024fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024fbe:	b580      	push	{r7, lr}
 8024fc0:	b082      	sub	sp, #8
 8024fc2:	af00      	add	r7, sp, #0
 8024fc4:	6078      	str	r0, [r7, #4]
 8024fc6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024fc8:	683b      	ldr	r3, [r7, #0]
 8024fca:	3308      	adds	r3, #8
 8024fcc:	4619      	mov	r1, r3
 8024fce:	6878      	ldr	r0, [r7, #4]
 8024fd0:	f000 f813 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024fd4:	6878      	ldr	r0, [r7, #4]
 8024fd6:	3708      	adds	r7, #8
 8024fd8:	46bd      	mov	sp, r7
 8024fda:	bd80      	pop	{r7, pc}

08024fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8024fdc:	b580      	push	{r7, lr}
 8024fde:	b082      	sub	sp, #8
 8024fe0:	af00      	add	r7, sp, #0
 8024fe2:	6078      	str	r0, [r7, #4]
 8024fe4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8024fe6:	683b      	ldr	r3, [r7, #0]
 8024fe8:	3318      	adds	r3, #24
 8024fea:	4619      	mov	r1, r3
 8024fec:	6878      	ldr	r0, [r7, #4]
 8024fee:	f000 f804 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024ff2:	6878      	ldr	r0, [r7, #4]
 8024ff4:	3708      	adds	r7, #8
 8024ff6:	46bd      	mov	sp, r7
 8024ff8:	bd80      	pop	{r7, pc}

08024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024ffa:	b480      	push	{r7}
 8024ffc:	b083      	sub	sp, #12
 8024ffe:	af00      	add	r7, sp, #0
 8025000:	6078      	str	r0, [r7, #4]
 8025002:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025004:	683b      	ldr	r3, [r7, #0]
 8025006:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802500c:	683b      	ldr	r3, [r7, #0]
 802500e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	605a      	str	r2, [r3, #4]
 8025014:	683b      	ldr	r3, [r7, #0]
 8025016:	689a      	ldr	r2, [r3, #8]
 8025018:	687b      	ldr	r3, [r7, #4]
 802501a:	609a      	str	r2, [r3, #8]
 802501c:	683b      	ldr	r3, [r7, #0]
 802501e:	68da      	ldr	r2, [r3, #12]
 8025020:	687b      	ldr	r3, [r7, #4]
 8025022:	60da      	str	r2, [r3, #12]
 8025024:	687b      	ldr	r3, [r7, #4]
 8025026:	4618      	mov	r0, r3
 8025028:	370c      	adds	r7, #12
 802502a:	46bd      	mov	sp, r7
 802502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025030:	4770      	bx	lr

08025032 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 8025032:	b480      	push	{r7}
 8025034:	b08d      	sub	sp, #52	; 0x34
 8025036:	af00      	add	r7, sp, #0
 8025038:	60f8      	str	r0, [r7, #12]
 802503a:	60b9      	str	r1, [r7, #8]
 802503c:	607a      	str	r2, [r7, #4]
 802503e:	603b      	str	r3, [r7, #0]
      }
 8025040:	bf00      	nop
 8025042:	3734      	adds	r7, #52	; 0x34
 8025044:	46bd      	mov	sp, r7
 8025046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802504a:	4770      	bx	lr

0802504c <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 802504c:	b580      	push	{r7, lr}
 802504e:	b082      	sub	sp, #8
 8025050:	af00      	add	r7, sp, #0
 8025052:	6078      	str	r0, [r7, #4]
 8025054:	6878      	ldr	r0, [r7, #4]
 8025056:	f001 f9de 	bl	8026416 <_ZNSaIjED1Ev>
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	4618      	mov	r0, r3
 802505e:	3708      	adds	r7, #8
 8025060:	46bd      	mov	sp, r7
 8025062:	bd80      	pop	{r7, pc}

08025064 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 8025064:	b580      	push	{r7, lr}
 8025066:	b082      	sub	sp, #8
 8025068:	af00      	add	r7, sp, #0
 802506a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	4618      	mov	r0, r3
 8025070:	f001 f9c1 	bl	80263f6 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8025074:	2100      	movs	r1, #0
 8025076:	6878      	ldr	r0, [r7, #4]
 8025078:	f001 f9d9 	bl	802642e <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 802507c:	687b      	ldr	r3, [r7, #4]
 802507e:	4618      	mov	r0, r3
 8025080:	3708      	adds	r7, #8
 8025082:	46bd      	mov	sp, r7
 8025084:	bd80      	pop	{r7, pc}

08025086 <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8025086:	b580      	push	{r7, lr}
 8025088:	b082      	sub	sp, #8
 802508a:	af00      	add	r7, sp, #0
 802508c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 802508e:	687b      	ldr	r3, [r7, #4]
 8025090:	681b      	ldr	r3, [r3, #0]
 8025092:	2b00      	cmp	r3, #0
 8025094:	d010      	beq.n	80250b8 <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802509a:	687b      	ldr	r3, [r7, #4]
 802509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802509e:	3304      	adds	r3, #4
 80250a0:	461a      	mov	r2, r3
 80250a2:	6878      	ldr	r0, [r7, #4]
 80250a4:	f001 fa26 	bl	80264f4 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80250a8:	687b      	ldr	r3, [r7, #4]
 80250aa:	6819      	ldr	r1, [r3, #0]
 80250ac:	687b      	ldr	r3, [r7, #4]
 80250ae:	685b      	ldr	r3, [r3, #4]
 80250b0:	461a      	mov	r2, r3
 80250b2:	6878      	ldr	r0, [r7, #4]
 80250b4:	f001 fa38 	bl	8026528 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 80250b8:	687b      	ldr	r3, [r7, #4]
 80250ba:	4618      	mov	r0, r3
 80250bc:	f7ff ffc6 	bl	802504c <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 80250c0:	687b      	ldr	r3, [r7, #4]
 80250c2:	4618      	mov	r0, r3
 80250c4:	3708      	adds	r7, #8
 80250c6:	46bd      	mov	sp, r7
 80250c8:	bd80      	pop	{r7, pc}

080250ca <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80250ca:	b580      	push	{r7, lr}
 80250cc:	b082      	sub	sp, #8
 80250ce:	af00      	add	r7, sp, #0
 80250d0:	6078      	str	r0, [r7, #4]
 80250d2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80250d4:	683b      	ldr	r3, [r7, #0]
 80250d6:	3308      	adds	r3, #8
 80250d8:	4619      	mov	r1, r3
 80250da:	6878      	ldr	r0, [r7, #4]
 80250dc:	f000 f81e 	bl	802511c <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80250e0:	6878      	ldr	r0, [r7, #4]
 80250e2:	3708      	adds	r7, #8
 80250e4:	46bd      	mov	sp, r7
 80250e6:	bd80      	pop	{r7, pc}

080250e8 <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80250e8:	b580      	push	{r7, lr}
 80250ea:	b082      	sub	sp, #8
 80250ec:	af00      	add	r7, sp, #0
 80250ee:	6078      	str	r0, [r7, #4]
 80250f0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80250f2:	683b      	ldr	r3, [r7, #0]
 80250f4:	3318      	adds	r3, #24
 80250f6:	4619      	mov	r1, r3
 80250f8:	6878      	ldr	r0, [r7, #4]
 80250fa:	f000 f80f 	bl	802511c <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80250fe:	6878      	ldr	r0, [r7, #4]
 8025100:	3708      	adds	r7, #8
 8025102:	46bd      	mov	sp, r7
 8025104:	bd80      	pop	{r7, pc}

08025106 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8025106:	b480      	push	{r7}
 8025108:	b083      	sub	sp, #12
 802510a:	af00      	add	r7, sp, #0
 802510c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802510e:	687b      	ldr	r3, [r7, #4]
 8025110:	4618      	mov	r0, r3
 8025112:	370c      	adds	r7, #12
 8025114:	46bd      	mov	sp, r7
 8025116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802511a:	4770      	bx	lr

0802511c <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 802511c:	b480      	push	{r7}
 802511e:	b083      	sub	sp, #12
 8025120:	af00      	add	r7, sp, #0
 8025122:	6078      	str	r0, [r7, #4]
 8025124:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025126:	683b      	ldr	r3, [r7, #0]
 8025128:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802512e:	683b      	ldr	r3, [r7, #0]
 8025130:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025132:	687b      	ldr	r3, [r7, #4]
 8025134:	605a      	str	r2, [r3, #4]
 8025136:	683b      	ldr	r3, [r7, #0]
 8025138:	689a      	ldr	r2, [r3, #8]
 802513a:	687b      	ldr	r3, [r7, #4]
 802513c:	609a      	str	r2, [r3, #8]
 802513e:	683b      	ldr	r3, [r7, #0]
 8025140:	68da      	ldr	r2, [r3, #12]
 8025142:	687b      	ldr	r3, [r7, #4]
 8025144:	60da      	str	r2, [r3, #12]
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	4618      	mov	r0, r3
 802514a:	370c      	adds	r7, #12
 802514c:	46bd      	mov	sp, r7
 802514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025152:	4770      	bx	lr

08025154 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 8025154:	b480      	push	{r7}
 8025156:	b08d      	sub	sp, #52	; 0x34
 8025158:	af00      	add	r7, sp, #0
 802515a:	60f8      	str	r0, [r7, #12]
 802515c:	60b9      	str	r1, [r7, #8]
 802515e:	607a      	str	r2, [r7, #4]
 8025160:	603b      	str	r3, [r7, #0]
      }
 8025162:	bf00      	nop
 8025164:	3734      	adds	r7, #52	; 0x34
 8025166:	46bd      	mov	sp, r7
 8025168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802516c:	4770      	bx	lr

0802516e <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 802516e:	b480      	push	{r7}
 8025170:	b083      	sub	sp, #12
 8025172:	af00      	add	r7, sp, #0
 8025174:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8025176:	687b      	ldr	r3, [r7, #4]
 8025178:	4618      	mov	r0, r3
 802517a:	370c      	adds	r7, #12
 802517c:	46bd      	mov	sp, r7
 802517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025182:	4770      	bx	lr

08025184 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8025184:	b590      	push	{r4, r7, lr}
 8025186:	b085      	sub	sp, #20
 8025188:	af00      	add	r7, sp, #0
 802518a:	60f8      	str	r0, [r7, #12]
 802518c:	60b9      	str	r1, [r7, #8]
 802518e:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8025190:	68fb      	ldr	r3, [r7, #12]
 8025192:	68ba      	ldr	r2, [r7, #8]
 8025194:	4611      	mov	r1, r2
 8025196:	4618      	mov	r0, r3
 8025198:	f001 f9e2 	bl	8026560 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 802519c:	68b8      	ldr	r0, [r7, #8]
 802519e:	f001 f9ec 	bl	802657a <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80251a2:	68fb      	ldr	r3, [r7, #12]
 80251a4:	4618      	mov	r0, r3
 80251a6:	f7fe ff31 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80251aa:	4604      	mov	r4, r0
 80251ac:	68bb      	ldr	r3, [r7, #8]
 80251ae:	4618      	mov	r0, r3
 80251b0:	f7fe ff2c 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80251b4:	4603      	mov	r3, r0
 80251b6:	4619      	mov	r1, r3
 80251b8:	4620      	mov	r0, r4
 80251ba:	f001 f9f2 	bl	80265a2 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 80251be:	bf00      	nop
 80251c0:	3714      	adds	r7, #20
 80251c2:	46bd      	mov	sp, r7
 80251c4:	bd90      	pop	{r4, r7, pc}

080251c6 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80251c6:	b480      	push	{r7}
 80251c8:	b083      	sub	sp, #12
 80251ca:	af00      	add	r7, sp, #0
 80251cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80251ce:	687b      	ldr	r3, [r7, #4]
 80251d0:	4618      	mov	r0, r3
 80251d2:	370c      	adds	r7, #12
 80251d4:	46bd      	mov	sp, r7
 80251d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251da:	4770      	bx	lr

080251dc <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80251dc:	b590      	push	{r4, r7, lr}
 80251de:	b085      	sub	sp, #20
 80251e0:	af00      	add	r7, sp, #0
 80251e2:	60f8      	str	r0, [r7, #12]
 80251e4:	60b9      	str	r1, [r7, #8]
 80251e6:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80251e8:	68fb      	ldr	r3, [r7, #12]
 80251ea:	68ba      	ldr	r2, [r7, #8]
 80251ec:	4611      	mov	r1, r2
 80251ee:	4618      	mov	r0, r3
 80251f0:	f001 f9e5 	bl	80265be <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 80251f4:	68b8      	ldr	r0, [r7, #8]
 80251f6:	f001 f9ef 	bl	80265d8 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80251fa:	68fb      	ldr	r3, [r7, #12]
 80251fc:	4618      	mov	r0, r3
 80251fe:	f7fe ffa8 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025202:	4604      	mov	r4, r0
 8025204:	68bb      	ldr	r3, [r7, #8]
 8025206:	4618      	mov	r0, r3
 8025208:	f7fe ffa3 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 802520c:	4603      	mov	r3, r0
 802520e:	4619      	mov	r1, r3
 8025210:	4620      	mov	r0, r4
 8025212:	f001 f9f5 	bl	8026600 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 8025216:	bf00      	nop
 8025218:	3714      	adds	r7, #20
 802521a:	46bd      	mov	sp, r7
 802521c:	bd90      	pop	{r4, r7, pc}

0802521e <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 802521e:	b480      	push	{r7}
 8025220:	b083      	sub	sp, #12
 8025222:	af00      	add	r7, sp, #0
 8025224:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8025226:	687b      	ldr	r3, [r7, #4]
 8025228:	4618      	mov	r0, r3
 802522a:	370c      	adds	r7, #12
 802522c:	46bd      	mov	sp, r7
 802522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025232:	4770      	bx	lr

08025234 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8025234:	b590      	push	{r4, r7, lr}
 8025236:	b085      	sub	sp, #20
 8025238:	af00      	add	r7, sp, #0
 802523a:	60f8      	str	r0, [r7, #12]
 802523c:	60b9      	str	r1, [r7, #8]
 802523e:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8025240:	68fb      	ldr	r3, [r7, #12]
 8025242:	68ba      	ldr	r2, [r7, #8]
 8025244:	4611      	mov	r1, r2
 8025246:	4618      	mov	r0, r3
 8025248:	f001 f9e8 	bl	802661c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 802524c:	68b8      	ldr	r0, [r7, #8]
 802524e:	f001 f9f2 	bl	8026636 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8025252:	68fb      	ldr	r3, [r7, #12]
 8025254:	4618      	mov	r0, r3
 8025256:	f7ff fd09 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802525a:	4604      	mov	r4, r0
 802525c:	68bb      	ldr	r3, [r7, #8]
 802525e:	4618      	mov	r0, r3
 8025260:	f7ff fd04 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025264:	4603      	mov	r3, r0
 8025266:	4619      	mov	r1, r3
 8025268:	4620      	mov	r0, r4
 802526a:	f001 f9f8 	bl	802665e <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 802526e:	bf00      	nop
 8025270:	3714      	adds	r7, #20
 8025272:	46bd      	mov	sp, r7
 8025274:	bd90      	pop	{r4, r7, pc}

08025276 <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8025276:	b480      	push	{r7}
 8025278:	b083      	sub	sp, #12
 802527a:	af00      	add	r7, sp, #0
 802527c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	4618      	mov	r0, r3
 8025282:	370c      	adds	r7, #12
 8025284:	46bd      	mov	sp, r7
 8025286:	f85d 7b04 	ldr.w	r7, [sp], #4
 802528a:	4770      	bx	lr

0802528c <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 802528c:	b590      	push	{r4, r7, lr}
 802528e:	b085      	sub	sp, #20
 8025290:	af00      	add	r7, sp, #0
 8025292:	60f8      	str	r0, [r7, #12]
 8025294:	60b9      	str	r1, [r7, #8]
 8025296:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8025298:	68fb      	ldr	r3, [r7, #12]
 802529a:	68ba      	ldr	r2, [r7, #8]
 802529c:	4611      	mov	r1, r2
 802529e:	4618      	mov	r0, r3
 80252a0:	f001 f9eb 	bl	802667a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 80252a4:	68b8      	ldr	r0, [r7, #8]
 80252a6:	f001 f9f5 	bl	8026694 <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80252aa:	68fb      	ldr	r3, [r7, #12]
 80252ac:	4618      	mov	r0, r3
 80252ae:	f7ff ff2a 	bl	8025106 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80252b2:	4604      	mov	r4, r0
 80252b4:	68bb      	ldr	r3, [r7, #8]
 80252b6:	4618      	mov	r0, r3
 80252b8:	f7ff ff25 	bl	8025106 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80252bc:	4603      	mov	r3, r0
 80252be:	4619      	mov	r1, r3
 80252c0:	4620      	mov	r0, r4
 80252c2:	f001 f9fb 	bl	80266bc <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 80252c6:	bf00      	nop
 80252c8:	3714      	adds	r7, #20
 80252ca:	46bd      	mov	sp, r7
 80252cc:	bd90      	pop	{r4, r7, pc}

080252ce <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80252ce:	b580      	push	{r7, lr}
 80252d0:	b082      	sub	sp, #8
 80252d2:	af00      	add	r7, sp, #0
 80252d4:	6078      	str	r0, [r7, #4]
 80252d6:	6878      	ldr	r0, [r7, #4]
 80252d8:	f001 f9fe 	bl	80266d8 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 80252dc:	687b      	ldr	r3, [r7, #4]
 80252de:	4618      	mov	r0, r3
 80252e0:	3708      	adds	r7, #8
 80252e2:	46bd      	mov	sp, r7
 80252e4:	bd80      	pop	{r7, pc}

080252e6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80252e6:	b580      	push	{r7, lr}
 80252e8:	b082      	sub	sp, #8
 80252ea:	af00      	add	r7, sp, #0
 80252ec:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80252ee:	687b      	ldr	r3, [r7, #4]
 80252f0:	2200      	movs	r2, #0
 80252f2:	601a      	str	r2, [r3, #0]
 80252f4:	687b      	ldr	r3, [r7, #4]
 80252f6:	2200      	movs	r2, #0
 80252f8:	605a      	str	r2, [r3, #4]
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	3308      	adds	r3, #8
 80252fe:	4618      	mov	r0, r3
 8025300:	f001 f9f5 	bl	80266ee <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 8025304:	687b      	ldr	r3, [r7, #4]
 8025306:	3318      	adds	r3, #24
 8025308:	4618      	mov	r0, r3
 802530a:	f001 f9f0 	bl	80266ee <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 802530e:	687b      	ldr	r3, [r7, #4]
 8025310:	4618      	mov	r0, r3
 8025312:	3708      	adds	r7, #8
 8025314:	46bd      	mov	sp, r7
 8025316:	bd80      	pop	{r7, pc}

08025318 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 8025318:	b480      	push	{r7}
 802531a:	b083      	sub	sp, #12
 802531c:	af00      	add	r7, sp, #0
 802531e:	6078      	str	r0, [r7, #4]
 8025320:	687b      	ldr	r3, [r7, #4]
 8025322:	4618      	mov	r0, r3
 8025324:	370c      	adds	r7, #12
 8025326:	46bd      	mov	sp, r7
 8025328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802532c:	4770      	bx	lr

0802532e <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 802532e:	b480      	push	{r7}
 8025330:	b083      	sub	sp, #12
 8025332:	af00      	add	r7, sp, #0
 8025334:	6078      	str	r0, [r7, #4]
 8025336:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8025338:	687b      	ldr	r3, [r7, #4]
 802533a:	681a      	ldr	r2, [r3, #0]
 802533c:	683b      	ldr	r3, [r7, #0]
 802533e:	681b      	ldr	r3, [r3, #0]
 8025340:	429a      	cmp	r2, r3
 8025342:	d201      	bcs.n	8025348 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8025344:	683b      	ldr	r3, [r7, #0]
 8025346:	e000      	b.n	802534a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8025348:	687b      	ldr	r3, [r7, #4]
    }
 802534a:	4618      	mov	r0, r3
 802534c:	370c      	adds	r7, #12
 802534e:	46bd      	mov	sp, r7
 8025350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025354:	4770      	bx	lr

08025356 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8025356:	b590      	push	{r4, r7, lr}
 8025358:	b085      	sub	sp, #20
 802535a:	af00      	add	r7, sp, #0
 802535c:	6078      	str	r0, [r7, #4]
 802535e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025360:	f107 030c 	add.w	r3, r7, #12
 8025364:	6879      	ldr	r1, [r7, #4]
 8025366:	4618      	mov	r0, r3
 8025368:	f000 f85b 	bl	8025422 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802536c:	f107 030c 	add.w	r3, r7, #12
 8025370:	6839      	ldr	r1, [r7, #0]
 8025372:	4618      	mov	r0, r3
 8025374:	f001 f9d2 	bl	802671c <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 8025378:	4604      	mov	r4, r0
 802537a:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802537c:	f107 030c 	add.w	r3, r7, #12
 8025380:	4618      	mov	r0, r3
 8025382:	f000 f85f 	bl	8025444 <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025386:	4623      	mov	r3, r4
      }
 8025388:	4618      	mov	r0, r3
 802538a:	3714      	adds	r7, #20
 802538c:	46bd      	mov	sp, r7
 802538e:	bd90      	pop	{r4, r7, pc}

08025390 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8025390:	b580      	push	{r7, lr}
 8025392:	b086      	sub	sp, #24
 8025394:	af00      	add	r7, sp, #0
 8025396:	60f8      	str	r0, [r7, #12]
 8025398:	60b9      	str	r1, [r7, #8]
 802539a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 802539c:	68bb      	ldr	r3, [r7, #8]
 802539e:	617b      	str	r3, [r7, #20]
 80253a0:	697a      	ldr	r2, [r7, #20]
 80253a2:	687b      	ldr	r3, [r7, #4]
 80253a4:	429a      	cmp	r2, r3
 80253a6:	d209      	bcs.n	80253bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 80253a8:	68f8      	ldr	r0, [r7, #12]
 80253aa:	f000 fa3f 	bl	802582c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 80253ae:	4602      	mov	r2, r0
 80253b0:	697b      	ldr	r3, [r7, #20]
 80253b2:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80253b4:	697b      	ldr	r3, [r7, #20]
 80253b6:	3304      	adds	r3, #4
 80253b8:	617b      	str	r3, [r7, #20]
 80253ba:	e7f1      	b.n	80253a0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 80253bc:	bf00      	nop
 80253be:	3718      	adds	r7, #24
 80253c0:	46bd      	mov	sp, r7
 80253c2:	bd80      	pop	{r7, pc}

080253c4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80253c4:	b590      	push	{r4, r7, lr}
 80253c6:	b083      	sub	sp, #12
 80253c8:	af00      	add	r7, sp, #0
 80253ca:	6078      	str	r0, [r7, #4]
 80253cc:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80253ce:	687b      	ldr	r3, [r7, #4]
 80253d0:	683a      	ldr	r2, [r7, #0]
 80253d2:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80253d4:	683b      	ldr	r3, [r7, #0]
 80253d6:	681a      	ldr	r2, [r3, #0]
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80253dc:	687b      	ldr	r3, [r7, #4]
 80253de:	685c      	ldr	r4, [r3, #4]
 80253e0:	f000 fca5 	bl	8025d2e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 80253e4:	4602      	mov	r2, r0
 80253e6:	4613      	mov	r3, r2
 80253e8:	009b      	lsls	r3, r3, #2
 80253ea:	4413      	add	r3, r2
 80253ec:	009b      	lsls	r3, r3, #2
 80253ee:	18e2      	adds	r2, r4, r3
 80253f0:	687b      	ldr	r3, [r7, #4]
 80253f2:	609a      	str	r2, [r3, #8]
      }
 80253f4:	bf00      	nop
 80253f6:	370c      	adds	r7, #12
 80253f8:	46bd      	mov	sp, r7
 80253fa:	bd90      	pop	{r4, r7, pc}

080253fc <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80253fc:	b590      	push	{r4, r7, lr}
 80253fe:	b083      	sub	sp, #12
 8025400:	af00      	add	r7, sp, #0
 8025402:	6078      	str	r0, [r7, #4]
 8025404:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8025406:	687c      	ldr	r4, [r7, #4]
 8025408:	2014      	movs	r0, #20
 802540a:	f7fb fd68 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802540e:	4603      	mov	r3, r0
 8025410:	461a      	mov	r2, r3
 8025412:	6839      	ldr	r1, [r7, #0]
 8025414:	4620      	mov	r0, r4
 8025416:	f001 f990 	bl	802673a <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 802541a:	bf00      	nop
 802541c:	370c      	adds	r7, #12
 802541e:	46bd      	mov	sp, r7
 8025420:	bd90      	pop	{r4, r7, pc}

08025422 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8025422:	b580      	push	{r7, lr}
 8025424:	b082      	sub	sp, #8
 8025426:	af00      	add	r7, sp, #0
 8025428:	6078      	str	r0, [r7, #4]
 802542a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 802542c:	6838      	ldr	r0, [r7, #0]
 802542e:	f001 f993 	bl	8026758 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8025432:	4603      	mov	r3, r0
 8025434:	4619      	mov	r1, r3
 8025436:	6878      	ldr	r0, [r7, #4]
 8025438:	f001 f999 	bl	802676e <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 802543c:	6878      	ldr	r0, [r7, #4]
 802543e:	3708      	adds	r7, #8
 8025440:	46bd      	mov	sp, r7
 8025442:	bd80      	pop	{r7, pc}

08025444 <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025444:	b580      	push	{r7, lr}
 8025446:	b082      	sub	sp, #8
 8025448:	af00      	add	r7, sp, #0
 802544a:	6078      	str	r0, [r7, #4]
 802544c:	6878      	ldr	r0, [r7, #4]
 802544e:	f001 f99b 	bl	8026788 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 8025452:	687b      	ldr	r3, [r7, #4]
 8025454:	4618      	mov	r0, r3
 8025456:	3708      	adds	r7, #8
 8025458:	46bd      	mov	sp, r7
 802545a:	bd80      	pop	{r7, pc}

0802545c <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802545c:	b580      	push	{r7, lr}
 802545e:	b084      	sub	sp, #16
 8025460:	af00      	add	r7, sp, #0
 8025462:	60f8      	str	r0, [r7, #12]
 8025464:	60b9      	str	r1, [r7, #8]
 8025466:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025468:	687a      	ldr	r2, [r7, #4]
 802546a:	68b9      	ldr	r1, [r7, #8]
 802546c:	68f8      	ldr	r0, [r7, #12]
 802546e:	f001 f996 	bl	802679e <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 8025472:	bf00      	nop
 8025474:	3710      	adds	r7, #16
 8025476:	46bd      	mov	sp, r7
 8025478:	bd80      	pop	{r7, pc}

0802547a <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 802547a:	b5b0      	push	{r4, r5, r7, lr}
 802547c:	b086      	sub	sp, #24
 802547e:	af00      	add	r7, sp, #0
 8025480:	60f8      	str	r0, [r7, #12]
 8025482:	60b9      	str	r1, [r7, #8]
 8025484:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 8025486:	68bb      	ldr	r3, [r7, #8]
 8025488:	68db      	ldr	r3, [r3, #12]
 802548a:	3304      	adds	r3, #4
 802548c:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 802548e:	687b      	ldr	r3, [r7, #4]
 8025490:	68db      	ldr	r3, [r3, #12]
 8025492:	697a      	ldr	r2, [r7, #20]
 8025494:	429a      	cmp	r2, r3
 8025496:	d219      	bcs.n	80254cc <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8025498:	697b      	ldr	r3, [r7, #20]
 802549a:	681d      	ldr	r5, [r3, #0]
 802549c:	697b      	ldr	r3, [r7, #20]
 802549e:	681c      	ldr	r4, [r3, #0]
 80254a0:	f001 f98d 	bl	80267be <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 80254a4:	4602      	mov	r2, r0
 80254a6:	4613      	mov	r3, r2
 80254a8:	009b      	lsls	r3, r3, #2
 80254aa:	4413      	add	r3, r2
 80254ac:	009b      	lsls	r3, r3, #2
 80254ae:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80254b0:	68fb      	ldr	r3, [r7, #12]
 80254b2:	4618      	mov	r0, r3
 80254b4:	f7fe fdaa 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80254b8:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80254ba:	461a      	mov	r2, r3
 80254bc:	4621      	mov	r1, r4
 80254be:	4628      	mov	r0, r5
 80254c0:	f001 f985 	bl	80267ce <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80254c4:	697b      	ldr	r3, [r7, #20]
 80254c6:	3304      	adds	r3, #4
 80254c8:	617b      	str	r3, [r7, #20]
 80254ca:	e7e0      	b.n	802548e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 80254cc:	68bb      	ldr	r3, [r7, #8]
 80254ce:	68da      	ldr	r2, [r3, #12]
 80254d0:	687b      	ldr	r3, [r7, #4]
 80254d2:	68db      	ldr	r3, [r3, #12]
 80254d4:	429a      	cmp	r2, r3
 80254d6:	d01c      	beq.n	8025512 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 80254d8:	68bb      	ldr	r3, [r7, #8]
 80254da:	681c      	ldr	r4, [r3, #0]
 80254dc:	68bb      	ldr	r3, [r7, #8]
 80254de:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80254e0:	68fb      	ldr	r3, [r7, #12]
 80254e2:	4618      	mov	r0, r3
 80254e4:	f7fe fd92 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80254e8:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80254ea:	461a      	mov	r2, r3
 80254ec:	4629      	mov	r1, r5
 80254ee:	4620      	mov	r0, r4
 80254f0:	f001 f96d 	bl	80267ce <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 80254f4:	687b      	ldr	r3, [r7, #4]
 80254f6:	685c      	ldr	r4, [r3, #4]
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 80254fc:	68fb      	ldr	r3, [r7, #12]
 80254fe:	4618      	mov	r0, r3
 8025500:	f7fe fd84 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8025504:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8025506:	461a      	mov	r2, r3
 8025508:	4629      	mov	r1, r5
 802550a:	4620      	mov	r0, r4
 802550c:	f001 f95f 	bl	80267ce <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8025510:	e00d      	b.n	802552e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8025512:	68bb      	ldr	r3, [r7, #8]
 8025514:	681c      	ldr	r4, [r3, #0]
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 802551a:	68fb      	ldr	r3, [r7, #12]
 802551c:	4618      	mov	r0, r3
 802551e:	f7fe fd75 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8025522:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8025524:	461a      	mov	r2, r3
 8025526:	4629      	mov	r1, r5
 8025528:	4620      	mov	r0, r4
 802552a:	f001 f950 	bl	80267ce <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 802552e:	bf00      	nop
 8025530:	3718      	adds	r7, #24
 8025532:	46bd      	mov	sp, r7
 8025534:	bdb0      	pop	{r4, r5, r7, pc}

08025536 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8025536:	b580      	push	{r7, lr}
 8025538:	b082      	sub	sp, #8
 802553a:	af00      	add	r7, sp, #0
 802553c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802553e:	6878      	ldr	r0, [r7, #4]
 8025540:	f001 f953 	bl	80267ea <_ZNSaI8ResponceEC1Ev>
 8025544:	687b      	ldr	r3, [r7, #4]
 8025546:	4618      	mov	r0, r3
 8025548:	f001 f95b 	bl	8026802 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	4618      	mov	r0, r3
 8025550:	3708      	adds	r7, #8
 8025552:	46bd      	mov	sp, r7
 8025554:	bd80      	pop	{r7, pc}

08025556 <_ZNSaI8ResponceED1Ev>:
 8025556:	b580      	push	{r7, lr}
 8025558:	b082      	sub	sp, #8
 802555a:	af00      	add	r7, sp, #0
 802555c:	6078      	str	r0, [r7, #4]
 802555e:	6878      	ldr	r0, [r7, #4]
 8025560:	f001 f968 	bl	8026834 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 8025564:	687b      	ldr	r3, [r7, #4]
 8025566:	4618      	mov	r0, r3
 8025568:	3708      	adds	r7, #8
 802556a:	46bd      	mov	sp, r7
 802556c:	bd80      	pop	{r7, pc}

0802556e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802556e:	b590      	push	{r4, r7, lr}
 8025570:	b089      	sub	sp, #36	; 0x24
 8025572:	af00      	add	r7, sp, #0
 8025574:	6078      	str	r0, [r7, #4]
 8025576:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8025578:	2010      	movs	r0, #16
 802557a:	f7fb fcb0 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802557e:	4602      	mov	r2, r0
 8025580:	683b      	ldr	r3, [r7, #0]
 8025582:	fbb3 f3f2 	udiv	r3, r3, r2
 8025586:	3301      	adds	r3, #1
 8025588:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802558a:	2308      	movs	r3, #8
 802558c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802558e:	69fb      	ldr	r3, [r7, #28]
 8025590:	3302      	adds	r3, #2
 8025592:	613b      	str	r3, [r7, #16]
 8025594:	f107 0210 	add.w	r2, r7, #16
 8025598:	f107 030c 	add.w	r3, r7, #12
 802559c:	4611      	mov	r1, r2
 802559e:	4618      	mov	r0, r3
 80255a0:	f7ff fec5 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 80255a4:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80255a6:	681a      	ldr	r2, [r3, #0]
 80255a8:	687b      	ldr	r3, [r7, #4]
 80255aa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80255ac:	687b      	ldr	r3, [r7, #4]
 80255ae:	685b      	ldr	r3, [r3, #4]
 80255b0:	4619      	mov	r1, r3
 80255b2:	6878      	ldr	r0, [r7, #4]
 80255b4:	f001 f949 	bl	802684a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 80255b8:	4602      	mov	r2, r0
 80255ba:	687b      	ldr	r3, [r7, #4]
 80255bc:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80255c2:	687b      	ldr	r3, [r7, #4]
 80255c4:	6859      	ldr	r1, [r3, #4]
 80255c6:	69fb      	ldr	r3, [r7, #28]
 80255c8:	1acb      	subs	r3, r1, r3
 80255ca:	085b      	lsrs	r3, r3, #1
 80255cc:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80255ce:	4413      	add	r3, r2
 80255d0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80255d2:	69fb      	ldr	r3, [r7, #28]
 80255d4:	009b      	lsls	r3, r3, #2
 80255d6:	69ba      	ldr	r2, [r7, #24]
 80255d8:	4413      	add	r3, r2
 80255da:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80255dc:	697a      	ldr	r2, [r7, #20]
 80255de:	69b9      	ldr	r1, [r7, #24]
 80255e0:	6878      	ldr	r0, [r7, #4]
 80255e2:	f001 f94f 	bl	8026884 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80255e6:	687b      	ldr	r3, [r7, #4]
 80255e8:	3308      	adds	r3, #8
 80255ea:	69b9      	ldr	r1, [r7, #24]
 80255ec:	4618      	mov	r0, r3
 80255ee:	f001 f963 	bl	80268b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80255f2:	687b      	ldr	r3, [r7, #4]
 80255f4:	f103 0218 	add.w	r2, r3, #24
 80255f8:	697b      	ldr	r3, [r7, #20]
 80255fa:	3b04      	subs	r3, #4
 80255fc:	4619      	mov	r1, r3
 80255fe:	4610      	mov	r0, r2
 8025600:	f001 f95a 	bl	80268b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8025604:	687b      	ldr	r3, [r7, #4]
 8025606:	68da      	ldr	r2, [r3, #12]
 8025608:	687b      	ldr	r3, [r7, #4]
 802560a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802560c:	687b      	ldr	r3, [r7, #4]
 802560e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8025610:	2010      	movs	r0, #16
 8025612:	f7fb fc64 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8025616:	4602      	mov	r2, r0
 8025618:	683b      	ldr	r3, [r7, #0]
 802561a:	fbb3 f1f2 	udiv	r1, r3, r2
 802561e:	fb01 f202 	mul.w	r2, r1, r2
 8025622:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8025624:	011b      	lsls	r3, r3, #4
 8025626:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8025628:	687b      	ldr	r3, [r7, #4]
 802562a:	619a      	str	r2, [r3, #24]
    }
 802562c:	bf00      	nop
 802562e:	3724      	adds	r7, #36	; 0x24
 8025630:	46bd      	mov	sp, r7
 8025632:	bd90      	pop	{r4, r7, pc}

08025634 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8025634:	b580      	push	{r7, lr}
 8025636:	b086      	sub	sp, #24
 8025638:	af00      	add	r7, sp, #0
 802563a:	60f8      	str	r0, [r7, #12]
 802563c:	60b9      	str	r1, [r7, #8]
 802563e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8025640:	68bb      	ldr	r3, [r7, #8]
 8025642:	617b      	str	r3, [r7, #20]
 8025644:	697a      	ldr	r2, [r7, #20]
 8025646:	687b      	ldr	r3, [r7, #4]
 8025648:	429a      	cmp	r2, r3
 802564a:	d209      	bcs.n	8025660 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 802564c:	697b      	ldr	r3, [r7, #20]
 802564e:	681b      	ldr	r3, [r3, #0]
 8025650:	4619      	mov	r1, r3
 8025652:	68f8      	ldr	r0, [r7, #12]
 8025654:	f001 f949 	bl	80268ea <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8025658:	697b      	ldr	r3, [r7, #20]
 802565a:	3304      	adds	r3, #4
 802565c:	617b      	str	r3, [r7, #20]
 802565e:	e7f1      	b.n	8025644 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8025660:	bf00      	nop
 8025662:	3718      	adds	r7, #24
 8025664:	46bd      	mov	sp, r7
 8025666:	bd80      	pop	{r7, pc}

08025668 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8025668:	b580      	push	{r7, lr}
 802566a:	b086      	sub	sp, #24
 802566c:	af00      	add	r7, sp, #0
 802566e:	60f8      	str	r0, [r7, #12]
 8025670:	60b9      	str	r1, [r7, #8]
 8025672:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025674:	f107 0314 	add.w	r3, r7, #20
 8025678:	68f9      	ldr	r1, [r7, #12]
 802567a:	4618      	mov	r0, r3
 802567c:	f001 f948 	bl	8026910 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8025680:	f107 0314 	add.w	r3, r7, #20
 8025684:	687a      	ldr	r2, [r7, #4]
 8025686:	68b9      	ldr	r1, [r7, #8]
 8025688:	4618      	mov	r0, r3
 802568a:	f001 f95e 	bl	802694a <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802568e:	f107 0314 	add.w	r3, r7, #20
 8025692:	4618      	mov	r0, r3
 8025694:	f001 f94d 	bl	8026932 <_ZNSaIP8ResponceED1Ev>
      }
 8025698:	bf00      	nop
 802569a:	3718      	adds	r7, #24
 802569c:	46bd      	mov	sp, r7
 802569e:	bd80      	pop	{r7, pc}

080256a0 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 80256a0:	b5b0      	push	{r4, r5, r7, lr}
 80256a2:	b086      	sub	sp, #24
 80256a4:	af00      	add	r7, sp, #0
 80256a6:	60f8      	str	r0, [r7, #12]
 80256a8:	60b9      	str	r1, [r7, #8]
 80256aa:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 80256ac:	68bb      	ldr	r3, [r7, #8]
 80256ae:	68db      	ldr	r3, [r3, #12]
 80256b0:	3304      	adds	r3, #4
 80256b2:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80256b4:	687b      	ldr	r3, [r7, #4]
 80256b6:	68db      	ldr	r3, [r3, #12]
 80256b8:	697a      	ldr	r2, [r7, #20]
 80256ba:	429a      	cmp	r2, r3
 80256bc:	d216      	bcs.n	80256ec <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80256be:	697b      	ldr	r3, [r7, #20]
 80256c0:	681d      	ldr	r5, [r3, #0]
 80256c2:	697b      	ldr	r3, [r7, #20]
 80256c4:	681c      	ldr	r4, [r3, #0]
 80256c6:	f001 f94f 	bl	8026968 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 80256ca:	4603      	mov	r3, r0
 80256cc:	011b      	lsls	r3, r3, #4
 80256ce:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80256d0:	68fb      	ldr	r3, [r7, #12]
 80256d2:	4618      	mov	r0, r3
 80256d4:	f7fe fd3d 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80256d8:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80256da:	461a      	mov	r2, r3
 80256dc:	4621      	mov	r1, r4
 80256de:	4628      	mov	r0, r5
 80256e0:	f001 f94a 	bl	8026978 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80256e4:	697b      	ldr	r3, [r7, #20]
 80256e6:	3304      	adds	r3, #4
 80256e8:	617b      	str	r3, [r7, #20]
 80256ea:	e7e3      	b.n	80256b4 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 80256ec:	68bb      	ldr	r3, [r7, #8]
 80256ee:	68da      	ldr	r2, [r3, #12]
 80256f0:	687b      	ldr	r3, [r7, #4]
 80256f2:	68db      	ldr	r3, [r3, #12]
 80256f4:	429a      	cmp	r2, r3
 80256f6:	d01c      	beq.n	8025732 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 80256f8:	68bb      	ldr	r3, [r7, #8]
 80256fa:	681c      	ldr	r4, [r3, #0]
 80256fc:	68bb      	ldr	r3, [r7, #8]
 80256fe:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8025700:	68fb      	ldr	r3, [r7, #12]
 8025702:	4618      	mov	r0, r3
 8025704:	f7fe fd25 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025708:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 802570a:	461a      	mov	r2, r3
 802570c:	4629      	mov	r1, r5
 802570e:	4620      	mov	r0, r4
 8025710:	f001 f932 	bl	8026978 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8025714:	687b      	ldr	r3, [r7, #4]
 8025716:	685c      	ldr	r4, [r3, #4]
 8025718:	687b      	ldr	r3, [r7, #4]
 802571a:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 802571c:	68fb      	ldr	r3, [r7, #12]
 802571e:	4618      	mov	r0, r3
 8025720:	f7fe fd17 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025724:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8025726:	461a      	mov	r2, r3
 8025728:	4629      	mov	r1, r5
 802572a:	4620      	mov	r0, r4
 802572c:	f001 f924 	bl	8026978 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8025730:	e00d      	b.n	802574e <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8025732:	68bb      	ldr	r3, [r7, #8]
 8025734:	681c      	ldr	r4, [r3, #0]
 8025736:	687b      	ldr	r3, [r7, #4]
 8025738:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 802573a:	68fb      	ldr	r3, [r7, #12]
 802573c:	4618      	mov	r0, r3
 802573e:	f7fe fd08 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025742:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8025744:	461a      	mov	r2, r3
 8025746:	4629      	mov	r1, r5
 8025748:	4620      	mov	r0, r4
 802574a:	f001 f915 	bl	8026978 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 802574e:	bf00      	nop
 8025750:	3718      	adds	r7, #24
 8025752:	46bd      	mov	sp, r7
 8025754:	bdb0      	pop	{r4, r5, r7, pc}

08025756 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025756:	b480      	push	{r7}
 8025758:	b083      	sub	sp, #12
 802575a:	af00      	add	r7, sp, #0
 802575c:	6078      	str	r0, [r7, #4]
 802575e:	687b      	ldr	r3, [r7, #4]
 8025760:	4618      	mov	r0, r3
 8025762:	370c      	adds	r7, #12
 8025764:	46bd      	mov	sp, r7
 8025766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802576a:	4770      	bx	lr

0802576c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802576c:	b580      	push	{r7, lr}
 802576e:	b084      	sub	sp, #16
 8025770:	af00      	add	r7, sp, #0
 8025772:	60f8      	str	r0, [r7, #12]
 8025774:	60b9      	str	r1, [r7, #8]
 8025776:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025778:	687a      	ldr	r2, [r7, #4]
 802577a:	68b9      	ldr	r1, [r7, #8]
 802577c:	68f8      	ldr	r0, [r7, #12]
 802577e:	f001 f909 	bl	8026994 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8025782:	bf00      	nop
 8025784:	3710      	adds	r7, #16
 8025786:	46bd      	mov	sp, r7
 8025788:	bd80      	pop	{r7, pc}

0802578a <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 802578a:	b580      	push	{r7, lr}
 802578c:	b082      	sub	sp, #8
 802578e:	af00      	add	r7, sp, #0
 8025790:	6078      	str	r0, [r7, #4]
 8025792:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8025794:	6839      	ldr	r1, [r7, #0]
 8025796:	6878      	ldr	r0, [r7, #4]
 8025798:	f001 f90a 	bl	80269b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 802579c:	bf00      	nop
 802579e:	3708      	adds	r7, #8
 80257a0:	46bd      	mov	sp, r7
 80257a2:	bd80      	pop	{r7, pc}

080257a4 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80257a4:	b590      	push	{r4, r7, lr}
 80257a6:	b085      	sub	sp, #20
 80257a8:	af00      	add	r7, sp, #0
 80257aa:	60f8      	str	r0, [r7, #12]
 80257ac:	60b9      	str	r1, [r7, #8]
 80257ae:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80257b0:	6878      	ldr	r0, [r7, #4]
 80257b2:	f7fe fd6b 	bl	802428c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80257b6:	4604      	mov	r4, r0
 80257b8:	68bb      	ldr	r3, [r7, #8]
 80257ba:	4619      	mov	r1, r3
 80257bc:	2014      	movs	r0, #20
 80257be:	f7fb fb82 	bl	8020ec6 <_ZnwjPv>
 80257c2:	4603      	mov	r3, r0
 80257c4:	4621      	mov	r1, r4
 80257c6:	4618      	mov	r0, r3
 80257c8:	f7fc f94c 	bl	8021a64 <_ZN7RequestC1EOS_>
 80257cc:	bf00      	nop
 80257ce:	3714      	adds	r7, #20
 80257d0:	46bd      	mov	sp, r7
 80257d2:	bd90      	pop	{r4, r7, pc}

080257d4 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80257d4:	b580      	push	{r7, lr}
 80257d6:	b082      	sub	sp, #8
 80257d8:	af00      	add	r7, sp, #0
 80257da:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80257dc:	687b      	ldr	r3, [r7, #4]
 80257de:	4618      	mov	r0, r3
 80257e0:	f000 ffba 	bl	8026758 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80257e4:	4603      	mov	r3, r0
 80257e6:	4618      	mov	r0, r3
 80257e8:	f001 f8ed 	bl	80269c6 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 80257ec:	4603      	mov	r3, r0
 80257ee:	4618      	mov	r0, r3
 80257f0:	3708      	adds	r7, #8
 80257f2:	46bd      	mov	sp, r7
 80257f4:	bd80      	pop	{r7, pc}

080257f6 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80257f6:	b580      	push	{r7, lr}
 80257f8:	b082      	sub	sp, #8
 80257fa:	af00      	add	r7, sp, #0
 80257fc:	6078      	str	r0, [r7, #4]
 80257fe:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025800:	683b      	ldr	r3, [r7, #0]
 8025802:	1c5a      	adds	r2, r3, #1
 8025804:	687b      	ldr	r3, [r7, #4]
 8025806:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8025808:	6879      	ldr	r1, [r7, #4]
 802580a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802580c:	6879      	ldr	r1, [r7, #4]
 802580e:	6809      	ldr	r1, [r1, #0]
 8025810:	1a41      	subs	r1, r0, r1
 8025812:	1089      	asrs	r1, r1, #2
 8025814:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025816:	429a      	cmp	r2, r3
 8025818:	d904      	bls.n	8025824 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 802581a:	2200      	movs	r2, #0
 802581c:	6839      	ldr	r1, [r7, #0]
 802581e:	6878      	ldr	r0, [r7, #4]
 8025820:	f001 f8eb 	bl	80269fa <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8025824:	bf00      	nop
 8025826:	3708      	adds	r7, #8
 8025828:	46bd      	mov	sp, r7
 802582a:	bd80      	pop	{r7, pc}

0802582c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 802582c:	b590      	push	{r4, r7, lr}
 802582e:	b083      	sub	sp, #12
 8025830:	af00      	add	r7, sp, #0
 8025832:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8025834:	687c      	ldr	r4, [r7, #4]
 8025836:	2014      	movs	r0, #20
 8025838:	f7fb fb51 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802583c:	4603      	mov	r3, r0
 802583e:	4619      	mov	r1, r3
 8025840:	4620      	mov	r0, r4
 8025842:	f001 f974 	bl	8026b2e <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 8025846:	4603      	mov	r3, r0
      }
 8025848:	4618      	mov	r0, r3
 802584a:	370c      	adds	r7, #12
 802584c:	46bd      	mov	sp, r7
 802584e:	bd90      	pop	{r4, r7, pc}

08025850 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8025850:	b580      	push	{r7, lr}
 8025852:	b082      	sub	sp, #8
 8025854:	af00      	add	r7, sp, #0
 8025856:	6078      	str	r0, [r7, #4]
 8025858:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 802585a:	6838      	ldr	r0, [r7, #0]
 802585c:	f7fe ffcc 	bl	80247f8 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8025860:	4603      	mov	r3, r0
 8025862:	4619      	mov	r1, r3
 8025864:	6878      	ldr	r0, [r7, #4]
 8025866:	f7fe fe23 	bl	80244b0 <_ZNSaIhEC1ERKS_>
 802586a:	6878      	ldr	r0, [r7, #4]
 802586c:	3708      	adds	r7, #8
 802586e:	46bd      	mov	sp, r7
 8025870:	bd80      	pop	{r7, pc}

08025872 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8025872:	b580      	push	{r7, lr}
 8025874:	b082      	sub	sp, #8
 8025876:	af00      	add	r7, sp, #0
 8025878:	6078      	str	r0, [r7, #4]
 802587a:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 802587c:	687b      	ldr	r3, [r7, #4]
 802587e:	6839      	ldr	r1, [r7, #0]
 8025880:	4618      	mov	r0, r3
 8025882:	f001 f963 	bl	8026b4c <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	4618      	mov	r0, r3
 802588a:	3708      	adds	r7, #8
 802588c:	46bd      	mov	sp, r7
 802588e:	bd80      	pop	{r7, pc}

08025890 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8025890:	b580      	push	{r7, lr}
 8025892:	b086      	sub	sp, #24
 8025894:	af00      	add	r7, sp, #0
 8025896:	6078      	str	r0, [r7, #4]
 8025898:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 802589a:	f107 030c 	add.w	r3, r7, #12
 802589e:	4618      	mov	r0, r3
 80258a0:	f7fe fca9 	bl	80241f6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80258a4:	f107 030c 	add.w	r3, r7, #12
 80258a8:	6879      	ldr	r1, [r7, #4]
 80258aa:	4618      	mov	r0, r3
 80258ac:	f001 f95d 	bl	8026b6a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 80258b0:	6839      	ldr	r1, [r7, #0]
 80258b2:	6878      	ldr	r0, [r7, #4]
 80258b4:	f001 f959 	bl	8026b6a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 80258b8:	f107 030c 	add.w	r3, r7, #12
 80258bc:	4619      	mov	r1, r3
 80258be:	6838      	ldr	r0, [r7, #0]
 80258c0:	f001 f953 	bl	8026b6a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 80258c4:	bf00      	nop
 80258c6:	3718      	adds	r7, #24
 80258c8:	46bd      	mov	sp, r7
 80258ca:	bd80      	pop	{r7, pc}

080258cc <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80258cc:	b580      	push	{r7, lr}
 80258ce:	b082      	sub	sp, #8
 80258d0:	af00      	add	r7, sp, #0
 80258d2:	6078      	str	r0, [r7, #4]
 80258d4:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80258d6:	461a      	mov	r2, r3
 80258d8:	6839      	ldr	r1, [r7, #0]
 80258da:	6878      	ldr	r0, [r7, #4]
 80258dc:	f001 f95c 	bl	8026b98 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80258e0:	bf00      	nop
 80258e2:	3708      	adds	r7, #8
 80258e4:	46bd      	mov	sp, r7
 80258e6:	bd80      	pop	{r7, pc}

080258e8 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80258e8:	b580      	push	{r7, lr}
 80258ea:	b084      	sub	sp, #16
 80258ec:	af00      	add	r7, sp, #0
 80258ee:	60f8      	str	r0, [r7, #12]
 80258f0:	60b9      	str	r1, [r7, #8]
 80258f2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80258f4:	6878      	ldr	r0, [r7, #4]
 80258f6:	f7fe fd74 	bl	80243e2 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80258fa:	4603      	mov	r3, r0
 80258fc:	461a      	mov	r2, r3
 80258fe:	68b9      	ldr	r1, [r7, #8]
 8025900:	68f8      	ldr	r0, [r7, #12]
 8025902:	f001 f956 	bl	8026bb2 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8025906:	bf00      	nop
 8025908:	3710      	adds	r7, #16
 802590a:	46bd      	mov	sp, r7
 802590c:	bd80      	pop	{r7, pc}
	...

08025910 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8025910:	b5b0      	push	{r4, r5, r7, lr}
 8025912:	b082      	sub	sp, #8
 8025914:	af00      	add	r7, sp, #0
 8025916:	6078      	str	r0, [r7, #4]
 8025918:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 802591a:	6878      	ldr	r0, [r7, #4]
 802591c:	f7ff f888 	bl	8024a30 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8025920:	4604      	mov	r4, r0
 8025922:	6878      	ldr	r0, [r7, #4]
 8025924:	f001 f95d 	bl	8026be2 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 8025928:	4603      	mov	r3, r0
 802592a:	429c      	cmp	r4, r3
 802592c:	bf0c      	ite	eq
 802592e:	2301      	moveq	r3, #1
 8025930:	2300      	movne	r3, #0
 8025932:	b2db      	uxtb	r3, r3
 8025934:	2b00      	cmp	r3, #0
 8025936:	d002      	beq.n	802593e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8025938:	4816      	ldr	r0, [pc, #88]	; (8025994 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 802593a:	f019 fadd 	bl	803eef8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 802593e:	2101      	movs	r1, #1
 8025940:	6878      	ldr	r0, [r7, #4]
 8025942:	f001 f95f 	bl	8026c04 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8025946:	687a      	ldr	r2, [r7, #4]
 8025948:	687b      	ldr	r3, [r7, #4]
 802594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802594c:	1d1c      	adds	r4, r3, #4
 802594e:	4610      	mov	r0, r2
 8025950:	f001 f973 	bl	8026c3a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8025954:	4603      	mov	r3, r0
 8025956:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8025958:	687c      	ldr	r4, [r7, #4]
 802595a:	687b      	ldr	r3, [r7, #4]
 802595c:	699d      	ldr	r5, [r3, #24]
 802595e:	6838      	ldr	r0, [r7, #0]
 8025960:	f7fe fd3f 	bl	80243e2 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8025964:	4603      	mov	r3, r0
 8025966:	461a      	mov	r2, r3
 8025968:	4629      	mov	r1, r5
 802596a:	4620      	mov	r0, r4
 802596c:	f7ff ffbc 	bl	80258e8 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	f103 0218 	add.w	r2, r3, #24
 8025976:	687b      	ldr	r3, [r7, #4]
 8025978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802597a:	3304      	adds	r3, #4
 802597c:	4619      	mov	r1, r3
 802597e:	4610      	mov	r0, r2
 8025980:	f000 ff9a 	bl	80268b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8025984:	687b      	ldr	r3, [r7, #4]
 8025986:	69da      	ldr	r2, [r3, #28]
 8025988:	687b      	ldr	r3, [r7, #4]
 802598a:	619a      	str	r2, [r3, #24]
      }
 802598c:	bf00      	nop
 802598e:	3708      	adds	r7, #8
 8025990:	46bd      	mov	sp, r7
 8025992:	bdb0      	pop	{r4, r5, r7, pc}
 8025994:	08040b24 	.word	0x08040b24

08025998 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025998:	b480      	push	{r7}
 802599a:	b083      	sub	sp, #12
 802599c:	af00      	add	r7, sp, #0
 802599e:	6078      	str	r0, [r7, #4]
 80259a0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80259a2:	687b      	ldr	r3, [r7, #4]
 80259a4:	681a      	ldr	r2, [r3, #0]
 80259a6:	683b      	ldr	r3, [r7, #0]
 80259a8:	681b      	ldr	r3, [r3, #0]
 80259aa:	429a      	cmp	r2, r3
 80259ac:	bf0c      	ite	eq
 80259ae:	2301      	moveq	r3, #1
 80259b0:	2300      	movne	r3, #0
 80259b2:	b2db      	uxtb	r3, r3
 80259b4:	4618      	mov	r0, r3
 80259b6:	370c      	adds	r7, #12
 80259b8:	46bd      	mov	sp, r7
 80259ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259be:	4770      	bx	lr

080259c0 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80259c0:	b480      	push	{r7}
 80259c2:	b083      	sub	sp, #12
 80259c4:	af00      	add	r7, sp, #0
 80259c6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80259c8:	687b      	ldr	r3, [r7, #4]
 80259ca:	681b      	ldr	r3, [r3, #0]
 80259cc:	4618      	mov	r0, r3
 80259ce:	370c      	adds	r7, #12
 80259d0:	46bd      	mov	sp, r7
 80259d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259d6:	4770      	bx	lr

080259d8 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80259d8:	b480      	push	{r7}
 80259da:	b083      	sub	sp, #12
 80259dc:	af00      	add	r7, sp, #0
 80259de:	6078      	str	r0, [r7, #4]
 80259e0:	6039      	str	r1, [r7, #0]
 80259e2:	687b      	ldr	r3, [r7, #4]
 80259e4:	4618      	mov	r0, r3
 80259e6:	370c      	adds	r7, #12
 80259e8:	46bd      	mov	sp, r7
 80259ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259ee:	4770      	bx	lr

080259f0 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80259f0:	b580      	push	{r7, lr}
 80259f2:	b082      	sub	sp, #8
 80259f4:	af00      	add	r7, sp, #0
 80259f6:	6078      	str	r0, [r7, #4]
 80259f8:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80259fa:	6839      	ldr	r1, [r7, #0]
 80259fc:	6878      	ldr	r0, [r7, #4]
 80259fe:	f001 f92e 	bl	8026c5e <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8025a02:	bf00      	nop
 8025a04:	3708      	adds	r7, #8
 8025a06:	46bd      	mov	sp, r7
 8025a08:	bd80      	pop	{r7, pc}

08025a0a <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8025a0a:	b580      	push	{r7, lr}
 8025a0c:	b082      	sub	sp, #8
 8025a0e:	af00      	add	r7, sp, #0
 8025a10:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8025a12:	687b      	ldr	r3, [r7, #4]
 8025a14:	4618      	mov	r0, r3
 8025a16:	f7fe fb9c 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025a1a:	4602      	mov	r2, r0
 8025a1c:	687b      	ldr	r3, [r7, #4]
 8025a1e:	689b      	ldr	r3, [r3, #8]
 8025a20:	4619      	mov	r1, r3
 8025a22:	4610      	mov	r0, r2
 8025a24:	f7ff ffe4 	bl	80259f0 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8025a28:	687a      	ldr	r2, [r7, #4]
 8025a2a:	687b      	ldr	r3, [r7, #4]
 8025a2c:	68db      	ldr	r3, [r3, #12]
 8025a2e:	4619      	mov	r1, r3
 8025a30:	4610      	mov	r0, r2
 8025a32:	f000 ff5a 	bl	80268ea <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8025a36:	687b      	ldr	r3, [r7, #4]
 8025a38:	f103 0208 	add.w	r2, r3, #8
 8025a3c:	687b      	ldr	r3, [r7, #4]
 8025a3e:	695b      	ldr	r3, [r3, #20]
 8025a40:	3304      	adds	r3, #4
 8025a42:	4619      	mov	r1, r3
 8025a44:	4610      	mov	r0, r2
 8025a46:	f000 ff37 	bl	80268b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8025a4a:	687b      	ldr	r3, [r7, #4]
 8025a4c:	68da      	ldr	r2, [r3, #12]
 8025a4e:	687b      	ldr	r3, [r7, #4]
 8025a50:	609a      	str	r2, [r3, #8]
    }
 8025a52:	bf00      	nop
 8025a54:	3708      	adds	r7, #8
 8025a56:	46bd      	mov	sp, r7
 8025a58:	bd80      	pop	{r7, pc}

08025a5a <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8025a5a:	b580      	push	{r7, lr}
 8025a5c:	b082      	sub	sp, #8
 8025a5e:	af00      	add	r7, sp, #0
 8025a60:	6078      	str	r0, [r7, #4]
 8025a62:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8025a64:	6838      	ldr	r0, [r7, #0]
 8025a66:	f7fb faf8 	bl	802105a <_ZN7RequestD1Ev>
 8025a6a:	bf00      	nop
 8025a6c:	3708      	adds	r7, #8
 8025a6e:	46bd      	mov	sp, r7
 8025a70:	bd80      	pop	{r7, pc}

08025a72 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025a72:	b580      	push	{r7, lr}
 8025a74:	b082      	sub	sp, #8
 8025a76:	af00      	add	r7, sp, #0
 8025a78:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	4618      	mov	r0, r3
 8025a7e:	f7fe febb 	bl	80247f8 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8025a82:	4603      	mov	r3, r0
 8025a84:	4618      	mov	r0, r3
 8025a86:	f001 f8f6 	bl	8026c76 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8025a8a:	4603      	mov	r3, r0
 8025a8c:	4618      	mov	r0, r3
 8025a8e:	3708      	adds	r7, #8
 8025a90:	46bd      	mov	sp, r7
 8025a92:	bd80      	pop	{r7, pc}

08025a94 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8025a94:	b580      	push	{r7, lr}
 8025a96:	b084      	sub	sp, #16
 8025a98:	af00      	add	r7, sp, #0
 8025a9a:	60f8      	str	r0, [r7, #12]
 8025a9c:	60b9      	str	r1, [r7, #8]
 8025a9e:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8025aa0:	68b9      	ldr	r1, [r7, #8]
 8025aa2:	68f8      	ldr	r0, [r7, #12]
 8025aa4:	f001 f901 	bl	8026caa <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8025aa8:	4603      	mov	r3, r0
 8025aaa:	4618      	mov	r0, r3
 8025aac:	3710      	adds	r7, #16
 8025aae:	46bd      	mov	sp, r7
 8025ab0:	bd80      	pop	{r7, pc}

08025ab2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8025ab2:	b590      	push	{r4, r7, lr}
 8025ab4:	b087      	sub	sp, #28
 8025ab6:	af00      	add	r7, sp, #0
 8025ab8:	60f8      	str	r0, [r7, #12]
 8025aba:	60b9      	str	r1, [r7, #8]
 8025abc:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8025abe:	68f8      	ldr	r0, [r7, #12]
 8025ac0:	f7ff ffd7 	bl	8025a72 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8025ac4:	4604      	mov	r4, r0
 8025ac6:	68f8      	ldr	r0, [r7, #12]
 8025ac8:	f7fd fddb 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025acc:	4603      	mov	r3, r0
 8025ace:	1ae2      	subs	r2, r4, r3
 8025ad0:	68bb      	ldr	r3, [r7, #8]
 8025ad2:	429a      	cmp	r2, r3
 8025ad4:	bf34      	ite	cc
 8025ad6:	2301      	movcc	r3, #1
 8025ad8:	2300      	movcs	r3, #0
 8025ada:	b2db      	uxtb	r3, r3
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	d002      	beq.n	8025ae6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8025ae0:	6878      	ldr	r0, [r7, #4]
 8025ae2:	f019 fa09 	bl	803eef8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8025ae6:	68f8      	ldr	r0, [r7, #12]
 8025ae8:	f7fd fdcb 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025aec:	4604      	mov	r4, r0
 8025aee:	68f8      	ldr	r0, [r7, #12]
 8025af0:	f7fd fdc7 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025af4:	4603      	mov	r3, r0
 8025af6:	613b      	str	r3, [r7, #16]
 8025af8:	f107 0208 	add.w	r2, r7, #8
 8025afc:	f107 0310 	add.w	r3, r7, #16
 8025b00:	4611      	mov	r1, r2
 8025b02:	4618      	mov	r0, r3
 8025b04:	f7ff fc13 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 8025b08:	4603      	mov	r3, r0
 8025b0a:	681b      	ldr	r3, [r3, #0]
 8025b0c:	4423      	add	r3, r4
 8025b0e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8025b10:	68f8      	ldr	r0, [r7, #12]
 8025b12:	f7fd fdb6 	bl	8023682 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025b16:	4602      	mov	r2, r0
 8025b18:	697b      	ldr	r3, [r7, #20]
 8025b1a:	4293      	cmp	r3, r2
 8025b1c:	d306      	bcc.n	8025b2c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8025b1e:	68f8      	ldr	r0, [r7, #12]
 8025b20:	f7ff ffa7 	bl	8025a72 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8025b24:	4602      	mov	r2, r0
 8025b26:	697b      	ldr	r3, [r7, #20]
 8025b28:	4293      	cmp	r3, r2
 8025b2a:	d904      	bls.n	8025b36 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8025b2c:	68f8      	ldr	r0, [r7, #12]
 8025b2e:	f7ff ffa0 	bl	8025a72 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8025b32:	4603      	mov	r3, r0
 8025b34:	e000      	b.n	8025b38 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8025b36:	697b      	ldr	r3, [r7, #20]
      }
 8025b38:	4618      	mov	r0, r3
 8025b3a:	371c      	adds	r7, #28
 8025b3c:	46bd      	mov	sp, r7
 8025b3e:	bd90      	pop	{r4, r7, pc}

08025b40 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8025b40:	b580      	push	{r7, lr}
 8025b42:	b082      	sub	sp, #8
 8025b44:	af00      	add	r7, sp, #0
 8025b46:	6078      	str	r0, [r7, #4]
 8025b48:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8025b4a:	683b      	ldr	r3, [r7, #0]
 8025b4c:	2b00      	cmp	r3, #0
 8025b4e:	d006      	beq.n	8025b5e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8025b50:	687b      	ldr	r3, [r7, #4]
 8025b52:	6839      	ldr	r1, [r7, #0]
 8025b54:	4618      	mov	r0, r3
 8025b56:	f001 f8b8 	bl	8026cca <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8025b5a:	4603      	mov	r3, r0
 8025b5c:	e000      	b.n	8025b60 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8025b5e:	2300      	movs	r3, #0
      }
 8025b60:	4618      	mov	r0, r3
 8025b62:	3708      	adds	r7, #8
 8025b64:	46bd      	mov	sp, r7
 8025b66:	bd80      	pop	{r7, pc}

08025b68 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8025b68:	b590      	push	{r4, r7, lr}
 8025b6a:	b087      	sub	sp, #28
 8025b6c:	af02      	add	r7, sp, #8
 8025b6e:	60f8      	str	r0, [r7, #12]
 8025b70:	60b9      	str	r1, [r7, #8]
 8025b72:	607a      	str	r2, [r7, #4]
 8025b74:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8025b76:	f88d 4000 	strb.w	r4, [sp]
 8025b7a:	683b      	ldr	r3, [r7, #0]
 8025b7c:	687a      	ldr	r2, [r7, #4]
 8025b7e:	68b9      	ldr	r1, [r7, #8]
 8025b80:	68f8      	ldr	r0, [r7, #12]
 8025b82:	f001 f8b1 	bl	8026ce8 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8025b86:	4603      	mov	r3, r0
      }
 8025b88:	4618      	mov	r0, r3
 8025b8a:	3714      	adds	r7, #20
 8025b8c:	46bd      	mov	sp, r7
 8025b8e:	bd90      	pop	{r4, r7, pc}

08025b90 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8025b90:	b590      	push	{r4, r7, lr}
 8025b92:	b085      	sub	sp, #20
 8025b94:	af00      	add	r7, sp, #0
 8025b96:	60f8      	str	r0, [r7, #12]
 8025b98:	60b9      	str	r1, [r7, #8]
 8025b9a:	607a      	str	r2, [r7, #4]
 8025b9c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8025b9e:	68f8      	ldr	r0, [r7, #12]
 8025ba0:	f001 f8b4 	bl	8026d0c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8025ba4:	4604      	mov	r4, r0
 8025ba6:	68b8      	ldr	r0, [r7, #8]
 8025ba8:	f001 f8b0 	bl	8026d0c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8025bac:	4601      	mov	r1, r0
 8025bae:	683b      	ldr	r3, [r7, #0]
 8025bb0:	687a      	ldr	r2, [r7, #4]
 8025bb2:	4620      	mov	r0, r4
 8025bb4:	f001 f8b9 	bl	8026d2a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8025bb8:	4603      	mov	r3, r0
    }
 8025bba:	4618      	mov	r0, r3
 8025bbc:	3714      	adds	r7, #20
 8025bbe:	46bd      	mov	sp, r7
 8025bc0:	bd90      	pop	{r4, r7, pc}

08025bc2 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8025bc2:	b480      	push	{r7}
 8025bc4:	b085      	sub	sp, #20
 8025bc6:	af00      	add	r7, sp, #0
 8025bc8:	60f8      	str	r0, [r7, #12]
 8025bca:	60b9      	str	r1, [r7, #8]
 8025bcc:	713a      	strb	r2, [r7, #4]
    { }
 8025bce:	bf00      	nop
 8025bd0:	3714      	adds	r7, #20
 8025bd2:	46bd      	mov	sp, r7
 8025bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bd8:	4770      	bx	lr

08025bda <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8025bda:	b480      	push	{r7}
 8025bdc:	b083      	sub	sp, #12
 8025bde:	af00      	add	r7, sp, #0
 8025be0:	6078      	str	r0, [r7, #4]
 8025be2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8025be4:	683b      	ldr	r3, [r7, #0]
 8025be6:	681a      	ldr	r2, [r3, #0]
 8025be8:	687b      	ldr	r3, [r7, #4]
 8025bea:	601a      	str	r2, [r3, #0]
 8025bec:	687b      	ldr	r3, [r7, #4]
 8025bee:	4618      	mov	r0, r3
 8025bf0:	370c      	adds	r7, #12
 8025bf2:	46bd      	mov	sp, r7
 8025bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bf8:	4770      	bx	lr

08025bfa <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025bfa:	b580      	push	{r7, lr}
 8025bfc:	b084      	sub	sp, #16
 8025bfe:	af00      	add	r7, sp, #0
 8025c00:	60f8      	str	r0, [r7, #12]
 8025c02:	60b9      	str	r1, [r7, #8]
 8025c04:	607a      	str	r2, [r7, #4]
 8025c06:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8025c08:	687a      	ldr	r2, [r7, #4]
 8025c0a:	68b9      	ldr	r1, [r7, #8]
 8025c0c:	68f8      	ldr	r0, [r7, #12]
 8025c0e:	f001 f89d 	bl	8026d4c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8025c12:	4603      	mov	r3, r0
 8025c14:	4618      	mov	r0, r3
 8025c16:	3710      	adds	r7, #16
 8025c18:	46bd      	mov	sp, r7
 8025c1a:	bd80      	pop	{r7, pc}

08025c1c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8025c1c:	b480      	push	{r7}
 8025c1e:	b083      	sub	sp, #12
 8025c20:	af00      	add	r7, sp, #0
 8025c22:	6078      	str	r0, [r7, #4]
 8025c24:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8025c26:	683b      	ldr	r3, [r7, #0]
 8025c28:	681a      	ldr	r2, [r3, #0]
 8025c2a:	687b      	ldr	r3, [r7, #4]
 8025c2c:	601a      	str	r2, [r3, #0]
 8025c2e:	687b      	ldr	r3, [r7, #4]
 8025c30:	4618      	mov	r0, r3
 8025c32:	370c      	adds	r7, #12
 8025c34:	46bd      	mov	sp, r7
 8025c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c3a:	4770      	bx	lr

08025c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8025c3c:	b480      	push	{r7}
 8025c3e:	b083      	sub	sp, #12
 8025c40:	af00      	add	r7, sp, #0
 8025c42:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025c44:	687b      	ldr	r3, [r7, #4]
 8025c46:	4618      	mov	r0, r3
 8025c48:	370c      	adds	r7, #12
 8025c4a:	46bd      	mov	sp, r7
 8025c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c50:	4770      	bx	lr

08025c52 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8025c52:	b5b0      	push	{r4, r5, r7, lr}
 8025c54:	b084      	sub	sp, #16
 8025c56:	af00      	add	r7, sp, #0
 8025c58:	60f8      	str	r0, [r7, #12]
 8025c5a:	60b9      	str	r1, [r7, #8]
 8025c5c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8025c5e:	68f8      	ldr	r0, [r7, #12]
 8025c60:	f001 f886 	bl	8026d70 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8025c64:	4604      	mov	r4, r0
 8025c66:	68b8      	ldr	r0, [r7, #8]
 8025c68:	f001 f882 	bl	8026d70 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8025c6c:	4605      	mov	r5, r0
 8025c6e:	6878      	ldr	r0, [r7, #4]
 8025c70:	f001 f88c 	bl	8026d8c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8025c74:	4603      	mov	r3, r0
 8025c76:	461a      	mov	r2, r3
 8025c78:	4629      	mov	r1, r5
 8025c7a:	4620      	mov	r0, r4
 8025c7c:	f001 f894 	bl	8026da8 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8025c80:	4603      	mov	r3, r0
 8025c82:	4619      	mov	r1, r3
 8025c84:	6878      	ldr	r0, [r7, #4]
 8025c86:	f001 f89f 	bl	8026dc8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 8025c8a:	4603      	mov	r3, r0
    }
 8025c8c:	4618      	mov	r0, r3
 8025c8e:	3710      	adds	r7, #16
 8025c90:	46bd      	mov	sp, r7
 8025c92:	bdb0      	pop	{r4, r5, r7, pc}

08025c94 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8025c94:	b580      	push	{r7, lr}
 8025c96:	b082      	sub	sp, #8
 8025c98:	af00      	add	r7, sp, #0
 8025c9a:	6078      	str	r0, [r7, #4]
 8025c9c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8025c9e:	6839      	ldr	r1, [r7, #0]
 8025ca0:	6878      	ldr	r0, [r7, #4]
 8025ca2:	f001 f8a6 	bl	8026df2 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8025ca6:	bf00      	nop
 8025ca8:	3708      	adds	r7, #8
 8025caa:	46bd      	mov	sp, r7
 8025cac:	bd80      	pop	{r7, pc}

08025cae <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8025cae:	b480      	push	{r7}
 8025cb0:	b083      	sub	sp, #12
 8025cb2:	af00      	add	r7, sp, #0
 8025cb4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025cb6:	687b      	ldr	r3, [r7, #4]
 8025cb8:	4618      	mov	r0, r3
 8025cba:	370c      	adds	r7, #12
 8025cbc:	46bd      	mov	sp, r7
 8025cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cc2:	4770      	bx	lr

08025cc4 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8025cc4:	b5b0      	push	{r4, r5, r7, lr}
 8025cc6:	b084      	sub	sp, #16
 8025cc8:	af00      	add	r7, sp, #0
 8025cca:	60f8      	str	r0, [r7, #12]
 8025ccc:	60b9      	str	r1, [r7, #8]
 8025cce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8025cd0:	68f8      	ldr	r0, [r7, #12]
 8025cd2:	f001 f899 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8025cd6:	4604      	mov	r4, r0
 8025cd8:	68b8      	ldr	r0, [r7, #8]
 8025cda:	f001 f895 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8025cde:	4605      	mov	r5, r0
 8025ce0:	687b      	ldr	r3, [r7, #4]
 8025ce2:	4618      	mov	r0, r3
 8025ce4:	f001 f890 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8025ce8:	4603      	mov	r3, r0
 8025cea:	461a      	mov	r2, r3
 8025cec:	4629      	mov	r1, r5
 8025cee:	4620      	mov	r0, r4
 8025cf0:	f001 f895 	bl	8026e1e <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8025cf4:	4602      	mov	r2, r0
 8025cf6:	1d3b      	adds	r3, r7, #4
 8025cf8:	4611      	mov	r1, r2
 8025cfa:	4618      	mov	r0, r3
 8025cfc:	f001 f89f 	bl	8026e3e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8025d00:	4603      	mov	r3, r0
    }
 8025d02:	4618      	mov	r0, r3
 8025d04:	3710      	adds	r7, #16
 8025d06:	46bd      	mov	sp, r7
 8025d08:	bdb0      	pop	{r4, r5, r7, pc}

08025d0a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025d0a:	b580      	push	{r7, lr}
 8025d0c:	b086      	sub	sp, #24
 8025d0e:	af00      	add	r7, sp, #0
 8025d10:	60f8      	str	r0, [r7, #12]
 8025d12:	60b9      	str	r1, [r7, #8]
 8025d14:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025d16:	2301      	movs	r3, #1
 8025d18:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8025d1a:	687a      	ldr	r2, [r7, #4]
 8025d1c:	68b9      	ldr	r1, [r7, #8]
 8025d1e:	68f8      	ldr	r0, [r7, #12]
 8025d20:	f001 f899 	bl	8026e56 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8025d24:	4603      	mov	r3, r0
    }
 8025d26:	4618      	mov	r0, r3
 8025d28:	3718      	adds	r7, #24
 8025d2a:	46bd      	mov	sp, r7
 8025d2c:	bd80      	pop	{r7, pc}

08025d2e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025d2e:	b580      	push	{r7, lr}
 8025d30:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025d32:	2014      	movs	r0, #20
 8025d34:	f7fb f8d3 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8025d38:	4603      	mov	r3, r0
 8025d3a:	4618      	mov	r0, r3
 8025d3c:	bd80      	pop	{r7, pc}

08025d3e <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025d3e:	b580      	push	{r7, lr}
 8025d40:	b082      	sub	sp, #8
 8025d42:	af00      	add	r7, sp, #0
 8025d44:	6078      	str	r0, [r7, #4]
 8025d46:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8025d48:	f001 f895 	bl	8026e76 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8025d4c:	4603      	mov	r3, r0
 8025d4e:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	68da      	ldr	r2, [r3, #12]
 8025d54:	683b      	ldr	r3, [r7, #0]
 8025d56:	68db      	ldr	r3, [r3, #12]
 8025d58:	1ad3      	subs	r3, r2, r3
 8025d5a:	109b      	asrs	r3, r3, #2
 8025d5c:	3b01      	subs	r3, #1
 8025d5e:	fb01 f303 	mul.w	r3, r1, r3
 8025d62:	687a      	ldr	r2, [r7, #4]
 8025d64:	6811      	ldr	r1, [r2, #0]
 8025d66:	687a      	ldr	r2, [r7, #4]
 8025d68:	6852      	ldr	r2, [r2, #4]
 8025d6a:	1a8a      	subs	r2, r1, r2
 8025d6c:	1112      	asrs	r2, r2, #4
 8025d6e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8025d70:	683a      	ldr	r2, [r7, #0]
 8025d72:	6891      	ldr	r1, [r2, #8]
 8025d74:	683a      	ldr	r2, [r7, #0]
 8025d76:	6812      	ldr	r2, [r2, #0]
 8025d78:	1a8a      	subs	r2, r1, r2
 8025d7a:	1112      	asrs	r2, r2, #4
 8025d7c:	4413      	add	r3, r2
      }
 8025d7e:	4618      	mov	r0, r3
 8025d80:	3708      	adds	r7, #8
 8025d82:	46bd      	mov	sp, r7
 8025d84:	bd80      	pop	{r7, pc}

08025d86 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8025d86:	b480      	push	{r7}
 8025d88:	b083      	sub	sp, #12
 8025d8a:	af00      	add	r7, sp, #0
 8025d8c:	6078      	str	r0, [r7, #4]
 8025d8e:	687b      	ldr	r3, [r7, #4]
 8025d90:	685b      	ldr	r3, [r3, #4]
 8025d92:	4618      	mov	r0, r3
 8025d94:	370c      	adds	r7, #12
 8025d96:	46bd      	mov	sp, r7
 8025d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d9c:	4770      	bx	lr

08025d9e <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8025d9e:	b5b0      	push	{r4, r5, r7, lr}
 8025da0:	b082      	sub	sp, #8
 8025da2:	af00      	add	r7, sp, #0
 8025da4:	6078      	str	r0, [r7, #4]
 8025da6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8025da8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8025daa:	1d3b      	adds	r3, r7, #4
 8025dac:	4618      	mov	r0, r3
 8025dae:	f000 f83d 	bl	8025e2c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8025db2:	462a      	mov	r2, r5
 8025db4:	6839      	ldr	r1, [r7, #0]
 8025db6:	4620      	mov	r0, r4
 8025db8:	f001 f866 	bl	8026e88 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8025dbc:	4603      	mov	r3, r0
    }
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	3708      	adds	r7, #8
 8025dc2:	46bd      	mov	sp, r7
 8025dc4:	bdb0      	pop	{r4, r5, r7, pc}

08025dc6 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8025dc6:	b590      	push	{r4, r7, lr}
 8025dc8:	b085      	sub	sp, #20
 8025dca:	af00      	add	r7, sp, #0
 8025dcc:	6078      	str	r0, [r7, #4]
 8025dce:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8025dd0:	683b      	ldr	r3, [r7, #0]
 8025dd2:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8025dd4:	6878      	ldr	r0, [r7, #4]
 8025dd6:	f000 f829 	bl	8025e2c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8025dda:	4622      	mov	r2, r4
 8025ddc:	68f9      	ldr	r1, [r7, #12]
 8025dde:	6878      	ldr	r0, [r7, #4]
 8025de0:	f001 f868 	bl	8026eb4 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8025de4:	bf00      	nop
 8025de6:	3714      	adds	r7, #20
 8025de8:	46bd      	mov	sp, r7
 8025dea:	bd90      	pop	{r4, r7, pc}

08025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8025dec:	b5b0      	push	{r4, r5, r7, lr}
 8025dee:	b088      	sub	sp, #32
 8025df0:	af00      	add	r7, sp, #0
 8025df2:	60f8      	str	r0, [r7, #12]
 8025df4:	60b9      	str	r1, [r7, #8]
 8025df6:	607a      	str	r2, [r7, #4]
 8025df8:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8025dfa:	68b8      	ldr	r0, [r7, #8]
 8025dfc:	f001 f870 	bl	8026ee0 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8025e00:	4604      	mov	r4, r0
 8025e02:	6878      	ldr	r0, [r7, #4]
 8025e04:	f001 f86c 	bl	8026ee0 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8025e08:	4605      	mov	r5, r0
 8025e0a:	f107 0310 	add.w	r3, r7, #16
 8025e0e:	6839      	ldr	r1, [r7, #0]
 8025e10:	4618      	mov	r0, r3
 8025e12:	f7ff f8f2 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025e16:	68f8      	ldr	r0, [r7, #12]
 8025e18:	f107 0310 	add.w	r3, r7, #16
 8025e1c:	462a      	mov	r2, r5
 8025e1e:	4621      	mov	r1, r4
 8025e20:	f001 f869 	bl	8026ef6 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 8025e24:	68f8      	ldr	r0, [r7, #12]
 8025e26:	3720      	adds	r7, #32
 8025e28:	46bd      	mov	sp, r7
 8025e2a:	bdb0      	pop	{r4, r5, r7, pc}

08025e2c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8025e2c:	b480      	push	{r7}
 8025e2e:	b083      	sub	sp, #12
 8025e30:	af00      	add	r7, sp, #0
 8025e32:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8025e34:	bf00      	nop
 8025e36:	4618      	mov	r0, r3
 8025e38:	370c      	adds	r7, #12
 8025e3a:	46bd      	mov	sp, r7
 8025e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e40:	4770      	bx	lr

08025e42 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8025e42:	b590      	push	{r4, r7, lr}
 8025e44:	b0a5      	sub	sp, #148	; 0x94
 8025e46:	af02      	add	r7, sp, #8
 8025e48:	60f8      	str	r0, [r7, #12]
 8025e4a:	60b9      	str	r1, [r7, #8]
 8025e4c:	607a      	str	r2, [r7, #4]
 8025e4e:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8025e50:	6839      	ldr	r1, [r7, #0]
 8025e52:	6878      	ldr	r0, [r7, #4]
 8025e54:	f7ff ffa3 	bl	8025d9e <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8025e58:	4603      	mov	r3, r0
 8025e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8025e5e:	68bb      	ldr	r3, [r7, #8]
 8025e60:	681a      	ldr	r2, [r3, #0]
 8025e62:	68fb      	ldr	r3, [r7, #12]
 8025e64:	689b      	ldr	r3, [r3, #8]
 8025e66:	429a      	cmp	r2, r3
 8025e68:	d126      	bne.n	8025eb8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8025e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8025e6e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8025e72:	68f9      	ldr	r1, [r7, #12]
 8025e74:	4618      	mov	r0, r3
 8025e76:	f001 f86f 	bl	8026f58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8025e7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8025e7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8025e82:	4611      	mov	r1, r2
 8025e84:	4618      	mov	r0, r3
 8025e86:	f7ff f8b8 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8025e8a:	68fb      	ldr	r3, [r7, #12]
 8025e8c:	4618      	mov	r0, r3
 8025e8e:	f7fe feed 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025e92:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8025e94:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8025e98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8025e9c:	9200      	str	r2, [sp, #0]
 8025e9e:	683a      	ldr	r2, [r7, #0]
 8025ea0:	6879      	ldr	r1, [r7, #4]
 8025ea2:	f001 f883 	bl	8026fac <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8025ea6:	68fb      	ldr	r3, [r7, #12]
 8025ea8:	f103 0408 	add.w	r4, r3, #8
 8025eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8025eb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025eb6:	e03d      	b.n	8025f34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8025eb8:	68bb      	ldr	r3, [r7, #8]
 8025eba:	681a      	ldr	r2, [r3, #0]
 8025ebc:	68fb      	ldr	r3, [r7, #12]
 8025ebe:	699b      	ldr	r3, [r3, #24]
 8025ec0:	429a      	cmp	r2, r3
 8025ec2:	d127      	bne.n	8025f14 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8025ec4:	f107 0314 	add.w	r3, r7, #20
 8025ec8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8025ecc:	68f9      	ldr	r1, [r7, #12]
 8025ece:	4618      	mov	r0, r3
 8025ed0:	f001 f884 	bl	8026fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8025ed4:	68fb      	ldr	r3, [r7, #12]
 8025ed6:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8025eda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8025ede:	4611      	mov	r1, r2
 8025ee0:	4618      	mov	r0, r3
 8025ee2:	f7ff f88a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8025ee6:	68fb      	ldr	r3, [r7, #12]
 8025ee8:	4618      	mov	r0, r3
 8025eea:	f7fe febf 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025eee:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8025ef0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8025ef4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8025ef8:	9200      	str	r2, [sp, #0]
 8025efa:	683a      	ldr	r2, [r7, #0]
 8025efc:	6879      	ldr	r1, [r7, #4]
 8025efe:	f001 f855 	bl	8026fac <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8025f02:	68fb      	ldr	r3, [r7, #12]
 8025f04:	f103 0418 	add.w	r4, r3, #24
 8025f08:	f107 0314 	add.w	r3, r7, #20
 8025f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025f12:	e00f      	b.n	8025f34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8025f14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8025f18:	68b9      	ldr	r1, [r7, #8]
 8025f1a:	4618      	mov	r0, r3
 8025f1c:	f7ff f86d 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f20:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8025f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025f28:	9300      	str	r3, [sp, #0]
 8025f2a:	683b      	ldr	r3, [r7, #0]
 8025f2c:	687a      	ldr	r2, [r7, #4]
 8025f2e:	68f8      	ldr	r0, [r7, #12]
 8025f30:	f001 f87e 	bl	8027030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8025f34:	bf00      	nop
 8025f36:	378c      	adds	r7, #140	; 0x8c
 8025f38:	46bd      	mov	sp, r7
 8025f3a:	bd90      	pop	{r4, r7, pc}

08025f3c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8025f3c:	b590      	push	{r4, r7, lr}
 8025f3e:	b08b      	sub	sp, #44	; 0x2c
 8025f40:	af00      	add	r7, sp, #0
 8025f42:	6078      	str	r0, [r7, #4]
 8025f44:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8025f46:	f107 0308 	add.w	r3, r7, #8
 8025f4a:	6839      	ldr	r1, [r7, #0]
 8025f4c:	4618      	mov	r0, r3
 8025f4e:	f7ff f854 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f52:	f107 0318 	add.w	r3, r7, #24
 8025f56:	6879      	ldr	r1, [r7, #4]
 8025f58:	4618      	mov	r0, r3
 8025f5a:	f7ff f83f 	bl	8024fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8025f5e:	687b      	ldr	r3, [r7, #4]
 8025f60:	4618      	mov	r0, r3
 8025f62:	f7fe fe83 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025f66:	4603      	mov	r3, r0
 8025f68:	f107 0218 	add.w	r2, r7, #24
 8025f6c:	f107 0108 	add.w	r1, r7, #8
 8025f70:	6878      	ldr	r0, [r7, #4]
 8025f72:	f7ff f85e 	bl	8025032 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8025f76:	6878      	ldr	r0, [r7, #4]
 8025f78:	683b      	ldr	r3, [r7, #0]
 8025f7a:	68db      	ldr	r3, [r3, #12]
 8025f7c:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8025f7e:	687b      	ldr	r3, [r7, #4]
 8025f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8025f82:	3304      	adds	r3, #4
 8025f84:	461a      	mov	r2, r3
 8025f86:	f7fe ffe4 	bl	8024f52 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8025f8a:	687b      	ldr	r3, [r7, #4]
 8025f8c:	683a      	ldr	r2, [r7, #0]
 8025f8e:	f103 0418 	add.w	r4, r3, #24
 8025f92:	4613      	mov	r3, r2
 8025f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025f9a:	bf00      	nop
 8025f9c:	372c      	adds	r7, #44	; 0x2c
 8025f9e:	46bd      	mov	sp, r7
 8025fa0:	bd90      	pop	{r4, r7, pc}

08025fa2 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025fa2:	b480      	push	{r7}
 8025fa4:	b083      	sub	sp, #12
 8025fa6:	af00      	add	r7, sp, #0
 8025fa8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8025faa:	687b      	ldr	r3, [r7, #4]
 8025fac:	4618      	mov	r0, r3
 8025fae:	370c      	adds	r7, #12
 8025fb0:	46bd      	mov	sp, r7
 8025fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fb6:	4770      	bx	lr

08025fb8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8025fb8:	b5b0      	push	{r4, r5, r7, lr}
 8025fba:	b084      	sub	sp, #16
 8025fbc:	af00      	add	r7, sp, #0
 8025fbe:	60f8      	str	r0, [r7, #12]
 8025fc0:	60b9      	str	r1, [r7, #8]
 8025fc2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025fc4:	6878      	ldr	r0, [r7, #4]
 8025fc6:	f7ff ffec 	bl	8025fa2 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8025fca:	4605      	mov	r5, r0
 8025fcc:	68bb      	ldr	r3, [r7, #8]
 8025fce:	4619      	mov	r1, r3
 8025fd0:	2014      	movs	r0, #20
 8025fd2:	f7fa ff78 	bl	8020ec6 <_ZnwjPv>
 8025fd6:	4603      	mov	r3, r0
 8025fd8:	461c      	mov	r4, r3
 8025fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025fde:	682b      	ldr	r3, [r5, #0]
 8025fe0:	6023      	str	r3, [r4, #0]
 8025fe2:	bf00      	nop
 8025fe4:	3710      	adds	r7, #16
 8025fe6:	46bd      	mov	sp, r7
 8025fe8:	bdb0      	pop	{r4, r5, r7, pc}

08025fea <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025fea:	b580      	push	{r7, lr}
 8025fec:	b082      	sub	sp, #8
 8025fee:	af00      	add	r7, sp, #0
 8025ff0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8025ff2:	687b      	ldr	r3, [r7, #4]
 8025ff4:	4618      	mov	r0, r3
 8025ff6:	f001 fb28 	bl	802764a <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025ffa:	4603      	mov	r3, r0
 8025ffc:	4618      	mov	r0, r3
 8025ffe:	f001 fb0a 	bl	8027616 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 8026002:	4603      	mov	r3, r0
 8026004:	4618      	mov	r0, r3
 8026006:	3708      	adds	r7, #8
 8026008:	46bd      	mov	sp, r7
 802600a:	bd80      	pop	{r7, pc}

0802600c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 802600c:	b580      	push	{r7, lr}
 802600e:	b082      	sub	sp, #8
 8026010:	af00      	add	r7, sp, #0
 8026012:	6078      	str	r0, [r7, #4]
 8026014:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8026016:	687b      	ldr	r3, [r7, #4]
 8026018:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 802601a:	687b      	ldr	r3, [r7, #4]
 802601c:	681b      	ldr	r3, [r3, #0]
 802601e:	1ad3      	subs	r3, r2, r3
 8026020:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8026022:	461a      	mov	r2, r3
 8026024:	683b      	ldr	r3, [r7, #0]
 8026026:	4293      	cmp	r3, r2
 8026028:	d904      	bls.n	8026034 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 802602a:	2201      	movs	r2, #1
 802602c:	6839      	ldr	r1, [r7, #0]
 802602e:	6878      	ldr	r0, [r7, #4]
 8026030:	f001 fb16 	bl	8027660 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8026034:	bf00      	nop
 8026036:	3708      	adds	r7, #8
 8026038:	46bd      	mov	sp, r7
 802603a:	bd80      	pop	{r7, pc}

0802603c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 802603c:	b590      	push	{r4, r7, lr}
 802603e:	b083      	sub	sp, #12
 8026040:	af00      	add	r7, sp, #0
 8026042:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8026044:	687c      	ldr	r4, [r7, #4]
 8026046:	2014      	movs	r0, #20
 8026048:	f7fa ff49 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802604c:	4603      	mov	r3, r0
 802604e:	4619      	mov	r1, r3
 8026050:	4620      	mov	r0, r4
 8026052:	f001 fb9f 	bl	8027794 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 8026056:	4603      	mov	r3, r0
      }
 8026058:	4618      	mov	r0, r3
 802605a:	370c      	adds	r7, #12
 802605c:	46bd      	mov	sp, r7
 802605e:	bd90      	pop	{r4, r7, pc}

08026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8026060:	b590      	push	{r4, r7, lr}
 8026062:	b083      	sub	sp, #12
 8026064:	af00      	add	r7, sp, #0
 8026066:	6078      	str	r0, [r7, #4]
 8026068:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 802606a:	687b      	ldr	r3, [r7, #4]
 802606c:	683a      	ldr	r2, [r7, #0]
 802606e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8026070:	683b      	ldr	r3, [r7, #0]
 8026072:	681a      	ldr	r2, [r3, #0]
 8026074:	687b      	ldr	r3, [r7, #4]
 8026076:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8026078:	687b      	ldr	r3, [r7, #4]
 802607a:	685c      	ldr	r4, [r3, #4]
 802607c:	f000 f81f 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8026080:	4602      	mov	r2, r0
 8026082:	4613      	mov	r3, r2
 8026084:	009b      	lsls	r3, r3, #2
 8026086:	4413      	add	r3, r2
 8026088:	009b      	lsls	r3, r3, #2
 802608a:	18e2      	adds	r2, r4, r3
 802608c:	687b      	ldr	r3, [r7, #4]
 802608e:	609a      	str	r2, [r3, #8]
      }
 8026090:	bf00      	nop
 8026092:	370c      	adds	r7, #12
 8026094:	46bd      	mov	sp, r7
 8026096:	bd90      	pop	{r4, r7, pc}

08026098 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8026098:	b590      	push	{r4, r7, lr}
 802609a:	b083      	sub	sp, #12
 802609c:	af00      	add	r7, sp, #0
 802609e:	6078      	str	r0, [r7, #4]
 80260a0:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80260a2:	687c      	ldr	r4, [r7, #4]
 80260a4:	2014      	movs	r0, #20
 80260a6:	f7fa ff1a 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80260aa:	4603      	mov	r3, r0
 80260ac:	461a      	mov	r2, r3
 80260ae:	6839      	ldr	r1, [r7, #0]
 80260b0:	4620      	mov	r0, r4
 80260b2:	f001 fb7e 	bl	80277b2 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 80260b6:	bf00      	nop
 80260b8:	370c      	adds	r7, #12
 80260ba:	46bd      	mov	sp, r7
 80260bc:	bd90      	pop	{r4, r7, pc}

080260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80260be:	b580      	push	{r7, lr}
 80260c0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80260c2:	2014      	movs	r0, #20
 80260c4:	f7fa ff0b 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80260c8:	4603      	mov	r3, r0
 80260ca:	4618      	mov	r0, r3
 80260cc:	bd80      	pop	{r7, pc}

080260ce <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 80260ce:	b480      	push	{r7}
 80260d0:	b083      	sub	sp, #12
 80260d2:	af00      	add	r7, sp, #0
 80260d4:	6078      	str	r0, [r7, #4]
 80260d6:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80260d8:	bf00      	nop
 80260da:	370c      	adds	r7, #12
 80260dc:	46bd      	mov	sp, r7
 80260de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260e2:	4770      	bx	lr

080260e4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80260e4:	b580      	push	{r7, lr}
 80260e6:	b084      	sub	sp, #16
 80260e8:	af00      	add	r7, sp, #0
 80260ea:	60f8      	str	r0, [r7, #12]
 80260ec:	60b9      	str	r1, [r7, #8]
 80260ee:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80260f0:	68b9      	ldr	r1, [r7, #8]
 80260f2:	68f8      	ldr	r0, [r7, #12]
 80260f4:	f7fe ff81 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 80260f8:	6879      	ldr	r1, [r7, #4]
 80260fa:	68f8      	ldr	r0, [r7, #12]
 80260fc:	f001 fb68 	bl	80277d0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 8026100:	bf00      	nop
      }
 8026102:	68f8      	ldr	r0, [r7, #12]
 8026104:	3710      	adds	r7, #16
 8026106:	46bd      	mov	sp, r7
 8026108:	bd80      	pop	{r7, pc}

0802610a <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 802610a:	b480      	push	{r7}
 802610c:	b083      	sub	sp, #12
 802610e:	af00      	add	r7, sp, #0
 8026110:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8026112:	687b      	ldr	r3, [r7, #4]
 8026114:	681b      	ldr	r3, [r3, #0]
 8026116:	4618      	mov	r0, r3
 8026118:	370c      	adds	r7, #12
 802611a:	46bd      	mov	sp, r7
 802611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026120:	4770      	bx	lr

08026122 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8026122:	b580      	push	{r7, lr}
 8026124:	b084      	sub	sp, #16
 8026126:	af00      	add	r7, sp, #0
 8026128:	60f8      	str	r0, [r7, #12]
 802612a:	60b9      	str	r1, [r7, #8]
 802612c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 802612e:	6878      	ldr	r0, [r7, #4]
 8026130:	f001 fbb2 	bl	8027898 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8026134:	4603      	mov	r3, r0
 8026136:	461a      	mov	r2, r3
 8026138:	68b9      	ldr	r1, [r7, #8]
 802613a:	68f8      	ldr	r0, [r7, #12]
 802613c:	f001 fbb7 	bl	80278ae <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 8026140:	bf00      	nop
 8026142:	3710      	adds	r7, #16
 8026144:	46bd      	mov	sp, r7
 8026146:	bd80      	pop	{r7, pc}

08026148 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8026148:	b5b0      	push	{r4, r5, r7, lr}
 802614a:	b082      	sub	sp, #8
 802614c:	af00      	add	r7, sp, #0
 802614e:	6078      	str	r0, [r7, #4]
 8026150:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8026152:	6878      	ldr	r0, [r7, #4]
 8026154:	f001 fbc1 	bl	80278da <_ZNKSt5dequeIjSaIjEE4sizeEv>
 8026158:	4604      	mov	r4, r0
 802615a:	6878      	ldr	r0, [r7, #4]
 802615c:	f001 fbcf 	bl	80278fe <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 8026160:	4603      	mov	r3, r0
 8026162:	429c      	cmp	r4, r3
 8026164:	bf0c      	ite	eq
 8026166:	2301      	moveq	r3, #1
 8026168:	2300      	movne	r3, #0
 802616a:	b2db      	uxtb	r3, r3
 802616c:	2b00      	cmp	r3, #0
 802616e:	d002      	beq.n	8026176 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 8026170:	4816      	ldr	r0, [pc, #88]	; (80261cc <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 8026172:	f018 fec1 	bl	803eef8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8026176:	2101      	movs	r1, #1
 8026178:	6878      	ldr	r0, [r7, #4]
 802617a:	f001 fbd1 	bl	8027920 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 802617e:	687a      	ldr	r2, [r7, #4]
 8026180:	687b      	ldr	r3, [r7, #4]
 8026182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026184:	1d1c      	adds	r4, r3, #4
 8026186:	4610      	mov	r0, r2
 8026188:	f001 fbe5 	bl	8027956 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 802618c:	4603      	mov	r3, r0
 802618e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8026190:	687c      	ldr	r4, [r7, #4]
 8026192:	687b      	ldr	r3, [r7, #4]
 8026194:	699d      	ldr	r5, [r3, #24]
 8026196:	6838      	ldr	r0, [r7, #0]
 8026198:	f001 fb7e 	bl	8027898 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 802619c:	4603      	mov	r3, r0
 802619e:	461a      	mov	r2, r3
 80261a0:	4629      	mov	r1, r5
 80261a2:	4620      	mov	r0, r4
 80261a4:	f7ff ffbd 	bl	8026122 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80261a8:	687b      	ldr	r3, [r7, #4]
 80261aa:	f103 0218 	add.w	r2, r3, #24
 80261ae:	687b      	ldr	r3, [r7, #4]
 80261b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80261b2:	3304      	adds	r3, #4
 80261b4:	4619      	mov	r1, r3
 80261b6:	4610      	mov	r0, r2
 80261b8:	f001 fbdf 	bl	802797a <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80261bc:	687b      	ldr	r3, [r7, #4]
 80261be:	69da      	ldr	r2, [r3, #28]
 80261c0:	687b      	ldr	r3, [r7, #4]
 80261c2:	619a      	str	r2, [r3, #24]
      }
 80261c4:	bf00      	nop
 80261c6:	3708      	adds	r7, #8
 80261c8:	46bd      	mov	sp, r7
 80261ca:	bdb0      	pop	{r4, r5, r7, pc}
 80261cc:	08040b24 	.word	0x08040b24

080261d0 <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80261d0:	b580      	push	{r7, lr}
 80261d2:	b082      	sub	sp, #8
 80261d4:	af00      	add	r7, sp, #0
 80261d6:	6078      	str	r0, [r7, #4]
 80261d8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80261da:	683b      	ldr	r3, [r7, #0]
 80261dc:	3308      	adds	r3, #8
 80261de:	4619      	mov	r1, r3
 80261e0:	6878      	ldr	r0, [r7, #4]
 80261e2:	f001 fbf6 	bl	80279d2 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 80261e6:	6878      	ldr	r0, [r7, #4]
 80261e8:	3708      	adds	r7, #8
 80261ea:	46bd      	mov	sp, r7
 80261ec:	bd80      	pop	{r7, pc}

080261ee <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80261ee:	b480      	push	{r7}
 80261f0:	b083      	sub	sp, #12
 80261f2:	af00      	add	r7, sp, #0
 80261f4:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	681b      	ldr	r3, [r3, #0]
 80261fa:	4618      	mov	r0, r3
 80261fc:	370c      	adds	r7, #12
 80261fe:	46bd      	mov	sp, r7
 8026200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026204:	4770      	bx	lr

08026206 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8026206:	b480      	push	{r7}
 8026208:	b083      	sub	sp, #12
 802620a:	af00      	add	r7, sp, #0
 802620c:	6078      	str	r0, [r7, #4]
 802620e:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8026210:	687b      	ldr	r3, [r7, #4]
 8026212:	681a      	ldr	r2, [r3, #0]
 8026214:	683b      	ldr	r3, [r7, #0]
 8026216:	681b      	ldr	r3, [r3, #0]
 8026218:	429a      	cmp	r2, r3
 802621a:	bf0c      	ite	eq
 802621c:	2301      	moveq	r3, #1
 802621e:	2300      	movne	r3, #0
 8026220:	b2db      	uxtb	r3, r3
 8026222:	4618      	mov	r0, r3
 8026224:	370c      	adds	r7, #12
 8026226:	46bd      	mov	sp, r7
 8026228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802622c:	4770      	bx	lr

0802622e <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802622e:	b580      	push	{r7, lr}
 8026230:	b082      	sub	sp, #8
 8026232:	af00      	add	r7, sp, #0
 8026234:	6078      	str	r0, [r7, #4]
 8026236:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8026238:	6839      	ldr	r1, [r7, #0]
 802623a:	6878      	ldr	r0, [r7, #4]
 802623c:	f001 fbe5 	bl	8027a0a <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 8026240:	bf00      	nop
 8026242:	3708      	adds	r7, #8
 8026244:	46bd      	mov	sp, r7
 8026246:	bd80      	pop	{r7, pc}

08026248 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8026248:	b580      	push	{r7, lr}
 802624a:	b082      	sub	sp, #8
 802624c:	af00      	add	r7, sp, #0
 802624e:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	4618      	mov	r0, r3
 8026254:	f7fe ff57 	bl	8025106 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8026258:	4602      	mov	r2, r0
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	689b      	ldr	r3, [r3, #8]
 802625e:	4619      	mov	r1, r3
 8026260:	4610      	mov	r0, r2
 8026262:	f7ff ffe4 	bl	802622e <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8026266:	687a      	ldr	r2, [r7, #4]
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	68db      	ldr	r3, [r3, #12]
 802626c:	4619      	mov	r1, r3
 802626e:	4610      	mov	r0, r2
 8026270:	f001 fb9c 	bl	80279ac <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8026274:	687b      	ldr	r3, [r7, #4]
 8026276:	f103 0208 	add.w	r2, r3, #8
 802627a:	687b      	ldr	r3, [r7, #4]
 802627c:	695b      	ldr	r3, [r3, #20]
 802627e:	3304      	adds	r3, #4
 8026280:	4619      	mov	r1, r3
 8026282:	4610      	mov	r0, r2
 8026284:	f001 fb79 	bl	802797a <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	68da      	ldr	r2, [r3, #12]
 802628c:	687b      	ldr	r3, [r7, #4]
 802628e:	609a      	str	r2, [r3, #8]
    }
 8026290:	bf00      	nop
 8026292:	3708      	adds	r7, #8
 8026294:	46bd      	mov	sp, r7
 8026296:	bd80      	pop	{r7, pc}

08026298 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8026298:	b480      	push	{r7}
 802629a:	b083      	sub	sp, #12
 802629c:	af00      	add	r7, sp, #0
 802629e:	6078      	str	r0, [r7, #4]
 80262a0:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80262a2:	683b      	ldr	r3, [r7, #0]
 80262a4:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80262a6:	687b      	ldr	r3, [r7, #4]
 80262a8:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80262aa:	683b      	ldr	r3, [r7, #0]
 80262ac:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80262ae:	687b      	ldr	r3, [r7, #4]
 80262b0:	605a      	str	r2, [r3, #4]
 80262b2:	683b      	ldr	r3, [r7, #0]
 80262b4:	689a      	ldr	r2, [r3, #8]
 80262b6:	687b      	ldr	r3, [r7, #4]
 80262b8:	609a      	str	r2, [r3, #8]
 80262ba:	683b      	ldr	r3, [r7, #0]
 80262bc:	68da      	ldr	r2, [r3, #12]
 80262be:	687b      	ldr	r3, [r7, #4]
 80262c0:	60da      	str	r2, [r3, #12]
 80262c2:	687b      	ldr	r3, [r7, #4]
 80262c4:	4618      	mov	r0, r3
 80262c6:	370c      	adds	r7, #12
 80262c8:	46bd      	mov	sp, r7
 80262ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262ce:	4770      	bx	lr

080262d0 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80262d0:	b580      	push	{r7, lr}
 80262d2:	b082      	sub	sp, #8
 80262d4:	af00      	add	r7, sp, #0
 80262d6:	6078      	str	r0, [r7, #4]
 80262d8:	6878      	ldr	r0, [r7, #4]
 80262da:	f001 fba1 	bl	8027a20 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 80262de:	687b      	ldr	r3, [r7, #4]
 80262e0:	4618      	mov	r0, r3
 80262e2:	3708      	adds	r7, #8
 80262e4:	46bd      	mov	sp, r7
 80262e6:	bd80      	pop	{r7, pc}

080262e8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80262e8:	b580      	push	{r7, lr}
 80262ea:	b082      	sub	sp, #8
 80262ec:	af00      	add	r7, sp, #0
 80262ee:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80262f0:	687b      	ldr	r3, [r7, #4]
 80262f2:	2200      	movs	r2, #0
 80262f4:	601a      	str	r2, [r3, #0]
 80262f6:	687b      	ldr	r3, [r7, #4]
 80262f8:	2200      	movs	r2, #0
 80262fa:	605a      	str	r2, [r3, #4]
 80262fc:	687b      	ldr	r3, [r7, #4]
 80262fe:	3308      	adds	r3, #8
 8026300:	4618      	mov	r0, r3
 8026302:	f001 fb98 	bl	8027a36 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 8026306:	687b      	ldr	r3, [r7, #4]
 8026308:	3318      	adds	r3, #24
 802630a:	4618      	mov	r0, r3
 802630c:	f001 fb93 	bl	8027a36 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	4618      	mov	r0, r3
 8026314:	3708      	adds	r7, #8
 8026316:	46bd      	mov	sp, r7
 8026318:	bd80      	pop	{r7, pc}

0802631a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802631a:	b480      	push	{r7}
 802631c:	b083      	sub	sp, #12
 802631e:	af00      	add	r7, sp, #0
 8026320:	6078      	str	r0, [r7, #4]
 8026322:	687b      	ldr	r3, [r7, #4]
 8026324:	4618      	mov	r0, r3
 8026326:	370c      	adds	r7, #12
 8026328:	46bd      	mov	sp, r7
 802632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802632e:	4770      	bx	lr

08026330 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8026330:	b590      	push	{r4, r7, lr}
 8026332:	b085      	sub	sp, #20
 8026334:	af00      	add	r7, sp, #0
 8026336:	6078      	str	r0, [r7, #4]
 8026338:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802633a:	f107 030c 	add.w	r3, r7, #12
 802633e:	6879      	ldr	r1, [r7, #4]
 8026340:	4618      	mov	r0, r3
 8026342:	f000 f82c 	bl	802639e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026346:	f107 030c 	add.w	r3, r7, #12
 802634a:	6839      	ldr	r1, [r7, #0]
 802634c:	4618      	mov	r0, r3
 802634e:	f001 fb89 	bl	8027a64 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8026352:	4604      	mov	r4, r0
 8026354:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026356:	f107 030c 	add.w	r3, r7, #12
 802635a:	4618      	mov	r0, r3
 802635c:	f000 f830 	bl	80263c0 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026360:	4623      	mov	r3, r4
      }
 8026362:	4618      	mov	r0, r3
 8026364:	3714      	adds	r7, #20
 8026366:	46bd      	mov	sp, r7
 8026368:	bd90      	pop	{r4, r7, pc}

0802636a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 802636a:	b580      	push	{r7, lr}
 802636c:	b086      	sub	sp, #24
 802636e:	af00      	add	r7, sp, #0
 8026370:	60f8      	str	r0, [r7, #12]
 8026372:	60b9      	str	r1, [r7, #8]
 8026374:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8026376:	68bb      	ldr	r3, [r7, #8]
 8026378:	617b      	str	r3, [r7, #20]
 802637a:	697a      	ldr	r2, [r7, #20]
 802637c:	687b      	ldr	r3, [r7, #4]
 802637e:	429a      	cmp	r2, r3
 8026380:	d209      	bcs.n	8026396 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8026382:	68f8      	ldr	r0, [r7, #12]
 8026384:	f7ff fe5a 	bl	802603c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8026388:	4602      	mov	r2, r0
 802638a:	697b      	ldr	r3, [r7, #20]
 802638c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 802638e:	697b      	ldr	r3, [r7, #20]
 8026390:	3304      	adds	r3, #4
 8026392:	617b      	str	r3, [r7, #20]
 8026394:	e7f1      	b.n	802637a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8026396:	bf00      	nop
 8026398:	3718      	adds	r7, #24
 802639a:	46bd      	mov	sp, r7
 802639c:	bd80      	pop	{r7, pc}

0802639e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 802639e:	b580      	push	{r7, lr}
 80263a0:	b082      	sub	sp, #8
 80263a2:	af00      	add	r7, sp, #0
 80263a4:	6078      	str	r0, [r7, #4]
 80263a6:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80263a8:	6838      	ldr	r0, [r7, #0]
 80263aa:	f001 f94e 	bl	802764a <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80263ae:	4603      	mov	r3, r0
 80263b0:	4619      	mov	r1, r3
 80263b2:	6878      	ldr	r0, [r7, #4]
 80263b4:	f001 fb65 	bl	8027a82 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 80263b8:	6878      	ldr	r0, [r7, #4]
 80263ba:	3708      	adds	r7, #8
 80263bc:	46bd      	mov	sp, r7
 80263be:	bd80      	pop	{r7, pc}

080263c0 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80263c0:	b580      	push	{r7, lr}
 80263c2:	b082      	sub	sp, #8
 80263c4:	af00      	add	r7, sp, #0
 80263c6:	6078      	str	r0, [r7, #4]
 80263c8:	6878      	ldr	r0, [r7, #4]
 80263ca:	f001 fb67 	bl	8027a9c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 80263ce:	687b      	ldr	r3, [r7, #4]
 80263d0:	4618      	mov	r0, r3
 80263d2:	3708      	adds	r7, #8
 80263d4:	46bd      	mov	sp, r7
 80263d6:	bd80      	pop	{r7, pc}

080263d8 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80263d8:	b580      	push	{r7, lr}
 80263da:	b084      	sub	sp, #16
 80263dc:	af00      	add	r7, sp, #0
 80263de:	60f8      	str	r0, [r7, #12]
 80263e0:	60b9      	str	r1, [r7, #8]
 80263e2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80263e4:	687a      	ldr	r2, [r7, #4]
 80263e6:	68b9      	ldr	r1, [r7, #8]
 80263e8:	68f8      	ldr	r0, [r7, #12]
 80263ea:	f001 fb62 	bl	8027ab2 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 80263ee:	bf00      	nop
 80263f0:	3710      	adds	r7, #16
 80263f2:	46bd      	mov	sp, r7
 80263f4:	bd80      	pop	{r7, pc}

080263f6 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80263f6:	b580      	push	{r7, lr}
 80263f8:	b082      	sub	sp, #8
 80263fa:	af00      	add	r7, sp, #0
 80263fc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80263fe:	6878      	ldr	r0, [r7, #4]
 8026400:	f001 fb6f 	bl	8027ae2 <_ZNSaIjEC1Ev>
 8026404:	687b      	ldr	r3, [r7, #4]
 8026406:	4618      	mov	r0, r3
 8026408:	f001 fb77 	bl	8027afa <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 802640c:	687b      	ldr	r3, [r7, #4]
 802640e:	4618      	mov	r0, r3
 8026410:	3708      	adds	r7, #8
 8026412:	46bd      	mov	sp, r7
 8026414:	bd80      	pop	{r7, pc}

08026416 <_ZNSaIjED1Ev>:
 8026416:	b580      	push	{r7, lr}
 8026418:	b082      	sub	sp, #8
 802641a:	af00      	add	r7, sp, #0
 802641c:	6078      	str	r0, [r7, #4]
 802641e:	6878      	ldr	r0, [r7, #4]
 8026420:	f001 fb84 	bl	8027b2c <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8026424:	687b      	ldr	r3, [r7, #4]
 8026426:	4618      	mov	r0, r3
 8026428:	3708      	adds	r7, #8
 802642a:	46bd      	mov	sp, r7
 802642c:	bd80      	pop	{r7, pc}

0802642e <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802642e:	b590      	push	{r4, r7, lr}
 8026430:	b089      	sub	sp, #36	; 0x24
 8026432:	af00      	add	r7, sp, #0
 8026434:	6078      	str	r0, [r7, #4]
 8026436:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8026438:	2004      	movs	r0, #4
 802643a:	f7fa fd50 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802643e:	4602      	mov	r2, r0
 8026440:	683b      	ldr	r3, [r7, #0]
 8026442:	fbb3 f3f2 	udiv	r3, r3, r2
 8026446:	3301      	adds	r3, #1
 8026448:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802644a:	2308      	movs	r3, #8
 802644c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802644e:	69fb      	ldr	r3, [r7, #28]
 8026450:	3302      	adds	r3, #2
 8026452:	613b      	str	r3, [r7, #16]
 8026454:	f107 0210 	add.w	r2, r7, #16
 8026458:	f107 030c 	add.w	r3, r7, #12
 802645c:	4611      	mov	r1, r2
 802645e:	4618      	mov	r0, r3
 8026460:	f7fe ff65 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 8026464:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8026466:	681a      	ldr	r2, [r3, #0]
 8026468:	687b      	ldr	r3, [r7, #4]
 802646a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 802646c:	687b      	ldr	r3, [r7, #4]
 802646e:	685b      	ldr	r3, [r3, #4]
 8026470:	4619      	mov	r1, r3
 8026472:	6878      	ldr	r0, [r7, #4]
 8026474:	f001 fb65 	bl	8027b42 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8026478:	4602      	mov	r2, r0
 802647a:	687b      	ldr	r3, [r7, #4]
 802647c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802647e:	687b      	ldr	r3, [r7, #4]
 8026480:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8026482:	687b      	ldr	r3, [r7, #4]
 8026484:	6859      	ldr	r1, [r3, #4]
 8026486:	69fb      	ldr	r3, [r7, #28]
 8026488:	1acb      	subs	r3, r1, r3
 802648a:	085b      	lsrs	r3, r3, #1
 802648c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 802648e:	4413      	add	r3, r2
 8026490:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8026492:	69fb      	ldr	r3, [r7, #28]
 8026494:	009b      	lsls	r3, r3, #2
 8026496:	69ba      	ldr	r2, [r7, #24]
 8026498:	4413      	add	r3, r2
 802649a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 802649c:	697a      	ldr	r2, [r7, #20]
 802649e:	69b9      	ldr	r1, [r7, #24]
 80264a0:	6878      	ldr	r0, [r7, #4]
 80264a2:	f001 fb6b 	bl	8027b7c <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80264a6:	687b      	ldr	r3, [r7, #4]
 80264a8:	3308      	adds	r3, #8
 80264aa:	69b9      	ldr	r1, [r7, #24]
 80264ac:	4618      	mov	r0, r3
 80264ae:	f001 fa64 	bl	802797a <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80264b2:	687b      	ldr	r3, [r7, #4]
 80264b4:	f103 0218 	add.w	r2, r3, #24
 80264b8:	697b      	ldr	r3, [r7, #20]
 80264ba:	3b04      	subs	r3, #4
 80264bc:	4619      	mov	r1, r3
 80264be:	4610      	mov	r0, r2
 80264c0:	f001 fa5b 	bl	802797a <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	68da      	ldr	r2, [r3, #12]
 80264c8:	687b      	ldr	r3, [r7, #4]
 80264ca:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80264cc:	687b      	ldr	r3, [r7, #4]
 80264ce:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80264d0:	2004      	movs	r0, #4
 80264d2:	f7fa fd04 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80264d6:	4602      	mov	r2, r0
 80264d8:	683b      	ldr	r3, [r7, #0]
 80264da:	fbb3 f1f2 	udiv	r1, r3, r2
 80264de:	fb01 f202 	mul.w	r2, r1, r2
 80264e2:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80264e4:	009b      	lsls	r3, r3, #2
 80264e6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80264e8:	687b      	ldr	r3, [r7, #4]
 80264ea:	619a      	str	r2, [r3, #24]
    }
 80264ec:	bf00      	nop
 80264ee:	3724      	adds	r7, #36	; 0x24
 80264f0:	46bd      	mov	sp, r7
 80264f2:	bd90      	pop	{r4, r7, pc}

080264f4 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 80264f4:	b580      	push	{r7, lr}
 80264f6:	b086      	sub	sp, #24
 80264f8:	af00      	add	r7, sp, #0
 80264fa:	60f8      	str	r0, [r7, #12]
 80264fc:	60b9      	str	r1, [r7, #8]
 80264fe:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8026500:	68bb      	ldr	r3, [r7, #8]
 8026502:	617b      	str	r3, [r7, #20]
 8026504:	697a      	ldr	r2, [r7, #20]
 8026506:	687b      	ldr	r3, [r7, #4]
 8026508:	429a      	cmp	r2, r3
 802650a:	d209      	bcs.n	8026520 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 802650c:	697b      	ldr	r3, [r7, #20]
 802650e:	681b      	ldr	r3, [r3, #0]
 8026510:	4619      	mov	r1, r3
 8026512:	68f8      	ldr	r0, [r7, #12]
 8026514:	f001 fa4a 	bl	80279ac <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8026518:	697b      	ldr	r3, [r7, #20]
 802651a:	3304      	adds	r3, #4
 802651c:	617b      	str	r3, [r7, #20]
 802651e:	e7f1      	b.n	8026504 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8026520:	bf00      	nop
 8026522:	3718      	adds	r7, #24
 8026524:	46bd      	mov	sp, r7
 8026526:	bd80      	pop	{r7, pc}

08026528 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8026528:	b580      	push	{r7, lr}
 802652a:	b086      	sub	sp, #24
 802652c:	af00      	add	r7, sp, #0
 802652e:	60f8      	str	r0, [r7, #12]
 8026530:	60b9      	str	r1, [r7, #8]
 8026532:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026534:	f107 0314 	add.w	r3, r7, #20
 8026538:	68f9      	ldr	r1, [r7, #12]
 802653a:	4618      	mov	r0, r3
 802653c:	f001 fb38 	bl	8027bb0 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8026540:	f107 0314 	add.w	r3, r7, #20
 8026544:	687a      	ldr	r2, [r7, #4]
 8026546:	68b9      	ldr	r1, [r7, #8]
 8026548:	4618      	mov	r0, r3
 802654a:	f001 fb4e 	bl	8027bea <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802654e:	f107 0314 	add.w	r3, r7, #20
 8026552:	4618      	mov	r0, r3
 8026554:	f001 fb3d 	bl	8027bd2 <_ZNSaIPjED1Ev>
      }
 8026558:	bf00      	nop
 802655a:	3718      	adds	r7, #24
 802655c:	46bd      	mov	sp, r7
 802655e:	bd80      	pop	{r7, pc}

08026560 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8026560:	b580      	push	{r7, lr}
 8026562:	b082      	sub	sp, #8
 8026564:	af00      	add	r7, sp, #0
 8026566:	6078      	str	r0, [r7, #4]
 8026568:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 802656a:	6839      	ldr	r1, [r7, #0]
 802656c:	6878      	ldr	r0, [r7, #4]
 802656e:	f001 fb4b 	bl	8027c08 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8026572:	bf00      	nop
 8026574:	3708      	adds	r7, #8
 8026576:	46bd      	mov	sp, r7
 8026578:	bd80      	pop	{r7, pc}

0802657a <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 802657a:	b580      	push	{r7, lr}
 802657c:	b086      	sub	sp, #24
 802657e:	af00      	add	r7, sp, #0
 8026580:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8026582:	f107 0308 	add.w	r3, r7, #8
 8026586:	6879      	ldr	r1, [r7, #4]
 8026588:	4618      	mov	r0, r3
 802658a:	f7fd fd21 	bl	8023fd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 802658e:	f107 0308 	add.w	r3, r7, #8
 8026592:	4619      	mov	r1, r3
 8026594:	6878      	ldr	r0, [r7, #4]
 8026596:	f001 fb6a 	bl	8027c6e <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 802659a:	bf00      	nop
 802659c:	3718      	adds	r7, #24
 802659e:	46bd      	mov	sp, r7
 80265a0:	bd80      	pop	{r7, pc}

080265a2 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80265a2:	b580      	push	{r7, lr}
 80265a4:	b082      	sub	sp, #8
 80265a6:	af00      	add	r7, sp, #0
 80265a8:	6078      	str	r0, [r7, #4]
 80265aa:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80265ac:	461a      	mov	r2, r3
 80265ae:	6839      	ldr	r1, [r7, #0]
 80265b0:	6878      	ldr	r0, [r7, #4]
 80265b2:	f001 fb8f 	bl	8027cd4 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80265b6:	bf00      	nop
 80265b8:	3708      	adds	r7, #8
 80265ba:	46bd      	mov	sp, r7
 80265bc:	bd80      	pop	{r7, pc}

080265be <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 80265be:	b580      	push	{r7, lr}
 80265c0:	b082      	sub	sp, #8
 80265c2:	af00      	add	r7, sp, #0
 80265c4:	6078      	str	r0, [r7, #4]
 80265c6:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 80265c8:	6839      	ldr	r1, [r7, #0]
 80265ca:	6878      	ldr	r0, [r7, #4]
 80265cc:	f001 fb8f 	bl	8027cee <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 80265d0:	bf00      	nop
 80265d2:	3708      	adds	r7, #8
 80265d4:	46bd      	mov	sp, r7
 80265d6:	bd80      	pop	{r7, pc}

080265d8 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80265d8:	b580      	push	{r7, lr}
 80265da:	b086      	sub	sp, #24
 80265dc:	af00      	add	r7, sp, #0
 80265de:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80265e0:	f107 0308 	add.w	r3, r7, #8
 80265e4:	6879      	ldr	r1, [r7, #4]
 80265e6:	4618      	mov	r0, r3
 80265e8:	f7fd fd95 	bl	8024116 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80265ec:	f107 0308 	add.w	r3, r7, #8
 80265f0:	4619      	mov	r1, r3
 80265f2:	6878      	ldr	r0, [r7, #4]
 80265f4:	f001 fbae 	bl	8027d54 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80265f8:	bf00      	nop
 80265fa:	3718      	adds	r7, #24
 80265fc:	46bd      	mov	sp, r7
 80265fe:	bd80      	pop	{r7, pc}

08026600 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8026600:	b580      	push	{r7, lr}
 8026602:	b082      	sub	sp, #8
 8026604:	af00      	add	r7, sp, #0
 8026606:	6078      	str	r0, [r7, #4]
 8026608:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 802660a:	461a      	mov	r2, r3
 802660c:	6839      	ldr	r1, [r7, #0]
 802660e:	6878      	ldr	r0, [r7, #4]
 8026610:	f001 fbd3 	bl	8027dba <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8026614:	bf00      	nop
 8026616:	3708      	adds	r7, #8
 8026618:	46bd      	mov	sp, r7
 802661a:	bd80      	pop	{r7, pc}

0802661c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 802661c:	b580      	push	{r7, lr}
 802661e:	b082      	sub	sp, #8
 8026620:	af00      	add	r7, sp, #0
 8026622:	6078      	str	r0, [r7, #4]
 8026624:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8026626:	6839      	ldr	r1, [r7, #0]
 8026628:	6878      	ldr	r0, [r7, #4]
 802662a:	f001 fbd3 	bl	8027dd4 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 802662e:	bf00      	nop
 8026630:	3708      	adds	r7, #8
 8026632:	46bd      	mov	sp, r7
 8026634:	bd80      	pop	{r7, pc}

08026636 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8026636:	b580      	push	{r7, lr}
 8026638:	b086      	sub	sp, #24
 802663a:	af00      	add	r7, sp, #0
 802663c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 802663e:	f107 0308 	add.w	r3, r7, #8
 8026642:	6879      	ldr	r1, [r7, #4]
 8026644:	4618      	mov	r0, r3
 8026646:	f7fe fcba 	bl	8024fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 802664a:	f107 0308 	add.w	r3, r7, #8
 802664e:	4619      	mov	r1, r3
 8026650:	6878      	ldr	r0, [r7, #4]
 8026652:	f7ff fc73 	bl	8025f3c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8026656:	bf00      	nop
 8026658:	3718      	adds	r7, #24
 802665a:	46bd      	mov	sp, r7
 802665c:	bd80      	pop	{r7, pc}

0802665e <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 802665e:	b580      	push	{r7, lr}
 8026660:	b082      	sub	sp, #8
 8026662:	af00      	add	r7, sp, #0
 8026664:	6078      	str	r0, [r7, #4]
 8026666:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8026668:	461a      	mov	r2, r3
 802666a:	6839      	ldr	r1, [r7, #0]
 802666c:	6878      	ldr	r0, [r7, #4]
 802666e:	f001 fbe4 	bl	8027e3a <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 8026672:	bf00      	nop
 8026674:	3708      	adds	r7, #8
 8026676:	46bd      	mov	sp, r7
 8026678:	bd80      	pop	{r7, pc}

0802667a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 802667a:	b580      	push	{r7, lr}
 802667c:	b082      	sub	sp, #8
 802667e:	af00      	add	r7, sp, #0
 8026680:	6078      	str	r0, [r7, #4]
 8026682:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8026684:	6839      	ldr	r1, [r7, #0]
 8026686:	6878      	ldr	r0, [r7, #4]
 8026688:	f001 fbe4 	bl	8027e54 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 802668c:	bf00      	nop
 802668e:	3708      	adds	r7, #8
 8026690:	46bd      	mov	sp, r7
 8026692:	bd80      	pop	{r7, pc}

08026694 <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8026694:	b580      	push	{r7, lr}
 8026696:	b086      	sub	sp, #24
 8026698:	af00      	add	r7, sp, #0
 802669a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 802669c:	f107 0308 	add.w	r3, r7, #8
 80266a0:	6879      	ldr	r1, [r7, #4]
 80266a2:	4618      	mov	r0, r3
 80266a4:	f7fe fd11 	bl	80250ca <_ZNSt5dequeIjSaIjEE5beginEv>
 80266a8:	f107 0308 	add.w	r3, r7, #8
 80266ac:	4619      	mov	r1, r3
 80266ae:	6878      	ldr	r0, [r7, #4]
 80266b0:	f001 fc03 	bl	8027eba <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 80266b4:	bf00      	nop
 80266b6:	3718      	adds	r7, #24
 80266b8:	46bd      	mov	sp, r7
 80266ba:	bd80      	pop	{r7, pc}

080266bc <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80266bc:	b580      	push	{r7, lr}
 80266be:	b082      	sub	sp, #8
 80266c0:	af00      	add	r7, sp, #0
 80266c2:	6078      	str	r0, [r7, #4]
 80266c4:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80266c6:	461a      	mov	r2, r3
 80266c8:	6839      	ldr	r1, [r7, #0]
 80266ca:	6878      	ldr	r0, [r7, #4]
 80266cc:	f001 fc28 	bl	8027f20 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80266d0:	bf00      	nop
 80266d2:	3708      	adds	r7, #8
 80266d4:	46bd      	mov	sp, r7
 80266d6:	bd80      	pop	{r7, pc}

080266d8 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80266d8:	b480      	push	{r7}
 80266da:	b083      	sub	sp, #12
 80266dc:	af00      	add	r7, sp, #0
 80266de:	6078      	str	r0, [r7, #4]
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	4618      	mov	r0, r3
 80266e4:	370c      	adds	r7, #12
 80266e6:	46bd      	mov	sp, r7
 80266e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ec:	4770      	bx	lr

080266ee <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80266ee:	b480      	push	{r7}
 80266f0:	b083      	sub	sp, #12
 80266f2:	af00      	add	r7, sp, #0
 80266f4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80266f6:	687b      	ldr	r3, [r7, #4]
 80266f8:	2200      	movs	r2, #0
 80266fa:	601a      	str	r2, [r3, #0]
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	2200      	movs	r2, #0
 8026700:	605a      	str	r2, [r3, #4]
 8026702:	687b      	ldr	r3, [r7, #4]
 8026704:	2200      	movs	r2, #0
 8026706:	609a      	str	r2, [r3, #8]
 8026708:	687b      	ldr	r3, [r7, #4]
 802670a:	2200      	movs	r2, #0
 802670c:	60da      	str	r2, [r3, #12]
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	4618      	mov	r0, r3
 8026712:	370c      	adds	r7, #12
 8026714:	46bd      	mov	sp, r7
 8026716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802671a:	4770      	bx	lr

0802671c <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 802671c:	b580      	push	{r7, lr}
 802671e:	b082      	sub	sp, #8
 8026720:	af00      	add	r7, sp, #0
 8026722:	6078      	str	r0, [r7, #4]
 8026724:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026726:	2200      	movs	r2, #0
 8026728:	6839      	ldr	r1, [r7, #0]
 802672a:	6878      	ldr	r0, [r7, #4]
 802672c:	f001 fc05 	bl	8027f3a <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 8026730:	4603      	mov	r3, r0
 8026732:	4618      	mov	r0, r3
 8026734:	3708      	adds	r7, #8
 8026736:	46bd      	mov	sp, r7
 8026738:	bd80      	pop	{r7, pc}

0802673a <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802673a:	b580      	push	{r7, lr}
 802673c:	b084      	sub	sp, #16
 802673e:	af00      	add	r7, sp, #0
 8026740:	60f8      	str	r0, [r7, #12]
 8026742:	60b9      	str	r1, [r7, #8]
 8026744:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026746:	687a      	ldr	r2, [r7, #4]
 8026748:	68b9      	ldr	r1, [r7, #8]
 802674a:	68f8      	ldr	r0, [r7, #12]
 802674c:	f001 fc13 	bl	8027f76 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 8026750:	bf00      	nop
 8026752:	3710      	adds	r7, #16
 8026754:	46bd      	mov	sp, r7
 8026756:	bd80      	pop	{r7, pc}

08026758 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026758:	b480      	push	{r7}
 802675a:	b083      	sub	sp, #12
 802675c:	af00      	add	r7, sp, #0
 802675e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8026760:	687b      	ldr	r3, [r7, #4]
 8026762:	4618      	mov	r0, r3
 8026764:	370c      	adds	r7, #12
 8026766:	46bd      	mov	sp, r7
 8026768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802676c:	4770      	bx	lr

0802676e <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 802676e:	b580      	push	{r7, lr}
 8026770:	b082      	sub	sp, #8
 8026772:	af00      	add	r7, sp, #0
 8026774:	6078      	str	r0, [r7, #4]
 8026776:	6039      	str	r1, [r7, #0]
 8026778:	6878      	ldr	r0, [r7, #4]
 802677a:	f001 fc0f 	bl	8027f9c <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	4618      	mov	r0, r3
 8026782:	3708      	adds	r7, #8
 8026784:	46bd      	mov	sp, r7
 8026786:	bd80      	pop	{r7, pc}

08026788 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026788:	b480      	push	{r7}
 802678a:	b083      	sub	sp, #12
 802678c:	af00      	add	r7, sp, #0
 802678e:	6078      	str	r0, [r7, #4]
 8026790:	687b      	ldr	r3, [r7, #4]
 8026792:	4618      	mov	r0, r3
 8026794:	370c      	adds	r7, #12
 8026796:	46bd      	mov	sp, r7
 8026798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802679c:	4770      	bx	lr

0802679e <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 802679e:	b580      	push	{r7, lr}
 80267a0:	b084      	sub	sp, #16
 80267a2:	af00      	add	r7, sp, #0
 80267a4:	60f8      	str	r0, [r7, #12]
 80267a6:	60b9      	str	r1, [r7, #8]
 80267a8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80267aa:	687b      	ldr	r3, [r7, #4]
 80267ac:	009b      	lsls	r3, r3, #2
 80267ae:	4619      	mov	r1, r3
 80267b0:	68b8      	ldr	r0, [r7, #8]
 80267b2:	f018 fb8b 	bl	803eecc <_ZdlPvj>
      }
 80267b6:	bf00      	nop
 80267b8:	3710      	adds	r7, #16
 80267ba:	46bd      	mov	sp, r7
 80267bc:	bd80      	pop	{r7, pc}

080267be <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80267be:	b580      	push	{r7, lr}
 80267c0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80267c2:	2014      	movs	r0, #20
 80267c4:	f7fa fb8b 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80267c8:	4603      	mov	r3, r0
 80267ca:	4618      	mov	r0, r3
 80267cc:	bd80      	pop	{r7, pc}

080267ce <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80267ce:	b580      	push	{r7, lr}
 80267d0:	b084      	sub	sp, #16
 80267d2:	af00      	add	r7, sp, #0
 80267d4:	60f8      	str	r0, [r7, #12]
 80267d6:	60b9      	str	r1, [r7, #8]
 80267d8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80267da:	68b9      	ldr	r1, [r7, #8]
 80267dc:	68f8      	ldr	r0, [r7, #12]
 80267de:	f001 fbe8 	bl	8027fb2 <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 80267e2:	bf00      	nop
 80267e4:	3710      	adds	r7, #16
 80267e6:	46bd      	mov	sp, r7
 80267e8:	bd80      	pop	{r7, pc}

080267ea <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80267ea:	b580      	push	{r7, lr}
 80267ec:	b082      	sub	sp, #8
 80267ee:	af00      	add	r7, sp, #0
 80267f0:	6078      	str	r0, [r7, #4]
 80267f2:	6878      	ldr	r0, [r7, #4]
 80267f4:	f001 fbea 	bl	8027fcc <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 80267f8:	687b      	ldr	r3, [r7, #4]
 80267fa:	4618      	mov	r0, r3
 80267fc:	3708      	adds	r7, #8
 80267fe:	46bd      	mov	sp, r7
 8026800:	bd80      	pop	{r7, pc}

08026802 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8026802:	b580      	push	{r7, lr}
 8026804:	b082      	sub	sp, #8
 8026806:	af00      	add	r7, sp, #0
 8026808:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 802680a:	687b      	ldr	r3, [r7, #4]
 802680c:	2200      	movs	r2, #0
 802680e:	601a      	str	r2, [r3, #0]
 8026810:	687b      	ldr	r3, [r7, #4]
 8026812:	2200      	movs	r2, #0
 8026814:	605a      	str	r2, [r3, #4]
 8026816:	687b      	ldr	r3, [r7, #4]
 8026818:	3308      	adds	r3, #8
 802681a:	4618      	mov	r0, r3
 802681c:	f001 fbe1 	bl	8027fe2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	3318      	adds	r3, #24
 8026824:	4618      	mov	r0, r3
 8026826:	f001 fbdc 	bl	8027fe2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	4618      	mov	r0, r3
 802682e:	3708      	adds	r7, #8
 8026830:	46bd      	mov	sp, r7
 8026832:	bd80      	pop	{r7, pc}

08026834 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026834:	b480      	push	{r7}
 8026836:	b083      	sub	sp, #12
 8026838:	af00      	add	r7, sp, #0
 802683a:	6078      	str	r0, [r7, #4]
 802683c:	687b      	ldr	r3, [r7, #4]
 802683e:	4618      	mov	r0, r3
 8026840:	370c      	adds	r7, #12
 8026842:	46bd      	mov	sp, r7
 8026844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026848:	4770      	bx	lr

0802684a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 802684a:	b590      	push	{r4, r7, lr}
 802684c:	b085      	sub	sp, #20
 802684e:	af00      	add	r7, sp, #0
 8026850:	6078      	str	r0, [r7, #4]
 8026852:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026854:	f107 030c 	add.w	r3, r7, #12
 8026858:	6879      	ldr	r1, [r7, #4]
 802685a:	4618      	mov	r0, r3
 802685c:	f000 f858 	bl	8026910 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026860:	f107 030c 	add.w	r3, r7, #12
 8026864:	6839      	ldr	r1, [r7, #0]
 8026866:	4618      	mov	r0, r3
 8026868:	f001 fbd2 	bl	8028010 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 802686c:	4604      	mov	r4, r0
 802686e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026870:	f107 030c 	add.w	r3, r7, #12
 8026874:	4618      	mov	r0, r3
 8026876:	f000 f85c 	bl	8026932 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802687a:	4623      	mov	r3, r4
      }
 802687c:	4618      	mov	r0, r3
 802687e:	3714      	adds	r7, #20
 8026880:	46bd      	mov	sp, r7
 8026882:	bd90      	pop	{r4, r7, pc}

08026884 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8026884:	b580      	push	{r7, lr}
 8026886:	b086      	sub	sp, #24
 8026888:	af00      	add	r7, sp, #0
 802688a:	60f8      	str	r0, [r7, #12]
 802688c:	60b9      	str	r1, [r7, #8]
 802688e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8026890:	68bb      	ldr	r3, [r7, #8]
 8026892:	617b      	str	r3, [r7, #20]
 8026894:	697a      	ldr	r2, [r7, #20]
 8026896:	687b      	ldr	r3, [r7, #4]
 8026898:	429a      	cmp	r2, r3
 802689a:	d209      	bcs.n	80268b0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 802689c:	68f8      	ldr	r0, [r7, #12]
 802689e:	f000 f9cc 	bl	8026c3a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 80268a2:	4602      	mov	r2, r0
 80268a4:	697b      	ldr	r3, [r7, #20]
 80268a6:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80268a8:	697b      	ldr	r3, [r7, #20]
 80268aa:	3304      	adds	r3, #4
 80268ac:	617b      	str	r3, [r7, #20]
 80268ae:	e7f1      	b.n	8026894 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 80268b0:	bf00      	nop
 80268b2:	3718      	adds	r7, #24
 80268b4:	46bd      	mov	sp, r7
 80268b6:	bd80      	pop	{r7, pc}

080268b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80268b8:	b590      	push	{r4, r7, lr}
 80268ba:	b083      	sub	sp, #12
 80268bc:	af00      	add	r7, sp, #0
 80268be:	6078      	str	r0, [r7, #4]
 80268c0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80268c2:	687b      	ldr	r3, [r7, #4]
 80268c4:	683a      	ldr	r2, [r7, #0]
 80268c6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80268c8:	683b      	ldr	r3, [r7, #0]
 80268ca:	681a      	ldr	r2, [r3, #0]
 80268cc:	687b      	ldr	r3, [r7, #4]
 80268ce:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80268d0:	687b      	ldr	r3, [r7, #4]
 80268d2:	685c      	ldr	r4, [r3, #4]
 80268d4:	f000 facf 	bl	8026e76 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 80268d8:	4603      	mov	r3, r0
 80268da:	011b      	lsls	r3, r3, #4
 80268dc:	18e2      	adds	r2, r4, r3
 80268de:	687b      	ldr	r3, [r7, #4]
 80268e0:	609a      	str	r2, [r3, #8]
      }
 80268e2:	bf00      	nop
 80268e4:	370c      	adds	r7, #12
 80268e6:	46bd      	mov	sp, r7
 80268e8:	bd90      	pop	{r4, r7, pc}

080268ea <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80268ea:	b590      	push	{r4, r7, lr}
 80268ec:	b083      	sub	sp, #12
 80268ee:	af00      	add	r7, sp, #0
 80268f0:	6078      	str	r0, [r7, #4]
 80268f2:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80268f4:	687c      	ldr	r4, [r7, #4]
 80268f6:	2010      	movs	r0, #16
 80268f8:	f7fa faf1 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80268fc:	4603      	mov	r3, r0
 80268fe:	461a      	mov	r2, r3
 8026900:	6839      	ldr	r1, [r7, #0]
 8026902:	4620      	mov	r0, r4
 8026904:	f001 fb93 	bl	802802e <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 8026908:	bf00      	nop
 802690a:	370c      	adds	r7, #12
 802690c:	46bd      	mov	sp, r7
 802690e:	bd90      	pop	{r4, r7, pc}

08026910 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8026910:	b580      	push	{r7, lr}
 8026912:	b082      	sub	sp, #8
 8026914:	af00      	add	r7, sp, #0
 8026916:	6078      	str	r0, [r7, #4]
 8026918:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 802691a:	6838      	ldr	r0, [r7, #0]
 802691c:	f001 fb96 	bl	802804c <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8026920:	4603      	mov	r3, r0
 8026922:	4619      	mov	r1, r3
 8026924:	6878      	ldr	r0, [r7, #4]
 8026926:	f001 fb9c 	bl	8028062 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 802692a:	6878      	ldr	r0, [r7, #4]
 802692c:	3708      	adds	r7, #8
 802692e:	46bd      	mov	sp, r7
 8026930:	bd80      	pop	{r7, pc}

08026932 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8026932:	b580      	push	{r7, lr}
 8026934:	b082      	sub	sp, #8
 8026936:	af00      	add	r7, sp, #0
 8026938:	6078      	str	r0, [r7, #4]
 802693a:	6878      	ldr	r0, [r7, #4]
 802693c:	f001 fb9e 	bl	802807c <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	4618      	mov	r0, r3
 8026944:	3708      	adds	r7, #8
 8026946:	46bd      	mov	sp, r7
 8026948:	bd80      	pop	{r7, pc}

0802694a <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802694a:	b580      	push	{r7, lr}
 802694c:	b084      	sub	sp, #16
 802694e:	af00      	add	r7, sp, #0
 8026950:	60f8      	str	r0, [r7, #12]
 8026952:	60b9      	str	r1, [r7, #8]
 8026954:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026956:	687a      	ldr	r2, [r7, #4]
 8026958:	68b9      	ldr	r1, [r7, #8]
 802695a:	68f8      	ldr	r0, [r7, #12]
 802695c:	f001 fb99 	bl	8028092 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 8026960:	bf00      	nop
 8026962:	3710      	adds	r7, #16
 8026964:	46bd      	mov	sp, r7
 8026966:	bd80      	pop	{r7, pc}

08026968 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8026968:	b580      	push	{r7, lr}
 802696a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802696c:	2010      	movs	r0, #16
 802696e:	f7fa fab6 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026972:	4603      	mov	r3, r0
 8026974:	4618      	mov	r0, r3
 8026976:	bd80      	pop	{r7, pc}

08026978 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8026978:	b580      	push	{r7, lr}
 802697a:	b084      	sub	sp, #16
 802697c:	af00      	add	r7, sp, #0
 802697e:	60f8      	str	r0, [r7, #12]
 8026980:	60b9      	str	r1, [r7, #8]
 8026982:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8026984:	68b9      	ldr	r1, [r7, #8]
 8026986:	68f8      	ldr	r0, [r7, #12]
 8026988:	f001 fb93 	bl	80280b2 <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 802698c:	bf00      	nop
 802698e:	3710      	adds	r7, #16
 8026990:	46bd      	mov	sp, r7
 8026992:	bd80      	pop	{r7, pc}

08026994 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8026994:	b580      	push	{r7, lr}
 8026996:	b084      	sub	sp, #16
 8026998:	af00      	add	r7, sp, #0
 802699a:	60f8      	str	r0, [r7, #12]
 802699c:	60b9      	str	r1, [r7, #8]
 802699e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80269a0:	6879      	ldr	r1, [r7, #4]
 80269a2:	68b8      	ldr	r0, [r7, #8]
 80269a4:	f018 fa92 	bl	803eecc <_ZdlPvj>
      }
 80269a8:	bf00      	nop
 80269aa:	3710      	adds	r7, #16
 80269ac:	46bd      	mov	sp, r7
 80269ae:	bd80      	pop	{r7, pc}

080269b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80269b0:	b480      	push	{r7}
 80269b2:	b083      	sub	sp, #12
 80269b4:	af00      	add	r7, sp, #0
 80269b6:	6078      	str	r0, [r7, #4]
 80269b8:	6039      	str	r1, [r7, #0]
 80269ba:	bf00      	nop
 80269bc:	370c      	adds	r7, #12
 80269be:	46bd      	mov	sp, r7
 80269c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269c4:	4770      	bx	lr

080269c6 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80269c6:	b580      	push	{r7, lr}
 80269c8:	b084      	sub	sp, #16
 80269ca:	af00      	add	r7, sp, #0
 80269cc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80269ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80269d2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80269d4:	6878      	ldr	r0, [r7, #4]
 80269d6:	f001 fb79 	bl	80280cc <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 80269da:	4603      	mov	r3, r0
 80269dc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80269de:	f107 0208 	add.w	r2, r7, #8
 80269e2:	f107 030c 	add.w	r3, r7, #12
 80269e6:	4611      	mov	r1, r2
 80269e8:	4618      	mov	r0, r3
 80269ea:	f001 fb7b 	bl	80280e4 <_ZSt3minIjERKT_S2_S2_>
 80269ee:	4603      	mov	r3, r0
 80269f0:	681b      	ldr	r3, [r3, #0]
      }
 80269f2:	4618      	mov	r0, r3
 80269f4:	3710      	adds	r7, #16
 80269f6:	46bd      	mov	sp, r7
 80269f8:	bd80      	pop	{r7, pc}

080269fa <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80269fa:	b590      	push	{r4, r7, lr}
 80269fc:	b08b      	sub	sp, #44	; 0x2c
 80269fe:	af00      	add	r7, sp, #0
 8026a00:	60f8      	str	r0, [r7, #12]
 8026a02:	60b9      	str	r1, [r7, #8]
 8026a04:	4613      	mov	r3, r2
 8026a06:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026a08:	68fb      	ldr	r3, [r7, #12]
 8026a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026a0c:	68fb      	ldr	r3, [r7, #12]
 8026a0e:	695b      	ldr	r3, [r3, #20]
 8026a10:	1ad3      	subs	r3, r2, r3
 8026a12:	109b      	asrs	r3, r3, #2
 8026a14:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8026a16:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8026a18:	68bb      	ldr	r3, [r7, #8]
 8026a1a:	6a3a      	ldr	r2, [r7, #32]
 8026a1c:	4413      	add	r3, r2
 8026a1e:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8026a20:	68fb      	ldr	r3, [r7, #12]
 8026a22:	685a      	ldr	r2, [r3, #4]
 8026a24:	69fb      	ldr	r3, [r7, #28]
 8026a26:	005b      	lsls	r3, r3, #1
 8026a28:	429a      	cmp	r2, r3
 8026a2a:	d92d      	bls.n	8026a88 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026a2c:	68fb      	ldr	r3, [r7, #12]
 8026a2e:	681a      	ldr	r2, [r3, #0]
 8026a30:	68fb      	ldr	r3, [r7, #12]
 8026a32:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8026a34:	69fb      	ldr	r3, [r7, #28]
 8026a36:	1acb      	subs	r3, r1, r3
 8026a38:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026a3a:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026a3c:	79fb      	ldrb	r3, [r7, #7]
 8026a3e:	2b00      	cmp	r3, #0
 8026a40:	d002      	beq.n	8026a48 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8026a42:	68bb      	ldr	r3, [r7, #8]
 8026a44:	009b      	lsls	r3, r3, #2
 8026a46:	e000      	b.n	8026a4a <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8026a48:	2300      	movs	r3, #0
 8026a4a:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026a4c:	4413      	add	r3, r2
 8026a4e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026a50:	68fb      	ldr	r3, [r7, #12]
 8026a52:	695b      	ldr	r3, [r3, #20]
 8026a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026a56:	429a      	cmp	r2, r3
 8026a58:	d209      	bcs.n	8026a6e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8026a5a:	68fb      	ldr	r3, [r7, #12]
 8026a5c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8026a5e:	68fb      	ldr	r3, [r7, #12]
 8026a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026a62:	3304      	adds	r3, #4
 8026a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026a66:	4619      	mov	r1, r3
 8026a68:	f001 fb50 	bl	802810c <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8026a6c:	e048      	b.n	8026b00 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026a6e:	68fb      	ldr	r3, [r7, #12]
 8026a70:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026a72:	68fb      	ldr	r3, [r7, #12]
 8026a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026a76:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8026a78:	6a3b      	ldr	r3, [r7, #32]
 8026a7a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026a7e:	4413      	add	r3, r2
 8026a80:	461a      	mov	r2, r3
 8026a82:	f001 fb5b 	bl	802813c <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 8026a86:	e03b      	b.n	8026b00 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026a88:	68fb      	ldr	r3, [r7, #12]
 8026a8a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8026a8c:	68fb      	ldr	r3, [r7, #12]
 8026a8e:	3304      	adds	r3, #4
 8026a90:	f107 0208 	add.w	r2, r7, #8
 8026a94:	4611      	mov	r1, r2
 8026a96:	4618      	mov	r0, r3
 8026a98:	f7fe fc49 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 8026a9c:	4603      	mov	r3, r0
 8026a9e:	681b      	ldr	r3, [r3, #0]
 8026aa0:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026aa2:	3302      	adds	r3, #2
 8026aa4:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026aa6:	68fb      	ldr	r3, [r7, #12]
 8026aa8:	69b9      	ldr	r1, [r7, #24]
 8026aaa:	4618      	mov	r0, r3
 8026aac:	f7fe fc53 	bl	8025356 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8026ab0:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026ab2:	69ba      	ldr	r2, [r7, #24]
 8026ab4:	69fb      	ldr	r3, [r7, #28]
 8026ab6:	1ad3      	subs	r3, r2, r3
 8026ab8:	085b      	lsrs	r3, r3, #1
 8026aba:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026abc:	79fb      	ldrb	r3, [r7, #7]
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d002      	beq.n	8026ac8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8026ac2:	68bb      	ldr	r3, [r7, #8]
 8026ac4:	009b      	lsls	r3, r3, #2
 8026ac6:	e000      	b.n	8026aca <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8026ac8:	2300      	movs	r3, #0
 8026aca:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026acc:	697a      	ldr	r2, [r7, #20]
 8026ace:	4413      	add	r3, r2
 8026ad0:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026ad2:	68fb      	ldr	r3, [r7, #12]
 8026ad4:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026ad6:	68fb      	ldr	r3, [r7, #12]
 8026ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026ada:	3304      	adds	r3, #4
 8026adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026ade:	4619      	mov	r1, r3
 8026ae0:	f001 fb14 	bl	802810c <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026ae4:	68f8      	ldr	r0, [r7, #12]
 8026ae6:	68fb      	ldr	r3, [r7, #12]
 8026ae8:	6819      	ldr	r1, [r3, #0]
 8026aea:	68fb      	ldr	r3, [r7, #12]
 8026aec:	685b      	ldr	r3, [r3, #4]
 8026aee:	461a      	mov	r2, r3
 8026af0:	f7fd fa52 	bl	8023f98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8026af4:	68fb      	ldr	r3, [r7, #12]
 8026af6:	697a      	ldr	r2, [r7, #20]
 8026af8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8026afa:	68fb      	ldr	r3, [r7, #12]
 8026afc:	69ba      	ldr	r2, [r7, #24]
 8026afe:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8026b00:	68fb      	ldr	r3, [r7, #12]
 8026b02:	3308      	adds	r3, #8
 8026b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026b06:	4618      	mov	r0, r3
 8026b08:	f7fe fc5c 	bl	80253c4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8026b0c:	68fb      	ldr	r3, [r7, #12]
 8026b0e:	f103 0018 	add.w	r0, r3, #24
 8026b12:	6a3a      	ldr	r2, [r7, #32]
 8026b14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8026b18:	4413      	add	r3, r2
 8026b1a:	009b      	lsls	r3, r3, #2
 8026b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026b1e:	4413      	add	r3, r2
 8026b20:	4619      	mov	r1, r3
 8026b22:	f7fe fc4f 	bl	80253c4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8026b26:	bf00      	nop
 8026b28:	372c      	adds	r7, #44	; 0x2c
 8026b2a:	46bd      	mov	sp, r7
 8026b2c:	bd90      	pop	{r4, r7, pc}

08026b2e <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8026b2e:	b580      	push	{r7, lr}
 8026b30:	b082      	sub	sp, #8
 8026b32:	af00      	add	r7, sp, #0
 8026b34:	6078      	str	r0, [r7, #4]
 8026b36:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026b38:	2200      	movs	r2, #0
 8026b3a:	6839      	ldr	r1, [r7, #0]
 8026b3c:	6878      	ldr	r0, [r7, #4]
 8026b3e:	f001 fb15 	bl	802816c <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 8026b42:	4603      	mov	r3, r0
 8026b44:	4618      	mov	r0, r3
 8026b46:	3708      	adds	r7, #8
 8026b48:	46bd      	mov	sp, r7
 8026b4a:	bd80      	pop	{r7, pc}

08026b4c <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8026b4c:	b580      	push	{r7, lr}
 8026b4e:	b082      	sub	sp, #8
 8026b50:	af00      	add	r7, sp, #0
 8026b52:	6078      	str	r0, [r7, #4]
 8026b54:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8026b56:	687b      	ldr	r3, [r7, #4]
 8026b58:	6839      	ldr	r1, [r7, #0]
 8026b5a:	4618      	mov	r0, r3
 8026b5c:	f001 fb27 	bl	80281ae <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	4618      	mov	r0, r3
 8026b64:	3708      	adds	r7, #8
 8026b66:	46bd      	mov	sp, r7
 8026b68:	bd80      	pop	{r7, pc}

08026b6a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8026b6a:	b480      	push	{r7}
 8026b6c:	b083      	sub	sp, #12
 8026b6e:	af00      	add	r7, sp, #0
 8026b70:	6078      	str	r0, [r7, #4]
 8026b72:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8026b74:	683b      	ldr	r3, [r7, #0]
 8026b76:	681a      	ldr	r2, [r3, #0]
 8026b78:	687b      	ldr	r3, [r7, #4]
 8026b7a:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8026b7c:	683b      	ldr	r3, [r7, #0]
 8026b7e:	685a      	ldr	r2, [r3, #4]
 8026b80:	687b      	ldr	r3, [r7, #4]
 8026b82:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8026b84:	683b      	ldr	r3, [r7, #0]
 8026b86:	689a      	ldr	r2, [r3, #8]
 8026b88:	687b      	ldr	r3, [r7, #4]
 8026b8a:	609a      	str	r2, [r3, #8]
	}
 8026b8c:	bf00      	nop
 8026b8e:	370c      	adds	r7, #12
 8026b90:	46bd      	mov	sp, r7
 8026b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b96:	4770      	bx	lr

08026b98 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026b98:	b580      	push	{r7, lr}
 8026b9a:	b084      	sub	sp, #16
 8026b9c:	af00      	add	r7, sp, #0
 8026b9e:	60f8      	str	r0, [r7, #12]
 8026ba0:	60b9      	str	r1, [r7, #8]
 8026ba2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8026ba4:	68b8      	ldr	r0, [r7, #8]
 8026ba6:	f001 fb14 	bl	80281d2 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8026baa:	bf00      	nop
 8026bac:	3710      	adds	r7, #16
 8026bae:	46bd      	mov	sp, r7
 8026bb0:	bd80      	pop	{r7, pc}

08026bb2 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8026bb2:	b590      	push	{r4, r7, lr}
 8026bb4:	b085      	sub	sp, #20
 8026bb6:	af00      	add	r7, sp, #0
 8026bb8:	60f8      	str	r0, [r7, #12]
 8026bba:	60b9      	str	r1, [r7, #8]
 8026bbc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8026bbe:	6878      	ldr	r0, [r7, #4]
 8026bc0:	f7fd fc0f 	bl	80243e2 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8026bc4:	4604      	mov	r4, r0
 8026bc6:	68bb      	ldr	r3, [r7, #8]
 8026bc8:	4619      	mov	r1, r3
 8026bca:	2010      	movs	r0, #16
 8026bcc:	f7fa f97b 	bl	8020ec6 <_ZnwjPv>
 8026bd0:	4603      	mov	r3, r0
 8026bd2:	4621      	mov	r1, r4
 8026bd4:	4618      	mov	r0, r3
 8026bd6:	f7fa fb50 	bl	802127a <_ZN8ResponceC1EOS_>
 8026bda:	bf00      	nop
 8026bdc:	3714      	adds	r7, #20
 8026bde:	46bd      	mov	sp, r7
 8026be0:	bd90      	pop	{r4, r7, pc}

08026be2 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8026be2:	b580      	push	{r7, lr}
 8026be4:	b082      	sub	sp, #8
 8026be6:	af00      	add	r7, sp, #0
 8026be8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8026bea:	687b      	ldr	r3, [r7, #4]
 8026bec:	4618      	mov	r0, r3
 8026bee:	f001 fa2d 	bl	802804c <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8026bf2:	4603      	mov	r3, r0
 8026bf4:	4618      	mov	r0, r3
 8026bf6:	f001 faf7 	bl	80281e8 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 8026bfa:	4603      	mov	r3, r0
 8026bfc:	4618      	mov	r0, r3
 8026bfe:	3708      	adds	r7, #8
 8026c00:	46bd      	mov	sp, r7
 8026c02:	bd80      	pop	{r7, pc}

08026c04 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8026c04:	b580      	push	{r7, lr}
 8026c06:	b082      	sub	sp, #8
 8026c08:	af00      	add	r7, sp, #0
 8026c0a:	6078      	str	r0, [r7, #4]
 8026c0c:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026c0e:	683b      	ldr	r3, [r7, #0]
 8026c10:	1c5a      	adds	r2, r3, #1
 8026c12:	687b      	ldr	r3, [r7, #4]
 8026c14:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8026c16:	6879      	ldr	r1, [r7, #4]
 8026c18:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026c1a:	6879      	ldr	r1, [r7, #4]
 8026c1c:	6809      	ldr	r1, [r1, #0]
 8026c1e:	1a41      	subs	r1, r0, r1
 8026c20:	1089      	asrs	r1, r1, #2
 8026c22:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026c24:	429a      	cmp	r2, r3
 8026c26:	d904      	bls.n	8026c32 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8026c28:	2200      	movs	r2, #0
 8026c2a:	6839      	ldr	r1, [r7, #0]
 8026c2c:	6878      	ldr	r0, [r7, #4]
 8026c2e:	f001 faf5 	bl	802821c <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 8026c32:	bf00      	nop
 8026c34:	3708      	adds	r7, #8
 8026c36:	46bd      	mov	sp, r7
 8026c38:	bd80      	pop	{r7, pc}

08026c3a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8026c3a:	b590      	push	{r4, r7, lr}
 8026c3c:	b083      	sub	sp, #12
 8026c3e:	af00      	add	r7, sp, #0
 8026c40:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8026c42:	687c      	ldr	r4, [r7, #4]
 8026c44:	2010      	movs	r0, #16
 8026c46:	f7fa f94a 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026c4a:	4603      	mov	r3, r0
 8026c4c:	4619      	mov	r1, r3
 8026c4e:	4620      	mov	r0, r4
 8026c50:	f001 fb7e 	bl	8028350 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 8026c54:	4603      	mov	r3, r0
      }
 8026c56:	4618      	mov	r0, r3
 8026c58:	370c      	adds	r7, #12
 8026c5a:	46bd      	mov	sp, r7
 8026c5c:	bd90      	pop	{r4, r7, pc}

08026c5e <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8026c5e:	b580      	push	{r7, lr}
 8026c60:	b082      	sub	sp, #8
 8026c62:	af00      	add	r7, sp, #0
 8026c64:	6078      	str	r0, [r7, #4]
 8026c66:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8026c68:	6838      	ldr	r0, [r7, #0]
 8026c6a:	f7fa fa6b 	bl	8021144 <_ZN8ResponceD1Ev>
 8026c6e:	bf00      	nop
 8026c70:	3708      	adds	r7, #8
 8026c72:	46bd      	mov	sp, r7
 8026c74:	bd80      	pop	{r7, pc}

08026c76 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026c76:	b580      	push	{r7, lr}
 8026c78:	b084      	sub	sp, #16
 8026c7a:	af00      	add	r7, sp, #0
 8026c7c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8026c7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026c82:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8026c84:	6878      	ldr	r0, [r7, #4]
 8026c86:	f001 fb72 	bl	802836e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8026c8a:	4603      	mov	r3, r0
 8026c8c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026c8e:	f107 0208 	add.w	r2, r7, #8
 8026c92:	f107 030c 	add.w	r3, r7, #12
 8026c96:	4611      	mov	r1, r2
 8026c98:	4618      	mov	r0, r3
 8026c9a:	f001 fa23 	bl	80280e4 <_ZSt3minIjERKT_S2_S2_>
 8026c9e:	4603      	mov	r3, r0
 8026ca0:	681b      	ldr	r3, [r3, #0]
      }
 8026ca2:	4618      	mov	r0, r3
 8026ca4:	3710      	adds	r7, #16
 8026ca6:	46bd      	mov	sp, r7
 8026ca8:	bd80      	pop	{r7, pc}

08026caa <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8026caa:	b580      	push	{r7, lr}
 8026cac:	b084      	sub	sp, #16
 8026cae:	af00      	add	r7, sp, #0
 8026cb0:	6078      	str	r0, [r7, #4]
 8026cb2:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8026cb4:	2301      	movs	r3, #1
 8026cb6:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8026cb8:	6839      	ldr	r1, [r7, #0]
 8026cba:	6878      	ldr	r0, [r7, #4]
 8026cbc:	f001 fb63 	bl	8028386 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8026cc0:	4603      	mov	r3, r0
    }
 8026cc2:	4618      	mov	r0, r3
 8026cc4:	3710      	adds	r7, #16
 8026cc6:	46bd      	mov	sp, r7
 8026cc8:	bd80      	pop	{r7, pc}

08026cca <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8026cca:	b580      	push	{r7, lr}
 8026ccc:	b082      	sub	sp, #8
 8026cce:	af00      	add	r7, sp, #0
 8026cd0:	6078      	str	r0, [r7, #4]
 8026cd2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026cd4:	2200      	movs	r2, #0
 8026cd6:	6839      	ldr	r1, [r7, #0]
 8026cd8:	6878      	ldr	r0, [r7, #4]
 8026cda:	f001 fb67 	bl	80283ac <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8026cde:	4603      	mov	r3, r0
 8026ce0:	4618      	mov	r0, r3
 8026ce2:	3708      	adds	r7, #8
 8026ce4:	46bd      	mov	sp, r7
 8026ce6:	bd80      	pop	{r7, pc}

08026ce8 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8026ce8:	b580      	push	{r7, lr}
 8026cea:	b084      	sub	sp, #16
 8026cec:	af00      	add	r7, sp, #0
 8026cee:	60f8      	str	r0, [r7, #12]
 8026cf0:	60b9      	str	r1, [r7, #8]
 8026cf2:	607a      	str	r2, [r7, #4]
 8026cf4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8026cf6:	683b      	ldr	r3, [r7, #0]
 8026cf8:	687a      	ldr	r2, [r7, #4]
 8026cfa:	68b9      	ldr	r1, [r7, #8]
 8026cfc:	68f8      	ldr	r0, [r7, #12]
 8026cfe:	f001 fb71 	bl	80283e4 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8026d02:	4603      	mov	r3, r0
      }
 8026d04:	4618      	mov	r0, r3
 8026d06:	3710      	adds	r7, #16
 8026d08:	46bd      	mov	sp, r7
 8026d0a:	bd80      	pop	{r7, pc}

08026d0c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8026d0c:	b580      	push	{r7, lr}
 8026d0e:	b084      	sub	sp, #16
 8026d10:	af00      	add	r7, sp, #0
 8026d12:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8026d14:	f107 030c 	add.w	r3, r7, #12
 8026d18:	6879      	ldr	r1, [r7, #4]
 8026d1a:	4618      	mov	r0, r3
 8026d1c:	f001 fb7f 	bl	802841e <_ZNSt13move_iteratorIPhEC1ES0_>
 8026d20:	68fb      	ldr	r3, [r7, #12]
 8026d22:	4618      	mov	r0, r3
 8026d24:	3710      	adds	r7, #16
 8026d26:	46bd      	mov	sp, r7
 8026d28:	bd80      	pop	{r7, pc}

08026d2a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8026d2a:	b580      	push	{r7, lr}
 8026d2c:	b084      	sub	sp, #16
 8026d2e:	af00      	add	r7, sp, #0
 8026d30:	60f8      	str	r0, [r7, #12]
 8026d32:	60b9      	str	r1, [r7, #8]
 8026d34:	607a      	str	r2, [r7, #4]
 8026d36:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8026d38:	687a      	ldr	r2, [r7, #4]
 8026d3a:	68b9      	ldr	r1, [r7, #8]
 8026d3c:	68f8      	ldr	r0, [r7, #12]
 8026d3e:	f001 fb80 	bl	8028442 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8026d42:	4603      	mov	r3, r0
 8026d44:	4618      	mov	r0, r3
 8026d46:	3710      	adds	r7, #16
 8026d48:	46bd      	mov	sp, r7
 8026d4a:	bd80      	pop	{r7, pc}

08026d4c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8026d4c:	b580      	push	{r7, lr}
 8026d4e:	b086      	sub	sp, #24
 8026d50:	af00      	add	r7, sp, #0
 8026d52:	60f8      	str	r0, [r7, #12]
 8026d54:	60b9      	str	r1, [r7, #8]
 8026d56:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8026d58:	2301      	movs	r3, #1
 8026d5a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8026d5c:	687a      	ldr	r2, [r7, #4]
 8026d5e:	68b9      	ldr	r1, [r7, #8]
 8026d60:	68f8      	ldr	r0, [r7, #12]
 8026d62:	f001 fb80 	bl	8028466 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8026d66:	4603      	mov	r3, r0
    }
 8026d68:	4618      	mov	r0, r3
 8026d6a:	3718      	adds	r7, #24
 8026d6c:	46bd      	mov	sp, r7
 8026d6e:	bd80      	pop	{r7, pc}

08026d70 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8026d70:	b580      	push	{r7, lr}
 8026d72:	b082      	sub	sp, #8
 8026d74:	af00      	add	r7, sp, #0
 8026d76:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8026d78:	1d3b      	adds	r3, r7, #4
 8026d7a:	4618      	mov	r0, r3
 8026d7c:	f001 fb83 	bl	8028486 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8026d80:	4603      	mov	r3, r0
 8026d82:	681b      	ldr	r3, [r3, #0]
 8026d84:	4618      	mov	r0, r3
 8026d86:	3708      	adds	r7, #8
 8026d88:	46bd      	mov	sp, r7
 8026d8a:	bd80      	pop	{r7, pc}

08026d8c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8026d8c:	b580      	push	{r7, lr}
 8026d8e:	b082      	sub	sp, #8
 8026d90:	af00      	add	r7, sp, #0
 8026d92:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8026d94:	1d3b      	adds	r3, r7, #4
 8026d96:	4618      	mov	r0, r3
 8026d98:	f001 fb80 	bl	802849c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8026d9c:	4603      	mov	r3, r0
 8026d9e:	681b      	ldr	r3, [r3, #0]
 8026da0:	4618      	mov	r0, r3
 8026da2:	3708      	adds	r7, #8
 8026da4:	46bd      	mov	sp, r7
 8026da6:	bd80      	pop	{r7, pc}

08026da8 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026da8:	b580      	push	{r7, lr}
 8026daa:	b084      	sub	sp, #16
 8026dac:	af00      	add	r7, sp, #0
 8026dae:	60f8      	str	r0, [r7, #12]
 8026db0:	60b9      	str	r1, [r7, #8]
 8026db2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8026db4:	687a      	ldr	r2, [r7, #4]
 8026db6:	68b9      	ldr	r1, [r7, #8]
 8026db8:	68f8      	ldr	r0, [r7, #12]
 8026dba:	f001 fb7a 	bl	80284b2 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8026dbe:	4603      	mov	r3, r0
 8026dc0:	4618      	mov	r0, r3
 8026dc2:	3710      	adds	r7, #16
 8026dc4:	46bd      	mov	sp, r7
 8026dc6:	bd80      	pop	{r7, pc}

08026dc8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8026dc8:	b580      	push	{r7, lr}
 8026dca:	b082      	sub	sp, #8
 8026dcc:	af00      	add	r7, sp, #0
 8026dce:	6078      	str	r0, [r7, #4]
 8026dd0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8026dd2:	6878      	ldr	r0, [r7, #4]
 8026dd4:	f7ff ffda 	bl	8026d8c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8026dd8:	4602      	mov	r2, r0
 8026dda:	683b      	ldr	r3, [r7, #0]
 8026ddc:	1a9a      	subs	r2, r3, r2
 8026dde:	1d3b      	adds	r3, r7, #4
 8026de0:	4611      	mov	r1, r2
 8026de2:	4618      	mov	r0, r3
 8026de4:	f001 fb75 	bl	80284d2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8026de8:	4603      	mov	r3, r0
 8026dea:	4618      	mov	r0, r3
 8026dec:	3708      	adds	r7, #8
 8026dee:	46bd      	mov	sp, r7
 8026df0:	bd80      	pop	{r7, pc}

08026df2 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 8026df2:	b480      	push	{r7}
 8026df4:	b083      	sub	sp, #12
 8026df6:	af00      	add	r7, sp, #0
 8026df8:	6078      	str	r0, [r7, #4]
 8026dfa:	6039      	str	r1, [r7, #0]
 8026dfc:	bf00      	nop
 8026dfe:	370c      	adds	r7, #12
 8026e00:	46bd      	mov	sp, r7
 8026e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e06:	4770      	bx	lr

08026e08 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8026e08:	b480      	push	{r7}
 8026e0a:	b083      	sub	sp, #12
 8026e0c:	af00      	add	r7, sp, #0
 8026e0e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026e10:	687b      	ldr	r3, [r7, #4]
 8026e12:	4618      	mov	r0, r3
 8026e14:	370c      	adds	r7, #12
 8026e16:	46bd      	mov	sp, r7
 8026e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e1c:	4770      	bx	lr

08026e1e <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026e1e:	b580      	push	{r7, lr}
 8026e20:	b084      	sub	sp, #16
 8026e22:	af00      	add	r7, sp, #0
 8026e24:	60f8      	str	r0, [r7, #12]
 8026e26:	60b9      	str	r1, [r7, #8]
 8026e28:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8026e2a:	687a      	ldr	r2, [r7, #4]
 8026e2c:	68b9      	ldr	r1, [r7, #8]
 8026e2e:	68f8      	ldr	r0, [r7, #12]
 8026e30:	f001 fb66 	bl	8028500 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8026e34:	4603      	mov	r3, r0
 8026e36:	4618      	mov	r0, r3
 8026e38:	3710      	adds	r7, #16
 8026e3a:	46bd      	mov	sp, r7
 8026e3c:	bd80      	pop	{r7, pc}

08026e3e <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8026e3e:	b480      	push	{r7}
 8026e40:	b083      	sub	sp, #12
 8026e42:	af00      	add	r7, sp, #0
 8026e44:	6078      	str	r0, [r7, #4]
 8026e46:	6039      	str	r1, [r7, #0]
    { return __res; }
 8026e48:	683b      	ldr	r3, [r7, #0]
 8026e4a:	4618      	mov	r0, r3
 8026e4c:	370c      	adds	r7, #12
 8026e4e:	46bd      	mov	sp, r7
 8026e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e54:	4770      	bx	lr

08026e56 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8026e56:	b580      	push	{r7, lr}
 8026e58:	b084      	sub	sp, #16
 8026e5a:	af00      	add	r7, sp, #0
 8026e5c:	60f8      	str	r0, [r7, #12]
 8026e5e:	60b9      	str	r1, [r7, #8]
 8026e60:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8026e62:	687a      	ldr	r2, [r7, #4]
 8026e64:	68b9      	ldr	r1, [r7, #8]
 8026e66:	68f8      	ldr	r0, [r7, #12]
 8026e68:	f7fd fd8c 	bl	8024984 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8026e6c:	4603      	mov	r3, r0
 8026e6e:	4618      	mov	r0, r3
 8026e70:	3710      	adds	r7, #16
 8026e72:	46bd      	mov	sp, r7
 8026e74:	bd80      	pop	{r7, pc}

08026e76 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8026e76:	b580      	push	{r7, lr}
 8026e78:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8026e7a:	2010      	movs	r0, #16
 8026e7c:	f7fa f82f 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026e80:	4603      	mov	r3, r0
 8026e82:	4618      	mov	r0, r3
 8026e84:	bd80      	pop	{r7, pc}
	...

08026e88 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8026e88:	b480      	push	{r7}
 8026e8a:	b085      	sub	sp, #20
 8026e8c:	af00      	add	r7, sp, #0
 8026e8e:	60f8      	str	r0, [r7, #12]
 8026e90:	60b9      	str	r1, [r7, #8]
 8026e92:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8026e94:	68ba      	ldr	r2, [r7, #8]
 8026e96:	68fb      	ldr	r3, [r7, #12]
 8026e98:	1ad3      	subs	r3, r2, r3
 8026e9a:	109b      	asrs	r3, r3, #2
 8026e9c:	4a04      	ldr	r2, [pc, #16]	; (8026eb0 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8026e9e:	fb02 f303 	mul.w	r3, r2, r3
    }
 8026ea2:	4618      	mov	r0, r3
 8026ea4:	3714      	adds	r7, #20
 8026ea6:	46bd      	mov	sp, r7
 8026ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eac:	4770      	bx	lr
 8026eae:	bf00      	nop
 8026eb0:	cccccccd 	.word	0xcccccccd

08026eb4 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8026eb4:	b480      	push	{r7}
 8026eb6:	b085      	sub	sp, #20
 8026eb8:	af00      	add	r7, sp, #0
 8026eba:	60f8      	str	r0, [r7, #12]
 8026ebc:	60b9      	str	r1, [r7, #8]
 8026ebe:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8026ec0:	68fb      	ldr	r3, [r7, #12]
 8026ec2:	6819      	ldr	r1, [r3, #0]
 8026ec4:	68ba      	ldr	r2, [r7, #8]
 8026ec6:	4613      	mov	r3, r2
 8026ec8:	009b      	lsls	r3, r3, #2
 8026eca:	4413      	add	r3, r2
 8026ecc:	009b      	lsls	r3, r3, #2
 8026ece:	18ca      	adds	r2, r1, r3
 8026ed0:	68fb      	ldr	r3, [r7, #12]
 8026ed2:	601a      	str	r2, [r3, #0]
    }
 8026ed4:	bf00      	nop
 8026ed6:	3714      	adds	r7, #20
 8026ed8:	46bd      	mov	sp, r7
 8026eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ede:	4770      	bx	lr

08026ee0 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8026ee0:	b480      	push	{r7}
 8026ee2:	b083      	sub	sp, #12
 8026ee4:	af00      	add	r7, sp, #0
 8026ee6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	4618      	mov	r0, r3
 8026eec:	370c      	adds	r7, #12
 8026eee:	46bd      	mov	sp, r7
 8026ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ef4:	4770      	bx	lr

08026ef6 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026ef6:	b5b0      	push	{r4, r5, r7, lr}
 8026ef8:	b090      	sub	sp, #64	; 0x40
 8026efa:	af00      	add	r7, sp, #0
 8026efc:	60f8      	str	r0, [r7, #12]
 8026efe:	60b9      	str	r1, [r7, #8]
 8026f00:	607a      	str	r2, [r7, #4]
 8026f02:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8026f04:	68b8      	ldr	r0, [r7, #8]
 8026f06:	f001 fb0b 	bl	8028520 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8026f0a:	4604      	mov	r4, r0
 8026f0c:	6878      	ldr	r0, [r7, #4]
 8026f0e:	f001 fb07 	bl	8028520 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8026f12:	4605      	mov	r5, r0
 8026f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026f18:	6839      	ldr	r1, [r7, #0]
 8026f1a:	4618      	mov	r0, r3
 8026f1c:	f7fe f86d 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026f20:	f107 0320 	add.w	r3, r7, #32
 8026f24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026f28:	4611      	mov	r1, r2
 8026f2a:	4618      	mov	r0, r3
 8026f2c:	f001 fb03 	bl	8028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026f30:	f107 0010 	add.w	r0, r7, #16
 8026f34:	f107 0320 	add.w	r3, r7, #32
 8026f38:	462a      	mov	r2, r5
 8026f3a:	4621      	mov	r1, r4
 8026f3c:	f001 fb1c 	bl	8028578 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8026f40:	68fb      	ldr	r3, [r7, #12]
 8026f42:	f107 0210 	add.w	r2, r7, #16
 8026f46:	6839      	ldr	r1, [r7, #0]
 8026f48:	4618      	mov	r0, r3
 8026f4a:	f001 fb67 	bl	802861c <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026f4e:	68f8      	ldr	r0, [r7, #12]
 8026f50:	3740      	adds	r7, #64	; 0x40
 8026f52:	46bd      	mov	sp, r7
 8026f54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026f58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8026f58:	b580      	push	{r7, lr}
 8026f5a:	b086      	sub	sp, #24
 8026f5c:	af00      	add	r7, sp, #0
 8026f5e:	60f8      	str	r0, [r7, #12]
 8026f60:	60b9      	str	r1, [r7, #8]
 8026f62:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8026f64:	68bb      	ldr	r3, [r7, #8]
 8026f66:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8026f68:	68bb      	ldr	r3, [r7, #8]
 8026f6a:	68db      	ldr	r3, [r3, #12]
 8026f6c:	1ad3      	subs	r3, r2, r3
 8026f6e:	109b      	asrs	r3, r3, #2
 8026f70:	4a0d      	ldr	r2, [pc, #52]	; (8026fa8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8026f72:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8026f76:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8026f78:	687a      	ldr	r2, [r7, #4]
 8026f7a:	697b      	ldr	r3, [r7, #20]
 8026f7c:	429a      	cmp	r2, r3
 8026f7e:	d906      	bls.n	8026f8e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8026f80:	687a      	ldr	r2, [r7, #4]
 8026f82:	697b      	ldr	r3, [r7, #20]
 8026f84:	1ad3      	subs	r3, r2, r3
 8026f86:	4619      	mov	r1, r3
 8026f88:	68b8      	ldr	r0, [r7, #8]
 8026f8a:	f001 fb55 	bl	8028638 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8026f8e:	68bb      	ldr	r3, [r7, #8]
 8026f90:	f103 0108 	add.w	r1, r3, #8
 8026f94:	687a      	ldr	r2, [r7, #4]
 8026f96:	68fb      	ldr	r3, [r7, #12]
 8026f98:	4618      	mov	r0, r3
 8026f9a:	f001 fb93 	bl	80286c4 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8026f9e:	68f8      	ldr	r0, [r7, #12]
 8026fa0:	3718      	adds	r7, #24
 8026fa2:	46bd      	mov	sp, r7
 8026fa4:	bd80      	pop	{r7, pc}
 8026fa6:	bf00      	nop
 8026fa8:	cccccccd 	.word	0xcccccccd

08026fac <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8026fac:	b580      	push	{r7, lr}
 8026fae:	b088      	sub	sp, #32
 8026fb0:	af00      	add	r7, sp, #0
 8026fb2:	60f8      	str	r0, [r7, #12]
 8026fb4:	60b9      	str	r1, [r7, #8]
 8026fb6:	607a      	str	r2, [r7, #4]
 8026fb8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8026fba:	f107 0310 	add.w	r3, r7, #16
 8026fbe:	6839      	ldr	r1, [r7, #0]
 8026fc0:	4618      	mov	r0, r3
 8026fc2:	f7fe f81a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026fc6:	68f8      	ldr	r0, [r7, #12]
 8026fc8:	f107 0310 	add.w	r3, r7, #16
 8026fcc:	687a      	ldr	r2, [r7, #4]
 8026fce:	68b9      	ldr	r1, [r7, #8]
 8026fd0:	f001 fb8b 	bl	80286ea <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8026fd4:	68f8      	ldr	r0, [r7, #12]
 8026fd6:	3720      	adds	r7, #32
 8026fd8:	46bd      	mov	sp, r7
 8026fda:	bd80      	pop	{r7, pc}

08026fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8026fdc:	b580      	push	{r7, lr}
 8026fde:	b086      	sub	sp, #24
 8026fe0:	af00      	add	r7, sp, #0
 8026fe2:	60f8      	str	r0, [r7, #12]
 8026fe4:	60b9      	str	r1, [r7, #8]
 8026fe6:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8026fe8:	68bb      	ldr	r3, [r7, #8]
 8026fea:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8026fec:	68bb      	ldr	r3, [r7, #8]
 8026fee:	699b      	ldr	r3, [r3, #24]
 8026ff0:	1ad3      	subs	r3, r2, r3
 8026ff2:	109b      	asrs	r3, r3, #2
 8026ff4:	4a0d      	ldr	r2, [pc, #52]	; (802702c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8026ff6:	fb02 f303 	mul.w	r3, r2, r3
 8026ffa:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8026ffc:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8026ffe:	687a      	ldr	r2, [r7, #4]
 8027000:	697b      	ldr	r3, [r7, #20]
 8027002:	429a      	cmp	r2, r3
 8027004:	d906      	bls.n	8027014 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8027006:	687a      	ldr	r2, [r7, #4]
 8027008:	697b      	ldr	r3, [r7, #20]
 802700a:	1ad3      	subs	r3, r2, r3
 802700c:	4619      	mov	r1, r3
 802700e:	68b8      	ldr	r0, [r7, #8]
 8027010:	f001 fb86 	bl	8028720 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8027014:	68bb      	ldr	r3, [r7, #8]
 8027016:	f103 0118 	add.w	r1, r3, #24
 802701a:	687a      	ldr	r2, [r7, #4]
 802701c:	68fb      	ldr	r3, [r7, #12]
 802701e:	4618      	mov	r0, r3
 8027020:	f7ff f860 	bl	80260e4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8027024:	68f8      	ldr	r0, [r7, #12]
 8027026:	3718      	adds	r7, #24
 8027028:	46bd      	mov	sp, r7
 802702a:	bd80      	pop	{r7, pc}
 802702c:	cccccccd 	.word	0xcccccccd

08027030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
      deque<_Tp, _Alloc>::
 8027030:	b5b0      	push	{r4, r5, r7, lr}
 8027032:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8027036:	af04      	add	r7, sp, #16
 8027038:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 802703c:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8027040:	6020      	str	r0, [r4, #0]
 8027042:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8027046:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 802704a:	6001      	str	r1, [r0, #0]
 802704c:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8027050:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8027054:	600a      	str	r2, [r1, #0]
 8027056:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802705a:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802705e:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8027060:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027064:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027068:	681b      	ldr	r3, [r3, #0]
 802706a:	f103 0208 	add.w	r2, r3, #8
 802706e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027072:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027076:	4611      	mov	r1, r2
 8027078:	6818      	ldr	r0, [r3, #0]
 802707a:	f7fd fdcb 	bl	8024c14 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 802707e:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 8027082:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027086:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802708a:	6818      	ldr	r0, [r3, #0]
 802708c:	f7fc fd34 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8027090:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8027094:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8027098:	085a      	lsrs	r2, r3, #1
 802709a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802709e:	429a      	cmp	r2, r3
 80270a0:	f240 8158 	bls.w	8027354 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 80270a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80270a8:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 80270ac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80270b0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80270b4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80270b8:	6819      	ldr	r1, [r3, #0]
 80270ba:	f7ff ff4d 	bl	8026f58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 80270be:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80270c2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80270c6:	681b      	ldr	r3, [r3, #0]
 80270c8:	f103 0208 	add.w	r2, r3, #8
 80270cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80270d0:	4611      	mov	r1, r2
 80270d2:	4618      	mov	r0, r3
 80270d4:	f7fd ff91 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 80270d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80270dc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80270e0:	681b      	ldr	r3, [r3, #0]
 80270e2:	f103 0108 	add.w	r1, r3, #8
 80270e6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80270ea:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80270ee:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80270f2:	4618      	mov	r0, r3
 80270f4:	f7fe fff6 	bl	80260e4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80270f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80270fc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027100:	681a      	ldr	r2, [r3, #0]
 8027102:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027106:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802710a:	4614      	mov	r4, r2
 802710c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802710e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 8027112:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8027116:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 802711a:	429a      	cmp	r2, r3
 802711c:	f2c0 8098 	blt.w	8027250 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 8027120:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027124:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027128:	681b      	ldr	r3, [r3, #0]
 802712a:	f103 0108 	add.w	r1, r3, #8
 802712e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027132:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027136:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 802713a:	4618      	mov	r0, r3
 802713c:	f7fe ffd2 	bl	80260e4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8027140:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027144:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027148:	681b      	ldr	r3, [r3, #0]
 802714a:	f103 0208 	add.w	r2, r3, #8
 802714e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8027152:	4611      	mov	r1, r2
 8027154:	4618      	mov	r0, r3
 8027156:	f7fd ff50 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802715a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802715e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027162:	4611      	mov	r1, r2
 8027164:	4618      	mov	r0, r3
 8027166:	f7fd ff48 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802716a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802716e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8027172:	4611      	mov	r1, r2
 8027174:	4618      	mov	r0, r3
 8027176:	f7fd ff40 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						_M_get_Tp_allocator());
 802717a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802717e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027182:	681b      	ldr	r3, [r3, #0]
 8027184:	4618      	mov	r0, r3
 8027186:	f7fd fd71 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802718a:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 802718c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027190:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8027194:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8027198:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 802719c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80271a0:	9400      	str	r4, [sp, #0]
 80271a2:	f001 fb01 	bl	80287a8 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 80271a6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80271aa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80271ae:	681b      	ldr	r3, [r3, #0]
 80271b0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80271b4:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80271b8:	f103 0408 	add.w	r4, r3, #8
 80271bc:	4613      	mov	r3, r2
 80271be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80271c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 80271c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80271c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80271cc:	4611      	mov	r1, r2
 80271ce:	4618      	mov	r0, r3
 80271d0:	f7fd ff13 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80271d8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80271dc:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80271e0:	6819      	ldr	r1, [r3, #0]
 80271e2:	4610      	mov	r0, r2
 80271e4:	f7fd ff09 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80271ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80271f0:	4611      	mov	r1, r2
 80271f2:	4618      	mov	r0, r3
 80271f4:	f7fd ff01 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80271fc:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8027200:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8027204:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8027208:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 802720c:	f001 fb05 	bl	802881a <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8027210:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027214:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027218:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 802721c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027220:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027224:	6819      	ldr	r1, [r3, #0]
 8027226:	f001 fa4d 	bl	80286c4 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802722a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802722e:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8027232:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8027236:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802723a:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802723e:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8027242:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8027246:	6812      	ldr	r2, [r2, #0]
 8027248:	6809      	ldr	r1, [r1, #0]
 802724a:	f7fe fdcf 	bl	8025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 802724e:	e1dd      	b.n	802760c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 8027250:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027254:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8027258:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802725c:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8027260:	6812      	ldr	r2, [r2, #0]
 8027262:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8027264:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027268:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802726c:	1ad2      	subs	r2, r2, r3
 802726e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8027272:	4611      	mov	r1, r2
 8027274:	4618      	mov	r0, r3
 8027276:	f001 fb06 	bl	8028886 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 802727a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802727e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027282:	681b      	ldr	r3, [r3, #0]
 8027284:	f103 0208 	add.w	r2, r3, #8
 8027288:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 802728c:	4611      	mov	r1, r2
 802728e:	4618      	mov	r0, r3
 8027290:	f7fd feb3 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027294:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027298:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802729c:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 80272a0:	6819      	ldr	r1, [r3, #0]
 80272a2:	4610      	mov	r0, r2
 80272a4:	f7fd fea9 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80272a8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80272ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80272b0:	681c      	ldr	r4, [r3, #0]
 80272b2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80272b6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80272ba:	4611      	mov	r1, r2
 80272bc:	4618      	mov	r0, r3
 80272be:	f7fd fe9c 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 80272c2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80272c6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80272ca:	681b      	ldr	r3, [r3, #0]
 80272cc:	4618      	mov	r0, r3
 80272ce:	f7fd fccd 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80272d2:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 80272d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80272d8:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 80272dc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80272e0:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80272e4:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 80272e8:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 80272ec:	9202      	str	r2, [sp, #8]
 80272ee:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80272f2:	9201      	str	r2, [sp, #4]
 80272f4:	9400      	str	r4, [sp, #0]
 80272f6:	681b      	ldr	r3, [r3, #0]
 80272f8:	462a      	mov	r2, r5
 80272fa:	f001 fad7 	bl	80288ac <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 80272fe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027302:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027306:	681b      	ldr	r3, [r3, #0]
 8027308:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802730c:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8027310:	f103 0408 	add.w	r4, r3, #8
 8027314:	4613      	mov	r3, r2
 8027316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 802731c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027320:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8027324:	681c      	ldr	r4, [r3, #0]
 8027326:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802732a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 802732e:	4611      	mov	r1, r2
 8027330:	4618      	mov	r0, r3
 8027332:	f7fd fe62 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027336:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802733a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 802733e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8027342:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027346:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802734a:	6812      	ldr	r2, [r2, #0]
 802734c:	4621      	mov	r1, r4
 802734e:	f7fe fd4d 	bl	8025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8027352:	e15b      	b.n	802760c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8027354:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027358:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 802735c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027360:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027364:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027368:	6819      	ldr	r1, [r3, #0]
 802736a:	f7ff fe37 	bl	8026fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 802736e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027372:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027376:	681b      	ldr	r3, [r3, #0]
 8027378:	f103 0218 	add.w	r2, r3, #24
 802737c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8027380:	4611      	mov	r1, r2
 8027382:	4618      	mov	r0, r3
 8027384:	f7fd fe39 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8027388:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 802738c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8027390:	1ad3      	subs	r3, r2, r3
 8027392:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8027396:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802739a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802739e:	681b      	ldr	r3, [r3, #0]
 80273a0:	f103 0118 	add.w	r1, r3, #24
 80273a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80273a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80273ac:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80273b0:	4618      	mov	r0, r3
 80273b2:	f001 f987 	bl	80286c4 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80273b6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80273ba:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80273be:	681a      	ldr	r2, [r3, #0]
 80273c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80273c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80273c8:	4614      	mov	r4, r2
 80273ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80273cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 80273d0:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80273d4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80273d8:	429a      	cmp	r2, r3
 80273da:	f340 8096 	ble.w	802750a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 80273de:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80273e2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80273e6:	681b      	ldr	r3, [r3, #0]
 80273e8:	f103 0118 	add.w	r1, r3, #24
 80273ec:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80273f0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80273f4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80273f8:	4618      	mov	r0, r3
 80273fa:	f001 f963 	bl	80286c4 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 80273fe:	f107 0218 	add.w	r2, r7, #24
 8027402:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8027406:	4611      	mov	r1, r2
 8027408:	4618      	mov	r0, r3
 802740a:	f7fd fdf6 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 802740e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027412:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027416:	681b      	ldr	r3, [r3, #0]
 8027418:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 802741c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8027420:	4611      	mov	r1, r2
 8027422:	4618      	mov	r0, r3
 8027424:	f7fd fde9 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8027428:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802742c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027430:	681b      	ldr	r3, [r3, #0]
 8027432:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8027436:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 802743a:	4611      	mov	r1, r2
 802743c:	4618      	mov	r0, r3
 802743e:	f7fd fddc 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 8027442:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027446:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802744a:	681b      	ldr	r3, [r3, #0]
 802744c:	4618      	mov	r0, r3
 802744e:	f7fd fc0d 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8027452:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8027454:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027458:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 802745c:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8027460:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8027464:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8027468:	9400      	str	r4, [sp, #0]
 802746a:	f001 f99d 	bl	80287a8 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 802746e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027472:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027476:	681b      	ldr	r3, [r3, #0]
 8027478:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802747c:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8027480:	f103 0418 	add.w	r4, r3, #24
 8027484:	4613      	mov	r3, r2
 8027486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 802748c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027490:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027494:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8027498:	6819      	ldr	r1, [r3, #0]
 802749a:	4610      	mov	r0, r2
 802749c:	f7fd fdad 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80274a0:	f107 0218 	add.w	r2, r7, #24
 80274a4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80274a8:	4611      	mov	r1, r2
 80274aa:	4618      	mov	r0, r3
 80274ac:	f7fd fda5 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80274b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80274b4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80274b8:	4611      	mov	r1, r2
 80274ba:	4618      	mov	r0, r3
 80274bc:	f7fd fd9d 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80274c0:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 80274c4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80274c8:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 80274cc:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80274d0:	f001 fa2c 	bl	802892c <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 80274d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80274d8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80274dc:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80274e0:	6819      	ldr	r1, [r3, #0]
 80274e2:	4610      	mov	r0, r2
 80274e4:	f7fd fd89 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80274e8:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 80274ec:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80274f0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80274f4:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80274f8:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80274fc:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8027500:	6812      	ldr	r2, [r2, #0]
 8027502:	6809      	ldr	r1, [r1, #0]
 8027504:	f7fe fc72 	bl	8025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8027508:	e080      	b.n	802760c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 802750a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802750e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8027512:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027516:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 802751a:	6812      	ldr	r2, [r2, #0]
 802751c:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 802751e:	f107 0314 	add.w	r3, r7, #20
 8027522:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8027526:	4618      	mov	r0, r3
 8027528:	f001 f9ad 	bl	8028886 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802752c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027530:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8027534:	681c      	ldr	r4, [r3, #0]
 8027536:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802753a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802753e:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8027542:	6819      	ldr	r1, [r3, #0]
 8027544:	4610      	mov	r0, r2
 8027546:	f7fd fd58 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 802754a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802754e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027552:	681b      	ldr	r3, [r3, #0]
 8027554:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8027558:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 802755c:	4611      	mov	r1, r2
 802755e:	4618      	mov	r0, r3
 8027560:	f7fd fd4b 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 8027564:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027568:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802756c:	681b      	ldr	r3, [r3, #0]
 802756e:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8027572:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8027576:	4611      	mov	r1, r2
 8027578:	4618      	mov	r0, r3
 802757a:	f7fd fd3e 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 802757e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027582:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027586:	681b      	ldr	r3, [r3, #0]
 8027588:	4618      	mov	r0, r3
 802758a:	f7fd fb6f 	bl	8024c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802758e:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8027590:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8027594:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8027598:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802759c:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80275a0:	9302      	str	r3, [sp, #8]
 80275a2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80275a6:	9301      	str	r3, [sp, #4]
 80275a8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80275ac:	9300      	str	r3, [sp, #0]
 80275ae:	460b      	mov	r3, r1
 80275b0:	6812      	ldr	r2, [r2, #0]
 80275b2:	4621      	mov	r1, r4
 80275b4:	f001 f9f0 	bl	8028998 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 80275b8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80275bc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80275c0:	681b      	ldr	r3, [r3, #0]
 80275c2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80275c6:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80275ca:	f103 0418 	add.w	r4, r3, #24
 80275ce:	4613      	mov	r3, r2
 80275d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80275d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 80275d6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80275da:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80275de:	681c      	ldr	r4, [r3, #0]
 80275e0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80275e4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80275e8:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80275ec:	6819      	ldr	r1, [r3, #0]
 80275ee:	4610      	mov	r0, r2
 80275f0:	f7fd fd03 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80275f4:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 80275f8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80275fc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027600:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8027604:	4622      	mov	r2, r4
 8027606:	6809      	ldr	r1, [r1, #0]
 8027608:	f7fe fbf0 	bl	8025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 802760c:	bf00      	nop
 802760e:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8027612:	46bd      	mov	sp, r7
 8027614:	bdb0      	pop	{r4, r5, r7, pc}

08027616 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8027616:	b580      	push	{r7, lr}
 8027618:	b084      	sub	sp, #16
 802761a:	af00      	add	r7, sp, #0
 802761c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 802761e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8027622:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8027624:	6878      	ldr	r0, [r7, #4]
 8027626:	f001 f9f7 	bl	8028a18 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 802762a:	4603      	mov	r3, r0
 802762c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802762e:	f107 0208 	add.w	r2, r7, #8
 8027632:	f107 030c 	add.w	r3, r7, #12
 8027636:	4611      	mov	r1, r2
 8027638:	4618      	mov	r0, r3
 802763a:	f000 fd53 	bl	80280e4 <_ZSt3minIjERKT_S2_S2_>
 802763e:	4603      	mov	r3, r0
 8027640:	681b      	ldr	r3, [r3, #0]
      }
 8027642:	4618      	mov	r0, r3
 8027644:	3710      	adds	r7, #16
 8027646:	46bd      	mov	sp, r7
 8027648:	bd80      	pop	{r7, pc}

0802764a <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 802764a:	b480      	push	{r7}
 802764c:	b083      	sub	sp, #12
 802764e:	af00      	add	r7, sp, #0
 8027650:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8027652:	687b      	ldr	r3, [r7, #4]
 8027654:	4618      	mov	r0, r3
 8027656:	370c      	adds	r7, #12
 8027658:	46bd      	mov	sp, r7
 802765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802765e:	4770      	bx	lr

08027660 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8027660:	b590      	push	{r4, r7, lr}
 8027662:	b08b      	sub	sp, #44	; 0x2c
 8027664:	af00      	add	r7, sp, #0
 8027666:	60f8      	str	r0, [r7, #12]
 8027668:	60b9      	str	r1, [r7, #8]
 802766a:	4613      	mov	r3, r2
 802766c:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 802766e:	68fb      	ldr	r3, [r7, #12]
 8027670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8027672:	68fb      	ldr	r3, [r7, #12]
 8027674:	695b      	ldr	r3, [r3, #20]
 8027676:	1ad3      	subs	r3, r2, r3
 8027678:	109b      	asrs	r3, r3, #2
 802767a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 802767c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 802767e:	68bb      	ldr	r3, [r7, #8]
 8027680:	6a3a      	ldr	r2, [r7, #32]
 8027682:	4413      	add	r3, r2
 8027684:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8027686:	68fb      	ldr	r3, [r7, #12]
 8027688:	685a      	ldr	r2, [r3, #4]
 802768a:	69fb      	ldr	r3, [r7, #28]
 802768c:	005b      	lsls	r3, r3, #1
 802768e:	429a      	cmp	r2, r3
 8027690:	d92d      	bls.n	80276ee <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8027692:	68fb      	ldr	r3, [r7, #12]
 8027694:	681a      	ldr	r2, [r3, #0]
 8027696:	68fb      	ldr	r3, [r7, #12]
 8027698:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 802769a:	69fb      	ldr	r3, [r7, #28]
 802769c:	1acb      	subs	r3, r1, r3
 802769e:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80276a0:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80276a2:	79fb      	ldrb	r3, [r7, #7]
 80276a4:	2b00      	cmp	r3, #0
 80276a6:	d002      	beq.n	80276ae <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80276a8:	68bb      	ldr	r3, [r7, #8]
 80276aa:	009b      	lsls	r3, r3, #2
 80276ac:	e000      	b.n	80276b0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 80276ae:	2300      	movs	r3, #0
 80276b0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80276b2:	4413      	add	r3, r2
 80276b4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80276b6:	68fb      	ldr	r3, [r7, #12]
 80276b8:	695b      	ldr	r3, [r3, #20]
 80276ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80276bc:	429a      	cmp	r2, r3
 80276be:	d209      	bcs.n	80276d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80276c0:	68fb      	ldr	r3, [r7, #12]
 80276c2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80276c4:	68fb      	ldr	r3, [r7, #12]
 80276c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80276c8:	3304      	adds	r3, #4
 80276ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80276cc:	4619      	mov	r1, r3
 80276ce:	f001 f9af 	bl	8028a30 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80276d2:	e048      	b.n	8027766 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80276d4:	68fb      	ldr	r3, [r7, #12]
 80276d6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80276d8:	68fb      	ldr	r3, [r7, #12]
 80276da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80276dc:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80276de:	6a3b      	ldr	r3, [r7, #32]
 80276e0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80276e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80276e4:	4413      	add	r3, r2
 80276e6:	461a      	mov	r2, r3
 80276e8:	f001 f9ba 	bl	8028a60 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80276ec:	e03b      	b.n	8027766 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80276ee:	68fb      	ldr	r3, [r7, #12]
 80276f0:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80276f2:	68fb      	ldr	r3, [r7, #12]
 80276f4:	3304      	adds	r3, #4
 80276f6:	f107 0208 	add.w	r2, r7, #8
 80276fa:	4611      	mov	r1, r2
 80276fc:	4618      	mov	r0, r3
 80276fe:	f7fd fe16 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 8027702:	4603      	mov	r3, r0
 8027704:	681b      	ldr	r3, [r3, #0]
 8027706:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8027708:	3302      	adds	r3, #2
 802770a:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 802770c:	68fb      	ldr	r3, [r7, #12]
 802770e:	69b9      	ldr	r1, [r7, #24]
 8027710:	4618      	mov	r0, r3
 8027712:	f7fe fe0d 	bl	8026330 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8027716:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8027718:	69ba      	ldr	r2, [r7, #24]
 802771a:	69fb      	ldr	r3, [r7, #28]
 802771c:	1ad3      	subs	r3, r2, r3
 802771e:	085b      	lsrs	r3, r3, #1
 8027720:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8027722:	79fb      	ldrb	r3, [r7, #7]
 8027724:	2b00      	cmp	r3, #0
 8027726:	d002      	beq.n	802772e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8027728:	68bb      	ldr	r3, [r7, #8]
 802772a:	009b      	lsls	r3, r3, #2
 802772c:	e000      	b.n	8027730 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 802772e:	2300      	movs	r3, #0
 8027730:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8027732:	697a      	ldr	r2, [r7, #20]
 8027734:	4413      	add	r3, r2
 8027736:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8027738:	68fb      	ldr	r3, [r7, #12]
 802773a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 802773c:	68fb      	ldr	r3, [r7, #12]
 802773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8027740:	3304      	adds	r3, #4
 8027742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027744:	4619      	mov	r1, r3
 8027746:	f001 f973 	bl	8028a30 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802774a:	68f8      	ldr	r0, [r7, #12]
 802774c:	68fb      	ldr	r3, [r7, #12]
 802774e:	6819      	ldr	r1, [r3, #0]
 8027750:	68fb      	ldr	r3, [r7, #12]
 8027752:	685b      	ldr	r3, [r3, #4]
 8027754:	461a      	mov	r2, r3
 8027756:	f7fd fc16 	bl	8024f86 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 802775a:	68fb      	ldr	r3, [r7, #12]
 802775c:	697a      	ldr	r2, [r7, #20]
 802775e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8027760:	68fb      	ldr	r3, [r7, #12]
 8027762:	69ba      	ldr	r2, [r7, #24]
 8027764:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8027766:	68fb      	ldr	r3, [r7, #12]
 8027768:	3308      	adds	r3, #8
 802776a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802776c:	4618      	mov	r0, r3
 802776e:	f7fe fc77 	bl	8026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8027772:	68fb      	ldr	r3, [r7, #12]
 8027774:	f103 0018 	add.w	r0, r3, #24
 8027778:	6a3a      	ldr	r2, [r7, #32]
 802777a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802777e:	4413      	add	r3, r2
 8027780:	009b      	lsls	r3, r3, #2
 8027782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027784:	4413      	add	r3, r2
 8027786:	4619      	mov	r1, r3
 8027788:	f7fe fc6a 	bl	8026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 802778c:	bf00      	nop
 802778e:	372c      	adds	r7, #44	; 0x2c
 8027790:	46bd      	mov	sp, r7
 8027792:	bd90      	pop	{r4, r7, pc}

08027794 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8027794:	b580      	push	{r7, lr}
 8027796:	b082      	sub	sp, #8
 8027798:	af00      	add	r7, sp, #0
 802779a:	6078      	str	r0, [r7, #4]
 802779c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 802779e:	2200      	movs	r2, #0
 80277a0:	6839      	ldr	r1, [r7, #0]
 80277a2:	6878      	ldr	r0, [r7, #4]
 80277a4:	f001 f974 	bl	8028a90 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 80277a8:	4603      	mov	r3, r0
 80277aa:	4618      	mov	r0, r3
 80277ac:	3708      	adds	r7, #8
 80277ae:	46bd      	mov	sp, r7
 80277b0:	bd80      	pop	{r7, pc}

080277b2 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80277b2:	b580      	push	{r7, lr}
 80277b4:	b084      	sub	sp, #16
 80277b6:	af00      	add	r7, sp, #0
 80277b8:	60f8      	str	r0, [r7, #12]
 80277ba:	60b9      	str	r1, [r7, #8]
 80277bc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80277be:	687a      	ldr	r2, [r7, #4]
 80277c0:	68b9      	ldr	r1, [r7, #8]
 80277c2:	68f8      	ldr	r0, [r7, #12]
 80277c4:	f001 f985 	bl	8028ad2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 80277c8:	bf00      	nop
 80277ca:	3710      	adds	r7, #16
 80277cc:	46bd      	mov	sp, r7
 80277ce:	bd80      	pop	{r7, pc}

080277d0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 80277d0:	b590      	push	{r4, r7, lr}
 80277d2:	b085      	sub	sp, #20
 80277d4:	af00      	add	r7, sp, #0
 80277d6:	6078      	str	r0, [r7, #4]
 80277d8:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 80277da:	687b      	ldr	r3, [r7, #4]
 80277dc:	681a      	ldr	r2, [r3, #0]
 80277de:	687b      	ldr	r3, [r7, #4]
 80277e0:	685b      	ldr	r3, [r3, #4]
 80277e2:	1ad3      	subs	r3, r2, r3
 80277e4:	109b      	asrs	r3, r3, #2
 80277e6:	4a2b      	ldr	r2, [pc, #172]	; (8027894 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 80277e8:	fb02 f303 	mul.w	r3, r2, r3
 80277ec:	461a      	mov	r2, r3
 80277ee:	683b      	ldr	r3, [r7, #0]
 80277f0:	4413      	add	r3, r2
 80277f2:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80277f4:	68fb      	ldr	r3, [r7, #12]
 80277f6:	2b00      	cmp	r3, #0
 80277f8:	db08      	blt.n	802780c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80277fa:	f7fe fc60 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80277fe:	4603      	mov	r3, r0
 8027800:	461a      	mov	r2, r3
 8027802:	68fb      	ldr	r3, [r7, #12]
 8027804:	4293      	cmp	r3, r2
 8027806:	da01      	bge.n	802780c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8027808:	2301      	movs	r3, #1
 802780a:	e000      	b.n	802780e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 802780c:	2300      	movs	r3, #0
 802780e:	2b00      	cmp	r3, #0
 8027810:	d00a      	beq.n	8027828 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 8027812:	687b      	ldr	r3, [r7, #4]
 8027814:	6819      	ldr	r1, [r3, #0]
 8027816:	683a      	ldr	r2, [r7, #0]
 8027818:	4613      	mov	r3, r2
 802781a:	009b      	lsls	r3, r3, #2
 802781c:	4413      	add	r3, r2
 802781e:	009b      	lsls	r3, r3, #2
 8027820:	18ca      	adds	r2, r1, r3
 8027822:	687b      	ldr	r3, [r7, #4]
 8027824:	601a      	str	r2, [r3, #0]
 8027826:	e02f      	b.n	8027888 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8027828:	68fb      	ldr	r3, [r7, #12]
 802782a:	2b00      	cmp	r3, #0
 802782c:	dd07      	ble.n	802783e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 802782e:	f7fe fc46 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027832:	4603      	mov	r3, r0
 8027834:	461a      	mov	r2, r3
 8027836:	68fb      	ldr	r3, [r7, #12]
 8027838:	fb93 f3f2 	sdiv	r3, r3, r2
 802783c:	e007      	b.n	802784e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 802783e:	68fb      	ldr	r3, [r7, #12]
 8027840:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8027842:	f7fe fc3c 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027846:	4603      	mov	r3, r0
 8027848:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 802784c:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 802784e:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8027850:	687b      	ldr	r3, [r7, #4]
 8027852:	68da      	ldr	r2, [r3, #12]
 8027854:	68bb      	ldr	r3, [r7, #8]
 8027856:	009b      	lsls	r3, r3, #2
 8027858:	4413      	add	r3, r2
 802785a:	4619      	mov	r1, r3
 802785c:	6878      	ldr	r0, [r7, #4]
 802785e:	f7fe fbff 	bl	8026060 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 8027862:	687b      	ldr	r3, [r7, #4]
 8027864:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8027866:	f7fe fc2a 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802786a:	4603      	mov	r3, r0
 802786c:	461a      	mov	r2, r3
 802786e:	68bb      	ldr	r3, [r7, #8]
 8027870:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8027874:	68fa      	ldr	r2, [r7, #12]
 8027876:	1ad3      	subs	r3, r2, r3
 8027878:	461a      	mov	r2, r3
 802787a:	4613      	mov	r3, r2
 802787c:	009b      	lsls	r3, r3, #2
 802787e:	4413      	add	r3, r2
 8027880:	009b      	lsls	r3, r3, #2
 8027882:	18e2      	adds	r2, r4, r3
 8027884:	687b      	ldr	r3, [r7, #4]
 8027886:	601a      	str	r2, [r3, #0]
	return *this;
 8027888:	687b      	ldr	r3, [r7, #4]
      }
 802788a:	4618      	mov	r0, r3
 802788c:	3714      	adds	r7, #20
 802788e:	46bd      	mov	sp, r7
 8027890:	bd90      	pop	{r4, r7, pc}
 8027892:	bf00      	nop
 8027894:	cccccccd 	.word	0xcccccccd

08027898 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8027898:	b480      	push	{r7}
 802789a:	b083      	sub	sp, #12
 802789c:	af00      	add	r7, sp, #0
 802789e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80278a0:	687b      	ldr	r3, [r7, #4]
 80278a2:	4618      	mov	r0, r3
 80278a4:	370c      	adds	r7, #12
 80278a6:	46bd      	mov	sp, r7
 80278a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278ac:	4770      	bx	lr

080278ae <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80278ae:	b590      	push	{r4, r7, lr}
 80278b0:	b085      	sub	sp, #20
 80278b2:	af00      	add	r7, sp, #0
 80278b4:	60f8      	str	r0, [r7, #12]
 80278b6:	60b9      	str	r1, [r7, #8]
 80278b8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80278ba:	6878      	ldr	r0, [r7, #4]
 80278bc:	f7ff ffec 	bl	8027898 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80278c0:	4603      	mov	r3, r0
 80278c2:	681c      	ldr	r4, [r3, #0]
 80278c4:	68bb      	ldr	r3, [r7, #8]
 80278c6:	4619      	mov	r1, r3
 80278c8:	2004      	movs	r0, #4
 80278ca:	f7f9 fafc 	bl	8020ec6 <_ZnwjPv>
 80278ce:	4603      	mov	r3, r0
 80278d0:	601c      	str	r4, [r3, #0]
 80278d2:	bf00      	nop
 80278d4:	3714      	adds	r7, #20
 80278d6:	46bd      	mov	sp, r7
 80278d8:	bd90      	pop	{r4, r7, pc}

080278da <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80278da:	b580      	push	{r7, lr}
 80278dc:	b082      	sub	sp, #8
 80278de:	af00      	add	r7, sp, #0
 80278e0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80278e2:	687b      	ldr	r3, [r7, #4]
 80278e4:	f103 0218 	add.w	r2, r3, #24
 80278e8:	687b      	ldr	r3, [r7, #4]
 80278ea:	3308      	adds	r3, #8
 80278ec:	4619      	mov	r1, r3
 80278ee:	4610      	mov	r0, r2
 80278f0:	f001 f902 	bl	8028af8 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 80278f4:	4603      	mov	r3, r0
 80278f6:	4618      	mov	r0, r3
 80278f8:	3708      	adds	r7, #8
 80278fa:	46bd      	mov	sp, r7
 80278fc:	bd80      	pop	{r7, pc}

080278fe <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80278fe:	b580      	push	{r7, lr}
 8027900:	b082      	sub	sp, #8
 8027902:	af00      	add	r7, sp, #0
 8027904:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8027906:	687b      	ldr	r3, [r7, #4]
 8027908:	4618      	mov	r0, r3
 802790a:	f001 f933 	bl	8028b74 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 802790e:	4603      	mov	r3, r0
 8027910:	4618      	mov	r0, r3
 8027912:	f001 f915 	bl	8028b40 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 8027916:	4603      	mov	r3, r0
 8027918:	4618      	mov	r0, r3
 802791a:	3708      	adds	r7, #8
 802791c:	46bd      	mov	sp, r7
 802791e:	bd80      	pop	{r7, pc}

08027920 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8027920:	b580      	push	{r7, lr}
 8027922:	b082      	sub	sp, #8
 8027924:	af00      	add	r7, sp, #0
 8027926:	6078      	str	r0, [r7, #4]
 8027928:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802792a:	683b      	ldr	r3, [r7, #0]
 802792c:	1c5a      	adds	r2, r3, #1
 802792e:	687b      	ldr	r3, [r7, #4]
 8027930:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8027932:	6879      	ldr	r1, [r7, #4]
 8027934:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8027936:	6879      	ldr	r1, [r7, #4]
 8027938:	6809      	ldr	r1, [r1, #0]
 802793a:	1a41      	subs	r1, r0, r1
 802793c:	1089      	asrs	r1, r1, #2
 802793e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027940:	429a      	cmp	r2, r3
 8027942:	d904      	bls.n	802794e <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8027944:	2200      	movs	r2, #0
 8027946:	6839      	ldr	r1, [r7, #0]
 8027948:	6878      	ldr	r0, [r7, #4]
 802794a:	f001 f91e 	bl	8028b8a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 802794e:	bf00      	nop
 8027950:	3708      	adds	r7, #8
 8027952:	46bd      	mov	sp, r7
 8027954:	bd80      	pop	{r7, pc}

08027956 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8027956:	b590      	push	{r4, r7, lr}
 8027958:	b083      	sub	sp, #12
 802795a:	af00      	add	r7, sp, #0
 802795c:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 802795e:	687c      	ldr	r4, [r7, #4]
 8027960:	2004      	movs	r0, #4
 8027962:	f7f9 fabc 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8027966:	4603      	mov	r3, r0
 8027968:	4619      	mov	r1, r3
 802796a:	4620      	mov	r0, r4
 802796c:	f001 f9a7 	bl	8028cbe <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 8027970:	4603      	mov	r3, r0
      }
 8027972:	4618      	mov	r0, r3
 8027974:	370c      	adds	r7, #12
 8027976:	46bd      	mov	sp, r7
 8027978:	bd90      	pop	{r4, r7, pc}

0802797a <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 802797a:	b590      	push	{r4, r7, lr}
 802797c:	b083      	sub	sp, #12
 802797e:	af00      	add	r7, sp, #0
 8027980:	6078      	str	r0, [r7, #4]
 8027982:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8027984:	687b      	ldr	r3, [r7, #4]
 8027986:	683a      	ldr	r2, [r7, #0]
 8027988:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 802798a:	683b      	ldr	r3, [r7, #0]
 802798c:	681a      	ldr	r2, [r3, #0]
 802798e:	687b      	ldr	r3, [r7, #4]
 8027990:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8027992:	687b      	ldr	r3, [r7, #4]
 8027994:	685c      	ldr	r4, [r3, #4]
 8027996:	f001 f9a1 	bl	8028cdc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 802799a:	4603      	mov	r3, r0
 802799c:	009b      	lsls	r3, r3, #2
 802799e:	18e2      	adds	r2, r4, r3
 80279a0:	687b      	ldr	r3, [r7, #4]
 80279a2:	609a      	str	r2, [r3, #8]
      }
 80279a4:	bf00      	nop
 80279a6:	370c      	adds	r7, #12
 80279a8:	46bd      	mov	sp, r7
 80279aa:	bd90      	pop	{r4, r7, pc}

080279ac <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80279ac:	b590      	push	{r4, r7, lr}
 80279ae:	b083      	sub	sp, #12
 80279b0:	af00      	add	r7, sp, #0
 80279b2:	6078      	str	r0, [r7, #4]
 80279b4:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80279b6:	687c      	ldr	r4, [r7, #4]
 80279b8:	2004      	movs	r0, #4
 80279ba:	f7f9 fa90 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80279be:	4603      	mov	r3, r0
 80279c0:	461a      	mov	r2, r3
 80279c2:	6839      	ldr	r1, [r7, #0]
 80279c4:	4620      	mov	r0, r4
 80279c6:	f001 f991 	bl	8028cec <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 80279ca:	bf00      	nop
 80279cc:	370c      	adds	r7, #12
 80279ce:	46bd      	mov	sp, r7
 80279d0:	bd90      	pop	{r4, r7, pc}

080279d2 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 80279d2:	b480      	push	{r7}
 80279d4:	b083      	sub	sp, #12
 80279d6:	af00      	add	r7, sp, #0
 80279d8:	6078      	str	r0, [r7, #4]
 80279da:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80279dc:	683b      	ldr	r3, [r7, #0]
 80279de:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80279e0:	687b      	ldr	r3, [r7, #4]
 80279e2:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80279e4:	683b      	ldr	r3, [r7, #0]
 80279e6:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80279e8:	687b      	ldr	r3, [r7, #4]
 80279ea:	605a      	str	r2, [r3, #4]
 80279ec:	683b      	ldr	r3, [r7, #0]
 80279ee:	689a      	ldr	r2, [r3, #8]
 80279f0:	687b      	ldr	r3, [r7, #4]
 80279f2:	609a      	str	r2, [r3, #8]
 80279f4:	683b      	ldr	r3, [r7, #0]
 80279f6:	68da      	ldr	r2, [r3, #12]
 80279f8:	687b      	ldr	r3, [r7, #4]
 80279fa:	60da      	str	r2, [r3, #12]
 80279fc:	687b      	ldr	r3, [r7, #4]
 80279fe:	4618      	mov	r0, r3
 8027a00:	370c      	adds	r7, #12
 8027a02:	46bd      	mov	sp, r7
 8027a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a08:	4770      	bx	lr

08027a0a <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 8027a0a:	b480      	push	{r7}
 8027a0c:	b083      	sub	sp, #12
 8027a0e:	af00      	add	r7, sp, #0
 8027a10:	6078      	str	r0, [r7, #4]
 8027a12:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8027a14:	bf00      	nop
 8027a16:	370c      	adds	r7, #12
 8027a18:	46bd      	mov	sp, r7
 8027a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a1e:	4770      	bx	lr

08027a20 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027a20:	b480      	push	{r7}
 8027a22:	b083      	sub	sp, #12
 8027a24:	af00      	add	r7, sp, #0
 8027a26:	6078      	str	r0, [r7, #4]
 8027a28:	687b      	ldr	r3, [r7, #4]
 8027a2a:	4618      	mov	r0, r3
 8027a2c:	370c      	adds	r7, #12
 8027a2e:	46bd      	mov	sp, r7
 8027a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a34:	4770      	bx	lr

08027a36 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8027a36:	b480      	push	{r7}
 8027a38:	b083      	sub	sp, #12
 8027a3a:	af00      	add	r7, sp, #0
 8027a3c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8027a3e:	687b      	ldr	r3, [r7, #4]
 8027a40:	2200      	movs	r2, #0
 8027a42:	601a      	str	r2, [r3, #0]
 8027a44:	687b      	ldr	r3, [r7, #4]
 8027a46:	2200      	movs	r2, #0
 8027a48:	605a      	str	r2, [r3, #4]
 8027a4a:	687b      	ldr	r3, [r7, #4]
 8027a4c:	2200      	movs	r2, #0
 8027a4e:	609a      	str	r2, [r3, #8]
 8027a50:	687b      	ldr	r3, [r7, #4]
 8027a52:	2200      	movs	r2, #0
 8027a54:	60da      	str	r2, [r3, #12]
 8027a56:	687b      	ldr	r3, [r7, #4]
 8027a58:	4618      	mov	r0, r3
 8027a5a:	370c      	adds	r7, #12
 8027a5c:	46bd      	mov	sp, r7
 8027a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a62:	4770      	bx	lr

08027a64 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8027a64:	b580      	push	{r7, lr}
 8027a66:	b082      	sub	sp, #8
 8027a68:	af00      	add	r7, sp, #0
 8027a6a:	6078      	str	r0, [r7, #4]
 8027a6c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8027a6e:	2200      	movs	r2, #0
 8027a70:	6839      	ldr	r1, [r7, #0]
 8027a72:	6878      	ldr	r0, [r7, #4]
 8027a74:	f001 f949 	bl	8028d0a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8027a78:	4603      	mov	r3, r0
 8027a7a:	4618      	mov	r0, r3
 8027a7c:	3708      	adds	r7, #8
 8027a7e:	46bd      	mov	sp, r7
 8027a80:	bd80      	pop	{r7, pc}

08027a82 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8027a82:	b580      	push	{r7, lr}
 8027a84:	b082      	sub	sp, #8
 8027a86:	af00      	add	r7, sp, #0
 8027a88:	6078      	str	r0, [r7, #4]
 8027a8a:	6039      	str	r1, [r7, #0]
 8027a8c:	6878      	ldr	r0, [r7, #4]
 8027a8e:	f001 f95a 	bl	8028d46 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 8027a92:	687b      	ldr	r3, [r7, #4]
 8027a94:	4618      	mov	r0, r3
 8027a96:	3708      	adds	r7, #8
 8027a98:	46bd      	mov	sp, r7
 8027a9a:	bd80      	pop	{r7, pc}

08027a9c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027a9c:	b480      	push	{r7}
 8027a9e:	b083      	sub	sp, #12
 8027aa0:	af00      	add	r7, sp, #0
 8027aa2:	6078      	str	r0, [r7, #4]
 8027aa4:	687b      	ldr	r3, [r7, #4]
 8027aa6:	4618      	mov	r0, r3
 8027aa8:	370c      	adds	r7, #12
 8027aaa:	46bd      	mov	sp, r7
 8027aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ab0:	4770      	bx	lr

08027ab2 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8027ab2:	b580      	push	{r7, lr}
 8027ab4:	b084      	sub	sp, #16
 8027ab6:	af00      	add	r7, sp, #0
 8027ab8:	60f8      	str	r0, [r7, #12]
 8027aba:	60b9      	str	r1, [r7, #8]
 8027abc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8027abe:	687b      	ldr	r3, [r7, #4]
 8027ac0:	009b      	lsls	r3, r3, #2
 8027ac2:	4619      	mov	r1, r3
 8027ac4:	68b8      	ldr	r0, [r7, #8]
 8027ac6:	f017 fa01 	bl	803eecc <_ZdlPvj>
      }
 8027aca:	bf00      	nop
 8027acc:	3710      	adds	r7, #16
 8027ace:	46bd      	mov	sp, r7
 8027ad0:	bd80      	pop	{r7, pc}

08027ad2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8027ad2:	b580      	push	{r7, lr}
 8027ad4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8027ad6:	2014      	movs	r0, #20
 8027ad8:	f7f9 fa01 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8027adc:	4603      	mov	r3, r0
 8027ade:	4618      	mov	r0, r3
 8027ae0:	bd80      	pop	{r7, pc}

08027ae2 <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8027ae2:	b580      	push	{r7, lr}
 8027ae4:	b082      	sub	sp, #8
 8027ae6:	af00      	add	r7, sp, #0
 8027ae8:	6078      	str	r0, [r7, #4]
 8027aea:	6878      	ldr	r0, [r7, #4]
 8027aec:	f001 f936 	bl	8028d5c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8027af0:	687b      	ldr	r3, [r7, #4]
 8027af2:	4618      	mov	r0, r3
 8027af4:	3708      	adds	r7, #8
 8027af6:	46bd      	mov	sp, r7
 8027af8:	bd80      	pop	{r7, pc}

08027afa <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8027afa:	b580      	push	{r7, lr}
 8027afc:	b082      	sub	sp, #8
 8027afe:	af00      	add	r7, sp, #0
 8027b00:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8027b02:	687b      	ldr	r3, [r7, #4]
 8027b04:	2200      	movs	r2, #0
 8027b06:	601a      	str	r2, [r3, #0]
 8027b08:	687b      	ldr	r3, [r7, #4]
 8027b0a:	2200      	movs	r2, #0
 8027b0c:	605a      	str	r2, [r3, #4]
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	3308      	adds	r3, #8
 8027b12:	4618      	mov	r0, r3
 8027b14:	f001 f92d 	bl	8028d72 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 8027b18:	687b      	ldr	r3, [r7, #4]
 8027b1a:	3318      	adds	r3, #24
 8027b1c:	4618      	mov	r0, r3
 8027b1e:	f001 f928 	bl	8028d72 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 8027b22:	687b      	ldr	r3, [r7, #4]
 8027b24:	4618      	mov	r0, r3
 8027b26:	3708      	adds	r7, #8
 8027b28:	46bd      	mov	sp, r7
 8027b2a:	bd80      	pop	{r7, pc}

08027b2c <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027b2c:	b480      	push	{r7}
 8027b2e:	b083      	sub	sp, #12
 8027b30:	af00      	add	r7, sp, #0
 8027b32:	6078      	str	r0, [r7, #4]
 8027b34:	687b      	ldr	r3, [r7, #4]
 8027b36:	4618      	mov	r0, r3
 8027b38:	370c      	adds	r7, #12
 8027b3a:	46bd      	mov	sp, r7
 8027b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b40:	4770      	bx	lr

08027b42 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8027b42:	b590      	push	{r4, r7, lr}
 8027b44:	b085      	sub	sp, #20
 8027b46:	af00      	add	r7, sp, #0
 8027b48:	6078      	str	r0, [r7, #4]
 8027b4a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8027b4c:	f107 030c 	add.w	r3, r7, #12
 8027b50:	6879      	ldr	r1, [r7, #4]
 8027b52:	4618      	mov	r0, r3
 8027b54:	f000 f82c 	bl	8027bb0 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8027b58:	f107 030c 	add.w	r3, r7, #12
 8027b5c:	6839      	ldr	r1, [r7, #0]
 8027b5e:	4618      	mov	r0, r3
 8027b60:	f001 f91e 	bl	8028da0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 8027b64:	4604      	mov	r4, r0
 8027b66:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8027b68:	f107 030c 	add.w	r3, r7, #12
 8027b6c:	4618      	mov	r0, r3
 8027b6e:	f000 f830 	bl	8027bd2 <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8027b72:	4623      	mov	r3, r4
      }
 8027b74:	4618      	mov	r0, r3
 8027b76:	3714      	adds	r7, #20
 8027b78:	46bd      	mov	sp, r7
 8027b7a:	bd90      	pop	{r4, r7, pc}

08027b7c <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8027b7c:	b580      	push	{r7, lr}
 8027b7e:	b086      	sub	sp, #24
 8027b80:	af00      	add	r7, sp, #0
 8027b82:	60f8      	str	r0, [r7, #12]
 8027b84:	60b9      	str	r1, [r7, #8]
 8027b86:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8027b88:	68bb      	ldr	r3, [r7, #8]
 8027b8a:	617b      	str	r3, [r7, #20]
 8027b8c:	697a      	ldr	r2, [r7, #20]
 8027b8e:	687b      	ldr	r3, [r7, #4]
 8027b90:	429a      	cmp	r2, r3
 8027b92:	d209      	bcs.n	8027ba8 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8027b94:	68f8      	ldr	r0, [r7, #12]
 8027b96:	f7ff fede 	bl	8027956 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8027b9a:	4602      	mov	r2, r0
 8027b9c:	697b      	ldr	r3, [r7, #20]
 8027b9e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8027ba0:	697b      	ldr	r3, [r7, #20]
 8027ba2:	3304      	adds	r3, #4
 8027ba4:	617b      	str	r3, [r7, #20]
 8027ba6:	e7f1      	b.n	8027b8c <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8027ba8:	bf00      	nop
 8027baa:	3718      	adds	r7, #24
 8027bac:	46bd      	mov	sp, r7
 8027bae:	bd80      	pop	{r7, pc}

08027bb0 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8027bb0:	b580      	push	{r7, lr}
 8027bb2:	b082      	sub	sp, #8
 8027bb4:	af00      	add	r7, sp, #0
 8027bb6:	6078      	str	r0, [r7, #4]
 8027bb8:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8027bba:	6838      	ldr	r0, [r7, #0]
 8027bbc:	f000 ffda 	bl	8028b74 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8027bc0:	4603      	mov	r3, r0
 8027bc2:	4619      	mov	r1, r3
 8027bc4:	6878      	ldr	r0, [r7, #4]
 8027bc6:	f001 f8fa 	bl	8028dbe <_ZNSaIPjEC1IjEERKSaIT_E>
 8027bca:	6878      	ldr	r0, [r7, #4]
 8027bcc:	3708      	adds	r7, #8
 8027bce:	46bd      	mov	sp, r7
 8027bd0:	bd80      	pop	{r7, pc}

08027bd2 <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8027bd2:	b580      	push	{r7, lr}
 8027bd4:	b082      	sub	sp, #8
 8027bd6:	af00      	add	r7, sp, #0
 8027bd8:	6078      	str	r0, [r7, #4]
 8027bda:	6878      	ldr	r0, [r7, #4]
 8027bdc:	f001 f8fc 	bl	8028dd8 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 8027be0:	687b      	ldr	r3, [r7, #4]
 8027be2:	4618      	mov	r0, r3
 8027be4:	3708      	adds	r7, #8
 8027be6:	46bd      	mov	sp, r7
 8027be8:	bd80      	pop	{r7, pc}

08027bea <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8027bea:	b580      	push	{r7, lr}
 8027bec:	b084      	sub	sp, #16
 8027bee:	af00      	add	r7, sp, #0
 8027bf0:	60f8      	str	r0, [r7, #12]
 8027bf2:	60b9      	str	r1, [r7, #8]
 8027bf4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8027bf6:	687a      	ldr	r2, [r7, #4]
 8027bf8:	68b9      	ldr	r1, [r7, #8]
 8027bfa:	68f8      	ldr	r0, [r7, #12]
 8027bfc:	f001 f8f7 	bl	8028dee <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 8027c00:	bf00      	nop
 8027c02:	3710      	adds	r7, #16
 8027c04:	46bd      	mov	sp, r7
 8027c06:	bd80      	pop	{r7, pc}

08027c08 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8027c08:	b5b0      	push	{r4, r5, r7, lr}
 8027c0a:	b08c      	sub	sp, #48	; 0x30
 8027c0c:	af00      	add	r7, sp, #0
 8027c0e:	6078      	str	r0, [r7, #4]
 8027c10:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8027c12:	6878      	ldr	r0, [r7, #4]
 8027c14:	f001 f8fb 	bl	8028e0e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8027c18:	4602      	mov	r2, r0
 8027c1a:	f107 0308 	add.w	r3, r7, #8
 8027c1e:	4611      	mov	r1, r2
 8027c20:	4618      	mov	r0, r3
 8027c22:	f001 f923 	bl	8028e6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8027c26:	6838      	ldr	r0, [r7, #0]
 8027c28:	f001 f8f1 	bl	8028e0e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8027c2c:	4602      	mov	r2, r0
 8027c2e:	687b      	ldr	r3, [r7, #4]
 8027c30:	461c      	mov	r4, r3
 8027c32:	4615      	mov	r5, r2
 8027c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027c3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027c40:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8027c44:	f107 0308 	add.w	r3, r7, #8
 8027c48:	4618      	mov	r0, r3
 8027c4a:	f001 f8e0 	bl	8028e0e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8027c4e:	4602      	mov	r2, r0
 8027c50:	683b      	ldr	r3, [r7, #0]
 8027c52:	461c      	mov	r4, r3
 8027c54:	4615      	mov	r5, r2
 8027c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027c5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027c62:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8027c66:	bf00      	nop
 8027c68:	3730      	adds	r7, #48	; 0x30
 8027c6a:	46bd      	mov	sp, r7
 8027c6c:	bdb0      	pop	{r4, r5, r7, pc}

08027c6e <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8027c6e:	b590      	push	{r4, r7, lr}
 8027c70:	b08b      	sub	sp, #44	; 0x2c
 8027c72:	af00      	add	r7, sp, #0
 8027c74:	6078      	str	r0, [r7, #4]
 8027c76:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8027c78:	f107 0308 	add.w	r3, r7, #8
 8027c7c:	6839      	ldr	r1, [r7, #0]
 8027c7e:	4618      	mov	r0, r3
 8027c80:	f7fc f9cf 	bl	8024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8027c84:	f107 0318 	add.w	r3, r7, #24
 8027c88:	6879      	ldr	r1, [r7, #4]
 8027c8a:	4618      	mov	r0, r3
 8027c8c:	f7fc f9af 	bl	8023fee <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8027c90:	687b      	ldr	r3, [r7, #4]
 8027c92:	4618      	mov	r0, r3
 8027c94:	f7fc f9ba 	bl	802400c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8027c98:	4603      	mov	r3, r0
 8027c9a:	f107 0218 	add.w	r2, r7, #24
 8027c9e:	f107 0108 	add.w	r1, r7, #8
 8027ca2:	6878      	ldr	r0, [r7, #4]
 8027ca4:	f7fc f9d9 	bl	802405a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8027ca8:	6878      	ldr	r0, [r7, #4]
 8027caa:	683b      	ldr	r3, [r7, #0]
 8027cac:	68db      	ldr	r3, [r3, #12]
 8027cae:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8027cb0:	687b      	ldr	r3, [r7, #4]
 8027cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8027cb4:	3304      	adds	r3, #4
 8027cb6:	461a      	mov	r2, r3
 8027cb8:	f7fc f954 	bl	8023f64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8027cbc:	687b      	ldr	r3, [r7, #4]
 8027cbe:	683a      	ldr	r2, [r7, #0]
 8027cc0:	f103 0418 	add.w	r4, r3, #24
 8027cc4:	4613      	mov	r3, r2
 8027cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8027ccc:	bf00      	nop
 8027cce:	372c      	adds	r7, #44	; 0x2c
 8027cd0:	46bd      	mov	sp, r7
 8027cd2:	bd90      	pop	{r4, r7, pc}

08027cd4 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8027cd4:	b580      	push	{r7, lr}
 8027cd6:	b084      	sub	sp, #16
 8027cd8:	af00      	add	r7, sp, #0
 8027cda:	60f8      	str	r0, [r7, #12]
 8027cdc:	60b9      	str	r1, [r7, #8]
 8027cde:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8027ce0:	68b8      	ldr	r0, [r7, #8]
 8027ce2:	f001 f8e2 	bl	8028eaa <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 8027ce6:	bf00      	nop
 8027ce8:	3710      	adds	r7, #16
 8027cea:	46bd      	mov	sp, r7
 8027cec:	bd80      	pop	{r7, pc}

08027cee <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8027cee:	b5b0      	push	{r4, r5, r7, lr}
 8027cf0:	b08c      	sub	sp, #48	; 0x30
 8027cf2:	af00      	add	r7, sp, #0
 8027cf4:	6078      	str	r0, [r7, #4]
 8027cf6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8027cf8:	6878      	ldr	r0, [r7, #4]
 8027cfa:	f001 f8e1 	bl	8028ec0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8027cfe:	4602      	mov	r2, r0
 8027d00:	f107 0308 	add.w	r3, r7, #8
 8027d04:	4611      	mov	r1, r2
 8027d06:	4618      	mov	r0, r3
 8027d08:	f001 f909 	bl	8028f1e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8027d0c:	6838      	ldr	r0, [r7, #0]
 8027d0e:	f001 f8d7 	bl	8028ec0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8027d12:	4602      	mov	r2, r0
 8027d14:	687b      	ldr	r3, [r7, #4]
 8027d16:	461c      	mov	r4, r3
 8027d18:	4615      	mov	r5, r2
 8027d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027d22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027d26:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8027d2a:	f107 0308 	add.w	r3, r7, #8
 8027d2e:	4618      	mov	r0, r3
 8027d30:	f001 f8c6 	bl	8028ec0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8027d34:	4602      	mov	r2, r0
 8027d36:	683b      	ldr	r3, [r7, #0]
 8027d38:	461c      	mov	r4, r3
 8027d3a:	4615      	mov	r5, r2
 8027d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027d44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027d48:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8027d4c:	bf00      	nop
 8027d4e:	3730      	adds	r7, #48	; 0x30
 8027d50:	46bd      	mov	sp, r7
 8027d52:	bdb0      	pop	{r4, r5, r7, pc}

08027d54 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8027d54:	b590      	push	{r4, r7, lr}
 8027d56:	b08b      	sub	sp, #44	; 0x2c
 8027d58:	af00      	add	r7, sp, #0
 8027d5a:	6078      	str	r0, [r7, #4]
 8027d5c:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8027d5e:	f107 0308 	add.w	r3, r7, #8
 8027d62:	6839      	ldr	r1, [r7, #0]
 8027d64:	4618      	mov	r0, r3
 8027d66:	f7fc f9ff 	bl	8024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8027d6a:	f107 0318 	add.w	r3, r7, #24
 8027d6e:	6879      	ldr	r1, [r7, #4]
 8027d70:	4618      	mov	r0, r3
 8027d72:	f7fc f9df 	bl	8024134 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8027d76:	687b      	ldr	r3, [r7, #4]
 8027d78:	4618      	mov	r0, r3
 8027d7a:	f7fc f9ea 	bl	8024152 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8027d7e:	4603      	mov	r3, r0
 8027d80:	f107 0218 	add.w	r2, r7, #24
 8027d84:	f107 0108 	add.w	r1, r7, #8
 8027d88:	6878      	ldr	r0, [r7, #4]
 8027d8a:	f7fc fa09 	bl	80241a0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8027d8e:	6878      	ldr	r0, [r7, #4]
 8027d90:	683b      	ldr	r3, [r7, #0]
 8027d92:	68db      	ldr	r3, [r3, #12]
 8027d94:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8027d96:	687b      	ldr	r3, [r7, #4]
 8027d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8027d9a:	3304      	adds	r3, #4
 8027d9c:	461a      	mov	r2, r3
 8027d9e:	f7fd fc49 	bl	8025634 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8027da2:	687b      	ldr	r3, [r7, #4]
 8027da4:	683a      	ldr	r2, [r7, #0]
 8027da6:	f103 0418 	add.w	r4, r3, #24
 8027daa:	4613      	mov	r3, r2
 8027dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8027db2:	bf00      	nop
 8027db4:	372c      	adds	r7, #44	; 0x2c
 8027db6:	46bd      	mov	sp, r7
 8027db8:	bd90      	pop	{r4, r7, pc}

08027dba <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8027dba:	b580      	push	{r7, lr}
 8027dbc:	b084      	sub	sp, #16
 8027dbe:	af00      	add	r7, sp, #0
 8027dc0:	60f8      	str	r0, [r7, #12]
 8027dc2:	60b9      	str	r1, [r7, #8]
 8027dc4:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8027dc6:	68b8      	ldr	r0, [r7, #8]
 8027dc8:	f001 f8c8 	bl	8028f5c <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 8027dcc:	bf00      	nop
 8027dce:	3710      	adds	r7, #16
 8027dd0:	46bd      	mov	sp, r7
 8027dd2:	bd80      	pop	{r7, pc}

08027dd4 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8027dd4:	b5b0      	push	{r4, r5, r7, lr}
 8027dd6:	b08c      	sub	sp, #48	; 0x30
 8027dd8:	af00      	add	r7, sp, #0
 8027dda:	6078      	str	r0, [r7, #4]
 8027ddc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8027dde:	6878      	ldr	r0, [r7, #4]
 8027de0:	f001 f8c7 	bl	8028f72 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8027de4:	4602      	mov	r2, r0
 8027de6:	f107 0308 	add.w	r3, r7, #8
 8027dea:	4611      	mov	r1, r2
 8027dec:	4618      	mov	r0, r3
 8027dee:	f001 f8ef 	bl	8028fd0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8027df2:	6838      	ldr	r0, [r7, #0]
 8027df4:	f001 f8bd 	bl	8028f72 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8027df8:	4602      	mov	r2, r0
 8027dfa:	687b      	ldr	r3, [r7, #4]
 8027dfc:	461c      	mov	r4, r3
 8027dfe:	4615      	mov	r5, r2
 8027e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027e08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027e0c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8027e10:	f107 0308 	add.w	r3, r7, #8
 8027e14:	4618      	mov	r0, r3
 8027e16:	f001 f8ac 	bl	8028f72 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8027e1a:	4602      	mov	r2, r0
 8027e1c:	683b      	ldr	r3, [r7, #0]
 8027e1e:	461c      	mov	r4, r3
 8027e20:	4615      	mov	r5, r2
 8027e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027e2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027e2e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8027e32:	bf00      	nop
 8027e34:	3730      	adds	r7, #48	; 0x30
 8027e36:	46bd      	mov	sp, r7
 8027e38:	bdb0      	pop	{r4, r5, r7, pc}

08027e3a <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8027e3a:	b580      	push	{r7, lr}
 8027e3c:	b084      	sub	sp, #16
 8027e3e:	af00      	add	r7, sp, #0
 8027e40:	60f8      	str	r0, [r7, #12]
 8027e42:	60b9      	str	r1, [r7, #8]
 8027e44:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8027e46:	68b8      	ldr	r0, [r7, #8]
 8027e48:	f001 f8e1 	bl	802900e <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8027e4c:	bf00      	nop
 8027e4e:	3710      	adds	r7, #16
 8027e50:	46bd      	mov	sp, r7
 8027e52:	bd80      	pop	{r7, pc}

08027e54 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8027e54:	b5b0      	push	{r4, r5, r7, lr}
 8027e56:	b08c      	sub	sp, #48	; 0x30
 8027e58:	af00      	add	r7, sp, #0
 8027e5a:	6078      	str	r0, [r7, #4]
 8027e5c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8027e5e:	6878      	ldr	r0, [r7, #4]
 8027e60:	f001 f8e0 	bl	8029024 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8027e64:	4602      	mov	r2, r0
 8027e66:	f107 0308 	add.w	r3, r7, #8
 8027e6a:	4611      	mov	r1, r2
 8027e6c:	4618      	mov	r0, r3
 8027e6e:	f001 f908 	bl	8029082 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8027e72:	6838      	ldr	r0, [r7, #0]
 8027e74:	f001 f8d6 	bl	8029024 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8027e78:	4602      	mov	r2, r0
 8027e7a:	687b      	ldr	r3, [r7, #4]
 8027e7c:	461c      	mov	r4, r3
 8027e7e:	4615      	mov	r5, r2
 8027e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027e88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027e8c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8027e90:	f107 0308 	add.w	r3, r7, #8
 8027e94:	4618      	mov	r0, r3
 8027e96:	f001 f8c5 	bl	8029024 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8027e9a:	4602      	mov	r2, r0
 8027e9c:	683b      	ldr	r3, [r7, #0]
 8027e9e:	461c      	mov	r4, r3
 8027ea0:	4615      	mov	r5, r2
 8027ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027eae:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8027eb2:	bf00      	nop
 8027eb4:	3730      	adds	r7, #48	; 0x30
 8027eb6:	46bd      	mov	sp, r7
 8027eb8:	bdb0      	pop	{r4, r5, r7, pc}

08027eba <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 8027eba:	b590      	push	{r4, r7, lr}
 8027ebc:	b08b      	sub	sp, #44	; 0x2c
 8027ebe:	af00      	add	r7, sp, #0
 8027ec0:	6078      	str	r0, [r7, #4]
 8027ec2:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8027ec4:	f107 0308 	add.w	r3, r7, #8
 8027ec8:	6839      	ldr	r1, [r7, #0]
 8027eca:	4618      	mov	r0, r3
 8027ecc:	f7fd f926 	bl	802511c <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8027ed0:	f107 0318 	add.w	r3, r7, #24
 8027ed4:	6879      	ldr	r1, [r7, #4]
 8027ed6:	4618      	mov	r0, r3
 8027ed8:	f7fd f906 	bl	80250e8 <_ZNSt5dequeIjSaIjEE3endEv>
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	4618      	mov	r0, r3
 8027ee0:	f7fd f911 	bl	8025106 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8027ee4:	4603      	mov	r3, r0
 8027ee6:	f107 0218 	add.w	r2, r7, #24
 8027eea:	f107 0108 	add.w	r1, r7, #8
 8027eee:	6878      	ldr	r0, [r7, #4]
 8027ef0:	f7fd f930 	bl	8025154 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8027ef4:	6878      	ldr	r0, [r7, #4]
 8027ef6:	683b      	ldr	r3, [r7, #0]
 8027ef8:	68db      	ldr	r3, [r3, #12]
 8027efa:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8027efc:	687b      	ldr	r3, [r7, #4]
 8027efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8027f00:	3304      	adds	r3, #4
 8027f02:	461a      	mov	r2, r3
 8027f04:	f7fe faf6 	bl	80264f4 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 8027f08:	687b      	ldr	r3, [r7, #4]
 8027f0a:	683a      	ldr	r2, [r7, #0]
 8027f0c:	f103 0418 	add.w	r4, r3, #24
 8027f10:	4613      	mov	r3, r2
 8027f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8027f18:	bf00      	nop
 8027f1a:	372c      	adds	r7, #44	; 0x2c
 8027f1c:	46bd      	mov	sp, r7
 8027f1e:	bd90      	pop	{r4, r7, pc}

08027f20 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8027f20:	b580      	push	{r7, lr}
 8027f22:	b084      	sub	sp, #16
 8027f24:	af00      	add	r7, sp, #0
 8027f26:	60f8      	str	r0, [r7, #12]
 8027f28:	60b9      	str	r1, [r7, #8]
 8027f2a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8027f2c:	68b8      	ldr	r0, [r7, #8]
 8027f2e:	f001 f8c7 	bl	80290c0 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8027f32:	bf00      	nop
 8027f34:	3710      	adds	r7, #16
 8027f36:	46bd      	mov	sp, r7
 8027f38:	bd80      	pop	{r7, pc}

08027f3a <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8027f3a:	b580      	push	{r7, lr}
 8027f3c:	b084      	sub	sp, #16
 8027f3e:	af00      	add	r7, sp, #0
 8027f40:	60f8      	str	r0, [r7, #12]
 8027f42:	60b9      	str	r1, [r7, #8]
 8027f44:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8027f46:	68f8      	ldr	r0, [r7, #12]
 8027f48:	f001 f8c5 	bl	80290d6 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 8027f4c:	4602      	mov	r2, r0
 8027f4e:	68bb      	ldr	r3, [r7, #8]
 8027f50:	4293      	cmp	r3, r2
 8027f52:	bf8c      	ite	hi
 8027f54:	2301      	movhi	r3, #1
 8027f56:	2300      	movls	r3, #0
 8027f58:	b2db      	uxtb	r3, r3
 8027f5a:	2b00      	cmp	r3, #0
 8027f5c:	d001      	beq.n	8027f62 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8027f5e:	f016 ffc8 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8027f62:	68bb      	ldr	r3, [r7, #8]
 8027f64:	009b      	lsls	r3, r3, #2
 8027f66:	4618      	mov	r0, r3
 8027f68:	f016 ffb2 	bl	803eed0 <_Znwj>
 8027f6c:	4603      	mov	r3, r0
      }
 8027f6e:	4618      	mov	r0, r3
 8027f70:	3710      	adds	r7, #16
 8027f72:	46bd      	mov	sp, r7
 8027f74:	bd80      	pop	{r7, pc}

08027f76 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8027f76:	b580      	push	{r7, lr}
 8027f78:	b084      	sub	sp, #16
 8027f7a:	af00      	add	r7, sp, #0
 8027f7c:	60f8      	str	r0, [r7, #12]
 8027f7e:	60b9      	str	r1, [r7, #8]
 8027f80:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8027f82:	687a      	ldr	r2, [r7, #4]
 8027f84:	4613      	mov	r3, r2
 8027f86:	009b      	lsls	r3, r3, #2
 8027f88:	4413      	add	r3, r2
 8027f8a:	009b      	lsls	r3, r3, #2
 8027f8c:	4619      	mov	r1, r3
 8027f8e:	68b8      	ldr	r0, [r7, #8]
 8027f90:	f016 ff9c 	bl	803eecc <_ZdlPvj>
      }
 8027f94:	bf00      	nop
 8027f96:	3710      	adds	r7, #16
 8027f98:	46bd      	mov	sp, r7
 8027f9a:	bd80      	pop	{r7, pc}

08027f9c <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027f9c:	b480      	push	{r7}
 8027f9e:	b083      	sub	sp, #12
 8027fa0:	af00      	add	r7, sp, #0
 8027fa2:	6078      	str	r0, [r7, #4]
 8027fa4:	687b      	ldr	r3, [r7, #4]
 8027fa6:	4618      	mov	r0, r3
 8027fa8:	370c      	adds	r7, #12
 8027faa:	46bd      	mov	sp, r7
 8027fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fb0:	4770      	bx	lr

08027fb2 <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8027fb2:	b580      	push	{r7, lr}
 8027fb4:	b082      	sub	sp, #8
 8027fb6:	af00      	add	r7, sp, #0
 8027fb8:	6078      	str	r0, [r7, #4]
 8027fba:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8027fbc:	6839      	ldr	r1, [r7, #0]
 8027fbe:	6878      	ldr	r0, [r7, #4]
 8027fc0:	f001 f895 	bl	80290ee <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 8027fc4:	bf00      	nop
 8027fc6:	3708      	adds	r7, #8
 8027fc8:	46bd      	mov	sp, r7
 8027fca:	bd80      	pop	{r7, pc}

08027fcc <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 8027fcc:	b480      	push	{r7}
 8027fce:	b083      	sub	sp, #12
 8027fd0:	af00      	add	r7, sp, #0
 8027fd2:	6078      	str	r0, [r7, #4]
 8027fd4:	687b      	ldr	r3, [r7, #4]
 8027fd6:	4618      	mov	r0, r3
 8027fd8:	370c      	adds	r7, #12
 8027fda:	46bd      	mov	sp, r7
 8027fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fe0:	4770      	bx	lr

08027fe2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8027fe2:	b480      	push	{r7}
 8027fe4:	b083      	sub	sp, #12
 8027fe6:	af00      	add	r7, sp, #0
 8027fe8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8027fea:	687b      	ldr	r3, [r7, #4]
 8027fec:	2200      	movs	r2, #0
 8027fee:	601a      	str	r2, [r3, #0]
 8027ff0:	687b      	ldr	r3, [r7, #4]
 8027ff2:	2200      	movs	r2, #0
 8027ff4:	605a      	str	r2, [r3, #4]
 8027ff6:	687b      	ldr	r3, [r7, #4]
 8027ff8:	2200      	movs	r2, #0
 8027ffa:	609a      	str	r2, [r3, #8]
 8027ffc:	687b      	ldr	r3, [r7, #4]
 8027ffe:	2200      	movs	r2, #0
 8028000:	60da      	str	r2, [r3, #12]
 8028002:	687b      	ldr	r3, [r7, #4]
 8028004:	4618      	mov	r0, r3
 8028006:	370c      	adds	r7, #12
 8028008:	46bd      	mov	sp, r7
 802800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802800e:	4770      	bx	lr

08028010 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8028010:	b580      	push	{r7, lr}
 8028012:	b082      	sub	sp, #8
 8028014:	af00      	add	r7, sp, #0
 8028016:	6078      	str	r0, [r7, #4]
 8028018:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 802801a:	2200      	movs	r2, #0
 802801c:	6839      	ldr	r1, [r7, #0]
 802801e:	6878      	ldr	r0, [r7, #4]
 8028020:	f001 f87d 	bl	802911e <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 8028024:	4603      	mov	r3, r0
 8028026:	4618      	mov	r0, r3
 8028028:	3708      	adds	r7, #8
 802802a:	46bd      	mov	sp, r7
 802802c:	bd80      	pop	{r7, pc}

0802802e <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802802e:	b580      	push	{r7, lr}
 8028030:	b084      	sub	sp, #16
 8028032:	af00      	add	r7, sp, #0
 8028034:	60f8      	str	r0, [r7, #12]
 8028036:	60b9      	str	r1, [r7, #8]
 8028038:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802803a:	687a      	ldr	r2, [r7, #4]
 802803c:	68b9      	ldr	r1, [r7, #8]
 802803e:	68f8      	ldr	r0, [r7, #12]
 8028040:	f001 f88b 	bl	802915a <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 8028044:	bf00      	nop
 8028046:	3710      	adds	r7, #16
 8028048:	46bd      	mov	sp, r7
 802804a:	bd80      	pop	{r7, pc}

0802804c <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 802804c:	b480      	push	{r7}
 802804e:	b083      	sub	sp, #12
 8028050:	af00      	add	r7, sp, #0
 8028052:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8028054:	687b      	ldr	r3, [r7, #4]
 8028056:	4618      	mov	r0, r3
 8028058:	370c      	adds	r7, #12
 802805a:	46bd      	mov	sp, r7
 802805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028060:	4770      	bx	lr

08028062 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8028062:	b580      	push	{r7, lr}
 8028064:	b082      	sub	sp, #8
 8028066:	af00      	add	r7, sp, #0
 8028068:	6078      	str	r0, [r7, #4]
 802806a:	6039      	str	r1, [r7, #0]
 802806c:	6878      	ldr	r0, [r7, #4]
 802806e:	f001 f884 	bl	802917a <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 8028072:	687b      	ldr	r3, [r7, #4]
 8028074:	4618      	mov	r0, r3
 8028076:	3708      	adds	r7, #8
 8028078:	46bd      	mov	sp, r7
 802807a:	bd80      	pop	{r7, pc}

0802807c <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802807c:	b480      	push	{r7}
 802807e:	b083      	sub	sp, #12
 8028080:	af00      	add	r7, sp, #0
 8028082:	6078      	str	r0, [r7, #4]
 8028084:	687b      	ldr	r3, [r7, #4]
 8028086:	4618      	mov	r0, r3
 8028088:	370c      	adds	r7, #12
 802808a:	46bd      	mov	sp, r7
 802808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028090:	4770      	bx	lr

08028092 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8028092:	b580      	push	{r7, lr}
 8028094:	b084      	sub	sp, #16
 8028096:	af00      	add	r7, sp, #0
 8028098:	60f8      	str	r0, [r7, #12]
 802809a:	60b9      	str	r1, [r7, #8]
 802809c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802809e:	687b      	ldr	r3, [r7, #4]
 80280a0:	009b      	lsls	r3, r3, #2
 80280a2:	4619      	mov	r1, r3
 80280a4:	68b8      	ldr	r0, [r7, #8]
 80280a6:	f016 ff11 	bl	803eecc <_ZdlPvj>
      }
 80280aa:	bf00      	nop
 80280ac:	3710      	adds	r7, #16
 80280ae:	46bd      	mov	sp, r7
 80280b0:	bd80      	pop	{r7, pc}

080280b2 <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80280b2:	b580      	push	{r7, lr}
 80280b4:	b082      	sub	sp, #8
 80280b6:	af00      	add	r7, sp, #0
 80280b8:	6078      	str	r0, [r7, #4]
 80280ba:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80280bc:	6839      	ldr	r1, [r7, #0]
 80280be:	6878      	ldr	r0, [r7, #4]
 80280c0:	f001 f866 	bl	8029190 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 80280c4:	bf00      	nop
 80280c6:	3708      	adds	r7, #8
 80280c8:	46bd      	mov	sp, r7
 80280ca:	bd80      	pop	{r7, pc}

080280cc <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80280cc:	b580      	push	{r7, lr}
 80280ce:	b082      	sub	sp, #8
 80280d0:	af00      	add	r7, sp, #0
 80280d2:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80280d4:	6878      	ldr	r0, [r7, #4]
 80280d6:	f001 f873 	bl	80291c0 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 80280da:	4603      	mov	r3, r0
      }
 80280dc:	4618      	mov	r0, r3
 80280de:	3708      	adds	r7, #8
 80280e0:	46bd      	mov	sp, r7
 80280e2:	bd80      	pop	{r7, pc}

080280e4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80280e4:	b480      	push	{r7}
 80280e6:	b083      	sub	sp, #12
 80280e8:	af00      	add	r7, sp, #0
 80280ea:	6078      	str	r0, [r7, #4]
 80280ec:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80280ee:	683b      	ldr	r3, [r7, #0]
 80280f0:	681a      	ldr	r2, [r3, #0]
 80280f2:	687b      	ldr	r3, [r7, #4]
 80280f4:	681b      	ldr	r3, [r3, #0]
 80280f6:	429a      	cmp	r2, r3
 80280f8:	d201      	bcs.n	80280fe <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80280fa:	683b      	ldr	r3, [r7, #0]
 80280fc:	e000      	b.n	8028100 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80280fe:	687b      	ldr	r3, [r7, #4]
    }
 8028100:	4618      	mov	r0, r3
 8028102:	370c      	adds	r7, #12
 8028104:	46bd      	mov	sp, r7
 8028106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802810a:	4770      	bx	lr

0802810c <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 802810c:	b590      	push	{r4, r7, lr}
 802810e:	b085      	sub	sp, #20
 8028110:	af00      	add	r7, sp, #0
 8028112:	60f8      	str	r0, [r7, #12]
 8028114:	60b9      	str	r1, [r7, #8]
 8028116:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028118:	68f8      	ldr	r0, [r7, #12]
 802811a:	f001 f85d 	bl	80291d8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 802811e:	4604      	mov	r4, r0
 8028120:	68b8      	ldr	r0, [r7, #8]
 8028122:	f001 f859 	bl	80291d8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8028126:	4603      	mov	r3, r0
 8028128:	687a      	ldr	r2, [r7, #4]
 802812a:	4619      	mov	r1, r3
 802812c:	4620      	mov	r0, r4
 802812e:	f001 f85e 	bl	80291ee <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8028132:	4603      	mov	r3, r0
    }
 8028134:	4618      	mov	r0, r3
 8028136:	3714      	adds	r7, #20
 8028138:	46bd      	mov	sp, r7
 802813a:	bd90      	pop	{r4, r7, pc}

0802813c <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 802813c:	b590      	push	{r4, r7, lr}
 802813e:	b085      	sub	sp, #20
 8028140:	af00      	add	r7, sp, #0
 8028142:	60f8      	str	r0, [r7, #12]
 8028144:	60b9      	str	r1, [r7, #8]
 8028146:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028148:	68f8      	ldr	r0, [r7, #12]
 802814a:	f001 f845 	bl	80291d8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 802814e:	4604      	mov	r4, r0
 8028150:	68b8      	ldr	r0, [r7, #8]
 8028152:	f001 f841 	bl	80291d8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8028156:	4603      	mov	r3, r0
 8028158:	687a      	ldr	r2, [r7, #4]
 802815a:	4619      	mov	r1, r3
 802815c:	4620      	mov	r0, r4
 802815e:	f001 f869 	bl	8029234 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8028162:	4603      	mov	r3, r0
    }
 8028164:	4618      	mov	r0, r3
 8028166:	3714      	adds	r7, #20
 8028168:	46bd      	mov	sp, r7
 802816a:	bd90      	pop	{r4, r7, pc}

0802816c <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802816c:	b580      	push	{r7, lr}
 802816e:	b084      	sub	sp, #16
 8028170:	af00      	add	r7, sp, #0
 8028172:	60f8      	str	r0, [r7, #12]
 8028174:	60b9      	str	r1, [r7, #8]
 8028176:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8028178:	68f8      	ldr	r0, [r7, #12]
 802817a:	f001 f87f 	bl	802927c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 802817e:	4602      	mov	r2, r0
 8028180:	68bb      	ldr	r3, [r7, #8]
 8028182:	4293      	cmp	r3, r2
 8028184:	bf8c      	ite	hi
 8028186:	2301      	movhi	r3, #1
 8028188:	2300      	movls	r3, #0
 802818a:	b2db      	uxtb	r3, r3
 802818c:	2b00      	cmp	r3, #0
 802818e:	d001      	beq.n	8028194 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8028190:	f016 feaf 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8028194:	68ba      	ldr	r2, [r7, #8]
 8028196:	4613      	mov	r3, r2
 8028198:	009b      	lsls	r3, r3, #2
 802819a:	4413      	add	r3, r2
 802819c:	009b      	lsls	r3, r3, #2
 802819e:	4618      	mov	r0, r3
 80281a0:	f016 fe96 	bl	803eed0 <_Znwj>
 80281a4:	4603      	mov	r3, r0
      }
 80281a6:	4618      	mov	r0, r3
 80281a8:	3710      	adds	r7, #16
 80281aa:	46bd      	mov	sp, r7
 80281ac:	bd80      	pop	{r7, pc}

080281ae <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80281ae:	b580      	push	{r7, lr}
 80281b0:	b082      	sub	sp, #8
 80281b2:	af00      	add	r7, sp, #0
 80281b4:	6078      	str	r0, [r7, #4]
 80281b6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80281b8:	6839      	ldr	r1, [r7, #0]
 80281ba:	6878      	ldr	r0, [r7, #4]
 80281bc:	f7fc f978 	bl	80244b0 <_ZNSaIhEC1ERKS_>
 80281c0:	687b      	ldr	r3, [r7, #4]
 80281c2:	4618      	mov	r0, r3
 80281c4:	f7fc f817 	bl	80241f6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80281c8:	687b      	ldr	r3, [r7, #4]
 80281ca:	4618      	mov	r0, r3
 80281cc:	3708      	adds	r7, #8
 80281ce:	46bd      	mov	sp, r7
 80281d0:	bd80      	pop	{r7, pc}

080281d2 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80281d2:	b480      	push	{r7}
 80281d4:	b083      	sub	sp, #12
 80281d6:	af00      	add	r7, sp, #0
 80281d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80281da:	687b      	ldr	r3, [r7, #4]
 80281dc:	4618      	mov	r0, r3
 80281de:	370c      	adds	r7, #12
 80281e0:	46bd      	mov	sp, r7
 80281e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281e6:	4770      	bx	lr

080281e8 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80281e8:	b580      	push	{r7, lr}
 80281ea:	b084      	sub	sp, #16
 80281ec:	af00      	add	r7, sp, #0
 80281ee:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80281f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80281f4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80281f6:	6878      	ldr	r0, [r7, #4]
 80281f8:	f001 f84e 	bl	8029298 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 80281fc:	4603      	mov	r3, r0
 80281fe:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8028200:	f107 0208 	add.w	r2, r7, #8
 8028204:	f107 030c 	add.w	r3, r7, #12
 8028208:	4611      	mov	r1, r2
 802820a:	4618      	mov	r0, r3
 802820c:	f7ff ff6a 	bl	80280e4 <_ZSt3minIjERKT_S2_S2_>
 8028210:	4603      	mov	r3, r0
 8028212:	681b      	ldr	r3, [r3, #0]
      }
 8028214:	4618      	mov	r0, r3
 8028216:	3710      	adds	r7, #16
 8028218:	46bd      	mov	sp, r7
 802821a:	bd80      	pop	{r7, pc}

0802821c <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 802821c:	b590      	push	{r4, r7, lr}
 802821e:	b08b      	sub	sp, #44	; 0x2c
 8028220:	af00      	add	r7, sp, #0
 8028222:	60f8      	str	r0, [r7, #12]
 8028224:	60b9      	str	r1, [r7, #8]
 8028226:	4613      	mov	r3, r2
 8028228:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 802822a:	68fb      	ldr	r3, [r7, #12]
 802822c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802822e:	68fb      	ldr	r3, [r7, #12]
 8028230:	695b      	ldr	r3, [r3, #20]
 8028232:	1ad3      	subs	r3, r2, r3
 8028234:	109b      	asrs	r3, r3, #2
 8028236:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8028238:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 802823a:	68bb      	ldr	r3, [r7, #8]
 802823c:	6a3a      	ldr	r2, [r7, #32]
 802823e:	4413      	add	r3, r2
 8028240:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8028242:	68fb      	ldr	r3, [r7, #12]
 8028244:	685a      	ldr	r2, [r3, #4]
 8028246:	69fb      	ldr	r3, [r7, #28]
 8028248:	005b      	lsls	r3, r3, #1
 802824a:	429a      	cmp	r2, r3
 802824c:	d92d      	bls.n	80282aa <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802824e:	68fb      	ldr	r3, [r7, #12]
 8028250:	681a      	ldr	r2, [r3, #0]
 8028252:	68fb      	ldr	r3, [r7, #12]
 8028254:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8028256:	69fb      	ldr	r3, [r7, #28]
 8028258:	1acb      	subs	r3, r1, r3
 802825a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802825c:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802825e:	79fb      	ldrb	r3, [r7, #7]
 8028260:	2b00      	cmp	r3, #0
 8028262:	d002      	beq.n	802826a <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8028264:	68bb      	ldr	r3, [r7, #8]
 8028266:	009b      	lsls	r3, r3, #2
 8028268:	e000      	b.n	802826c <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 802826a:	2300      	movs	r3, #0
 802826c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802826e:	4413      	add	r3, r2
 8028270:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8028272:	68fb      	ldr	r3, [r7, #12]
 8028274:	695b      	ldr	r3, [r3, #20]
 8028276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028278:	429a      	cmp	r2, r3
 802827a:	d209      	bcs.n	8028290 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 802827c:	68fb      	ldr	r3, [r7, #12]
 802827e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8028280:	68fb      	ldr	r3, [r7, #12]
 8028282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8028284:	3304      	adds	r3, #4
 8028286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028288:	4619      	mov	r1, r3
 802828a:	f001 f811 	bl	80292b0 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 802828e:	e048      	b.n	8028322 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028290:	68fb      	ldr	r3, [r7, #12]
 8028292:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8028294:	68fb      	ldr	r3, [r7, #12]
 8028296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028298:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 802829a:	6a3b      	ldr	r3, [r7, #32]
 802829c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802829e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80282a0:	4413      	add	r3, r2
 80282a2:	461a      	mov	r2, r3
 80282a4:	f001 f81c 	bl	80292e0 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 80282a8:	e03b      	b.n	8028322 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80282aa:	68fb      	ldr	r3, [r7, #12]
 80282ac:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80282ae:	68fb      	ldr	r3, [r7, #12]
 80282b0:	3304      	adds	r3, #4
 80282b2:	f107 0208 	add.w	r2, r7, #8
 80282b6:	4611      	mov	r1, r2
 80282b8:	4618      	mov	r0, r3
 80282ba:	f7fd f838 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 80282be:	4603      	mov	r3, r0
 80282c0:	681b      	ldr	r3, [r3, #0]
 80282c2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80282c4:	3302      	adds	r3, #2
 80282c6:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80282c8:	68fb      	ldr	r3, [r7, #12]
 80282ca:	69b9      	ldr	r1, [r7, #24]
 80282cc:	4618      	mov	r0, r3
 80282ce:	f7fe fabc 	bl	802684a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 80282d2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80282d4:	69ba      	ldr	r2, [r7, #24]
 80282d6:	69fb      	ldr	r3, [r7, #28]
 80282d8:	1ad3      	subs	r3, r2, r3
 80282da:	085b      	lsrs	r3, r3, #1
 80282dc:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80282de:	79fb      	ldrb	r3, [r7, #7]
 80282e0:	2b00      	cmp	r3, #0
 80282e2:	d002      	beq.n	80282ea <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 80282e4:	68bb      	ldr	r3, [r7, #8]
 80282e6:	009b      	lsls	r3, r3, #2
 80282e8:	e000      	b.n	80282ec <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80282ea:	2300      	movs	r3, #0
 80282ec:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80282ee:	697a      	ldr	r2, [r7, #20]
 80282f0:	4413      	add	r3, r2
 80282f2:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80282f4:	68fb      	ldr	r3, [r7, #12]
 80282f6:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80282f8:	68fb      	ldr	r3, [r7, #12]
 80282fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80282fc:	3304      	adds	r3, #4
 80282fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028300:	4619      	mov	r1, r3
 8028302:	f000 ffd5 	bl	80292b0 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8028306:	68f8      	ldr	r0, [r7, #12]
 8028308:	68fb      	ldr	r3, [r7, #12]
 802830a:	6819      	ldr	r1, [r3, #0]
 802830c:	68fb      	ldr	r3, [r7, #12]
 802830e:	685b      	ldr	r3, [r3, #4]
 8028310:	461a      	mov	r2, r3
 8028312:	f7fd f9a9 	bl	8025668 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8028316:	68fb      	ldr	r3, [r7, #12]
 8028318:	697a      	ldr	r2, [r7, #20]
 802831a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 802831c:	68fb      	ldr	r3, [r7, #12]
 802831e:	69ba      	ldr	r2, [r7, #24]
 8028320:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8028322:	68fb      	ldr	r3, [r7, #12]
 8028324:	3308      	adds	r3, #8
 8028326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028328:	4618      	mov	r0, r3
 802832a:	f7fe fac5 	bl	80268b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802832e:	68fb      	ldr	r3, [r7, #12]
 8028330:	f103 0018 	add.w	r0, r3, #24
 8028334:	6a3a      	ldr	r2, [r7, #32]
 8028336:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802833a:	4413      	add	r3, r2
 802833c:	009b      	lsls	r3, r3, #2
 802833e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028340:	4413      	add	r3, r2
 8028342:	4619      	mov	r1, r3
 8028344:	f7fe fab8 	bl	80268b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8028348:	bf00      	nop
 802834a:	372c      	adds	r7, #44	; 0x2c
 802834c:	46bd      	mov	sp, r7
 802834e:	bd90      	pop	{r4, r7, pc}

08028350 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8028350:	b580      	push	{r7, lr}
 8028352:	b082      	sub	sp, #8
 8028354:	af00      	add	r7, sp, #0
 8028356:	6078      	str	r0, [r7, #4]
 8028358:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 802835a:	2200      	movs	r2, #0
 802835c:	6839      	ldr	r1, [r7, #0]
 802835e:	6878      	ldr	r0, [r7, #4]
 8028360:	f000 ffd6 	bl	8029310 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8028364:	4603      	mov	r3, r0
 8028366:	4618      	mov	r0, r3
 8028368:	3708      	adds	r7, #8
 802836a:	46bd      	mov	sp, r7
 802836c:	bd80      	pop	{r7, pc}

0802836e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 802836e:	b580      	push	{r7, lr}
 8028370:	b082      	sub	sp, #8
 8028372:	af00      	add	r7, sp, #0
 8028374:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8028376:	6878      	ldr	r0, [r7, #4]
 8028378:	f000 ffe8 	bl	802934c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 802837c:	4603      	mov	r3, r0
      }
 802837e:	4618      	mov	r0, r3
 8028380:	3708      	adds	r7, #8
 8028382:	46bd      	mov	sp, r7
 8028384:	bd80      	pop	{r7, pc}

08028386 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8028386:	b580      	push	{r7, lr}
 8028388:	b084      	sub	sp, #16
 802838a:	af00      	add	r7, sp, #0
 802838c:	6078      	str	r0, [r7, #4]
 802838e:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8028390:	2300      	movs	r3, #0
 8028392:	73fb      	strb	r3, [r7, #15]
 8028394:	f107 030f 	add.w	r3, r7, #15
 8028398:	461a      	mov	r2, r3
 802839a:	6839      	ldr	r1, [r7, #0]
 802839c:	6878      	ldr	r0, [r7, #4]
 802839e:	f000 ffe1 	bl	8029364 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80283a2:	4603      	mov	r3, r0
	}
 80283a4:	4618      	mov	r0, r3
 80283a6:	3710      	adds	r7, #16
 80283a8:	46bd      	mov	sp, r7
 80283aa:	bd80      	pop	{r7, pc}

080283ac <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80283ac:	b580      	push	{r7, lr}
 80283ae:	b084      	sub	sp, #16
 80283b0:	af00      	add	r7, sp, #0
 80283b2:	60f8      	str	r0, [r7, #12]
 80283b4:	60b9      	str	r1, [r7, #8]
 80283b6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80283b8:	68f8      	ldr	r0, [r7, #12]
 80283ba:	f000 ffee 	bl	802939a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80283be:	4602      	mov	r2, r0
 80283c0:	68bb      	ldr	r3, [r7, #8]
 80283c2:	4293      	cmp	r3, r2
 80283c4:	bf8c      	ite	hi
 80283c6:	2301      	movhi	r3, #1
 80283c8:	2300      	movls	r3, #0
 80283ca:	b2db      	uxtb	r3, r3
 80283cc:	2b00      	cmp	r3, #0
 80283ce:	d001      	beq.n	80283d4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80283d0:	f016 fd8f 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80283d4:	68b8      	ldr	r0, [r7, #8]
 80283d6:	f016 fd7b 	bl	803eed0 <_Znwj>
 80283da:	4603      	mov	r3, r0
      }
 80283dc:	4618      	mov	r0, r3
 80283de:	3710      	adds	r7, #16
 80283e0:	46bd      	mov	sp, r7
 80283e2:	bd80      	pop	{r7, pc}

080283e4 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80283e4:	b5b0      	push	{r4, r5, r7, lr}
 80283e6:	b084      	sub	sp, #16
 80283e8:	af00      	add	r7, sp, #0
 80283ea:	60f8      	str	r0, [r7, #12]
 80283ec:	60b9      	str	r1, [r7, #8]
 80283ee:	607a      	str	r2, [r7, #4]
 80283f0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80283f2:	68f8      	ldr	r0, [r7, #12]
 80283f4:	f7fe fd08 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 80283f8:	4604      	mov	r4, r0
 80283fa:	68b8      	ldr	r0, [r7, #8]
 80283fc:	f7fe fd04 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8028400:	4605      	mov	r5, r0
 8028402:	6878      	ldr	r0, [r7, #4]
 8028404:	f7fe fd00 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8028408:	4602      	mov	r2, r0
 802840a:	683b      	ldr	r3, [r7, #0]
 802840c:	4629      	mov	r1, r5
 802840e:	4620      	mov	r0, r4
 8028410:	f000 ffcf 	bl	80293b2 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8028414:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8028416:	4618      	mov	r0, r3
 8028418:	3710      	adds	r7, #16
 802841a:	46bd      	mov	sp, r7
 802841c:	bdb0      	pop	{r4, r5, r7, pc}

0802841e <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 802841e:	b580      	push	{r7, lr}
 8028420:	b082      	sub	sp, #8
 8028422:	af00      	add	r7, sp, #0
 8028424:	6078      	str	r0, [r7, #4]
 8028426:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8028428:	463b      	mov	r3, r7
 802842a:	4618      	mov	r0, r3
 802842c:	f000 ffdc 	bl	80293e8 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8028430:	4603      	mov	r3, r0
 8028432:	681a      	ldr	r2, [r3, #0]
 8028434:	687b      	ldr	r3, [r7, #4]
 8028436:	601a      	str	r2, [r3, #0]
 8028438:	687b      	ldr	r3, [r7, #4]
 802843a:	4618      	mov	r0, r3
 802843c:	3708      	adds	r7, #8
 802843e:	46bd      	mov	sp, r7
 8028440:	bd80      	pop	{r7, pc}

08028442 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8028442:	b580      	push	{r7, lr}
 8028444:	b086      	sub	sp, #24
 8028446:	af00      	add	r7, sp, #0
 8028448:	60f8      	str	r0, [r7, #12]
 802844a:	60b9      	str	r1, [r7, #8]
 802844c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 802844e:	2301      	movs	r3, #1
 8028450:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8028452:	687a      	ldr	r2, [r7, #4]
 8028454:	68b9      	ldr	r1, [r7, #8]
 8028456:	68f8      	ldr	r0, [r7, #12]
 8028458:	f000 ffd1 	bl	80293fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 802845c:	4603      	mov	r3, r0
    }
 802845e:	4618      	mov	r0, r3
 8028460:	3718      	adds	r7, #24
 8028462:	46bd      	mov	sp, r7
 8028464:	bd80      	pop	{r7, pc}

08028466 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8028466:	b580      	push	{r7, lr}
 8028468:	b084      	sub	sp, #16
 802846a:	af00      	add	r7, sp, #0
 802846c:	60f8      	str	r0, [r7, #12]
 802846e:	60b9      	str	r1, [r7, #8]
 8028470:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8028472:	687a      	ldr	r2, [r7, #4]
 8028474:	68b9      	ldr	r1, [r7, #8]
 8028476:	68f8      	ldr	r0, [r7, #12]
 8028478:	f000 ffd1 	bl	802941e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 802847c:	4603      	mov	r3, r0
 802847e:	4618      	mov	r0, r3
 8028480:	3710      	adds	r7, #16
 8028482:	46bd      	mov	sp, r7
 8028484:	bd80      	pop	{r7, pc}

08028486 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8028486:	b480      	push	{r7}
 8028488:	b083      	sub	sp, #12
 802848a:	af00      	add	r7, sp, #0
 802848c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	4618      	mov	r0, r3
 8028492:	370c      	adds	r7, #12
 8028494:	46bd      	mov	sp, r7
 8028496:	f85d 7b04 	ldr.w	r7, [sp], #4
 802849a:	4770      	bx	lr

0802849c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 802849c:	b480      	push	{r7}
 802849e:	b083      	sub	sp, #12
 80284a0:	af00      	add	r7, sp, #0
 80284a2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80284a4:	687b      	ldr	r3, [r7, #4]
 80284a6:	4618      	mov	r0, r3
 80284a8:	370c      	adds	r7, #12
 80284aa:	46bd      	mov	sp, r7
 80284ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284b0:	4770      	bx	lr

080284b2 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80284b2:	b580      	push	{r7, lr}
 80284b4:	b084      	sub	sp, #16
 80284b6:	af00      	add	r7, sp, #0
 80284b8:	60f8      	str	r0, [r7, #12]
 80284ba:	60b9      	str	r1, [r7, #8]
 80284bc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80284be:	687a      	ldr	r2, [r7, #4]
 80284c0:	68b9      	ldr	r1, [r7, #8]
 80284c2:	68f8      	ldr	r0, [r7, #12]
 80284c4:	f000 ffc3 	bl	802944e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80284c8:	4603      	mov	r3, r0
    }
 80284ca:	4618      	mov	r0, r3
 80284cc:	3710      	adds	r7, #16
 80284ce:	46bd      	mov	sp, r7
 80284d0:	bd80      	pop	{r7, pc}

080284d2 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80284d2:	b580      	push	{r7, lr}
 80284d4:	b084      	sub	sp, #16
 80284d6:	af00      	add	r7, sp, #0
 80284d8:	6078      	str	r0, [r7, #4]
 80284da:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	681a      	ldr	r2, [r3, #0]
 80284e0:	683b      	ldr	r3, [r7, #0]
 80284e2:	4413      	add	r3, r2
 80284e4:	60fb      	str	r3, [r7, #12]
 80284e6:	f107 020c 	add.w	r2, r7, #12
 80284ea:	f107 0308 	add.w	r3, r7, #8
 80284ee:	4611      	mov	r1, r2
 80284f0:	4618      	mov	r0, r3
 80284f2:	f7fd fb93 	bl	8025c1c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80284f6:	68bb      	ldr	r3, [r7, #8]
 80284f8:	4618      	mov	r0, r3
 80284fa:	3710      	adds	r7, #16
 80284fc:	46bd      	mov	sp, r7
 80284fe:	bd80      	pop	{r7, pc}

08028500 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028500:	b580      	push	{r7, lr}
 8028502:	b084      	sub	sp, #16
 8028504:	af00      	add	r7, sp, #0
 8028506:	60f8      	str	r0, [r7, #12]
 8028508:	60b9      	str	r1, [r7, #8]
 802850a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802850c:	687a      	ldr	r2, [r7, #4]
 802850e:	68b9      	ldr	r1, [r7, #8]
 8028510:	68f8      	ldr	r0, [r7, #12]
 8028512:	f000 ff9c 	bl	802944e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8028516:	4603      	mov	r3, r0
    }
 8028518:	4618      	mov	r0, r3
 802851a:	3710      	adds	r7, #16
 802851c:	46bd      	mov	sp, r7
 802851e:	bd80      	pop	{r7, pc}

08028520 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8028520:	b480      	push	{r7}
 8028522:	b083      	sub	sp, #12
 8028524:	af00      	add	r7, sp, #0
 8028526:	6078      	str	r0, [r7, #4]
    { return __it; }
 8028528:	687b      	ldr	r3, [r7, #4]
 802852a:	4618      	mov	r0, r3
 802852c:	370c      	adds	r7, #12
 802852e:	46bd      	mov	sp, r7
 8028530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028534:	4770      	bx	lr

08028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8028536:	b580      	push	{r7, lr}
 8028538:	b082      	sub	sp, #8
 802853a:	af00      	add	r7, sp, #0
 802853c:	6078      	str	r0, [r7, #4]
 802853e:	6039      	str	r1, [r7, #0]
    { return __it; }
 8028540:	6839      	ldr	r1, [r7, #0]
 8028542:	6878      	ldr	r0, [r7, #4]
 8028544:	f7fc fd59 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028548:	6878      	ldr	r0, [r7, #4]
 802854a:	3708      	adds	r7, #8
 802854c:	46bd      	mov	sp, r7
 802854e:	bd80      	pop	{r7, pc}

08028550 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8028550:	b480      	push	{r7}
 8028552:	b083      	sub	sp, #12
 8028554:	af00      	add	r7, sp, #0
 8028556:	6078      	str	r0, [r7, #4]
 8028558:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 802855a:	683b      	ldr	r3, [r7, #0]
 802855c:	681a      	ldr	r2, [r3, #0]
 802855e:	687b      	ldr	r3, [r7, #4]
 8028560:	681b      	ldr	r3, [r3, #0]
 8028562:	429a      	cmp	r2, r3
 8028564:	da01      	bge.n	802856a <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8028566:	683b      	ldr	r3, [r7, #0]
 8028568:	e000      	b.n	802856c <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 802856a:	687b      	ldr	r3, [r7, #4]
    }
 802856c:	4618      	mov	r0, r3
 802856e:	370c      	adds	r7, #12
 8028570:	46bd      	mov	sp, r7
 8028572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028576:	4770      	bx	lr

08028578 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8028578:	b580      	push	{r7, lr}
 802857a:	b088      	sub	sp, #32
 802857c:	af00      	add	r7, sp, #0
 802857e:	60f8      	str	r0, [r7, #12]
 8028580:	60b9      	str	r1, [r7, #8]
 8028582:	607a      	str	r2, [r7, #4]
 8028584:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8028586:	687a      	ldr	r2, [r7, #4]
 8028588:	68bb      	ldr	r3, [r7, #8]
 802858a:	1ad3      	subs	r3, r2, r3
 802858c:	109b      	asrs	r3, r3, #2
 802858e:	4a22      	ldr	r2, [pc, #136]	; (8028618 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8028590:	fb02 f303 	mul.w	r3, r2, r3
 8028594:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028596:	697b      	ldr	r3, [r7, #20]
 8028598:	2b00      	cmp	r3, #0
 802859a:	dd34      	ble.n	8028606 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 802859c:	683b      	ldr	r3, [r7, #0]
 802859e:	689a      	ldr	r2, [r3, #8]
 80285a0:	683b      	ldr	r3, [r7, #0]
 80285a2:	681b      	ldr	r3, [r3, #0]
 80285a4:	1ad3      	subs	r3, r2, r3
 80285a6:	109b      	asrs	r3, r3, #2
 80285a8:	4a1b      	ldr	r2, [pc, #108]	; (8028618 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 80285aa:	fb02 f303 	mul.w	r3, r2, r3
 80285ae:	61bb      	str	r3, [r7, #24]
 80285b0:	f107 0218 	add.w	r2, r7, #24
 80285b4:	f107 0314 	add.w	r3, r7, #20
 80285b8:	4611      	mov	r1, r2
 80285ba:	4618      	mov	r0, r3
 80285bc:	f7ff ffc8 	bl	8028550 <_ZSt3minIiERKT_S2_S2_>
 80285c0:	4603      	mov	r3, r0
	  const difference_type __clen
 80285c2:	681b      	ldr	r3, [r3, #0]
 80285c4:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80285c6:	69fa      	ldr	r2, [r7, #28]
 80285c8:	4613      	mov	r3, r2
 80285ca:	009b      	lsls	r3, r3, #2
 80285cc:	4413      	add	r3, r2
 80285ce:	009b      	lsls	r3, r3, #2
 80285d0:	461a      	mov	r2, r3
 80285d2:	68bb      	ldr	r3, [r7, #8]
 80285d4:	1899      	adds	r1, r3, r2
 80285d6:	683b      	ldr	r3, [r7, #0]
 80285d8:	681b      	ldr	r3, [r3, #0]
 80285da:	461a      	mov	r2, r3
 80285dc:	68b8      	ldr	r0, [r7, #8]
 80285de:	f000 ff50 	bl	8029482 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 80285e2:	69fa      	ldr	r2, [r7, #28]
 80285e4:	4613      	mov	r3, r2
 80285e6:	009b      	lsls	r3, r3, #2
 80285e8:	4413      	add	r3, r2
 80285ea:	009b      	lsls	r3, r3, #2
 80285ec:	461a      	mov	r2, r3
 80285ee:	68bb      	ldr	r3, [r7, #8]
 80285f0:	4413      	add	r3, r2
 80285f2:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 80285f4:	69f9      	ldr	r1, [r7, #28]
 80285f6:	6838      	ldr	r0, [r7, #0]
 80285f8:	f7ff f8ea 	bl	80277d0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 80285fc:	697a      	ldr	r2, [r7, #20]
 80285fe:	69fb      	ldr	r3, [r7, #28]
 8028600:	1ad3      	subs	r3, r2, r3
 8028602:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028604:	e7c7      	b.n	8028596 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8028606:	6839      	ldr	r1, [r7, #0]
 8028608:	68f8      	ldr	r0, [r7, #12]
 802860a:	f7fc fcf6 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802860e:	68f8      	ldr	r0, [r7, #12]
 8028610:	3720      	adds	r7, #32
 8028612:	46bd      	mov	sp, r7
 8028614:	bd80      	pop	{r7, pc}
 8028616:	bf00      	nop
 8028618:	cccccccd 	.word	0xcccccccd

0802861c <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802861c:	b580      	push	{r7, lr}
 802861e:	b084      	sub	sp, #16
 8028620:	af00      	add	r7, sp, #0
 8028622:	60f8      	str	r0, [r7, #12]
 8028624:	60b9      	str	r1, [r7, #8]
 8028626:	607a      	str	r2, [r7, #4]
    { return __res; }
 8028628:	6879      	ldr	r1, [r7, #4]
 802862a:	68f8      	ldr	r0, [r7, #12]
 802862c:	f7fc fce5 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028630:	68f8      	ldr	r0, [r7, #12]
 8028632:	3710      	adds	r7, #16
 8028634:	46bd      	mov	sp, r7
 8028636:	bd80      	pop	{r7, pc}

08028638 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8028638:	b590      	push	{r4, r7, lr}
 802863a:	b085      	sub	sp, #20
 802863c:	af00      	add	r7, sp, #0
 802863e:	6078      	str	r0, [r7, #4]
 8028640:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8028642:	6878      	ldr	r0, [r7, #4]
 8028644:	f7fd fcd1 	bl	8025fea <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8028648:	4604      	mov	r4, r0
 802864a:	6878      	ldr	r0, [r7, #4]
 802864c:	f7fb fa54 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8028650:	4603      	mov	r3, r0
 8028652:	1ae3      	subs	r3, r4, r3
 8028654:	683a      	ldr	r2, [r7, #0]
 8028656:	429a      	cmp	r2, r3
 8028658:	bf8c      	ite	hi
 802865a:	2301      	movhi	r3, #1
 802865c:	2300      	movls	r3, #0
 802865e:	b2db      	uxtb	r3, r3
 8028660:	2b00      	cmp	r3, #0
 8028662:	d002      	beq.n	802866a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8028664:	4816      	ldr	r0, [pc, #88]	; (80286c0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8028666:	f016 fc47 	bl	803eef8 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802866a:	f7ff fa32 	bl	8027ad2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802866e:	4602      	mov	r2, r0
 8028670:	683b      	ldr	r3, [r7, #0]
 8028672:	4413      	add	r3, r2
 8028674:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8028676:	f7ff fa2c 	bl	8027ad2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802867a:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802867c:	fbb4 f3f3 	udiv	r3, r4, r3
 8028680:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8028682:	68b9      	ldr	r1, [r7, #8]
 8028684:	6878      	ldr	r0, [r7, #4]
 8028686:	f7fd fcc1 	bl	802600c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802868a:	2301      	movs	r3, #1
 802868c:	60fb      	str	r3, [r7, #12]
 802868e:	68fa      	ldr	r2, [r7, #12]
 8028690:	68bb      	ldr	r3, [r7, #8]
 8028692:	429a      	cmp	r2, r3
 8028694:	d80f      	bhi.n	80286b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8028696:	6879      	ldr	r1, [r7, #4]
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	695a      	ldr	r2, [r3, #20]
 802869c:	68fb      	ldr	r3, [r7, #12]
 802869e:	009b      	lsls	r3, r3, #2
 80286a0:	425b      	negs	r3, r3
 80286a2:	18d4      	adds	r4, r2, r3
 80286a4:	4608      	mov	r0, r1
 80286a6:	f7fd fcc9 	bl	802603c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 80286aa:	4603      	mov	r3, r0
 80286ac:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80286ae:	68fb      	ldr	r3, [r7, #12]
 80286b0:	3301      	adds	r3, #1
 80286b2:	60fb      	str	r3, [r7, #12]
 80286b4:	e7eb      	b.n	802868e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 80286b6:	bf00      	nop
 80286b8:	3714      	adds	r7, #20
 80286ba:	46bd      	mov	sp, r7
 80286bc:	bd90      	pop	{r4, r7, pc}
 80286be:	bf00      	nop
 80286c0:	08040b70 	.word	0x08040b70

080286c4 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80286c4:	b580      	push	{r7, lr}
 80286c6:	b084      	sub	sp, #16
 80286c8:	af00      	add	r7, sp, #0
 80286ca:	60f8      	str	r0, [r7, #12]
 80286cc:	60b9      	str	r1, [r7, #8]
 80286ce:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80286d0:	68b9      	ldr	r1, [r7, #8]
 80286d2:	68f8      	ldr	r0, [r7, #12]
 80286d4:	f7fc fc91 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 80286d8:	6879      	ldr	r1, [r7, #4]
 80286da:	68f8      	ldr	r0, [r7, #12]
 80286dc:	f000 fee1 	bl	80294a2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 80286e0:	bf00      	nop
      }
 80286e2:	68f8      	ldr	r0, [r7, #12]
 80286e4:	3710      	adds	r7, #16
 80286e6:	46bd      	mov	sp, r7
 80286e8:	bd80      	pop	{r7, pc}

080286ea <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80286ea:	b580      	push	{r7, lr}
 80286ec:	b08a      	sub	sp, #40	; 0x28
 80286ee:	af00      	add	r7, sp, #0
 80286f0:	60f8      	str	r0, [r7, #12]
 80286f2:	60b9      	str	r1, [r7, #8]
 80286f4:	607a      	str	r2, [r7, #4]
 80286f6:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80286f8:	2301      	movs	r3, #1
 80286fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 80286fe:	f107 0314 	add.w	r3, r7, #20
 8028702:	6839      	ldr	r1, [r7, #0]
 8028704:	4618      	mov	r0, r3
 8028706:	f7fc fc78 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802870a:	68f8      	ldr	r0, [r7, #12]
 802870c:	f107 0314 	add.w	r3, r7, #20
 8028710:	687a      	ldr	r2, [r7, #4]
 8028712:	68b9      	ldr	r1, [r7, #8]
 8028714:	f000 fed5 	bl	80294c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8028718:	68f8      	ldr	r0, [r7, #12]
 802871a:	3728      	adds	r7, #40	; 0x28
 802871c:	46bd      	mov	sp, r7
 802871e:	bd80      	pop	{r7, pc}

08028720 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8028720:	b590      	push	{r4, r7, lr}
 8028722:	b085      	sub	sp, #20
 8028724:	af00      	add	r7, sp, #0
 8028726:	6078      	str	r0, [r7, #4]
 8028728:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 802872a:	6878      	ldr	r0, [r7, #4]
 802872c:	f7fd fc5d 	bl	8025fea <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8028730:	4604      	mov	r4, r0
 8028732:	6878      	ldr	r0, [r7, #4]
 8028734:	f7fb f9e0 	bl	8023af8 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8028738:	4603      	mov	r3, r0
 802873a:	1ae3      	subs	r3, r4, r3
 802873c:	683a      	ldr	r2, [r7, #0]
 802873e:	429a      	cmp	r2, r3
 8028740:	bf8c      	ite	hi
 8028742:	2301      	movhi	r3, #1
 8028744:	2300      	movls	r3, #0
 8028746:	b2db      	uxtb	r3, r3
 8028748:	2b00      	cmp	r3, #0
 802874a:	d002      	beq.n	8028752 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 802874c:	4815      	ldr	r0, [pc, #84]	; (80287a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 802874e:	f016 fbd3 	bl	803eef8 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8028752:	f7ff f9be 	bl	8027ad2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8028756:	4602      	mov	r2, r0
 8028758:	683b      	ldr	r3, [r7, #0]
 802875a:	4413      	add	r3, r2
 802875c:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 802875e:	f7ff f9b8 	bl	8027ad2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8028762:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8028764:	fbb4 f3f3 	udiv	r3, r4, r3
 8028768:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 802876a:	68b9      	ldr	r1, [r7, #8]
 802876c:	6878      	ldr	r0, [r7, #4]
 802876e:	f000 fec0 	bl	80294f2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8028772:	2301      	movs	r3, #1
 8028774:	60fb      	str	r3, [r7, #12]
 8028776:	68fa      	ldr	r2, [r7, #12]
 8028778:	68bb      	ldr	r3, [r7, #8]
 802877a:	429a      	cmp	r2, r3
 802877c:	d80e      	bhi.n	802879c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 802877e:	6879      	ldr	r1, [r7, #4]
 8028780:	687b      	ldr	r3, [r7, #4]
 8028782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028784:	68fb      	ldr	r3, [r7, #12]
 8028786:	009b      	lsls	r3, r3, #2
 8028788:	18d4      	adds	r4, r2, r3
 802878a:	4608      	mov	r0, r1
 802878c:	f7fd fc56 	bl	802603c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8028790:	4603      	mov	r3, r0
 8028792:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8028794:	68fb      	ldr	r3, [r7, #12]
 8028796:	3301      	adds	r3, #1
 8028798:	60fb      	str	r3, [r7, #12]
 802879a:	e7ec      	b.n	8028776 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 802879c:	bf00      	nop
 802879e:	3714      	adds	r7, #20
 80287a0:	46bd      	mov	sp, r7
 80287a2:	bd90      	pop	{r4, r7, pc}
 80287a4:	08040b90 	.word	0x08040b90

080287a8 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 80287a8:	b590      	push	{r4, r7, lr}
 80287aa:	b09b      	sub	sp, #108	; 0x6c
 80287ac:	af02      	add	r7, sp, #8
 80287ae:	60f8      	str	r0, [r7, #12]
 80287b0:	60b9      	str	r1, [r7, #8]
 80287b2:	607a      	str	r2, [r7, #4]
 80287b4:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 80287b6:	f107 0320 	add.w	r3, r7, #32
 80287ba:	68b9      	ldr	r1, [r7, #8]
 80287bc:	4618      	mov	r0, r3
 80287be:	f7fc fc1c 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80287c2:	f107 0310 	add.w	r3, r7, #16
 80287c6:	f107 0220 	add.w	r2, r7, #32
 80287ca:	4611      	mov	r1, r2
 80287cc:	4618      	mov	r0, r3
 80287ce:	f000 feab 	bl	8029528 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80287d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80287d6:	6879      	ldr	r1, [r7, #4]
 80287d8:	4618      	mov	r0, r3
 80287da:	f7fc fc0e 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80287de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80287e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80287e6:	4611      	mov	r1, r2
 80287e8:	4618      	mov	r0, r3
 80287ea:	f000 fe9d 	bl	8029528 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80287ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80287f2:	6839      	ldr	r1, [r7, #0]
 80287f4:	4618      	mov	r0, r3
 80287f6:	f7fc fc00 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80287fa:	68f8      	ldr	r0, [r7, #12]
 80287fc:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8028800:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028804:	f107 0110 	add.w	r1, r7, #16
 8028808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802880a:	9300      	str	r3, [sp, #0]
 802880c:	4623      	mov	r3, r4
 802880e:	f000 feb4 	bl	802957a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 8028812:	68f8      	ldr	r0, [r7, #12]
 8028814:	3764      	adds	r7, #100	; 0x64
 8028816:	46bd      	mov	sp, r7
 8028818:	bd90      	pop	{r4, r7, pc}

0802881a <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move(_II __first, _II __last, _OI __result)
 802881a:	b580      	push	{r7, lr}
 802881c:	b098      	sub	sp, #96	; 0x60
 802881e:	af00      	add	r7, sp, #0
 8028820:	60f8      	str	r0, [r7, #12]
 8028822:	60b9      	str	r1, [r7, #8]
 8028824:	607a      	str	r2, [r7, #4]
 8028826:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8028828:	f107 0320 	add.w	r3, r7, #32
 802882c:	68b9      	ldr	r1, [r7, #8]
 802882e:	4618      	mov	r0, r3
 8028830:	f7fc fbe3 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028834:	f107 0310 	add.w	r3, r7, #16
 8028838:	f107 0220 	add.w	r2, r7, #32
 802883c:	4611      	mov	r1, r2
 802883e:	4618      	mov	r0, r3
 8028840:	f000 fec1 	bl	80295c6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028844:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028848:	6879      	ldr	r1, [r7, #4]
 802884a:	4618      	mov	r0, r3
 802884c:	f7fc fbd5 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028854:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028858:	4611      	mov	r1, r2
 802885a:	4618      	mov	r0, r3
 802885c:	f000 feb3 	bl	80295c6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028864:	6839      	ldr	r1, [r7, #0]
 8028866:	4618      	mov	r0, r3
 8028868:	f7fc fbc7 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802886c:	68f8      	ldr	r0, [r7, #12]
 802886e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028872:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028876:	f107 0110 	add.w	r1, r7, #16
 802887a:	f000 feb1 	bl	80295e0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802887e:	68f8      	ldr	r0, [r7, #12]
 8028880:	3760      	adds	r7, #96	; 0x60
 8028882:	46bd      	mov	sp, r7
 8028884:	bd80      	pop	{r7, pc}

08028886 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8028886:	b590      	push	{r4, r7, lr}
 8028888:	b085      	sub	sp, #20
 802888a:	af00      	add	r7, sp, #0
 802888c:	6078      	str	r0, [r7, #4]
 802888e:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8028890:	683b      	ldr	r3, [r7, #0]
 8028892:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8028894:	6878      	ldr	r0, [r7, #4]
 8028896:	f7fd fac9 	bl	8025e2c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 802889a:	4622      	mov	r2, r4
 802889c:	68f9      	ldr	r1, [r7, #12]
 802889e:	6878      	ldr	r0, [r7, #4]
 80288a0:	f7fe fb08 	bl	8026eb4 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80288a4:	bf00      	nop
 80288a6:	3714      	adds	r7, #20
 80288a8:	46bd      	mov	sp, r7
 80288aa:	bd90      	pop	{r4, r7, pc}

080288ac <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 80288ac:	b590      	push	{r4, r7, lr}
 80288ae:	b0a3      	sub	sp, #140	; 0x8c
 80288b0:	af02      	add	r7, sp, #8
 80288b2:	60f8      	str	r0, [r7, #12]
 80288b4:	60b9      	str	r1, [r7, #8]
 80288b6:	607a      	str	r2, [r7, #4]
 80288b8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 80288ba:	f107 0320 	add.w	r3, r7, #32
 80288be:	68b9      	ldr	r1, [r7, #8]
 80288c0:	4618      	mov	r0, r3
 80288c2:	f7fc fb9a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80288c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80288ca:	6879      	ldr	r1, [r7, #4]
 80288cc:	4618      	mov	r0, r3
 80288ce:	f7fc fb94 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80288d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80288d6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80288da:	4618      	mov	r0, r3
 80288dc:	f7fc fb8d 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80288e0:	f107 0010 	add.w	r0, r7, #16
 80288e4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80288e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80288ec:	f107 0120 	add.w	r1, r7, #32
 80288f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80288f4:	9300      	str	r3, [sp, #0]
 80288f6:	4623      	mov	r3, r4
 80288f8:	f7ff ff56 	bl	80287a8 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 80288fc:	f107 0210 	add.w	r2, r7, #16
 8028900:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028904:	4611      	mov	r1, r2
 8028906:	4618      	mov	r0, r3
 8028908:	f7fc fb77 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802890c:	68f8      	ldr	r0, [r7, #12]
 802890e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8028912:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028916:	9300      	str	r3, [sp, #0]
 8028918:	4613      	mov	r3, r2
 802891a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802891e:	6839      	ldr	r1, [r7, #0]
 8028920:	f7fe fb44 	bl	8026fac <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
    }
 8028924:	68f8      	ldr	r0, [r7, #12]
 8028926:	3784      	adds	r7, #132	; 0x84
 8028928:	46bd      	mov	sp, r7
 802892a:	bd90      	pop	{r4, r7, pc}

0802892c <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 802892c:	b580      	push	{r7, lr}
 802892e:	b098      	sub	sp, #96	; 0x60
 8028930:	af00      	add	r7, sp, #0
 8028932:	60f8      	str	r0, [r7, #12]
 8028934:	60b9      	str	r1, [r7, #8]
 8028936:	607a      	str	r2, [r7, #4]
 8028938:	603b      	str	r3, [r7, #0]
					       __result);
 802893a:	f107 0320 	add.w	r3, r7, #32
 802893e:	68b9      	ldr	r1, [r7, #8]
 8028940:	4618      	mov	r0, r3
 8028942:	f7fc fb5a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028946:	f107 0310 	add.w	r3, r7, #16
 802894a:	f107 0220 	add.w	r2, r7, #32
 802894e:	4611      	mov	r1, r2
 8028950:	4618      	mov	r0, r3
 8028952:	f000 fe38 	bl	80295c6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802895a:	6879      	ldr	r1, [r7, #4]
 802895c:	4618      	mov	r0, r3
 802895e:	f7fc fb4c 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028966:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802896a:	4611      	mov	r1, r2
 802896c:	4618      	mov	r0, r3
 802896e:	f000 fe2a 	bl	80295c6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028972:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028976:	6839      	ldr	r1, [r7, #0]
 8028978:	4618      	mov	r0, r3
 802897a:	f7fc fb3e 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802897e:	68f8      	ldr	r0, [r7, #12]
 8028980:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028984:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028988:	f107 0110 	add.w	r1, r7, #16
 802898c:	f000 fe6e 	bl	802966c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8028990:	68f8      	ldr	r0, [r7, #12]
 8028992:	3760      	adds	r7, #96	; 0x60
 8028994:	46bd      	mov	sp, r7
 8028996:	bd80      	pop	{r7, pc}

08028998 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8028998:	b590      	push	{r4, r7, lr}
 802899a:	b0a3      	sub	sp, #140	; 0x8c
 802899c:	af02      	add	r7, sp, #8
 802899e:	60f8      	str	r0, [r7, #12]
 80289a0:	60b9      	str	r1, [r7, #8]
 80289a2:	607a      	str	r2, [r7, #4]
 80289a4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 80289a6:	f107 0320 	add.w	r3, r7, #32
 80289aa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80289ae:	4618      	mov	r0, r3
 80289b0:	f7fc fb23 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80289b4:	f107 0010 	add.w	r0, r7, #16
 80289b8:	f107 0220 	add.w	r2, r7, #32
 80289bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80289c0:	9300      	str	r3, [sp, #0]
 80289c2:	4613      	mov	r3, r2
 80289c4:	687a      	ldr	r2, [r7, #4]
 80289c6:	68b9      	ldr	r1, [r7, #8]
 80289c8:	f7fe faf0 	bl	8026fac <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 80289cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80289d0:	6839      	ldr	r1, [r7, #0]
 80289d2:	4618      	mov	r0, r3
 80289d4:	f7fc fb11 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80289d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80289dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80289e0:	4618      	mov	r0, r3
 80289e2:	f7fc fb0a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80289e6:	f107 0210 	add.w	r2, r7, #16
 80289ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80289ee:	4611      	mov	r1, r2
 80289f0:	4618      	mov	r0, r3
 80289f2:	f7fc fb02 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80289f6:	68f8      	ldr	r0, [r7, #12]
 80289f8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80289fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028a00:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8028a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028a08:	9300      	str	r3, [sp, #0]
 8028a0a:	4623      	mov	r3, r4
 8028a0c:	f7ff fecc 	bl	80287a8 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 8028a10:	68f8      	ldr	r0, [r7, #12]
 8028a12:	3784      	adds	r7, #132	; 0x84
 8028a14:	46bd      	mov	sp, r7
 8028a16:	bd90      	pop	{r4, r7, pc}

08028a18 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8028a18:	b580      	push	{r7, lr}
 8028a1a:	b082      	sub	sp, #8
 8028a1c:	af00      	add	r7, sp, #0
 8028a1e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8028a20:	6878      	ldr	r0, [r7, #4]
 8028a22:	f000 fe69 	bl	80296f8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 8028a26:	4603      	mov	r3, r0
      }
 8028a28:	4618      	mov	r0, r3
 8028a2a:	3708      	adds	r7, #8
 8028a2c:	46bd      	mov	sp, r7
 8028a2e:	bd80      	pop	{r7, pc}

08028a30 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8028a30:	b590      	push	{r4, r7, lr}
 8028a32:	b085      	sub	sp, #20
 8028a34:	af00      	add	r7, sp, #0
 8028a36:	60f8      	str	r0, [r7, #12]
 8028a38:	60b9      	str	r1, [r7, #8]
 8028a3a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028a3c:	68f8      	ldr	r0, [r7, #12]
 8028a3e:	f000 fe67 	bl	8029710 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028a42:	4604      	mov	r4, r0
 8028a44:	68b8      	ldr	r0, [r7, #8]
 8028a46:	f000 fe63 	bl	8029710 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028a4a:	4603      	mov	r3, r0
 8028a4c:	687a      	ldr	r2, [r7, #4]
 8028a4e:	4619      	mov	r1, r3
 8028a50:	4620      	mov	r0, r4
 8028a52:	f000 fe68 	bl	8029726 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8028a56:	4603      	mov	r3, r0
    }
 8028a58:	4618      	mov	r0, r3
 8028a5a:	3714      	adds	r7, #20
 8028a5c:	46bd      	mov	sp, r7
 8028a5e:	bd90      	pop	{r4, r7, pc}

08028a60 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8028a60:	b590      	push	{r4, r7, lr}
 8028a62:	b085      	sub	sp, #20
 8028a64:	af00      	add	r7, sp, #0
 8028a66:	60f8      	str	r0, [r7, #12]
 8028a68:	60b9      	str	r1, [r7, #8]
 8028a6a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028a6c:	68f8      	ldr	r0, [r7, #12]
 8028a6e:	f000 fe4f 	bl	8029710 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028a72:	4604      	mov	r4, r0
 8028a74:	68b8      	ldr	r0, [r7, #8]
 8028a76:	f000 fe4b 	bl	8029710 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028a7a:	4603      	mov	r3, r0
 8028a7c:	687a      	ldr	r2, [r7, #4]
 8028a7e:	4619      	mov	r1, r3
 8028a80:	4620      	mov	r0, r4
 8028a82:	f000 fe73 	bl	802976c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8028a86:	4603      	mov	r3, r0
    }
 8028a88:	4618      	mov	r0, r3
 8028a8a:	3714      	adds	r7, #20
 8028a8c:	46bd      	mov	sp, r7
 8028a8e:	bd90      	pop	{r4, r7, pc}

08028a90 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8028a90:	b580      	push	{r7, lr}
 8028a92:	b084      	sub	sp, #16
 8028a94:	af00      	add	r7, sp, #0
 8028a96:	60f8      	str	r0, [r7, #12]
 8028a98:	60b9      	str	r1, [r7, #8]
 8028a9a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8028a9c:	68f8      	ldr	r0, [r7, #12]
 8028a9e:	f000 fe89 	bl	80297b4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8028aa2:	4602      	mov	r2, r0
 8028aa4:	68bb      	ldr	r3, [r7, #8]
 8028aa6:	4293      	cmp	r3, r2
 8028aa8:	bf8c      	ite	hi
 8028aaa:	2301      	movhi	r3, #1
 8028aac:	2300      	movls	r3, #0
 8028aae:	b2db      	uxtb	r3, r3
 8028ab0:	2b00      	cmp	r3, #0
 8028ab2:	d001      	beq.n	8028ab8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8028ab4:	f016 fa1d 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8028ab8:	68ba      	ldr	r2, [r7, #8]
 8028aba:	4613      	mov	r3, r2
 8028abc:	009b      	lsls	r3, r3, #2
 8028abe:	4413      	add	r3, r2
 8028ac0:	009b      	lsls	r3, r3, #2
 8028ac2:	4618      	mov	r0, r3
 8028ac4:	f016 fa04 	bl	803eed0 <_Znwj>
 8028ac8:	4603      	mov	r3, r0
      }
 8028aca:	4618      	mov	r0, r3
 8028acc:	3710      	adds	r7, #16
 8028ace:	46bd      	mov	sp, r7
 8028ad0:	bd80      	pop	{r7, pc}

08028ad2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8028ad2:	b580      	push	{r7, lr}
 8028ad4:	b084      	sub	sp, #16
 8028ad6:	af00      	add	r7, sp, #0
 8028ad8:	60f8      	str	r0, [r7, #12]
 8028ada:	60b9      	str	r1, [r7, #8]
 8028adc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8028ade:	687a      	ldr	r2, [r7, #4]
 8028ae0:	4613      	mov	r3, r2
 8028ae2:	009b      	lsls	r3, r3, #2
 8028ae4:	4413      	add	r3, r2
 8028ae6:	009b      	lsls	r3, r3, #2
 8028ae8:	4619      	mov	r1, r3
 8028aea:	68b8      	ldr	r0, [r7, #8]
 8028aec:	f016 f9ee 	bl	803eecc <_ZdlPvj>
      }
 8028af0:	bf00      	nop
 8028af2:	3710      	adds	r7, #16
 8028af4:	46bd      	mov	sp, r7
 8028af6:	bd80      	pop	{r7, pc}

08028af8 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8028af8:	b580      	push	{r7, lr}
 8028afa:	b082      	sub	sp, #8
 8028afc:	af00      	add	r7, sp, #0
 8028afe:	6078      	str	r0, [r7, #4]
 8028b00:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8028b02:	f000 f8eb 	bl	8028cdc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8028b06:	4603      	mov	r3, r0
 8028b08:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8028b0a:	687b      	ldr	r3, [r7, #4]
 8028b0c:	68da      	ldr	r2, [r3, #12]
 8028b0e:	683b      	ldr	r3, [r7, #0]
 8028b10:	68db      	ldr	r3, [r3, #12]
 8028b12:	1ad3      	subs	r3, r2, r3
 8028b14:	109b      	asrs	r3, r3, #2
 8028b16:	3b01      	subs	r3, #1
 8028b18:	fb01 f303 	mul.w	r3, r1, r3
 8028b1c:	687a      	ldr	r2, [r7, #4]
 8028b1e:	6811      	ldr	r1, [r2, #0]
 8028b20:	687a      	ldr	r2, [r7, #4]
 8028b22:	6852      	ldr	r2, [r2, #4]
 8028b24:	1a8a      	subs	r2, r1, r2
 8028b26:	1092      	asrs	r2, r2, #2
 8028b28:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8028b2a:	683a      	ldr	r2, [r7, #0]
 8028b2c:	6891      	ldr	r1, [r2, #8]
 8028b2e:	683a      	ldr	r2, [r7, #0]
 8028b30:	6812      	ldr	r2, [r2, #0]
 8028b32:	1a8a      	subs	r2, r1, r2
 8028b34:	1092      	asrs	r2, r2, #2
 8028b36:	4413      	add	r3, r2
      }
 8028b38:	4618      	mov	r0, r3
 8028b3a:	3708      	adds	r7, #8
 8028b3c:	46bd      	mov	sp, r7
 8028b3e:	bd80      	pop	{r7, pc}

08028b40 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8028b40:	b580      	push	{r7, lr}
 8028b42:	b084      	sub	sp, #16
 8028b44:	af00      	add	r7, sp, #0
 8028b46:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8028b48:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8028b4c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8028b4e:	6878      	ldr	r0, [r7, #4]
 8028b50:	f000 fe3e 	bl	80297d0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8028b54:	4603      	mov	r3, r0
 8028b56:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8028b58:	f107 0208 	add.w	r2, r7, #8
 8028b5c:	f107 030c 	add.w	r3, r7, #12
 8028b60:	4611      	mov	r1, r2
 8028b62:	4618      	mov	r0, r3
 8028b64:	f7ff fabe 	bl	80280e4 <_ZSt3minIjERKT_S2_S2_>
 8028b68:	4603      	mov	r3, r0
 8028b6a:	681b      	ldr	r3, [r3, #0]
      }
 8028b6c:	4618      	mov	r0, r3
 8028b6e:	3710      	adds	r7, #16
 8028b70:	46bd      	mov	sp, r7
 8028b72:	bd80      	pop	{r7, pc}

08028b74 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8028b74:	b480      	push	{r7}
 8028b76:	b083      	sub	sp, #12
 8028b78:	af00      	add	r7, sp, #0
 8028b7a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8028b7c:	687b      	ldr	r3, [r7, #4]
 8028b7e:	4618      	mov	r0, r3
 8028b80:	370c      	adds	r7, #12
 8028b82:	46bd      	mov	sp, r7
 8028b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b88:	4770      	bx	lr

08028b8a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8028b8a:	b590      	push	{r4, r7, lr}
 8028b8c:	b08b      	sub	sp, #44	; 0x2c
 8028b8e:	af00      	add	r7, sp, #0
 8028b90:	60f8      	str	r0, [r7, #12]
 8028b92:	60b9      	str	r1, [r7, #8]
 8028b94:	4613      	mov	r3, r2
 8028b96:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8028b98:	68fb      	ldr	r3, [r7, #12]
 8028b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028b9c:	68fb      	ldr	r3, [r7, #12]
 8028b9e:	695b      	ldr	r3, [r3, #20]
 8028ba0:	1ad3      	subs	r3, r2, r3
 8028ba2:	109b      	asrs	r3, r3, #2
 8028ba4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8028ba6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8028ba8:	68bb      	ldr	r3, [r7, #8]
 8028baa:	6a3a      	ldr	r2, [r7, #32]
 8028bac:	4413      	add	r3, r2
 8028bae:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8028bb0:	68fb      	ldr	r3, [r7, #12]
 8028bb2:	685a      	ldr	r2, [r3, #4]
 8028bb4:	69fb      	ldr	r3, [r7, #28]
 8028bb6:	005b      	lsls	r3, r3, #1
 8028bb8:	429a      	cmp	r2, r3
 8028bba:	d92d      	bls.n	8028c18 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028bbc:	68fb      	ldr	r3, [r7, #12]
 8028bbe:	681a      	ldr	r2, [r3, #0]
 8028bc0:	68fb      	ldr	r3, [r7, #12]
 8028bc2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8028bc4:	69fb      	ldr	r3, [r7, #28]
 8028bc6:	1acb      	subs	r3, r1, r3
 8028bc8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028bca:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8028bcc:	79fb      	ldrb	r3, [r7, #7]
 8028bce:	2b00      	cmp	r3, #0
 8028bd0:	d002      	beq.n	8028bd8 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 8028bd2:	68bb      	ldr	r3, [r7, #8]
 8028bd4:	009b      	lsls	r3, r3, #2
 8028bd6:	e000      	b.n	8028bda <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 8028bd8:	2300      	movs	r3, #0
 8028bda:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028bdc:	4413      	add	r3, r2
 8028bde:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8028be0:	68fb      	ldr	r3, [r7, #12]
 8028be2:	695b      	ldr	r3, [r3, #20]
 8028be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028be6:	429a      	cmp	r2, r3
 8028be8:	d209      	bcs.n	8028bfe <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8028bea:	68fb      	ldr	r3, [r7, #12]
 8028bec:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8028bee:	68fb      	ldr	r3, [r7, #12]
 8028bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8028bf2:	3304      	adds	r3, #4
 8028bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028bf6:	4619      	mov	r1, r3
 8028bf8:	f000 fdf6 	bl	80297e8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 8028bfc:	e048      	b.n	8028c90 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028bfe:	68fb      	ldr	r3, [r7, #12]
 8028c00:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8028c02:	68fb      	ldr	r3, [r7, #12]
 8028c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028c06:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8028c08:	6a3b      	ldr	r3, [r7, #32]
 8028c0a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028c0e:	4413      	add	r3, r2
 8028c10:	461a      	mov	r2, r3
 8028c12:	f000 fe01 	bl	8029818 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 8028c16:	e03b      	b.n	8028c90 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8028c18:	68fb      	ldr	r3, [r7, #12]
 8028c1a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8028c1c:	68fb      	ldr	r3, [r7, #12]
 8028c1e:	3304      	adds	r3, #4
 8028c20:	f107 0208 	add.w	r2, r7, #8
 8028c24:	4611      	mov	r1, r2
 8028c26:	4618      	mov	r0, r3
 8028c28:	f7fc fb81 	bl	802532e <_ZSt3maxIjERKT_S2_S2_>
 8028c2c:	4603      	mov	r3, r0
 8028c2e:	681b      	ldr	r3, [r3, #0]
 8028c30:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8028c32:	3302      	adds	r3, #2
 8028c34:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8028c36:	68fb      	ldr	r3, [r7, #12]
 8028c38:	69b9      	ldr	r1, [r7, #24]
 8028c3a:	4618      	mov	r0, r3
 8028c3c:	f7fe ff81 	bl	8027b42 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8028c40:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8028c42:	69ba      	ldr	r2, [r7, #24]
 8028c44:	69fb      	ldr	r3, [r7, #28]
 8028c46:	1ad3      	subs	r3, r2, r3
 8028c48:	085b      	lsrs	r3, r3, #1
 8028c4a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8028c4c:	79fb      	ldrb	r3, [r7, #7]
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	d002      	beq.n	8028c58 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 8028c52:	68bb      	ldr	r3, [r7, #8]
 8028c54:	009b      	lsls	r3, r3, #2
 8028c56:	e000      	b.n	8028c5a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 8028c58:	2300      	movs	r3, #0
 8028c5a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8028c5c:	697a      	ldr	r2, [r7, #20]
 8028c5e:	4413      	add	r3, r2
 8028c60:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8028c62:	68fb      	ldr	r3, [r7, #12]
 8028c64:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8028c66:	68fb      	ldr	r3, [r7, #12]
 8028c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8028c6a:	3304      	adds	r3, #4
 8028c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028c6e:	4619      	mov	r1, r3
 8028c70:	f000 fdba 	bl	80297e8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8028c74:	68f8      	ldr	r0, [r7, #12]
 8028c76:	68fb      	ldr	r3, [r7, #12]
 8028c78:	6819      	ldr	r1, [r3, #0]
 8028c7a:	68fb      	ldr	r3, [r7, #12]
 8028c7c:	685b      	ldr	r3, [r3, #4]
 8028c7e:	461a      	mov	r2, r3
 8028c80:	f7fd fc52 	bl	8026528 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 8028c84:	68fb      	ldr	r3, [r7, #12]
 8028c86:	697a      	ldr	r2, [r7, #20]
 8028c88:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8028c8a:	68fb      	ldr	r3, [r7, #12]
 8028c8c:	69ba      	ldr	r2, [r7, #24]
 8028c8e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8028c90:	68fb      	ldr	r3, [r7, #12]
 8028c92:	3308      	adds	r3, #8
 8028c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028c96:	4618      	mov	r0, r3
 8028c98:	f7fe fe6f 	bl	802797a <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	f103 0018 	add.w	r0, r3, #24
 8028ca2:	6a3a      	ldr	r2, [r7, #32]
 8028ca4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8028ca8:	4413      	add	r3, r2
 8028caa:	009b      	lsls	r3, r3, #2
 8028cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028cae:	4413      	add	r3, r2
 8028cb0:	4619      	mov	r1, r3
 8028cb2:	f7fe fe62 	bl	802797a <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 8028cb6:	bf00      	nop
 8028cb8:	372c      	adds	r7, #44	; 0x2c
 8028cba:	46bd      	mov	sp, r7
 8028cbc:	bd90      	pop	{r4, r7, pc}

08028cbe <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8028cbe:	b580      	push	{r7, lr}
 8028cc0:	b082      	sub	sp, #8
 8028cc2:	af00      	add	r7, sp, #0
 8028cc4:	6078      	str	r0, [r7, #4]
 8028cc6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8028cc8:	2200      	movs	r2, #0
 8028cca:	6839      	ldr	r1, [r7, #0]
 8028ccc:	6878      	ldr	r0, [r7, #4]
 8028cce:	f000 fdbb 	bl	8029848 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 8028cd2:	4603      	mov	r3, r0
 8028cd4:	4618      	mov	r0, r3
 8028cd6:	3708      	adds	r7, #8
 8028cd8:	46bd      	mov	sp, r7
 8028cda:	bd80      	pop	{r7, pc}

08028cdc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8028cdc:	b580      	push	{r7, lr}
 8028cde:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8028ce0:	2004      	movs	r0, #4
 8028ce2:	f7f8 f8fc 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8028ce6:	4603      	mov	r3, r0
 8028ce8:	4618      	mov	r0, r3
 8028cea:	bd80      	pop	{r7, pc}

08028cec <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8028cec:	b580      	push	{r7, lr}
 8028cee:	b084      	sub	sp, #16
 8028cf0:	af00      	add	r7, sp, #0
 8028cf2:	60f8      	str	r0, [r7, #12]
 8028cf4:	60b9      	str	r1, [r7, #8]
 8028cf6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8028cf8:	687a      	ldr	r2, [r7, #4]
 8028cfa:	68b9      	ldr	r1, [r7, #8]
 8028cfc:	68f8      	ldr	r0, [r7, #12]
 8028cfe:	f000 fdc1 	bl	8029884 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 8028d02:	bf00      	nop
 8028d04:	3710      	adds	r7, #16
 8028d06:	46bd      	mov	sp, r7
 8028d08:	bd80      	pop	{r7, pc}

08028d0a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8028d0a:	b580      	push	{r7, lr}
 8028d0c:	b084      	sub	sp, #16
 8028d0e:	af00      	add	r7, sp, #0
 8028d10:	60f8      	str	r0, [r7, #12]
 8028d12:	60b9      	str	r1, [r7, #8]
 8028d14:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8028d16:	68f8      	ldr	r0, [r7, #12]
 8028d18:	f000 fdc4 	bl	80298a4 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8028d1c:	4602      	mov	r2, r0
 8028d1e:	68bb      	ldr	r3, [r7, #8]
 8028d20:	4293      	cmp	r3, r2
 8028d22:	bf8c      	ite	hi
 8028d24:	2301      	movhi	r3, #1
 8028d26:	2300      	movls	r3, #0
 8028d28:	b2db      	uxtb	r3, r3
 8028d2a:	2b00      	cmp	r3, #0
 8028d2c:	d001      	beq.n	8028d32 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8028d2e:	f016 f8e0 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8028d32:	68bb      	ldr	r3, [r7, #8]
 8028d34:	009b      	lsls	r3, r3, #2
 8028d36:	4618      	mov	r0, r3
 8028d38:	f016 f8ca 	bl	803eed0 <_Znwj>
 8028d3c:	4603      	mov	r3, r0
      }
 8028d3e:	4618      	mov	r0, r3
 8028d40:	3710      	adds	r7, #16
 8028d42:	46bd      	mov	sp, r7
 8028d44:	bd80      	pop	{r7, pc}

08028d46 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8028d46:	b480      	push	{r7}
 8028d48:	b083      	sub	sp, #12
 8028d4a:	af00      	add	r7, sp, #0
 8028d4c:	6078      	str	r0, [r7, #4]
 8028d4e:	687b      	ldr	r3, [r7, #4]
 8028d50:	4618      	mov	r0, r3
 8028d52:	370c      	adds	r7, #12
 8028d54:	46bd      	mov	sp, r7
 8028d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d5a:	4770      	bx	lr

08028d5c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 8028d5c:	b480      	push	{r7}
 8028d5e:	b083      	sub	sp, #12
 8028d60:	af00      	add	r7, sp, #0
 8028d62:	6078      	str	r0, [r7, #4]
 8028d64:	687b      	ldr	r3, [r7, #4]
 8028d66:	4618      	mov	r0, r3
 8028d68:	370c      	adds	r7, #12
 8028d6a:	46bd      	mov	sp, r7
 8028d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d70:	4770      	bx	lr

08028d72 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8028d72:	b480      	push	{r7}
 8028d74:	b083      	sub	sp, #12
 8028d76:	af00      	add	r7, sp, #0
 8028d78:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8028d7a:	687b      	ldr	r3, [r7, #4]
 8028d7c:	2200      	movs	r2, #0
 8028d7e:	601a      	str	r2, [r3, #0]
 8028d80:	687b      	ldr	r3, [r7, #4]
 8028d82:	2200      	movs	r2, #0
 8028d84:	605a      	str	r2, [r3, #4]
 8028d86:	687b      	ldr	r3, [r7, #4]
 8028d88:	2200      	movs	r2, #0
 8028d8a:	609a      	str	r2, [r3, #8]
 8028d8c:	687b      	ldr	r3, [r7, #4]
 8028d8e:	2200      	movs	r2, #0
 8028d90:	60da      	str	r2, [r3, #12]
 8028d92:	687b      	ldr	r3, [r7, #4]
 8028d94:	4618      	mov	r0, r3
 8028d96:	370c      	adds	r7, #12
 8028d98:	46bd      	mov	sp, r7
 8028d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d9e:	4770      	bx	lr

08028da0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8028da0:	b580      	push	{r7, lr}
 8028da2:	b082      	sub	sp, #8
 8028da4:	af00      	add	r7, sp, #0
 8028da6:	6078      	str	r0, [r7, #4]
 8028da8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8028daa:	2200      	movs	r2, #0
 8028dac:	6839      	ldr	r1, [r7, #0]
 8028dae:	6878      	ldr	r0, [r7, #4]
 8028db0:	f000 fd84 	bl	80298bc <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 8028db4:	4603      	mov	r3, r0
 8028db6:	4618      	mov	r0, r3
 8028db8:	3708      	adds	r7, #8
 8028dba:	46bd      	mov	sp, r7
 8028dbc:	bd80      	pop	{r7, pc}

08028dbe <_ZNSaIPjEC1IjEERKSaIT_E>:
 8028dbe:	b580      	push	{r7, lr}
 8028dc0:	b082      	sub	sp, #8
 8028dc2:	af00      	add	r7, sp, #0
 8028dc4:	6078      	str	r0, [r7, #4]
 8028dc6:	6039      	str	r1, [r7, #0]
 8028dc8:	6878      	ldr	r0, [r7, #4]
 8028dca:	f000 fd95 	bl	80298f8 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 8028dce:	687b      	ldr	r3, [r7, #4]
 8028dd0:	4618      	mov	r0, r3
 8028dd2:	3708      	adds	r7, #8
 8028dd4:	46bd      	mov	sp, r7
 8028dd6:	bd80      	pop	{r7, pc}

08028dd8 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8028dd8:	b480      	push	{r7}
 8028dda:	b083      	sub	sp, #12
 8028ddc:	af00      	add	r7, sp, #0
 8028dde:	6078      	str	r0, [r7, #4]
 8028de0:	687b      	ldr	r3, [r7, #4]
 8028de2:	4618      	mov	r0, r3
 8028de4:	370c      	adds	r7, #12
 8028de6:	46bd      	mov	sp, r7
 8028de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028dec:	4770      	bx	lr

08028dee <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8028dee:	b580      	push	{r7, lr}
 8028df0:	b084      	sub	sp, #16
 8028df2:	af00      	add	r7, sp, #0
 8028df4:	60f8      	str	r0, [r7, #12]
 8028df6:	60b9      	str	r1, [r7, #8]
 8028df8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8028dfa:	687b      	ldr	r3, [r7, #4]
 8028dfc:	009b      	lsls	r3, r3, #2
 8028dfe:	4619      	mov	r1, r3
 8028e00:	68b8      	ldr	r0, [r7, #8]
 8028e02:	f016 f863 	bl	803eecc <_ZdlPvj>
      }
 8028e06:	bf00      	nop
 8028e08:	3710      	adds	r7, #16
 8028e0a:	46bd      	mov	sp, r7
 8028e0c:	bd80      	pop	{r7, pc}

08028e0e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8028e0e:	b480      	push	{r7}
 8028e10:	b083      	sub	sp, #12
 8028e12:	af00      	add	r7, sp, #0
 8028e14:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028e16:	687b      	ldr	r3, [r7, #4]
 8028e18:	4618      	mov	r0, r3
 8028e1a:	370c      	adds	r7, #12
 8028e1c:	46bd      	mov	sp, r7
 8028e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e22:	4770      	bx	lr

08028e24 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8028e24:	b580      	push	{r7, lr}
 8028e26:	b082      	sub	sp, #8
 8028e28:	af00      	add	r7, sp, #0
 8028e2a:	6078      	str	r0, [r7, #4]
 8028e2c:	6039      	str	r1, [r7, #0]
 8028e2e:	683b      	ldr	r3, [r7, #0]
 8028e30:	681a      	ldr	r2, [r3, #0]
 8028e32:	687b      	ldr	r3, [r7, #4]
 8028e34:	601a      	str	r2, [r3, #0]
 8028e36:	683b      	ldr	r3, [r7, #0]
 8028e38:	685a      	ldr	r2, [r3, #4]
 8028e3a:	687b      	ldr	r3, [r7, #4]
 8028e3c:	605a      	str	r2, [r3, #4]
 8028e3e:	687b      	ldr	r3, [r7, #4]
 8028e40:	f103 0208 	add.w	r2, r3, #8
 8028e44:	683b      	ldr	r3, [r7, #0]
 8028e46:	3308      	adds	r3, #8
 8028e48:	4619      	mov	r1, r3
 8028e4a:	4610      	mov	r0, r2
 8028e4c:	f7fb f8e9 	bl	8024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8028e50:	687b      	ldr	r3, [r7, #4]
 8028e52:	f103 0218 	add.w	r2, r3, #24
 8028e56:	683b      	ldr	r3, [r7, #0]
 8028e58:	3318      	adds	r3, #24
 8028e5a:	4619      	mov	r1, r3
 8028e5c:	4610      	mov	r0, r2
 8028e5e:	f7fb f8e0 	bl	8024022 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8028e62:	687b      	ldr	r3, [r7, #4]
 8028e64:	4618      	mov	r0, r3
 8028e66:	3708      	adds	r7, #8
 8028e68:	46bd      	mov	sp, r7
 8028e6a:	bd80      	pop	{r7, pc}

08028e6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8028e6c:	b5b0      	push	{r4, r5, r7, lr}
 8028e6e:	b08c      	sub	sp, #48	; 0x30
 8028e70:	af00      	add	r7, sp, #0
 8028e72:	6078      	str	r0, [r7, #4]
 8028e74:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8028e76:	6839      	ldr	r1, [r7, #0]
 8028e78:	6878      	ldr	r0, [r7, #4]
 8028e7a:	f7ff ffd3 	bl	8028e24 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8028e7e:	f107 0308 	add.w	r3, r7, #8
 8028e82:	4618      	mov	r0, r3
 8028e84:	f7fc fa2f 	bl	80252e6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 8028e88:	683b      	ldr	r3, [r7, #0]
 8028e8a:	461d      	mov	r5, r3
 8028e8c:	f107 0408 	add.w	r4, r7, #8
 8028e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028e9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	4618      	mov	r0, r3
 8028ea4:	3730      	adds	r7, #48	; 0x30
 8028ea6:	46bd      	mov	sp, r7
 8028ea8:	bdb0      	pop	{r4, r5, r7, pc}

08028eaa <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8028eaa:	b480      	push	{r7}
 8028eac:	b083      	sub	sp, #12
 8028eae:	af00      	add	r7, sp, #0
 8028eb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028eb2:	687b      	ldr	r3, [r7, #4]
 8028eb4:	4618      	mov	r0, r3
 8028eb6:	370c      	adds	r7, #12
 8028eb8:	46bd      	mov	sp, r7
 8028eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ebe:	4770      	bx	lr

08028ec0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8028ec0:	b480      	push	{r7}
 8028ec2:	b083      	sub	sp, #12
 8028ec4:	af00      	add	r7, sp, #0
 8028ec6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028ec8:	687b      	ldr	r3, [r7, #4]
 8028eca:	4618      	mov	r0, r3
 8028ecc:	370c      	adds	r7, #12
 8028ece:	46bd      	mov	sp, r7
 8028ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ed4:	4770      	bx	lr

08028ed6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8028ed6:	b580      	push	{r7, lr}
 8028ed8:	b082      	sub	sp, #8
 8028eda:	af00      	add	r7, sp, #0
 8028edc:	6078      	str	r0, [r7, #4]
 8028ede:	6039      	str	r1, [r7, #0]
 8028ee0:	683b      	ldr	r3, [r7, #0]
 8028ee2:	681a      	ldr	r2, [r3, #0]
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	601a      	str	r2, [r3, #0]
 8028ee8:	683b      	ldr	r3, [r7, #0]
 8028eea:	685a      	ldr	r2, [r3, #4]
 8028eec:	687b      	ldr	r3, [r7, #4]
 8028eee:	605a      	str	r2, [r3, #4]
 8028ef0:	687b      	ldr	r3, [r7, #4]
 8028ef2:	f103 0208 	add.w	r2, r3, #8
 8028ef6:	683b      	ldr	r3, [r7, #0]
 8028ef8:	3308      	adds	r3, #8
 8028efa:	4619      	mov	r1, r3
 8028efc:	4610      	mov	r0, r2
 8028efe:	f7fb f933 	bl	8024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8028f02:	687b      	ldr	r3, [r7, #4]
 8028f04:	f103 0218 	add.w	r2, r3, #24
 8028f08:	683b      	ldr	r3, [r7, #0]
 8028f0a:	3318      	adds	r3, #24
 8028f0c:	4619      	mov	r1, r3
 8028f0e:	4610      	mov	r0, r2
 8028f10:	f7fb f92a 	bl	8024168 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	4618      	mov	r0, r3
 8028f18:	3708      	adds	r7, #8
 8028f1a:	46bd      	mov	sp, r7
 8028f1c:	bd80      	pop	{r7, pc}

08028f1e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8028f1e:	b5b0      	push	{r4, r5, r7, lr}
 8028f20:	b08c      	sub	sp, #48	; 0x30
 8028f22:	af00      	add	r7, sp, #0
 8028f24:	6078      	str	r0, [r7, #4]
 8028f26:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8028f28:	6839      	ldr	r1, [r7, #0]
 8028f2a:	6878      	ldr	r0, [r7, #4]
 8028f2c:	f7ff ffd3 	bl	8028ed6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8028f30:	f107 0308 	add.w	r3, r7, #8
 8028f34:	4618      	mov	r0, r3
 8028f36:	f7fd fc64 	bl	8026802 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 8028f3a:	683b      	ldr	r3, [r7, #0]
 8028f3c:	461d      	mov	r5, r3
 8028f3e:	f107 0408 	add.w	r4, r7, #8
 8028f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8028f52:	687b      	ldr	r3, [r7, #4]
 8028f54:	4618      	mov	r0, r3
 8028f56:	3730      	adds	r7, #48	; 0x30
 8028f58:	46bd      	mov	sp, r7
 8028f5a:	bdb0      	pop	{r4, r5, r7, pc}

08028f5c <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8028f5c:	b480      	push	{r7}
 8028f5e:	b083      	sub	sp, #12
 8028f60:	af00      	add	r7, sp, #0
 8028f62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028f64:	687b      	ldr	r3, [r7, #4]
 8028f66:	4618      	mov	r0, r3
 8028f68:	370c      	adds	r7, #12
 8028f6a:	46bd      	mov	sp, r7
 8028f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f70:	4770      	bx	lr

08028f72 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8028f72:	b480      	push	{r7}
 8028f74:	b083      	sub	sp, #12
 8028f76:	af00      	add	r7, sp, #0
 8028f78:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028f7a:	687b      	ldr	r3, [r7, #4]
 8028f7c:	4618      	mov	r0, r3
 8028f7e:	370c      	adds	r7, #12
 8028f80:	46bd      	mov	sp, r7
 8028f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f86:	4770      	bx	lr

08028f88 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8028f88:	b580      	push	{r7, lr}
 8028f8a:	b082      	sub	sp, #8
 8028f8c:	af00      	add	r7, sp, #0
 8028f8e:	6078      	str	r0, [r7, #4]
 8028f90:	6039      	str	r1, [r7, #0]
 8028f92:	683b      	ldr	r3, [r7, #0]
 8028f94:	681a      	ldr	r2, [r3, #0]
 8028f96:	687b      	ldr	r3, [r7, #4]
 8028f98:	601a      	str	r2, [r3, #0]
 8028f9a:	683b      	ldr	r3, [r7, #0]
 8028f9c:	685a      	ldr	r2, [r3, #4]
 8028f9e:	687b      	ldr	r3, [r7, #4]
 8028fa0:	605a      	str	r2, [r3, #4]
 8028fa2:	687b      	ldr	r3, [r7, #4]
 8028fa4:	f103 0208 	add.w	r2, r3, #8
 8028fa8:	683b      	ldr	r3, [r7, #0]
 8028faa:	3308      	adds	r3, #8
 8028fac:	4619      	mov	r1, r3
 8028fae:	4610      	mov	r0, r2
 8028fb0:	f7fc f823 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028fb4:	687b      	ldr	r3, [r7, #4]
 8028fb6:	f103 0218 	add.w	r2, r3, #24
 8028fba:	683b      	ldr	r3, [r7, #0]
 8028fbc:	3318      	adds	r3, #24
 8028fbe:	4619      	mov	r1, r3
 8028fc0:	4610      	mov	r0, r2
 8028fc2:	f7fc f81a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028fc6:	687b      	ldr	r3, [r7, #4]
 8028fc8:	4618      	mov	r0, r3
 8028fca:	3708      	adds	r7, #8
 8028fcc:	46bd      	mov	sp, r7
 8028fce:	bd80      	pop	{r7, pc}

08028fd0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8028fd0:	b5b0      	push	{r4, r5, r7, lr}
 8028fd2:	b08c      	sub	sp, #48	; 0x30
 8028fd4:	af00      	add	r7, sp, #0
 8028fd6:	6078      	str	r0, [r7, #4]
 8028fd8:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8028fda:	6839      	ldr	r1, [r7, #0]
 8028fdc:	6878      	ldr	r0, [r7, #4]
 8028fde:	f7ff ffd3 	bl	8028f88 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 8028fe2:	f107 0308 	add.w	r3, r7, #8
 8028fe6:	4618      	mov	r0, r3
 8028fe8:	f7fd f97e 	bl	80262e8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8028fec:	683b      	ldr	r3, [r7, #0]
 8028fee:	461d      	mov	r5, r3
 8028ff0:	f107 0408 	add.w	r4, r7, #8
 8028ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028ffc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8029000:	e885 0003 	stmia.w	r5, {r0, r1}
 8029004:	687b      	ldr	r3, [r7, #4]
 8029006:	4618      	mov	r0, r3
 8029008:	3730      	adds	r7, #48	; 0x30
 802900a:	46bd      	mov	sp, r7
 802900c:	bdb0      	pop	{r4, r5, r7, pc}

0802900e <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 802900e:	b480      	push	{r7}
 8029010:	b083      	sub	sp, #12
 8029012:	af00      	add	r7, sp, #0
 8029014:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	4618      	mov	r0, r3
 802901a:	370c      	adds	r7, #12
 802901c:	46bd      	mov	sp, r7
 802901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029022:	4770      	bx	lr

08029024 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8029024:	b480      	push	{r7}
 8029026:	b083      	sub	sp, #12
 8029028:	af00      	add	r7, sp, #0
 802902a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802902c:	687b      	ldr	r3, [r7, #4]
 802902e:	4618      	mov	r0, r3
 8029030:	370c      	adds	r7, #12
 8029032:	46bd      	mov	sp, r7
 8029034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029038:	4770      	bx	lr

0802903a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 802903a:	b580      	push	{r7, lr}
 802903c:	b082      	sub	sp, #8
 802903e:	af00      	add	r7, sp, #0
 8029040:	6078      	str	r0, [r7, #4]
 8029042:	6039      	str	r1, [r7, #0]
 8029044:	683b      	ldr	r3, [r7, #0]
 8029046:	681a      	ldr	r2, [r3, #0]
 8029048:	687b      	ldr	r3, [r7, #4]
 802904a:	601a      	str	r2, [r3, #0]
 802904c:	683b      	ldr	r3, [r7, #0]
 802904e:	685a      	ldr	r2, [r3, #4]
 8029050:	687b      	ldr	r3, [r7, #4]
 8029052:	605a      	str	r2, [r3, #4]
 8029054:	687b      	ldr	r3, [r7, #4]
 8029056:	f103 0208 	add.w	r2, r3, #8
 802905a:	683b      	ldr	r3, [r7, #0]
 802905c:	3308      	adds	r3, #8
 802905e:	4619      	mov	r1, r3
 8029060:	4610      	mov	r0, r2
 8029062:	f7fc f85b 	bl	802511c <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8029066:	687b      	ldr	r3, [r7, #4]
 8029068:	f103 0218 	add.w	r2, r3, #24
 802906c:	683b      	ldr	r3, [r7, #0]
 802906e:	3318      	adds	r3, #24
 8029070:	4619      	mov	r1, r3
 8029072:	4610      	mov	r0, r2
 8029074:	f7fc f852 	bl	802511c <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8029078:	687b      	ldr	r3, [r7, #4]
 802907a:	4618      	mov	r0, r3
 802907c:	3708      	adds	r7, #8
 802907e:	46bd      	mov	sp, r7
 8029080:	bd80      	pop	{r7, pc}

08029082 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8029082:	b5b0      	push	{r4, r5, r7, lr}
 8029084:	b08c      	sub	sp, #48	; 0x30
 8029086:	af00      	add	r7, sp, #0
 8029088:	6078      	str	r0, [r7, #4]
 802908a:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 802908c:	6839      	ldr	r1, [r7, #0]
 802908e:	6878      	ldr	r0, [r7, #4]
 8029090:	f7ff ffd3 	bl	802903a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8029094:	f107 0308 	add.w	r3, r7, #8
 8029098:	4618      	mov	r0, r3
 802909a:	f7fe fd2e 	bl	8027afa <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 802909e:	683b      	ldr	r3, [r7, #0]
 80290a0:	461d      	mov	r5, r3
 80290a2:	f107 0408 	add.w	r4, r7, #8
 80290a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80290a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80290aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80290ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80290ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80290b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80290b6:	687b      	ldr	r3, [r7, #4]
 80290b8:	4618      	mov	r0, r3
 80290ba:	3730      	adds	r7, #48	; 0x30
 80290bc:	46bd      	mov	sp, r7
 80290be:	bdb0      	pop	{r4, r5, r7, pc}

080290c0 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80290c0:	b480      	push	{r7}
 80290c2:	b083      	sub	sp, #12
 80290c4:	af00      	add	r7, sp, #0
 80290c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80290c8:	687b      	ldr	r3, [r7, #4]
 80290ca:	4618      	mov	r0, r3
 80290cc:	370c      	adds	r7, #12
 80290ce:	46bd      	mov	sp, r7
 80290d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290d4:	4770      	bx	lr

080290d6 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80290d6:	b480      	push	{r7}
 80290d8:	b083      	sub	sp, #12
 80290da:	af00      	add	r7, sp, #0
 80290dc:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80290de:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80290e2:	4618      	mov	r0, r3
 80290e4:	370c      	adds	r7, #12
 80290e6:	46bd      	mov	sp, r7
 80290e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290ec:	4770      	bx	lr

080290ee <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80290ee:	b580      	push	{r7, lr}
 80290f0:	b082      	sub	sp, #8
 80290f2:	af00      	add	r7, sp, #0
 80290f4:	6078      	str	r0, [r7, #4]
 80290f6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80290f8:	687a      	ldr	r2, [r7, #4]
 80290fa:	683b      	ldr	r3, [r7, #0]
 80290fc:	429a      	cmp	r2, r3
 80290fe:	d00a      	beq.n	8029116 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8029100:	6878      	ldr	r0, [r7, #4]
 8029102:	f000 fc04 	bl	802990e <_ZSt11__addressofI7RequestEPT_RS1_>
 8029106:	4603      	mov	r3, r0
 8029108:	4618      	mov	r0, r3
 802910a:	f000 fc0b 	bl	8029924 <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 802910e:	687b      	ldr	r3, [r7, #4]
 8029110:	3314      	adds	r3, #20
 8029112:	607b      	str	r3, [r7, #4]
 8029114:	e7f0      	b.n	80290f8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 8029116:	bf00      	nop
 8029118:	3708      	adds	r7, #8
 802911a:	46bd      	mov	sp, r7
 802911c:	bd80      	pop	{r7, pc}

0802911e <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802911e:	b580      	push	{r7, lr}
 8029120:	b084      	sub	sp, #16
 8029122:	af00      	add	r7, sp, #0
 8029124:	60f8      	str	r0, [r7, #12]
 8029126:	60b9      	str	r1, [r7, #8]
 8029128:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802912a:	68f8      	ldr	r0, [r7, #12]
 802912c:	f000 fc05 	bl	802993a <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 8029130:	4602      	mov	r2, r0
 8029132:	68bb      	ldr	r3, [r7, #8]
 8029134:	4293      	cmp	r3, r2
 8029136:	bf8c      	ite	hi
 8029138:	2301      	movhi	r3, #1
 802913a:	2300      	movls	r3, #0
 802913c:	b2db      	uxtb	r3, r3
 802913e:	2b00      	cmp	r3, #0
 8029140:	d001      	beq.n	8029146 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029142:	f015 fed6 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029146:	68bb      	ldr	r3, [r7, #8]
 8029148:	009b      	lsls	r3, r3, #2
 802914a:	4618      	mov	r0, r3
 802914c:	f015 fec0 	bl	803eed0 <_Znwj>
 8029150:	4603      	mov	r3, r0
      }
 8029152:	4618      	mov	r0, r3
 8029154:	3710      	adds	r7, #16
 8029156:	46bd      	mov	sp, r7
 8029158:	bd80      	pop	{r7, pc}

0802915a <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 802915a:	b580      	push	{r7, lr}
 802915c:	b084      	sub	sp, #16
 802915e:	af00      	add	r7, sp, #0
 8029160:	60f8      	str	r0, [r7, #12]
 8029162:	60b9      	str	r1, [r7, #8]
 8029164:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8029166:	687b      	ldr	r3, [r7, #4]
 8029168:	011b      	lsls	r3, r3, #4
 802916a:	4619      	mov	r1, r3
 802916c:	68b8      	ldr	r0, [r7, #8]
 802916e:	f015 fead 	bl	803eecc <_ZdlPvj>
      }
 8029172:	bf00      	nop
 8029174:	3710      	adds	r7, #16
 8029176:	46bd      	mov	sp, r7
 8029178:	bd80      	pop	{r7, pc}

0802917a <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802917a:	b480      	push	{r7}
 802917c:	b083      	sub	sp, #12
 802917e:	af00      	add	r7, sp, #0
 8029180:	6078      	str	r0, [r7, #4]
 8029182:	687b      	ldr	r3, [r7, #4]
 8029184:	4618      	mov	r0, r3
 8029186:	370c      	adds	r7, #12
 8029188:	46bd      	mov	sp, r7
 802918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802918e:	4770      	bx	lr

08029190 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8029190:	b580      	push	{r7, lr}
 8029192:	b082      	sub	sp, #8
 8029194:	af00      	add	r7, sp, #0
 8029196:	6078      	str	r0, [r7, #4]
 8029198:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 802919a:	687a      	ldr	r2, [r7, #4]
 802919c:	683b      	ldr	r3, [r7, #0]
 802919e:	429a      	cmp	r2, r3
 80291a0:	d00a      	beq.n	80291b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80291a2:	6878      	ldr	r0, [r7, #4]
 80291a4:	f000 fbd5 	bl	8029952 <_ZSt11__addressofI8ResponceEPT_RS1_>
 80291a8:	4603      	mov	r3, r0
 80291aa:	4618      	mov	r0, r3
 80291ac:	f000 fbdc 	bl	8029968 <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 80291b0:	687b      	ldr	r3, [r7, #4]
 80291b2:	3310      	adds	r3, #16
 80291b4:	607b      	str	r3, [r7, #4]
 80291b6:	e7f0      	b.n	802919a <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 80291b8:	bf00      	nop
 80291ba:	3708      	adds	r7, #8
 80291bc:	46bd      	mov	sp, r7
 80291be:	bd80      	pop	{r7, pc}

080291c0 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80291c0:	b580      	push	{r7, lr}
 80291c2:	b082      	sub	sp, #8
 80291c4:	af00      	add	r7, sp, #0
 80291c6:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80291c8:	6878      	ldr	r0, [r7, #4]
 80291ca:	f000 f857 	bl	802927c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 80291ce:	4603      	mov	r3, r0
 80291d0:	4618      	mov	r0, r3
 80291d2:	3708      	adds	r7, #8
 80291d4:	46bd      	mov	sp, r7
 80291d6:	bd80      	pop	{r7, pc}

080291d8 <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 80291d8:	b480      	push	{r7}
 80291da:	b083      	sub	sp, #12
 80291dc:	af00      	add	r7, sp, #0
 80291de:	6078      	str	r0, [r7, #4]
    { return __it; }
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	4618      	mov	r0, r3
 80291e4:	370c      	adds	r7, #12
 80291e6:	46bd      	mov	sp, r7
 80291e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291ec:	4770      	bx	lr

080291ee <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80291ee:	b5b0      	push	{r4, r5, r7, lr}
 80291f0:	b084      	sub	sp, #16
 80291f2:	af00      	add	r7, sp, #0
 80291f4:	60f8      	str	r0, [r7, #12]
 80291f6:	60b9      	str	r1, [r7, #8]
 80291f8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80291fa:	68f8      	ldr	r0, [r7, #12]
 80291fc:	f000 fbbf 	bl	802997e <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029200:	4604      	mov	r4, r0
 8029202:	68b8      	ldr	r0, [r7, #8]
 8029204:	f000 fbbb 	bl	802997e <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029208:	4605      	mov	r5, r0
 802920a:	687b      	ldr	r3, [r7, #4]
 802920c:	4618      	mov	r0, r3
 802920e:	f000 fbb6 	bl	802997e <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029212:	4603      	mov	r3, r0
 8029214:	461a      	mov	r2, r3
 8029216:	4629      	mov	r1, r5
 8029218:	4620      	mov	r0, r4
 802921a:	f000 fbbb 	bl	8029994 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 802921e:	4602      	mov	r2, r0
 8029220:	1d3b      	adds	r3, r7, #4
 8029222:	4611      	mov	r1, r2
 8029224:	4618      	mov	r0, r3
 8029226:	f000 fbc5 	bl	80299b4 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 802922a:	4603      	mov	r3, r0
    }
 802922c:	4618      	mov	r0, r3
 802922e:	3710      	adds	r7, #16
 8029230:	46bd      	mov	sp, r7
 8029232:	bdb0      	pop	{r4, r5, r7, pc}

08029234 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8029234:	b5b0      	push	{r4, r5, r7, lr}
 8029236:	b084      	sub	sp, #16
 8029238:	af00      	add	r7, sp, #0
 802923a:	60f8      	str	r0, [r7, #12]
 802923c:	60b9      	str	r1, [r7, #8]
 802923e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029240:	68f8      	ldr	r0, [r7, #12]
 8029242:	f000 fb9c 	bl	802997e <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029246:	4604      	mov	r4, r0
 8029248:	68b8      	ldr	r0, [r7, #8]
 802924a:	f000 fb98 	bl	802997e <_ZSt12__niter_baseIPP7RequestET_S3_>
 802924e:	4605      	mov	r5, r0
 8029250:	687b      	ldr	r3, [r7, #4]
 8029252:	4618      	mov	r0, r3
 8029254:	f000 fb93 	bl	802997e <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029258:	4603      	mov	r3, r0
 802925a:	461a      	mov	r2, r3
 802925c:	4629      	mov	r1, r5
 802925e:	4620      	mov	r0, r4
 8029260:	f000 fbb4 	bl	80299cc <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8029264:	4602      	mov	r2, r0
 8029266:	1d3b      	adds	r3, r7, #4
 8029268:	4611      	mov	r1, r2
 802926a:	4618      	mov	r0, r3
 802926c:	f000 fba2 	bl	80299b4 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8029270:	4603      	mov	r3, r0
    }
 8029272:	4618      	mov	r0, r3
 8029274:	3710      	adds	r7, #16
 8029276:	46bd      	mov	sp, r7
 8029278:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802927c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802927c:	b480      	push	{r7}
 802927e:	b083      	sub	sp, #12
 8029280:	af00      	add	r7, sp, #0
 8029282:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029284:	4b03      	ldr	r3, [pc, #12]	; (8029294 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 8029286:	4618      	mov	r0, r3
 8029288:	370c      	adds	r7, #12
 802928a:	46bd      	mov	sp, r7
 802928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029290:	4770      	bx	lr
 8029292:	bf00      	nop
 8029294:	06666666 	.word	0x06666666

08029298 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8029298:	b580      	push	{r7, lr}
 802929a:	b082      	sub	sp, #8
 802929c:	af00      	add	r7, sp, #0
 802929e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80292a0:	6878      	ldr	r0, [r7, #4]
 80292a2:	f000 fba3 	bl	80299ec <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 80292a6:	4603      	mov	r3, r0
      }
 80292a8:	4618      	mov	r0, r3
 80292aa:	3708      	adds	r7, #8
 80292ac:	46bd      	mov	sp, r7
 80292ae:	bd80      	pop	{r7, pc}

080292b0 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80292b0:	b590      	push	{r4, r7, lr}
 80292b2:	b085      	sub	sp, #20
 80292b4:	af00      	add	r7, sp, #0
 80292b6:	60f8      	str	r0, [r7, #12]
 80292b8:	60b9      	str	r1, [r7, #8]
 80292ba:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80292bc:	68f8      	ldr	r0, [r7, #12]
 80292be:	f000 fba1 	bl	8029a04 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80292c2:	4604      	mov	r4, r0
 80292c4:	68b8      	ldr	r0, [r7, #8]
 80292c6:	f000 fb9d 	bl	8029a04 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80292ca:	4603      	mov	r3, r0
 80292cc:	687a      	ldr	r2, [r7, #4]
 80292ce:	4619      	mov	r1, r3
 80292d0:	4620      	mov	r0, r4
 80292d2:	f000 fba2 	bl	8029a1a <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80292d6:	4603      	mov	r3, r0
    }
 80292d8:	4618      	mov	r0, r3
 80292da:	3714      	adds	r7, #20
 80292dc:	46bd      	mov	sp, r7
 80292de:	bd90      	pop	{r4, r7, pc}

080292e0 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80292e0:	b590      	push	{r4, r7, lr}
 80292e2:	b085      	sub	sp, #20
 80292e4:	af00      	add	r7, sp, #0
 80292e6:	60f8      	str	r0, [r7, #12]
 80292e8:	60b9      	str	r1, [r7, #8]
 80292ea:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80292ec:	68f8      	ldr	r0, [r7, #12]
 80292ee:	f000 fb89 	bl	8029a04 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80292f2:	4604      	mov	r4, r0
 80292f4:	68b8      	ldr	r0, [r7, #8]
 80292f6:	f000 fb85 	bl	8029a04 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80292fa:	4603      	mov	r3, r0
 80292fc:	687a      	ldr	r2, [r7, #4]
 80292fe:	4619      	mov	r1, r3
 8029300:	4620      	mov	r0, r4
 8029302:	f000 fbad 	bl	8029a60 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8029306:	4603      	mov	r3, r0
    }
 8029308:	4618      	mov	r0, r3
 802930a:	3714      	adds	r7, #20
 802930c:	46bd      	mov	sp, r7
 802930e:	bd90      	pop	{r4, r7, pc}

08029310 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029310:	b580      	push	{r7, lr}
 8029312:	b084      	sub	sp, #16
 8029314:	af00      	add	r7, sp, #0
 8029316:	60f8      	str	r0, [r7, #12]
 8029318:	60b9      	str	r1, [r7, #8]
 802931a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802931c:	68f8      	ldr	r0, [r7, #12]
 802931e:	f000 fbc2 	bl	8029aa6 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8029322:	4602      	mov	r2, r0
 8029324:	68bb      	ldr	r3, [r7, #8]
 8029326:	4293      	cmp	r3, r2
 8029328:	bf8c      	ite	hi
 802932a:	2301      	movhi	r3, #1
 802932c:	2300      	movls	r3, #0
 802932e:	b2db      	uxtb	r3, r3
 8029330:	2b00      	cmp	r3, #0
 8029332:	d001      	beq.n	8029338 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029334:	f015 fddd 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029338:	68bb      	ldr	r3, [r7, #8]
 802933a:	011b      	lsls	r3, r3, #4
 802933c:	4618      	mov	r0, r3
 802933e:	f015 fdc7 	bl	803eed0 <_Znwj>
 8029342:	4603      	mov	r3, r0
      }
 8029344:	4618      	mov	r0, r3
 8029346:	3710      	adds	r7, #16
 8029348:	46bd      	mov	sp, r7
 802934a:	bd80      	pop	{r7, pc}

0802934c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 802934c:	b580      	push	{r7, lr}
 802934e:	b082      	sub	sp, #8
 8029350:	af00      	add	r7, sp, #0
 8029352:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8029354:	6878      	ldr	r0, [r7, #4]
 8029356:	f000 f820 	bl	802939a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 802935a:	4603      	mov	r3, r0
 802935c:	4618      	mov	r0, r3
 802935e:	3708      	adds	r7, #8
 8029360:	46bd      	mov	sp, r7
 8029362:	bd80      	pop	{r7, pc}

08029364 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8029364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029366:	b085      	sub	sp, #20
 8029368:	af00      	add	r7, sp, #0
 802936a:	60f8      	str	r0, [r7, #12]
 802936c:	60b9      	str	r1, [r7, #8]
 802936e:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8029370:	68fc      	ldr	r4, [r7, #12]
 8029372:	68b8      	ldr	r0, [r7, #8]
 8029374:	f7f7 fd9c 	bl	8020eb0 <_ZSt17__size_to_integerj>
 8029378:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 802937a:	f107 030c 	add.w	r3, r7, #12
 802937e:	4618      	mov	r0, r3
 8029380:	f000 fb9d 	bl	8029abe <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8029384:	4633      	mov	r3, r6
 8029386:	687a      	ldr	r2, [r7, #4]
 8029388:	4629      	mov	r1, r5
 802938a:	4620      	mov	r0, r4
 802938c:	f000 fba2 	bl	8029ad4 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8029390:	4603      	mov	r3, r0
    }
 8029392:	4618      	mov	r0, r3
 8029394:	3714      	adds	r7, #20
 8029396:	46bd      	mov	sp, r7
 8029398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802939a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802939a:	b480      	push	{r7}
 802939c:	b083      	sub	sp, #12
 802939e:	af00      	add	r7, sp, #0
 80293a0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80293a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80293a6:	4618      	mov	r0, r3
 80293a8:	370c      	adds	r7, #12
 80293aa:	46bd      	mov	sp, r7
 80293ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293b0:	4770      	bx	lr

080293b2 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80293b2:	b580      	push	{r7, lr}
 80293b4:	b086      	sub	sp, #24
 80293b6:	af00      	add	r7, sp, #0
 80293b8:	60f8      	str	r0, [r7, #12]
 80293ba:	60b9      	str	r1, [r7, #8]
 80293bc:	607a      	str	r2, [r7, #4]
 80293be:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80293c0:	68ba      	ldr	r2, [r7, #8]
 80293c2:	68fb      	ldr	r3, [r7, #12]
 80293c4:	1ad3      	subs	r3, r2, r3
 80293c6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80293c8:	697b      	ldr	r3, [r7, #20]
 80293ca:	2b00      	cmp	r3, #0
 80293cc:	dd05      	ble.n	80293da <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80293ce:	697b      	ldr	r3, [r7, #20]
 80293d0:	461a      	mov	r2, r3
 80293d2:	68f9      	ldr	r1, [r7, #12]
 80293d4:	6878      	ldr	r0, [r7, #4]
 80293d6:	f015 fe1d 	bl	803f014 <memmove>
      return __result + __count;
 80293da:	697b      	ldr	r3, [r7, #20]
 80293dc:	687a      	ldr	r2, [r7, #4]
 80293de:	4413      	add	r3, r2
    }
 80293e0:	4618      	mov	r0, r3
 80293e2:	3718      	adds	r7, #24
 80293e4:	46bd      	mov	sp, r7
 80293e6:	bd80      	pop	{r7, pc}

080293e8 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80293e8:	b480      	push	{r7}
 80293ea:	b083      	sub	sp, #12
 80293ec:	af00      	add	r7, sp, #0
 80293ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	4618      	mov	r0, r3
 80293f4:	370c      	adds	r7, #12
 80293f6:	46bd      	mov	sp, r7
 80293f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293fc:	4770      	bx	lr

080293fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80293fe:	b580      	push	{r7, lr}
 8029400:	b084      	sub	sp, #16
 8029402:	af00      	add	r7, sp, #0
 8029404:	60f8      	str	r0, [r7, #12]
 8029406:	60b9      	str	r1, [r7, #8]
 8029408:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 802940a:	687a      	ldr	r2, [r7, #4]
 802940c:	68b9      	ldr	r1, [r7, #8]
 802940e:	68f8      	ldr	r0, [r7, #12]
 8029410:	f000 fb7b 	bl	8029b0a <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8029414:	4603      	mov	r3, r0
 8029416:	4618      	mov	r0, r3
 8029418:	3710      	adds	r7, #16
 802941a:	46bd      	mov	sp, r7
 802941c:	bd80      	pop	{r7, pc}

0802941e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 802941e:	b590      	push	{r4, r7, lr}
 8029420:	b085      	sub	sp, #20
 8029422:	af00      	add	r7, sp, #0
 8029424:	60f8      	str	r0, [r7, #12]
 8029426:	60b9      	str	r1, [r7, #8]
 8029428:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802942a:	68f8      	ldr	r0, [r7, #12]
 802942c:	f7fc fc06 	bl	8025c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8029430:	4604      	mov	r4, r0
 8029432:	68b8      	ldr	r0, [r7, #8]
 8029434:	f7fc fc02 	bl	8025c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8029438:	4603      	mov	r3, r0
 802943a:	687a      	ldr	r2, [r7, #4]
 802943c:	4619      	mov	r1, r3
 802943e:	4620      	mov	r0, r4
 8029440:	f000 fb7b 	bl	8029b3a <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8029444:	4603      	mov	r3, r0
    }
 8029446:	4618      	mov	r0, r3
 8029448:	3714      	adds	r7, #20
 802944a:	46bd      	mov	sp, r7
 802944c:	bd90      	pop	{r4, r7, pc}

0802944e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802944e:	b580      	push	{r7, lr}
 8029450:	b086      	sub	sp, #24
 8029452:	af00      	add	r7, sp, #0
 8029454:	60f8      	str	r0, [r7, #12]
 8029456:	60b9      	str	r1, [r7, #8]
 8029458:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802945a:	68ba      	ldr	r2, [r7, #8]
 802945c:	68fb      	ldr	r3, [r7, #12]
 802945e:	1ad3      	subs	r3, r2, r3
 8029460:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8029462:	697b      	ldr	r3, [r7, #20]
 8029464:	2b00      	cmp	r3, #0
 8029466:	d005      	beq.n	8029474 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8029468:	697b      	ldr	r3, [r7, #20]
 802946a:	461a      	mov	r2, r3
 802946c:	68f9      	ldr	r1, [r7, #12]
 802946e:	6878      	ldr	r0, [r7, #4]
 8029470:	f015 fdd0 	bl	803f014 <memmove>
	  return __result + _Num;
 8029474:	697b      	ldr	r3, [r7, #20]
 8029476:	687a      	ldr	r2, [r7, #4]
 8029478:	4413      	add	r3, r2
	}
 802947a:	4618      	mov	r0, r3
 802947c:	3718      	adds	r7, #24
 802947e:	46bd      	mov	sp, r7
 8029480:	bd80      	pop	{r7, pc}

08029482 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8029482:	b580      	push	{r7, lr}
 8029484:	b084      	sub	sp, #16
 8029486:	af00      	add	r7, sp, #0
 8029488:	60f8      	str	r0, [r7, #12]
 802948a:	60b9      	str	r1, [r7, #8]
 802948c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802948e:	687a      	ldr	r2, [r7, #4]
 8029490:	68b9      	ldr	r1, [r7, #8]
 8029492:	68f8      	ldr	r0, [r7, #12]
 8029494:	f000 fb74 	bl	8029b80 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8029498:	4603      	mov	r3, r0
 802949a:	4618      	mov	r0, r3
 802949c:	3710      	adds	r7, #16
 802949e:	46bd      	mov	sp, r7
 80294a0:	bd80      	pop	{r7, pc}

080294a2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 80294a2:	b580      	push	{r7, lr}
 80294a4:	b082      	sub	sp, #8
 80294a6:	af00      	add	r7, sp, #0
 80294a8:	6078      	str	r0, [r7, #4]
 80294aa:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 80294ac:	683b      	ldr	r3, [r7, #0]
 80294ae:	425b      	negs	r3, r3
 80294b0:	4619      	mov	r1, r3
 80294b2:	6878      	ldr	r0, [r7, #4]
 80294b4:	f7fe f98c 	bl	80277d0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 80294b8:	4603      	mov	r3, r0
 80294ba:	4618      	mov	r0, r3
 80294bc:	3708      	adds	r7, #8
 80294be:	46bd      	mov	sp, r7
 80294c0:	bd80      	pop	{r7, pc}

080294c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80294c2:	b580      	push	{r7, lr}
 80294c4:	b088      	sub	sp, #32
 80294c6:	af00      	add	r7, sp, #0
 80294c8:	60f8      	str	r0, [r7, #12]
 80294ca:	60b9      	str	r1, [r7, #8]
 80294cc:	607a      	str	r2, [r7, #4]
 80294ce:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80294d0:	f107 0310 	add.w	r3, r7, #16
 80294d4:	6839      	ldr	r1, [r7, #0]
 80294d6:	4618      	mov	r0, r3
 80294d8:	f7fb fd8f 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80294dc:	68f8      	ldr	r0, [r7, #12]
 80294de:	f107 0310 	add.w	r3, r7, #16
 80294e2:	687a      	ldr	r2, [r7, #4]
 80294e4:	68b9      	ldr	r1, [r7, #8]
 80294e6:	f7fc fc81 	bl	8025dec <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80294ea:	68f8      	ldr	r0, [r7, #12]
 80294ec:	3720      	adds	r7, #32
 80294ee:	46bd      	mov	sp, r7
 80294f0:	bd80      	pop	{r7, pc}

080294f2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80294f2:	b580      	push	{r7, lr}
 80294f4:	b082      	sub	sp, #8
 80294f6:	af00      	add	r7, sp, #0
 80294f8:	6078      	str	r0, [r7, #4]
 80294fa:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80294fc:	683b      	ldr	r3, [r7, #0]
 80294fe:	1c5a      	adds	r2, r3, #1
 8029500:	687b      	ldr	r3, [r7, #4]
 8029502:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8029504:	6879      	ldr	r1, [r7, #4]
 8029506:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8029508:	6879      	ldr	r1, [r7, #4]
 802950a:	6809      	ldr	r1, [r1, #0]
 802950c:	1a41      	subs	r1, r0, r1
 802950e:	1089      	asrs	r1, r1, #2
 8029510:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8029512:	429a      	cmp	r2, r3
 8029514:	d904      	bls.n	8029520 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8029516:	2200      	movs	r2, #0
 8029518:	6839      	ldr	r1, [r7, #0]
 802951a:	6878      	ldr	r0, [r7, #4]
 802951c:	f7fe f8a0 	bl	8027660 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8029520:	bf00      	nop
 8029522:	3708      	adds	r7, #8
 8029524:	46bd      	mov	sp, r7
 8029526:	bd80      	pop	{r7, pc}

08029528 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
    make_move_iterator(_Iterator __i)
 8029528:	b580      	push	{r7, lr}
 802952a:	b086      	sub	sp, #24
 802952c:	af00      	add	r7, sp, #0
 802952e:	6078      	str	r0, [r7, #4]
 8029530:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8029532:	6838      	ldr	r0, [r7, #0]
 8029534:	f000 fb34 	bl	8029ba0 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8029538:	4602      	mov	r2, r0
 802953a:	f107 0308 	add.w	r3, r7, #8
 802953e:	4611      	mov	r1, r2
 8029540:	4618      	mov	r0, r3
 8029542:	f7fb fd5a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029546:	f107 0308 	add.w	r3, r7, #8
 802954a:	4619      	mov	r1, r3
 802954c:	6878      	ldr	r0, [r7, #4]
 802954e:	f000 fb32 	bl	8029bb6 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8029552:	6878      	ldr	r0, [r7, #4]
 8029554:	3718      	adds	r7, #24
 8029556:	46bd      	mov	sp, r7
 8029558:	bd80      	pop	{r7, pc}

0802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 802955a:	b580      	push	{r7, lr}
 802955c:	b082      	sub	sp, #8
 802955e:	af00      	add	r7, sp, #0
 8029560:	6078      	str	r0, [r7, #4]
 8029562:	6039      	str	r1, [r7, #0]
 8029564:	687b      	ldr	r3, [r7, #4]
 8029566:	683a      	ldr	r2, [r7, #0]
 8029568:	4611      	mov	r1, r2
 802956a:	4618      	mov	r0, r3
 802956c:	f7fb fd45 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029570:	687b      	ldr	r3, [r7, #4]
 8029572:	4618      	mov	r0, r3
 8029574:	3708      	adds	r7, #8
 8029576:	46bd      	mov	sp, r7
 8029578:	bd80      	pop	{r7, pc}

0802957a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802957a:	b580      	push	{r7, lr}
 802957c:	b090      	sub	sp, #64	; 0x40
 802957e:	af00      	add	r7, sp, #0
 8029580:	60f8      	str	r0, [r7, #12]
 8029582:	60b9      	str	r1, [r7, #8]
 8029584:	607a      	str	r2, [r7, #4]
 8029586:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8029588:	f107 0310 	add.w	r3, r7, #16
 802958c:	68b9      	ldr	r1, [r7, #8]
 802958e:	4618      	mov	r0, r3
 8029590:	f7ff ffe3 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8029594:	f107 0320 	add.w	r3, r7, #32
 8029598:	6879      	ldr	r1, [r7, #4]
 802959a:	4618      	mov	r0, r3
 802959c:	f7ff ffdd 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80295a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80295a4:	6839      	ldr	r1, [r7, #0]
 80295a6:	4618      	mov	r0, r3
 80295a8:	f7fb fd27 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80295ac:	68f8      	ldr	r0, [r7, #12]
 80295ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80295b2:	f107 0220 	add.w	r2, r7, #32
 80295b6:	f107 0110 	add.w	r1, r7, #16
 80295ba:	f000 fb0f 	bl	8029bdc <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80295be:	68f8      	ldr	r0, [r7, #12]
 80295c0:	3740      	adds	r7, #64	; 0x40
 80295c2:	46bd      	mov	sp, r7
 80295c4:	bd80      	pop	{r7, pc}

080295c6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 80295c6:	b580      	push	{r7, lr}
 80295c8:	b082      	sub	sp, #8
 80295ca:	af00      	add	r7, sp, #0
 80295cc:	6078      	str	r0, [r7, #4]
 80295ce:	6039      	str	r1, [r7, #0]
    { return __it; }
 80295d0:	6839      	ldr	r1, [r7, #0]
 80295d2:	6878      	ldr	r0, [r7, #4]
 80295d4:	f7fb fd11 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80295d8:	6878      	ldr	r0, [r7, #4]
 80295da:	3708      	adds	r7, #8
 80295dc:	46bd      	mov	sp, r7
 80295de:	bd80      	pop	{r7, pc}

080295e0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80295e0:	b580      	push	{r7, lr}
 80295e2:	b0a0      	sub	sp, #128	; 0x80
 80295e4:	af00      	add	r7, sp, #0
 80295e6:	60f8      	str	r0, [r7, #12]
 80295e8:	60b9      	str	r1, [r7, #8]
 80295ea:	607a      	str	r2, [r7, #4]
 80295ec:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80295ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80295f2:	68b9      	ldr	r1, [r7, #8]
 80295f4:	4618      	mov	r0, r3
 80295f6:	f7fb fd00 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80295fa:	f107 0320 	add.w	r3, r7, #32
 80295fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029602:	4611      	mov	r1, r2
 8029604:	4618      	mov	r0, r3
 8029606:	f7fe ff96 	bl	8028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802960a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802960e:	6879      	ldr	r1, [r7, #4]
 8029610:	4618      	mov	r0, r3
 8029612:	f7fb fcf2 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802961a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802961e:	4611      	mov	r1, r2
 8029620:	4618      	mov	r0, r3
 8029622:	f7fe ff88 	bl	8028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802962a:	6839      	ldr	r1, [r7, #0]
 802962c:	4618      	mov	r0, r3
 802962e:	f7fb fce4 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029632:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029636:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802963a:	4611      	mov	r1, r2
 802963c:	4618      	mov	r0, r3
 802963e:	f7fe ff7a 	bl	8028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029642:	f107 0010 	add.w	r0, r7, #16
 8029646:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802964a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802964e:	f107 0120 	add.w	r1, r7, #32
 8029652:	f000 faec 	bl	8029c2e <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8029656:	68fb      	ldr	r3, [r7, #12]
 8029658:	f107 0210 	add.w	r2, r7, #16
 802965c:	6839      	ldr	r1, [r7, #0]
 802965e:	4618      	mov	r0, r3
 8029660:	f7fe ffdc 	bl	802861c <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8029664:	68f8      	ldr	r0, [r7, #12]
 8029666:	3780      	adds	r7, #128	; 0x80
 8029668:	46bd      	mov	sp, r7
 802966a:	bd80      	pop	{r7, pc}

0802966c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802966c:	b580      	push	{r7, lr}
 802966e:	b0a0      	sub	sp, #128	; 0x80
 8029670:	af00      	add	r7, sp, #0
 8029672:	60f8      	str	r0, [r7, #12]
 8029674:	60b9      	str	r1, [r7, #8]
 8029676:	607a      	str	r2, [r7, #4]
 8029678:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 802967a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802967e:	68b9      	ldr	r1, [r7, #8]
 8029680:	4618      	mov	r0, r3
 8029682:	f7fb fcba 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029686:	f107 0320 	add.w	r3, r7, #32
 802968a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802968e:	4611      	mov	r1, r2
 8029690:	4618      	mov	r0, r3
 8029692:	f7fe ff50 	bl	8028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029696:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802969a:	6879      	ldr	r1, [r7, #4]
 802969c:	4618      	mov	r0, r3
 802969e:	f7fb fcac 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80296a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80296a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80296aa:	4611      	mov	r1, r2
 80296ac:	4618      	mov	r0, r3
 80296ae:	f7fe ff42 	bl	8028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80296b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80296b6:	6839      	ldr	r1, [r7, #0]
 80296b8:	4618      	mov	r0, r3
 80296ba:	f7fb fc9e 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80296be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80296c2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80296c6:	4611      	mov	r1, r2
 80296c8:	4618      	mov	r0, r3
 80296ca:	f7fe ff34 	bl	8028536 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80296ce:	f107 0010 	add.w	r0, r7, #16
 80296d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80296d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80296da:	f107 0120 	add.w	r1, r7, #32
 80296de:	f000 facc 	bl	8029c7a <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 80296e2:	68fb      	ldr	r3, [r7, #12]
 80296e4:	f107 0210 	add.w	r2, r7, #16
 80296e8:	6839      	ldr	r1, [r7, #0]
 80296ea:	4618      	mov	r0, r3
 80296ec:	f7fe ff96 	bl	802861c <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 80296f0:	68f8      	ldr	r0, [r7, #12]
 80296f2:	3780      	adds	r7, #128	; 0x80
 80296f4:	46bd      	mov	sp, r7
 80296f6:	bd80      	pop	{r7, pc}

080296f8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80296f8:	b580      	push	{r7, lr}
 80296fa:	b082      	sub	sp, #8
 80296fc:	af00      	add	r7, sp, #0
 80296fe:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8029700:	6878      	ldr	r0, [r7, #4]
 8029702:	f000 f857 	bl	80297b4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8029706:	4603      	mov	r3, r0
 8029708:	4618      	mov	r0, r3
 802970a:	3708      	adds	r7, #8
 802970c:	46bd      	mov	sp, r7
 802970e:	bd80      	pop	{r7, pc}

08029710 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8029710:	b480      	push	{r7}
 8029712:	b083      	sub	sp, #12
 8029714:	af00      	add	r7, sp, #0
 8029716:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	4618      	mov	r0, r3
 802971c:	370c      	adds	r7, #12
 802971e:	46bd      	mov	sp, r7
 8029720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029724:	4770      	bx	lr

08029726 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029726:	b5b0      	push	{r4, r5, r7, lr}
 8029728:	b084      	sub	sp, #16
 802972a:	af00      	add	r7, sp, #0
 802972c:	60f8      	str	r0, [r7, #12]
 802972e:	60b9      	str	r1, [r7, #8]
 8029730:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029732:	68f8      	ldr	r0, [r7, #12]
 8029734:	f000 fac7 	bl	8029cc6 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029738:	4604      	mov	r4, r0
 802973a:	68b8      	ldr	r0, [r7, #8]
 802973c:	f000 fac3 	bl	8029cc6 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029740:	4605      	mov	r5, r0
 8029742:	687b      	ldr	r3, [r7, #4]
 8029744:	4618      	mov	r0, r3
 8029746:	f000 fabe 	bl	8029cc6 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802974a:	4603      	mov	r3, r0
 802974c:	461a      	mov	r2, r3
 802974e:	4629      	mov	r1, r5
 8029750:	4620      	mov	r0, r4
 8029752:	f000 fac3 	bl	8029cdc <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8029756:	4602      	mov	r2, r0
 8029758:	1d3b      	adds	r3, r7, #4
 802975a:	4611      	mov	r1, r2
 802975c:	4618      	mov	r0, r3
 802975e:	f000 facd 	bl	8029cfc <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8029762:	4603      	mov	r3, r0
    }
 8029764:	4618      	mov	r0, r3
 8029766:	3710      	adds	r7, #16
 8029768:	46bd      	mov	sp, r7
 802976a:	bdb0      	pop	{r4, r5, r7, pc}

0802976c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802976c:	b5b0      	push	{r4, r5, r7, lr}
 802976e:	b084      	sub	sp, #16
 8029770:	af00      	add	r7, sp, #0
 8029772:	60f8      	str	r0, [r7, #12]
 8029774:	60b9      	str	r1, [r7, #8]
 8029776:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029778:	68f8      	ldr	r0, [r7, #12]
 802977a:	f000 faa4 	bl	8029cc6 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802977e:	4604      	mov	r4, r0
 8029780:	68b8      	ldr	r0, [r7, #8]
 8029782:	f000 faa0 	bl	8029cc6 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029786:	4605      	mov	r5, r0
 8029788:	687b      	ldr	r3, [r7, #4]
 802978a:	4618      	mov	r0, r3
 802978c:	f000 fa9b 	bl	8029cc6 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029790:	4603      	mov	r3, r0
 8029792:	461a      	mov	r2, r3
 8029794:	4629      	mov	r1, r5
 8029796:	4620      	mov	r0, r4
 8029798:	f000 fabc 	bl	8029d14 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802979c:	4602      	mov	r2, r0
 802979e:	1d3b      	adds	r3, r7, #4
 80297a0:	4611      	mov	r1, r2
 80297a2:	4618      	mov	r0, r3
 80297a4:	f000 faaa 	bl	8029cfc <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 80297a8:	4603      	mov	r3, r0
    }
 80297aa:	4618      	mov	r0, r3
 80297ac:	3710      	adds	r7, #16
 80297ae:	46bd      	mov	sp, r7
 80297b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080297b4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80297b4:	b480      	push	{r7}
 80297b6:	b083      	sub	sp, #12
 80297b8:	af00      	add	r7, sp, #0
 80297ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80297bc:	4b03      	ldr	r3, [pc, #12]	; (80297cc <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
      }
 80297be:	4618      	mov	r0, r3
 80297c0:	370c      	adds	r7, #12
 80297c2:	46bd      	mov	sp, r7
 80297c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297c8:	4770      	bx	lr
 80297ca:	bf00      	nop
 80297cc:	06666666 	.word	0x06666666

080297d0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80297d0:	b580      	push	{r7, lr}
 80297d2:	b082      	sub	sp, #8
 80297d4:	af00      	add	r7, sp, #0
 80297d6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80297d8:	6878      	ldr	r0, [r7, #4]
 80297da:	f000 faab 	bl	8029d34 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 80297de:	4603      	mov	r3, r0
      }
 80297e0:	4618      	mov	r0, r3
 80297e2:	3708      	adds	r7, #8
 80297e4:	46bd      	mov	sp, r7
 80297e6:	bd80      	pop	{r7, pc}

080297e8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80297e8:	b590      	push	{r4, r7, lr}
 80297ea:	b085      	sub	sp, #20
 80297ec:	af00      	add	r7, sp, #0
 80297ee:	60f8      	str	r0, [r7, #12]
 80297f0:	60b9      	str	r1, [r7, #8]
 80297f2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80297f4:	68f8      	ldr	r0, [r7, #12]
 80297f6:	f000 faa9 	bl	8029d4c <_ZSt12__miter_baseIPPjET_S2_>
 80297fa:	4604      	mov	r4, r0
 80297fc:	68b8      	ldr	r0, [r7, #8]
 80297fe:	f000 faa5 	bl	8029d4c <_ZSt12__miter_baseIPPjET_S2_>
 8029802:	4603      	mov	r3, r0
 8029804:	687a      	ldr	r2, [r7, #4]
 8029806:	4619      	mov	r1, r3
 8029808:	4620      	mov	r0, r4
 802980a:	f000 faaa 	bl	8029d62 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 802980e:	4603      	mov	r3, r0
    }
 8029810:	4618      	mov	r0, r3
 8029812:	3714      	adds	r7, #20
 8029814:	46bd      	mov	sp, r7
 8029816:	bd90      	pop	{r4, r7, pc}

08029818 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8029818:	b590      	push	{r4, r7, lr}
 802981a:	b085      	sub	sp, #20
 802981c:	af00      	add	r7, sp, #0
 802981e:	60f8      	str	r0, [r7, #12]
 8029820:	60b9      	str	r1, [r7, #8]
 8029822:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029824:	68f8      	ldr	r0, [r7, #12]
 8029826:	f000 fa91 	bl	8029d4c <_ZSt12__miter_baseIPPjET_S2_>
 802982a:	4604      	mov	r4, r0
 802982c:	68b8      	ldr	r0, [r7, #8]
 802982e:	f000 fa8d 	bl	8029d4c <_ZSt12__miter_baseIPPjET_S2_>
 8029832:	4603      	mov	r3, r0
 8029834:	687a      	ldr	r2, [r7, #4]
 8029836:	4619      	mov	r1, r3
 8029838:	4620      	mov	r0, r4
 802983a:	f000 fab5 	bl	8029da8 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 802983e:	4603      	mov	r3, r0
    }
 8029840:	4618      	mov	r0, r3
 8029842:	3714      	adds	r7, #20
 8029844:	46bd      	mov	sp, r7
 8029846:	bd90      	pop	{r4, r7, pc}

08029848 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029848:	b580      	push	{r7, lr}
 802984a:	b084      	sub	sp, #16
 802984c:	af00      	add	r7, sp, #0
 802984e:	60f8      	str	r0, [r7, #12]
 8029850:	60b9      	str	r1, [r7, #8]
 8029852:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029854:	68f8      	ldr	r0, [r7, #12]
 8029856:	f000 faca 	bl	8029dee <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 802985a:	4602      	mov	r2, r0
 802985c:	68bb      	ldr	r3, [r7, #8]
 802985e:	4293      	cmp	r3, r2
 8029860:	bf8c      	ite	hi
 8029862:	2301      	movhi	r3, #1
 8029864:	2300      	movls	r3, #0
 8029866:	b2db      	uxtb	r3, r3
 8029868:	2b00      	cmp	r3, #0
 802986a:	d001      	beq.n	8029870 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802986c:	f015 fb41 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029870:	68bb      	ldr	r3, [r7, #8]
 8029872:	009b      	lsls	r3, r3, #2
 8029874:	4618      	mov	r0, r3
 8029876:	f015 fb2b 	bl	803eed0 <_Znwj>
 802987a:	4603      	mov	r3, r0
      }
 802987c:	4618      	mov	r0, r3
 802987e:	3710      	adds	r7, #16
 8029880:	46bd      	mov	sp, r7
 8029882:	bd80      	pop	{r7, pc}

08029884 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8029884:	b580      	push	{r7, lr}
 8029886:	b084      	sub	sp, #16
 8029888:	af00      	add	r7, sp, #0
 802988a:	60f8      	str	r0, [r7, #12]
 802988c:	60b9      	str	r1, [r7, #8]
 802988e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8029890:	687b      	ldr	r3, [r7, #4]
 8029892:	009b      	lsls	r3, r3, #2
 8029894:	4619      	mov	r1, r3
 8029896:	68b8      	ldr	r0, [r7, #8]
 8029898:	f015 fb18 	bl	803eecc <_ZdlPvj>
      }
 802989c:	bf00      	nop
 802989e:	3710      	adds	r7, #16
 80298a0:	46bd      	mov	sp, r7
 80298a2:	bd80      	pop	{r7, pc}

080298a4 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80298a4:	b480      	push	{r7}
 80298a6:	b083      	sub	sp, #12
 80298a8:	af00      	add	r7, sp, #0
 80298aa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80298ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80298b0:	4618      	mov	r0, r3
 80298b2:	370c      	adds	r7, #12
 80298b4:	46bd      	mov	sp, r7
 80298b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298ba:	4770      	bx	lr

080298bc <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80298bc:	b580      	push	{r7, lr}
 80298be:	b084      	sub	sp, #16
 80298c0:	af00      	add	r7, sp, #0
 80298c2:	60f8      	str	r0, [r7, #12]
 80298c4:	60b9      	str	r1, [r7, #8]
 80298c6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80298c8:	68f8      	ldr	r0, [r7, #12]
 80298ca:	f000 fa9c 	bl	8029e06 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 80298ce:	4602      	mov	r2, r0
 80298d0:	68bb      	ldr	r3, [r7, #8]
 80298d2:	4293      	cmp	r3, r2
 80298d4:	bf8c      	ite	hi
 80298d6:	2301      	movhi	r3, #1
 80298d8:	2300      	movls	r3, #0
 80298da:	b2db      	uxtb	r3, r3
 80298dc:	2b00      	cmp	r3, #0
 80298de:	d001      	beq.n	80298e4 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80298e0:	f015 fb07 	bl	803eef2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80298e4:	68bb      	ldr	r3, [r7, #8]
 80298e6:	009b      	lsls	r3, r3, #2
 80298e8:	4618      	mov	r0, r3
 80298ea:	f015 faf1 	bl	803eed0 <_Znwj>
 80298ee:	4603      	mov	r3, r0
      }
 80298f0:	4618      	mov	r0, r3
 80298f2:	3710      	adds	r7, #16
 80298f4:	46bd      	mov	sp, r7
 80298f6:	bd80      	pop	{r7, pc}

080298f8 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80298f8:	b480      	push	{r7}
 80298fa:	b083      	sub	sp, #12
 80298fc:	af00      	add	r7, sp, #0
 80298fe:	6078      	str	r0, [r7, #4]
 8029900:	687b      	ldr	r3, [r7, #4]
 8029902:	4618      	mov	r0, r3
 8029904:	370c      	adds	r7, #12
 8029906:	46bd      	mov	sp, r7
 8029908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802990c:	4770      	bx	lr

0802990e <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 802990e:	b480      	push	{r7}
 8029910:	b083      	sub	sp, #12
 8029912:	af00      	add	r7, sp, #0
 8029914:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8029916:	687b      	ldr	r3, [r7, #4]
 8029918:	4618      	mov	r0, r3
 802991a:	370c      	adds	r7, #12
 802991c:	46bd      	mov	sp, r7
 802991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029922:	4770      	bx	lr

08029924 <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8029924:	b580      	push	{r7, lr}
 8029926:	b082      	sub	sp, #8
 8029928:	af00      	add	r7, sp, #0
 802992a:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 802992c:	6878      	ldr	r0, [r7, #4]
 802992e:	f7f7 fb94 	bl	802105a <_ZN7RequestD1Ev>
    }
 8029932:	bf00      	nop
 8029934:	3708      	adds	r7, #8
 8029936:	46bd      	mov	sp, r7
 8029938:	bd80      	pop	{r7, pc}

0802993a <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802993a:	b480      	push	{r7}
 802993c:	b083      	sub	sp, #12
 802993e:	af00      	add	r7, sp, #0
 8029940:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029942:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8029946:	4618      	mov	r0, r3
 8029948:	370c      	adds	r7, #12
 802994a:	46bd      	mov	sp, r7
 802994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029950:	4770      	bx	lr

08029952 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8029952:	b480      	push	{r7}
 8029954:	b083      	sub	sp, #12
 8029956:	af00      	add	r7, sp, #0
 8029958:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 802995a:	687b      	ldr	r3, [r7, #4]
 802995c:	4618      	mov	r0, r3
 802995e:	370c      	adds	r7, #12
 8029960:	46bd      	mov	sp, r7
 8029962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029966:	4770      	bx	lr

08029968 <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 8029968:	b580      	push	{r7, lr}
 802996a:	b082      	sub	sp, #8
 802996c:	af00      	add	r7, sp, #0
 802996e:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8029970:	6878      	ldr	r0, [r7, #4]
 8029972:	f7f7 fbe7 	bl	8021144 <_ZN8ResponceD1Ev>
    }
 8029976:	bf00      	nop
 8029978:	3708      	adds	r7, #8
 802997a:	46bd      	mov	sp, r7
 802997c:	bd80      	pop	{r7, pc}

0802997e <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 802997e:	b480      	push	{r7}
 8029980:	b083      	sub	sp, #12
 8029982:	af00      	add	r7, sp, #0
 8029984:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029986:	687b      	ldr	r3, [r7, #4]
 8029988:	4618      	mov	r0, r3
 802998a:	370c      	adds	r7, #12
 802998c:	46bd      	mov	sp, r7
 802998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029992:	4770      	bx	lr

08029994 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8029994:	b580      	push	{r7, lr}
 8029996:	b084      	sub	sp, #16
 8029998:	af00      	add	r7, sp, #0
 802999a:	60f8      	str	r0, [r7, #12]
 802999c:	60b9      	str	r1, [r7, #8]
 802999e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80299a0:	687a      	ldr	r2, [r7, #4]
 80299a2:	68b9      	ldr	r1, [r7, #8]
 80299a4:	68f8      	ldr	r0, [r7, #12]
 80299a6:	f000 fa3a 	bl	8029e1e <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80299aa:	4603      	mov	r3, r0
 80299ac:	4618      	mov	r0, r3
 80299ae:	3710      	adds	r7, #16
 80299b0:	46bd      	mov	sp, r7
 80299b2:	bd80      	pop	{r7, pc}

080299b4 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80299b4:	b480      	push	{r7}
 80299b6:	b083      	sub	sp, #12
 80299b8:	af00      	add	r7, sp, #0
 80299ba:	6078      	str	r0, [r7, #4]
 80299bc:	6039      	str	r1, [r7, #0]
    { return __res; }
 80299be:	683b      	ldr	r3, [r7, #0]
 80299c0:	4618      	mov	r0, r3
 80299c2:	370c      	adds	r7, #12
 80299c4:	46bd      	mov	sp, r7
 80299c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299ca:	4770      	bx	lr

080299cc <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80299cc:	b580      	push	{r7, lr}
 80299ce:	b084      	sub	sp, #16
 80299d0:	af00      	add	r7, sp, #0
 80299d2:	60f8      	str	r0, [r7, #12]
 80299d4:	60b9      	str	r1, [r7, #8]
 80299d6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80299d8:	687a      	ldr	r2, [r7, #4]
 80299da:	68b9      	ldr	r1, [r7, #8]
 80299dc:	68f8      	ldr	r0, [r7, #12]
 80299de:	f000 fa2e 	bl	8029e3e <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80299e2:	4603      	mov	r3, r0
 80299e4:	4618      	mov	r0, r3
 80299e6:	3710      	adds	r7, #16
 80299e8:	46bd      	mov	sp, r7
 80299ea:	bd80      	pop	{r7, pc}

080299ec <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80299ec:	b580      	push	{r7, lr}
 80299ee:	b082      	sub	sp, #8
 80299f0:	af00      	add	r7, sp, #0
 80299f2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80299f4:	6878      	ldr	r0, [r7, #4]
 80299f6:	f000 f856 	bl	8029aa6 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 80299fa:	4603      	mov	r3, r0
 80299fc:	4618      	mov	r0, r3
 80299fe:	3708      	adds	r7, #8
 8029a00:	46bd      	mov	sp, r7
 8029a02:	bd80      	pop	{r7, pc}

08029a04 <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 8029a04:	b480      	push	{r7}
 8029a06:	b083      	sub	sp, #12
 8029a08:	af00      	add	r7, sp, #0
 8029a0a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029a0c:	687b      	ldr	r3, [r7, #4]
 8029a0e:	4618      	mov	r0, r3
 8029a10:	370c      	adds	r7, #12
 8029a12:	46bd      	mov	sp, r7
 8029a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a18:	4770      	bx	lr

08029a1a <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029a1a:	b5b0      	push	{r4, r5, r7, lr}
 8029a1c:	b084      	sub	sp, #16
 8029a1e:	af00      	add	r7, sp, #0
 8029a20:	60f8      	str	r0, [r7, #12]
 8029a22:	60b9      	str	r1, [r7, #8]
 8029a24:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029a26:	68f8      	ldr	r0, [r7, #12]
 8029a28:	f000 fa19 	bl	8029e5e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029a2c:	4604      	mov	r4, r0
 8029a2e:	68b8      	ldr	r0, [r7, #8]
 8029a30:	f000 fa15 	bl	8029e5e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029a34:	4605      	mov	r5, r0
 8029a36:	687b      	ldr	r3, [r7, #4]
 8029a38:	4618      	mov	r0, r3
 8029a3a:	f000 fa10 	bl	8029e5e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029a3e:	4603      	mov	r3, r0
 8029a40:	461a      	mov	r2, r3
 8029a42:	4629      	mov	r1, r5
 8029a44:	4620      	mov	r0, r4
 8029a46:	f000 fa15 	bl	8029e74 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8029a4a:	4602      	mov	r2, r0
 8029a4c:	1d3b      	adds	r3, r7, #4
 8029a4e:	4611      	mov	r1, r2
 8029a50:	4618      	mov	r0, r3
 8029a52:	f000 fa1f 	bl	8029e94 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8029a56:	4603      	mov	r3, r0
    }
 8029a58:	4618      	mov	r0, r3
 8029a5a:	3710      	adds	r7, #16
 8029a5c:	46bd      	mov	sp, r7
 8029a5e:	bdb0      	pop	{r4, r5, r7, pc}

08029a60 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8029a60:	b5b0      	push	{r4, r5, r7, lr}
 8029a62:	b084      	sub	sp, #16
 8029a64:	af00      	add	r7, sp, #0
 8029a66:	60f8      	str	r0, [r7, #12]
 8029a68:	60b9      	str	r1, [r7, #8]
 8029a6a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029a6c:	68f8      	ldr	r0, [r7, #12]
 8029a6e:	f000 f9f6 	bl	8029e5e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029a72:	4604      	mov	r4, r0
 8029a74:	68b8      	ldr	r0, [r7, #8]
 8029a76:	f000 f9f2 	bl	8029e5e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029a7a:	4605      	mov	r5, r0
 8029a7c:	687b      	ldr	r3, [r7, #4]
 8029a7e:	4618      	mov	r0, r3
 8029a80:	f000 f9ed 	bl	8029e5e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029a84:	4603      	mov	r3, r0
 8029a86:	461a      	mov	r2, r3
 8029a88:	4629      	mov	r1, r5
 8029a8a:	4620      	mov	r0, r4
 8029a8c:	f000 fa0e 	bl	8029eac <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8029a90:	4602      	mov	r2, r0
 8029a92:	1d3b      	adds	r3, r7, #4
 8029a94:	4611      	mov	r1, r2
 8029a96:	4618      	mov	r0, r3
 8029a98:	f000 f9fc 	bl	8029e94 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8029a9c:	4603      	mov	r3, r0
    }
 8029a9e:	4618      	mov	r0, r3
 8029aa0:	3710      	adds	r7, #16
 8029aa2:	46bd      	mov	sp, r7
 8029aa4:	bdb0      	pop	{r4, r5, r7, pc}

08029aa6 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029aa6:	b480      	push	{r7}
 8029aa8:	b083      	sub	sp, #12
 8029aaa:	af00      	add	r7, sp, #0
 8029aac:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029aae:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8029ab2:	4618      	mov	r0, r3
 8029ab4:	370c      	adds	r7, #12
 8029ab6:	46bd      	mov	sp, r7
 8029ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029abc:	4770      	bx	lr

08029abe <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8029abe:	b480      	push	{r7}
 8029ac0:	b083      	sub	sp, #12
 8029ac2:	af00      	add	r7, sp, #0
 8029ac4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8029ac6:	bf00      	nop
 8029ac8:	4618      	mov	r0, r3
 8029aca:	370c      	adds	r7, #12
 8029acc:	46bd      	mov	sp, r7
 8029ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ad2:	4770      	bx	lr

08029ad4 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8029ad4:	b580      	push	{r7, lr}
 8029ad6:	b084      	sub	sp, #16
 8029ad8:	af00      	add	r7, sp, #0
 8029ada:	60f8      	str	r0, [r7, #12]
 8029adc:	60b9      	str	r1, [r7, #8]
 8029ade:	607a      	str	r2, [r7, #4]
 8029ae0:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8029ae2:	68bb      	ldr	r3, [r7, #8]
 8029ae4:	2b00      	cmp	r3, #0
 8029ae6:	d101      	bne.n	8029aec <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8029ae8:	68fb      	ldr	r3, [r7, #12]
 8029aea:	e00a      	b.n	8029b02 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8029aec:	68fa      	ldr	r2, [r7, #12]
 8029aee:	68bb      	ldr	r3, [r7, #8]
 8029af0:	4413      	add	r3, r2
 8029af2:	687a      	ldr	r2, [r7, #4]
 8029af4:	4619      	mov	r1, r3
 8029af6:	68f8      	ldr	r0, [r7, #12]
 8029af8:	f000 f9e8 	bl	8029ecc <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8029afc:	68fa      	ldr	r2, [r7, #12]
 8029afe:	68bb      	ldr	r3, [r7, #8]
 8029b00:	4413      	add	r3, r2
    }
 8029b02:	4618      	mov	r0, r3
 8029b04:	3710      	adds	r7, #16
 8029b06:	46bd      	mov	sp, r7
 8029b08:	bd80      	pop	{r7, pc}

08029b0a <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8029b0a:	b590      	push	{r4, r7, lr}
 8029b0c:	b085      	sub	sp, #20
 8029b0e:	af00      	add	r7, sp, #0
 8029b10:	60f8      	str	r0, [r7, #12]
 8029b12:	60b9      	str	r1, [r7, #8]
 8029b14:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029b16:	68f8      	ldr	r0, [r7, #12]
 8029b18:	f000 f9e7 	bl	8029eea <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8029b1c:	4604      	mov	r4, r0
 8029b1e:	68b8      	ldr	r0, [r7, #8]
 8029b20:	f000 f9e3 	bl	8029eea <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8029b24:	4603      	mov	r3, r0
 8029b26:	687a      	ldr	r2, [r7, #4]
 8029b28:	4619      	mov	r1, r3
 8029b2a:	4620      	mov	r0, r4
 8029b2c:	f000 f9ee 	bl	8029f0c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8029b30:	4603      	mov	r3, r0
    }
 8029b32:	4618      	mov	r0, r3
 8029b34:	3714      	adds	r7, #20
 8029b36:	46bd      	mov	sp, r7
 8029b38:	bd90      	pop	{r4, r7, pc}

08029b3a <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029b3a:	b5b0      	push	{r4, r5, r7, lr}
 8029b3c:	b084      	sub	sp, #16
 8029b3e:	af00      	add	r7, sp, #0
 8029b40:	60f8      	str	r0, [r7, #12]
 8029b42:	60b9      	str	r1, [r7, #8]
 8029b44:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029b46:	68f8      	ldr	r0, [r7, #12]
 8029b48:	f7fd f912 	bl	8026d70 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8029b4c:	4604      	mov	r4, r0
 8029b4e:	68b8      	ldr	r0, [r7, #8]
 8029b50:	f7fd f90e 	bl	8026d70 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8029b54:	4605      	mov	r5, r0
 8029b56:	687b      	ldr	r3, [r7, #4]
 8029b58:	4618      	mov	r0, r3
 8029b5a:	f7fd f955 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8029b5e:	4603      	mov	r3, r0
 8029b60:	461a      	mov	r2, r3
 8029b62:	4629      	mov	r1, r5
 8029b64:	4620      	mov	r0, r4
 8029b66:	f7fd f91f 	bl	8026da8 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8029b6a:	4602      	mov	r2, r0
 8029b6c:	1d3b      	adds	r3, r7, #4
 8029b6e:	4611      	mov	r1, r2
 8029b70:	4618      	mov	r0, r3
 8029b72:	f7fd f964 	bl	8026e3e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8029b76:	4603      	mov	r3, r0
    }
 8029b78:	4618      	mov	r0, r3
 8029b7a:	3710      	adds	r7, #16
 8029b7c:	46bd      	mov	sp, r7
 8029b7e:	bdb0      	pop	{r4, r5, r7, pc}

08029b80 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8029b80:	b580      	push	{r7, lr}
 8029b82:	b084      	sub	sp, #16
 8029b84:	af00      	add	r7, sp, #0
 8029b86:	60f8      	str	r0, [r7, #12]
 8029b88:	60b9      	str	r1, [r7, #8]
 8029b8a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8029b8c:	687a      	ldr	r2, [r7, #4]
 8029b8e:	68b9      	ldr	r1, [r7, #8]
 8029b90:	68f8      	ldr	r0, [r7, #12]
 8029b92:	f000 f9df 	bl	8029f54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8029b96:	4603      	mov	r3, r0
    }
 8029b98:	4618      	mov	r0, r3
 8029b9a:	3710      	adds	r7, #16
 8029b9c:	46bd      	mov	sp, r7
 8029b9e:	bd80      	pop	{r7, pc}

08029ba0 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8029ba0:	b480      	push	{r7}
 8029ba2:	b083      	sub	sp, #12
 8029ba4:	af00      	add	r7, sp, #0
 8029ba6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8029ba8:	687b      	ldr	r3, [r7, #4]
 8029baa:	4618      	mov	r0, r3
 8029bac:	370c      	adds	r7, #12
 8029bae:	46bd      	mov	sp, r7
 8029bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bb4:	4770      	bx	lr

08029bb6 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8029bb6:	b590      	push	{r4, r7, lr}
 8029bb8:	b083      	sub	sp, #12
 8029bba:	af00      	add	r7, sp, #0
 8029bbc:	6078      	str	r0, [r7, #4]
 8029bbe:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8029bc0:	687c      	ldr	r4, [r7, #4]
 8029bc2:	6838      	ldr	r0, [r7, #0]
 8029bc4:	f7ff ffec 	bl	8029ba0 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8029bc8:	4603      	mov	r3, r0
 8029bca:	4619      	mov	r1, r3
 8029bcc:	4620      	mov	r0, r4
 8029bce:	f7fb fa14 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029bd2:	687b      	ldr	r3, [r7, #4]
 8029bd4:	4618      	mov	r0, r3
 8029bd6:	370c      	adds	r7, #12
 8029bd8:	46bd      	mov	sp, r7
 8029bda:	bd90      	pop	{r4, r7, pc}

08029bdc <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8029bdc:	b580      	push	{r7, lr}
 8029bde:	b092      	sub	sp, #72	; 0x48
 8029be0:	af00      	add	r7, sp, #0
 8029be2:	60f8      	str	r0, [r7, #12]
 8029be4:	60b9      	str	r1, [r7, #8]
 8029be6:	607a      	str	r2, [r7, #4]
 8029be8:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8029bea:	2301      	movs	r3, #1
 8029bec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8029bf0:	f107 0314 	add.w	r3, r7, #20
 8029bf4:	68b9      	ldr	r1, [r7, #8]
 8029bf6:	4618      	mov	r0, r3
 8029bf8:	f7ff fcaf 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8029bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029c00:	6879      	ldr	r1, [r7, #4]
 8029c02:	4618      	mov	r0, r3
 8029c04:	f7ff fca9 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8029c08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8029c0c:	6839      	ldr	r1, [r7, #0]
 8029c0e:	4618      	mov	r0, r3
 8029c10:	f7fb f9f3 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029c14:	68f8      	ldr	r0, [r7, #12]
 8029c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8029c1a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8029c1e:	f107 0114 	add.w	r1, r7, #20
 8029c22:	f000 f9c1 	bl	8029fa8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8029c26:	68f8      	ldr	r0, [r7, #12]
 8029c28:	3748      	adds	r7, #72	; 0x48
 8029c2a:	46bd      	mov	sp, r7
 8029c2c:	bd80      	pop	{r7, pc}

08029c2e <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8029c2e:	b580      	push	{r7, lr}
 8029c30:	b090      	sub	sp, #64	; 0x40
 8029c32:	af00      	add	r7, sp, #0
 8029c34:	60f8      	str	r0, [r7, #12]
 8029c36:	60b9      	str	r1, [r7, #8]
 8029c38:	607a      	str	r2, [r7, #4]
 8029c3a:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8029c3c:	f107 0310 	add.w	r3, r7, #16
 8029c40:	68b9      	ldr	r1, [r7, #8]
 8029c42:	4618      	mov	r0, r3
 8029c44:	f7fb f9d9 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029c48:	f107 0320 	add.w	r3, r7, #32
 8029c4c:	6879      	ldr	r1, [r7, #4]
 8029c4e:	4618      	mov	r0, r3
 8029c50:	f7fb f9d3 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029c58:	6839      	ldr	r1, [r7, #0]
 8029c5a:	4618      	mov	r0, r3
 8029c5c:	f7fb f9cd 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029c60:	68f8      	ldr	r0, [r7, #12]
 8029c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029c66:	f107 0220 	add.w	r2, r7, #32
 8029c6a:	f107 0110 	add.w	r1, r7, #16
 8029c6e:	f000 f9c1 	bl	8029ff4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8029c72:	68f8      	ldr	r0, [r7, #12]
 8029c74:	3740      	adds	r7, #64	; 0x40
 8029c76:	46bd      	mov	sp, r7
 8029c78:	bd80      	pop	{r7, pc}

08029c7a <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8029c7a:	b580      	push	{r7, lr}
 8029c7c:	b090      	sub	sp, #64	; 0x40
 8029c7e:	af00      	add	r7, sp, #0
 8029c80:	60f8      	str	r0, [r7, #12]
 8029c82:	60b9      	str	r1, [r7, #8]
 8029c84:	607a      	str	r2, [r7, #4]
 8029c86:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8029c88:	f107 0310 	add.w	r3, r7, #16
 8029c8c:	68b9      	ldr	r1, [r7, #8]
 8029c8e:	4618      	mov	r0, r3
 8029c90:	f7fb f9b3 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029c94:	f107 0320 	add.w	r3, r7, #32
 8029c98:	6879      	ldr	r1, [r7, #4]
 8029c9a:	4618      	mov	r0, r3
 8029c9c:	f7fb f9ad 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029ca4:	6839      	ldr	r1, [r7, #0]
 8029ca6:	4618      	mov	r0, r3
 8029ca8:	f7fb f9a7 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029cac:	68f8      	ldr	r0, [r7, #12]
 8029cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029cb2:	f107 0220 	add.w	r2, r7, #32
 8029cb6:	f107 0110 	add.w	r1, r7, #16
 8029cba:	f000 fa16 	bl	802a0ea <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8029cbe:	68f8      	ldr	r0, [r7, #12]
 8029cc0:	3740      	adds	r7, #64	; 0x40
 8029cc2:	46bd      	mov	sp, r7
 8029cc4:	bd80      	pop	{r7, pc}

08029cc6 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8029cc6:	b480      	push	{r7}
 8029cc8:	b083      	sub	sp, #12
 8029cca:	af00      	add	r7, sp, #0
 8029ccc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029cce:	687b      	ldr	r3, [r7, #4]
 8029cd0:	4618      	mov	r0, r3
 8029cd2:	370c      	adds	r7, #12
 8029cd4:	46bd      	mov	sp, r7
 8029cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cda:	4770      	bx	lr

08029cdc <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8029cdc:	b580      	push	{r7, lr}
 8029cde:	b084      	sub	sp, #16
 8029ce0:	af00      	add	r7, sp, #0
 8029ce2:	60f8      	str	r0, [r7, #12]
 8029ce4:	60b9      	str	r1, [r7, #8]
 8029ce6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8029ce8:	687a      	ldr	r2, [r7, #4]
 8029cea:	68b9      	ldr	r1, [r7, #8]
 8029cec:	68f8      	ldr	r0, [r7, #12]
 8029cee:	f000 fa77 	bl	802a1e0 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8029cf2:	4603      	mov	r3, r0
 8029cf4:	4618      	mov	r0, r3
 8029cf6:	3710      	adds	r7, #16
 8029cf8:	46bd      	mov	sp, r7
 8029cfa:	bd80      	pop	{r7, pc}

08029cfc <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8029cfc:	b480      	push	{r7}
 8029cfe:	b083      	sub	sp, #12
 8029d00:	af00      	add	r7, sp, #0
 8029d02:	6078      	str	r0, [r7, #4]
 8029d04:	6039      	str	r1, [r7, #0]
    { return __res; }
 8029d06:	683b      	ldr	r3, [r7, #0]
 8029d08:	4618      	mov	r0, r3
 8029d0a:	370c      	adds	r7, #12
 8029d0c:	46bd      	mov	sp, r7
 8029d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d12:	4770      	bx	lr

08029d14 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8029d14:	b580      	push	{r7, lr}
 8029d16:	b084      	sub	sp, #16
 8029d18:	af00      	add	r7, sp, #0
 8029d1a:	60f8      	str	r0, [r7, #12]
 8029d1c:	60b9      	str	r1, [r7, #8]
 8029d1e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8029d20:	687a      	ldr	r2, [r7, #4]
 8029d22:	68b9      	ldr	r1, [r7, #8]
 8029d24:	68f8      	ldr	r0, [r7, #12]
 8029d26:	f000 fa6b 	bl	802a200 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8029d2a:	4603      	mov	r3, r0
 8029d2c:	4618      	mov	r0, r3
 8029d2e:	3710      	adds	r7, #16
 8029d30:	46bd      	mov	sp, r7
 8029d32:	bd80      	pop	{r7, pc}

08029d34 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8029d34:	b580      	push	{r7, lr}
 8029d36:	b082      	sub	sp, #8
 8029d38:	af00      	add	r7, sp, #0
 8029d3a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8029d3c:	6878      	ldr	r0, [r7, #4]
 8029d3e:	f000 f856 	bl	8029dee <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8029d42:	4603      	mov	r3, r0
 8029d44:	4618      	mov	r0, r3
 8029d46:	3708      	adds	r7, #8
 8029d48:	46bd      	mov	sp, r7
 8029d4a:	bd80      	pop	{r7, pc}

08029d4c <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 8029d4c:	b480      	push	{r7}
 8029d4e:	b083      	sub	sp, #12
 8029d50:	af00      	add	r7, sp, #0
 8029d52:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029d54:	687b      	ldr	r3, [r7, #4]
 8029d56:	4618      	mov	r0, r3
 8029d58:	370c      	adds	r7, #12
 8029d5a:	46bd      	mov	sp, r7
 8029d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d60:	4770      	bx	lr

08029d62 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029d62:	b5b0      	push	{r4, r5, r7, lr}
 8029d64:	b084      	sub	sp, #16
 8029d66:	af00      	add	r7, sp, #0
 8029d68:	60f8      	str	r0, [r7, #12]
 8029d6a:	60b9      	str	r1, [r7, #8]
 8029d6c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029d6e:	68f8      	ldr	r0, [r7, #12]
 8029d70:	f000 fa56 	bl	802a220 <_ZSt12__niter_baseIPPjET_S2_>
 8029d74:	4604      	mov	r4, r0
 8029d76:	68b8      	ldr	r0, [r7, #8]
 8029d78:	f000 fa52 	bl	802a220 <_ZSt12__niter_baseIPPjET_S2_>
 8029d7c:	4605      	mov	r5, r0
 8029d7e:	687b      	ldr	r3, [r7, #4]
 8029d80:	4618      	mov	r0, r3
 8029d82:	f000 fa4d 	bl	802a220 <_ZSt12__niter_baseIPPjET_S2_>
 8029d86:	4603      	mov	r3, r0
 8029d88:	461a      	mov	r2, r3
 8029d8a:	4629      	mov	r1, r5
 8029d8c:	4620      	mov	r0, r4
 8029d8e:	f000 fa52 	bl	802a236 <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8029d92:	4602      	mov	r2, r0
 8029d94:	1d3b      	adds	r3, r7, #4
 8029d96:	4611      	mov	r1, r2
 8029d98:	4618      	mov	r0, r3
 8029d9a:	f000 fa5c 	bl	802a256 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8029d9e:	4603      	mov	r3, r0
    }
 8029da0:	4618      	mov	r0, r3
 8029da2:	3710      	adds	r7, #16
 8029da4:	46bd      	mov	sp, r7
 8029da6:	bdb0      	pop	{r4, r5, r7, pc}

08029da8 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8029da8:	b5b0      	push	{r4, r5, r7, lr}
 8029daa:	b084      	sub	sp, #16
 8029dac:	af00      	add	r7, sp, #0
 8029dae:	60f8      	str	r0, [r7, #12]
 8029db0:	60b9      	str	r1, [r7, #8]
 8029db2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029db4:	68f8      	ldr	r0, [r7, #12]
 8029db6:	f000 fa33 	bl	802a220 <_ZSt12__niter_baseIPPjET_S2_>
 8029dba:	4604      	mov	r4, r0
 8029dbc:	68b8      	ldr	r0, [r7, #8]
 8029dbe:	f000 fa2f 	bl	802a220 <_ZSt12__niter_baseIPPjET_S2_>
 8029dc2:	4605      	mov	r5, r0
 8029dc4:	687b      	ldr	r3, [r7, #4]
 8029dc6:	4618      	mov	r0, r3
 8029dc8:	f000 fa2a 	bl	802a220 <_ZSt12__niter_baseIPPjET_S2_>
 8029dcc:	4603      	mov	r3, r0
 8029dce:	461a      	mov	r2, r3
 8029dd0:	4629      	mov	r1, r5
 8029dd2:	4620      	mov	r0, r4
 8029dd4:	f000 fa4b 	bl	802a26e <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8029dd8:	4602      	mov	r2, r0
 8029dda:	1d3b      	adds	r3, r7, #4
 8029ddc:	4611      	mov	r1, r2
 8029dde:	4618      	mov	r0, r3
 8029de0:	f000 fa39 	bl	802a256 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8029de4:	4603      	mov	r3, r0
    }
 8029de6:	4618      	mov	r0, r3
 8029de8:	3710      	adds	r7, #16
 8029dea:	46bd      	mov	sp, r7
 8029dec:	bdb0      	pop	{r4, r5, r7, pc}

08029dee <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029dee:	b480      	push	{r7}
 8029df0:	b083      	sub	sp, #12
 8029df2:	af00      	add	r7, sp, #0
 8029df4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029df6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8029dfa:	4618      	mov	r0, r3
 8029dfc:	370c      	adds	r7, #12
 8029dfe:	46bd      	mov	sp, r7
 8029e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e04:	4770      	bx	lr

08029e06 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029e06:	b480      	push	{r7}
 8029e08:	b083      	sub	sp, #12
 8029e0a:	af00      	add	r7, sp, #0
 8029e0c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029e0e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8029e12:	4618      	mov	r0, r3
 8029e14:	370c      	adds	r7, #12
 8029e16:	46bd      	mov	sp, r7
 8029e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e1c:	4770      	bx	lr

08029e1e <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8029e1e:	b580      	push	{r7, lr}
 8029e20:	b084      	sub	sp, #16
 8029e22:	af00      	add	r7, sp, #0
 8029e24:	60f8      	str	r0, [r7, #12]
 8029e26:	60b9      	str	r1, [r7, #8]
 8029e28:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8029e2a:	687a      	ldr	r2, [r7, #4]
 8029e2c:	68b9      	ldr	r1, [r7, #8]
 8029e2e:	68f8      	ldr	r0, [r7, #12]
 8029e30:	f000 fa2d 	bl	802a28e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 8029e34:	4603      	mov	r3, r0
    }
 8029e36:	4618      	mov	r0, r3
 8029e38:	3710      	adds	r7, #16
 8029e3a:	46bd      	mov	sp, r7
 8029e3c:	bd80      	pop	{r7, pc}

08029e3e <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8029e3e:	b580      	push	{r7, lr}
 8029e40:	b084      	sub	sp, #16
 8029e42:	af00      	add	r7, sp, #0
 8029e44:	60f8      	str	r0, [r7, #12]
 8029e46:	60b9      	str	r1, [r7, #8]
 8029e48:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8029e4a:	687a      	ldr	r2, [r7, #4]
 8029e4c:	68b9      	ldr	r1, [r7, #8]
 8029e4e:	68f8      	ldr	r0, [r7, #12]
 8029e50:	f000 fa3a 	bl	802a2c8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 8029e54:	4603      	mov	r3, r0
    }
 8029e56:	4618      	mov	r0, r3
 8029e58:	3710      	adds	r7, #16
 8029e5a:	46bd      	mov	sp, r7
 8029e5c:	bd80      	pop	{r7, pc}

08029e5e <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 8029e5e:	b480      	push	{r7}
 8029e60:	b083      	sub	sp, #12
 8029e62:	af00      	add	r7, sp, #0
 8029e64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029e66:	687b      	ldr	r3, [r7, #4]
 8029e68:	4618      	mov	r0, r3
 8029e6a:	370c      	adds	r7, #12
 8029e6c:	46bd      	mov	sp, r7
 8029e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e72:	4770      	bx	lr

08029e74 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8029e74:	b580      	push	{r7, lr}
 8029e76:	b084      	sub	sp, #16
 8029e78:	af00      	add	r7, sp, #0
 8029e7a:	60f8      	str	r0, [r7, #12]
 8029e7c:	60b9      	str	r1, [r7, #8]
 8029e7e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8029e80:	687a      	ldr	r2, [r7, #4]
 8029e82:	68b9      	ldr	r1, [r7, #8]
 8029e84:	68f8      	ldr	r0, [r7, #12]
 8029e86:	f000 fa41 	bl	802a30c <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8029e8a:	4603      	mov	r3, r0
 8029e8c:	4618      	mov	r0, r3
 8029e8e:	3710      	adds	r7, #16
 8029e90:	46bd      	mov	sp, r7
 8029e92:	bd80      	pop	{r7, pc}

08029e94 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8029e94:	b480      	push	{r7}
 8029e96:	b083      	sub	sp, #12
 8029e98:	af00      	add	r7, sp, #0
 8029e9a:	6078      	str	r0, [r7, #4]
 8029e9c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8029e9e:	683b      	ldr	r3, [r7, #0]
 8029ea0:	4618      	mov	r0, r3
 8029ea2:	370c      	adds	r7, #12
 8029ea4:	46bd      	mov	sp, r7
 8029ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029eaa:	4770      	bx	lr

08029eac <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8029eac:	b580      	push	{r7, lr}
 8029eae:	b084      	sub	sp, #16
 8029eb0:	af00      	add	r7, sp, #0
 8029eb2:	60f8      	str	r0, [r7, #12]
 8029eb4:	60b9      	str	r1, [r7, #8]
 8029eb6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8029eb8:	687a      	ldr	r2, [r7, #4]
 8029eba:	68b9      	ldr	r1, [r7, #8]
 8029ebc:	68f8      	ldr	r0, [r7, #12]
 8029ebe:	f000 fa35 	bl	802a32c <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8029ec2:	4603      	mov	r3, r0
 8029ec4:	4618      	mov	r0, r3
 8029ec6:	3710      	adds	r7, #16
 8029ec8:	46bd      	mov	sp, r7
 8029eca:	bd80      	pop	{r7, pc}

08029ecc <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8029ecc:	b580      	push	{r7, lr}
 8029ece:	b084      	sub	sp, #16
 8029ed0:	af00      	add	r7, sp, #0
 8029ed2:	60f8      	str	r0, [r7, #12]
 8029ed4:	60b9      	str	r1, [r7, #8]
 8029ed6:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8029ed8:	687a      	ldr	r2, [r7, #4]
 8029eda:	68b9      	ldr	r1, [r7, #8]
 8029edc:	68f8      	ldr	r0, [r7, #12]
 8029ede:	f000 fa35 	bl	802a34c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8029ee2:	bf00      	nop
 8029ee4:	3710      	adds	r7, #16
 8029ee6:	46bd      	mov	sp, r7
 8029ee8:	bd80      	pop	{r7, pc}

08029eea <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8029eea:	b580      	push	{r7, lr}
 8029eec:	b082      	sub	sp, #8
 8029eee:	af00      	add	r7, sp, #0
 8029ef0:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8029ef2:	1d3b      	adds	r3, r7, #4
 8029ef4:	4618      	mov	r0, r3
 8029ef6:	f000 fa43 	bl	802a380 <_ZNKSt13move_iteratorIPhE4baseEv>
 8029efa:	4603      	mov	r3, r0
 8029efc:	4618      	mov	r0, r3
 8029efe:	f7fb fed6 	bl	8025cae <_ZSt12__miter_baseIPhET_S1_>
 8029f02:	4603      	mov	r3, r0
 8029f04:	4618      	mov	r0, r3
 8029f06:	3708      	adds	r7, #8
 8029f08:	46bd      	mov	sp, r7
 8029f0a:	bd80      	pop	{r7, pc}

08029f0c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029f0c:	b5b0      	push	{r4, r5, r7, lr}
 8029f0e:	b084      	sub	sp, #16
 8029f10:	af00      	add	r7, sp, #0
 8029f12:	60f8      	str	r0, [r7, #12]
 8029f14:	60b9      	str	r1, [r7, #8]
 8029f16:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029f18:	68f8      	ldr	r0, [r7, #12]
 8029f1a:	f7fc ff75 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8029f1e:	4604      	mov	r4, r0
 8029f20:	68b8      	ldr	r0, [r7, #8]
 8029f22:	f7fc ff71 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8029f26:	4605      	mov	r5, r0
 8029f28:	687b      	ldr	r3, [r7, #4]
 8029f2a:	4618      	mov	r0, r3
 8029f2c:	f7fc ff6c 	bl	8026e08 <_ZSt12__niter_baseIPhET_S1_>
 8029f30:	4603      	mov	r3, r0
 8029f32:	461a      	mov	r2, r3
 8029f34:	4629      	mov	r1, r5
 8029f36:	4620      	mov	r0, r4
 8029f38:	f000 fa2e 	bl	802a398 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 8029f3c:	4602      	mov	r2, r0
 8029f3e:	1d3b      	adds	r3, r7, #4
 8029f40:	4611      	mov	r1, r2
 8029f42:	4618      	mov	r0, r3
 8029f44:	f7fc ff7b 	bl	8026e3e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8029f48:	4603      	mov	r3, r0
    }
 8029f4a:	4618      	mov	r0, r3
 8029f4c:	3710      	adds	r7, #16
 8029f4e:	46bd      	mov	sp, r7
 8029f50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08029f54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8029f54:	b580      	push	{r7, lr}
 8029f56:	b086      	sub	sp, #24
 8029f58:	af00      	add	r7, sp, #0
 8029f5a:	60f8      	str	r0, [r7, #12]
 8029f5c:	60b9      	str	r1, [r7, #8]
 8029f5e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8029f60:	68ba      	ldr	r2, [r7, #8]
 8029f62:	68fb      	ldr	r3, [r7, #12]
 8029f64:	1ad3      	subs	r3, r2, r3
 8029f66:	109b      	asrs	r3, r3, #2
 8029f68:	4a0e      	ldr	r2, [pc, #56]	; (8029fa4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8029f6a:	fb02 f303 	mul.w	r3, r2, r3
 8029f6e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8029f70:	697b      	ldr	r3, [r7, #20]
 8029f72:	2b00      	cmp	r3, #0
 8029f74:	d009      	beq.n	8029f8a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8029f76:	697a      	ldr	r2, [r7, #20]
 8029f78:	4613      	mov	r3, r2
 8029f7a:	009b      	lsls	r3, r3, #2
 8029f7c:	4413      	add	r3, r2
 8029f7e:	009b      	lsls	r3, r3, #2
 8029f80:	461a      	mov	r2, r3
 8029f82:	68f9      	ldr	r1, [r7, #12]
 8029f84:	6878      	ldr	r0, [r7, #4]
 8029f86:	f015 f845 	bl	803f014 <memmove>
	  return __result + _Num;
 8029f8a:	697a      	ldr	r2, [r7, #20]
 8029f8c:	4613      	mov	r3, r2
 8029f8e:	009b      	lsls	r3, r3, #2
 8029f90:	4413      	add	r3, r2
 8029f92:	009b      	lsls	r3, r3, #2
 8029f94:	461a      	mov	r2, r3
 8029f96:	687b      	ldr	r3, [r7, #4]
 8029f98:	4413      	add	r3, r2
	}
 8029f9a:	4618      	mov	r0, r3
 8029f9c:	3718      	adds	r7, #24
 8029f9e:	46bd      	mov	sp, r7
 8029fa0:	bd80      	pop	{r7, pc}
 8029fa2:	bf00      	nop
 8029fa4:	cccccccd 	.word	0xcccccccd

08029fa8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8029fa8:	b580      	push	{r7, lr}
 8029faa:	b090      	sub	sp, #64	; 0x40
 8029fac:	af00      	add	r7, sp, #0
 8029fae:	60f8      	str	r0, [r7, #12]
 8029fb0:	60b9      	str	r1, [r7, #8]
 8029fb2:	607a      	str	r2, [r7, #4]
 8029fb4:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8029fb6:	f107 0310 	add.w	r3, r7, #16
 8029fba:	68b9      	ldr	r1, [r7, #8]
 8029fbc:	4618      	mov	r0, r3
 8029fbe:	f7ff facc 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8029fc2:	f107 0320 	add.w	r3, r7, #32
 8029fc6:	6879      	ldr	r1, [r7, #4]
 8029fc8:	4618      	mov	r0, r3
 8029fca:	f7ff fac6 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8029fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029fd2:	6839      	ldr	r1, [r7, #0]
 8029fd4:	4618      	mov	r0, r3
 8029fd6:	f7fb f810 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029fda:	68f8      	ldr	r0, [r7, #12]
 8029fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029fe0:	f107 0220 	add.w	r2, r7, #32
 8029fe4:	f107 0110 	add.w	r1, r7, #16
 8029fe8:	f000 f9e6 	bl	802a3b8 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8029fec:	68f8      	ldr	r0, [r7, #12]
 8029fee:	3740      	adds	r7, #64	; 0x40
 8029ff0:	46bd      	mov	sp, r7
 8029ff2:	bd80      	pop	{r7, pc}

08029ff4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8029ff4:	b5b0      	push	{r4, r5, r7, lr}
 8029ff6:	b09e      	sub	sp, #120	; 0x78
 8029ff8:	af00      	add	r7, sp, #0
 8029ffa:	60f8      	str	r0, [r7, #12]
 8029ffc:	60b9      	str	r1, [r7, #8]
 8029ffe:	607a      	str	r2, [r7, #4]
 802a000:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802a002:	68bb      	ldr	r3, [r7, #8]
 802a004:	68da      	ldr	r2, [r3, #12]
 802a006:	687b      	ldr	r3, [r7, #4]
 802a008:	68db      	ldr	r3, [r3, #12]
 802a00a:	429a      	cmp	r2, r3
 802a00c:	d058      	beq.n	802a0c0 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 802a00e:	68bb      	ldr	r3, [r7, #8]
 802a010:	681c      	ldr	r4, [r3, #0]
 802a012:	68bb      	ldr	r3, [r7, #8]
 802a014:	689d      	ldr	r5, [r3, #8]
 802a016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a01a:	6839      	ldr	r1, [r7, #0]
 802a01c:	4618      	mov	r0, r3
 802a01e:	f7fa ffec 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a022:	f107 0014 	add.w	r0, r7, #20
 802a026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a02a:	462a      	mov	r2, r5
 802a02c:	4621      	mov	r1, r4
 802a02e:	f000 f9f9 	bl	802a424 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a032:	683b      	ldr	r3, [r7, #0]
 802a034:	461c      	mov	r4, r3
 802a036:	f107 0314 	add.w	r3, r7, #20
 802a03a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a03c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802a040:	68bb      	ldr	r3, [r7, #8]
 802a042:	68db      	ldr	r3, [r3, #12]
 802a044:	3304      	adds	r3, #4
 802a046:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 802a048:	687b      	ldr	r3, [r7, #4]
 802a04a:	68db      	ldr	r3, [r3, #12]
 802a04c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802a04e:	429a      	cmp	r2, r3
 802a050:	d024      	beq.n	802a09c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 802a052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a054:	681d      	ldr	r5, [r3, #0]
 802a056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a058:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 802a05a:	f7fc f830 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802a05e:	4602      	mov	r2, r0
 802a060:	4613      	mov	r3, r2
 802a062:	009b      	lsls	r3, r3, #2
 802a064:	4413      	add	r3, r2
 802a066:	009b      	lsls	r3, r3, #2
	    __result
 802a068:	441c      	add	r4, r3
 802a06a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a06e:	6839      	ldr	r1, [r7, #0]
 802a070:	4618      	mov	r0, r3
 802a072:	f7fa ffc2 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a076:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802a07a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a07e:	4622      	mov	r2, r4
 802a080:	4629      	mov	r1, r5
 802a082:	f000 f9cf 	bl	802a424 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a086:	683b      	ldr	r3, [r7, #0]
 802a088:	461c      	mov	r4, r3
 802a08a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a08e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802a094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a096:	3304      	adds	r3, #4
 802a098:	677b      	str	r3, [r7, #116]	; 0x74
 802a09a:	e7d5      	b.n	802a048 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 802a09c:	687b      	ldr	r3, [r7, #4]
 802a09e:	685c      	ldr	r4, [r3, #4]
 802a0a0:	687b      	ldr	r3, [r7, #4]
 802a0a2:	681d      	ldr	r5, [r3, #0]
 802a0a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a0a8:	6839      	ldr	r1, [r7, #0]
 802a0aa:	4618      	mov	r0, r3
 802a0ac:	f7fa ffa5 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a0b0:	68f8      	ldr	r0, [r7, #12]
 802a0b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a0b6:	462a      	mov	r2, r5
 802a0b8:	4621      	mov	r1, r4
 802a0ba:	f000 f9b3 	bl	802a424 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a0be:	e010      	b.n	802a0e2 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 802a0c0:	68bb      	ldr	r3, [r7, #8]
 802a0c2:	681c      	ldr	r4, [r3, #0]
 802a0c4:	687b      	ldr	r3, [r7, #4]
 802a0c6:	681d      	ldr	r5, [r3, #0]
 802a0c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a0cc:	6839      	ldr	r1, [r7, #0]
 802a0ce:	4618      	mov	r0, r3
 802a0d0:	f7fa ff93 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a0d4:	68f8      	ldr	r0, [r7, #12]
 802a0d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a0da:	462a      	mov	r2, r5
 802a0dc:	4621      	mov	r1, r4
 802a0de:	f000 f9a1 	bl	802a424 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a0e2:	68f8      	ldr	r0, [r7, #12]
 802a0e4:	3778      	adds	r7, #120	; 0x78
 802a0e6:	46bd      	mov	sp, r7
 802a0e8:	bdb0      	pop	{r4, r5, r7, pc}

0802a0ea <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 802a0ea:	b5b0      	push	{r4, r5, r7, lr}
 802a0ec:	b09e      	sub	sp, #120	; 0x78
 802a0ee:	af00      	add	r7, sp, #0
 802a0f0:	60f8      	str	r0, [r7, #12]
 802a0f2:	60b9      	str	r1, [r7, #8]
 802a0f4:	607a      	str	r2, [r7, #4]
 802a0f6:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802a0f8:	68bb      	ldr	r3, [r7, #8]
 802a0fa:	68da      	ldr	r2, [r3, #12]
 802a0fc:	687b      	ldr	r3, [r7, #4]
 802a0fe:	68db      	ldr	r3, [r3, #12]
 802a100:	429a      	cmp	r2, r3
 802a102:	d058      	beq.n	802a1b6 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 802a104:	687b      	ldr	r3, [r7, #4]
 802a106:	685c      	ldr	r4, [r3, #4]
 802a108:	687b      	ldr	r3, [r7, #4]
 802a10a:	681d      	ldr	r5, [r3, #0]
 802a10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a110:	6839      	ldr	r1, [r7, #0]
 802a112:	4618      	mov	r0, r3
 802a114:	f7fa ff71 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a118:	f107 0014 	add.w	r0, r7, #20
 802a11c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a120:	462a      	mov	r2, r5
 802a122:	4621      	mov	r1, r4
 802a124:	f000 f9d0 	bl	802a4c8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a128:	683b      	ldr	r3, [r7, #0]
 802a12a:	461c      	mov	r4, r3
 802a12c:	f107 0314 	add.w	r3, r7, #20
 802a130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802a136:	687b      	ldr	r3, [r7, #4]
 802a138:	68db      	ldr	r3, [r3, #12]
 802a13a:	3b04      	subs	r3, #4
 802a13c:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 802a13e:	68bb      	ldr	r3, [r7, #8]
 802a140:	68db      	ldr	r3, [r3, #12]
 802a142:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802a144:	429a      	cmp	r2, r3
 802a146:	d024      	beq.n	802a192 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802a148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a14a:	681d      	ldr	r5, [r3, #0]
 802a14c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a14e:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 802a150:	f7fb ffb5 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802a154:	4602      	mov	r2, r0
 802a156:	4613      	mov	r3, r2
 802a158:	009b      	lsls	r3, r3, #2
 802a15a:	4413      	add	r3, r2
 802a15c:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802a15e:	441c      	add	r4, r3
 802a160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a164:	6839      	ldr	r1, [r7, #0]
 802a166:	4618      	mov	r0, r3
 802a168:	f7fa ff47 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a16c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802a170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a174:	4622      	mov	r2, r4
 802a176:	4629      	mov	r1, r5
 802a178:	f000 f9a6 	bl	802a4c8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a17c:	683b      	ldr	r3, [r7, #0]
 802a17e:	461c      	mov	r4, r3
 802a180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802a18a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a18c:	3b04      	subs	r3, #4
 802a18e:	677b      	str	r3, [r7, #116]	; 0x74
 802a190:	e7d5      	b.n	802a13e <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 802a192:	68bb      	ldr	r3, [r7, #8]
 802a194:	681c      	ldr	r4, [r3, #0]
 802a196:	68bb      	ldr	r3, [r7, #8]
 802a198:	689d      	ldr	r5, [r3, #8]
 802a19a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a19e:	6839      	ldr	r1, [r7, #0]
 802a1a0:	4618      	mov	r0, r3
 802a1a2:	f7fa ff2a 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a1a6:	68f8      	ldr	r0, [r7, #12]
 802a1a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a1ac:	462a      	mov	r2, r5
 802a1ae:	4621      	mov	r1, r4
 802a1b0:	f000 f98a 	bl	802a4c8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a1b4:	e010      	b.n	802a1d8 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 802a1b6:	68bb      	ldr	r3, [r7, #8]
 802a1b8:	681c      	ldr	r4, [r3, #0]
 802a1ba:	687b      	ldr	r3, [r7, #4]
 802a1bc:	681d      	ldr	r5, [r3, #0]
 802a1be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a1c2:	6839      	ldr	r1, [r7, #0]
 802a1c4:	4618      	mov	r0, r3
 802a1c6:	f7fa ff18 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a1ca:	68f8      	ldr	r0, [r7, #12]
 802a1cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a1d0:	462a      	mov	r2, r5
 802a1d2:	4621      	mov	r1, r4
 802a1d4:	f000 f978 	bl	802a4c8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a1d8:	68f8      	ldr	r0, [r7, #12]
 802a1da:	3778      	adds	r7, #120	; 0x78
 802a1dc:	46bd      	mov	sp, r7
 802a1de:	bdb0      	pop	{r4, r5, r7, pc}

0802a1e0 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a1e0:	b580      	push	{r7, lr}
 802a1e2:	b084      	sub	sp, #16
 802a1e4:	af00      	add	r7, sp, #0
 802a1e6:	60f8      	str	r0, [r7, #12]
 802a1e8:	60b9      	str	r1, [r7, #8]
 802a1ea:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a1ec:	687a      	ldr	r2, [r7, #4]
 802a1ee:	68b9      	ldr	r1, [r7, #8]
 802a1f0:	68f8      	ldr	r0, [r7, #12]
 802a1f2:	f000 f9cf 	bl	802a594 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802a1f6:	4603      	mov	r3, r0
    }
 802a1f8:	4618      	mov	r0, r3
 802a1fa:	3710      	adds	r7, #16
 802a1fc:	46bd      	mov	sp, r7
 802a1fe:	bd80      	pop	{r7, pc}

0802a200 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a200:	b580      	push	{r7, lr}
 802a202:	b084      	sub	sp, #16
 802a204:	af00      	add	r7, sp, #0
 802a206:	60f8      	str	r0, [r7, #12]
 802a208:	60b9      	str	r1, [r7, #8]
 802a20a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a20c:	687a      	ldr	r2, [r7, #4]
 802a20e:	68b9      	ldr	r1, [r7, #8]
 802a210:	68f8      	ldr	r0, [r7, #12]
 802a212:	f000 f9dc 	bl	802a5ce <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802a216:	4603      	mov	r3, r0
    }
 802a218:	4618      	mov	r0, r3
 802a21a:	3710      	adds	r7, #16
 802a21c:	46bd      	mov	sp, r7
 802a21e:	bd80      	pop	{r7, pc}

0802a220 <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 802a220:	b480      	push	{r7}
 802a222:	b083      	sub	sp, #12
 802a224:	af00      	add	r7, sp, #0
 802a226:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a228:	687b      	ldr	r3, [r7, #4]
 802a22a:	4618      	mov	r0, r3
 802a22c:	370c      	adds	r7, #12
 802a22e:	46bd      	mov	sp, r7
 802a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a234:	4770      	bx	lr

0802a236 <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a236:	b580      	push	{r7, lr}
 802a238:	b084      	sub	sp, #16
 802a23a:	af00      	add	r7, sp, #0
 802a23c:	60f8      	str	r0, [r7, #12]
 802a23e:	60b9      	str	r1, [r7, #8]
 802a240:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a242:	687a      	ldr	r2, [r7, #4]
 802a244:	68b9      	ldr	r1, [r7, #8]
 802a246:	68f8      	ldr	r0, [r7, #12]
 802a248:	f000 f9e3 	bl	802a612 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 802a24c:	4603      	mov	r3, r0
 802a24e:	4618      	mov	r0, r3
 802a250:	3710      	adds	r7, #16
 802a252:	46bd      	mov	sp, r7
 802a254:	bd80      	pop	{r7, pc}

0802a256 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802a256:	b480      	push	{r7}
 802a258:	b083      	sub	sp, #12
 802a25a:	af00      	add	r7, sp, #0
 802a25c:	6078      	str	r0, [r7, #4]
 802a25e:	6039      	str	r1, [r7, #0]
    { return __res; }
 802a260:	683b      	ldr	r3, [r7, #0]
 802a262:	4618      	mov	r0, r3
 802a264:	370c      	adds	r7, #12
 802a266:	46bd      	mov	sp, r7
 802a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a26c:	4770      	bx	lr

0802a26e <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802a26e:	b580      	push	{r7, lr}
 802a270:	b084      	sub	sp, #16
 802a272:	af00      	add	r7, sp, #0
 802a274:	60f8      	str	r0, [r7, #12]
 802a276:	60b9      	str	r1, [r7, #8]
 802a278:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802a27a:	687a      	ldr	r2, [r7, #4]
 802a27c:	68b9      	ldr	r1, [r7, #8]
 802a27e:	68f8      	ldr	r0, [r7, #12]
 802a280:	f000 f9d7 	bl	802a632 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 802a284:	4603      	mov	r3, r0
 802a286:	4618      	mov	r0, r3
 802a288:	3710      	adds	r7, #16
 802a28a:	46bd      	mov	sp, r7
 802a28c:	bd80      	pop	{r7, pc}

0802a28e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a28e:	b580      	push	{r7, lr}
 802a290:	b086      	sub	sp, #24
 802a292:	af00      	add	r7, sp, #0
 802a294:	60f8      	str	r0, [r7, #12]
 802a296:	60b9      	str	r1, [r7, #8]
 802a298:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a29a:	68ba      	ldr	r2, [r7, #8]
 802a29c:	68fb      	ldr	r3, [r7, #12]
 802a29e:	1ad3      	subs	r3, r2, r3
 802a2a0:	109b      	asrs	r3, r3, #2
 802a2a2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a2a4:	697b      	ldr	r3, [r7, #20]
 802a2a6:	2b00      	cmp	r3, #0
 802a2a8:	d006      	beq.n	802a2b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a2aa:	697b      	ldr	r3, [r7, #20]
 802a2ac:	009b      	lsls	r3, r3, #2
 802a2ae:	461a      	mov	r2, r3
 802a2b0:	68f9      	ldr	r1, [r7, #12]
 802a2b2:	6878      	ldr	r0, [r7, #4]
 802a2b4:	f014 feae 	bl	803f014 <memmove>
	  return __result + _Num;
 802a2b8:	697b      	ldr	r3, [r7, #20]
 802a2ba:	009b      	lsls	r3, r3, #2
 802a2bc:	687a      	ldr	r2, [r7, #4]
 802a2be:	4413      	add	r3, r2
	}
 802a2c0:	4618      	mov	r0, r3
 802a2c2:	3718      	adds	r7, #24
 802a2c4:	46bd      	mov	sp, r7
 802a2c6:	bd80      	pop	{r7, pc}

0802a2c8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a2c8:	b580      	push	{r7, lr}
 802a2ca:	b086      	sub	sp, #24
 802a2cc:	af00      	add	r7, sp, #0
 802a2ce:	60f8      	str	r0, [r7, #12]
 802a2d0:	60b9      	str	r1, [r7, #8]
 802a2d2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a2d4:	68ba      	ldr	r2, [r7, #8]
 802a2d6:	68fb      	ldr	r3, [r7, #12]
 802a2d8:	1ad3      	subs	r3, r2, r3
 802a2da:	109b      	asrs	r3, r3, #2
 802a2dc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a2de:	697b      	ldr	r3, [r7, #20]
 802a2e0:	2b00      	cmp	r3, #0
 802a2e2:	d00a      	beq.n	802a2fa <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802a2e4:	697b      	ldr	r3, [r7, #20]
 802a2e6:	009b      	lsls	r3, r3, #2
 802a2e8:	425b      	negs	r3, r3
 802a2ea:	687a      	ldr	r2, [r7, #4]
 802a2ec:	18d0      	adds	r0, r2, r3
 802a2ee:	697b      	ldr	r3, [r7, #20]
 802a2f0:	009b      	lsls	r3, r3, #2
 802a2f2:	461a      	mov	r2, r3
 802a2f4:	68f9      	ldr	r1, [r7, #12]
 802a2f6:	f014 fe8d 	bl	803f014 <memmove>
	  return __result - _Num;
 802a2fa:	697b      	ldr	r3, [r7, #20]
 802a2fc:	009b      	lsls	r3, r3, #2
 802a2fe:	425b      	negs	r3, r3
 802a300:	687a      	ldr	r2, [r7, #4]
 802a302:	4413      	add	r3, r2
	}
 802a304:	4618      	mov	r0, r3
 802a306:	3718      	adds	r7, #24
 802a308:	46bd      	mov	sp, r7
 802a30a:	bd80      	pop	{r7, pc}

0802a30c <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a30c:	b580      	push	{r7, lr}
 802a30e:	b084      	sub	sp, #16
 802a310:	af00      	add	r7, sp, #0
 802a312:	60f8      	str	r0, [r7, #12]
 802a314:	60b9      	str	r1, [r7, #8]
 802a316:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a318:	687a      	ldr	r2, [r7, #4]
 802a31a:	68b9      	ldr	r1, [r7, #8]
 802a31c:	68f8      	ldr	r0, [r7, #12]
 802a31e:	f000 f998 	bl	802a652 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 802a322:	4603      	mov	r3, r0
    }
 802a324:	4618      	mov	r0, r3
 802a326:	3710      	adds	r7, #16
 802a328:	46bd      	mov	sp, r7
 802a32a:	bd80      	pop	{r7, pc}

0802a32c <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a32c:	b580      	push	{r7, lr}
 802a32e:	b084      	sub	sp, #16
 802a330:	af00      	add	r7, sp, #0
 802a332:	60f8      	str	r0, [r7, #12]
 802a334:	60b9      	str	r1, [r7, #8]
 802a336:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a338:	687a      	ldr	r2, [r7, #4]
 802a33a:	68b9      	ldr	r1, [r7, #8]
 802a33c:	68f8      	ldr	r0, [r7, #12]
 802a33e:	f000 f9a5 	bl	802a68c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 802a342:	4603      	mov	r3, r0
    }
 802a344:	4618      	mov	r0, r3
 802a346:	3710      	adds	r7, #16
 802a348:	46bd      	mov	sp, r7
 802a34a:	bd80      	pop	{r7, pc}

0802a34c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 802a34c:	b580      	push	{r7, lr}
 802a34e:	b086      	sub	sp, #24
 802a350:	af00      	add	r7, sp, #0
 802a352:	60f8      	str	r0, [r7, #12]
 802a354:	60b9      	str	r1, [r7, #8]
 802a356:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 802a358:	687b      	ldr	r3, [r7, #4]
 802a35a:	781b      	ldrb	r3, [r3, #0]
 802a35c:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 802a35e:	68ba      	ldr	r2, [r7, #8]
 802a360:	68fb      	ldr	r3, [r7, #12]
 802a362:	1ad3      	subs	r3, r2, r3
 802a364:	613b      	str	r3, [r7, #16]
 802a366:	693b      	ldr	r3, [r7, #16]
 802a368:	2b00      	cmp	r3, #0
 802a36a:	d005      	beq.n	802a378 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 802a36c:	7dfb      	ldrb	r3, [r7, #23]
 802a36e:	693a      	ldr	r2, [r7, #16]
 802a370:	4619      	mov	r1, r3
 802a372:	68f8      	ldr	r0, [r7, #12]
 802a374:	f014 fe68 	bl	803f048 <memset>
    }
 802a378:	bf00      	nop
 802a37a:	3718      	adds	r7, #24
 802a37c:	46bd      	mov	sp, r7
 802a37e:	bd80      	pop	{r7, pc}

0802a380 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 802a380:	b480      	push	{r7}
 802a382:	b083      	sub	sp, #12
 802a384:	af00      	add	r7, sp, #0
 802a386:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 802a388:	687b      	ldr	r3, [r7, #4]
 802a38a:	681b      	ldr	r3, [r3, #0]
 802a38c:	4618      	mov	r0, r3
 802a38e:	370c      	adds	r7, #12
 802a390:	46bd      	mov	sp, r7
 802a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a396:	4770      	bx	lr

0802a398 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a398:	b580      	push	{r7, lr}
 802a39a:	b084      	sub	sp, #16
 802a39c:	af00      	add	r7, sp, #0
 802a39e:	60f8      	str	r0, [r7, #12]
 802a3a0:	60b9      	str	r1, [r7, #8]
 802a3a2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a3a4:	687a      	ldr	r2, [r7, #4]
 802a3a6:	68b9      	ldr	r1, [r7, #8]
 802a3a8:	68f8      	ldr	r0, [r7, #12]
 802a3aa:	f000 f991 	bl	802a6d0 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 802a3ae:	4603      	mov	r3, r0
 802a3b0:	4618      	mov	r0, r3
 802a3b2:	3710      	adds	r7, #16
 802a3b4:	46bd      	mov	sp, r7
 802a3b6:	bd80      	pop	{r7, pc}

0802a3b8 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 802a3b8:	b580      	push	{r7, lr}
 802a3ba:	b098      	sub	sp, #96	; 0x60
 802a3bc:	af00      	add	r7, sp, #0
 802a3be:	60f8      	str	r0, [r7, #12]
 802a3c0:	60b9      	str	r1, [r7, #8]
 802a3c2:	607a      	str	r2, [r7, #4]
 802a3c4:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802a3c6:	f107 0320 	add.w	r3, r7, #32
 802a3ca:	68b9      	ldr	r1, [r7, #8]
 802a3cc:	4618      	mov	r0, r3
 802a3ce:	f7ff f8c4 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a3d2:	f107 0310 	add.w	r3, r7, #16
 802a3d6:	f107 0220 	add.w	r2, r7, #32
 802a3da:	4611      	mov	r1, r2
 802a3dc:	4618      	mov	r0, r3
 802a3de:	f000 f987 	bl	802a6f0 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802a3e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802a3e6:	6879      	ldr	r1, [r7, #4]
 802a3e8:	4618      	mov	r0, r3
 802a3ea:	f7ff f8b6 	bl	802955a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a3ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a3f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802a3f6:	4611      	mov	r1, r2
 802a3f8:	4618      	mov	r0, r3
 802a3fa:	f000 f979 	bl	802a6f0 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802a3fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a402:	6839      	ldr	r1, [r7, #0]
 802a404:	4618      	mov	r0, r3
 802a406:	f7fa fdf8 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a40a:	68f8      	ldr	r0, [r7, #12]
 802a40c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a410:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a414:	f107 0110 	add.w	r1, r7, #16
 802a418:	f7ff f8e2 	bl	80295e0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802a41c:	68f8      	ldr	r0, [r7, #12]
 802a41e:	3760      	adds	r7, #96	; 0x60
 802a420:	46bd      	mov	sp, r7
 802a422:	bd80      	pop	{r7, pc}

0802a424 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 802a424:	b580      	push	{r7, lr}
 802a426:	b088      	sub	sp, #32
 802a428:	af00      	add	r7, sp, #0
 802a42a:	60f8      	str	r0, [r7, #12]
 802a42c:	60b9      	str	r1, [r7, #8]
 802a42e:	607a      	str	r2, [r7, #4]
 802a430:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 802a432:	687a      	ldr	r2, [r7, #4]
 802a434:	68bb      	ldr	r3, [r7, #8]
 802a436:	1ad3      	subs	r3, r2, r3
 802a438:	109b      	asrs	r3, r3, #2
 802a43a:	4a22      	ldr	r2, [pc, #136]	; (802a4c4 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802a43c:	fb02 f303 	mul.w	r3, r2, r3
 802a440:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802a442:	697b      	ldr	r3, [r7, #20]
 802a444:	2b00      	cmp	r3, #0
 802a446:	dd34      	ble.n	802a4b2 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 802a448:	683b      	ldr	r3, [r7, #0]
 802a44a:	689a      	ldr	r2, [r3, #8]
 802a44c:	683b      	ldr	r3, [r7, #0]
 802a44e:	681b      	ldr	r3, [r3, #0]
 802a450:	1ad3      	subs	r3, r2, r3
 802a452:	109b      	asrs	r3, r3, #2
 802a454:	4a1b      	ldr	r2, [pc, #108]	; (802a4c4 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802a456:	fb02 f303 	mul.w	r3, r2, r3
 802a45a:	61bb      	str	r3, [r7, #24]
 802a45c:	f107 0218 	add.w	r2, r7, #24
 802a460:	f107 0314 	add.w	r3, r7, #20
 802a464:	4611      	mov	r1, r2
 802a466:	4618      	mov	r0, r3
 802a468:	f7fe f872 	bl	8028550 <_ZSt3minIiERKT_S2_S2_>
 802a46c:	4603      	mov	r3, r0
	  const difference_type __clen
 802a46e:	681b      	ldr	r3, [r3, #0]
 802a470:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 802a472:	69fa      	ldr	r2, [r7, #28]
 802a474:	4613      	mov	r3, r2
 802a476:	009b      	lsls	r3, r3, #2
 802a478:	4413      	add	r3, r2
 802a47a:	009b      	lsls	r3, r3, #2
 802a47c:	461a      	mov	r2, r3
 802a47e:	68bb      	ldr	r3, [r7, #8]
 802a480:	1899      	adds	r1, r3, r2
 802a482:	683b      	ldr	r3, [r7, #0]
 802a484:	681b      	ldr	r3, [r3, #0]
 802a486:	461a      	mov	r2, r3
 802a488:	68b8      	ldr	r0, [r7, #8]
 802a48a:	f000 f947 	bl	802a71c <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 802a48e:	69fa      	ldr	r2, [r7, #28]
 802a490:	4613      	mov	r3, r2
 802a492:	009b      	lsls	r3, r3, #2
 802a494:	4413      	add	r3, r2
 802a496:	009b      	lsls	r3, r3, #2
 802a498:	461a      	mov	r2, r3
 802a49a:	68bb      	ldr	r3, [r7, #8]
 802a49c:	4413      	add	r3, r2
 802a49e:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 802a4a0:	69f9      	ldr	r1, [r7, #28]
 802a4a2:	6838      	ldr	r0, [r7, #0]
 802a4a4:	f7fd f994 	bl	80277d0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 802a4a8:	697a      	ldr	r2, [r7, #20]
 802a4aa:	69fb      	ldr	r3, [r7, #28]
 802a4ac:	1ad3      	subs	r3, r2, r3
 802a4ae:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802a4b0:	e7c7      	b.n	802a442 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 802a4b2:	6839      	ldr	r1, [r7, #0]
 802a4b4:	68f8      	ldr	r0, [r7, #12]
 802a4b6:	f7fa fda0 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802a4ba:	68f8      	ldr	r0, [r7, #12]
 802a4bc:	3720      	adds	r7, #32
 802a4be:	46bd      	mov	sp, r7
 802a4c0:	bd80      	pop	{r7, pc}
 802a4c2:	bf00      	nop
 802a4c4:	cccccccd 	.word	0xcccccccd

0802a4c8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 802a4c8:	b580      	push	{r7, lr}
 802a4ca:	b088      	sub	sp, #32
 802a4cc:	af00      	add	r7, sp, #0
 802a4ce:	60f8      	str	r0, [r7, #12]
 802a4d0:	60b9      	str	r1, [r7, #8]
 802a4d2:	607a      	str	r2, [r7, #4]
 802a4d4:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 802a4d6:	687a      	ldr	r2, [r7, #4]
 802a4d8:	68bb      	ldr	r3, [r7, #8]
 802a4da:	1ad3      	subs	r3, r2, r3
 802a4dc:	109b      	asrs	r3, r3, #2
 802a4de:	4a2c      	ldr	r2, [pc, #176]	; (802a590 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802a4e0:	fb02 f303 	mul.w	r3, r2, r3
 802a4e4:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802a4e6:	697b      	ldr	r3, [r7, #20]
 802a4e8:	2b00      	cmp	r3, #0
 802a4ea:	dd49      	ble.n	802a580 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 802a4ec:	683b      	ldr	r3, [r7, #0]
 802a4ee:	681a      	ldr	r2, [r3, #0]
 802a4f0:	683b      	ldr	r3, [r7, #0]
 802a4f2:	685b      	ldr	r3, [r3, #4]
 802a4f4:	1ad3      	subs	r3, r2, r3
 802a4f6:	109b      	asrs	r3, r3, #2
 802a4f8:	4a25      	ldr	r2, [pc, #148]	; (802a590 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802a4fa:	fb02 f303 	mul.w	r3, r2, r3
 802a4fe:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 802a500:	683b      	ldr	r3, [r7, #0]
 802a502:	681b      	ldr	r3, [r3, #0]
 802a504:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 802a506:	693b      	ldr	r3, [r7, #16]
 802a508:	2b00      	cmp	r3, #0
 802a50a:	d10f      	bne.n	802a52c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 802a50c:	f7fb fdd7 	bl	80260be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802a510:	4603      	mov	r3, r0
 802a512:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 802a514:	683b      	ldr	r3, [r7, #0]
 802a516:	68db      	ldr	r3, [r3, #12]
 802a518:	3b04      	subs	r3, #4
 802a51a:	681a      	ldr	r2, [r3, #0]
 802a51c:	693b      	ldr	r3, [r7, #16]
 802a51e:	4619      	mov	r1, r3
 802a520:	460b      	mov	r3, r1
 802a522:	009b      	lsls	r3, r3, #2
 802a524:	440b      	add	r3, r1
 802a526:	009b      	lsls	r3, r3, #2
 802a528:	4413      	add	r3, r2
 802a52a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 802a52c:	f107 0210 	add.w	r2, r7, #16
 802a530:	f107 0314 	add.w	r3, r7, #20
 802a534:	4611      	mov	r1, r2
 802a536:	4618      	mov	r0, r3
 802a538:	f7fe f80a 	bl	8028550 <_ZSt3minIiERKT_S2_S2_>
 802a53c:	4603      	mov	r3, r0
 802a53e:	681b      	ldr	r3, [r3, #0]
 802a540:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 802a542:	69ba      	ldr	r2, [r7, #24]
 802a544:	4613      	mov	r3, r2
 802a546:	009b      	lsls	r3, r3, #2
 802a548:	4413      	add	r3, r2
 802a54a:	009b      	lsls	r3, r3, #2
 802a54c:	425b      	negs	r3, r3
 802a54e:	687a      	ldr	r2, [r7, #4]
 802a550:	4413      	add	r3, r2
 802a552:	69fa      	ldr	r2, [r7, #28]
 802a554:	6879      	ldr	r1, [r7, #4]
 802a556:	4618      	mov	r0, r3
 802a558:	f000 f8f0 	bl	802a73c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 802a55c:	69ba      	ldr	r2, [r7, #24]
 802a55e:	4613      	mov	r3, r2
 802a560:	009b      	lsls	r3, r3, #2
 802a562:	4413      	add	r3, r2
 802a564:	009b      	lsls	r3, r3, #2
 802a566:	425b      	negs	r3, r3
 802a568:	687a      	ldr	r2, [r7, #4]
 802a56a:	4413      	add	r3, r2
 802a56c:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 802a56e:	69b9      	ldr	r1, [r7, #24]
 802a570:	6838      	ldr	r0, [r7, #0]
 802a572:	f7fe ff96 	bl	80294a2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 802a576:	697a      	ldr	r2, [r7, #20]
 802a578:	69bb      	ldr	r3, [r7, #24]
 802a57a:	1ad3      	subs	r3, r2, r3
 802a57c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802a57e:	e7b2      	b.n	802a4e6 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 802a580:	6839      	ldr	r1, [r7, #0]
 802a582:	68f8      	ldr	r0, [r7, #12]
 802a584:	f7fa fd39 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802a588:	68f8      	ldr	r0, [r7, #12]
 802a58a:	3720      	adds	r7, #32
 802a58c:	46bd      	mov	sp, r7
 802a58e:	bd80      	pop	{r7, pc}
 802a590:	cccccccd 	.word	0xcccccccd

0802a594 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a594:	b580      	push	{r7, lr}
 802a596:	b086      	sub	sp, #24
 802a598:	af00      	add	r7, sp, #0
 802a59a:	60f8      	str	r0, [r7, #12]
 802a59c:	60b9      	str	r1, [r7, #8]
 802a59e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a5a0:	68ba      	ldr	r2, [r7, #8]
 802a5a2:	68fb      	ldr	r3, [r7, #12]
 802a5a4:	1ad3      	subs	r3, r2, r3
 802a5a6:	109b      	asrs	r3, r3, #2
 802a5a8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a5aa:	697b      	ldr	r3, [r7, #20]
 802a5ac:	2b00      	cmp	r3, #0
 802a5ae:	d006      	beq.n	802a5be <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a5b0:	697b      	ldr	r3, [r7, #20]
 802a5b2:	009b      	lsls	r3, r3, #2
 802a5b4:	461a      	mov	r2, r3
 802a5b6:	68f9      	ldr	r1, [r7, #12]
 802a5b8:	6878      	ldr	r0, [r7, #4]
 802a5ba:	f014 fd2b 	bl	803f014 <memmove>
	  return __result + _Num;
 802a5be:	697b      	ldr	r3, [r7, #20]
 802a5c0:	009b      	lsls	r3, r3, #2
 802a5c2:	687a      	ldr	r2, [r7, #4]
 802a5c4:	4413      	add	r3, r2
	}
 802a5c6:	4618      	mov	r0, r3
 802a5c8:	3718      	adds	r7, #24
 802a5ca:	46bd      	mov	sp, r7
 802a5cc:	bd80      	pop	{r7, pc}

0802a5ce <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a5ce:	b580      	push	{r7, lr}
 802a5d0:	b086      	sub	sp, #24
 802a5d2:	af00      	add	r7, sp, #0
 802a5d4:	60f8      	str	r0, [r7, #12]
 802a5d6:	60b9      	str	r1, [r7, #8]
 802a5d8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a5da:	68ba      	ldr	r2, [r7, #8]
 802a5dc:	68fb      	ldr	r3, [r7, #12]
 802a5de:	1ad3      	subs	r3, r2, r3
 802a5e0:	109b      	asrs	r3, r3, #2
 802a5e2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a5e4:	697b      	ldr	r3, [r7, #20]
 802a5e6:	2b00      	cmp	r3, #0
 802a5e8:	d00a      	beq.n	802a600 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802a5ea:	697b      	ldr	r3, [r7, #20]
 802a5ec:	009b      	lsls	r3, r3, #2
 802a5ee:	425b      	negs	r3, r3
 802a5f0:	687a      	ldr	r2, [r7, #4]
 802a5f2:	18d0      	adds	r0, r2, r3
 802a5f4:	697b      	ldr	r3, [r7, #20]
 802a5f6:	009b      	lsls	r3, r3, #2
 802a5f8:	461a      	mov	r2, r3
 802a5fa:	68f9      	ldr	r1, [r7, #12]
 802a5fc:	f014 fd0a 	bl	803f014 <memmove>
	  return __result - _Num;
 802a600:	697b      	ldr	r3, [r7, #20]
 802a602:	009b      	lsls	r3, r3, #2
 802a604:	425b      	negs	r3, r3
 802a606:	687a      	ldr	r2, [r7, #4]
 802a608:	4413      	add	r3, r2
	}
 802a60a:	4618      	mov	r0, r3
 802a60c:	3718      	adds	r7, #24
 802a60e:	46bd      	mov	sp, r7
 802a610:	bd80      	pop	{r7, pc}

0802a612 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a612:	b580      	push	{r7, lr}
 802a614:	b084      	sub	sp, #16
 802a616:	af00      	add	r7, sp, #0
 802a618:	60f8      	str	r0, [r7, #12]
 802a61a:	60b9      	str	r1, [r7, #8]
 802a61c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a61e:	687a      	ldr	r2, [r7, #4]
 802a620:	68b9      	ldr	r1, [r7, #8]
 802a622:	68f8      	ldr	r0, [r7, #12]
 802a624:	f000 f89a 	bl	802a75c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 802a628:	4603      	mov	r3, r0
    }
 802a62a:	4618      	mov	r0, r3
 802a62c:	3710      	adds	r7, #16
 802a62e:	46bd      	mov	sp, r7
 802a630:	bd80      	pop	{r7, pc}

0802a632 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a632:	b580      	push	{r7, lr}
 802a634:	b084      	sub	sp, #16
 802a636:	af00      	add	r7, sp, #0
 802a638:	60f8      	str	r0, [r7, #12]
 802a63a:	60b9      	str	r1, [r7, #8]
 802a63c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a63e:	687a      	ldr	r2, [r7, #4]
 802a640:	68b9      	ldr	r1, [r7, #8]
 802a642:	68f8      	ldr	r0, [r7, #12]
 802a644:	f000 f8a7 	bl	802a796 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 802a648:	4603      	mov	r3, r0
    }
 802a64a:	4618      	mov	r0, r3
 802a64c:	3710      	adds	r7, #16
 802a64e:	46bd      	mov	sp, r7
 802a650:	bd80      	pop	{r7, pc}

0802a652 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a652:	b580      	push	{r7, lr}
 802a654:	b086      	sub	sp, #24
 802a656:	af00      	add	r7, sp, #0
 802a658:	60f8      	str	r0, [r7, #12]
 802a65a:	60b9      	str	r1, [r7, #8]
 802a65c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a65e:	68ba      	ldr	r2, [r7, #8]
 802a660:	68fb      	ldr	r3, [r7, #12]
 802a662:	1ad3      	subs	r3, r2, r3
 802a664:	109b      	asrs	r3, r3, #2
 802a666:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a668:	697b      	ldr	r3, [r7, #20]
 802a66a:	2b00      	cmp	r3, #0
 802a66c:	d006      	beq.n	802a67c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a66e:	697b      	ldr	r3, [r7, #20]
 802a670:	009b      	lsls	r3, r3, #2
 802a672:	461a      	mov	r2, r3
 802a674:	68f9      	ldr	r1, [r7, #12]
 802a676:	6878      	ldr	r0, [r7, #4]
 802a678:	f014 fccc 	bl	803f014 <memmove>
	  return __result + _Num;
 802a67c:	697b      	ldr	r3, [r7, #20]
 802a67e:	009b      	lsls	r3, r3, #2
 802a680:	687a      	ldr	r2, [r7, #4]
 802a682:	4413      	add	r3, r2
	}
 802a684:	4618      	mov	r0, r3
 802a686:	3718      	adds	r7, #24
 802a688:	46bd      	mov	sp, r7
 802a68a:	bd80      	pop	{r7, pc}

0802a68c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a68c:	b580      	push	{r7, lr}
 802a68e:	b086      	sub	sp, #24
 802a690:	af00      	add	r7, sp, #0
 802a692:	60f8      	str	r0, [r7, #12]
 802a694:	60b9      	str	r1, [r7, #8]
 802a696:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a698:	68ba      	ldr	r2, [r7, #8]
 802a69a:	68fb      	ldr	r3, [r7, #12]
 802a69c:	1ad3      	subs	r3, r2, r3
 802a69e:	109b      	asrs	r3, r3, #2
 802a6a0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a6a2:	697b      	ldr	r3, [r7, #20]
 802a6a4:	2b00      	cmp	r3, #0
 802a6a6:	d00a      	beq.n	802a6be <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802a6a8:	697b      	ldr	r3, [r7, #20]
 802a6aa:	009b      	lsls	r3, r3, #2
 802a6ac:	425b      	negs	r3, r3
 802a6ae:	687a      	ldr	r2, [r7, #4]
 802a6b0:	18d0      	adds	r0, r2, r3
 802a6b2:	697b      	ldr	r3, [r7, #20]
 802a6b4:	009b      	lsls	r3, r3, #2
 802a6b6:	461a      	mov	r2, r3
 802a6b8:	68f9      	ldr	r1, [r7, #12]
 802a6ba:	f014 fcab 	bl	803f014 <memmove>
	  return __result - _Num;
 802a6be:	697b      	ldr	r3, [r7, #20]
 802a6c0:	009b      	lsls	r3, r3, #2
 802a6c2:	425b      	negs	r3, r3
 802a6c4:	687a      	ldr	r2, [r7, #4]
 802a6c6:	4413      	add	r3, r2
	}
 802a6c8:	4618      	mov	r0, r3
 802a6ca:	3718      	adds	r7, #24
 802a6cc:	46bd      	mov	sp, r7
 802a6ce:	bd80      	pop	{r7, pc}

0802a6d0 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a6d0:	b580      	push	{r7, lr}
 802a6d2:	b084      	sub	sp, #16
 802a6d4:	af00      	add	r7, sp, #0
 802a6d6:	60f8      	str	r0, [r7, #12]
 802a6d8:	60b9      	str	r1, [r7, #8]
 802a6da:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a6dc:	687a      	ldr	r2, [r7, #4]
 802a6de:	68b9      	ldr	r1, [r7, #8]
 802a6e0:	68f8      	ldr	r0, [r7, #12]
 802a6e2:	f000 f87a 	bl	802a7da <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 802a6e6:	4603      	mov	r3, r0
    }
 802a6e8:	4618      	mov	r0, r3
 802a6ea:	3710      	adds	r7, #16
 802a6ec:	46bd      	mov	sp, r7
 802a6ee:	bd80      	pop	{r7, pc}

0802a6f0 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 802a6f0:	b580      	push	{r7, lr}
 802a6f2:	b086      	sub	sp, #24
 802a6f4:	af00      	add	r7, sp, #0
 802a6f6:	6078      	str	r0, [r7, #4]
 802a6f8:	6039      	str	r1, [r7, #0]
    { return __miter_base(__it.base()); }
 802a6fa:	f107 0308 	add.w	r3, r7, #8
 802a6fe:	6839      	ldr	r1, [r7, #0]
 802a700:	4618      	mov	r0, r3
 802a702:	f000 f884 	bl	802a80e <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 802a706:	687b      	ldr	r3, [r7, #4]
 802a708:	f107 0208 	add.w	r2, r7, #8
 802a70c:	4611      	mov	r1, r2
 802a70e:	4618      	mov	r0, r3
 802a710:	f7fe ff59 	bl	80295c6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802a714:	6878      	ldr	r0, [r7, #4]
 802a716:	3718      	adds	r7, #24
 802a718:	46bd      	mov	sp, r7
 802a71a:	bd80      	pop	{r7, pc}

0802a71c <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a71c:	b580      	push	{r7, lr}
 802a71e:	b084      	sub	sp, #16
 802a720:	af00      	add	r7, sp, #0
 802a722:	60f8      	str	r0, [r7, #12]
 802a724:	60b9      	str	r1, [r7, #8]
 802a726:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a728:	687a      	ldr	r2, [r7, #4]
 802a72a:	68b9      	ldr	r1, [r7, #8]
 802a72c:	68f8      	ldr	r0, [r7, #12]
 802a72e:	f000 f87c 	bl	802a82a <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 802a732:	4603      	mov	r3, r0
 802a734:	4618      	mov	r0, r3
 802a736:	3710      	adds	r7, #16
 802a738:	46bd      	mov	sp, r7
 802a73a:	bd80      	pop	{r7, pc}

0802a73c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802a73c:	b580      	push	{r7, lr}
 802a73e:	b084      	sub	sp, #16
 802a740:	af00      	add	r7, sp, #0
 802a742:	60f8      	str	r0, [r7, #12]
 802a744:	60b9      	str	r1, [r7, #8]
 802a746:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802a748:	687a      	ldr	r2, [r7, #4]
 802a74a:	68b9      	ldr	r1, [r7, #8]
 802a74c:	68f8      	ldr	r0, [r7, #12]
 802a74e:	f000 f87c 	bl	802a84a <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 802a752:	4603      	mov	r3, r0
 802a754:	4618      	mov	r0, r3
 802a756:	3710      	adds	r7, #16
 802a758:	46bd      	mov	sp, r7
 802a75a:	bd80      	pop	{r7, pc}

0802a75c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a75c:	b580      	push	{r7, lr}
 802a75e:	b086      	sub	sp, #24
 802a760:	af00      	add	r7, sp, #0
 802a762:	60f8      	str	r0, [r7, #12]
 802a764:	60b9      	str	r1, [r7, #8]
 802a766:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a768:	68ba      	ldr	r2, [r7, #8]
 802a76a:	68fb      	ldr	r3, [r7, #12]
 802a76c:	1ad3      	subs	r3, r2, r3
 802a76e:	109b      	asrs	r3, r3, #2
 802a770:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a772:	697b      	ldr	r3, [r7, #20]
 802a774:	2b00      	cmp	r3, #0
 802a776:	d006      	beq.n	802a786 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a778:	697b      	ldr	r3, [r7, #20]
 802a77a:	009b      	lsls	r3, r3, #2
 802a77c:	461a      	mov	r2, r3
 802a77e:	68f9      	ldr	r1, [r7, #12]
 802a780:	6878      	ldr	r0, [r7, #4]
 802a782:	f014 fc47 	bl	803f014 <memmove>
	  return __result + _Num;
 802a786:	697b      	ldr	r3, [r7, #20]
 802a788:	009b      	lsls	r3, r3, #2
 802a78a:	687a      	ldr	r2, [r7, #4]
 802a78c:	4413      	add	r3, r2
	}
 802a78e:	4618      	mov	r0, r3
 802a790:	3718      	adds	r7, #24
 802a792:	46bd      	mov	sp, r7
 802a794:	bd80      	pop	{r7, pc}

0802a796 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a796:	b580      	push	{r7, lr}
 802a798:	b086      	sub	sp, #24
 802a79a:	af00      	add	r7, sp, #0
 802a79c:	60f8      	str	r0, [r7, #12]
 802a79e:	60b9      	str	r1, [r7, #8]
 802a7a0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a7a2:	68ba      	ldr	r2, [r7, #8]
 802a7a4:	68fb      	ldr	r3, [r7, #12]
 802a7a6:	1ad3      	subs	r3, r2, r3
 802a7a8:	109b      	asrs	r3, r3, #2
 802a7aa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a7ac:	697b      	ldr	r3, [r7, #20]
 802a7ae:	2b00      	cmp	r3, #0
 802a7b0:	d00a      	beq.n	802a7c8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802a7b2:	697b      	ldr	r3, [r7, #20]
 802a7b4:	009b      	lsls	r3, r3, #2
 802a7b6:	425b      	negs	r3, r3
 802a7b8:	687a      	ldr	r2, [r7, #4]
 802a7ba:	18d0      	adds	r0, r2, r3
 802a7bc:	697b      	ldr	r3, [r7, #20]
 802a7be:	009b      	lsls	r3, r3, #2
 802a7c0:	461a      	mov	r2, r3
 802a7c2:	68f9      	ldr	r1, [r7, #12]
 802a7c4:	f014 fc26 	bl	803f014 <memmove>
	  return __result - _Num;
 802a7c8:	697b      	ldr	r3, [r7, #20]
 802a7ca:	009b      	lsls	r3, r3, #2
 802a7cc:	425b      	negs	r3, r3
 802a7ce:	687a      	ldr	r2, [r7, #4]
 802a7d0:	4413      	add	r3, r2
	}
 802a7d2:	4618      	mov	r0, r3
 802a7d4:	3718      	adds	r7, #24
 802a7d6:	46bd      	mov	sp, r7
 802a7d8:	bd80      	pop	{r7, pc}

0802a7da <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a7da:	b580      	push	{r7, lr}
 802a7dc:	b086      	sub	sp, #24
 802a7de:	af00      	add	r7, sp, #0
 802a7e0:	60f8      	str	r0, [r7, #12]
 802a7e2:	60b9      	str	r1, [r7, #8]
 802a7e4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a7e6:	68ba      	ldr	r2, [r7, #8]
 802a7e8:	68fb      	ldr	r3, [r7, #12]
 802a7ea:	1ad3      	subs	r3, r2, r3
 802a7ec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a7ee:	697b      	ldr	r3, [r7, #20]
 802a7f0:	2b00      	cmp	r3, #0
 802a7f2:	d005      	beq.n	802a800 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a7f4:	697b      	ldr	r3, [r7, #20]
 802a7f6:	461a      	mov	r2, r3
 802a7f8:	68f9      	ldr	r1, [r7, #12]
 802a7fa:	6878      	ldr	r0, [r7, #4]
 802a7fc:	f014 fc0a 	bl	803f014 <memmove>
	  return __result + _Num;
 802a800:	697b      	ldr	r3, [r7, #20]
 802a802:	687a      	ldr	r2, [r7, #4]
 802a804:	4413      	add	r3, r2
	}
 802a806:	4618      	mov	r0, r3
 802a808:	3718      	adds	r7, #24
 802a80a:	46bd      	mov	sp, r7
 802a80c:	bd80      	pop	{r7, pc}

0802a80e <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 802a80e:	b580      	push	{r7, lr}
 802a810:	b082      	sub	sp, #8
 802a812:	af00      	add	r7, sp, #0
 802a814:	6078      	str	r0, [r7, #4]
 802a816:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 802a818:	683b      	ldr	r3, [r7, #0]
 802a81a:	4619      	mov	r1, r3
 802a81c:	6878      	ldr	r0, [r7, #4]
 802a81e:	f7fa fbec 	bl	8024ffa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a822:	6878      	ldr	r0, [r7, #4]
 802a824:	3708      	adds	r7, #8
 802a826:	46bd      	mov	sp, r7
 802a828:	bd80      	pop	{r7, pc}

0802a82a <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a82a:	b580      	push	{r7, lr}
 802a82c:	b084      	sub	sp, #16
 802a82e:	af00      	add	r7, sp, #0
 802a830:	60f8      	str	r0, [r7, #12]
 802a832:	60b9      	str	r1, [r7, #8]
 802a834:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a836:	687a      	ldr	r2, [r7, #4]
 802a838:	68b9      	ldr	r1, [r7, #8]
 802a83a:	68f8      	ldr	r0, [r7, #12]
 802a83c:	f000 f816 	bl	802a86c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802a840:	4603      	mov	r3, r0
    }
 802a842:	4618      	mov	r0, r3
 802a844:	3710      	adds	r7, #16
 802a846:	46bd      	mov	sp, r7
 802a848:	bd80      	pop	{r7, pc}

0802a84a <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a84a:	b580      	push	{r7, lr}
 802a84c:	b084      	sub	sp, #16
 802a84e:	af00      	add	r7, sp, #0
 802a850:	60f8      	str	r0, [r7, #12]
 802a852:	60b9      	str	r1, [r7, #8]
 802a854:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a856:	687a      	ldr	r2, [r7, #4]
 802a858:	68b9      	ldr	r1, [r7, #8]
 802a85a:	68f8      	ldr	r0, [r7, #12]
 802a85c:	f000 f830 	bl	802a8c0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802a860:	4603      	mov	r3, r0
    }
 802a862:	4618      	mov	r0, r3
 802a864:	3710      	adds	r7, #16
 802a866:	46bd      	mov	sp, r7
 802a868:	bd80      	pop	{r7, pc}
	...

0802a86c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a86c:	b580      	push	{r7, lr}
 802a86e:	b086      	sub	sp, #24
 802a870:	af00      	add	r7, sp, #0
 802a872:	60f8      	str	r0, [r7, #12]
 802a874:	60b9      	str	r1, [r7, #8]
 802a876:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a878:	68ba      	ldr	r2, [r7, #8]
 802a87a:	68fb      	ldr	r3, [r7, #12]
 802a87c:	1ad3      	subs	r3, r2, r3
 802a87e:	109b      	asrs	r3, r3, #2
 802a880:	4a0e      	ldr	r2, [pc, #56]	; (802a8bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 802a882:	fb02 f303 	mul.w	r3, r2, r3
 802a886:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a888:	697b      	ldr	r3, [r7, #20]
 802a88a:	2b00      	cmp	r3, #0
 802a88c:	d009      	beq.n	802a8a2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a88e:	697a      	ldr	r2, [r7, #20]
 802a890:	4613      	mov	r3, r2
 802a892:	009b      	lsls	r3, r3, #2
 802a894:	4413      	add	r3, r2
 802a896:	009b      	lsls	r3, r3, #2
 802a898:	461a      	mov	r2, r3
 802a89a:	68f9      	ldr	r1, [r7, #12]
 802a89c:	6878      	ldr	r0, [r7, #4]
 802a89e:	f014 fbb9 	bl	803f014 <memmove>
	  return __result + _Num;
 802a8a2:	697a      	ldr	r2, [r7, #20]
 802a8a4:	4613      	mov	r3, r2
 802a8a6:	009b      	lsls	r3, r3, #2
 802a8a8:	4413      	add	r3, r2
 802a8aa:	009b      	lsls	r3, r3, #2
 802a8ac:	461a      	mov	r2, r3
 802a8ae:	687b      	ldr	r3, [r7, #4]
 802a8b0:	4413      	add	r3, r2
	}
 802a8b2:	4618      	mov	r0, r3
 802a8b4:	3718      	adds	r7, #24
 802a8b6:	46bd      	mov	sp, r7
 802a8b8:	bd80      	pop	{r7, pc}
 802a8ba:	bf00      	nop
 802a8bc:	cccccccd 	.word	0xcccccccd

0802a8c0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a8c0:	b580      	push	{r7, lr}
 802a8c2:	b086      	sub	sp, #24
 802a8c4:	af00      	add	r7, sp, #0
 802a8c6:	60f8      	str	r0, [r7, #12]
 802a8c8:	60b9      	str	r1, [r7, #8]
 802a8ca:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a8cc:	68ba      	ldr	r2, [r7, #8]
 802a8ce:	68fb      	ldr	r3, [r7, #12]
 802a8d0:	1ad3      	subs	r3, r2, r3
 802a8d2:	109b      	asrs	r3, r3, #2
 802a8d4:	4a11      	ldr	r2, [pc, #68]	; (802a91c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 802a8d6:	fb02 f303 	mul.w	r3, r2, r3
 802a8da:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a8dc:	697b      	ldr	r3, [r7, #20]
 802a8de:	2b00      	cmp	r3, #0
 802a8e0:	d010      	beq.n	802a904 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802a8e2:	697a      	ldr	r2, [r7, #20]
 802a8e4:	4613      	mov	r3, r2
 802a8e6:	009b      	lsls	r3, r3, #2
 802a8e8:	4413      	add	r3, r2
 802a8ea:	009b      	lsls	r3, r3, #2
 802a8ec:	425b      	negs	r3, r3
 802a8ee:	687a      	ldr	r2, [r7, #4]
 802a8f0:	18d0      	adds	r0, r2, r3
 802a8f2:	697a      	ldr	r2, [r7, #20]
 802a8f4:	4613      	mov	r3, r2
 802a8f6:	009b      	lsls	r3, r3, #2
 802a8f8:	4413      	add	r3, r2
 802a8fa:	009b      	lsls	r3, r3, #2
 802a8fc:	461a      	mov	r2, r3
 802a8fe:	68f9      	ldr	r1, [r7, #12]
 802a900:	f014 fb88 	bl	803f014 <memmove>
	  return __result - _Num;
 802a904:	697a      	ldr	r2, [r7, #20]
 802a906:	4613      	mov	r3, r2
 802a908:	009b      	lsls	r3, r3, #2
 802a90a:	4413      	add	r3, r2
 802a90c:	009b      	lsls	r3, r3, #2
 802a90e:	425b      	negs	r3, r3
 802a910:	687a      	ldr	r2, [r7, #4]
 802a912:	4413      	add	r3, r2
	}
 802a914:	4618      	mov	r0, r3
 802a916:	3718      	adds	r7, #24
 802a918:	46bd      	mov	sp, r7
 802a91a:	bd80      	pop	{r7, pc}
 802a91c:	cccccccd 	.word	0xcccccccd

0802a920 <_Z41__static_initialization_and_destruction_0ii>:
 802a920:	b580      	push	{r7, lr}
 802a922:	b082      	sub	sp, #8
 802a924:	af00      	add	r7, sp, #0
 802a926:	6078      	str	r0, [r7, #4]
 802a928:	6039      	str	r1, [r7, #0]
 802a92a:	687b      	ldr	r3, [r7, #4]
 802a92c:	2b01      	cmp	r3, #1
 802a92e:	d107      	bne.n	802a940 <_Z41__static_initialization_and_destruction_0ii+0x20>
 802a930:	683b      	ldr	r3, [r7, #0]
 802a932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802a936:	4293      	cmp	r3, r2
 802a938:	d102      	bne.n	802a940 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 802a93a:	4809      	ldr	r0, [pc, #36]	; (802a960 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802a93c:	f7f8 f976 	bl	8022c2c <_ZN18MotherboardContextC1Ev>
 802a940:	687b      	ldr	r3, [r7, #4]
 802a942:	2b00      	cmp	r3, #0
 802a944:	d107      	bne.n	802a956 <_Z41__static_initialization_and_destruction_0ii+0x36>
 802a946:	683b      	ldr	r3, [r7, #0]
 802a948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802a94c:	4293      	cmp	r3, r2
 802a94e:	d102      	bne.n	802a956 <_Z41__static_initialization_and_destruction_0ii+0x36>
 802a950:	4803      	ldr	r0, [pc, #12]	; (802a960 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802a952:	f7f8 f9a8 	bl	8022ca6 <_ZN18MotherboardContextD1Ev>
}
 802a956:	bf00      	nop
 802a958:	3708      	adds	r7, #8
 802a95a:	46bd      	mov	sp, r7
 802a95c:	bd80      	pop	{r7, pc}
 802a95e:	bf00      	nop
 802a960:	240001d0 	.word	0x240001d0

0802a964 <_GLOBAL__sub_I_MotherboardInit>:
 802a964:	b580      	push	{r7, lr}
 802a966:	af00      	add	r7, sp, #0
 802a968:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802a96c:	2001      	movs	r0, #1
 802a96e:	f7ff ffd7 	bl	802a920 <_Z41__static_initialization_and_destruction_0ii>
 802a972:	bd80      	pop	{r7, pc}

0802a974 <_GLOBAL__sub_D_MotherboardInit>:
 802a974:	b580      	push	{r7, lr}
 802a976:	af00      	add	r7, sp, #0
 802a978:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802a97c:	2000      	movs	r0, #0
 802a97e:	f7ff ffcf 	bl	802a920 <_Z41__static_initialization_and_destruction_0ii>
 802a982:	bd80      	pop	{r7, pc}

0802a984 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 802a984:	b580      	push	{r7, lr}
 802a986:	b086      	sub	sp, #24
 802a988:	af00      	add	r7, sp, #0
 802a98a:	60b9      	str	r1, [r7, #8]
 802a98c:	607b      	str	r3, [r7, #4]
 802a98e:	4603      	mov	r3, r0
 802a990:	73fb      	strb	r3, [r7, #15]
 802a992:	4613      	mov	r3, r2
 802a994:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 802a996:	2300      	movs	r3, #0
 802a998:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802a99a:	687b      	ldr	r3, [r7, #4]
 802a99c:	2b00      	cmp	r3, #0
 802a99e:	d008      	beq.n	802a9b2 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 802a9a0:	89ba      	ldrh	r2, [r7, #12]
 802a9a2:	687b      	ldr	r3, [r7, #4]
 802a9a4:	7bf8      	ldrb	r0, [r7, #15]
 802a9a6:	68b9      	ldr	r1, [r7, #8]
 802a9a8:	f001 f925 	bl	802bbf6 <bhy2_hif_get_regs>
 802a9ac:	4603      	mov	r3, r0
 802a9ae:	75fb      	strb	r3, [r7, #23]
 802a9b0:	e001      	b.n	802a9b6 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a9b2:	23ff      	movs	r3, #255	; 0xff
 802a9b4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802a9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a9ba:	4618      	mov	r0, r3
 802a9bc:	3718      	adds	r7, #24
 802a9be:	46bd      	mov	sp, r7
 802a9c0:	bd80      	pop	{r7, pc}

0802a9c2 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 802a9c2:	b590      	push	{r4, r7, lr}
 802a9c4:	b08f      	sub	sp, #60	; 0x3c
 802a9c6:	af02      	add	r7, sp, #8
 802a9c8:	60f8      	str	r0, [r7, #12]
 802a9ca:	60b9      	str	r1, [r7, #8]
 802a9cc:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 802a9ce:	2300      	movs	r3, #0
 802a9d0:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 802a9d2:	687b      	ldr	r3, [r7, #4]
 802a9d4:	2b00      	cmp	r3, #0
 802a9d6:	d002      	beq.n	802a9de <bhy2_get_and_process_fifo+0x1c>
 802a9d8:	68fb      	ldr	r3, [r7, #12]
 802a9da:	2b00      	cmp	r3, #0
 802a9dc:	d102      	bne.n	802a9e4 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 802a9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a9e2:	e11b      	b.n	802ac1c <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 802a9e4:	68bb      	ldr	r3, [r7, #8]
 802a9e6:	2b00      	cmp	r3, #0
 802a9e8:	d102      	bne.n	802a9f0 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 802a9ea:	f06f 0305 	mvn.w	r3, #5
 802a9ee:	e115      	b.n	802ac1c <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 802a9f0:	68ba      	ldr	r2, [r7, #8]
 802a9f2:	2100      	movs	r1, #0
 802a9f4:	68f8      	ldr	r0, [r7, #12]
 802a9f6:	f014 fb27 	bl	803f048 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 802a9fa:	f107 0314 	add.w	r3, r7, #20
 802a9fe:	2214      	movs	r2, #20
 802aa00:	2100      	movs	r1, #0
 802aa02:	4618      	mov	r0, r3
 802aa04:	f014 fb20 	bl	803f048 <memset>

    fifos.buffer = work_buffer;
 802aa08:	68fb      	ldr	r3, [r7, #12]
 802aa0a:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 802aa0c:	68bb      	ldr	r3, [r7, #8]
 802aa0e:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 802aa10:	687a      	ldr	r2, [r7, #4]
 802aa12:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 802aa16:	4611      	mov	r1, r2
 802aa18:	4618      	mov	r0, r3
 802aa1a:	f001 fa5f 	bl	802bedc <bhy2_hif_get_interrupt_status>
 802aa1e:	4603      	mov	r3, r0
 802aa20:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 802aa24:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aa28:	2b00      	cmp	r3, #0
 802aa2a:	d002      	beq.n	802aa32 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 802aa2c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aa30:	e0f4      	b.n	802ac1c <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 802aa32:	2300      	movs	r3, #0
 802aa34:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802aa36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802aa3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802aa3e:	e042      	b.n	802aac6 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802aa40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aa44:	f003 0306 	and.w	r3, r3, #6
 802aa48:	2b02      	cmp	r3, #2
 802aa4a:	d00e      	beq.n	802aa6a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 802aa4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aa50:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802aa54:	2b04      	cmp	r3, #4
 802aa56:	d008      	beq.n	802aa6a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 802aa58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aa5c:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 802aa60:	2b06      	cmp	r3, #6
 802aa62:	d002      	beq.n	802aa6a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 802aa64:	69fb      	ldr	r3, [r7, #28]
 802aa66:	2b00      	cmp	r3, #0
 802aa68:	d020      	beq.n	802aaac <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 802aa6a:	2300      	movs	r3, #0
 802aa6c:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 802aa6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802aa70:	69bb      	ldr	r3, [r7, #24]
 802aa72:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 802aa74:	6a3a      	ldr	r2, [r7, #32]
 802aa76:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 802aa78:	1ad1      	subs	r1, r2, r3
 802aa7a:	687b      	ldr	r3, [r7, #4]
 802aa7c:	f107 0214 	add.w	r2, r7, #20
 802aa80:	f102 0408 	add.w	r4, r2, #8
 802aa84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802aa88:	9300      	str	r3, [sp, #0]
 802aa8a:	4623      	mov	r3, r4
 802aa8c:	f001 fad7 	bl	802c03e <bhy2_hif_get_wakeup_fifo>
 802aa90:	4603      	mov	r3, r0
 802aa92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 802aa96:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aa9a:	2b00      	cmp	r3, #0
 802aa9c:	d002      	beq.n	802aaa4 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 802aa9e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aaa2:	e0bb      	b.n	802ac1c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802aaa4:	69ba      	ldr	r2, [r7, #24]
 802aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aaa8:	4413      	add	r3, r2
 802aaaa:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 802aaac:	f107 0314 	add.w	r3, r7, #20
 802aab0:	687a      	ldr	r2, [r7, #4]
 802aab2:	4619      	mov	r1, r3
 802aab4:	2000      	movs	r0, #0
 802aab6:	f000 fbad 	bl	802b214 <parse_fifo>
 802aaba:	4603      	mov	r3, r0
 802aabc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802aac0:	2300      	movs	r3, #0
 802aac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802aac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aaca:	2b00      	cmp	r3, #0
 802aacc:	d102      	bne.n	802aad4 <bhy2_get_and_process_fifo+0x112>
 802aace:	69fb      	ldr	r3, [r7, #28]
 802aad0:	2b00      	cmp	r3, #0
 802aad2:	d003      	beq.n	802aadc <bhy2_get_and_process_fifo+0x11a>
 802aad4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aad8:	2b00      	cmp	r3, #0
 802aada:	d0b1      	beq.n	802aa40 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 802aadc:	2300      	movs	r3, #0
 802aade:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802aae0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802aae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802aae8:	e042      	b.n	802ab70 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802aaea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aaee:	f003 0318 	and.w	r3, r3, #24
 802aaf2:	2b08      	cmp	r3, #8
 802aaf4:	d00e      	beq.n	802ab14 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802aaf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aafa:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802aafe:	2b10      	cmp	r3, #16
 802ab00:	d008      	beq.n	802ab14 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802ab02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802ab06:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802ab0a:	2b18      	cmp	r3, #24
 802ab0c:	d002      	beq.n	802ab14 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802ab0e:	69fb      	ldr	r3, [r7, #28]
 802ab10:	2b00      	cmp	r3, #0
 802ab12:	d020      	beq.n	802ab56 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 802ab14:	2300      	movs	r3, #0
 802ab16:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802ab18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ab1a:	69bb      	ldr	r3, [r7, #24]
 802ab1c:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802ab1e:	6a3a      	ldr	r2, [r7, #32]
 802ab20:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802ab22:	1ad1      	subs	r1, r2, r3
 802ab24:	687b      	ldr	r3, [r7, #4]
 802ab26:	f107 0214 	add.w	r2, r7, #20
 802ab2a:	f102 0408 	add.w	r4, r2, #8
 802ab2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802ab32:	9300      	str	r3, [sp, #0]
 802ab34:	4623      	mov	r3, r4
 802ab36:	f001 fa98 	bl	802c06a <bhy2_hif_get_nonwakeup_fifo>
 802ab3a:	4603      	mov	r3, r0
 802ab3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802ab40:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802ab44:	2b00      	cmp	r3, #0
 802ab46:	d002      	beq.n	802ab4e <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 802ab48:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802ab4c:	e066      	b.n	802ac1c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802ab4e:	69ba      	ldr	r2, [r7, #24]
 802ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab52:	4413      	add	r3, r2
 802ab54:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 802ab56:	f107 0314 	add.w	r3, r7, #20
 802ab5a:	687a      	ldr	r2, [r7, #4]
 802ab5c:	4619      	mov	r1, r3
 802ab5e:	2001      	movs	r0, #1
 802ab60:	f000 fb58 	bl	802b214 <parse_fifo>
 802ab64:	4603      	mov	r3, r0
 802ab66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802ab6a:	2300      	movs	r3, #0
 802ab6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802ab70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802ab74:	2b00      	cmp	r3, #0
 802ab76:	d102      	bne.n	802ab7e <bhy2_get_and_process_fifo+0x1bc>
 802ab78:	69fb      	ldr	r3, [r7, #28]
 802ab7a:	2b00      	cmp	r3, #0
 802ab7c:	d003      	beq.n	802ab86 <bhy2_get_and_process_fifo+0x1c4>
 802ab7e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802ab82:	2b00      	cmp	r3, #0
 802ab84:	d0b1      	beq.n	802aaea <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 802ab86:	2300      	movs	r3, #0
 802ab88:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802ab8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802ab8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802ab92:	e036      	b.n	802ac02 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 802ab94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802ab98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ab9c:	2b00      	cmp	r3, #0
 802ab9e:	d102      	bne.n	802aba6 <bhy2_get_and_process_fifo+0x1e4>
 802aba0:	69fb      	ldr	r3, [r7, #28]
 802aba2:	2b00      	cmp	r3, #0
 802aba4:	d020      	beq.n	802abe8 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 802aba6:	2300      	movs	r3, #0
 802aba8:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 802abaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802abac:	69bb      	ldr	r3, [r7, #24]
 802abae:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802abb0:	6a3a      	ldr	r2, [r7, #32]
 802abb2:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 802abb4:	1ad1      	subs	r1, r2, r3
 802abb6:	687b      	ldr	r3, [r7, #4]
 802abb8:	f107 0214 	add.w	r2, r7, #20
 802abbc:	f102 0408 	add.w	r4, r2, #8
 802abc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802abc4:	9300      	str	r3, [sp, #0]
 802abc6:	4623      	mov	r3, r4
 802abc8:	f001 fab0 	bl	802c12c <bhy2_hif_get_status_fifo_async>
 802abcc:	4603      	mov	r3, r0
 802abce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802abd2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802abd6:	2b00      	cmp	r3, #0
 802abd8:	d002      	beq.n	802abe0 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 802abda:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802abde:	e01d      	b.n	802ac1c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802abe0:	69ba      	ldr	r2, [r7, #24]
 802abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802abe4:	4413      	add	r3, r2
 802abe6:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 802abe8:	f107 0314 	add.w	r3, r7, #20
 802abec:	687a      	ldr	r2, [r7, #4]
 802abee:	4619      	mov	r1, r3
 802abf0:	2002      	movs	r0, #2
 802abf2:	f000 fb0f 	bl	802b214 <parse_fifo>
 802abf6:	4603      	mov	r3, r0
 802abf8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802abfc:	2300      	movs	r3, #0
 802abfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802ac02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802ac06:	2b00      	cmp	r3, #0
 802ac08:	d102      	bne.n	802ac10 <bhy2_get_and_process_fifo+0x24e>
 802ac0a:	69fb      	ldr	r3, [r7, #28]
 802ac0c:	2b00      	cmp	r3, #0
 802ac0e:	d003      	beq.n	802ac18 <bhy2_get_and_process_fifo+0x256>
 802ac10:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802ac14:	2b00      	cmp	r3, #0
 802ac16:	d0bd      	beq.n	802ab94 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 802ac18:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 802ac1c:	4618      	mov	r0, r3
 802ac1e:	3734      	adds	r7, #52	; 0x34
 802ac20:	46bd      	mov	sp, r7
 802ac22:	bd90      	pop	{r4, r7, pc}

0802ac24 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 802ac24:	b580      	push	{r7, lr}
 802ac26:	b086      	sub	sp, #24
 802ac28:	af00      	add	r7, sp, #0
 802ac2a:	4603      	mov	r3, r0
 802ac2c:	ed87 0a02 	vstr	s0, [r7, #8]
 802ac30:	6079      	str	r1, [r7, #4]
 802ac32:	603a      	str	r2, [r7, #0]
 802ac34:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802ac36:	2300      	movs	r3, #0
 802ac38:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802ac3a:	683b      	ldr	r3, [r7, #0]
 802ac3c:	2b00      	cmp	r3, #0
 802ac3e:	d00a      	beq.n	802ac56 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 802ac40:	683a      	ldr	r2, [r7, #0]
 802ac42:	7bfb      	ldrb	r3, [r7, #15]
 802ac44:	6879      	ldr	r1, [r7, #4]
 802ac46:	ed97 0a02 	vldr	s0, [r7, #8]
 802ac4a:	4618      	mov	r0, r3
 802ac4c:	f001 fa84 	bl	802c158 <bhy2_hif_exec_sensor_conf_cmd>
 802ac50:	4603      	mov	r3, r0
 802ac52:	75fb      	strb	r3, [r7, #23]
 802ac54:	e001      	b.n	802ac5a <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802ac56:	23ff      	movs	r3, #255	; 0xff
 802ac58:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802ac5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802ac5e:	4618      	mov	r0, r3
 802ac60:	3718      	adds	r7, #24
 802ac62:	46bd      	mov	sp, r7
 802ac64:	bd80      	pop	{r7, pc}

0802ac66 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 802ac66:	b580      	push	{r7, lr}
 802ac68:	b084      	sub	sp, #16
 802ac6a:	af00      	add	r7, sp, #0
 802ac6c:	6078      	str	r0, [r7, #4]
 802ac6e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802ac70:	2300      	movs	r3, #0
 802ac72:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802ac74:	683b      	ldr	r3, [r7, #0]
 802ac76:	2b00      	cmp	r3, #0
 802ac78:	d007      	beq.n	802ac8a <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 802ac7a:	683b      	ldr	r3, [r7, #0]
 802ac7c:	4619      	mov	r1, r3
 802ac7e:	6878      	ldr	r0, [r7, #4]
 802ac80:	f001 f8e8 	bl	802be54 <bhy2_hif_get_product_id>
 802ac84:	4603      	mov	r3, r0
 802ac86:	73fb      	strb	r3, [r7, #15]
 802ac88:	e001      	b.n	802ac8e <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802ac8a:	23ff      	movs	r3, #255	; 0xff
 802ac8c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802ac8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802ac92:	4618      	mov	r0, r3
 802ac94:	3710      	adds	r7, #16
 802ac96:	46bd      	mov	sp, r7
 802ac98:	bd80      	pop	{r7, pc}

0802ac9a <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 802ac9a:	b580      	push	{r7, lr}
 802ac9c:	b084      	sub	sp, #16
 802ac9e:	af00      	add	r7, sp, #0
 802aca0:	6078      	str	r0, [r7, #4]
 802aca2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802aca4:	2300      	movs	r3, #0
 802aca6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802aca8:	683b      	ldr	r3, [r7, #0]
 802acaa:	2b00      	cmp	r3, #0
 802acac:	d007      	beq.n	802acbe <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 802acae:	683b      	ldr	r3, [r7, #0]
 802acb0:	4619      	mov	r1, r3
 802acb2:	6878      	ldr	r0, [r7, #4]
 802acb4:	f001 f8de 	bl	802be74 <bhy2_hif_get_kernel_version>
 802acb8:	4603      	mov	r3, r0
 802acba:	73fb      	strb	r3, [r7, #15]
 802acbc:	e001      	b.n	802acc2 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802acbe:	23ff      	movs	r3, #255	; 0xff
 802acc0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802acc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802acc6:	4618      	mov	r0, r3
 802acc8:	3710      	adds	r7, #16
 802acca:	46bd      	mov	sp, r7
 802accc:	bd80      	pop	{r7, pc}

0802acce <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 802acce:	b580      	push	{r7, lr}
 802acd0:	b084      	sub	sp, #16
 802acd2:	af00      	add	r7, sp, #0
 802acd4:	6078      	str	r0, [r7, #4]
 802acd6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802acd8:	2300      	movs	r3, #0
 802acda:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802acdc:	683b      	ldr	r3, [r7, #0]
 802acde:	2b00      	cmp	r3, #0
 802ace0:	d007      	beq.n	802acf2 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 802ace2:	683b      	ldr	r3, [r7, #0]
 802ace4:	4619      	mov	r1, r3
 802ace6:	6878      	ldr	r0, [r7, #4]
 802ace8:	f001 f8e8 	bl	802bebc <bhy2_hif_get_boot_status>
 802acec:	4603      	mov	r3, r0
 802acee:	73fb      	strb	r3, [r7, #15]
 802acf0:	e001      	b.n	802acf6 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802acf2:	23ff      	movs	r3, #255	; 0xff
 802acf4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802acf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802acfa:	4618      	mov	r0, r3
 802acfc:	3710      	adds	r7, #16
 802acfe:	46bd      	mov	sp, r7
 802ad00:	bd80      	pop	{r7, pc}

0802ad02 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 802ad02:	b580      	push	{r7, lr}
 802ad04:	b086      	sub	sp, #24
 802ad06:	af02      	add	r7, sp, #8
 802ad08:	6078      	str	r0, [r7, #4]
 802ad0a:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 802ad0c:	2300      	movs	r3, #0
 802ad0e:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 802ad10:	2300      	movs	r3, #0
 802ad12:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802ad14:	683b      	ldr	r3, [r7, #0]
 802ad16:	2b00      	cmp	r3, #0
 802ad18:	d00d      	beq.n	802ad36 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 802ad1a:	683b      	ldr	r3, [r7, #0]
 802ad1c:	f107 0208 	add.w	r2, r7, #8
 802ad20:	9300      	str	r3, [sp, #0]
 802ad22:	4613      	mov	r3, r2
 802ad24:	2220      	movs	r2, #32
 802ad26:	6879      	ldr	r1, [r7, #4]
 802ad28:	f240 101f 	movw	r0, #287	; 0x11f
 802ad2c:	f001 f80a 	bl	802bd44 <bhy2_hif_get_parameter>
 802ad30:	4603      	mov	r3, r0
 802ad32:	73fb      	strb	r3, [r7, #15]
 802ad34:	e001      	b.n	802ad3a <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802ad36:	23ff      	movs	r3, #255	; 0xff
 802ad38:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802ad3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802ad3e:	4618      	mov	r0, r3
 802ad40:	3710      	adds	r7, #16
 802ad42:	46bd      	mov	sp, r7
 802ad44:	bd80      	pop	{r7, pc}

0802ad46 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 802ad46:	b580      	push	{r7, lr}
 802ad48:	b086      	sub	sp, #24
 802ad4a:	af00      	add	r7, sp, #0
 802ad4c:	60f8      	str	r0, [r7, #12]
 802ad4e:	60b9      	str	r1, [r7, #8]
 802ad50:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802ad52:	2300      	movs	r3, #0
 802ad54:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 802ad56:	687b      	ldr	r3, [r7, #4]
 802ad58:	2b00      	cmp	r3, #0
 802ad5a:	d002      	beq.n	802ad62 <bhy2_upload_firmware_to_ram+0x1c>
 802ad5c:	68fb      	ldr	r3, [r7, #12]
 802ad5e:	2b00      	cmp	r3, #0
 802ad60:	d102      	bne.n	802ad68 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 802ad62:	23ff      	movs	r3, #255	; 0xff
 802ad64:	75fb      	strb	r3, [r7, #23]
 802ad66:	e007      	b.n	802ad78 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 802ad68:	687b      	ldr	r3, [r7, #4]
 802ad6a:	461a      	mov	r2, r3
 802ad6c:	68b9      	ldr	r1, [r7, #8]
 802ad6e:	68f8      	ldr	r0, [r7, #12]
 802ad70:	f001 f90d 	bl	802bf8e <bhy2_hif_upload_firmware_to_ram>
 802ad74:	4603      	mov	r3, r0
 802ad76:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802ad78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802ad7c:	4618      	mov	r0, r3
 802ad7e:	3718      	adds	r7, #24
 802ad80:	46bd      	mov	sp, r7
 802ad82:	bd80      	pop	{r7, pc}

0802ad84 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 802ad84:	b580      	push	{r7, lr}
 802ad86:	b084      	sub	sp, #16
 802ad88:	af00      	add	r7, sp, #0
 802ad8a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 802ad8c:	2300      	movs	r3, #0
 802ad8e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802ad90:	687b      	ldr	r3, [r7, #4]
 802ad92:	2b00      	cmp	r3, #0
 802ad94:	d102      	bne.n	802ad9c <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 802ad96:	23ff      	movs	r3, #255	; 0xff
 802ad98:	73fb      	strb	r3, [r7, #15]
 802ad9a:	e005      	b.n	802ada8 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 802ad9c:	687b      	ldr	r3, [r7, #4]
 802ad9e:	4618      	mov	r0, r3
 802ada0:	f001 f932 	bl	802c008 <bhy2_hif_boot_program_ram>
 802ada4:	4603      	mov	r3, r0
 802ada6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802ada8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802adac:	4618      	mov	r0, r3
 802adae:	3710      	adds	r7, #16
 802adb0:	46bd      	mov	sp, r7
 802adb2:	bd80      	pop	{r7, pc}

0802adb4 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 802adb4:	b580      	push	{r7, lr}
 802adb6:	b084      	sub	sp, #16
 802adb8:	af00      	add	r7, sp, #0
 802adba:	4603      	mov	r3, r0
 802adbc:	6039      	str	r1, [r7, #0]
 802adbe:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 802adc0:	2300      	movs	r3, #0
 802adc2:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802adc4:	683b      	ldr	r3, [r7, #0]
 802adc6:	2b00      	cmp	r3, #0
 802adc8:	d102      	bne.n	802add0 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 802adca:	23ff      	movs	r3, #255	; 0xff
 802adcc:	73fb      	strb	r3, [r7, #15]
 802adce:	e007      	b.n	802ade0 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 802add0:	683b      	ldr	r3, [r7, #0]
 802add2:	1df9      	adds	r1, r7, #7
 802add4:	2201      	movs	r2, #1
 802add6:	2007      	movs	r0, #7
 802add8:	f000 ff45 	bl	802bc66 <bhy2_hif_set_regs>
 802addc:	4603      	mov	r3, r0
 802adde:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802ade0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802ade4:	4618      	mov	r0, r3
 802ade6:	3710      	adds	r7, #16
 802ade8:	46bd      	mov	sp, r7
 802adea:	bd80      	pop	{r7, pc}

0802adec <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 802adec:	b580      	push	{r7, lr}
 802adee:	b084      	sub	sp, #16
 802adf0:	af00      	add	r7, sp, #0
 802adf2:	6078      	str	r0, [r7, #4]
 802adf4:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802adf6:	2300      	movs	r3, #0
 802adf8:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802adfa:	683b      	ldr	r3, [r7, #0]
 802adfc:	2b00      	cmp	r3, #0
 802adfe:	d102      	bne.n	802ae06 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802ae00:	23ff      	movs	r3, #255	; 0xff
 802ae02:	73fb      	strb	r3, [r7, #15]
 802ae04:	e007      	b.n	802ae16 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 802ae06:	683b      	ldr	r3, [r7, #0]
 802ae08:	2201      	movs	r2, #1
 802ae0a:	6879      	ldr	r1, [r7, #4]
 802ae0c:	2007      	movs	r0, #7
 802ae0e:	f000 fef2 	bl	802bbf6 <bhy2_hif_get_regs>
 802ae12:	4603      	mov	r3, r0
 802ae14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802ae16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802ae1a:	4618      	mov	r0, r3
 802ae1c:	3710      	adds	r7, #16
 802ae1e:	46bd      	mov	sp, r7
 802ae20:	bd80      	pop	{r7, pc}

0802ae22 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 802ae22:	b580      	push	{r7, lr}
 802ae24:	b084      	sub	sp, #16
 802ae26:	af00      	add	r7, sp, #0
 802ae28:	6078      	str	r0, [r7, #4]
 802ae2a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802ae2c:	2300      	movs	r3, #0
 802ae2e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802ae30:	683b      	ldr	r3, [r7, #0]
 802ae32:	2b00      	cmp	r3, #0
 802ae34:	d102      	bne.n	802ae3c <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802ae36:	23ff      	movs	r3, #255	; 0xff
 802ae38:	73fb      	strb	r3, [r7, #15]
 802ae3a:	e006      	b.n	802ae4a <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 802ae3c:	683b      	ldr	r3, [r7, #0]
 802ae3e:	4619      	mov	r1, r3
 802ae40:	6878      	ldr	r0, [r7, #4]
 802ae42:	f001 f84b 	bl	802bedc <bhy2_hif_get_interrupt_status>
 802ae46:	4603      	mov	r3, r0
 802ae48:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802ae4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802ae4e:	4618      	mov	r0, r3
 802ae50:	3710      	adds	r7, #16
 802ae52:	46bd      	mov	sp, r7
 802ae54:	bd80      	pop	{r7, pc}

0802ae56 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 802ae56:	b580      	push	{r7, lr}
 802ae58:	b084      	sub	sp, #16
 802ae5a:	af00      	add	r7, sp, #0
 802ae5c:	4603      	mov	r3, r0
 802ae5e:	6039      	str	r1, [r7, #0]
 802ae60:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 802ae62:	2300      	movs	r3, #0
 802ae64:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802ae66:	683b      	ldr	r3, [r7, #0]
 802ae68:	2b00      	cmp	r3, #0
 802ae6a:	d102      	bne.n	802ae72 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 802ae6c:	23ff      	movs	r3, #255	; 0xff
 802ae6e:	73fb      	strb	r3, [r7, #15]
 802ae70:	e007      	b.n	802ae82 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 802ae72:	683b      	ldr	r3, [r7, #0]
 802ae74:	1df9      	adds	r1, r7, #7
 802ae76:	2201      	movs	r2, #1
 802ae78:	2006      	movs	r0, #6
 802ae7a:	f000 fef4 	bl	802bc66 <bhy2_hif_set_regs>
 802ae7e:	4603      	mov	r3, r0
 802ae80:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802ae82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802ae86:	4618      	mov	r0, r3
 802ae88:	3710      	adds	r7, #16
 802ae8a:	46bd      	mov	sp, r7
 802ae8c:	bd80      	pop	{r7, pc}

0802ae8e <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 802ae8e:	b580      	push	{r7, lr}
 802ae90:	b084      	sub	sp, #16
 802ae92:	af00      	add	r7, sp, #0
 802ae94:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 802ae96:	2300      	movs	r3, #0
 802ae98:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802ae9a:	687b      	ldr	r3, [r7, #4]
 802ae9c:	2b00      	cmp	r3, #0
 802ae9e:	d102      	bne.n	802aea6 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 802aea0:	23ff      	movs	r3, #255	; 0xff
 802aea2:	73fb      	strb	r3, [r7, #15]
 802aea4:	e005      	b.n	802aeb2 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 802aea6:	687b      	ldr	r3, [r7, #4]
 802aea8:	4618      	mov	r0, r3
 802aeaa:	f001 f827 	bl	802befc <bhy2_hif_reset>
 802aeae:	4603      	mov	r3, r0
 802aeb0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802aeb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802aeb6:	4618      	mov	r0, r3
 802aeb8:	3710      	adds	r7, #16
 802aeba:	46bd      	mov	sp, r7
 802aebc:	bd80      	pop	{r7, pc}

0802aebe <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 802aebe:	b580      	push	{r7, lr}
 802aec0:	b08a      	sub	sp, #40	; 0x28
 802aec2:	af04      	add	r7, sp, #16
 802aec4:	60b9      	str	r1, [r7, #8]
 802aec6:	607a      	str	r2, [r7, #4]
 802aec8:	603b      	str	r3, [r7, #0]
 802aeca:	4603      	mov	r3, r0
 802aecc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802aece:	2300      	movs	r3, #0
 802aed0:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aed4:	2b00      	cmp	r3, #0
 802aed6:	d014      	beq.n	802af02 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 802aed8:	f640 1238 	movw	r2, #2360	; 0x938
 802aedc:	2100      	movs	r1, #0
 802aede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aee0:	f014 f8b2 	bl	803f048 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 802aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aee6:	7bf8      	ldrb	r0, [r7, #15]
 802aee8:	9302      	str	r3, [sp, #8]
 802aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802aeec:	9301      	str	r3, [sp, #4]
 802aeee:	6a3b      	ldr	r3, [r7, #32]
 802aef0:	9300      	str	r3, [sp, #0]
 802aef2:	683b      	ldr	r3, [r7, #0]
 802aef4:	687a      	ldr	r2, [r7, #4]
 802aef6:	68b9      	ldr	r1, [r7, #8]
 802aef8:	f000 fe3e 	bl	802bb78 <bhy2_hif_init>
 802aefc:	4603      	mov	r3, r0
 802aefe:	75fb      	strb	r3, [r7, #23]
 802af00:	e001      	b.n	802af06 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802af02:	23ff      	movs	r3, #255	; 0xff
 802af04:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802af06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802af0a:	4618      	mov	r0, r3
 802af0c:	3718      	adds	r7, #24
 802af0e:	46bd      	mov	sp, r7
 802af10:	bd80      	pop	{r7, pc}

0802af12 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 802af12:	b480      	push	{r7}
 802af14:	b087      	sub	sp, #28
 802af16:	af00      	add	r7, sp, #0
 802af18:	60b9      	str	r1, [r7, #8]
 802af1a:	607a      	str	r2, [r7, #4]
 802af1c:	603b      	str	r3, [r7, #0]
 802af1e:	4603      	mov	r3, r0
 802af20:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802af22:	2300      	movs	r3, #0
 802af24:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 802af26:	683b      	ldr	r3, [r7, #0]
 802af28:	2b00      	cmp	r3, #0
 802af2a:	d002      	beq.n	802af32 <bhy2_register_fifo_parse_callback+0x20>
 802af2c:	68bb      	ldr	r3, [r7, #8]
 802af2e:	2b00      	cmp	r3, #0
 802af30:	d102      	bne.n	802af38 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 802af32:	23ff      	movs	r3, #255	; 0xff
 802af34:	75fb      	strb	r3, [r7, #23]
 802af36:	e013      	b.n	802af60 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 802af38:	7bfa      	ldrb	r2, [r7, #15]
 802af3a:	6839      	ldr	r1, [r7, #0]
 802af3c:	4613      	mov	r3, r2
 802af3e:	00db      	lsls	r3, r3, #3
 802af40:	4413      	add	r3, r2
 802af42:	440b      	add	r3, r1
 802af44:	3318      	adds	r3, #24
 802af46:	68ba      	ldr	r2, [r7, #8]
 802af48:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 802af4c:	7bfa      	ldrb	r2, [r7, #15]
 802af4e:	6839      	ldr	r1, [r7, #0]
 802af50:	4613      	mov	r3, r2
 802af52:	00db      	lsls	r3, r3, #3
 802af54:	4413      	add	r3, r2
 802af56:	440b      	add	r3, r1
 802af58:	3318      	adds	r3, #24
 802af5a:	687a      	ldr	r2, [r7, #4]
 802af5c:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 802af60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802af64:	4618      	mov	r0, r3
 802af66:	371c      	adds	r7, #28
 802af68:	46bd      	mov	sp, r7
 802af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af6e:	4770      	bx	lr

0802af70 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 802af70:	b580      	push	{r7, lr}
 802af72:	b092      	sub	sp, #72	; 0x48
 802af74:	af00      	add	r7, sp, #0
 802af76:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 802af78:	687b      	ldr	r3, [r7, #4]
 802af7a:	2b00      	cmp	r3, #0
 802af7c:	d103      	bne.n	802af86 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 802af7e:	23ff      	movs	r3, #255	; 0xff
 802af80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802af84:	e079      	b.n	802b07a <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 802af86:	f107 0308 	add.w	r3, r7, #8
 802af8a:	6879      	ldr	r1, [r7, #4]
 802af8c:	4618      	mov	r0, r3
 802af8e:	f7ff feb8 	bl	802ad02 <bhy2_get_virt_sensor_list>
 802af92:	4603      	mov	r3, r0
 802af94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 802af98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802af9c:	2b00      	cmp	r3, #0
 802af9e:	d16c      	bne.n	802b07a <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 802afa0:	687b      	ldr	r3, [r7, #4]
 802afa2:	2201      	movs	r2, #1
 802afa4:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802afa6:	2301      	movs	r3, #1
 802afa8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802afac:	e041      	b.n	802b032 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 802afae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802afb2:	08db      	lsrs	r3, r3, #3
 802afb4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 802afb8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802afbc:	f003 0307 	and.w	r3, r3, #7
 802afc0:	2201      	movs	r2, #1
 802afc2:	fa02 f303 	lsl.w	r3, r2, r3
 802afc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 802afca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802afce:	3348      	adds	r3, #72	; 0x48
 802afd0:	443b      	add	r3, r7
 802afd2:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 802afd6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 802afda:	4013      	ands	r3, r2
 802afdc:	b2db      	uxtb	r3, r3
 802afde:	2b00      	cmp	r3, #0
 802afe0:	d022      	beq.n	802b028 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 802afe2:	687a      	ldr	r2, [r7, #4]
 802afe4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802afe8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802afec:	4618      	mov	r0, r3
 802afee:	f001 f8e6 	bl	802c1be <bhy2_hif_get_sensor_info>
 802aff2:	4603      	mov	r3, r0
 802aff4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 802aff8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802affc:	2b00      	cmp	r3, #0
 802affe:	d113      	bne.n	802b028 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 802b000:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802b004:	2b00      	cmp	r3, #0
 802b006:	d103      	bne.n	802b010 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 802b008:	23f8      	movs	r3, #248	; 0xf8
 802b00a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 802b00e:	e018      	b.n	802b042 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 802b010:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802b014:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 802b018:	6879      	ldr	r1, [r7, #4]
 802b01a:	4613      	mov	r3, r2
 802b01c:	00db      	lsls	r3, r3, #3
 802b01e:	4413      	add	r3, r2
 802b020:	440b      	add	r3, r1
 802b022:	331c      	adds	r3, #28
 802b024:	4602      	mov	r2, r0
 802b026:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802b028:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b02c:	3301      	adds	r3, #1
 802b02e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802b032:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b036:	2bf4      	cmp	r3, #244	; 0xf4
 802b038:	d803      	bhi.n	802b042 <bhy2_update_virtual_sensor_list+0xd2>
 802b03a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802b03e:	2b00      	cmp	r3, #0
 802b040:	d0b5      	beq.n	802afae <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 802b042:	23ff      	movs	r3, #255	; 0xff
 802b044:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802b048:	e013      	b.n	802b072 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802b04a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b04e:	3bf5      	subs	r3, #245	; 0xf5
 802b050:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802b054:	490c      	ldr	r1, [pc, #48]	; (802b088 <bhy2_update_virtual_sensor_list+0x118>)
 802b056:	5cc8      	ldrb	r0, [r1, r3]
 802b058:	6879      	ldr	r1, [r7, #4]
 802b05a:	4613      	mov	r3, r2
 802b05c:	00db      	lsls	r3, r3, #3
 802b05e:	4413      	add	r3, r2
 802b060:	440b      	add	r3, r1
 802b062:	331c      	adds	r3, #28
 802b064:	4602      	mov	r2, r0
 802b066:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 802b068:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b06c:	3b01      	subs	r3, #1
 802b06e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802b072:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b076:	2bf4      	cmp	r3, #244	; 0xf4
 802b078:	d8e7      	bhi.n	802b04a <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 802b07a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 802b07e:	4618      	mov	r0, r3
 802b080:	3748      	adds	r7, #72	; 0x48
 802b082:	46bd      	mov	sp, r7
 802b084:	bd80      	pop	{r7, pc}
 802b086:	bf00      	nop
 802b088:	0805b264 	.word	0x0805b264

0802b08c <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 802b08c:	b580      	push	{r7, lr}
 802b08e:	b084      	sub	sp, #16
 802b090:	af00      	add	r7, sp, #0
 802b092:	6078      	str	r0, [r7, #4]
 802b094:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802b096:	2300      	movs	r3, #0
 802b098:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 802b09a:	683b      	ldr	r3, [r7, #0]
 802b09c:	2b00      	cmp	r3, #0
 802b09e:	d002      	beq.n	802b0a6 <bhy2_get_error_value+0x1a>
 802b0a0:	687b      	ldr	r3, [r7, #4]
 802b0a2:	2b00      	cmp	r3, #0
 802b0a4:	d102      	bne.n	802b0ac <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 802b0a6:	23ff      	movs	r3, #255	; 0xff
 802b0a8:	73fb      	strb	r3, [r7, #15]
 802b0aa:	e007      	b.n	802b0bc <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 802b0ac:	683b      	ldr	r3, [r7, #0]
 802b0ae:	2201      	movs	r2, #1
 802b0b0:	6879      	ldr	r1, [r7, #4]
 802b0b2:	202e      	movs	r0, #46	; 0x2e
 802b0b4:	f7ff fc66 	bl	802a984 <bhy2_get_regs>
 802b0b8:	4603      	mov	r3, r0
 802b0ba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b0c0:	4618      	mov	r0, r3
 802b0c2:	3710      	adds	r7, #16
 802b0c4:	46bd      	mov	sp, r7
 802b0c6:	bd80      	pop	{r7, pc}

0802b0c8 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 802b0c8:	b480      	push	{r7}
 802b0ca:	b087      	sub	sp, #28
 802b0cc:	af00      	add	r7, sp, #0
 802b0ce:	4603      	mov	r3, r0
 802b0d0:	60b9      	str	r1, [r7, #8]
 802b0d2:	607a      	str	r2, [r7, #4]
 802b0d4:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 802b0d6:	2300      	movs	r3, #0
 802b0d8:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 802b0da:	687b      	ldr	r3, [r7, #4]
 802b0dc:	2b00      	cmp	r3, #0
 802b0de:	d04e      	beq.n	802b17e <get_callback_info+0xb6>
 802b0e0:	68bb      	ldr	r3, [r7, #8]
 802b0e2:	2b00      	cmp	r3, #0
 802b0e4:	d04b      	beq.n	802b17e <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 802b0e6:	7bfa      	ldrb	r2, [r7, #15]
 802b0e8:	68b8      	ldr	r0, [r7, #8]
 802b0ea:	6879      	ldr	r1, [r7, #4]
 802b0ec:	4613      	mov	r3, r2
 802b0ee:	00db      	lsls	r3, r3, #3
 802b0f0:	4413      	add	r3, r2
 802b0f2:	440b      	add	r3, r1
 802b0f4:	3318      	adds	r3, #24
 802b0f6:	4602      	mov	r2, r0
 802b0f8:	3304      	adds	r3, #4
 802b0fa:	6818      	ldr	r0, [r3, #0]
 802b0fc:	6859      	ldr	r1, [r3, #4]
 802b0fe:	6010      	str	r0, [r2, #0]
 802b100:	6051      	str	r1, [r2, #4]
 802b102:	7a1b      	ldrb	r3, [r3, #8]
 802b104:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 802b106:	7bfb      	ldrb	r3, [r7, #15]
 802b108:	2bf4      	cmp	r3, #244	; 0xf4
 802b10a:	d91b      	bls.n	802b144 <get_callback_info+0x7c>
 802b10c:	68bb      	ldr	r3, [r7, #8]
 802b10e:	781b      	ldrb	r3, [r3, #0]
 802b110:	2b00      	cmp	r3, #0
 802b112:	d117      	bne.n	802b144 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 802b114:	68bb      	ldr	r3, [r7, #8]
 802b116:	2200      	movs	r2, #0
 802b118:	705a      	strb	r2, [r3, #1]
 802b11a:	2200      	movs	r2, #0
 802b11c:	709a      	strb	r2, [r3, #2]
 802b11e:	2200      	movs	r2, #0
 802b120:	70da      	strb	r2, [r3, #3]
 802b122:	2200      	movs	r2, #0
 802b124:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802b126:	68bb      	ldr	r3, [r7, #8]
 802b128:	2200      	movs	r2, #0
 802b12a:	715a      	strb	r2, [r3, #5]
 802b12c:	2200      	movs	r2, #0
 802b12e:	719a      	strb	r2, [r3, #6]
 802b130:	2200      	movs	r2, #0
 802b132:	71da      	strb	r2, [r3, #7]
 802b134:	2200      	movs	r2, #0
 802b136:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802b138:	7bfb      	ldrb	r3, [r7, #15]
 802b13a:	3bf5      	subs	r3, #245	; 0xf5
 802b13c:	4a16      	ldr	r2, [pc, #88]	; (802b198 <get_callback_info+0xd0>)
 802b13e:	5cd2      	ldrb	r2, [r2, r3]
 802b140:	68bb      	ldr	r3, [r7, #8]
 802b142:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 802b144:	7bfb      	ldrb	r3, [r7, #15]
 802b146:	2b00      	cmp	r3, #0
 802b148:	d11c      	bne.n	802b184 <get_callback_info+0xbc>
 802b14a:	68bb      	ldr	r3, [r7, #8]
 802b14c:	781b      	ldrb	r3, [r3, #0]
 802b14e:	2b00      	cmp	r3, #0
 802b150:	d118      	bne.n	802b184 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 802b152:	68bb      	ldr	r3, [r7, #8]
 802b154:	2200      	movs	r2, #0
 802b156:	705a      	strb	r2, [r3, #1]
 802b158:	2200      	movs	r2, #0
 802b15a:	709a      	strb	r2, [r3, #2]
 802b15c:	2200      	movs	r2, #0
 802b15e:	70da      	strb	r2, [r3, #3]
 802b160:	2200      	movs	r2, #0
 802b162:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802b164:	68bb      	ldr	r3, [r7, #8]
 802b166:	2200      	movs	r2, #0
 802b168:	715a      	strb	r2, [r3, #5]
 802b16a:	2200      	movs	r2, #0
 802b16c:	719a      	strb	r2, [r3, #6]
 802b16e:	2200      	movs	r2, #0
 802b170:	71da      	strb	r2, [r3, #7]
 802b172:	2200      	movs	r2, #0
 802b174:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 802b176:	68bb      	ldr	r3, [r7, #8]
 802b178:	2201      	movs	r2, #1
 802b17a:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 802b17c:	e002      	b.n	802b184 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b17e:	23ff      	movs	r3, #255	; 0xff
 802b180:	75fb      	strb	r3, [r7, #23]
 802b182:	e000      	b.n	802b186 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 802b184:	bf00      	nop
    }

    return rslt;
 802b186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b18a:	4618      	mov	r0, r3
 802b18c:	371c      	adds	r7, #28
 802b18e:	46bd      	mov	sp, r7
 802b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b194:	4770      	bx	lr
 802b196:	bf00      	nop
 802b198:	0805b264 	.word	0x0805b264

0802b19c <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 802b19c:	b480      	push	{r7}
 802b19e:	b085      	sub	sp, #20
 802b1a0:	af00      	add	r7, sp, #0
 802b1a2:	60f8      	str	r0, [r7, #12]
 802b1a4:	460b      	mov	r3, r1
 802b1a6:	607a      	str	r2, [r7, #4]
 802b1a8:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 802b1aa:	68fb      	ldr	r3, [r7, #12]
 802b1ac:	681a      	ldr	r2, [r3, #0]
 802b1ae:	7afb      	ldrb	r3, [r7, #11]
 802b1b0:	441a      	add	r2, r3
 802b1b2:	68fb      	ldr	r3, [r7, #12]
 802b1b4:	685b      	ldr	r3, [r3, #4]
 802b1b6:	429a      	cmp	r2, r3
 802b1b8:	d803      	bhi.n	802b1c2 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 802b1ba:	687b      	ldr	r3, [r7, #4]
 802b1bc:	2200      	movs	r2, #0
 802b1be:	701a      	strb	r2, [r3, #0]
 802b1c0:	e002      	b.n	802b1c8 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 802b1c2:	687b      	ldr	r3, [r7, #4]
 802b1c4:	2201      	movs	r2, #1
 802b1c6:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 802b1c8:	2300      	movs	r3, #0
}
 802b1ca:	4618      	mov	r0, r3
 802b1cc:	3714      	adds	r7, #20
 802b1ce:	46bd      	mov	sp, r7
 802b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1d4:	4770      	bx	lr

0802b1d6 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 802b1d6:	b480      	push	{r7}
 802b1d8:	b087      	sub	sp, #28
 802b1da:	af00      	add	r7, sp, #0
 802b1dc:	4603      	mov	r3, r0
 802b1de:	60b9      	str	r1, [r7, #8]
 802b1e0:	607a      	str	r2, [r7, #4]
 802b1e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802b1e4:	2300      	movs	r3, #0
 802b1e6:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 802b1e8:	7bfb      	ldrb	r3, [r7, #15]
 802b1ea:	2b02      	cmp	r3, #2
 802b1ec:	d808      	bhi.n	802b200 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 802b1ee:	7bfb      	ldrb	r3, [r7, #15]
 802b1f0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 802b1f4:	00db      	lsls	r3, r3, #3
 802b1f6:	687a      	ldr	r2, [r7, #4]
 802b1f8:	441a      	add	r2, r3
 802b1fa:	68bb      	ldr	r3, [r7, #8]
 802b1fc:	601a      	str	r2, [r3, #0]
 802b1fe:	e001      	b.n	802b204 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 802b200:	23f9      	movs	r3, #249	; 0xf9
 802b202:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802b204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b208:	4618      	mov	r0, r3
 802b20a:	371c      	adds	r7, #28
 802b20c:	46bd      	mov	sp, r7
 802b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b212:	4770      	bx	lr

0802b214 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 802b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b218:	b099      	sub	sp, #100	; 0x64
 802b21a:	af00      	add	r7, sp, #0
 802b21c:	4603      	mov	r3, r0
 802b21e:	62b9      	str	r1, [r7, #40]	; 0x28
 802b220:	627a      	str	r2, [r7, #36]	; 0x24
 802b222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 802b226:	2300      	movs	r3, #0
 802b228:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 802b22c:	2300      	movs	r3, #0
 802b22e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 802b232:	2300      	movs	r3, #0
 802b234:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 802b238:	2300      	movs	r3, #0
 802b23a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802b23e:	e16a      	b.n	802b516 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 802b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b242:	681b      	ldr	r3, [r3, #0]
 802b244:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 802b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b248:	691a      	ldr	r2, [r3, #16]
 802b24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b24c:	4413      	add	r3, r2
 802b24e:	781b      	ldrb	r3, [r3, #0]
 802b250:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 802b254:	f107 0144 	add.w	r1, r7, #68	; 0x44
 802b258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b25e:	4618      	mov	r0, r3
 802b260:	f7ff ffb9 	bl	802b1d6 <get_time_stamp>
 802b264:	4603      	mov	r3, r0
 802b266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 802b26a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b26e:	2b00      	cmp	r3, #0
 802b270:	d002      	beq.n	802b278 <parse_fifo+0x64>
        {
            return rslt;
 802b272:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b276:	e191      	b.n	802b59c <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 802b278:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802b27c:	2b00      	cmp	r3, #0
 802b27e:	d025      	beq.n	802b2cc <parse_fifo+0xb8>
 802b280:	2b00      	cmp	r3, #0
 802b282:	f2c0 80f6 	blt.w	802b472 <parse_fifo+0x25e>
 802b286:	2bff      	cmp	r3, #255	; 0xff
 802b288:	f300 80f3 	bgt.w	802b472 <parse_fifo+0x25e>
 802b28c:	2bf5      	cmp	r3, #245	; 0xf5
 802b28e:	f2c0 80f0 	blt.w	802b472 <parse_fifo+0x25e>
 802b292:	3bf5      	subs	r3, #245	; 0xf5
 802b294:	2b0a      	cmp	r3, #10
 802b296:	f200 80ec 	bhi.w	802b472 <parse_fifo+0x25e>
 802b29a:	a201      	add	r2, pc, #4	; (adr r2, 802b2a0 <parse_fifo+0x8c>)
 802b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b2a0:	0802b2d9 	.word	0x0802b2d9
 802b2a4:	0802b341 	.word	0x0802b341
 802b2a8:	0802b3bf 	.word	0x0802b3bf
 802b2ac:	0802b473 	.word	0x0802b473
 802b2b0:	0802b473 	.word	0x0802b473
 802b2b4:	0802b473 	.word	0x0802b473
 802b2b8:	0802b2d9 	.word	0x0802b2d9
 802b2bc:	0802b341 	.word	0x0802b341
 802b2c0:	0802b3bf 	.word	0x0802b3bf
 802b2c4:	0802b473 	.word	0x0802b473
 802b2c8:	0802b2cd 	.word	0x0802b2cd
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 802b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b2ce:	681b      	ldr	r3, [r3, #0]
 802b2d0:	1c5a      	adds	r2, r3, #1
 802b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b2d4:	601a      	str	r2, [r3, #0]
                break;
 802b2d6:	e11e      	b.n	802b516 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 802b2d8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b2dc:	461a      	mov	r2, r3
 802b2de:	2102      	movs	r1, #2
 802b2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b2e2:	f7ff ff5b 	bl	802b19c <get_buffer_status>
 802b2e6:	4603      	mov	r3, r0
 802b2e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b2ec:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b2f0:	2b00      	cmp	r3, #0
 802b2f2:	d002      	beq.n	802b2fa <parse_fifo+0xe6>
                {
                    return rslt;
 802b2f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b2f8:	e150      	b.n	802b59c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b2fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b2fe:	2b00      	cmp	r3, #0
 802b300:	d000      	beq.n	802b304 <parse_fifo+0xf0>
                {
                    break;
 802b302:	e108      	b.n	802b516 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 802b304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b306:	e9d3 0100 	ldrd	r0, r1, [r3]
 802b30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b30c:	691a      	ldr	r2, [r3, #16]
 802b30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b310:	3301      	adds	r3, #1
 802b312:	4413      	add	r3, r2
 802b314:	781b      	ldrb	r3, [r3, #0]
 802b316:	b2db      	uxtb	r3, r3
 802b318:	2200      	movs	r2, #0
 802b31a:	469a      	mov	sl, r3
 802b31c:	4693      	mov	fp, r2
 802b31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b320:	eb10 020a 	adds.w	r2, r0, sl
 802b324:	61ba      	str	r2, [r7, #24]
 802b326:	eb41 020b 	adc.w	r2, r1, fp
 802b32a:	61fa      	str	r2, [r7, #28]
 802b32c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802b330:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 802b334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b336:	681b      	ldr	r3, [r3, #0]
 802b338:	1c9a      	adds	r2, r3, #2
 802b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b33c:	601a      	str	r2, [r3, #0]
                break;
 802b33e:	e0ea      	b.n	802b516 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 802b340:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b344:	461a      	mov	r2, r3
 802b346:	2103      	movs	r1, #3
 802b348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b34a:	f7ff ff27 	bl	802b19c <get_buffer_status>
 802b34e:	4603      	mov	r3, r0
 802b350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b354:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b358:	2b00      	cmp	r3, #0
 802b35a:	d002      	beq.n	802b362 <parse_fifo+0x14e>
                {
                    return rslt;
 802b35c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b360:	e11c      	b.n	802b59c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b366:	2b00      	cmp	r3, #0
 802b368:	d000      	beq.n	802b36c <parse_fifo+0x158>
                {
                    break;
 802b36a:	e0d4      	b.n	802b516 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 802b36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b36e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b374:	691a      	ldr	r2, [r3, #16]
 802b376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b378:	3301      	adds	r3, #1
 802b37a:	4413      	add	r3, r2
 802b37c:	781b      	ldrb	r3, [r3, #0]
 802b37e:	b21c      	sxth	r4, r3
 802b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b382:	691a      	ldr	r2, [r3, #16]
 802b384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b386:	3302      	adds	r3, #2
 802b388:	4413      	add	r3, r2
 802b38a:	781b      	ldrb	r3, [r3, #0]
 802b38c:	021b      	lsls	r3, r3, #8
 802b38e:	b21b      	sxth	r3, r3
 802b390:	4323      	orrs	r3, r4
 802b392:	b21b      	sxth	r3, r3
 802b394:	b29b      	uxth	r3, r3
 802b396:	b29b      	uxth	r3, r3
 802b398:	2200      	movs	r2, #0
 802b39a:	461d      	mov	r5, r3
 802b39c:	4616      	mov	r6, r2
 802b39e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b3a0:	1942      	adds	r2, r0, r5
 802b3a2:	613a      	str	r2, [r7, #16]
 802b3a4:	eb41 0206 	adc.w	r2, r1, r6
 802b3a8:	617a      	str	r2, [r7, #20]
 802b3aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802b3ae:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 802b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b3b4:	681b      	ldr	r3, [r3, #0]
 802b3b6:	1cda      	adds	r2, r3, #3
 802b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b3ba:	601a      	str	r2, [r3, #0]
                break;
 802b3bc:	e0ab      	b.n	802b516 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 802b3be:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b3c2:	461a      	mov	r2, r3
 802b3c4:	2106      	movs	r1, #6
 802b3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b3c8:	f7ff fee8 	bl	802b19c <get_buffer_status>
 802b3cc:	4603      	mov	r3, r0
 802b3ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b3d2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b3d6:	2b00      	cmp	r3, #0
 802b3d8:	d002      	beq.n	802b3e0 <parse_fifo+0x1cc>
                {
                    return rslt;
 802b3da:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b3de:	e0dd      	b.n	802b59c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b3e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b3e4:	2b00      	cmp	r3, #0
 802b3e6:	d000      	beq.n	802b3ea <parse_fifo+0x1d6>
                {
                    break;
 802b3e8:	e095      	b.n	802b516 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 802b3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b3ec:	691a      	ldr	r2, [r3, #16]
 802b3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b3f0:	3301      	adds	r3, #1
 802b3f2:	4413      	add	r3, r2
 802b3f4:	781b      	ldrb	r3, [r3, #0]
 802b3f6:	4619      	mov	r1, r3
 802b3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b3fa:	691a      	ldr	r2, [r3, #16]
 802b3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b3fe:	3302      	adds	r3, #2
 802b400:	4413      	add	r3, r2
 802b402:	781b      	ldrb	r3, [r3, #0]
 802b404:	021b      	lsls	r3, r3, #8
 802b406:	4319      	orrs	r1, r3
 802b408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b40a:	691a      	ldr	r2, [r3, #16]
 802b40c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b40e:	3303      	adds	r3, #3
 802b410:	4413      	add	r3, r2
 802b412:	781b      	ldrb	r3, [r3, #0]
 802b414:	041b      	lsls	r3, r3, #16
 802b416:	4319      	orrs	r1, r3
 802b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b41a:	691a      	ldr	r2, [r3, #16]
 802b41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b41e:	3304      	adds	r3, #4
 802b420:	4413      	add	r3, r2
 802b422:	781b      	ldrb	r3, [r3, #0]
 802b424:	061b      	lsls	r3, r3, #24
 802b426:	430b      	orrs	r3, r1
 802b428:	2200      	movs	r2, #0
 802b42a:	4698      	mov	r8, r3
 802b42c:	4691      	mov	r9, r2
 802b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b430:	691a      	ldr	r2, [r3, #16]
 802b432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b434:	3305      	adds	r3, #5
 802b436:	4413      	add	r3, r2
 802b438:	781b      	ldrb	r3, [r3, #0]
 802b43a:	b2db      	uxtb	r3, r3
 802b43c:	2200      	movs	r2, #0
 802b43e:	60bb      	str	r3, [r7, #8]
 802b440:	60fa      	str	r2, [r7, #12]
 802b442:	f04f 0200 	mov.w	r2, #0
 802b446:	f04f 0300 	mov.w	r3, #0
 802b44a:	68b9      	ldr	r1, [r7, #8]
 802b44c:	000b      	movs	r3, r1
 802b44e:	2200      	movs	r2, #0
 802b450:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802b452:	ea48 0002 	orr.w	r0, r8, r2
 802b456:	6038      	str	r0, [r7, #0]
 802b458:	ea49 0303 	orr.w	r3, r9, r3
 802b45c:	607b      	str	r3, [r7, #4]
 802b45e:	e9d7 3400 	ldrd	r3, r4, [r7]
 802b462:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 802b466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b468:	681b      	ldr	r3, [r3, #0]
 802b46a:	1d9a      	adds	r2, r3, #6
 802b46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b46e:	601a      	str	r2, [r3, #0]
                break;
 802b470:	e051      	b.n	802b516 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 802b472:	f107 0138 	add.w	r1, r7, #56	; 0x38
 802b476:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802b47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b47c:	4618      	mov	r0, r3
 802b47e:	f7ff fe23 	bl	802b0c8 <get_callback_info>
 802b482:	4603      	mov	r3, r0
 802b484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 802b488:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b48c:	2b00      	cmp	r3, #0
 802b48e:	d002      	beq.n	802b496 <parse_fifo+0x282>
                {
                    return rslt;
 802b490:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b494:	e082      	b.n	802b59c <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 802b496:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 802b49a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b49e:	461a      	mov	r2, r3
 802b4a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b4a2:	f7ff fe7b 	bl	802b19c <get_buffer_status>
 802b4a6:	4603      	mov	r3, r0
 802b4a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b4ac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b4b0:	2b00      	cmp	r3, #0
 802b4b2:	d002      	beq.n	802b4ba <parse_fifo+0x2a6>
                {
                    return rslt;
 802b4b4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b4b8:	e070      	b.n	802b59c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b4ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b4be:	2b00      	cmp	r3, #0
 802b4c0:	d000      	beq.n	802b4c4 <parse_fifo+0x2b0>
                {
                    break;
 802b4c2:	e028      	b.n	802b516 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 802b4c4:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 802b4c8:	2b00      	cmp	r3, #0
 802b4ca:	d01c      	beq.n	802b506 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 802b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b4ce:	691a      	ldr	r2, [r3, #16]
 802b4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b4d2:	3301      	adds	r3, #1
 802b4d4:	4413      	add	r3, r2
 802b4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 802b4d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b4dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 802b4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b4e2:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 802b4e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802b4e8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 802b4ec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802b4f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 802b4f4:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 802b4f8:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 802b4fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802b500:	4611      	mov	r1, r2
 802b502:	4618      	mov	r0, r3
 802b504:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 802b506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b508:	681a      	ldr	r2, [r3, #0]
 802b50a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802b50e:	441a      	add	r2, r3
 802b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b512:	601a      	str	r2, [r3, #0]
                break;
 802b514:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b518:	681a      	ldr	r2, [r3, #0]
 802b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b51c:	685b      	ldr	r3, [r3, #4]
 802b51e:	429a      	cmp	r2, r3
 802b520:	d204      	bcs.n	802b52c <parse_fifo+0x318>
 802b522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b526:	2b00      	cmp	r3, #0
 802b528:	f43f ae8a 	beq.w	802b240 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 802b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b52e:	685b      	ldr	r3, [r3, #4]
 802b530:	2b00      	cmp	r3, #0
 802b532:	d031      	beq.n	802b598 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 802b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b536:	685a      	ldr	r2, [r3, #4]
 802b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b53a:	681b      	ldr	r3, [r3, #0]
 802b53c:	429a      	cmp	r2, r3
 802b53e:	d202      	bcs.n	802b546 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 802b540:	f06f 0301 	mvn.w	r3, #1
 802b544:	e02a      	b.n	802b59c <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 802b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b548:	685a      	ldr	r2, [r3, #4]
 802b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b54c:	681b      	ldr	r3, [r3, #0]
 802b54e:	1ad2      	subs	r2, r2, r3
 802b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b552:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 802b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b556:	685b      	ldr	r3, [r3, #4]
 802b558:	2b00      	cmp	r3, #0
 802b55a:	d01d      	beq.n	802b598 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 802b55c:	2300      	movs	r3, #0
 802b55e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 802b562:	e013      	b.n	802b58c <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 802b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b566:	691a      	ldr	r2, [r3, #16]
 802b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b56a:	6819      	ldr	r1, [r3, #0]
 802b56c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802b570:	440b      	add	r3, r1
 802b572:	441a      	add	r2, r3
 802b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b576:	6919      	ldr	r1, [r3, #16]
 802b578:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802b57c:	440b      	add	r3, r1
 802b57e:	7812      	ldrb	r2, [r2, #0]
 802b580:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 802b582:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802b586:	3301      	adds	r3, #1
 802b588:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 802b58c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 802b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b592:	685b      	ldr	r3, [r3, #4]
 802b594:	429a      	cmp	r2, r3
 802b596:	d3e5      	bcc.n	802b564 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 802b598:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 802b59c:	4618      	mov	r0, r3
 802b59e:	3764      	adds	r7, #100	; 0x64
 802b5a0:	46bd      	mov	sp, r7
 802b5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b5a6:	bf00      	nop

0802b5a8 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 802b5a8:	b590      	push	{r4, r7, lr}
 802b5aa:	b0cf      	sub	sp, #316	; 0x13c
 802b5ac:	af00      	add	r7, sp, #0
 802b5ae:	4604      	mov	r4, r0
 802b5b0:	f507 709c 	add.w	r0, r7, #312	; 0x138
 802b5b4:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 802b5b8:	6001      	str	r1, [r0, #0]
 802b5ba:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802b5be:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 802b5c2:	600a      	str	r2, [r1, #0]
 802b5c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802b5c8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802b5cc:	6013      	str	r3, [r2, #0]
 802b5ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b5d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802b5d6:	4622      	mov	r2, r4
 802b5d8:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 802b5da:	2300      	movs	r3, #0
 802b5dc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 802b5e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802b5e4:	2b00      	cmp	r3, #0
 802b5e6:	f000 81af 	beq.w	802b948 <bhy2_hif_exec_cmd_generic+0x3a0>
 802b5ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b5ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b5f2:	681b      	ldr	r3, [r3, #0]
 802b5f4:	2b00      	cmp	r3, #0
 802b5f6:	d007      	beq.n	802b608 <bhy2_hif_exec_cmd_generic+0x60>
 802b5f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b5fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802b600:	681b      	ldr	r3, [r3, #0]
 802b602:	2b00      	cmp	r3, #0
 802b604:	f000 81a0 	beq.w	802b948 <bhy2_hif_exec_cmd_generic+0x3a0>
 802b608:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 802b60c:	2b00      	cmp	r3, #0
 802b60e:	d007      	beq.n	802b620 <bhy2_hif_exec_cmd_generic+0x78>
 802b610:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b614:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802b618:	681b      	ldr	r3, [r3, #0]
 802b61a:	2b00      	cmp	r3, #0
 802b61c:	f000 8194 	beq.w	802b948 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 802b620:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802b624:	699b      	ldr	r3, [r3, #24]
 802b626:	2b00      	cmp	r3, #0
 802b628:	f000 8188 	beq.w	802b93c <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 802b62c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b630:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b634:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802b638:	681b      	ldr	r3, [r3, #0]
 802b63a:	4413      	add	r3, r2
 802b63c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 802b640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802b644:	2b00      	cmp	r3, #0
 802b646:	d007      	beq.n	802b658 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 802b648:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802b64c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802b650:	4413      	add	r3, r2
 802b652:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802b656:	e003      	b.n	802b660 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 802b658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b65c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 802b660:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b664:	f003 0303 	and.w	r3, r3, #3
 802b668:	2b00      	cmp	r3, #0
 802b66a:	d006      	beq.n	802b67a <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 802b66c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b670:	089b      	lsrs	r3, r3, #2
 802b672:	3301      	adds	r3, #1
 802b674:	009b      	lsls	r3, r3, #2
 802b676:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 802b67a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b67e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802b682:	881b      	ldrh	r3, [r3, #0]
 802b684:	b2da      	uxtb	r2, r3
 802b686:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b68a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802b68e:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 802b690:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b694:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802b698:	881b      	ldrh	r3, [r3, #0]
 802b69a:	0a1b      	lsrs	r3, r3, #8
 802b69c:	b29b      	uxth	r3, r3
 802b69e:	b2da      	uxtb	r2, r3
 802b6a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b6a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802b6a8:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 802b6aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b6ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802b6b2:	881b      	ldrh	r3, [r3, #0]
 802b6b4:	2b02      	cmp	r3, #2
 802b6b6:	d113      	bne.n	802b6e0 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 802b6b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b6bc:	089b      	lsrs	r3, r3, #2
 802b6be:	b2da      	uxtb	r2, r3
 802b6c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b6c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802b6c8:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 802b6ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b6ce:	089b      	lsrs	r3, r3, #2
 802b6d0:	0a1b      	lsrs	r3, r3, #8
 802b6d2:	b2da      	uxtb	r2, r3
 802b6d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b6d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802b6dc:	70da      	strb	r2, [r3, #3]
 802b6de:	e010      	b.n	802b702 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 802b6e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b6e4:	b2da      	uxtb	r2, r3
 802b6e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b6ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802b6ee:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 802b6f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b6f4:	0a1b      	lsrs	r3, r3, #8
 802b6f6:	b2da      	uxtb	r2, r3
 802b6f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b6fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802b700:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 802b702:	2304      	movs	r3, #4
 802b704:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 802b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b70c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 802b710:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802b714:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802b718:	4413      	add	r3, r2
 802b71a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 802b71e:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b722:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 802b726:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802b72a:	699b      	ldr	r3, [r3, #24]
 802b72c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802b730:	429a      	cmp	r2, r3
 802b732:	f240 80f9 	bls.w	802b928 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 802b736:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802b73a:	699b      	ldr	r3, [r3, #24]
 802b73c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802b740:	e0f2      	b.n	802b928 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 802b742:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802b746:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802b74a:	4413      	add	r3, r2
 802b74c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802b750:	429a      	cmp	r2, r3
 802b752:	d20b      	bcs.n	802b76c <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 802b754:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802b758:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 802b75c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802b760:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802b764:	1ad3      	subs	r3, r2, r3
 802b766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 802b76a:	e020      	b.n	802b7ae <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 802b76c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802b770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802b774:	4413      	add	r3, r2
 802b776:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 802b77a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802b77e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 802b782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802b786:	f003 0303 	and.w	r3, r3, #3
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	d006      	beq.n	802b79c <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 802b78e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802b792:	089b      	lsrs	r3, r3, #2
 802b794:	3301      	adds	r3, #1
 802b796:	009b      	lsls	r3, r3, #2
 802b798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 802b79c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802b7a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b7a4:	d903      	bls.n	802b7ae <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 802b7a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b7aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 802b7ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802b7b2:	2b00      	cmp	r3, #0
 802b7b4:	d07e      	beq.n	802b8b4 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 802b7b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b7ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b7be:	681a      	ldr	r2, [r3, #0]
 802b7c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802b7c4:	4413      	add	r3, r2
 802b7c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802b7ca:	429a      	cmp	r2, r3
 802b7cc:	d315      	bcc.n	802b7fa <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 802b7ce:	f107 0214 	add.w	r2, r7, #20
 802b7d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802b7d6:	18d0      	adds	r0, r2, r3
 802b7d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802b7dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802b7e0:	1ad3      	subs	r3, r2, r3
 802b7e2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802b7e6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802b7ea:	6812      	ldr	r2, [r2, #0]
 802b7ec:	4413      	add	r3, r2
 802b7ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802b7f2:	4619      	mov	r1, r3
 802b7f4:	f013 fc00 	bl	803eff8 <memcpy>
 802b7f8:	e05c      	b.n	802b8b4 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 802b7fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b7fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b802:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802b806:	681b      	ldr	r3, [r3, #0]
 802b808:	429a      	cmp	r2, r3
 802b80a:	d93b      	bls.n	802b884 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 802b80c:	f107 0214 	add.w	r2, r7, #20
 802b810:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802b814:	18d0      	adds	r0, r2, r3
 802b816:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802b81a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802b81e:	1ad3      	subs	r3, r2, r3
 802b820:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802b824:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802b828:	6812      	ldr	r2, [r2, #0]
 802b82a:	18d1      	adds	r1, r2, r3
 802b82c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b830:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b834:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802b838:	681b      	ldr	r3, [r3, #0]
 802b83a:	1ad3      	subs	r3, r2, r3
 802b83c:	461a      	mov	r2, r3
 802b83e:	f013 fbdb 	bl	803eff8 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 802b842:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802b846:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802b84a:	441a      	add	r2, r3
 802b84c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b850:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b854:	681b      	ldr	r3, [r3, #0]
 802b856:	1ad3      	subs	r3, r2, r3
 802b858:	f107 0214 	add.w	r2, r7, #20
 802b85c:	18d0      	adds	r0, r2, r3
 802b85e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b862:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b866:	681a      	ldr	r2, [r3, #0]
 802b868:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802b86c:	1ad2      	subs	r2, r2, r3
 802b86e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802b872:	441a      	add	r2, r3
 802b874:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802b87c:	6819      	ldr	r1, [r3, #0]
 802b87e:	f013 fbbb 	bl	803eff8 <memcpy>
 802b882:	e017      	b.n	802b8b4 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 802b884:	f107 0214 	add.w	r2, r7, #20
 802b888:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802b88c:	18d0      	adds	r0, r2, r3
 802b88e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802b892:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802b896:	681a      	ldr	r2, [r3, #0]
 802b898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802b89c:	1ad3      	subs	r3, r2, r3
 802b89e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802b8a2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 802b8a6:	6812      	ldr	r2, [r2, #0]
 802b8a8:	4413      	add	r3, r2
 802b8aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802b8ae:	4619      	mov	r1, r3
 802b8b0:	f013 fba2 	bl	803eff8 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 802b8b4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802b8b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802b8bc:	4413      	add	r3, r2
 802b8be:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802b8c2:	429a      	cmp	r2, r3
 802b8c4:	d012      	beq.n	802b8ec <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 802b8c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802b8ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802b8ce:	4413      	add	r3, r2
 802b8d0:	f107 0214 	add.w	r2, r7, #20
 802b8d4:	18d0      	adds	r0, r2, r3
 802b8d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802b8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802b8de:	4413      	add	r3, r2
 802b8e0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802b8e4:	461a      	mov	r2, r3
 802b8e6:	2100      	movs	r1, #0
 802b8e8:	f013 fbae 	bl	803f048 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 802b8ec:	f107 0114 	add.w	r1, r7, #20
 802b8f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802b8f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802b8f8:	2000      	movs	r0, #0
 802b8fa:	f000 f9b4 	bl	802bc66 <bhy2_hif_set_regs>
 802b8fe:	4603      	mov	r3, r0
 802b900:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 802b904:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 802b908:	2b00      	cmp	r3, #0
 802b90a:	d11b      	bne.n	802b944 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 802b90c:	2300      	movs	r3, #0
 802b90e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 802b912:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802b916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802b91a:	1ad3      	subs	r3, r2, r3
 802b91c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 802b920:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802b924:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802b928:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802b92c:	2b00      	cmp	r3, #0
 802b92e:	d00f      	beq.n	802b950 <bhy2_hif_exec_cmd_generic+0x3a8>
 802b930:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 802b934:	2b00      	cmp	r3, #0
 802b936:	f43f af04 	beq.w	802b742 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 802b93a:	e009      	b.n	802b950 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 802b93c:	23fe      	movs	r3, #254	; 0xfe
 802b93e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 802b942:	e005      	b.n	802b950 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 802b944:	bf00      	nop
        if (hif->read_write_len != 0)
 802b946:	e003      	b.n	802b950 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b948:	23ff      	movs	r3, #255	; 0xff
 802b94a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 802b94e:	e000      	b.n	802b952 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 802b950:	bf00      	nop
    }

    return rslt;
 802b952:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 802b956:	4618      	mov	r0, r3
 802b958:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 802b95c:	46bd      	mov	sp, r7
 802b95e:	bd90      	pop	{r4, r7, pc}

0802b960 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 802b960:	b580      	push	{r7, lr}
 802b962:	b084      	sub	sp, #16
 802b964:	af00      	add	r7, sp, #0
 802b966:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 802b968:	2300      	movs	r3, #0
 802b96a:	81fb      	strh	r3, [r7, #14]
 802b96c:	e027      	b.n	802b9be <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 802b96e:	f107 030c 	add.w	r3, r7, #12
 802b972:	6879      	ldr	r1, [r7, #4]
 802b974:	4618      	mov	r0, r3
 802b976:	f000 fab1 	bl	802bedc <bhy2_hif_get_interrupt_status>
 802b97a:	4603      	mov	r3, r0
 802b97c:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 802b97e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802b982:	2b00      	cmp	r3, #0
 802b984:	d115      	bne.n	802b9b2 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 802b986:	7b3b      	ldrb	r3, [r7, #12]
 802b988:	f003 0320 	and.w	r3, r3, #32
 802b98c:	2b00      	cmp	r3, #0
 802b98e:	d002      	beq.n	802b996 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 802b990:	2300      	movs	r3, #0
 802b992:	737b      	strb	r3, [r7, #13]
                break;
 802b994:	e017      	b.n	802b9c6 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 802b996:	6879      	ldr	r1, [r7, #4]
 802b998:	f242 7010 	movw	r0, #10000	; 0x2710
 802b99c:	f000 f99b 	bl	802bcd6 <bhy2_hif_delay_us>
 802b9a0:	4603      	mov	r3, r0
 802b9a2:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 802b9a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802b9a8:	2b00      	cmp	r3, #0
 802b9aa:	d005      	beq.n	802b9b8 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 802b9ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802b9b0:	e00b      	b.n	802b9ca <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 802b9b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802b9b6:	e008      	b.n	802b9ca <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 802b9b8:	89fb      	ldrh	r3, [r7, #14]
 802b9ba:	3301      	adds	r3, #1
 802b9bc:	81fb      	strh	r3, [r7, #14]
 802b9be:	89fb      	ldrh	r3, [r7, #14]
 802b9c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b9c4:	d3d3      	bcc.n	802b96e <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 802b9c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 802b9ca:	4618      	mov	r0, r3
 802b9cc:	3710      	adds	r7, #16
 802b9ce:	46bd      	mov	sp, r7
 802b9d0:	bd80      	pop	{r7, pc}

0802b9d2 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 802b9d2:	b580      	push	{r7, lr}
 802b9d4:	b084      	sub	sp, #16
 802b9d6:	af00      	add	r7, sp, #0
 802b9d8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 802b9da:	2300      	movs	r3, #0
 802b9dc:	81fb      	strh	r3, [r7, #14]
 802b9de:	e02f      	b.n	802ba40 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 802b9e0:	6879      	ldr	r1, [r7, #4]
 802b9e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 802b9e6:	f000 f976 	bl	802bcd6 <bhy2_hif_delay_us>
 802b9ea:	4603      	mov	r3, r0
 802b9ec:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802b9ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802b9f2:	2b00      	cmp	r3, #0
 802b9f4:	da02      	bge.n	802b9fc <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 802b9f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802b9fa:	e02d      	b.n	802ba58 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 802b9fc:	f107 010c 	add.w	r1, r7, #12
 802ba00:	687b      	ldr	r3, [r7, #4]
 802ba02:	2201      	movs	r2, #1
 802ba04:	2025      	movs	r0, #37	; 0x25
 802ba06:	f000 f8f6 	bl	802bbf6 <bhy2_hif_get_regs>
 802ba0a:	4603      	mov	r3, r0
 802ba0c:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802ba0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802ba12:	2b00      	cmp	r3, #0
 802ba14:	da02      	bge.n	802ba1c <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 802ba16:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802ba1a:	e01d      	b.n	802ba58 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802ba1c:	7b3b      	ldrb	r3, [r7, #12]
 802ba1e:	f003 0310 	and.w	r3, r3, #16
 802ba22:	2b00      	cmp	r3, #0
 802ba24:	d009      	beq.n	802ba3a <bhy2_hif_check_boot_status_ram+0x68>
 802ba26:	7b3b      	ldrb	r3, [r7, #12]
 802ba28:	f003 0320 	and.w	r3, r3, #32
 802ba2c:	2b00      	cmp	r3, #0
 802ba2e:	d004      	beq.n	802ba3a <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 802ba30:	7b3b      	ldrb	r3, [r7, #12]
 802ba32:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802ba36:	2b00      	cmp	r3, #0
 802ba38:	d006      	beq.n	802ba48 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 802ba3a:	89fb      	ldrh	r3, [r7, #14]
 802ba3c:	3301      	adds	r3, #1
 802ba3e:	81fb      	strh	r3, [r7, #14]
 802ba40:	89fb      	ldrh	r3, [r7, #14]
 802ba42:	2b63      	cmp	r3, #99	; 0x63
 802ba44:	d9cc      	bls.n	802b9e0 <bhy2_hif_check_boot_status_ram+0xe>
 802ba46:	e000      	b.n	802ba4a <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 802ba48:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 802ba4a:	89fb      	ldrh	r3, [r7, #14]
 802ba4c:	2b64      	cmp	r3, #100	; 0x64
 802ba4e:	d102      	bne.n	802ba56 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 802ba50:	f06f 0304 	mvn.w	r3, #4
 802ba54:	e000      	b.n	802ba58 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 802ba56:	2300      	movs	r3, #0
}
 802ba58:	4618      	mov	r0, r3
 802ba5a:	3710      	adds	r7, #16
 802ba5c:	46bd      	mov	sp, r7
 802ba5e:	bd80      	pop	{r7, pc}

0802ba60 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802ba60:	b580      	push	{r7, lr}
 802ba62:	b08a      	sub	sp, #40	; 0x28
 802ba64:	af00      	add	r7, sp, #0
 802ba66:	60b9      	str	r1, [r7, #8]
 802ba68:	607a      	str	r2, [r7, #4]
 802ba6a:	603b      	str	r3, [r7, #0]
 802ba6c:	4603      	mov	r3, r0
 802ba6e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802ba70:	2300      	movs	r3, #0
 802ba72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 802ba76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ba78:	2b00      	cmp	r3, #0
 802ba7a:	d072      	beq.n	802bb62 <bhy2_hif_get_fifo+0x102>
 802ba7c:	68bb      	ldr	r3, [r7, #8]
 802ba7e:	2b00      	cmp	r3, #0
 802ba80:	d06f      	beq.n	802bb62 <bhy2_hif_get_fifo+0x102>
 802ba82:	683b      	ldr	r3, [r7, #0]
 802ba84:	2b00      	cmp	r3, #0
 802ba86:	d06c      	beq.n	802bb62 <bhy2_hif_get_fifo+0x102>
 802ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ba8a:	2b00      	cmp	r3, #0
 802ba8c:	d069      	beq.n	802bb62 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 802ba8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ba90:	699b      	ldr	r3, [r3, #24]
 802ba92:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 802ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ba96:	681b      	ldr	r3, [r3, #0]
 802ba98:	2b00      	cmp	r3, #0
 802ba9a:	d114      	bne.n	802bac6 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 802ba9c:	f107 0114 	add.w	r1, r7, #20
 802baa0:	7bf8      	ldrb	r0, [r7, #15]
 802baa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802baa4:	2202      	movs	r2, #2
 802baa6:	f000 f8a6 	bl	802bbf6 <bhy2_hif_get_regs>
 802baaa:	4603      	mov	r3, r0
 802baac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 802bab0:	7d3b      	ldrb	r3, [r7, #20]
 802bab2:	b21a      	sxth	r2, r3
 802bab4:	7d7b      	ldrb	r3, [r7, #21]
 802bab6:	021b      	lsls	r3, r3, #8
 802bab8:	b21b      	sxth	r3, r3
 802baba:	4313      	orrs	r3, r2
 802babc:	b21b      	sxth	r3, r3
 802babe:	b29b      	uxth	r3, r3
 802bac0:	461a      	mov	r2, r3
 802bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bac4:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bac8:	681b      	ldr	r3, [r3, #0]
 802baca:	2b00      	cmp	r3, #0
 802bacc:	d04d      	beq.n	802bb6a <bhy2_hif_get_fifo+0x10a>
 802bace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802bad2:	2b00      	cmp	r3, #0
 802bad4:	d149      	bne.n	802bb6a <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 802bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bad8:	681b      	ldr	r3, [r3, #0]
 802bada:	687a      	ldr	r2, [r7, #4]
 802badc:	429a      	cmp	r2, r3
 802bade:	d203      	bcs.n	802bae8 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 802bae0:	683b      	ldr	r3, [r7, #0]
 802bae2:	687a      	ldr	r2, [r7, #4]
 802bae4:	601a      	str	r2, [r3, #0]
 802bae6:	e003      	b.n	802baf0 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 802bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802baea:	681a      	ldr	r2, [r3, #0]
 802baec:	683b      	ldr	r3, [r7, #0]
 802baee:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 802baf0:	683b      	ldr	r3, [r7, #0]
 802baf2:	681b      	ldr	r3, [r3, #0]
 802baf4:	623b      	str	r3, [r7, #32]
            offset = 0;
 802baf6:	2300      	movs	r3, #0
 802baf8:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802bafa:	e016      	b.n	802bb2a <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 802bafc:	68ba      	ldr	r2, [r7, #8]
 802bafe:	69fb      	ldr	r3, [r7, #28]
 802bb00:	18d1      	adds	r1, r2, r3
 802bb02:	7bf8      	ldrb	r0, [r7, #15]
 802bb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bb06:	69ba      	ldr	r2, [r7, #24]
 802bb08:	f000 f875 	bl	802bbf6 <bhy2_hif_get_regs>
 802bb0c:	4603      	mov	r3, r0
 802bb0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802bb12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802bb16:	2b00      	cmp	r3, #0
 802bb18:	d10c      	bne.n	802bb34 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 802bb1a:	6a3a      	ldr	r2, [r7, #32]
 802bb1c:	69bb      	ldr	r3, [r7, #24]
 802bb1e:	1ad3      	subs	r3, r2, r3
 802bb20:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802bb22:	69fa      	ldr	r2, [r7, #28]
 802bb24:	69bb      	ldr	r3, [r7, #24]
 802bb26:	4413      	add	r3, r2
 802bb28:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802bb2a:	6a3a      	ldr	r2, [r7, #32]
 802bb2c:	69bb      	ldr	r3, [r7, #24]
 802bb2e:	429a      	cmp	r2, r3
 802bb30:	d8e4      	bhi.n	802bafc <bhy2_hif_get_fifo+0x9c>
 802bb32:	e000      	b.n	802bb36 <bhy2_hif_get_fifo+0xd6>
                    break;
 802bb34:	bf00      	nop
            }

            if (read_len != 0)
 802bb36:	6a3b      	ldr	r3, [r7, #32]
 802bb38:	2b00      	cmp	r3, #0
 802bb3a:	d00a      	beq.n	802bb52 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 802bb3c:	68ba      	ldr	r2, [r7, #8]
 802bb3e:	69fb      	ldr	r3, [r7, #28]
 802bb40:	18d1      	adds	r1, r2, r3
 802bb42:	7bf8      	ldrb	r0, [r7, #15]
 802bb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bb46:	6a3a      	ldr	r2, [r7, #32]
 802bb48:	f000 f855 	bl	802bbf6 <bhy2_hif_get_regs>
 802bb4c:	4603      	mov	r3, r0
 802bb4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 802bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bb54:	681a      	ldr	r2, [r3, #0]
 802bb56:	683b      	ldr	r3, [r7, #0]
 802bb58:	681b      	ldr	r3, [r3, #0]
 802bb5a:	1ad2      	subs	r2, r2, r3
 802bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bb5e:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802bb60:	e003      	b.n	802bb6a <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bb62:	23ff      	movs	r3, #255	; 0xff
 802bb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802bb68:	e000      	b.n	802bb6c <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802bb6a:	bf00      	nop
    }

    return rslt;
 802bb6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802bb70:	4618      	mov	r0, r3
 802bb72:	3728      	adds	r7, #40	; 0x28
 802bb74:	46bd      	mov	sp, r7
 802bb76:	bd80      	pop	{r7, pc}

0802bb78 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 802bb78:	b480      	push	{r7}
 802bb7a:	b087      	sub	sp, #28
 802bb7c:	af00      	add	r7, sp, #0
 802bb7e:	60b9      	str	r1, [r7, #8]
 802bb80:	607a      	str	r2, [r7, #4]
 802bb82:	603b      	str	r3, [r7, #0]
 802bb84:	4603      	mov	r3, r0
 802bb86:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802bb88:	2300      	movs	r3, #0
 802bb8a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 802bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bb8e:	2b00      	cmp	r3, #0
 802bb90:	d027      	beq.n	802bbe2 <bhy2_hif_init+0x6a>
 802bb92:	68bb      	ldr	r3, [r7, #8]
 802bb94:	2b00      	cmp	r3, #0
 802bb96:	d024      	beq.n	802bbe2 <bhy2_hif_init+0x6a>
 802bb98:	687b      	ldr	r3, [r7, #4]
 802bb9a:	2b00      	cmp	r3, #0
 802bb9c:	d021      	beq.n	802bbe2 <bhy2_hif_init+0x6a>
 802bb9e:	683b      	ldr	r3, [r7, #0]
 802bba0:	2b00      	cmp	r3, #0
 802bba2:	d01e      	beq.n	802bbe2 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 802bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bba6:	68ba      	ldr	r2, [r7, #8]
 802bba8:	601a      	str	r2, [r3, #0]
        hif->write = write;
 802bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbac:	687a      	ldr	r2, [r7, #4]
 802bbae:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 802bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbb2:	683a      	ldr	r2, [r7, #0]
 802bbb4:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 802bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bbba:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 802bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbbe:	7bfa      	ldrb	r2, [r7, #15]
 802bbc0:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 802bbc2:	6a3b      	ldr	r3, [r7, #32]
 802bbc4:	f003 0303 	and.w	r3, r3, #3
 802bbc8:	2b00      	cmp	r3, #0
 802bbca:	d006      	beq.n	802bbda <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 802bbcc:	6a3b      	ldr	r3, [r7, #32]
 802bbce:	089b      	lsrs	r3, r3, #2
 802bbd0:	3301      	adds	r3, #1
 802bbd2:	009a      	lsls	r2, r3, #2
 802bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbd6:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802bbd8:	e005      	b.n	802bbe6 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 802bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbdc:	6a3a      	ldr	r2, [r7, #32]
 802bbde:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802bbe0:	e001      	b.n	802bbe6 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bbe2:	23ff      	movs	r3, #255	; 0xff
 802bbe4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802bbe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802bbea:	4618      	mov	r0, r3
 802bbec:	371c      	adds	r7, #28
 802bbee:	46bd      	mov	sp, r7
 802bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bbf4:	4770      	bx	lr

0802bbf6 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802bbf6:	b590      	push	{r4, r7, lr}
 802bbf8:	b087      	sub	sp, #28
 802bbfa:	af00      	add	r7, sp, #0
 802bbfc:	60b9      	str	r1, [r7, #8]
 802bbfe:	607a      	str	r2, [r7, #4]
 802bc00:	603b      	str	r3, [r7, #0]
 802bc02:	4603      	mov	r3, r0
 802bc04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802bc06:	2300      	movs	r3, #0
 802bc08:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802bc0a:	683b      	ldr	r3, [r7, #0]
 802bc0c:	2b00      	cmp	r3, #0
 802bc0e:	d022      	beq.n	802bc56 <bhy2_hif_get_regs+0x60>
 802bc10:	683b      	ldr	r3, [r7, #0]
 802bc12:	681b      	ldr	r3, [r3, #0]
 802bc14:	2b00      	cmp	r3, #0
 802bc16:	d01e      	beq.n	802bc56 <bhy2_hif_get_regs+0x60>
 802bc18:	68bb      	ldr	r3, [r7, #8]
 802bc1a:	2b00      	cmp	r3, #0
 802bc1c:	d01b      	beq.n	802bc56 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802bc1e:	683b      	ldr	r3, [r7, #0]
 802bc20:	7b1b      	ldrb	r3, [r3, #12]
 802bc22:	2b01      	cmp	r3, #1
 802bc24:	d103      	bne.n	802bc2e <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 802bc26:	7bfb      	ldrb	r3, [r7, #15]
 802bc28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802bc2c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 802bc2e:	683b      	ldr	r3, [r7, #0]
 802bc30:	681c      	ldr	r4, [r3, #0]
 802bc32:	683b      	ldr	r3, [r7, #0]
 802bc34:	691b      	ldr	r3, [r3, #16]
 802bc36:	7bf8      	ldrb	r0, [r7, #15]
 802bc38:	687a      	ldr	r2, [r7, #4]
 802bc3a:	68b9      	ldr	r1, [r7, #8]
 802bc3c:	47a0      	blx	r4
 802bc3e:	4603      	mov	r3, r0
 802bc40:	461a      	mov	r2, r3
 802bc42:	683b      	ldr	r3, [r7, #0]
 802bc44:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802bc46:	683b      	ldr	r3, [r7, #0]
 802bc48:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802bc4c:	2b00      	cmp	r3, #0
 802bc4e:	d004      	beq.n	802bc5a <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802bc50:	23fd      	movs	r3, #253	; 0xfd
 802bc52:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802bc54:	e001      	b.n	802bc5a <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bc56:	23ff      	movs	r3, #255	; 0xff
 802bc58:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802bc5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802bc5e:	4618      	mov	r0, r3
 802bc60:	371c      	adds	r7, #28
 802bc62:	46bd      	mov	sp, r7
 802bc64:	bd90      	pop	{r4, r7, pc}

0802bc66 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802bc66:	b590      	push	{r4, r7, lr}
 802bc68:	b087      	sub	sp, #28
 802bc6a:	af00      	add	r7, sp, #0
 802bc6c:	60b9      	str	r1, [r7, #8]
 802bc6e:	607a      	str	r2, [r7, #4]
 802bc70:	603b      	str	r3, [r7, #0]
 802bc72:	4603      	mov	r3, r0
 802bc74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802bc76:	2300      	movs	r3, #0
 802bc78:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802bc7a:	683b      	ldr	r3, [r7, #0]
 802bc7c:	2b00      	cmp	r3, #0
 802bc7e:	d022      	beq.n	802bcc6 <bhy2_hif_set_regs+0x60>
 802bc80:	683b      	ldr	r3, [r7, #0]
 802bc82:	681b      	ldr	r3, [r3, #0]
 802bc84:	2b00      	cmp	r3, #0
 802bc86:	d01e      	beq.n	802bcc6 <bhy2_hif_set_regs+0x60>
 802bc88:	68bb      	ldr	r3, [r7, #8]
 802bc8a:	2b00      	cmp	r3, #0
 802bc8c:	d01b      	beq.n	802bcc6 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802bc8e:	683b      	ldr	r3, [r7, #0]
 802bc90:	7b1b      	ldrb	r3, [r3, #12]
 802bc92:	2b01      	cmp	r3, #1
 802bc94:	d103      	bne.n	802bc9e <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 802bc96:	7bfb      	ldrb	r3, [r7, #15]
 802bc98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802bc9c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 802bc9e:	683b      	ldr	r3, [r7, #0]
 802bca0:	685c      	ldr	r4, [r3, #4]
 802bca2:	683b      	ldr	r3, [r7, #0]
 802bca4:	691b      	ldr	r3, [r3, #16]
 802bca6:	7bf8      	ldrb	r0, [r7, #15]
 802bca8:	687a      	ldr	r2, [r7, #4]
 802bcaa:	68b9      	ldr	r1, [r7, #8]
 802bcac:	47a0      	blx	r4
 802bcae:	4603      	mov	r3, r0
 802bcb0:	461a      	mov	r2, r3
 802bcb2:	683b      	ldr	r3, [r7, #0]
 802bcb4:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802bcb6:	683b      	ldr	r3, [r7, #0]
 802bcb8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802bcbc:	2b00      	cmp	r3, #0
 802bcbe:	d004      	beq.n	802bcca <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802bcc0:	23fd      	movs	r3, #253	; 0xfd
 802bcc2:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802bcc4:	e001      	b.n	802bcca <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bcc6:	23ff      	movs	r3, #255	; 0xff
 802bcc8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802bcca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802bcce:	4618      	mov	r0, r3
 802bcd0:	371c      	adds	r7, #28
 802bcd2:	46bd      	mov	sp, r7
 802bcd4:	bd90      	pop	{r4, r7, pc}

0802bcd6 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 802bcd6:	b580      	push	{r7, lr}
 802bcd8:	b084      	sub	sp, #16
 802bcda:	af00      	add	r7, sp, #0
 802bcdc:	6078      	str	r0, [r7, #4]
 802bcde:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802bce0:	2300      	movs	r3, #0
 802bce2:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 802bce4:	683b      	ldr	r3, [r7, #0]
 802bce6:	2b00      	cmp	r3, #0
 802bce8:	d00b      	beq.n	802bd02 <bhy2_hif_delay_us+0x2c>
 802bcea:	683b      	ldr	r3, [r7, #0]
 802bcec:	689b      	ldr	r3, [r3, #8]
 802bcee:	2b00      	cmp	r3, #0
 802bcf0:	d007      	beq.n	802bd02 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 802bcf2:	683b      	ldr	r3, [r7, #0]
 802bcf4:	689b      	ldr	r3, [r3, #8]
 802bcf6:	683a      	ldr	r2, [r7, #0]
 802bcf8:	6912      	ldr	r2, [r2, #16]
 802bcfa:	4611      	mov	r1, r2
 802bcfc:	6878      	ldr	r0, [r7, #4]
 802bcfe:	4798      	blx	r3
 802bd00:	e001      	b.n	802bd06 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bd02:	23ff      	movs	r3, #255	; 0xff
 802bd04:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802bd06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802bd0a:	4618      	mov	r0, r3
 802bd0c:	3710      	adds	r7, #16
 802bd0e:	46bd      	mov	sp, r7
 802bd10:	bd80      	pop	{r7, pc}

0802bd12 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 802bd12:	b580      	push	{r7, lr}
 802bd14:	b088      	sub	sp, #32
 802bd16:	af04      	add	r7, sp, #16
 802bd18:	60b9      	str	r1, [r7, #8]
 802bd1a:	607a      	str	r2, [r7, #4]
 802bd1c:	603b      	str	r3, [r7, #0]
 802bd1e:	4603      	mov	r3, r0
 802bd20:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 802bd22:	89f8      	ldrh	r0, [r7, #14]
 802bd24:	683b      	ldr	r3, [r7, #0]
 802bd26:	9302      	str	r3, [sp, #8]
 802bd28:	2300      	movs	r3, #0
 802bd2a:	9301      	str	r3, [sp, #4]
 802bd2c:	2300      	movs	r3, #0
 802bd2e:	9300      	str	r3, [sp, #0]
 802bd30:	2300      	movs	r3, #0
 802bd32:	687a      	ldr	r2, [r7, #4]
 802bd34:	68b9      	ldr	r1, [r7, #8]
 802bd36:	f7ff fc37 	bl	802b5a8 <bhy2_hif_exec_cmd_generic>
 802bd3a:	4603      	mov	r3, r0
}
 802bd3c:	4618      	mov	r0, r3
 802bd3e:	3710      	adds	r7, #16
 802bd40:	46bd      	mov	sp, r7
 802bd42:	bd80      	pop	{r7, pc}

0802bd44 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 802bd44:	b580      	push	{r7, lr}
 802bd46:	b088      	sub	sp, #32
 802bd48:	af02      	add	r7, sp, #8
 802bd4a:	60b9      	str	r1, [r7, #8]
 802bd4c:	607a      	str	r2, [r7, #4]
 802bd4e:	603b      	str	r3, [r7, #0]
 802bd50:	4603      	mov	r3, r0
 802bd52:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 802bd54:	2300      	movs	r3, #0
 802bd56:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 802bd58:	2300      	movs	r3, #0
 802bd5a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 802bd5c:	6a3b      	ldr	r3, [r7, #32]
 802bd5e:	2b00      	cmp	r3, #0
 802bd60:	d06e      	beq.n	802be40 <bhy2_hif_get_parameter+0xfc>
 802bd62:	68bb      	ldr	r3, [r7, #8]
 802bd64:	2b00      	cmp	r3, #0
 802bd66:	d06b      	beq.n	802be40 <bhy2_hif_get_parameter+0xfc>
 802bd68:	683b      	ldr	r3, [r7, #0]
 802bd6a:	2b00      	cmp	r3, #0
 802bd6c:	d068      	beq.n	802be40 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 802bd6e:	683b      	ldr	r3, [r7, #0]
 802bd70:	2200      	movs	r2, #0
 802bd72:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802bd74:	f107 0113 	add.w	r1, r7, #19
 802bd78:	6a3b      	ldr	r3, [r7, #32]
 802bd7a:	2201      	movs	r2, #1
 802bd7c:	2006      	movs	r0, #6
 802bd7e:	f7ff ff3a 	bl	802bbf6 <bhy2_hif_get_regs>
 802bd82:	4603      	mov	r3, r0
 802bd84:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802bd86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802bd8a:	2b00      	cmp	r3, #0
 802bd8c:	d15b      	bne.n	802be46 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 802bd8e:	7cfb      	ldrb	r3, [r7, #19]
 802bd90:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 802bd92:	7cfb      	ldrb	r3, [r7, #19]
 802bd94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802bd98:	b2db      	uxtb	r3, r3
 802bd9a:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 802bd9c:	7cfb      	ldrb	r3, [r7, #19]
 802bd9e:	7dba      	ldrb	r2, [r7, #22]
 802bda0:	429a      	cmp	r2, r3
 802bda2:	d008      	beq.n	802bdb6 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802bda4:	f107 0113 	add.w	r1, r7, #19
 802bda8:	6a3b      	ldr	r3, [r7, #32]
 802bdaa:	2201      	movs	r2, #1
 802bdac:	2006      	movs	r0, #6
 802bdae:	f7ff ff5a 	bl	802bc66 <bhy2_hif_set_regs>
 802bdb2:	4603      	mov	r3, r0
 802bdb4:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 802bdb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802bdba:	2b00      	cmp	r3, #0
 802bdbc:	d143      	bne.n	802be46 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 802bdbe:	89fb      	ldrh	r3, [r7, #14]
 802bdc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802bdc4:	b298      	uxth	r0, r3
 802bdc6:	6a3b      	ldr	r3, [r7, #32]
 802bdc8:	2200      	movs	r2, #0
 802bdca:	2100      	movs	r1, #0
 802bdcc:	f7ff ffa1 	bl	802bd12 <bhy2_hif_exec_cmd>
 802bdd0:	4603      	mov	r3, r0
 802bdd2:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 802bdd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802bdd8:	2b00      	cmp	r3, #0
 802bdda:	d134      	bne.n	802be46 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 802bddc:	6a38      	ldr	r0, [r7, #32]
 802bdde:	f7ff fdbf 	bl	802b960 <bhy2_wait_status_ready>
 802bde2:	4603      	mov	r3, r0
 802bde4:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 802bde6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802bdea:	2b00      	cmp	r3, #0
 802bdec:	d12b      	bne.n	802be46 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 802bdee:	f107 0014 	add.w	r0, r7, #20
 802bdf2:	6a3b      	ldr	r3, [r7, #32]
 802bdf4:	9300      	str	r3, [sp, #0]
 802bdf6:	683b      	ldr	r3, [r7, #0]
 802bdf8:	687a      	ldr	r2, [r7, #4]
 802bdfa:	68b9      	ldr	r1, [r7, #8]
 802bdfc:	f000 f94b 	bl	802c096 <bhy2_hif_get_status_fifo>
 802be00:	4603      	mov	r3, r0
 802be02:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 802be04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802be08:	2b00      	cmp	r3, #0
 802be0a:	d11c      	bne.n	802be46 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 802be0c:	7cfb      	ldrb	r3, [r7, #19]
 802be0e:	7dba      	ldrb	r2, [r7, #22]
 802be10:	429a      	cmp	r2, r3
 802be12:	d00a      	beq.n	802be2a <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 802be14:	7dbb      	ldrb	r3, [r7, #22]
 802be16:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802be18:	f107 0113 	add.w	r1, r7, #19
 802be1c:	6a3b      	ldr	r3, [r7, #32]
 802be1e:	2201      	movs	r2, #1
 802be20:	2006      	movs	r0, #6
 802be22:	f7ff ff20 	bl	802bc66 <bhy2_hif_set_regs>
 802be26:	4603      	mov	r3, r0
 802be28:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 802be2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802be2e:	2b00      	cmp	r3, #0
 802be30:	d109      	bne.n	802be46 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 802be32:	8abb      	ldrh	r3, [r7, #20]
 802be34:	89fa      	ldrh	r2, [r7, #14]
 802be36:	429a      	cmp	r2, r3
 802be38:	d005      	beq.n	802be46 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 802be3a:	23fb      	movs	r3, #251	; 0xfb
 802be3c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802be3e:	e002      	b.n	802be46 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802be40:	23ff      	movs	r3, #255	; 0xff
 802be42:	75fb      	strb	r3, [r7, #23]
 802be44:	e000      	b.n	802be48 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 802be46:	bf00      	nop
    }

    return rslt;
 802be48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802be4c:	4618      	mov	r0, r3
 802be4e:	3718      	adds	r7, #24
 802be50:	46bd      	mov	sp, r7
 802be52:	bd80      	pop	{r7, pc}

0802be54 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 802be54:	b580      	push	{r7, lr}
 802be56:	b082      	sub	sp, #8
 802be58:	af00      	add	r7, sp, #0
 802be5a:	6078      	str	r0, [r7, #4]
 802be5c:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 802be5e:	683b      	ldr	r3, [r7, #0]
 802be60:	2201      	movs	r2, #1
 802be62:	6879      	ldr	r1, [r7, #4]
 802be64:	201c      	movs	r0, #28
 802be66:	f7ff fec6 	bl	802bbf6 <bhy2_hif_get_regs>
 802be6a:	4603      	mov	r3, r0
}
 802be6c:	4618      	mov	r0, r3
 802be6e:	3708      	adds	r7, #8
 802be70:	46bd      	mov	sp, r7
 802be72:	bd80      	pop	{r7, pc}

0802be74 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 802be74:	b580      	push	{r7, lr}
 802be76:	b084      	sub	sp, #16
 802be78:	af00      	add	r7, sp, #0
 802be7a:	6078      	str	r0, [r7, #4]
 802be7c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 802be7e:	687b      	ldr	r3, [r7, #4]
 802be80:	2b00      	cmp	r3, #0
 802be82:	d013      	beq.n	802beac <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 802be84:	f107 010c 	add.w	r1, r7, #12
 802be88:	683b      	ldr	r3, [r7, #0]
 802be8a:	2202      	movs	r2, #2
 802be8c:	2020      	movs	r0, #32
 802be8e:	f7ff feb2 	bl	802bbf6 <bhy2_hif_get_regs>
 802be92:	4603      	mov	r3, r0
 802be94:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 802be96:	7b3b      	ldrb	r3, [r7, #12]
 802be98:	b21a      	sxth	r2, r3
 802be9a:	7b7b      	ldrb	r3, [r7, #13]
 802be9c:	021b      	lsls	r3, r3, #8
 802be9e:	b21b      	sxth	r3, r3
 802bea0:	4313      	orrs	r3, r2
 802bea2:	b21b      	sxth	r3, r3
 802bea4:	b29a      	uxth	r2, r3
 802bea6:	687b      	ldr	r3, [r7, #4]
 802bea8:	801a      	strh	r2, [r3, #0]
 802beaa:	e001      	b.n	802beb0 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802beac:	23ff      	movs	r3, #255	; 0xff
 802beae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802beb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802beb4:	4618      	mov	r0, r3
 802beb6:	3710      	adds	r7, #16
 802beb8:	46bd      	mov	sp, r7
 802beba:	bd80      	pop	{r7, pc}

0802bebc <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 802bebc:	b580      	push	{r7, lr}
 802bebe:	b082      	sub	sp, #8
 802bec0:	af00      	add	r7, sp, #0
 802bec2:	6078      	str	r0, [r7, #4]
 802bec4:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 802bec6:	683b      	ldr	r3, [r7, #0]
 802bec8:	2201      	movs	r2, #1
 802beca:	6879      	ldr	r1, [r7, #4]
 802becc:	2025      	movs	r0, #37	; 0x25
 802bece:	f7ff fe92 	bl	802bbf6 <bhy2_hif_get_regs>
 802bed2:	4603      	mov	r3, r0
}
 802bed4:	4618      	mov	r0, r3
 802bed6:	3708      	adds	r7, #8
 802bed8:	46bd      	mov	sp, r7
 802beda:	bd80      	pop	{r7, pc}

0802bedc <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 802bedc:	b580      	push	{r7, lr}
 802bede:	b082      	sub	sp, #8
 802bee0:	af00      	add	r7, sp, #0
 802bee2:	6078      	str	r0, [r7, #4]
 802bee4:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 802bee6:	683b      	ldr	r3, [r7, #0]
 802bee8:	2201      	movs	r2, #1
 802beea:	6879      	ldr	r1, [r7, #4]
 802beec:	202d      	movs	r0, #45	; 0x2d
 802beee:	f7ff fe82 	bl	802bbf6 <bhy2_hif_get_regs>
 802bef2:	4603      	mov	r3, r0
}
 802bef4:	4618      	mov	r0, r3
 802bef6:	3708      	adds	r7, #8
 802bef8:	46bd      	mov	sp, r7
 802befa:	bd80      	pop	{r7, pc}

0802befc <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 802befc:	b580      	push	{r7, lr}
 802befe:	b084      	sub	sp, #16
 802bf00:	af00      	add	r7, sp, #0
 802bf02:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 802bf04:	2301      	movs	r3, #1
 802bf06:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 802bf08:	2300      	movs	r3, #0
 802bf0a:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 802bf0c:	230f      	movs	r3, #15
 802bf0e:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 802bf10:	f107 010b 	add.w	r1, r7, #11
 802bf14:	687b      	ldr	r3, [r7, #4]
 802bf16:	2201      	movs	r2, #1
 802bf18:	2014      	movs	r0, #20
 802bf1a:	f7ff fea4 	bl	802bc66 <bhy2_hif_set_regs>
 802bf1e:	4603      	mov	r3, r0
 802bf20:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802bf22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802bf26:	2b00      	cmp	r3, #0
 802bf28:	d12b      	bne.n	802bf82 <bhy2_hif_reset+0x86>
    {
        while (count--)
 802bf2a:	e01c      	b.n	802bf66 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 802bf2c:	6879      	ldr	r1, [r7, #4]
 802bf2e:	f242 7010 	movw	r0, #10000	; 0x2710
 802bf32:	f7ff fed0 	bl	802bcd6 <bhy2_hif_delay_us>
 802bf36:	4603      	mov	r3, r0
 802bf38:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 802bf3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802bf3e:	2b00      	cmp	r3, #0
 802bf40:	d111      	bne.n	802bf66 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 802bf42:	f107 010a 	add.w	r1, r7, #10
 802bf46:	687b      	ldr	r3, [r7, #4]
 802bf48:	2201      	movs	r2, #1
 802bf4a:	2025      	movs	r0, #37	; 0x25
 802bf4c:	f7ff fe53 	bl	802bbf6 <bhy2_hif_get_regs>
 802bf50:	4603      	mov	r3, r0
 802bf52:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 802bf54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802bf58:	2b00      	cmp	r3, #0
 802bf5a:	d104      	bne.n	802bf66 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 802bf5c:	7abb      	ldrb	r3, [r7, #10]
 802bf5e:	f003 0310 	and.w	r3, r3, #16
 802bf62:	2b00      	cmp	r3, #0
 802bf64:	d105      	bne.n	802bf72 <bhy2_hif_reset+0x76>
        while (count--)
 802bf66:	89bb      	ldrh	r3, [r7, #12]
 802bf68:	1e5a      	subs	r2, r3, #1
 802bf6a:	81ba      	strh	r2, [r7, #12]
 802bf6c:	2b00      	cmp	r3, #0
 802bf6e:	d1dd      	bne.n	802bf2c <bhy2_hif_reset+0x30>
 802bf70:	e000      	b.n	802bf74 <bhy2_hif_reset+0x78>
                    {
                        break;
 802bf72:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 802bf74:	7abb      	ldrb	r3, [r7, #10]
 802bf76:	f003 0310 	and.w	r3, r3, #16
 802bf7a:	2b00      	cmp	r3, #0
 802bf7c:	d101      	bne.n	802bf82 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 802bf7e:	23fb      	movs	r3, #251	; 0xfb
 802bf80:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 802bf82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802bf86:	4618      	mov	r0, r3
 802bf88:	3710      	adds	r7, #16
 802bf8a:	46bd      	mov	sp, r7
 802bf8c:	bd80      	pop	{r7, pc}

0802bf8e <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 802bf8e:	b580      	push	{r7, lr}
 802bf90:	b086      	sub	sp, #24
 802bf92:	af00      	add	r7, sp, #0
 802bf94:	60f8      	str	r0, [r7, #12]
 802bf96:	60b9      	str	r1, [r7, #8]
 802bf98:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802bf9a:	2300      	movs	r3, #0
 802bf9c:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 802bf9e:	687b      	ldr	r3, [r7, #4]
 802bfa0:	2b00      	cmp	r3, #0
 802bfa2:	d027      	beq.n	802bff4 <bhy2_hif_upload_firmware_to_ram+0x66>
 802bfa4:	68fb      	ldr	r3, [r7, #12]
 802bfa6:	2b00      	cmp	r3, #0
 802bfa8:	d024      	beq.n	802bff4 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 802bfaa:	68fb      	ldr	r3, [r7, #12]
 802bfac:	781b      	ldrb	r3, [r3, #0]
 802bfae:	b21a      	sxth	r2, r3
 802bfb0:	68fb      	ldr	r3, [r7, #12]
 802bfb2:	3301      	adds	r3, #1
 802bfb4:	781b      	ldrb	r3, [r3, #0]
 802bfb6:	021b      	lsls	r3, r3, #8
 802bfb8:	b21b      	sxth	r3, r3
 802bfba:	4313      	orrs	r3, r2
 802bfbc:	b21b      	sxth	r3, r3
 802bfbe:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 802bfc0:	8abb      	ldrh	r3, [r7, #20]
 802bfc2:	f246 622b 	movw	r2, #26155	; 0x662b
 802bfc6:	4293      	cmp	r3, r2
 802bfc8:	d002      	beq.n	802bfd0 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 802bfca:	23fc      	movs	r3, #252	; 0xfc
 802bfcc:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802bfce:	e014      	b.n	802bffa <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 802bfd0:	687b      	ldr	r3, [r7, #4]
 802bfd2:	68ba      	ldr	r2, [r7, #8]
 802bfd4:	68f9      	ldr	r1, [r7, #12]
 802bfd6:	2002      	movs	r0, #2
 802bfd8:	f7ff fe9b 	bl	802bd12 <bhy2_hif_exec_cmd>
 802bfdc:	4603      	mov	r3, r0
 802bfde:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 802bfe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802bfe4:	2b00      	cmp	r3, #0
 802bfe6:	d108      	bne.n	802bffa <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 802bfe8:	6878      	ldr	r0, [r7, #4]
 802bfea:	f7ff fcf2 	bl	802b9d2 <bhy2_hif_check_boot_status_ram>
 802bfee:	4603      	mov	r3, r0
 802bff0:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802bff2:	e002      	b.n	802bffa <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bff4:	23ff      	movs	r3, #255	; 0xff
 802bff6:	75fb      	strb	r3, [r7, #23]
 802bff8:	e000      	b.n	802bffc <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 802bffa:	bf00      	nop
    }

    return rslt;
 802bffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c000:	4618      	mov	r0, r3
 802c002:	3718      	adds	r7, #24
 802c004:	46bd      	mov	sp, r7
 802c006:	bd80      	pop	{r7, pc}

0802c008 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 802c008:	b580      	push	{r7, lr}
 802c00a:	b084      	sub	sp, #16
 802c00c:	af00      	add	r7, sp, #0
 802c00e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 802c010:	687b      	ldr	r3, [r7, #4]
 802c012:	2200      	movs	r2, #0
 802c014:	2100      	movs	r1, #0
 802c016:	2003      	movs	r0, #3
 802c018:	f7ff fe7b 	bl	802bd12 <bhy2_hif_exec_cmd>
 802c01c:	4603      	mov	r3, r0
 802c01e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802c020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c024:	2b00      	cmp	r3, #0
 802c026:	d104      	bne.n	802c032 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 802c028:	6878      	ldr	r0, [r7, #4]
 802c02a:	f7ff fcd2 	bl	802b9d2 <bhy2_hif_check_boot_status_ram>
 802c02e:	4603      	mov	r3, r0
 802c030:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c036:	4618      	mov	r0, r3
 802c038:	3710      	adds	r7, #16
 802c03a:	46bd      	mov	sp, r7
 802c03c:	bd80      	pop	{r7, pc}

0802c03e <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802c03e:	b580      	push	{r7, lr}
 802c040:	b086      	sub	sp, #24
 802c042:	af02      	add	r7, sp, #8
 802c044:	60f8      	str	r0, [r7, #12]
 802c046:	60b9      	str	r1, [r7, #8]
 802c048:	607a      	str	r2, [r7, #4]
 802c04a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802c04c:	69bb      	ldr	r3, [r7, #24]
 802c04e:	9301      	str	r3, [sp, #4]
 802c050:	683b      	ldr	r3, [r7, #0]
 802c052:	9300      	str	r3, [sp, #0]
 802c054:	687b      	ldr	r3, [r7, #4]
 802c056:	68ba      	ldr	r2, [r7, #8]
 802c058:	68f9      	ldr	r1, [r7, #12]
 802c05a:	2001      	movs	r0, #1
 802c05c:	f7ff fd00 	bl	802ba60 <bhy2_hif_get_fifo>
 802c060:	4603      	mov	r3, r0
}
 802c062:	4618      	mov	r0, r3
 802c064:	3710      	adds	r7, #16
 802c066:	46bd      	mov	sp, r7
 802c068:	bd80      	pop	{r7, pc}

0802c06a <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 802c06a:	b580      	push	{r7, lr}
 802c06c:	b086      	sub	sp, #24
 802c06e:	af02      	add	r7, sp, #8
 802c070:	60f8      	str	r0, [r7, #12]
 802c072:	60b9      	str	r1, [r7, #8]
 802c074:	607a      	str	r2, [r7, #4]
 802c076:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802c078:	69bb      	ldr	r3, [r7, #24]
 802c07a:	9301      	str	r3, [sp, #4]
 802c07c:	683b      	ldr	r3, [r7, #0]
 802c07e:	9300      	str	r3, [sp, #0]
 802c080:	687b      	ldr	r3, [r7, #4]
 802c082:	68ba      	ldr	r2, [r7, #8]
 802c084:	68f9      	ldr	r1, [r7, #12]
 802c086:	2002      	movs	r0, #2
 802c088:	f7ff fcea 	bl	802ba60 <bhy2_hif_get_fifo>
 802c08c:	4603      	mov	r3, r0
}
 802c08e:	4618      	mov	r0, r3
 802c090:	3710      	adds	r7, #16
 802c092:	46bd      	mov	sp, r7
 802c094:	bd80      	pop	{r7, pc}

0802c096 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802c096:	b580      	push	{r7, lr}
 802c098:	b086      	sub	sp, #24
 802c09a:	af00      	add	r7, sp, #0
 802c09c:	60f8      	str	r0, [r7, #12]
 802c09e:	60b9      	str	r1, [r7, #8]
 802c0a0:	607a      	str	r2, [r7, #4]
 802c0a2:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 802c0a4:	f107 0110 	add.w	r1, r7, #16
 802c0a8:	6a3b      	ldr	r3, [r7, #32]
 802c0aa:	2204      	movs	r2, #4
 802c0ac:	2003      	movs	r0, #3
 802c0ae:	f7ff fda2 	bl	802bbf6 <bhy2_hif_get_regs>
 802c0b2:	4603      	mov	r3, r0
 802c0b4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 802c0b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c0ba:	2b00      	cmp	r3, #0
 802c0bc:	d130      	bne.n	802c120 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 802c0be:	7c3b      	ldrb	r3, [r7, #16]
 802c0c0:	b21a      	sxth	r2, r3
 802c0c2:	f107 0310 	add.w	r3, r7, #16
 802c0c6:	3301      	adds	r3, #1
 802c0c8:	781b      	ldrb	r3, [r3, #0]
 802c0ca:	021b      	lsls	r3, r3, #8
 802c0cc:	b21b      	sxth	r3, r3
 802c0ce:	4313      	orrs	r3, r2
 802c0d0:	b21b      	sxth	r3, r3
 802c0d2:	b29a      	uxth	r2, r3
 802c0d4:	68fb      	ldr	r3, [r7, #12]
 802c0d6:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 802c0d8:	7cbb      	ldrb	r3, [r7, #18]
 802c0da:	b21a      	sxth	r2, r3
 802c0dc:	f107 0310 	add.w	r3, r7, #16
 802c0e0:	3302      	adds	r3, #2
 802c0e2:	3301      	adds	r3, #1
 802c0e4:	781b      	ldrb	r3, [r3, #0]
 802c0e6:	021b      	lsls	r3, r3, #8
 802c0e8:	b21b      	sxth	r3, r3
 802c0ea:	4313      	orrs	r3, r2
 802c0ec:	b21b      	sxth	r3, r3
 802c0ee:	b29b      	uxth	r3, r3
 802c0f0:	461a      	mov	r2, r3
 802c0f2:	683b      	ldr	r3, [r7, #0]
 802c0f4:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 802c0f6:	683b      	ldr	r3, [r7, #0]
 802c0f8:	681b      	ldr	r3, [r3, #0]
 802c0fa:	2b00      	cmp	r3, #0
 802c0fc:	d010      	beq.n	802c120 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 802c0fe:	683b      	ldr	r3, [r7, #0]
 802c100:	681b      	ldr	r3, [r3, #0]
 802c102:	687a      	ldr	r2, [r7, #4]
 802c104:	429a      	cmp	r2, r3
 802c106:	d202      	bcs.n	802c10e <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 802c108:	23fa      	movs	r3, #250	; 0xfa
 802c10a:	75fb      	strb	r3, [r7, #23]
 802c10c:	e008      	b.n	802c120 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 802c10e:	683b      	ldr	r3, [r7, #0]
 802c110:	681a      	ldr	r2, [r3, #0]
 802c112:	6a3b      	ldr	r3, [r7, #32]
 802c114:	68b9      	ldr	r1, [r7, #8]
 802c116:	2003      	movs	r0, #3
 802c118:	f7ff fd6d 	bl	802bbf6 <bhy2_hif_get_regs>
 802c11c:	4603      	mov	r3, r0
 802c11e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 802c120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c124:	4618      	mov	r0, r3
 802c126:	3718      	adds	r7, #24
 802c128:	46bd      	mov	sp, r7
 802c12a:	bd80      	pop	{r7, pc}

0802c12c <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 802c12c:	b580      	push	{r7, lr}
 802c12e:	b086      	sub	sp, #24
 802c130:	af02      	add	r7, sp, #8
 802c132:	60f8      	str	r0, [r7, #12]
 802c134:	60b9      	str	r1, [r7, #8]
 802c136:	607a      	str	r2, [r7, #4]
 802c138:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802c13a:	69bb      	ldr	r3, [r7, #24]
 802c13c:	9301      	str	r3, [sp, #4]
 802c13e:	683b      	ldr	r3, [r7, #0]
 802c140:	9300      	str	r3, [sp, #0]
 802c142:	687b      	ldr	r3, [r7, #4]
 802c144:	68ba      	ldr	r2, [r7, #8]
 802c146:	68f9      	ldr	r1, [r7, #12]
 802c148:	2003      	movs	r0, #3
 802c14a:	f7ff fc89 	bl	802ba60 <bhy2_hif_get_fifo>
 802c14e:	4603      	mov	r3, r0
}
 802c150:	4618      	mov	r0, r3
 802c152:	3710      	adds	r7, #16
 802c154:	46bd      	mov	sp, r7
 802c156:	bd80      	pop	{r7, pc}

0802c158 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 802c158:	b580      	push	{r7, lr}
 802c15a:	b088      	sub	sp, #32
 802c15c:	af00      	add	r7, sp, #0
 802c15e:	4603      	mov	r3, r0
 802c160:	ed87 0a02 	vstr	s0, [r7, #8]
 802c164:	6079      	str	r1, [r7, #4]
 802c166:	603a      	str	r2, [r7, #0]
 802c168:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 802c16a:	68bb      	ldr	r3, [r7, #8]
 802c16c:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 802c16e:	7bfb      	ldrb	r3, [r7, #15]
 802c170:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 802c172:	697b      	ldr	r3, [r7, #20]
 802c174:	b2db      	uxtb	r3, r3
 802c176:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 802c178:	697b      	ldr	r3, [r7, #20]
 802c17a:	0a1b      	lsrs	r3, r3, #8
 802c17c:	b2db      	uxtb	r3, r3
 802c17e:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 802c180:	697b      	ldr	r3, [r7, #20]
 802c182:	0c1b      	lsrs	r3, r3, #16
 802c184:	b2db      	uxtb	r3, r3
 802c186:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 802c188:	697b      	ldr	r3, [r7, #20]
 802c18a:	0e1b      	lsrs	r3, r3, #24
 802c18c:	b2db      	uxtb	r3, r3
 802c18e:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 802c190:	687b      	ldr	r3, [r7, #4]
 802c192:	b2db      	uxtb	r3, r3
 802c194:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 802c196:	687b      	ldr	r3, [r7, #4]
 802c198:	0a1b      	lsrs	r3, r3, #8
 802c19a:	b2db      	uxtb	r3, r3
 802c19c:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 802c19e:	687b      	ldr	r3, [r7, #4]
 802c1a0:	0c1b      	lsrs	r3, r3, #16
 802c1a2:	b2db      	uxtb	r3, r3
 802c1a4:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 802c1a6:	f107 0118 	add.w	r1, r7, #24
 802c1aa:	683b      	ldr	r3, [r7, #0]
 802c1ac:	2208      	movs	r2, #8
 802c1ae:	200d      	movs	r0, #13
 802c1b0:	f7ff fdaf 	bl	802bd12 <bhy2_hif_exec_cmd>
 802c1b4:	4603      	mov	r3, r0
}
 802c1b6:	4618      	mov	r0, r3
 802c1b8:	3720      	adds	r7, #32
 802c1ba:	46bd      	mov	sp, r7
 802c1bc:	bd80      	pop	{r7, pc}

0802c1be <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 802c1be:	b580      	push	{r7, lr}
 802c1c0:	b090      	sub	sp, #64	; 0x40
 802c1c2:	af02      	add	r7, sp, #8
 802c1c4:	4603      	mov	r3, r0
 802c1c6:	60b9      	str	r1, [r7, #8]
 802c1c8:	607a      	str	r2, [r7, #4]
 802c1ca:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 802c1cc:	68bb      	ldr	r3, [r7, #8]
 802c1ce:	2b00      	cmp	r3, #0
 802c1d0:	f000 80da 	beq.w	802c388 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 802c1d4:	7bfb      	ldrb	r3, [r7, #15]
 802c1d6:	2bf5      	cmp	r3, #245	; 0xf5
 802c1d8:	d903      	bls.n	802c1e2 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 802c1da:	23fe      	movs	r3, #254	; 0xfe
 802c1dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802c1e0:	e0d5      	b.n	802c38e <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 802c1e2:	7bfb      	ldrb	r3, [r7, #15]
 802c1e4:	b29b      	uxth	r3, r3
 802c1e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 802c1ea:	b298      	uxth	r0, r3
 802c1ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802c1f0:	f107 0114 	add.w	r1, r7, #20
 802c1f4:	687b      	ldr	r3, [r7, #4]
 802c1f6:	9300      	str	r3, [sp, #0]
 802c1f8:	4613      	mov	r3, r2
 802c1fa:	221c      	movs	r2, #28
 802c1fc:	f7ff fda2 	bl	802bd44 <bhy2_hif_get_parameter>
 802c200:	4603      	mov	r3, r0
 802c202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 802c206:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802c20a:	2b00      	cmp	r3, #0
 802c20c:	f040 80bf 	bne.w	802c38e <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 802c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c212:	2b1c      	cmp	r3, #28
 802c214:	d003      	beq.n	802c21e <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 802c216:	23fe      	movs	r3, #254	; 0xfe
 802c218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802c21c:	e0b7      	b.n	802c38e <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 802c21e:	7d3a      	ldrb	r2, [r7, #20]
 802c220:	68bb      	ldr	r3, [r7, #8]
 802c222:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 802c224:	7d7a      	ldrb	r2, [r7, #21]
 802c226:	68bb      	ldr	r3, [r7, #8]
 802c228:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 802c22a:	7dba      	ldrb	r2, [r7, #22]
 802c22c:	68bb      	ldr	r3, [r7, #8]
 802c22e:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 802c230:	7dfa      	ldrb	r2, [r7, #23]
 802c232:	68bb      	ldr	r3, [r7, #8]
 802c234:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 802c236:	7e3a      	ldrb	r2, [r7, #24]
 802c238:	68bb      	ldr	r3, [r7, #8]
 802c23a:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 802c23c:	7e7a      	ldrb	r2, [r7, #25]
 802c23e:	68bb      	ldr	r3, [r7, #8]
 802c240:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 802c242:	7eba      	ldrb	r2, [r7, #26]
 802c244:	68bb      	ldr	r3, [r7, #8]
 802c246:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 802c248:	7efa      	ldrb	r2, [r7, #27]
 802c24a:	68bb      	ldr	r3, [r7, #8]
 802c24c:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 802c24e:	7f3a      	ldrb	r2, [r7, #28]
 802c250:	68bb      	ldr	r3, [r7, #8]
 802c252:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 802c254:	7f7a      	ldrb	r2, [r7, #29]
 802c256:	68bb      	ldr	r3, [r7, #8]
 802c258:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 802c25a:	7fba      	ldrb	r2, [r7, #30]
 802c25c:	68bb      	ldr	r3, [r7, #8]
 802c25e:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 802c260:	7ffa      	ldrb	r2, [r7, #31]
 802c262:	68bb      	ldr	r3, [r7, #8]
 802c264:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 802c266:	f897 2020 	ldrb.w	r2, [r7, #32]
 802c26a:	68bb      	ldr	r3, [r7, #8]
 802c26c:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 802c26e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802c272:	68bb      	ldr	r3, [r7, #8]
 802c274:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 802c276:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802c27a:	68bb      	ldr	r3, [r7, #8]
 802c27c:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 802c27e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 802c282:	68bb      	ldr	r3, [r7, #8]
 802c284:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 802c286:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802c28a:	68bb      	ldr	r3, [r7, #8]
 802c28c:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 802c28e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 802c292:	68bb      	ldr	r3, [r7, #8]
 802c294:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 802c296:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c29a:	68bb      	ldr	r3, [r7, #8]
 802c29c:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 802c29e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c2a2:	68bb      	ldr	r3, [r7, #8]
 802c2a4:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 802c2a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802c2aa:	68bb      	ldr	r3, [r7, #8]
 802c2ac:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 802c2ae:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 802c2b2:	68bb      	ldr	r3, [r7, #8]
 802c2b4:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 802c2b6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 802c2ba:	68bb      	ldr	r3, [r7, #8]
 802c2bc:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802c2be:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 802c2c2:	68bb      	ldr	r3, [r7, #8]
 802c2c4:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 802c2c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802c2ca:	68bb      	ldr	r3, [r7, #8]
 802c2cc:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802c2ce:	68bb      	ldr	r3, [r7, #8]
 802c2d0:	791b      	ldrb	r3, [r3, #4]
 802c2d2:	b21a      	sxth	r2, r3
 802c2d4:	68bb      	ldr	r3, [r7, #8]
 802c2d6:	795b      	ldrb	r3, [r3, #5]
 802c2d8:	021b      	lsls	r3, r3, #8
 802c2da:	b21b      	sxth	r3, r3
 802c2dc:	4313      	orrs	r3, r2
 802c2de:	b21b      	sxth	r3, r3
 802c2e0:	b29a      	uxth	r2, r3
 802c2e2:	68bb      	ldr	r3, [r7, #8]
 802c2e4:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 802c2e6:	68bb      	ldr	r3, [r7, #8]
 802c2e8:	799b      	ldrb	r3, [r3, #6]
 802c2ea:	b21a      	sxth	r2, r3
 802c2ec:	68bb      	ldr	r3, [r7, #8]
 802c2ee:	79db      	ldrb	r3, [r3, #7]
 802c2f0:	021b      	lsls	r3, r3, #8
 802c2f2:	b21b      	sxth	r3, r3
 802c2f4:	4313      	orrs	r3, r2
 802c2f6:	b21b      	sxth	r3, r3
 802c2f8:	b29a      	uxth	r2, r3
 802c2fa:	68bb      	ldr	r3, [r7, #8]
 802c2fc:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802c2fe:	68bb      	ldr	r3, [r7, #8]
 802c300:	7a1b      	ldrb	r3, [r3, #8]
 802c302:	461a      	mov	r2, r3
 802c304:	68bb      	ldr	r3, [r7, #8]
 802c306:	7a5b      	ldrb	r3, [r3, #9]
 802c308:	021b      	lsls	r3, r3, #8
 802c30a:	431a      	orrs	r2, r3
 802c30c:	68bb      	ldr	r3, [r7, #8]
 802c30e:	7a9b      	ldrb	r3, [r3, #10]
 802c310:	041b      	lsls	r3, r3, #16
 802c312:	431a      	orrs	r2, r3
 802c314:	68bb      	ldr	r3, [r7, #8]
 802c316:	7adb      	ldrb	r3, [r3, #11]
 802c318:	061b      	lsls	r3, r3, #24
 802c31a:	431a      	orrs	r2, r3
 802c31c:	68bb      	ldr	r3, [r7, #8]
 802c31e:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 802c320:	68bb      	ldr	r3, [r7, #8]
 802c322:	7b1b      	ldrb	r3, [r3, #12]
 802c324:	461a      	mov	r2, r3
 802c326:	68bb      	ldr	r3, [r7, #8]
 802c328:	7b5b      	ldrb	r3, [r3, #13]
 802c32a:	021b      	lsls	r3, r3, #8
 802c32c:	431a      	orrs	r2, r3
 802c32e:	68bb      	ldr	r3, [r7, #8]
 802c330:	7b9b      	ldrb	r3, [r3, #14]
 802c332:	041b      	lsls	r3, r3, #16
 802c334:	431a      	orrs	r2, r3
 802c336:	68bb      	ldr	r3, [r7, #8]
 802c338:	7bdb      	ldrb	r3, [r3, #15]
 802c33a:	061b      	lsls	r3, r3, #24
 802c33c:	431a      	orrs	r2, r3
 802c33e:	68bb      	ldr	r3, [r7, #8]
 802c340:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 802c342:	68bb      	ldr	r3, [r7, #8]
 802c344:	7c1b      	ldrb	r3, [r3, #16]
 802c346:	461a      	mov	r2, r3
 802c348:	68bb      	ldr	r3, [r7, #8]
 802c34a:	7c5b      	ldrb	r3, [r3, #17]
 802c34c:	021b      	lsls	r3, r3, #8
 802c34e:	431a      	orrs	r2, r3
 802c350:	68bb      	ldr	r3, [r7, #8]
 802c352:	7c9b      	ldrb	r3, [r3, #18]
 802c354:	041b      	lsls	r3, r3, #16
 802c356:	431a      	orrs	r2, r3
 802c358:	68bb      	ldr	r3, [r7, #8]
 802c35a:	7cdb      	ldrb	r3, [r3, #19]
 802c35c:	061b      	lsls	r3, r3, #24
 802c35e:	431a      	orrs	r2, r3
 802c360:	68bb      	ldr	r3, [r7, #8]
 802c362:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 802c364:	68bb      	ldr	r3, [r7, #8]
 802c366:	7e1b      	ldrb	r3, [r3, #24]
 802c368:	461a      	mov	r2, r3
 802c36a:	68bb      	ldr	r3, [r7, #8]
 802c36c:	7e5b      	ldrb	r3, [r3, #25]
 802c36e:	021b      	lsls	r3, r3, #8
 802c370:	431a      	orrs	r2, r3
 802c372:	68bb      	ldr	r3, [r7, #8]
 802c374:	7e9b      	ldrb	r3, [r3, #26]
 802c376:	041b      	lsls	r3, r3, #16
 802c378:	431a      	orrs	r2, r3
 802c37a:	68bb      	ldr	r3, [r7, #8]
 802c37c:	7edb      	ldrb	r3, [r3, #27]
 802c37e:	061b      	lsls	r3, r3, #24
 802c380:	431a      	orrs	r2, r3
 802c382:	68bb      	ldr	r3, [r7, #8]
 802c384:	619a      	str	r2, [r3, #24]
 802c386:	e002      	b.n	802c38e <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c388:	23ff      	movs	r3, #255	; 0xff
 802c38a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 802c38e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 802c392:	4618      	mov	r0, r3
 802c394:	3738      	adds	r7, #56	; 0x38
 802c396:	46bd      	mov	sp, r7
 802c398:	bd80      	pop	{r7, pc}

0802c39a <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 802c39a:	b480      	push	{r7}
 802c39c:	b083      	sub	sp, #12
 802c39e:	af00      	add	r7, sp, #0
 802c3a0:	6078      	str	r0, [r7, #4]
 802c3a2:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 802c3a4:	687b      	ldr	r3, [r7, #4]
 802c3a6:	781b      	ldrb	r3, [r3, #0]
 802c3a8:	b21a      	sxth	r2, r3
 802c3aa:	687b      	ldr	r3, [r7, #4]
 802c3ac:	3301      	adds	r3, #1
 802c3ae:	781b      	ldrb	r3, [r3, #0]
 802c3b0:	021b      	lsls	r3, r3, #8
 802c3b2:	b21b      	sxth	r3, r3
 802c3b4:	4313      	orrs	r3, r2
 802c3b6:	b21a      	sxth	r2, r3
 802c3b8:	683b      	ldr	r3, [r7, #0]
 802c3ba:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 802c3bc:	687b      	ldr	r3, [r7, #4]
 802c3be:	3302      	adds	r3, #2
 802c3c0:	781b      	ldrb	r3, [r3, #0]
 802c3c2:	b21a      	sxth	r2, r3
 802c3c4:	687b      	ldr	r3, [r7, #4]
 802c3c6:	3303      	adds	r3, #3
 802c3c8:	781b      	ldrb	r3, [r3, #0]
 802c3ca:	021b      	lsls	r3, r3, #8
 802c3cc:	b21b      	sxth	r3, r3
 802c3ce:	4313      	orrs	r3, r2
 802c3d0:	b21a      	sxth	r2, r3
 802c3d2:	683b      	ldr	r3, [r7, #0]
 802c3d4:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 802c3d6:	687b      	ldr	r3, [r7, #4]
 802c3d8:	3304      	adds	r3, #4
 802c3da:	781b      	ldrb	r3, [r3, #0]
 802c3dc:	b21a      	sxth	r2, r3
 802c3de:	687b      	ldr	r3, [r7, #4]
 802c3e0:	3305      	adds	r3, #5
 802c3e2:	781b      	ldrb	r3, [r3, #0]
 802c3e4:	021b      	lsls	r3, r3, #8
 802c3e6:	b21b      	sxth	r3, r3
 802c3e8:	4313      	orrs	r3, r2
 802c3ea:	b21a      	sxth	r2, r3
 802c3ec:	683b      	ldr	r3, [r7, #0]
 802c3ee:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802c3f0:	687b      	ldr	r3, [r7, #4]
 802c3f2:	3306      	adds	r3, #6
 802c3f4:	781b      	ldrb	r3, [r3, #0]
 802c3f6:	b21a      	sxth	r2, r3
 802c3f8:	687b      	ldr	r3, [r7, #4]
 802c3fa:	3307      	adds	r3, #7
 802c3fc:	781b      	ldrb	r3, [r3, #0]
 802c3fe:	021b      	lsls	r3, r3, #8
 802c400:	b21b      	sxth	r3, r3
 802c402:	4313      	orrs	r3, r2
 802c404:	b21a      	sxth	r2, r3
 802c406:	683b      	ldr	r3, [r7, #0]
 802c408:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 802c40a:	687b      	ldr	r3, [r7, #4]
 802c40c:	3308      	adds	r3, #8
 802c40e:	781b      	ldrb	r3, [r3, #0]
 802c410:	b21a      	sxth	r2, r3
 802c412:	687b      	ldr	r3, [r7, #4]
 802c414:	3309      	adds	r3, #9
 802c416:	781b      	ldrb	r3, [r3, #0]
 802c418:	021b      	lsls	r3, r3, #8
 802c41a:	b21b      	sxth	r3, r3
 802c41c:	4313      	orrs	r3, r2
 802c41e:	b21b      	sxth	r3, r3
 802c420:	b29a      	uxth	r2, r3
 802c422:	683b      	ldr	r3, [r7, #0]
 802c424:	811a      	strh	r2, [r3, #8]
}
 802c426:	bf00      	nop
 802c428:	370c      	adds	r7, #12
 802c42a:	46bd      	mov	sp, r7
 802c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c430:	4770      	bx	lr
	...

0802c434 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 802c434:	b580      	push	{r7, lr}
 802c436:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 802c438:	4b12      	ldr	r3, [pc, #72]	; (802c484 <MX_COMP2_Init+0x50>)
 802c43a:	4a13      	ldr	r2, [pc, #76]	; (802c488 <MX_COMP2_Init+0x54>)
 802c43c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802c43e:	4b11      	ldr	r3, [pc, #68]	; (802c484 <MX_COMP2_Init+0x50>)
 802c440:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802c444:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 802c446:	4b0f      	ldr	r3, [pc, #60]	; (802c484 <MX_COMP2_Init+0x50>)
 802c448:	2200      	movs	r2, #0
 802c44a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 802c44c:	4b0d      	ldr	r3, [pc, #52]	; (802c484 <MX_COMP2_Init+0x50>)
 802c44e:	2200      	movs	r2, #0
 802c450:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802c452:	4b0c      	ldr	r3, [pc, #48]	; (802c484 <MX_COMP2_Init+0x50>)
 802c454:	2200      	movs	r2, #0
 802c456:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 802c458:	4b0a      	ldr	r3, [pc, #40]	; (802c484 <MX_COMP2_Init+0x50>)
 802c45a:	2200      	movs	r2, #0
 802c45c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 802c45e:	4b09      	ldr	r3, [pc, #36]	; (802c484 <MX_COMP2_Init+0x50>)
 802c460:	2200      	movs	r2, #0
 802c462:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 802c464:	4b07      	ldr	r3, [pc, #28]	; (802c484 <MX_COMP2_Init+0x50>)
 802c466:	2200      	movs	r2, #0
 802c468:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 802c46a:	4b06      	ldr	r3, [pc, #24]	; (802c484 <MX_COMP2_Init+0x50>)
 802c46c:	2231      	movs	r2, #49	; 0x31
 802c46e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 802c470:	4804      	ldr	r0, [pc, #16]	; (802c484 <MX_COMP2_Init+0x50>)
 802c472:	f001 fd19 	bl	802dea8 <HAL_COMP_Init>
 802c476:	4603      	mov	r3, r0
 802c478:	2b00      	cmp	r3, #0
 802c47a:	d001      	beq.n	802c480 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 802c47c:	f000 fc22 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 802c480:	bf00      	nop
 802c482:	bd80      	pop	{r7, pc}
 802c484:	24001520 	.word	0x24001520
 802c488:	58003810 	.word	0x58003810

0802c48c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 802c48c:	b580      	push	{r7, lr}
 802c48e:	b08a      	sub	sp, #40	; 0x28
 802c490:	af00      	add	r7, sp, #0
 802c492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802c494:	f107 0314 	add.w	r3, r7, #20
 802c498:	2200      	movs	r2, #0
 802c49a:	601a      	str	r2, [r3, #0]
 802c49c:	605a      	str	r2, [r3, #4]
 802c49e:	609a      	str	r2, [r3, #8]
 802c4a0:	60da      	str	r2, [r3, #12]
 802c4a2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 802c4a4:	687b      	ldr	r3, [r7, #4]
 802c4a6:	681b      	ldr	r3, [r3, #0]
 802c4a8:	4a1c      	ldr	r2, [pc, #112]	; (802c51c <HAL_COMP_MspInit+0x90>)
 802c4aa:	4293      	cmp	r3, r2
 802c4ac:	d132      	bne.n	802c514 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802c4ae:	4b1c      	ldr	r3, [pc, #112]	; (802c520 <HAL_COMP_MspInit+0x94>)
 802c4b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802c4b4:	4a1a      	ldr	r2, [pc, #104]	; (802c520 <HAL_COMP_MspInit+0x94>)
 802c4b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802c4ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802c4be:	4b18      	ldr	r3, [pc, #96]	; (802c520 <HAL_COMP_MspInit+0x94>)
 802c4c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802c4c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802c4c8:	613b      	str	r3, [r7, #16]
 802c4ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802c4cc:	4b14      	ldr	r3, [pc, #80]	; (802c520 <HAL_COMP_MspInit+0x94>)
 802c4ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c4d2:	4a13      	ldr	r2, [pc, #76]	; (802c520 <HAL_COMP_MspInit+0x94>)
 802c4d4:	f043 0310 	orr.w	r3, r3, #16
 802c4d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c4dc:	4b10      	ldr	r3, [pc, #64]	; (802c520 <HAL_COMP_MspInit+0x94>)
 802c4de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c4e2:	f003 0310 	and.w	r3, r3, #16
 802c4e6:	60fb      	str	r3, [r7, #12]
 802c4e8:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802c4ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c4ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802c4f0:	2303      	movs	r3, #3
 802c4f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c4f4:	2300      	movs	r3, #0
 802c4f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802c4f8:	f107 0314 	add.w	r3, r7, #20
 802c4fc:	4619      	mov	r1, r3
 802c4fe:	4809      	ldr	r0, [pc, #36]	; (802c524 <HAL_COMP_MspInit+0x98>)
 802c500:	f004 ffe8 	bl	80314d4 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 802c504:	2200      	movs	r2, #0
 802c506:	2104      	movs	r1, #4
 802c508:	2089      	movs	r0, #137	; 0x89
 802c50a:	f001 ff90 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802c50e:	2089      	movs	r0, #137	; 0x89
 802c510:	f001 ffa7 	bl	802e462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 802c514:	bf00      	nop
 802c516:	3728      	adds	r7, #40	; 0x28
 802c518:	46bd      	mov	sp, r7
 802c51a:	bd80      	pop	{r7, pc}
 802c51c:	58003810 	.word	0x58003810
 802c520:	58024400 	.word	0x58024400
 802c524:	58021000 	.word	0x58021000

0802c528 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 802c528:	b580      	push	{r7, lr}
 802c52a:	b08a      	sub	sp, #40	; 0x28
 802c52c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802c52e:	1d3b      	adds	r3, r7, #4
 802c530:	2224      	movs	r2, #36	; 0x24
 802c532:	2100      	movs	r1, #0
 802c534:	4618      	mov	r0, r3
 802c536:	f012 fd87 	bl	803f048 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 802c53a:	4b12      	ldr	r3, [pc, #72]	; (802c584 <MX_DAC1_Init+0x5c>)
 802c53c:	4a12      	ldr	r2, [pc, #72]	; (802c588 <MX_DAC1_Init+0x60>)
 802c53e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 802c540:	4810      	ldr	r0, [pc, #64]	; (802c584 <MX_DAC1_Init+0x5c>)
 802c542:	f001 ffa8 	bl	802e496 <HAL_DAC_Init>
 802c546:	4603      	mov	r3, r0
 802c548:	2b00      	cmp	r3, #0
 802c54a:	d001      	beq.n	802c550 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 802c54c:	f000 fbba 	bl	802ccc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 802c550:	2300      	movs	r3, #0
 802c552:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 802c554:	2300      	movs	r3, #0
 802c556:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 802c558:	2302      	movs	r3, #2
 802c55a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 802c55c:	2302      	movs	r3, #2
 802c55e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 802c560:	2300      	movs	r3, #0
 802c562:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 802c564:	1d3b      	adds	r3, r7, #4
 802c566:	2200      	movs	r2, #0
 802c568:	4619      	mov	r1, r3
 802c56a:	4806      	ldr	r0, [pc, #24]	; (802c584 <MX_DAC1_Init+0x5c>)
 802c56c:	f002 f82c 	bl	802e5c8 <HAL_DAC_ConfigChannel>
 802c570:	4603      	mov	r3, r0
 802c572:	2b00      	cmp	r3, #0
 802c574:	d001      	beq.n	802c57a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 802c576:	f000 fba5 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 802c57a:	bf00      	nop
 802c57c:	3728      	adds	r7, #40	; 0x28
 802c57e:	46bd      	mov	sp, r7
 802c580:	bd80      	pop	{r7, pc}
 802c582:	bf00      	nop
 802c584:	2400154c 	.word	0x2400154c
 802c588:	40007400 	.word	0x40007400

0802c58c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 802c58c:	b480      	push	{r7}
 802c58e:	b085      	sub	sp, #20
 802c590:	af00      	add	r7, sp, #0
 802c592:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 802c594:	687b      	ldr	r3, [r7, #4]
 802c596:	681b      	ldr	r3, [r3, #0]
 802c598:	4a0b      	ldr	r2, [pc, #44]	; (802c5c8 <HAL_DAC_MspInit+0x3c>)
 802c59a:	4293      	cmp	r3, r2
 802c59c:	d10e      	bne.n	802c5bc <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 802c59e:	4b0b      	ldr	r3, [pc, #44]	; (802c5cc <HAL_DAC_MspInit+0x40>)
 802c5a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c5a4:	4a09      	ldr	r2, [pc, #36]	; (802c5cc <HAL_DAC_MspInit+0x40>)
 802c5a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802c5aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802c5ae:	4b07      	ldr	r3, [pc, #28]	; (802c5cc <HAL_DAC_MspInit+0x40>)
 802c5b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c5b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802c5b8:	60fb      	str	r3, [r7, #12]
 802c5ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 802c5bc:	bf00      	nop
 802c5be:	3714      	adds	r7, #20
 802c5c0:	46bd      	mov	sp, r7
 802c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5c6:	4770      	bx	lr
 802c5c8:	40007400 	.word	0x40007400
 802c5cc:	58024400 	.word	0x58024400

0802c5d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802c5d0:	b580      	push	{r7, lr}
 802c5d2:	b082      	sub	sp, #8
 802c5d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 802c5d6:	4b19      	ldr	r3, [pc, #100]	; (802c63c <MX_DMA_Init+0x6c>)
 802c5d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802c5dc:	4a17      	ldr	r2, [pc, #92]	; (802c63c <MX_DMA_Init+0x6c>)
 802c5de:	f043 0301 	orr.w	r3, r3, #1
 802c5e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 802c5e6:	4b15      	ldr	r3, [pc, #84]	; (802c63c <MX_DMA_Init+0x6c>)
 802c5e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802c5ec:	f003 0301 	and.w	r3, r3, #1
 802c5f0:	607b      	str	r3, [r7, #4]
 802c5f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 802c5f4:	2200      	movs	r2, #0
 802c5f6:	2100      	movs	r1, #0
 802c5f8:	200b      	movs	r0, #11
 802c5fa:	f001 ff18 	bl	802e42e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802c5fe:	200b      	movs	r0, #11
 802c600:	f001 ff2f 	bl	802e462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 802c604:	2200      	movs	r2, #0
 802c606:	2100      	movs	r1, #0
 802c608:	200c      	movs	r0, #12
 802c60a:	f001 ff10 	bl	802e42e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802c60e:	200c      	movs	r0, #12
 802c610:	f001 ff27 	bl	802e462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 802c614:	2200      	movs	r2, #0
 802c616:	2100      	movs	r1, #0
 802c618:	200f      	movs	r0, #15
 802c61a:	f001 ff08 	bl	802e42e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802c61e:	200f      	movs	r0, #15
 802c620:	f001 ff1f 	bl	802e462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 802c624:	2200      	movs	r2, #0
 802c626:	2100      	movs	r1, #0
 802c628:	2010      	movs	r0, #16
 802c62a:	f001 ff00 	bl	802e42e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802c62e:	2010      	movs	r0, #16
 802c630:	f001 ff17 	bl	802e462 <HAL_NVIC_EnableIRQ>

}
 802c634:	bf00      	nop
 802c636:	3708      	adds	r7, #8
 802c638:	46bd      	mov	sp, r7
 802c63a:	bd80      	pop	{r7, pc}
 802c63c:	58024400 	.word	0x58024400

0802c640 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 802c640:	b580      	push	{r7, lr}
 802c642:	b08a      	sub	sp, #40	; 0x28
 802c644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802c646:	f107 0314 	add.w	r3, r7, #20
 802c64a:	2200      	movs	r2, #0
 802c64c:	601a      	str	r2, [r3, #0]
 802c64e:	605a      	str	r2, [r3, #4]
 802c650:	609a      	str	r2, [r3, #8]
 802c652:	60da      	str	r2, [r3, #12]
 802c654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802c656:	4b3b      	ldr	r3, [pc, #236]	; (802c744 <MX_GPIO_Init+0x104>)
 802c658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c65c:	4a39      	ldr	r2, [pc, #228]	; (802c744 <MX_GPIO_Init+0x104>)
 802c65e:	f043 0304 	orr.w	r3, r3, #4
 802c662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c666:	4b37      	ldr	r3, [pc, #220]	; (802c744 <MX_GPIO_Init+0x104>)
 802c668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c66c:	f003 0304 	and.w	r3, r3, #4
 802c670:	613b      	str	r3, [r7, #16]
 802c672:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802c674:	4b33      	ldr	r3, [pc, #204]	; (802c744 <MX_GPIO_Init+0x104>)
 802c676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c67a:	4a32      	ldr	r2, [pc, #200]	; (802c744 <MX_GPIO_Init+0x104>)
 802c67c:	f043 0301 	orr.w	r3, r3, #1
 802c680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c684:	4b2f      	ldr	r3, [pc, #188]	; (802c744 <MX_GPIO_Init+0x104>)
 802c686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c68a:	f003 0301 	and.w	r3, r3, #1
 802c68e:	60fb      	str	r3, [r7, #12]
 802c690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802c692:	4b2c      	ldr	r3, [pc, #176]	; (802c744 <MX_GPIO_Init+0x104>)
 802c694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c698:	4a2a      	ldr	r2, [pc, #168]	; (802c744 <MX_GPIO_Init+0x104>)
 802c69a:	f043 0310 	orr.w	r3, r3, #16
 802c69e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c6a2:	4b28      	ldr	r3, [pc, #160]	; (802c744 <MX_GPIO_Init+0x104>)
 802c6a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c6a8:	f003 0310 	and.w	r3, r3, #16
 802c6ac:	60bb      	str	r3, [r7, #8]
 802c6ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802c6b0:	4b24      	ldr	r3, [pc, #144]	; (802c744 <MX_GPIO_Init+0x104>)
 802c6b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c6b6:	4a23      	ldr	r2, [pc, #140]	; (802c744 <MX_GPIO_Init+0x104>)
 802c6b8:	f043 0302 	orr.w	r3, r3, #2
 802c6bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c6c0:	4b20      	ldr	r3, [pc, #128]	; (802c744 <MX_GPIO_Init+0x104>)
 802c6c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c6c6:	f003 0302 	and.w	r3, r3, #2
 802c6ca:	607b      	str	r3, [r7, #4]
 802c6cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802c6ce:	4b1d      	ldr	r3, [pc, #116]	; (802c744 <MX_GPIO_Init+0x104>)
 802c6d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c6d4:	4a1b      	ldr	r2, [pc, #108]	; (802c744 <MX_GPIO_Init+0x104>)
 802c6d6:	f043 0308 	orr.w	r3, r3, #8
 802c6da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c6de:	4b19      	ldr	r3, [pc, #100]	; (802c744 <MX_GPIO_Init+0x104>)
 802c6e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c6e4:	f003 0308 	and.w	r3, r3, #8
 802c6e8:	603b      	str	r3, [r7, #0]
 802c6ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 802c6ec:	2200      	movs	r2, #0
 802c6ee:	2101      	movs	r1, #1
 802c6f0:	4815      	ldr	r0, [pc, #84]	; (802c748 <MX_GPIO_Init+0x108>)
 802c6f2:	f005 f89f 	bl	8031834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 802c6f6:	2200      	movs	r2, #0
 802c6f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802c6fc:	4813      	ldr	r0, [pc, #76]	; (802c74c <MX_GPIO_Init+0x10c>)
 802c6fe:	f005 f899 	bl	8031834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802c702:	2301      	movs	r3, #1
 802c704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802c706:	2301      	movs	r3, #1
 802c708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802c70a:	2302      	movs	r3, #2
 802c70c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802c70e:	2303      	movs	r3, #3
 802c710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802c712:	f107 0314 	add.w	r3, r7, #20
 802c716:	4619      	mov	r1, r3
 802c718:	480b      	ldr	r0, [pc, #44]	; (802c748 <MX_GPIO_Init+0x108>)
 802c71a:	f004 fedb 	bl	80314d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802c71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802c722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802c724:	2301      	movs	r3, #1
 802c726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802c728:	2302      	movs	r3, #2
 802c72a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802c72c:	2303      	movs	r3, #3
 802c72e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 802c730:	f107 0314 	add.w	r3, r7, #20
 802c734:	4619      	mov	r1, r3
 802c736:	4805      	ldr	r0, [pc, #20]	; (802c74c <MX_GPIO_Init+0x10c>)
 802c738:	f004 fecc 	bl	80314d4 <HAL_GPIO_Init>

}
 802c73c:	bf00      	nop
 802c73e:	3728      	adds	r7, #40	; 0x28
 802c740:	46bd      	mov	sp, r7
 802c742:	bd80      	pop	{r7, pc}
 802c744:	58024400 	.word	0x58024400
 802c748:	58020800 	.word	0x58020800
 802c74c:	58021000 	.word	0x58021000

0802c750 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 802c750:	b580      	push	{r7, lr}
 802c752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802c754:	4b1b      	ldr	r3, [pc, #108]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c756:	4a1c      	ldr	r2, [pc, #112]	; (802c7c8 <MX_I2C2_Init+0x78>)
 802c758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 802c75a:	4b1a      	ldr	r3, [pc, #104]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c75c:	4a1b      	ldr	r2, [pc, #108]	; (802c7cc <MX_I2C2_Init+0x7c>)
 802c75e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 802c760:	4b18      	ldr	r3, [pc, #96]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c762:	2200      	movs	r2, #0
 802c764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802c766:	4b17      	ldr	r3, [pc, #92]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c768:	2201      	movs	r2, #1
 802c76a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802c76c:	4b15      	ldr	r3, [pc, #84]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c76e:	2200      	movs	r2, #0
 802c770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 802c772:	4b14      	ldr	r3, [pc, #80]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c774:	2200      	movs	r2, #0
 802c776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 802c778:	4b12      	ldr	r3, [pc, #72]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c77a:	2200      	movs	r2, #0
 802c77c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802c77e:	4b11      	ldr	r3, [pc, #68]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c780:	2200      	movs	r2, #0
 802c782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802c784:	4b0f      	ldr	r3, [pc, #60]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c786:	2200      	movs	r2, #0
 802c788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 802c78a:	480e      	ldr	r0, [pc, #56]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c78c:	f005 f86c 	bl	8031868 <HAL_I2C_Init>
 802c790:	4603      	mov	r3, r0
 802c792:	2b00      	cmp	r3, #0
 802c794:	d001      	beq.n	802c79a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 802c796:	f000 fa95 	bl	802ccc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802c79a:	2100      	movs	r1, #0
 802c79c:	4809      	ldr	r0, [pc, #36]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c79e:	f005 ff78 	bl	8032692 <HAL_I2CEx_ConfigAnalogFilter>
 802c7a2:	4603      	mov	r3, r0
 802c7a4:	2b00      	cmp	r3, #0
 802c7a6:	d001      	beq.n	802c7ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 802c7a8:	f000 fa8c 	bl	802ccc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 802c7ac:	2100      	movs	r1, #0
 802c7ae:	4805      	ldr	r0, [pc, #20]	; (802c7c4 <MX_I2C2_Init+0x74>)
 802c7b0:	f005 ffba 	bl	8032728 <HAL_I2CEx_ConfigDigitalFilter>
 802c7b4:	4603      	mov	r3, r0
 802c7b6:	2b00      	cmp	r3, #0
 802c7b8:	d001      	beq.n	802c7be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 802c7ba:	f000 fa83 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802c7be:	bf00      	nop
 802c7c0:	bd80      	pop	{r7, pc}
 802c7c2:	bf00      	nop
 802c7c4:	24001560 	.word	0x24001560
 802c7c8:	40005800 	.word	0x40005800
 802c7cc:	00b03fdb 	.word	0x00b03fdb

0802c7d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802c7d0:	b580      	push	{r7, lr}
 802c7d2:	b0b8      	sub	sp, #224	; 0xe0
 802c7d4:	af00      	add	r7, sp, #0
 802c7d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802c7d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802c7dc:	2200      	movs	r2, #0
 802c7de:	601a      	str	r2, [r3, #0]
 802c7e0:	605a      	str	r2, [r3, #4]
 802c7e2:	609a      	str	r2, [r3, #8]
 802c7e4:	60da      	str	r2, [r3, #12]
 802c7e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802c7e8:	f107 0310 	add.w	r3, r7, #16
 802c7ec:	22bc      	movs	r2, #188	; 0xbc
 802c7ee:	2100      	movs	r1, #0
 802c7f0:	4618      	mov	r0, r3
 802c7f2:	f012 fc29 	bl	803f048 <memset>
  if(i2cHandle->Instance==I2C2)
 802c7f6:	687b      	ldr	r3, [r7, #4]
 802c7f8:	681b      	ldr	r3, [r3, #0]
 802c7fa:	4a5a      	ldr	r2, [pc, #360]	; (802c964 <HAL_I2C_MspInit+0x194>)
 802c7fc:	4293      	cmp	r3, r2
 802c7fe:	f040 80ad 	bne.w	802c95c <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802c802:	2308      	movs	r3, #8
 802c804:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 802c806:	2300      	movs	r3, #0
 802c808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802c80c:	f107 0310 	add.w	r3, r7, #16
 802c810:	4618      	mov	r0, r3
 802c812:	f008 faaf 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 802c816:	4603      	mov	r3, r0
 802c818:	2b00      	cmp	r3, #0
 802c81a:	d001      	beq.n	802c820 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 802c81c:	f000 fa52 	bl	802ccc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802c820:	4b51      	ldr	r3, [pc, #324]	; (802c968 <HAL_I2C_MspInit+0x198>)
 802c822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c826:	4a50      	ldr	r2, [pc, #320]	; (802c968 <HAL_I2C_MspInit+0x198>)
 802c828:	f043 0302 	orr.w	r3, r3, #2
 802c82c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c830:	4b4d      	ldr	r3, [pc, #308]	; (802c968 <HAL_I2C_MspInit+0x198>)
 802c832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c836:	f003 0302 	and.w	r3, r3, #2
 802c83a:	60fb      	str	r3, [r7, #12]
 802c83c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802c83e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802c842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802c846:	2312      	movs	r3, #18
 802c848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c84c:	2300      	movs	r3, #0
 802c84e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802c852:	2300      	movs	r3, #0
 802c854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802c858:	2304      	movs	r3, #4
 802c85a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802c85e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802c862:	4619      	mov	r1, r3
 802c864:	4841      	ldr	r0, [pc, #260]	; (802c96c <HAL_I2C_MspInit+0x19c>)
 802c866:	f004 fe35 	bl	80314d4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 802c86a:	4b3f      	ldr	r3, [pc, #252]	; (802c968 <HAL_I2C_MspInit+0x198>)
 802c86c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c870:	4a3d      	ldr	r2, [pc, #244]	; (802c968 <HAL_I2C_MspInit+0x198>)
 802c872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802c876:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802c87a:	4b3b      	ldr	r3, [pc, #236]	; (802c968 <HAL_I2C_MspInit+0x198>)
 802c87c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802c884:	60bb      	str	r3, [r7, #8]
 802c886:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 802c888:	4b39      	ldr	r3, [pc, #228]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c88a:	4a3a      	ldr	r2, [pc, #232]	; (802c974 <HAL_I2C_MspInit+0x1a4>)
 802c88c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 802c88e:	4b38      	ldr	r3, [pc, #224]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c890:	2223      	movs	r2, #35	; 0x23
 802c892:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802c894:	4b36      	ldr	r3, [pc, #216]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c896:	2200      	movs	r2, #0
 802c898:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802c89a:	4b35      	ldr	r3, [pc, #212]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c89c:	2200      	movs	r2, #0
 802c89e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802c8a0:	4b33      	ldr	r3, [pc, #204]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802c8a6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802c8a8:	4b31      	ldr	r3, [pc, #196]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8aa:	2200      	movs	r2, #0
 802c8ac:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802c8ae:	4b30      	ldr	r3, [pc, #192]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8b0:	2200      	movs	r2, #0
 802c8b2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 802c8b4:	4b2e      	ldr	r3, [pc, #184]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8b6:	2200      	movs	r2, #0
 802c8b8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 802c8ba:	4b2d      	ldr	r3, [pc, #180]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8bc:	2200      	movs	r2, #0
 802c8be:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802c8c0:	4b2b      	ldr	r3, [pc, #172]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8c2:	2200      	movs	r2, #0
 802c8c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 802c8c6:	482a      	ldr	r0, [pc, #168]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8c8:	f001 ffae 	bl	802e828 <HAL_DMA_Init>
 802c8cc:	4603      	mov	r3, r0
 802c8ce:	2b00      	cmp	r3, #0
 802c8d0:	d001      	beq.n	802c8d6 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802c8d2:	f000 f9f7 	bl	802ccc4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 802c8d6:	687b      	ldr	r3, [r7, #4]
 802c8d8:	4a25      	ldr	r2, [pc, #148]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8da:	63da      	str	r2, [r3, #60]	; 0x3c
 802c8dc:	4a24      	ldr	r2, [pc, #144]	; (802c970 <HAL_I2C_MspInit+0x1a0>)
 802c8de:	687b      	ldr	r3, [r7, #4]
 802c8e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802c8e2:	4b25      	ldr	r3, [pc, #148]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c8e4:	4a25      	ldr	r2, [pc, #148]	; (802c97c <HAL_I2C_MspInit+0x1ac>)
 802c8e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 802c8e8:	4b23      	ldr	r3, [pc, #140]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c8ea:	2224      	movs	r2, #36	; 0x24
 802c8ec:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802c8ee:	4b22      	ldr	r3, [pc, #136]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c8f0:	2240      	movs	r2, #64	; 0x40
 802c8f2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802c8f4:	4b20      	ldr	r3, [pc, #128]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c8f6:	2200      	movs	r2, #0
 802c8f8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 802c8fa:	4b1f      	ldr	r3, [pc, #124]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c8fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802c900:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802c902:	4b1d      	ldr	r3, [pc, #116]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c904:	2200      	movs	r2, #0
 802c906:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802c908:	4b1b      	ldr	r3, [pc, #108]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c90a:	2200      	movs	r2, #0
 802c90c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802c90e:	4b1a      	ldr	r3, [pc, #104]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c910:	2200      	movs	r2, #0
 802c912:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802c914:	4b18      	ldr	r3, [pc, #96]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c916:	2200      	movs	r2, #0
 802c918:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802c91a:	4b17      	ldr	r3, [pc, #92]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c91c:	2200      	movs	r2, #0
 802c91e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802c920:	4815      	ldr	r0, [pc, #84]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c922:	f001 ff81 	bl	802e828 <HAL_DMA_Init>
 802c926:	4603      	mov	r3, r0
 802c928:	2b00      	cmp	r3, #0
 802c92a:	d001      	beq.n	802c930 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 802c92c:	f000 f9ca 	bl	802ccc4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 802c930:	687b      	ldr	r3, [r7, #4]
 802c932:	4a11      	ldr	r2, [pc, #68]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c934:	639a      	str	r2, [r3, #56]	; 0x38
 802c936:	4a10      	ldr	r2, [pc, #64]	; (802c978 <HAL_I2C_MspInit+0x1a8>)
 802c938:	687b      	ldr	r3, [r7, #4]
 802c93a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 802c93c:	2200      	movs	r2, #0
 802c93e:	2100      	movs	r1, #0
 802c940:	2021      	movs	r0, #33	; 0x21
 802c942:	f001 fd74 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 802c946:	2021      	movs	r0, #33	; 0x21
 802c948:	f001 fd8b 	bl	802e462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 802c94c:	2200      	movs	r2, #0
 802c94e:	2100      	movs	r1, #0
 802c950:	2022      	movs	r0, #34	; 0x22
 802c952:	f001 fd6c 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 802c956:	2022      	movs	r0, #34	; 0x22
 802c958:	f001 fd83 	bl	802e462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 802c95c:	bf00      	nop
 802c95e:	37e0      	adds	r7, #224	; 0xe0
 802c960:	46bd      	mov	sp, r7
 802c962:	bd80      	pop	{r7, pc}
 802c964:	40005800 	.word	0x40005800
 802c968:	58024400 	.word	0x58024400
 802c96c:	58020400 	.word	0x58020400
 802c970:	240015ac 	.word	0x240015ac
 802c974:	40020010 	.word	0x40020010
 802c978:	24001624 	.word	0x24001624
 802c97c:	40020028 	.word	0x40020028

0802c980 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 802c980:	b590      	push	{r4, r7, lr}
 802c982:	b08d      	sub	sp, #52	; 0x34
 802c984:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 802c986:	4b30      	ldr	r3, [pc, #192]	; (802ca48 <main+0xc8>)
 802c988:	4a30      	ldr	r2, [pc, #192]	; (802ca4c <main+0xcc>)
 802c98a:	609a      	str	r2, [r3, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 802c98c:	f001 f9ca 	bl	802dd24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 802c990:	f000 f86e 	bl	802ca70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 802c994:	f7ff fe54 	bl	802c640 <MX_GPIO_Init>
	MX_DMA_Init();
 802c998:	f7ff fe1a 	bl	802c5d0 <MX_DMA_Init>
	MX_I2C2_Init();
 802c99c:	f7ff fed8 	bl	802c750 <MX_I2C2_Init>
	MX_SPI1_Init();
 802c9a0:	f000 f996 	bl	802ccd0 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 802c9a4:	f011 fd72 	bl	803e48c <MX_USB_DEVICE_Init>
	MX_USART2_UART_Init();
 802c9a8:	f000 ff44 	bl	802d834 <MX_USART2_UART_Init>
	MX_UART4_Init();
 802c9ac:	f000 fe4c 	bl	802d648 <MX_UART4_Init>
	MX_UART7_Init();
 802c9b0:	f000 fe9c 	bl	802d6ec <MX_UART7_Init>
	MX_USART3_UART_Init();
 802c9b4:	f000 ff8a 	bl	802d8cc <MX_USART3_UART_Init>
	MX_TIM3_Init();
 802c9b8:	f000 fd46 	bl	802d448 <MX_TIM3_Init>
	MX_TIM2_Init();
 802c9bc:	f000 fcf6 	bl	802d3ac <MX_TIM2_Init>
	MX_TIM4_Init();
 802c9c0:	f000 fd90 	bl	802d4e4 <MX_TIM4_Init>
	MX_COMP2_Init();
 802c9c4:	f7ff fd36 	bl	802c434 <MX_COMP2_Init>
	MX_DAC1_Init();
 802c9c8:	f7ff fdae 	bl	802c528 <MX_DAC1_Init>
	MX_UART8_Init();
 802c9cc:	f000 fedc 	bl	802d788 <MX_UART8_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802c9d0:	2100      	movs	r1, #0
 802c9d2:	481f      	ldr	r0, [pc, #124]	; (802ca50 <main+0xd0>)
 802c9d4:	f001 fd81 	bl	802e4da <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 802c9d8:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 802c9dc:	2200      	movs	r2, #0
 802c9de:	2100      	movs	r1, #0
 802c9e0:	481b      	ldr	r0, [pc, #108]	; (802ca50 <main+0xd0>)
 802c9e2:	f001 fdcc 	bl	802e57e <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 802c9e6:	481b      	ldr	r0, [pc, #108]	; (802ca54 <main+0xd4>)
 802c9e8:	f00a feb0 	bl	803774c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 802c9ec:	481a      	ldr	r0, [pc, #104]	; (802ca58 <main+0xd8>)
 802c9ee:	f00a fead 	bl	803774c <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802c9f2:	481a      	ldr	r0, [pc, #104]	; (802ca5c <main+0xdc>)
 802c9f4:	f001 fb82 	bl	802e0fc <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 802c9f8:	4b19      	ldr	r3, [pc, #100]	; (802ca60 <main+0xe0>)
 802c9fa:	603b      	str	r3, [r7, #0]
	config.HeadStreamUart = &huart4;
 802c9fc:	4b19      	ldr	r3, [pc, #100]	; (802ca64 <main+0xe4>)
 802c9fe:	607b      	str	r3, [r7, #4]

	config.HeadTimeout = 10;
 802ca00:	230a      	movs	r3, #10
 802ca02:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 802ca04:	4b18      	ldr	r3, [pc, #96]	; (802ca68 <main+0xe8>)
 802ca06:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 802ca08:	230a      	movs	r3, #10
 802ca0a:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 802ca0c:	4b17      	ldr	r3, [pc, #92]	; (802ca6c <main+0xec>)
 802ca0e:	617b      	str	r3, [r7, #20]

	config.VersionMajor = 0;
 802ca10:	2300      	movs	r3, #0
 802ca12:	773b      	strb	r3, [r7, #28]
	config.VersionMinor = 1;
 802ca14:	2301      	movs	r3, #1
 802ca16:	777b      	strb	r3, [r7, #29]

	config.StrobeOffset = 0;
 802ca18:	2300      	movs	r3, #0
 802ca1a:	61bb      	str	r3, [r7, #24]

	if (MotherboardInit(config))
 802ca1c:	466c      	mov	r4, sp
 802ca1e:	f107 0310 	add.w	r3, r7, #16
 802ca22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ca24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802ca28:	463b      	mov	r3, r7
 802ca2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ca2c:	f7f6 fae4 	bl	8022ff8 <MotherboardInit>
 802ca30:	4603      	mov	r3, r0
 802ca32:	2b00      	cmp	r3, #0
 802ca34:	d001      	beq.n	802ca3a <main+0xba>
		return 1;
 802ca36:	2301      	movs	r3, #1
 802ca38:	e002      	b.n	802ca40 <main+0xc0>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 802ca3a:	f7f6 fb2f 	bl	802309c <MotherboardTick>
 802ca3e:	e7fc      	b.n	802ca3a <main+0xba>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 802ca40:	4618      	mov	r0, r3
 802ca42:	3724      	adds	r7, #36	; 0x24
 802ca44:	46bd      	mov	sp, r7
 802ca46:	bd90      	pop	{r4, r7, pc}
 802ca48:	e000ed00 	.word	0xe000ed00
 802ca4c:	08020000 	.word	0x08020000
 802ca50:	2400154c 	.word	0x2400154c
 802ca54:	24001864 	.word	0x24001864
 802ca58:	24001818 	.word	0x24001818
 802ca5c:	24001520 	.word	0x24001520
 802ca60:	24001b3c 	.word	0x24001b3c
 802ca64:	240018fc 	.word	0x240018fc
 802ca68:	24001a1c 	.word	0x24001a1c
 802ca6c:	2400169c 	.word	0x2400169c

0802ca70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 802ca70:	b580      	push	{r7, lr}
 802ca72:	b09e      	sub	sp, #120	; 0x78
 802ca74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 802ca76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802ca7a:	224c      	movs	r2, #76	; 0x4c
 802ca7c:	2100      	movs	r1, #0
 802ca7e:	4618      	mov	r0, r3
 802ca80:	f012 fae2 	bl	803f048 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 802ca84:	f107 030c 	add.w	r3, r7, #12
 802ca88:	2220      	movs	r2, #32
 802ca8a:	2100      	movs	r1, #0
 802ca8c:	4618      	mov	r0, r3
 802ca8e:	f012 fadb 	bl	803f048 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802ca92:	2002      	movs	r0, #2
 802ca94:	f007 f96a 	bl	8033d6c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802ca98:	2300      	movs	r3, #0
 802ca9a:	60bb      	str	r3, [r7, #8]
 802ca9c:	4b4d      	ldr	r3, [pc, #308]	; (802cbd4 <SystemClock_Config+0x164>)
 802ca9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802caa0:	4a4c      	ldr	r2, [pc, #304]	; (802cbd4 <SystemClock_Config+0x164>)
 802caa2:	f023 0301 	bic.w	r3, r3, #1
 802caa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 802caa8:	4b4a      	ldr	r3, [pc, #296]	; (802cbd4 <SystemClock_Config+0x164>)
 802caaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802caac:	f003 0301 	and.w	r3, r3, #1
 802cab0:	60bb      	str	r3, [r7, #8]
 802cab2:	4b49      	ldr	r3, [pc, #292]	; (802cbd8 <SystemClock_Config+0x168>)
 802cab4:	699b      	ldr	r3, [r3, #24]
 802cab6:	4a48      	ldr	r2, [pc, #288]	; (802cbd8 <SystemClock_Config+0x168>)
 802cab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802cabc:	6193      	str	r3, [r2, #24]
 802cabe:	4b46      	ldr	r3, [pc, #280]	; (802cbd8 <SystemClock_Config+0x168>)
 802cac0:	699b      	ldr	r3, [r3, #24]
 802cac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802cac6:	60bb      	str	r3, [r7, #8]
 802cac8:	68bb      	ldr	r3, [r7, #8]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 802caca:	bf00      	nop
 802cacc:	4b42      	ldr	r3, [pc, #264]	; (802cbd8 <SystemClock_Config+0x168>)
 802cace:	699b      	ldr	r3, [r3, #24]
 802cad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802cad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802cad8:	d1f8      	bne.n	802cacc <SystemClock_Config+0x5c>
	}

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 802cada:	4b40      	ldr	r3, [pc, #256]	; (802cbdc <SystemClock_Config+0x16c>)
 802cadc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802cae0:	4a3e      	ldr	r2, [pc, #248]	; (802cbdc <SystemClock_Config+0x16c>)
 802cae2:	f043 0302 	orr.w	r3, r3, #2
 802cae6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802caea:	4b3c      	ldr	r3, [pc, #240]	; (802cbdc <SystemClock_Config+0x16c>)
 802caec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802caf0:	f003 0302 	and.w	r3, r3, #2
 802caf4:	607b      	str	r3, [r7, #4]
 802caf6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 802caf8:	2300      	movs	r3, #0
 802cafa:	603b      	str	r3, [r7, #0]
 802cafc:	4b36      	ldr	r3, [pc, #216]	; (802cbd8 <SystemClock_Config+0x168>)
 802cafe:	699b      	ldr	r3, [r3, #24]
 802cb00:	4a35      	ldr	r2, [pc, #212]	; (802cbd8 <SystemClock_Config+0x168>)
 802cb02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802cb06:	6193      	str	r3, [r2, #24]
 802cb08:	4b33      	ldr	r3, [pc, #204]	; (802cbd8 <SystemClock_Config+0x168>)
 802cb0a:	699b      	ldr	r3, [r3, #24]
 802cb0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802cb10:	603b      	str	r3, [r7, #0]
 802cb12:	4b30      	ldr	r3, [pc, #192]	; (802cbd4 <SystemClock_Config+0x164>)
 802cb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cb16:	4a2f      	ldr	r2, [pc, #188]	; (802cbd4 <SystemClock_Config+0x164>)
 802cb18:	f043 0301 	orr.w	r3, r3, #1
 802cb1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 802cb1e:	4b2d      	ldr	r3, [pc, #180]	; (802cbd4 <SystemClock_Config+0x164>)
 802cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cb22:	f003 0301 	and.w	r3, r3, #1
 802cb26:	603b      	str	r3, [r7, #0]
 802cb28:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 802cb2a:	bf00      	nop
 802cb2c:	4b2a      	ldr	r3, [pc, #168]	; (802cbd8 <SystemClock_Config+0x168>)
 802cb2e:	699b      	ldr	r3, [r3, #24]
 802cb30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802cb34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802cb38:	d1f8      	bne.n	802cb2c <SystemClock_Config+0xbc>
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 802cb3a:	4b28      	ldr	r3, [pc, #160]	; (802cbdc <SystemClock_Config+0x16c>)
 802cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cb3e:	4a27      	ldr	r2, [pc, #156]	; (802cbdc <SystemClock_Config+0x16c>)
 802cb40:	f023 0303 	bic.w	r3, r3, #3
 802cb44:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 802cb46:	2322      	movs	r3, #34	; 0x22
 802cb48:	62fb      	str	r3, [r7, #44]	; 0x2c
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 802cb4a:	2301      	movs	r3, #1
 802cb4c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802cb4e:	2340      	movs	r3, #64	; 0x40
 802cb50:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 802cb52:	2301      	movs	r3, #1
 802cb54:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802cb56:	2302      	movs	r3, #2
 802cb58:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802cb5a:	2300      	movs	r3, #0
 802cb5c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 802cb5e:	2304      	movs	r3, #4
 802cb60:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 60;
 802cb62:	233c      	movs	r3, #60	; 0x3c
 802cb64:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 802cb66:	2302      	movs	r3, #2
 802cb68:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 802cb6a:	2305      	movs	r3, #5
 802cb6c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLR = 2;
 802cb6e:	2302      	movs	r3, #2
 802cb70:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 802cb72:	230c      	movs	r3, #12
 802cb74:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 802cb76:	2300      	movs	r3, #0
 802cb78:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 802cb7a:	2300      	movs	r3, #0
 802cb7c:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 802cb7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802cb82:	4618      	mov	r0, r3
 802cb84:	f007 f93c 	bl	8033e00 <HAL_RCC_OscConfig>
 802cb88:	4603      	mov	r3, r0
 802cb8a:	2b00      	cmp	r3, #0
 802cb8c:	d001      	beq.n	802cb92 <SystemClock_Config+0x122>
		Error_Handler();
 802cb8e:	f000 f899 	bl	802ccc4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 802cb92:	233f      	movs	r3, #63	; 0x3f
 802cb94:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802cb96:	2303      	movs	r3, #3
 802cb98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 802cb9a:	2300      	movs	r3, #0
 802cb9c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 802cb9e:	2308      	movs	r3, #8
 802cba0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 802cba2:	2340      	movs	r3, #64	; 0x40
 802cba4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 802cba6:	2340      	movs	r3, #64	; 0x40
 802cba8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 802cbaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802cbae:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 802cbb0:	2340      	movs	r3, #64	; 0x40
 802cbb2:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 802cbb4:	f107 030c 	add.w	r3, r7, #12
 802cbb8:	2104      	movs	r1, #4
 802cbba:	4618      	mov	r0, r3
 802cbbc:	f007 fd4e 	bl	803465c <HAL_RCC_ClockConfig>
 802cbc0:	4603      	mov	r3, r0
 802cbc2:	2b00      	cmp	r3, #0
 802cbc4:	d001      	beq.n	802cbca <SystemClock_Config+0x15a>
		Error_Handler();
 802cbc6:	f000 f87d 	bl	802ccc4 <Error_Handler>
	}
}
 802cbca:	bf00      	nop
 802cbcc:	3778      	adds	r7, #120	; 0x78
 802cbce:	46bd      	mov	sp, r7
 802cbd0:	bd80      	pop	{r7, pc}
 802cbd2:	bf00      	nop
 802cbd4:	58000400 	.word	0x58000400
 802cbd8:	58024800 	.word	0x58024800
 802cbdc:	58024400 	.word	0x58024400

0802cbe0 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 802cbe0:	b580      	push	{r7, lr}
 802cbe2:	b082      	sub	sp, #8
 802cbe4:	af00      	add	r7, sp, #0
 802cbe6:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 802cbe8:	687b      	ldr	r3, [r7, #4]
 802cbea:	681b      	ldr	r3, [r3, #0]
 802cbec:	4a04      	ldr	r2, [pc, #16]	; (802cc00 <HAL_COMP_TriggerCallback+0x20>)
 802cbee:	4293      	cmp	r3, r2
 802cbf0:	d101      	bne.n	802cbf6 <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 802cbf2:	f7f6 fb29 	bl	8023248 <MotherboardOnStrobe>
	}
}
 802cbf6:	bf00      	nop
 802cbf8:	3708      	adds	r7, #8
 802cbfa:	46bd      	mov	sp, r7
 802cbfc:	bd80      	pop	{r7, pc}
 802cbfe:	bf00      	nop
 802cc00:	58003810 	.word	0x58003810

0802cc04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 802cc04:	b580      	push	{r7, lr}
 802cc06:	b082      	sub	sp, #8
 802cc08:	af00      	add	r7, sp, #0
 802cc0a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802cc0c:	687b      	ldr	r3, [r7, #4]
 802cc0e:	681b      	ldr	r3, [r3, #0]
 802cc10:	4a0b      	ldr	r2, [pc, #44]	; (802cc40 <HAL_UART_RxCpltCallback+0x3c>)
 802cc12:	4293      	cmp	r3, r2
 802cc14:	d101      	bne.n	802cc1a <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 802cc16:	f7f6 fb37 	bl	8023288 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	681b      	ldr	r3, [r3, #0]
 802cc1e:	4a09      	ldr	r2, [pc, #36]	; (802cc44 <HAL_UART_RxCpltCallback+0x40>)
 802cc20:	4293      	cmp	r3, r2
 802cc22:	d101      	bne.n	802cc28 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 802cc24:	f7f6 fb3a 	bl	802329c <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 802cc28:	687b      	ldr	r3, [r7, #4]
 802cc2a:	681b      	ldr	r3, [r3, #0]
 802cc2c:	4a06      	ldr	r2, [pc, #24]	; (802cc48 <HAL_UART_RxCpltCallback+0x44>)
 802cc2e:	4293      	cmp	r3, r2
 802cc30:	d101      	bne.n	802cc36 <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 802cc32:	f7f6 fb1f 	bl	8023274 <MotherboardOnBodyRecieveComplete>
	}
}
 802cc36:	bf00      	nop
 802cc38:	3708      	adds	r7, #8
 802cc3a:	46bd      	mov	sp, r7
 802cc3c:	bd80      	pop	{r7, pc}
 802cc3e:	bf00      	nop
 802cc40:	40004800 	.word	0x40004800
 802cc44:	40004c00 	.word	0x40004c00
 802cc48:	40007c00 	.word	0x40007c00

0802cc4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 802cc4c:	b580      	push	{r7, lr}
 802cc4e:	b082      	sub	sp, #8
 802cc50:	af00      	add	r7, sp, #0
 802cc52:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802cc54:	687b      	ldr	r3, [r7, #4]
 802cc56:	681b      	ldr	r3, [r3, #0]
 802cc58:	4a0b      	ldr	r2, [pc, #44]	; (802cc88 <HAL_UART_TxCpltCallback+0x3c>)
 802cc5a:	4293      	cmp	r3, r2
 802cc5c:	d101      	bne.n	802cc62 <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 802cc5e:	f7f6 fb27 	bl	80232b0 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 802cc62:	687b      	ldr	r3, [r7, #4]
 802cc64:	681b      	ldr	r3, [r3, #0]
 802cc66:	4a09      	ldr	r2, [pc, #36]	; (802cc8c <HAL_UART_TxCpltCallback+0x40>)
 802cc68:	4293      	cmp	r3, r2
 802cc6a:	d101      	bne.n	802cc70 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 802cc6c:	f7f6 fb2a 	bl	80232c4 <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 802cc70:	687b      	ldr	r3, [r7, #4]
 802cc72:	681b      	ldr	r3, [r3, #0]
 802cc74:	4a06      	ldr	r2, [pc, #24]	; (802cc90 <HAL_UART_TxCpltCallback+0x44>)
 802cc76:	4293      	cmp	r3, r2
 802cc78:	d101      	bne.n	802cc7e <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 802cc7a:	f7f6 fb2d 	bl	80232d8 <MotherboardOnBodyTransmitComplete>
	}
}
 802cc7e:	bf00      	nop
 802cc80:	3708      	adds	r7, #8
 802cc82:	46bd      	mov	sp, r7
 802cc84:	bd80      	pop	{r7, pc}
 802cc86:	bf00      	nop
 802cc88:	40004800 	.word	0x40004800
 802cc8c:	40004c00 	.word	0x40004c00
 802cc90:	40007c00 	.word	0x40007c00

0802cc94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 802cc94:	b580      	push	{r7, lr}
 802cc96:	b082      	sub	sp, #8
 802cc98:	af00      	add	r7, sp, #0
 802cc9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 802cc9c:	687b      	ldr	r3, [r7, #4]
 802cc9e:	681b      	ldr	r3, [r3, #0]
 802cca0:	4a07      	ldr	r2, [pc, #28]	; (802ccc0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 802cca2:	4293      	cmp	r3, r2
 802cca4:	d101      	bne.n	802ccaa <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 802cca6:	f7f6 fb21 	bl	80232ec <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 802ccaa:	687b      	ldr	r3, [r7, #4]
 802ccac:	681b      	ldr	r3, [r3, #0]
 802ccae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802ccb2:	d101      	bne.n	802ccb8 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 802ccb4:	f7f6 fb24 	bl	8023300 <MotherboardOnImuTimerTick>
}
 802ccb8:	bf00      	nop
 802ccba:	3708      	adds	r7, #8
 802ccbc:	46bd      	mov	sp, r7
 802ccbe:	bd80      	pop	{r7, pc}
 802ccc0:	40000400 	.word	0x40000400

0802ccc4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 802ccc4:	b480      	push	{r7}
 802ccc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802ccc8:	b672      	cpsid	i
}
 802ccca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 802cccc:	e7fe      	b.n	802cccc <Error_Handler+0x8>
	...

0802ccd0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 802ccd0:	b580      	push	{r7, lr}
 802ccd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802ccd4:	4b28      	ldr	r3, [pc, #160]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802ccd6:	4a29      	ldr	r2, [pc, #164]	; (802cd7c <MX_SPI1_Init+0xac>)
 802ccd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 802ccda:	4b27      	ldr	r3, [pc, #156]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802ccdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 802cce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802cce2:	4b25      	ldr	r3, [pc, #148]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cce4:	2200      	movs	r2, #0
 802cce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802cce8:	4b23      	ldr	r3, [pc, #140]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802ccea:	2207      	movs	r2, #7
 802ccec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 802ccee:	4b22      	ldr	r3, [pc, #136]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802ccf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802ccf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 802ccf6:	4b20      	ldr	r3, [pc, #128]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802ccf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802ccfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802ccfe:	4b1e      	ldr	r3, [pc, #120]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 802cd04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 802cd06:	4b1c      	ldr	r3, [pc, #112]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802cd0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802cd0e:	4b1a      	ldr	r3, [pc, #104]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd10:	2200      	movs	r2, #0
 802cd12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802cd14:	4b18      	ldr	r3, [pc, #96]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd16:	2200      	movs	r2, #0
 802cd18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802cd1a:	4b17      	ldr	r3, [pc, #92]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd1c:	2200      	movs	r2, #0
 802cd1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 802cd20:	4b15      	ldr	r3, [pc, #84]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd22:	2200      	movs	r2, #0
 802cd24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 802cd26:	4b14      	ldr	r3, [pc, #80]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802cd2c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 802cd2e:	4b12      	ldr	r3, [pc, #72]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd30:	2200      	movs	r2, #0
 802cd32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 802cd34:	4b10      	ldr	r3, [pc, #64]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd36:	2200      	movs	r2, #0
 802cd38:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802cd3a:	4b0f      	ldr	r3, [pc, #60]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd3c:	2200      	movs	r2, #0
 802cd3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802cd40:	4b0d      	ldr	r3, [pc, #52]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd42:	2200      	movs	r2, #0
 802cd44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 802cd46:	4b0c      	ldr	r3, [pc, #48]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd48:	2200      	movs	r2, #0
 802cd4a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 802cd4c:	4b0a      	ldr	r3, [pc, #40]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd4e:	2200      	movs	r2, #0
 802cd50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 802cd52:	4b09      	ldr	r3, [pc, #36]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd54:	2200      	movs	r2, #0
 802cd56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 802cd58:	4b07      	ldr	r3, [pc, #28]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd5a:	2200      	movs	r2, #0
 802cd5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 802cd5e:	4b06      	ldr	r3, [pc, #24]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd60:	2200      	movs	r2, #0
 802cd62:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802cd64:	4804      	ldr	r0, [pc, #16]	; (802cd78 <MX_SPI1_Init+0xa8>)
 802cd66:	f009 fb6d 	bl	8036444 <HAL_SPI_Init>
 802cd6a:	4603      	mov	r3, r0
 802cd6c:	2b00      	cmp	r3, #0
 802cd6e:	d001      	beq.n	802cd74 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 802cd70:	f7ff ffa8 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 802cd74:	bf00      	nop
 802cd76:	bd80      	pop	{r7, pc}
 802cd78:	2400169c 	.word	0x2400169c
 802cd7c:	40013000 	.word	0x40013000

0802cd80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 802cd80:	b580      	push	{r7, lr}
 802cd82:	b0b8      	sub	sp, #224	; 0xe0
 802cd84:	af00      	add	r7, sp, #0
 802cd86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802cd88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802cd8c:	2200      	movs	r2, #0
 802cd8e:	601a      	str	r2, [r3, #0]
 802cd90:	605a      	str	r2, [r3, #4]
 802cd92:	609a      	str	r2, [r3, #8]
 802cd94:	60da      	str	r2, [r3, #12]
 802cd96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802cd98:	f107 0310 	add.w	r3, r7, #16
 802cd9c:	22bc      	movs	r2, #188	; 0xbc
 802cd9e:	2100      	movs	r1, #0
 802cda0:	4618      	mov	r0, r3
 802cda2:	f012 f951 	bl	803f048 <memset>
  if(spiHandle->Instance==SPI1)
 802cda6:	687b      	ldr	r3, [r7, #4]
 802cda8:	681b      	ldr	r3, [r3, #0]
 802cdaa:	4a60      	ldr	r2, [pc, #384]	; (802cf2c <HAL_SPI_MspInit+0x1ac>)
 802cdac:	4293      	cmp	r3, r2
 802cdae:	f040 80b8 	bne.w	802cf22 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 802cdb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802cdb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 802cdb8:	2320      	movs	r3, #32
 802cdba:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 802cdbc:	2381      	movs	r3, #129	; 0x81
 802cdbe:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 802cdc0:	2302      	movs	r3, #2
 802cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 802cdc4:	2302      	movs	r3, #2
 802cdc6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 802cdc8:	2302      	movs	r3, #2
 802cdca:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 802cdcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802cdd0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 802cdd2:	2300      	movs	r3, #0
 802cdd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 802cdd6:	2300      	movs	r3, #0
 802cdd8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 802cdda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802cdde:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802cde0:	f107 0310 	add.w	r3, r7, #16
 802cde4:	4618      	mov	r0, r3
 802cde6:	f007 ffc5 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 802cdea:	4603      	mov	r3, r0
 802cdec:	2b00      	cmp	r3, #0
 802cdee:	d001      	beq.n	802cdf4 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 802cdf0:	f7ff ff68 	bl	802ccc4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802cdf4:	4b4e      	ldr	r3, [pc, #312]	; (802cf30 <HAL_SPI_MspInit+0x1b0>)
 802cdf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802cdfa:	4a4d      	ldr	r2, [pc, #308]	; (802cf30 <HAL_SPI_MspInit+0x1b0>)
 802cdfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802ce00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 802ce04:	4b4a      	ldr	r3, [pc, #296]	; (802cf30 <HAL_SPI_MspInit+0x1b0>)
 802ce06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802ce0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802ce0e:	60fb      	str	r3, [r7, #12]
 802ce10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802ce12:	4b47      	ldr	r3, [pc, #284]	; (802cf30 <HAL_SPI_MspInit+0x1b0>)
 802ce14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ce18:	4a45      	ldr	r2, [pc, #276]	; (802cf30 <HAL_SPI_MspInit+0x1b0>)
 802ce1a:	f043 0301 	orr.w	r3, r3, #1
 802ce1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ce22:	4b43      	ldr	r3, [pc, #268]	; (802cf30 <HAL_SPI_MspInit+0x1b0>)
 802ce24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ce28:	f003 0301 	and.w	r3, r3, #1
 802ce2c:	60bb      	str	r3, [r7, #8]
 802ce2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 802ce30:	23e0      	movs	r3, #224	; 0xe0
 802ce32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802ce36:	2302      	movs	r3, #2
 802ce38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ce3c:	2300      	movs	r3, #0
 802ce3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ce42:	2300      	movs	r3, #0
 802ce44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802ce48:	2305      	movs	r3, #5
 802ce4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802ce4e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802ce52:	4619      	mov	r1, r3
 802ce54:	4837      	ldr	r0, [pc, #220]	; (802cf34 <HAL_SPI_MspInit+0x1b4>)
 802ce56:	f004 fb3d 	bl	80314d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 802ce5a:	4b37      	ldr	r3, [pc, #220]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce5c:	4a37      	ldr	r2, [pc, #220]	; (802cf3c <HAL_SPI_MspInit+0x1bc>)
 802ce5e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 802ce60:	4b35      	ldr	r3, [pc, #212]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce62:	2226      	movs	r2, #38	; 0x26
 802ce64:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802ce66:	4b34      	ldr	r3, [pc, #208]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce68:	2240      	movs	r2, #64	; 0x40
 802ce6a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802ce6c:	4b32      	ldr	r3, [pc, #200]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce6e:	2200      	movs	r2, #0
 802ce70:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 802ce72:	4b31      	ldr	r3, [pc, #196]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ce78:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802ce7a:	4b2f      	ldr	r3, [pc, #188]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce7c:	2200      	movs	r2, #0
 802ce7e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802ce80:	4b2d      	ldr	r3, [pc, #180]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce82:	2200      	movs	r2, #0
 802ce84:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 802ce86:	4b2c      	ldr	r3, [pc, #176]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce88:	2200      	movs	r2, #0
 802ce8a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802ce8c:	4b2a      	ldr	r3, [pc, #168]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802ce92:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802ce94:	4b28      	ldr	r3, [pc, #160]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce96:	2200      	movs	r2, #0
 802ce98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 802ce9a:	4827      	ldr	r0, [pc, #156]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ce9c:	f001 fcc4 	bl	802e828 <HAL_DMA_Init>
 802cea0:	4603      	mov	r3, r0
 802cea2:	2b00      	cmp	r3, #0
 802cea4:	d001      	beq.n	802ceaa <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 802cea6:	f7ff ff0d 	bl	802ccc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 802ceaa:	687b      	ldr	r3, [r7, #4]
 802ceac:	4a22      	ldr	r2, [pc, #136]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ceae:	679a      	str	r2, [r3, #120]	; 0x78
 802ceb0:	4a21      	ldr	r2, [pc, #132]	; (802cf38 <HAL_SPI_MspInit+0x1b8>)
 802ceb2:	687b      	ldr	r3, [r7, #4]
 802ceb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 802ceb6:	4b22      	ldr	r3, [pc, #136]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802ceb8:	4a22      	ldr	r2, [pc, #136]	; (802cf44 <HAL_SPI_MspInit+0x1c4>)
 802ceba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 802cebc:	4b20      	ldr	r3, [pc, #128]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cebe:	2225      	movs	r2, #37	; 0x25
 802cec0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802cec2:	4b1f      	ldr	r3, [pc, #124]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cec4:	2200      	movs	r2, #0
 802cec6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802cec8:	4b1d      	ldr	r3, [pc, #116]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802ceca:	2200      	movs	r2, #0
 802cecc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802cece:	4b1c      	ldr	r3, [pc, #112]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802ced0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ced4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802ced6:	4b1a      	ldr	r3, [pc, #104]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802ced8:	2200      	movs	r2, #0
 802ceda:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802cedc:	4b18      	ldr	r3, [pc, #96]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cede:	2200      	movs	r2, #0
 802cee0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 802cee2:	4b17      	ldr	r3, [pc, #92]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cee4:	2200      	movs	r2, #0
 802cee6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802cee8:	4b15      	ldr	r3, [pc, #84]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802ceea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802ceee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802cef0:	4b13      	ldr	r3, [pc, #76]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cef2:	2200      	movs	r2, #0
 802cef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 802cef6:	4812      	ldr	r0, [pc, #72]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cef8:	f001 fc96 	bl	802e828 <HAL_DMA_Init>
 802cefc:	4603      	mov	r3, r0
 802cefe:	2b00      	cmp	r3, #0
 802cf00:	d001      	beq.n	802cf06 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 802cf02:	f7ff fedf 	bl	802ccc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 802cf06:	687b      	ldr	r3, [r7, #4]
 802cf08:	4a0d      	ldr	r2, [pc, #52]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cf0a:	67da      	str	r2, [r3, #124]	; 0x7c
 802cf0c:	4a0c      	ldr	r2, [pc, #48]	; (802cf40 <HAL_SPI_MspInit+0x1c0>)
 802cf0e:	687b      	ldr	r3, [r7, #4]
 802cf10:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 802cf12:	2200      	movs	r2, #0
 802cf14:	2102      	movs	r1, #2
 802cf16:	2023      	movs	r0, #35	; 0x23
 802cf18:	f001 fa89 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802cf1c:	2023      	movs	r0, #35	; 0x23
 802cf1e:	f001 faa0 	bl	802e462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802cf22:	bf00      	nop
 802cf24:	37e0      	adds	r7, #224	; 0xe0
 802cf26:	46bd      	mov	sp, r7
 802cf28:	bd80      	pop	{r7, pc}
 802cf2a:	bf00      	nop
 802cf2c:	40013000 	.word	0x40013000
 802cf30:	58024400 	.word	0x58024400
 802cf34:	58020000 	.word	0x58020000
 802cf38:	24001724 	.word	0x24001724
 802cf3c:	40020070 	.word	0x40020070
 802cf40:	2400179c 	.word	0x2400179c
 802cf44:	40020088 	.word	0x40020088

0802cf48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802cf48:	b480      	push	{r7}
 802cf4a:	b083      	sub	sp, #12
 802cf4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802cf4e:	4b0a      	ldr	r3, [pc, #40]	; (802cf78 <HAL_MspInit+0x30>)
 802cf50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802cf54:	4a08      	ldr	r2, [pc, #32]	; (802cf78 <HAL_MspInit+0x30>)
 802cf56:	f043 0302 	orr.w	r3, r3, #2
 802cf5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802cf5e:	4b06      	ldr	r3, [pc, #24]	; (802cf78 <HAL_MspInit+0x30>)
 802cf60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802cf64:	f003 0302 	and.w	r3, r3, #2
 802cf68:	607b      	str	r3, [r7, #4]
 802cf6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802cf6c:	bf00      	nop
 802cf6e:	370c      	adds	r7, #12
 802cf70:	46bd      	mov	sp, r7
 802cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf76:	4770      	bx	lr
 802cf78:	58024400 	.word	0x58024400

0802cf7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802cf7c:	b480      	push	{r7}
 802cf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802cf80:	e7fe      	b.n	802cf80 <NMI_Handler+0x4>

0802cf82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802cf82:	b480      	push	{r7}
 802cf84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802cf86:	e7fe      	b.n	802cf86 <HardFault_Handler+0x4>

0802cf88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802cf88:	b480      	push	{r7}
 802cf8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802cf8c:	e7fe      	b.n	802cf8c <MemManage_Handler+0x4>

0802cf8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802cf8e:	b480      	push	{r7}
 802cf90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802cf92:	e7fe      	b.n	802cf92 <BusFault_Handler+0x4>

0802cf94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802cf94:	b480      	push	{r7}
 802cf96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802cf98:	e7fe      	b.n	802cf98 <UsageFault_Handler+0x4>

0802cf9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802cf9a:	b480      	push	{r7}
 802cf9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802cf9e:	bf00      	nop
 802cfa0:	46bd      	mov	sp, r7
 802cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfa6:	4770      	bx	lr

0802cfa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802cfa8:	b480      	push	{r7}
 802cfaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802cfac:	bf00      	nop
 802cfae:	46bd      	mov	sp, r7
 802cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfb4:	4770      	bx	lr

0802cfb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802cfb6:	b480      	push	{r7}
 802cfb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802cfba:	bf00      	nop
 802cfbc:	46bd      	mov	sp, r7
 802cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfc2:	4770      	bx	lr

0802cfc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802cfc4:	b580      	push	{r7, lr}
 802cfc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802cfc8:	f000 ff1e 	bl	802de08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802cfcc:	bf00      	nop
 802cfce:	bd80      	pop	{r7, pc}

0802cfd0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 802cfd0:	b580      	push	{r7, lr}
 802cfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 802cfd4:	4802      	ldr	r0, [pc, #8]	; (802cfe0 <DMA1_Stream0_IRQHandler+0x10>)
 802cfd6:	f002 ff51 	bl	802fe7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 802cfda:	bf00      	nop
 802cfdc:	bd80      	pop	{r7, pc}
 802cfde:	bf00      	nop
 802cfe0:	240015ac 	.word	0x240015ac

0802cfe4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 802cfe4:	b580      	push	{r7, lr}
 802cfe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 802cfe8:	4802      	ldr	r0, [pc, #8]	; (802cff4 <DMA1_Stream1_IRQHandler+0x10>)
 802cfea:	f002 ff47 	bl	802fe7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 802cfee:	bf00      	nop
 802cff0:	bd80      	pop	{r7, pc}
 802cff2:	bf00      	nop
 802cff4:	24001624 	.word	0x24001624

0802cff8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 802cff8:	b580      	push	{r7, lr}
 802cffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 802cffc:	4802      	ldr	r0, [pc, #8]	; (802d008 <DMA1_Stream4_IRQHandler+0x10>)
 802cffe:	f002 ff3d 	bl	802fe7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 802d002:	bf00      	nop
 802d004:	bd80      	pop	{r7, pc}
 802d006:	bf00      	nop
 802d008:	24001724 	.word	0x24001724

0802d00c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802d00c:	b580      	push	{r7, lr}
 802d00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 802d010:	4802      	ldr	r0, [pc, #8]	; (802d01c <DMA1_Stream5_IRQHandler+0x10>)
 802d012:	f002 ff33 	bl	802fe7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802d016:	bf00      	nop
 802d018:	bd80      	pop	{r7, pc}
 802d01a:	bf00      	nop
 802d01c:	2400179c 	.word	0x2400179c

0802d020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 802d020:	b580      	push	{r7, lr}
 802d022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802d024:	4802      	ldr	r0, [pc, #8]	; (802d030 <TIM2_IRQHandler+0x10>)
 802d026:	f00a fc09 	bl	803783c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802d02a:	bf00      	nop
 802d02c:	bd80      	pop	{r7, pc}
 802d02e:	bf00      	nop
 802d030:	24001818 	.word	0x24001818

0802d034 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 802d034:	b580      	push	{r7, lr}
 802d036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 802d038:	4802      	ldr	r0, [pc, #8]	; (802d044 <TIM3_IRQHandler+0x10>)
 802d03a:	f00a fbff 	bl	803783c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802d03e:	bf00      	nop
 802d040:	bd80      	pop	{r7, pc}
 802d042:	bf00      	nop
 802d044:	24001864 	.word	0x24001864

0802d048 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 802d048:	b580      	push	{r7, lr}
 802d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 802d04c:	4802      	ldr	r0, [pc, #8]	; (802d058 <TIM4_IRQHandler+0x10>)
 802d04e:	f00a fbf5 	bl	803783c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 802d052:	bf00      	nop
 802d054:	bd80      	pop	{r7, pc}
 802d056:	bf00      	nop
 802d058:	240018b0 	.word	0x240018b0

0802d05c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 802d05c:	b580      	push	{r7, lr}
 802d05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 802d060:	4802      	ldr	r0, [pc, #8]	; (802d06c <I2C2_EV_IRQHandler+0x10>)
 802d062:	f004 fc91 	bl	8031988 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 802d066:	bf00      	nop
 802d068:	bd80      	pop	{r7, pc}
 802d06a:	bf00      	nop
 802d06c:	24001560 	.word	0x24001560

0802d070 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 802d070:	b580      	push	{r7, lr}
 802d072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 802d074:	4802      	ldr	r0, [pc, #8]	; (802d080 <I2C2_ER_IRQHandler+0x10>)
 802d076:	f004 fca1 	bl	80319bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 802d07a:	bf00      	nop
 802d07c:	bd80      	pop	{r7, pc}
 802d07e:	bf00      	nop
 802d080:	24001560 	.word	0x24001560

0802d084 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 802d084:	b580      	push	{r7, lr}
 802d086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802d088:	4802      	ldr	r0, [pc, #8]	; (802d094 <SPI1_IRQHandler+0x10>)
 802d08a:	f009 ff5d 	bl	8036f48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 802d08e:	bf00      	nop
 802d090:	bd80      	pop	{r7, pc}
 802d092:	bf00      	nop
 802d094:	2400169c 	.word	0x2400169c

0802d098 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 802d098:	b580      	push	{r7, lr}
 802d09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 802d09c:	4802      	ldr	r0, [pc, #8]	; (802d0a8 <USART3_IRQHandler+0x10>)
 802d09e:	f00b fa13 	bl	80384c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 802d0a2:	bf00      	nop
 802d0a4:	bd80      	pop	{r7, pc}
 802d0a6:	bf00      	nop
 802d0a8:	24001b3c 	.word	0x24001b3c

0802d0ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 802d0ac:	b580      	push	{r7, lr}
 802d0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802d0b0:	4802      	ldr	r0, [pc, #8]	; (802d0bc <UART4_IRQHandler+0x10>)
 802d0b2:	f00b fa09 	bl	80384c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 802d0b6:	bf00      	nop
 802d0b8:	bd80      	pop	{r7, pc}
 802d0ba:	bf00      	nop
 802d0bc:	240018fc 	.word	0x240018fc

0802d0c0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 802d0c0:	b580      	push	{r7, lr}
 802d0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 802d0c4:	4802      	ldr	r0, [pc, #8]	; (802d0d0 <UART8_IRQHandler+0x10>)
 802d0c6:	f00b f9ff 	bl	80384c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 802d0ca:	bf00      	nop
 802d0cc:	bd80      	pop	{r7, pc}
 802d0ce:	bf00      	nop
 802d0d0:	24001a1c 	.word	0x24001a1c

0802d0d4 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 802d0d4:	b580      	push	{r7, lr}
 802d0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802d0d8:	4802      	ldr	r0, [pc, #8]	; (802d0e4 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 802d0da:	f005 fcc8 	bl	8032a6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 802d0de:	bf00      	nop
 802d0e0:	bd80      	pop	{r7, pc}
 802d0e2:	bf00      	nop
 802d0e4:	240030b0 	.word	0x240030b0

0802d0e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 802d0e8:	b580      	push	{r7, lr}
 802d0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802d0ec:	4802      	ldr	r0, [pc, #8]	; (802d0f8 <OTG_FS_IRQHandler+0x10>)
 802d0ee:	f005 fcbe 	bl	8032a6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 802d0f2:	bf00      	nop
 802d0f4:	bd80      	pop	{r7, pc}
 802d0f6:	bf00      	nop
 802d0f8:	240030b0 	.word	0x240030b0

0802d0fc <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 802d0fc:	b580      	push	{r7, lr}
 802d0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 802d100:	4802      	ldr	r0, [pc, #8]	; (802d10c <COMP1_IRQHandler+0x10>)
 802d102:	f001 f845 	bl	802e190 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 802d106:	bf00      	nop
 802d108:	bd80      	pop	{r7, pc}
 802d10a:	bf00      	nop
 802d10c:	24001520 	.word	0x24001520

0802d110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802d110:	b480      	push	{r7}
 802d112:	af00      	add	r7, sp, #0
	return 1;
 802d114:	2301      	movs	r3, #1
}
 802d116:	4618      	mov	r0, r3
 802d118:	46bd      	mov	sp, r7
 802d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d11e:	4770      	bx	lr

0802d120 <_kill>:

int _kill(int pid, int sig)
{
 802d120:	b580      	push	{r7, lr}
 802d122:	b082      	sub	sp, #8
 802d124:	af00      	add	r7, sp, #0
 802d126:	6078      	str	r0, [r7, #4]
 802d128:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802d12a:	f011 ff19 	bl	803ef60 <__errno>
 802d12e:	4603      	mov	r3, r0
 802d130:	2216      	movs	r2, #22
 802d132:	601a      	str	r2, [r3, #0]
	return -1;
 802d134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802d138:	4618      	mov	r0, r3
 802d13a:	3708      	adds	r7, #8
 802d13c:	46bd      	mov	sp, r7
 802d13e:	bd80      	pop	{r7, pc}

0802d140 <_exit>:

void _exit (int status)
{
 802d140:	b580      	push	{r7, lr}
 802d142:	b082      	sub	sp, #8
 802d144:	af00      	add	r7, sp, #0
 802d146:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802d148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802d14c:	6878      	ldr	r0, [r7, #4]
 802d14e:	f7ff ffe7 	bl	802d120 <_kill>
	while (1) {}		/* Make sure we hang here */
 802d152:	e7fe      	b.n	802d152 <_exit+0x12>

0802d154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802d154:	b580      	push	{r7, lr}
 802d156:	b086      	sub	sp, #24
 802d158:	af00      	add	r7, sp, #0
 802d15a:	60f8      	str	r0, [r7, #12]
 802d15c:	60b9      	str	r1, [r7, #8]
 802d15e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d160:	2300      	movs	r3, #0
 802d162:	617b      	str	r3, [r7, #20]
 802d164:	e00a      	b.n	802d17c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802d166:	f3af 8000 	nop.w
 802d16a:	4601      	mov	r1, r0
 802d16c:	68bb      	ldr	r3, [r7, #8]
 802d16e:	1c5a      	adds	r2, r3, #1
 802d170:	60ba      	str	r2, [r7, #8]
 802d172:	b2ca      	uxtb	r2, r1
 802d174:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d176:	697b      	ldr	r3, [r7, #20]
 802d178:	3301      	adds	r3, #1
 802d17a:	617b      	str	r3, [r7, #20]
 802d17c:	697a      	ldr	r2, [r7, #20]
 802d17e:	687b      	ldr	r3, [r7, #4]
 802d180:	429a      	cmp	r2, r3
 802d182:	dbf0      	blt.n	802d166 <_read+0x12>
	}

return len;
 802d184:	687b      	ldr	r3, [r7, #4]
}
 802d186:	4618      	mov	r0, r3
 802d188:	3718      	adds	r7, #24
 802d18a:	46bd      	mov	sp, r7
 802d18c:	bd80      	pop	{r7, pc}

0802d18e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802d18e:	b580      	push	{r7, lr}
 802d190:	b086      	sub	sp, #24
 802d192:	af00      	add	r7, sp, #0
 802d194:	60f8      	str	r0, [r7, #12]
 802d196:	60b9      	str	r1, [r7, #8]
 802d198:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d19a:	2300      	movs	r3, #0
 802d19c:	617b      	str	r3, [r7, #20]
 802d19e:	e009      	b.n	802d1b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 802d1a0:	68bb      	ldr	r3, [r7, #8]
 802d1a2:	1c5a      	adds	r2, r3, #1
 802d1a4:	60ba      	str	r2, [r7, #8]
 802d1a6:	781b      	ldrb	r3, [r3, #0]
 802d1a8:	4618      	mov	r0, r3
 802d1aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d1ae:	697b      	ldr	r3, [r7, #20]
 802d1b0:	3301      	adds	r3, #1
 802d1b2:	617b      	str	r3, [r7, #20]
 802d1b4:	697a      	ldr	r2, [r7, #20]
 802d1b6:	687b      	ldr	r3, [r7, #4]
 802d1b8:	429a      	cmp	r2, r3
 802d1ba:	dbf1      	blt.n	802d1a0 <_write+0x12>
	}
	return len;
 802d1bc:	687b      	ldr	r3, [r7, #4]
}
 802d1be:	4618      	mov	r0, r3
 802d1c0:	3718      	adds	r7, #24
 802d1c2:	46bd      	mov	sp, r7
 802d1c4:	bd80      	pop	{r7, pc}

0802d1c6 <_close>:

int _close(int file)
{
 802d1c6:	b480      	push	{r7}
 802d1c8:	b083      	sub	sp, #12
 802d1ca:	af00      	add	r7, sp, #0
 802d1cc:	6078      	str	r0, [r7, #4]
	return -1;
 802d1ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802d1d2:	4618      	mov	r0, r3
 802d1d4:	370c      	adds	r7, #12
 802d1d6:	46bd      	mov	sp, r7
 802d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1dc:	4770      	bx	lr

0802d1de <_fstat>:


int _fstat(int file, struct stat *st)
{
 802d1de:	b480      	push	{r7}
 802d1e0:	b083      	sub	sp, #12
 802d1e2:	af00      	add	r7, sp, #0
 802d1e4:	6078      	str	r0, [r7, #4]
 802d1e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802d1e8:	683b      	ldr	r3, [r7, #0]
 802d1ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802d1ee:	605a      	str	r2, [r3, #4]
	return 0;
 802d1f0:	2300      	movs	r3, #0
}
 802d1f2:	4618      	mov	r0, r3
 802d1f4:	370c      	adds	r7, #12
 802d1f6:	46bd      	mov	sp, r7
 802d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1fc:	4770      	bx	lr

0802d1fe <_isatty>:

int _isatty(int file)
{
 802d1fe:	b480      	push	{r7}
 802d200:	b083      	sub	sp, #12
 802d202:	af00      	add	r7, sp, #0
 802d204:	6078      	str	r0, [r7, #4]
	return 1;
 802d206:	2301      	movs	r3, #1
}
 802d208:	4618      	mov	r0, r3
 802d20a:	370c      	adds	r7, #12
 802d20c:	46bd      	mov	sp, r7
 802d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d212:	4770      	bx	lr

0802d214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802d214:	b480      	push	{r7}
 802d216:	b085      	sub	sp, #20
 802d218:	af00      	add	r7, sp, #0
 802d21a:	60f8      	str	r0, [r7, #12]
 802d21c:	60b9      	str	r1, [r7, #8]
 802d21e:	607a      	str	r2, [r7, #4]
	return 0;
 802d220:	2300      	movs	r3, #0
}
 802d222:	4618      	mov	r0, r3
 802d224:	3714      	adds	r7, #20
 802d226:	46bd      	mov	sp, r7
 802d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d22c:	4770      	bx	lr
	...

0802d230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802d230:	b580      	push	{r7, lr}
 802d232:	b086      	sub	sp, #24
 802d234:	af00      	add	r7, sp, #0
 802d236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802d238:	4a14      	ldr	r2, [pc, #80]	; (802d28c <_sbrk+0x5c>)
 802d23a:	4b15      	ldr	r3, [pc, #84]	; (802d290 <_sbrk+0x60>)
 802d23c:	1ad3      	subs	r3, r2, r3
 802d23e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802d240:	697b      	ldr	r3, [r7, #20]
 802d242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802d244:	4b13      	ldr	r3, [pc, #76]	; (802d294 <_sbrk+0x64>)
 802d246:	681b      	ldr	r3, [r3, #0]
 802d248:	2b00      	cmp	r3, #0
 802d24a:	d102      	bne.n	802d252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802d24c:	4b11      	ldr	r3, [pc, #68]	; (802d294 <_sbrk+0x64>)
 802d24e:	4a12      	ldr	r2, [pc, #72]	; (802d298 <_sbrk+0x68>)
 802d250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802d252:	4b10      	ldr	r3, [pc, #64]	; (802d294 <_sbrk+0x64>)
 802d254:	681a      	ldr	r2, [r3, #0]
 802d256:	687b      	ldr	r3, [r7, #4]
 802d258:	4413      	add	r3, r2
 802d25a:	693a      	ldr	r2, [r7, #16]
 802d25c:	429a      	cmp	r2, r3
 802d25e:	d207      	bcs.n	802d270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802d260:	f011 fe7e 	bl	803ef60 <__errno>
 802d264:	4603      	mov	r3, r0
 802d266:	220c      	movs	r2, #12
 802d268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802d26a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802d26e:	e009      	b.n	802d284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802d270:	4b08      	ldr	r3, [pc, #32]	; (802d294 <_sbrk+0x64>)
 802d272:	681b      	ldr	r3, [r3, #0]
 802d274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802d276:	4b07      	ldr	r3, [pc, #28]	; (802d294 <_sbrk+0x64>)
 802d278:	681a      	ldr	r2, [r3, #0]
 802d27a:	687b      	ldr	r3, [r7, #4]
 802d27c:	4413      	add	r3, r2
 802d27e:	4a05      	ldr	r2, [pc, #20]	; (802d294 <_sbrk+0x64>)
 802d280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802d282:	68fb      	ldr	r3, [r7, #12]
}
 802d284:	4618      	mov	r0, r3
 802d286:	3718      	adds	r7, #24
 802d288:	46bd      	mov	sp, r7
 802d28a:	bd80      	pop	{r7, pc}
 802d28c:	24080000 	.word	0x24080000
 802d290:	00000400 	.word	0x00000400
 802d294:	24001814 	.word	0x24001814
 802d298:	240037f0 	.word	0x240037f0

0802d29c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802d29c:	b480      	push	{r7}
 802d29e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802d2a0:	4b37      	ldr	r3, [pc, #220]	; (802d380 <SystemInit+0xe4>)
 802d2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802d2a6:	4a36      	ldr	r2, [pc, #216]	; (802d380 <SystemInit+0xe4>)
 802d2a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802d2ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802d2b0:	4b34      	ldr	r3, [pc, #208]	; (802d384 <SystemInit+0xe8>)
 802d2b2:	681b      	ldr	r3, [r3, #0]
 802d2b4:	f003 030f 	and.w	r3, r3, #15
 802d2b8:	2b06      	cmp	r3, #6
 802d2ba:	d807      	bhi.n	802d2cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802d2bc:	4b31      	ldr	r3, [pc, #196]	; (802d384 <SystemInit+0xe8>)
 802d2be:	681b      	ldr	r3, [r3, #0]
 802d2c0:	f023 030f 	bic.w	r3, r3, #15
 802d2c4:	4a2f      	ldr	r2, [pc, #188]	; (802d384 <SystemInit+0xe8>)
 802d2c6:	f043 0307 	orr.w	r3, r3, #7
 802d2ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802d2cc:	4b2e      	ldr	r3, [pc, #184]	; (802d388 <SystemInit+0xec>)
 802d2ce:	681b      	ldr	r3, [r3, #0]
 802d2d0:	4a2d      	ldr	r2, [pc, #180]	; (802d388 <SystemInit+0xec>)
 802d2d2:	f043 0301 	orr.w	r3, r3, #1
 802d2d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802d2d8:	4b2b      	ldr	r3, [pc, #172]	; (802d388 <SystemInit+0xec>)
 802d2da:	2200      	movs	r2, #0
 802d2dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802d2de:	4b2a      	ldr	r3, [pc, #168]	; (802d388 <SystemInit+0xec>)
 802d2e0:	681a      	ldr	r2, [r3, #0]
 802d2e2:	4929      	ldr	r1, [pc, #164]	; (802d388 <SystemInit+0xec>)
 802d2e4:	4b29      	ldr	r3, [pc, #164]	; (802d38c <SystemInit+0xf0>)
 802d2e6:	4013      	ands	r3, r2
 802d2e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802d2ea:	4b26      	ldr	r3, [pc, #152]	; (802d384 <SystemInit+0xe8>)
 802d2ec:	681b      	ldr	r3, [r3, #0]
 802d2ee:	f003 0308 	and.w	r3, r3, #8
 802d2f2:	2b00      	cmp	r3, #0
 802d2f4:	d007      	beq.n	802d306 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802d2f6:	4b23      	ldr	r3, [pc, #140]	; (802d384 <SystemInit+0xe8>)
 802d2f8:	681b      	ldr	r3, [r3, #0]
 802d2fa:	f023 030f 	bic.w	r3, r3, #15
 802d2fe:	4a21      	ldr	r2, [pc, #132]	; (802d384 <SystemInit+0xe8>)
 802d300:	f043 0307 	orr.w	r3, r3, #7
 802d304:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802d306:	4b20      	ldr	r3, [pc, #128]	; (802d388 <SystemInit+0xec>)
 802d308:	2200      	movs	r2, #0
 802d30a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802d30c:	4b1e      	ldr	r3, [pc, #120]	; (802d388 <SystemInit+0xec>)
 802d30e:	2200      	movs	r2, #0
 802d310:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802d312:	4b1d      	ldr	r3, [pc, #116]	; (802d388 <SystemInit+0xec>)
 802d314:	2200      	movs	r2, #0
 802d316:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802d318:	4b1b      	ldr	r3, [pc, #108]	; (802d388 <SystemInit+0xec>)
 802d31a:	4a1d      	ldr	r2, [pc, #116]	; (802d390 <SystemInit+0xf4>)
 802d31c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802d31e:	4b1a      	ldr	r3, [pc, #104]	; (802d388 <SystemInit+0xec>)
 802d320:	4a1c      	ldr	r2, [pc, #112]	; (802d394 <SystemInit+0xf8>)
 802d322:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802d324:	4b18      	ldr	r3, [pc, #96]	; (802d388 <SystemInit+0xec>)
 802d326:	4a1c      	ldr	r2, [pc, #112]	; (802d398 <SystemInit+0xfc>)
 802d328:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802d32a:	4b17      	ldr	r3, [pc, #92]	; (802d388 <SystemInit+0xec>)
 802d32c:	2200      	movs	r2, #0
 802d32e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802d330:	4b15      	ldr	r3, [pc, #84]	; (802d388 <SystemInit+0xec>)
 802d332:	4a19      	ldr	r2, [pc, #100]	; (802d398 <SystemInit+0xfc>)
 802d334:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802d336:	4b14      	ldr	r3, [pc, #80]	; (802d388 <SystemInit+0xec>)
 802d338:	2200      	movs	r2, #0
 802d33a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802d33c:	4b12      	ldr	r3, [pc, #72]	; (802d388 <SystemInit+0xec>)
 802d33e:	4a16      	ldr	r2, [pc, #88]	; (802d398 <SystemInit+0xfc>)
 802d340:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802d342:	4b11      	ldr	r3, [pc, #68]	; (802d388 <SystemInit+0xec>)
 802d344:	2200      	movs	r2, #0
 802d346:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802d348:	4b0f      	ldr	r3, [pc, #60]	; (802d388 <SystemInit+0xec>)
 802d34a:	681b      	ldr	r3, [r3, #0]
 802d34c:	4a0e      	ldr	r2, [pc, #56]	; (802d388 <SystemInit+0xec>)
 802d34e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802d352:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802d354:	4b0c      	ldr	r3, [pc, #48]	; (802d388 <SystemInit+0xec>)
 802d356:	2200      	movs	r2, #0
 802d358:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802d35a:	4b10      	ldr	r3, [pc, #64]	; (802d39c <SystemInit+0x100>)
 802d35c:	681a      	ldr	r2, [r3, #0]
 802d35e:	4b10      	ldr	r3, [pc, #64]	; (802d3a0 <SystemInit+0x104>)
 802d360:	4013      	ands	r3, r2
 802d362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802d366:	d202      	bcs.n	802d36e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802d368:	4b0e      	ldr	r3, [pc, #56]	; (802d3a4 <SystemInit+0x108>)
 802d36a:	2201      	movs	r2, #1
 802d36c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802d36e:	4b0e      	ldr	r3, [pc, #56]	; (802d3a8 <SystemInit+0x10c>)
 802d370:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802d374:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802d376:	bf00      	nop
 802d378:	46bd      	mov	sp, r7
 802d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d37e:	4770      	bx	lr
 802d380:	e000ed00 	.word	0xe000ed00
 802d384:	52002000 	.word	0x52002000
 802d388:	58024400 	.word	0x58024400
 802d38c:	eaf6ed7f 	.word	0xeaf6ed7f
 802d390:	02020200 	.word	0x02020200
 802d394:	01ff0000 	.word	0x01ff0000
 802d398:	01010280 	.word	0x01010280
 802d39c:	5c001000 	.word	0x5c001000
 802d3a0:	ffff0000 	.word	0xffff0000
 802d3a4:	51008108 	.word	0x51008108
 802d3a8:	52004000 	.word	0x52004000

0802d3ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802d3ac:	b580      	push	{r7, lr}
 802d3ae:	b088      	sub	sp, #32
 802d3b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802d3b2:	f107 0310 	add.w	r3, r7, #16
 802d3b6:	2200      	movs	r2, #0
 802d3b8:	601a      	str	r2, [r3, #0]
 802d3ba:	605a      	str	r2, [r3, #4]
 802d3bc:	609a      	str	r2, [r3, #8]
 802d3be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802d3c0:	1d3b      	adds	r3, r7, #4
 802d3c2:	2200      	movs	r2, #0
 802d3c4:	601a      	str	r2, [r3, #0]
 802d3c6:	605a      	str	r2, [r3, #4]
 802d3c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802d3ca:	4b1e      	ldr	r3, [pc, #120]	; (802d444 <MX_TIM2_Init+0x98>)
 802d3cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802d3d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802d3d2:	4b1c      	ldr	r3, [pc, #112]	; (802d444 <MX_TIM2_Init+0x98>)
 802d3d4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802d3d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802d3da:	4b1a      	ldr	r3, [pc, #104]	; (802d444 <MX_TIM2_Init+0x98>)
 802d3dc:	2200      	movs	r2, #0
 802d3de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802d3e0:	4b18      	ldr	r3, [pc, #96]	; (802d444 <MX_TIM2_Init+0x98>)
 802d3e2:	2264      	movs	r2, #100	; 0x64
 802d3e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802d3e6:	4b17      	ldr	r3, [pc, #92]	; (802d444 <MX_TIM2_Init+0x98>)
 802d3e8:	2200      	movs	r2, #0
 802d3ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802d3ec:	4b15      	ldr	r3, [pc, #84]	; (802d444 <MX_TIM2_Init+0x98>)
 802d3ee:	2200      	movs	r2, #0
 802d3f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802d3f2:	4814      	ldr	r0, [pc, #80]	; (802d444 <MX_TIM2_Init+0x98>)
 802d3f4:	f00a f953 	bl	803769e <HAL_TIM_Base_Init>
 802d3f8:	4603      	mov	r3, r0
 802d3fa:	2b00      	cmp	r3, #0
 802d3fc:	d001      	beq.n	802d402 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802d3fe:	f7ff fc61 	bl	802ccc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802d402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802d406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802d408:	f107 0310 	add.w	r3, r7, #16
 802d40c:	4619      	mov	r1, r3
 802d40e:	480d      	ldr	r0, [pc, #52]	; (802d444 <MX_TIM2_Init+0x98>)
 802d410:	f00a fb34 	bl	8037a7c <HAL_TIM_ConfigClockSource>
 802d414:	4603      	mov	r3, r0
 802d416:	2b00      	cmp	r3, #0
 802d418:	d001      	beq.n	802d41e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802d41a:	f7ff fc53 	bl	802ccc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802d41e:	2300      	movs	r3, #0
 802d420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802d422:	2300      	movs	r3, #0
 802d424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802d426:	1d3b      	adds	r3, r7, #4
 802d428:	4619      	mov	r1, r3
 802d42a:	4806      	ldr	r0, [pc, #24]	; (802d444 <MX_TIM2_Init+0x98>)
 802d42c:	f00a fd7e 	bl	8037f2c <HAL_TIMEx_MasterConfigSynchronization>
 802d430:	4603      	mov	r3, r0
 802d432:	2b00      	cmp	r3, #0
 802d434:	d001      	beq.n	802d43a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802d436:	f7ff fc45 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802d43a:	bf00      	nop
 802d43c:	3720      	adds	r7, #32
 802d43e:	46bd      	mov	sp, r7
 802d440:	bd80      	pop	{r7, pc}
 802d442:	bf00      	nop
 802d444:	24001818 	.word	0x24001818

0802d448 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802d448:	b580      	push	{r7, lr}
 802d44a:	b088      	sub	sp, #32
 802d44c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802d44e:	f107 0310 	add.w	r3, r7, #16
 802d452:	2200      	movs	r2, #0
 802d454:	601a      	str	r2, [r3, #0]
 802d456:	605a      	str	r2, [r3, #4]
 802d458:	609a      	str	r2, [r3, #8]
 802d45a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802d45c:	1d3b      	adds	r3, r7, #4
 802d45e:	2200      	movs	r2, #0
 802d460:	601a      	str	r2, [r3, #0]
 802d462:	605a      	str	r2, [r3, #4]
 802d464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802d466:	4b1d      	ldr	r3, [pc, #116]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d468:	4a1d      	ldr	r2, [pc, #116]	; (802d4e0 <MX_TIM3_Init+0x98>)
 802d46a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802d46c:	4b1b      	ldr	r3, [pc, #108]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d46e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802d472:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802d474:	4b19      	ldr	r3, [pc, #100]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d476:	2200      	movs	r2, #0
 802d478:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 802d47a:	4b18      	ldr	r3, [pc, #96]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d47c:	2264      	movs	r2, #100	; 0x64
 802d47e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802d480:	4b16      	ldr	r3, [pc, #88]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d482:	2200      	movs	r2, #0
 802d484:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802d486:	4b15      	ldr	r3, [pc, #84]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d488:	2200      	movs	r2, #0
 802d48a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802d48c:	4813      	ldr	r0, [pc, #76]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d48e:	f00a f906 	bl	803769e <HAL_TIM_Base_Init>
 802d492:	4603      	mov	r3, r0
 802d494:	2b00      	cmp	r3, #0
 802d496:	d001      	beq.n	802d49c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802d498:	f7ff fc14 	bl	802ccc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802d49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802d4a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802d4a2:	f107 0310 	add.w	r3, r7, #16
 802d4a6:	4619      	mov	r1, r3
 802d4a8:	480c      	ldr	r0, [pc, #48]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d4aa:	f00a fae7 	bl	8037a7c <HAL_TIM_ConfigClockSource>
 802d4ae:	4603      	mov	r3, r0
 802d4b0:	2b00      	cmp	r3, #0
 802d4b2:	d001      	beq.n	802d4b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802d4b4:	f7ff fc06 	bl	802ccc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802d4b8:	2300      	movs	r3, #0
 802d4ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802d4bc:	2300      	movs	r3, #0
 802d4be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802d4c0:	1d3b      	adds	r3, r7, #4
 802d4c2:	4619      	mov	r1, r3
 802d4c4:	4805      	ldr	r0, [pc, #20]	; (802d4dc <MX_TIM3_Init+0x94>)
 802d4c6:	f00a fd31 	bl	8037f2c <HAL_TIMEx_MasterConfigSynchronization>
 802d4ca:	4603      	mov	r3, r0
 802d4cc:	2b00      	cmp	r3, #0
 802d4ce:	d001      	beq.n	802d4d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802d4d0:	f7ff fbf8 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802d4d4:	bf00      	nop
 802d4d6:	3720      	adds	r7, #32
 802d4d8:	46bd      	mov	sp, r7
 802d4da:	bd80      	pop	{r7, pc}
 802d4dc:	24001864 	.word	0x24001864
 802d4e0:	40000400 	.word	0x40000400

0802d4e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802d4e4:	b580      	push	{r7, lr}
 802d4e6:	b088      	sub	sp, #32
 802d4e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802d4ea:	f107 0310 	add.w	r3, r7, #16
 802d4ee:	2200      	movs	r2, #0
 802d4f0:	601a      	str	r2, [r3, #0]
 802d4f2:	605a      	str	r2, [r3, #4]
 802d4f4:	609a      	str	r2, [r3, #8]
 802d4f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802d4f8:	1d3b      	adds	r3, r7, #4
 802d4fa:	2200      	movs	r2, #0
 802d4fc:	601a      	str	r2, [r3, #0]
 802d4fe:	605a      	str	r2, [r3, #4]
 802d500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802d502:	4b1d      	ldr	r3, [pc, #116]	; (802d578 <MX_TIM4_Init+0x94>)
 802d504:	4a1d      	ldr	r2, [pc, #116]	; (802d57c <MX_TIM4_Init+0x98>)
 802d506:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802d508:	4b1b      	ldr	r3, [pc, #108]	; (802d578 <MX_TIM4_Init+0x94>)
 802d50a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802d50e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802d510:	4b19      	ldr	r3, [pc, #100]	; (802d578 <MX_TIM4_Init+0x94>)
 802d512:	2200      	movs	r2, #0
 802d514:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802d516:	4b18      	ldr	r3, [pc, #96]	; (802d578 <MX_TIM4_Init+0x94>)
 802d518:	2264      	movs	r2, #100	; 0x64
 802d51a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802d51c:	4b16      	ldr	r3, [pc, #88]	; (802d578 <MX_TIM4_Init+0x94>)
 802d51e:	2200      	movs	r2, #0
 802d520:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802d522:	4b15      	ldr	r3, [pc, #84]	; (802d578 <MX_TIM4_Init+0x94>)
 802d524:	2200      	movs	r2, #0
 802d526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802d528:	4813      	ldr	r0, [pc, #76]	; (802d578 <MX_TIM4_Init+0x94>)
 802d52a:	f00a f8b8 	bl	803769e <HAL_TIM_Base_Init>
 802d52e:	4603      	mov	r3, r0
 802d530:	2b00      	cmp	r3, #0
 802d532:	d001      	beq.n	802d538 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802d534:	f7ff fbc6 	bl	802ccc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802d538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802d53c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802d53e:	f107 0310 	add.w	r3, r7, #16
 802d542:	4619      	mov	r1, r3
 802d544:	480c      	ldr	r0, [pc, #48]	; (802d578 <MX_TIM4_Init+0x94>)
 802d546:	f00a fa99 	bl	8037a7c <HAL_TIM_ConfigClockSource>
 802d54a:	4603      	mov	r3, r0
 802d54c:	2b00      	cmp	r3, #0
 802d54e:	d001      	beq.n	802d554 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802d550:	f7ff fbb8 	bl	802ccc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802d554:	2300      	movs	r3, #0
 802d556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802d558:	2300      	movs	r3, #0
 802d55a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802d55c:	1d3b      	adds	r3, r7, #4
 802d55e:	4619      	mov	r1, r3
 802d560:	4805      	ldr	r0, [pc, #20]	; (802d578 <MX_TIM4_Init+0x94>)
 802d562:	f00a fce3 	bl	8037f2c <HAL_TIMEx_MasterConfigSynchronization>
 802d566:	4603      	mov	r3, r0
 802d568:	2b00      	cmp	r3, #0
 802d56a:	d001      	beq.n	802d570 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802d56c:	f7ff fbaa 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802d570:	bf00      	nop
 802d572:	3720      	adds	r7, #32
 802d574:	46bd      	mov	sp, r7
 802d576:	bd80      	pop	{r7, pc}
 802d578:	240018b0 	.word	0x240018b0
 802d57c:	40000800 	.word	0x40000800

0802d580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802d580:	b580      	push	{r7, lr}
 802d582:	b086      	sub	sp, #24
 802d584:	af00      	add	r7, sp, #0
 802d586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802d588:	687b      	ldr	r3, [r7, #4]
 802d58a:	681b      	ldr	r3, [r3, #0]
 802d58c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d590:	d117      	bne.n	802d5c2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802d592:	4b2a      	ldr	r3, [pc, #168]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d598:	4a28      	ldr	r2, [pc, #160]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d59a:	f043 0301 	orr.w	r3, r3, #1
 802d59e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802d5a2:	4b26      	ldr	r3, [pc, #152]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d5a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d5a8:	f003 0301 	and.w	r3, r3, #1
 802d5ac:	617b      	str	r3, [r7, #20]
 802d5ae:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802d5b0:	2200      	movs	r2, #0
 802d5b2:	2101      	movs	r1, #1
 802d5b4:	201c      	movs	r0, #28
 802d5b6:	f000 ff3a 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802d5ba:	201c      	movs	r0, #28
 802d5bc:	f000 ff51 	bl	802e462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802d5c0:	e038      	b.n	802d634 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802d5c2:	687b      	ldr	r3, [r7, #4]
 802d5c4:	681b      	ldr	r3, [r3, #0]
 802d5c6:	4a1e      	ldr	r2, [pc, #120]	; (802d640 <HAL_TIM_Base_MspInit+0xc0>)
 802d5c8:	4293      	cmp	r3, r2
 802d5ca:	d117      	bne.n	802d5fc <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802d5cc:	4b1b      	ldr	r3, [pc, #108]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d5ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d5d2:	4a1a      	ldr	r2, [pc, #104]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d5d4:	f043 0302 	orr.w	r3, r3, #2
 802d5d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802d5dc:	4b17      	ldr	r3, [pc, #92]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d5de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d5e2:	f003 0302 	and.w	r3, r3, #2
 802d5e6:	613b      	str	r3, [r7, #16]
 802d5e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802d5ea:	2200      	movs	r2, #0
 802d5ec:	2101      	movs	r1, #1
 802d5ee:	201d      	movs	r0, #29
 802d5f0:	f000 ff1d 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802d5f4:	201d      	movs	r0, #29
 802d5f6:	f000 ff34 	bl	802e462 <HAL_NVIC_EnableIRQ>
}
 802d5fa:	e01b      	b.n	802d634 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802d5fc:	687b      	ldr	r3, [r7, #4]
 802d5fe:	681b      	ldr	r3, [r3, #0]
 802d600:	4a10      	ldr	r2, [pc, #64]	; (802d644 <HAL_TIM_Base_MspInit+0xc4>)
 802d602:	4293      	cmp	r3, r2
 802d604:	d116      	bne.n	802d634 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802d606:	4b0d      	ldr	r3, [pc, #52]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d60c:	4a0b      	ldr	r2, [pc, #44]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d60e:	f043 0304 	orr.w	r3, r3, #4
 802d612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802d616:	4b09      	ldr	r3, [pc, #36]	; (802d63c <HAL_TIM_Base_MspInit+0xbc>)
 802d618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d61c:	f003 0304 	and.w	r3, r3, #4
 802d620:	60fb      	str	r3, [r7, #12]
 802d622:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802d624:	2200      	movs	r2, #0
 802d626:	2100      	movs	r1, #0
 802d628:	201e      	movs	r0, #30
 802d62a:	f000 ff00 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802d62e:	201e      	movs	r0, #30
 802d630:	f000 ff17 	bl	802e462 <HAL_NVIC_EnableIRQ>
}
 802d634:	bf00      	nop
 802d636:	3718      	adds	r7, #24
 802d638:	46bd      	mov	sp, r7
 802d63a:	bd80      	pop	{r7, pc}
 802d63c:	58024400 	.word	0x58024400
 802d640:	40000400 	.word	0x40000400
 802d644:	40000800 	.word	0x40000800

0802d648 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802d648:	b580      	push	{r7, lr}
 802d64a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802d64c:	4b25      	ldr	r3, [pc, #148]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d64e:	4a26      	ldr	r2, [pc, #152]	; (802d6e8 <MX_UART4_Init+0xa0>)
 802d650:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802d652:	4b24      	ldr	r3, [pc, #144]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802d658:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802d65a:	4b22      	ldr	r3, [pc, #136]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d65c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802d660:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802d662:	4b20      	ldr	r3, [pc, #128]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d664:	2200      	movs	r2, #0
 802d666:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802d668:	4b1e      	ldr	r3, [pc, #120]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d66a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d66e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802d670:	4b1c      	ldr	r3, [pc, #112]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d672:	220c      	movs	r2, #12
 802d674:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802d676:	4b1b      	ldr	r3, [pc, #108]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d678:	2200      	movs	r2, #0
 802d67a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802d67c:	4b19      	ldr	r3, [pc, #100]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d67e:	2200      	movs	r2, #0
 802d680:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802d682:	4b18      	ldr	r3, [pc, #96]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d684:	2200      	movs	r2, #0
 802d686:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802d688:	4b16      	ldr	r3, [pc, #88]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d68a:	2200      	movs	r2, #0
 802d68c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802d68e:	4b15      	ldr	r3, [pc, #84]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d690:	2220      	movs	r2, #32
 802d692:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802d694:	4b13      	ldr	r3, [pc, #76]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802d69a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802d69c:	4811      	ldr	r0, [pc, #68]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d69e:	f00a fcf1 	bl	8038084 <HAL_UART_Init>
 802d6a2:	4603      	mov	r3, r0
 802d6a4:	2b00      	cmp	r3, #0
 802d6a6:	d001      	beq.n	802d6ac <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802d6a8:	f7ff fb0c 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802d6ac:	2100      	movs	r1, #0
 802d6ae:	480d      	ldr	r0, [pc, #52]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d6b0:	f00d fa3e 	bl	803ab30 <HAL_UARTEx_SetTxFifoThreshold>
 802d6b4:	4603      	mov	r3, r0
 802d6b6:	2b00      	cmp	r3, #0
 802d6b8:	d001      	beq.n	802d6be <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802d6ba:	f7ff fb03 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802d6be:	2100      	movs	r1, #0
 802d6c0:	4808      	ldr	r0, [pc, #32]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d6c2:	f00d fa73 	bl	803abac <HAL_UARTEx_SetRxFifoThreshold>
 802d6c6:	4603      	mov	r3, r0
 802d6c8:	2b00      	cmp	r3, #0
 802d6ca:	d001      	beq.n	802d6d0 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802d6cc:	f7ff fafa 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802d6d0:	4804      	ldr	r0, [pc, #16]	; (802d6e4 <MX_UART4_Init+0x9c>)
 802d6d2:	f00d f9f4 	bl	803aabe <HAL_UARTEx_DisableFifoMode>
 802d6d6:	4603      	mov	r3, r0
 802d6d8:	2b00      	cmp	r3, #0
 802d6da:	d001      	beq.n	802d6e0 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802d6dc:	f7ff faf2 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802d6e0:	bf00      	nop
 802d6e2:	bd80      	pop	{r7, pc}
 802d6e4:	240018fc 	.word	0x240018fc
 802d6e8:	40004c00 	.word	0x40004c00

0802d6ec <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802d6ec:	b580      	push	{r7, lr}
 802d6ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802d6f0:	4b22      	ldr	r3, [pc, #136]	; (802d77c <MX_UART7_Init+0x90>)
 802d6f2:	4a23      	ldr	r2, [pc, #140]	; (802d780 <MX_UART7_Init+0x94>)
 802d6f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802d6f6:	4b21      	ldr	r3, [pc, #132]	; (802d77c <MX_UART7_Init+0x90>)
 802d6f8:	4a22      	ldr	r2, [pc, #136]	; (802d784 <MX_UART7_Init+0x98>)
 802d6fa:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802d6fc:	4b1f      	ldr	r3, [pc, #124]	; (802d77c <MX_UART7_Init+0x90>)
 802d6fe:	2200      	movs	r2, #0
 802d700:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802d702:	4b1e      	ldr	r3, [pc, #120]	; (802d77c <MX_UART7_Init+0x90>)
 802d704:	2200      	movs	r2, #0
 802d706:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802d708:	4b1c      	ldr	r3, [pc, #112]	; (802d77c <MX_UART7_Init+0x90>)
 802d70a:	2200      	movs	r2, #0
 802d70c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802d70e:	4b1b      	ldr	r3, [pc, #108]	; (802d77c <MX_UART7_Init+0x90>)
 802d710:	220c      	movs	r2, #12
 802d712:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802d714:	4b19      	ldr	r3, [pc, #100]	; (802d77c <MX_UART7_Init+0x90>)
 802d716:	2200      	movs	r2, #0
 802d718:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802d71a:	4b18      	ldr	r3, [pc, #96]	; (802d77c <MX_UART7_Init+0x90>)
 802d71c:	2200      	movs	r2, #0
 802d71e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802d720:	4b16      	ldr	r3, [pc, #88]	; (802d77c <MX_UART7_Init+0x90>)
 802d722:	2200      	movs	r2, #0
 802d724:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802d726:	4b15      	ldr	r3, [pc, #84]	; (802d77c <MX_UART7_Init+0x90>)
 802d728:	2200      	movs	r2, #0
 802d72a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802d72c:	4b13      	ldr	r3, [pc, #76]	; (802d77c <MX_UART7_Init+0x90>)
 802d72e:	2200      	movs	r2, #0
 802d730:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802d732:	4812      	ldr	r0, [pc, #72]	; (802d77c <MX_UART7_Init+0x90>)
 802d734:	f00a fca6 	bl	8038084 <HAL_UART_Init>
 802d738:	4603      	mov	r3, r0
 802d73a:	2b00      	cmp	r3, #0
 802d73c:	d001      	beq.n	802d742 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802d73e:	f7ff fac1 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802d742:	2100      	movs	r1, #0
 802d744:	480d      	ldr	r0, [pc, #52]	; (802d77c <MX_UART7_Init+0x90>)
 802d746:	f00d f9f3 	bl	803ab30 <HAL_UARTEx_SetTxFifoThreshold>
 802d74a:	4603      	mov	r3, r0
 802d74c:	2b00      	cmp	r3, #0
 802d74e:	d001      	beq.n	802d754 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802d750:	f7ff fab8 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802d754:	2100      	movs	r1, #0
 802d756:	4809      	ldr	r0, [pc, #36]	; (802d77c <MX_UART7_Init+0x90>)
 802d758:	f00d fa28 	bl	803abac <HAL_UARTEx_SetRxFifoThreshold>
 802d75c:	4603      	mov	r3, r0
 802d75e:	2b00      	cmp	r3, #0
 802d760:	d001      	beq.n	802d766 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802d762:	f7ff faaf 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802d766:	4805      	ldr	r0, [pc, #20]	; (802d77c <MX_UART7_Init+0x90>)
 802d768:	f00d f9a9 	bl	803aabe <HAL_UARTEx_DisableFifoMode>
 802d76c:	4603      	mov	r3, r0
 802d76e:	2b00      	cmp	r3, #0
 802d770:	d001      	beq.n	802d776 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802d772:	f7ff faa7 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802d776:	bf00      	nop
 802d778:	bd80      	pop	{r7, pc}
 802d77a:	bf00      	nop
 802d77c:	2400198c 	.word	0x2400198c
 802d780:	40007800 	.word	0x40007800
 802d784:	001312d0 	.word	0x001312d0

0802d788 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802d788:	b580      	push	{r7, lr}
 802d78a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802d78c:	4b26      	ldr	r3, [pc, #152]	; (802d828 <MX_UART8_Init+0xa0>)
 802d78e:	4a27      	ldr	r2, [pc, #156]	; (802d82c <MX_UART8_Init+0xa4>)
 802d790:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802d792:	4b25      	ldr	r3, [pc, #148]	; (802d828 <MX_UART8_Init+0xa0>)
 802d794:	4a26      	ldr	r2, [pc, #152]	; (802d830 <MX_UART8_Init+0xa8>)
 802d796:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802d798:	4b23      	ldr	r3, [pc, #140]	; (802d828 <MX_UART8_Init+0xa0>)
 802d79a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802d79e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802d7a0:	4b21      	ldr	r3, [pc, #132]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7a2:	2200      	movs	r2, #0
 802d7a4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802d7a6:	4b20      	ldr	r3, [pc, #128]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d7ac:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802d7ae:	4b1e      	ldr	r3, [pc, #120]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7b0:	220c      	movs	r2, #12
 802d7b2:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802d7b4:	4b1c      	ldr	r3, [pc, #112]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7b6:	2200      	movs	r2, #0
 802d7b8:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802d7ba:	4b1b      	ldr	r3, [pc, #108]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7bc:	2200      	movs	r2, #0
 802d7be:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802d7c0:	4b19      	ldr	r3, [pc, #100]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7c2:	2200      	movs	r2, #0
 802d7c4:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802d7c6:	4b18      	ldr	r3, [pc, #96]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7c8:	2200      	movs	r2, #0
 802d7ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802d7cc:	4b16      	ldr	r3, [pc, #88]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7ce:	2220      	movs	r2, #32
 802d7d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802d7d2:	4b15      	ldr	r3, [pc, #84]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802d7d8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802d7da:	4813      	ldr	r0, [pc, #76]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7dc:	f00a fc52 	bl	8038084 <HAL_UART_Init>
 802d7e0:	4603      	mov	r3, r0
 802d7e2:	2b00      	cmp	r3, #0
 802d7e4:	d001      	beq.n	802d7ea <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802d7e6:	f7ff fa6d 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802d7ea:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802d7ee:	480e      	ldr	r0, [pc, #56]	; (802d828 <MX_UART8_Init+0xa0>)
 802d7f0:	f00d f99e 	bl	803ab30 <HAL_UARTEx_SetTxFifoThreshold>
 802d7f4:	4603      	mov	r3, r0
 802d7f6:	2b00      	cmp	r3, #0
 802d7f8:	d001      	beq.n	802d7fe <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802d7fa:	f7ff fa63 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802d7fe:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802d802:	4809      	ldr	r0, [pc, #36]	; (802d828 <MX_UART8_Init+0xa0>)
 802d804:	f00d f9d2 	bl	803abac <HAL_UARTEx_SetRxFifoThreshold>
 802d808:	4603      	mov	r3, r0
 802d80a:	2b00      	cmp	r3, #0
 802d80c:	d001      	beq.n	802d812 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802d80e:	f7ff fa59 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802d812:	4805      	ldr	r0, [pc, #20]	; (802d828 <MX_UART8_Init+0xa0>)
 802d814:	f00d f918 	bl	803aa48 <HAL_UARTEx_EnableFifoMode>
 802d818:	4603      	mov	r3, r0
 802d81a:	2b00      	cmp	r3, #0
 802d81c:	d001      	beq.n	802d822 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802d81e:	f7ff fa51 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802d822:	bf00      	nop
 802d824:	bd80      	pop	{r7, pc}
 802d826:	bf00      	nop
 802d828:	24001a1c 	.word	0x24001a1c
 802d82c:	40007c00 	.word	0x40007c00
 802d830:	001312d0 	.word	0x001312d0

0802d834 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802d834:	b580      	push	{r7, lr}
 802d836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802d838:	4b22      	ldr	r3, [pc, #136]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d83a:	4a23      	ldr	r2, [pc, #140]	; (802d8c8 <MX_USART2_UART_Init+0x94>)
 802d83c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802d83e:	4b21      	ldr	r3, [pc, #132]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802d844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802d846:	4b1f      	ldr	r3, [pc, #124]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d848:	2200      	movs	r2, #0
 802d84a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802d84c:	4b1d      	ldr	r3, [pc, #116]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d84e:	2200      	movs	r2, #0
 802d850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802d852:	4b1c      	ldr	r3, [pc, #112]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d854:	2200      	movs	r2, #0
 802d856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802d858:	4b1a      	ldr	r3, [pc, #104]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d85a:	220c      	movs	r2, #12
 802d85c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802d85e:	4b19      	ldr	r3, [pc, #100]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d860:	2200      	movs	r2, #0
 802d862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802d864:	4b17      	ldr	r3, [pc, #92]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d866:	2200      	movs	r2, #0
 802d868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802d86a:	4b16      	ldr	r3, [pc, #88]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d86c:	2200      	movs	r2, #0
 802d86e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802d870:	4b14      	ldr	r3, [pc, #80]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d872:	2200      	movs	r2, #0
 802d874:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802d876:	4b13      	ldr	r3, [pc, #76]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d878:	2200      	movs	r2, #0
 802d87a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802d87c:	4811      	ldr	r0, [pc, #68]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d87e:	f00a fc01 	bl	8038084 <HAL_UART_Init>
 802d882:	4603      	mov	r3, r0
 802d884:	2b00      	cmp	r3, #0
 802d886:	d001      	beq.n	802d88c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802d888:	f7ff fa1c 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802d88c:	2100      	movs	r1, #0
 802d88e:	480d      	ldr	r0, [pc, #52]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d890:	f00d f94e 	bl	803ab30 <HAL_UARTEx_SetTxFifoThreshold>
 802d894:	4603      	mov	r3, r0
 802d896:	2b00      	cmp	r3, #0
 802d898:	d001      	beq.n	802d89e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802d89a:	f7ff fa13 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802d89e:	2100      	movs	r1, #0
 802d8a0:	4808      	ldr	r0, [pc, #32]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d8a2:	f00d f983 	bl	803abac <HAL_UARTEx_SetRxFifoThreshold>
 802d8a6:	4603      	mov	r3, r0
 802d8a8:	2b00      	cmp	r3, #0
 802d8aa:	d001      	beq.n	802d8b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802d8ac:	f7ff fa0a 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802d8b0:	4804      	ldr	r0, [pc, #16]	; (802d8c4 <MX_USART2_UART_Init+0x90>)
 802d8b2:	f00d f904 	bl	803aabe <HAL_UARTEx_DisableFifoMode>
 802d8b6:	4603      	mov	r3, r0
 802d8b8:	2b00      	cmp	r3, #0
 802d8ba:	d001      	beq.n	802d8c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802d8bc:	f7ff fa02 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802d8c0:	bf00      	nop
 802d8c2:	bd80      	pop	{r7, pc}
 802d8c4:	24001aac 	.word	0x24001aac
 802d8c8:	40004400 	.word	0x40004400

0802d8cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802d8cc:	b580      	push	{r7, lr}
 802d8ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802d8d0:	4b26      	ldr	r3, [pc, #152]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d8d2:	4a27      	ldr	r2, [pc, #156]	; (802d970 <MX_USART3_UART_Init+0xa4>)
 802d8d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802d8d6:	4b25      	ldr	r3, [pc, #148]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d8d8:	4a26      	ldr	r2, [pc, #152]	; (802d974 <MX_USART3_UART_Init+0xa8>)
 802d8da:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802d8dc:	4b23      	ldr	r3, [pc, #140]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d8de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802d8e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802d8e4:	4b21      	ldr	r3, [pc, #132]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d8e6:	2200      	movs	r2, #0
 802d8e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802d8ea:	4b20      	ldr	r3, [pc, #128]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d8ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d8f0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802d8f2:	4b1e      	ldr	r3, [pc, #120]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d8f4:	220c      	movs	r2, #12
 802d8f6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802d8f8:	4b1c      	ldr	r3, [pc, #112]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d8fa:	2200      	movs	r2, #0
 802d8fc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802d8fe:	4b1b      	ldr	r3, [pc, #108]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d900:	2200      	movs	r2, #0
 802d902:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802d904:	4b19      	ldr	r3, [pc, #100]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d906:	2200      	movs	r2, #0
 802d908:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802d90a:	4b18      	ldr	r3, [pc, #96]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d90c:	2200      	movs	r2, #0
 802d90e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802d910:	4b16      	ldr	r3, [pc, #88]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d912:	2220      	movs	r2, #32
 802d914:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802d916:	4b15      	ldr	r3, [pc, #84]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802d91c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802d91e:	4813      	ldr	r0, [pc, #76]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d920:	f00a fbb0 	bl	8038084 <HAL_UART_Init>
 802d924:	4603      	mov	r3, r0
 802d926:	2b00      	cmp	r3, #0
 802d928:	d001      	beq.n	802d92e <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802d92a:	f7ff f9cb 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802d92e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802d932:	480e      	ldr	r0, [pc, #56]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d934:	f00d f8fc 	bl	803ab30 <HAL_UARTEx_SetTxFifoThreshold>
 802d938:	4603      	mov	r3, r0
 802d93a:	2b00      	cmp	r3, #0
 802d93c:	d001      	beq.n	802d942 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802d93e:	f7ff f9c1 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802d942:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802d946:	4809      	ldr	r0, [pc, #36]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d948:	f00d f930 	bl	803abac <HAL_UARTEx_SetRxFifoThreshold>
 802d94c:	4603      	mov	r3, r0
 802d94e:	2b00      	cmp	r3, #0
 802d950:	d001      	beq.n	802d956 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802d952:	f7ff f9b7 	bl	802ccc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802d956:	4805      	ldr	r0, [pc, #20]	; (802d96c <MX_USART3_UART_Init+0xa0>)
 802d958:	f00d f876 	bl	803aa48 <HAL_UARTEx_EnableFifoMode>
 802d95c:	4603      	mov	r3, r0
 802d95e:	2b00      	cmp	r3, #0
 802d960:	d001      	beq.n	802d966 <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802d962:	f7ff f9af 	bl	802ccc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802d966:	bf00      	nop
 802d968:	bd80      	pop	{r7, pc}
 802d96a:	bf00      	nop
 802d96c:	24001b3c 	.word	0x24001b3c
 802d970:	40004800 	.word	0x40004800
 802d974:	001312d0 	.word	0x001312d0

0802d978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802d978:	b580      	push	{r7, lr}
 802d97a:	b0c0      	sub	sp, #256	; 0x100
 802d97c:	af00      	add	r7, sp, #0
 802d97e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802d980:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802d984:	2200      	movs	r2, #0
 802d986:	601a      	str	r2, [r3, #0]
 802d988:	605a      	str	r2, [r3, #4]
 802d98a:	609a      	str	r2, [r3, #8]
 802d98c:	60da      	str	r2, [r3, #12]
 802d98e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802d990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802d994:	22bc      	movs	r2, #188	; 0xbc
 802d996:	2100      	movs	r1, #0
 802d998:	4618      	mov	r0, r3
 802d99a:	f011 fb55 	bl	803f048 <memset>
  if(uartHandle->Instance==UART4)
 802d99e:	687b      	ldr	r3, [r7, #4]
 802d9a0:	681b      	ldr	r3, [r3, #0]
 802d9a2:	4ac2      	ldr	r2, [pc, #776]	; (802dcac <HAL_UART_MspInit+0x334>)
 802d9a4:	4293      	cmp	r3, r2
 802d9a6:	d14a      	bne.n	802da3e <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802d9a8:	2302      	movs	r3, #2
 802d9aa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802d9ac:	2300      	movs	r3, #0
 802d9ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802d9b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802d9b6:	4618      	mov	r0, r3
 802d9b8:	f007 f9dc 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 802d9bc:	4603      	mov	r3, r0
 802d9be:	2b00      	cmp	r3, #0
 802d9c0:	d001      	beq.n	802d9c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802d9c2:	f7ff f97f 	bl	802ccc4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802d9c6:	4bba      	ldr	r3, [pc, #744]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802d9c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d9cc:	4ab8      	ldr	r2, [pc, #736]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802d9ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d9d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802d9d6:	4bb6      	ldr	r3, [pc, #728]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802d9d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d9dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802d9e4:	4bb2      	ldr	r3, [pc, #712]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802d9e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d9ea:	4ab1      	ldr	r2, [pc, #708]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802d9ec:	f043 0301 	orr.w	r3, r3, #1
 802d9f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d9f4:	4bae      	ldr	r3, [pc, #696]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802d9f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d9fa:	f003 0301 	and.w	r3, r3, #1
 802d9fe:	62bb      	str	r3, [r7, #40]	; 0x28
 802da00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802da02:	2303      	movs	r3, #3
 802da04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802da08:	2302      	movs	r3, #2
 802da0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802da0e:	2300      	movs	r3, #0
 802da10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802da14:	2300      	movs	r3, #0
 802da16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802da1a:	2308      	movs	r3, #8
 802da1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802da20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802da24:	4619      	mov	r1, r3
 802da26:	48a3      	ldr	r0, [pc, #652]	; (802dcb4 <HAL_UART_MspInit+0x33c>)
 802da28:	f003 fd54 	bl	80314d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802da2c:	2200      	movs	r2, #0
 802da2e:	2100      	movs	r1, #0
 802da30:	2034      	movs	r0, #52	; 0x34
 802da32:	f000 fcfc 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802da36:	2034      	movs	r0, #52	; 0x34
 802da38:	f000 fd13 	bl	802e462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802da3c:	e130      	b.n	802dca0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802da3e:	687b      	ldr	r3, [r7, #4]
 802da40:	681b      	ldr	r3, [r3, #0]
 802da42:	4a9d      	ldr	r2, [pc, #628]	; (802dcb8 <HAL_UART_MspInit+0x340>)
 802da44:	4293      	cmp	r3, r2
 802da46:	d143      	bne.n	802dad0 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802da48:	2302      	movs	r3, #2
 802da4a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802da4c:	2300      	movs	r3, #0
 802da4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802da52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802da56:	4618      	mov	r0, r3
 802da58:	f007 f98c 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 802da5c:	4603      	mov	r3, r0
 802da5e:	2b00      	cmp	r3, #0
 802da60:	d001      	beq.n	802da66 <HAL_UART_MspInit+0xee>
      Error_Handler();
 802da62:	f7ff f92f 	bl	802ccc4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802da66:	4b92      	ldr	r3, [pc, #584]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802da68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802da6c:	4a90      	ldr	r2, [pc, #576]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802da6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802da72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802da76:	4b8e      	ldr	r3, [pc, #568]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802da78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802da7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802da80:	627b      	str	r3, [r7, #36]	; 0x24
 802da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802da84:	4b8a      	ldr	r3, [pc, #552]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802da86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802da8a:	4a89      	ldr	r2, [pc, #548]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802da8c:	f043 0310 	orr.w	r3, r3, #16
 802da90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802da94:	4b86      	ldr	r3, [pc, #536]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802da96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802da9a:	f003 0310 	and.w	r3, r3, #16
 802da9e:	623b      	str	r3, [r7, #32]
 802daa0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802daa2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802daa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802daaa:	2302      	movs	r3, #2
 802daac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802dab0:	2300      	movs	r3, #0
 802dab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802dab6:	2300      	movs	r3, #0
 802dab8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802dabc:	2307      	movs	r3, #7
 802dabe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802dac2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802dac6:	4619      	mov	r1, r3
 802dac8:	487c      	ldr	r0, [pc, #496]	; (802dcbc <HAL_UART_MspInit+0x344>)
 802daca:	f003 fd03 	bl	80314d4 <HAL_GPIO_Init>
}
 802dace:	e0e7      	b.n	802dca0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802dad0:	687b      	ldr	r3, [r7, #4]
 802dad2:	681b      	ldr	r3, [r3, #0]
 802dad4:	4a7a      	ldr	r2, [pc, #488]	; (802dcc0 <HAL_UART_MspInit+0x348>)
 802dad6:	4293      	cmp	r3, r2
 802dad8:	d14a      	bne.n	802db70 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802dada:	2302      	movs	r3, #2
 802dadc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802dade:	2300      	movs	r3, #0
 802dae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802dae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802dae8:	4618      	mov	r0, r3
 802daea:	f007 f943 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 802daee:	4603      	mov	r3, r0
 802daf0:	2b00      	cmp	r3, #0
 802daf2:	d001      	beq.n	802daf8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 802daf4:	f7ff f8e6 	bl	802ccc4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802daf8:	4b6d      	ldr	r3, [pc, #436]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dafa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dafe:	4a6c      	ldr	r2, [pc, #432]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802db00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802db04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802db08:	4b69      	ldr	r3, [pc, #420]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802db0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802db0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802db12:	61fb      	str	r3, [r7, #28]
 802db14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802db16:	4b66      	ldr	r3, [pc, #408]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802db18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802db1c:	4a64      	ldr	r2, [pc, #400]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802db1e:	f043 0310 	orr.w	r3, r3, #16
 802db22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802db26:	4b62      	ldr	r3, [pc, #392]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802db28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802db2c:	f003 0310 	and.w	r3, r3, #16
 802db30:	61bb      	str	r3, [r7, #24]
 802db32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802db34:	2303      	movs	r3, #3
 802db36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802db3a:	2302      	movs	r3, #2
 802db3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db40:	2300      	movs	r3, #0
 802db42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802db46:	2300      	movs	r3, #0
 802db48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802db4c:	2308      	movs	r3, #8
 802db4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802db52:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802db56:	4619      	mov	r1, r3
 802db58:	4858      	ldr	r0, [pc, #352]	; (802dcbc <HAL_UART_MspInit+0x344>)
 802db5a:	f003 fcbb 	bl	80314d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802db5e:	2200      	movs	r2, #0
 802db60:	2102      	movs	r1, #2
 802db62:	2053      	movs	r0, #83	; 0x53
 802db64:	f000 fc63 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802db68:	2053      	movs	r0, #83	; 0x53
 802db6a:	f000 fc7a 	bl	802e462 <HAL_NVIC_EnableIRQ>
}
 802db6e:	e097      	b.n	802dca0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802db70:	687b      	ldr	r3, [r7, #4]
 802db72:	681b      	ldr	r3, [r3, #0]
 802db74:	4a53      	ldr	r2, [pc, #332]	; (802dcc4 <HAL_UART_MspInit+0x34c>)
 802db76:	4293      	cmp	r3, r2
 802db78:	d142      	bne.n	802dc00 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802db7a:	2302      	movs	r3, #2
 802db7c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802db7e:	2300      	movs	r3, #0
 802db80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802db84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802db88:	4618      	mov	r0, r3
 802db8a:	f007 f8f3 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 802db8e:	4603      	mov	r3, r0
 802db90:	2b00      	cmp	r3, #0
 802db92:	d001      	beq.n	802db98 <HAL_UART_MspInit+0x220>
      Error_Handler();
 802db94:	f7ff f896 	bl	802ccc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802db98:	4b45      	ldr	r3, [pc, #276]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802db9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802db9e:	4a44      	ldr	r2, [pc, #272]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802dba4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802dba8:	4b41      	ldr	r3, [pc, #260]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dbaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dbae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802dbb2:	617b      	str	r3, [r7, #20]
 802dbb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802dbb6:	4b3e      	ldr	r3, [pc, #248]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dbb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802dbbc:	4a3c      	ldr	r2, [pc, #240]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dbbe:	f043 0301 	orr.w	r3, r3, #1
 802dbc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802dbc6:	4b3a      	ldr	r3, [pc, #232]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dbc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802dbcc:	f003 0301 	and.w	r3, r3, #1
 802dbd0:	613b      	str	r3, [r7, #16]
 802dbd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802dbd4:	230c      	movs	r3, #12
 802dbd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802dbda:	2302      	movs	r3, #2
 802dbdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802dbe0:	2300      	movs	r3, #0
 802dbe2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802dbe6:	2300      	movs	r3, #0
 802dbe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802dbec:	2307      	movs	r3, #7
 802dbee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802dbf2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802dbf6:	4619      	mov	r1, r3
 802dbf8:	482e      	ldr	r0, [pc, #184]	; (802dcb4 <HAL_UART_MspInit+0x33c>)
 802dbfa:	f003 fc6b 	bl	80314d4 <HAL_GPIO_Init>
}
 802dbfe:	e04f      	b.n	802dca0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802dc00:	687b      	ldr	r3, [r7, #4]
 802dc02:	681b      	ldr	r3, [r3, #0]
 802dc04:	4a30      	ldr	r2, [pc, #192]	; (802dcc8 <HAL_UART_MspInit+0x350>)
 802dc06:	4293      	cmp	r3, r2
 802dc08:	d14a      	bne.n	802dca0 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802dc0a:	2302      	movs	r3, #2
 802dc0c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802dc0e:	2300      	movs	r3, #0
 802dc10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802dc14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802dc18:	4618      	mov	r0, r3
 802dc1a:	f007 f8ab 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 802dc1e:	4603      	mov	r3, r0
 802dc20:	2b00      	cmp	r3, #0
 802dc22:	d001      	beq.n	802dc28 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802dc24:	f7ff f84e 	bl	802ccc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802dc28:	4b21      	ldr	r3, [pc, #132]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dc2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dc2e:	4a20      	ldr	r2, [pc, #128]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dc30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802dc34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802dc38:	4b1d      	ldr	r3, [pc, #116]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dc3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dc3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802dc42:	60fb      	str	r3, [r7, #12]
 802dc44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802dc46:	4b1a      	ldr	r3, [pc, #104]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dc48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802dc4c:	4a18      	ldr	r2, [pc, #96]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dc4e:	f043 0308 	orr.w	r3, r3, #8
 802dc52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802dc56:	4b16      	ldr	r3, [pc, #88]	; (802dcb0 <HAL_UART_MspInit+0x338>)
 802dc58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802dc5c:	f003 0308 	and.w	r3, r3, #8
 802dc60:	60bb      	str	r3, [r7, #8]
 802dc62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802dc64:	f44f 7340 	mov.w	r3, #768	; 0x300
 802dc68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802dc6c:	2302      	movs	r3, #2
 802dc6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802dc72:	2300      	movs	r3, #0
 802dc74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802dc78:	2300      	movs	r3, #0
 802dc7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802dc7e:	2307      	movs	r3, #7
 802dc80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802dc84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802dc88:	4619      	mov	r1, r3
 802dc8a:	4810      	ldr	r0, [pc, #64]	; (802dccc <HAL_UART_MspInit+0x354>)
 802dc8c:	f003 fc22 	bl	80314d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802dc90:	2200      	movs	r2, #0
 802dc92:	2100      	movs	r1, #0
 802dc94:	2027      	movs	r0, #39	; 0x27
 802dc96:	f000 fbca 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802dc9a:	2027      	movs	r0, #39	; 0x27
 802dc9c:	f000 fbe1 	bl	802e462 <HAL_NVIC_EnableIRQ>
}
 802dca0:	bf00      	nop
 802dca2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802dca6:	46bd      	mov	sp, r7
 802dca8:	bd80      	pop	{r7, pc}
 802dcaa:	bf00      	nop
 802dcac:	40004c00 	.word	0x40004c00
 802dcb0:	58024400 	.word	0x58024400
 802dcb4:	58020000 	.word	0x58020000
 802dcb8:	40007800 	.word	0x40007800
 802dcbc:	58021000 	.word	0x58021000
 802dcc0:	40007c00 	.word	0x40007c00
 802dcc4:	40004400 	.word	0x40004400
 802dcc8:	40004800 	.word	0x40004800
 802dccc:	58020c00 	.word	0x58020c00

0802dcd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802dcd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 802dd08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802dcd4:	f7ff fae2 	bl	802d29c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802dcd8:	480c      	ldr	r0, [pc, #48]	; (802dd0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802dcda:	490d      	ldr	r1, [pc, #52]	; (802dd10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802dcdc:	4a0d      	ldr	r2, [pc, #52]	; (802dd14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802dcde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802dce0:	e002      	b.n	802dce8 <LoopCopyDataInit>

0802dce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802dce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802dce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802dce6:	3304      	adds	r3, #4

0802dce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802dce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802dcea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802dcec:	d3f9      	bcc.n	802dce2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802dcee:	4a0a      	ldr	r2, [pc, #40]	; (802dd18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802dcf0:	4c0a      	ldr	r4, [pc, #40]	; (802dd1c <LoopFillZerobss+0x22>)
  movs r3, #0
 802dcf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 802dcf4:	e001      	b.n	802dcfa <LoopFillZerobss>

0802dcf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802dcf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802dcf8:	3204      	adds	r2, #4

0802dcfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802dcfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802dcfc:	d3fb      	bcc.n	802dcf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802dcfe:	f011 f947 	bl	803ef90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802dd02:	f7fe fe3d 	bl	802c980 <main>
  bx  lr
 802dd06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802dd08:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802dd0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802dd10:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802dd14:	0805b39c 	.word	0x0805b39c
  ldr r2, =_sbss
 802dd18:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802dd1c:	240037f0 	.word	0x240037f0

0802dd20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802dd20:	e7fe      	b.n	802dd20 <ADC3_IRQHandler>
	...

0802dd24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802dd24:	b580      	push	{r7, lr}
 802dd26:	b082      	sub	sp, #8
 802dd28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802dd2a:	2003      	movs	r0, #3
 802dd2c:	f000 fb74 	bl	802e418 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802dd30:	f006 fe4a 	bl	80349c8 <HAL_RCC_GetSysClockFreq>
 802dd34:	4602      	mov	r2, r0
 802dd36:	4b15      	ldr	r3, [pc, #84]	; (802dd8c <HAL_Init+0x68>)
 802dd38:	699b      	ldr	r3, [r3, #24]
 802dd3a:	0a1b      	lsrs	r3, r3, #8
 802dd3c:	f003 030f 	and.w	r3, r3, #15
 802dd40:	4913      	ldr	r1, [pc, #76]	; (802dd90 <HAL_Init+0x6c>)
 802dd42:	5ccb      	ldrb	r3, [r1, r3]
 802dd44:	f003 031f 	and.w	r3, r3, #31
 802dd48:	fa22 f303 	lsr.w	r3, r2, r3
 802dd4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802dd4e:	4b0f      	ldr	r3, [pc, #60]	; (802dd8c <HAL_Init+0x68>)
 802dd50:	699b      	ldr	r3, [r3, #24]
 802dd52:	f003 030f 	and.w	r3, r3, #15
 802dd56:	4a0e      	ldr	r2, [pc, #56]	; (802dd90 <HAL_Init+0x6c>)
 802dd58:	5cd3      	ldrb	r3, [r2, r3]
 802dd5a:	f003 031f 	and.w	r3, r3, #31
 802dd5e:	687a      	ldr	r2, [r7, #4]
 802dd60:	fa22 f303 	lsr.w	r3, r2, r3
 802dd64:	4a0b      	ldr	r2, [pc, #44]	; (802dd94 <HAL_Init+0x70>)
 802dd66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802dd68:	4a0b      	ldr	r2, [pc, #44]	; (802dd98 <HAL_Init+0x74>)
 802dd6a:	687b      	ldr	r3, [r7, #4]
 802dd6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802dd6e:	200f      	movs	r0, #15
 802dd70:	f000 f814 	bl	802dd9c <HAL_InitTick>
 802dd74:	4603      	mov	r3, r0
 802dd76:	2b00      	cmp	r3, #0
 802dd78:	d001      	beq.n	802dd7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802dd7a:	2301      	movs	r3, #1
 802dd7c:	e002      	b.n	802dd84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802dd7e:	f7ff f8e3 	bl	802cf48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802dd82:	2300      	movs	r3, #0
}
 802dd84:	4618      	mov	r0, r3
 802dd86:	3708      	adds	r7, #8
 802dd88:	46bd      	mov	sp, r7
 802dd8a:	bd80      	pop	{r7, pc}
 802dd8c:	58024400 	.word	0x58024400
 802dd90:	0805b270 	.word	0x0805b270
 802dd94:	24000008 	.word	0x24000008
 802dd98:	24000004 	.word	0x24000004

0802dd9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802dd9c:	b580      	push	{r7, lr}
 802dd9e:	b082      	sub	sp, #8
 802dda0:	af00      	add	r7, sp, #0
 802dda2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802dda4:	4b15      	ldr	r3, [pc, #84]	; (802ddfc <HAL_InitTick+0x60>)
 802dda6:	781b      	ldrb	r3, [r3, #0]
 802dda8:	2b00      	cmp	r3, #0
 802ddaa:	d101      	bne.n	802ddb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802ddac:	2301      	movs	r3, #1
 802ddae:	e021      	b.n	802ddf4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802ddb0:	4b13      	ldr	r3, [pc, #76]	; (802de00 <HAL_InitTick+0x64>)
 802ddb2:	681a      	ldr	r2, [r3, #0]
 802ddb4:	4b11      	ldr	r3, [pc, #68]	; (802ddfc <HAL_InitTick+0x60>)
 802ddb6:	781b      	ldrb	r3, [r3, #0]
 802ddb8:	4619      	mov	r1, r3
 802ddba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802ddbe:	fbb3 f3f1 	udiv	r3, r3, r1
 802ddc2:	fbb2 f3f3 	udiv	r3, r2, r3
 802ddc6:	4618      	mov	r0, r3
 802ddc8:	f000 fb59 	bl	802e47e <HAL_SYSTICK_Config>
 802ddcc:	4603      	mov	r3, r0
 802ddce:	2b00      	cmp	r3, #0
 802ddd0:	d001      	beq.n	802ddd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802ddd2:	2301      	movs	r3, #1
 802ddd4:	e00e      	b.n	802ddf4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802ddd6:	687b      	ldr	r3, [r7, #4]
 802ddd8:	2b0f      	cmp	r3, #15
 802ddda:	d80a      	bhi.n	802ddf2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802dddc:	2200      	movs	r2, #0
 802ddde:	6879      	ldr	r1, [r7, #4]
 802dde0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802dde4:	f000 fb23 	bl	802e42e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802dde8:	4a06      	ldr	r2, [pc, #24]	; (802de04 <HAL_InitTick+0x68>)
 802ddea:	687b      	ldr	r3, [r7, #4]
 802ddec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802ddee:	2300      	movs	r3, #0
 802ddf0:	e000      	b.n	802ddf4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802ddf2:	2301      	movs	r3, #1
}
 802ddf4:	4618      	mov	r0, r3
 802ddf6:	3708      	adds	r7, #8
 802ddf8:	46bd      	mov	sp, r7
 802ddfa:	bd80      	pop	{r7, pc}
 802ddfc:	24000010 	.word	0x24000010
 802de00:	24000004 	.word	0x24000004
 802de04:	2400000c 	.word	0x2400000c

0802de08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802de08:	b480      	push	{r7}
 802de0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802de0c:	4b06      	ldr	r3, [pc, #24]	; (802de28 <HAL_IncTick+0x20>)
 802de0e:	781b      	ldrb	r3, [r3, #0]
 802de10:	461a      	mov	r2, r3
 802de12:	4b06      	ldr	r3, [pc, #24]	; (802de2c <HAL_IncTick+0x24>)
 802de14:	681b      	ldr	r3, [r3, #0]
 802de16:	4413      	add	r3, r2
 802de18:	4a04      	ldr	r2, [pc, #16]	; (802de2c <HAL_IncTick+0x24>)
 802de1a:	6013      	str	r3, [r2, #0]
}
 802de1c:	bf00      	nop
 802de1e:	46bd      	mov	sp, r7
 802de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 802de24:	4770      	bx	lr
 802de26:	bf00      	nop
 802de28:	24000010 	.word	0x24000010
 802de2c:	24001bcc 	.word	0x24001bcc

0802de30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802de30:	b480      	push	{r7}
 802de32:	af00      	add	r7, sp, #0
  return uwTick;
 802de34:	4b03      	ldr	r3, [pc, #12]	; (802de44 <HAL_GetTick+0x14>)
 802de36:	681b      	ldr	r3, [r3, #0]
}
 802de38:	4618      	mov	r0, r3
 802de3a:	46bd      	mov	sp, r7
 802de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802de40:	4770      	bx	lr
 802de42:	bf00      	nop
 802de44:	24001bcc 	.word	0x24001bcc

0802de48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802de48:	b580      	push	{r7, lr}
 802de4a:	b084      	sub	sp, #16
 802de4c:	af00      	add	r7, sp, #0
 802de4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802de50:	f7ff ffee 	bl	802de30 <HAL_GetTick>
 802de54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802de56:	687b      	ldr	r3, [r7, #4]
 802de58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802de5a:	68fb      	ldr	r3, [r7, #12]
 802de5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802de60:	d005      	beq.n	802de6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802de62:	4b0a      	ldr	r3, [pc, #40]	; (802de8c <HAL_Delay+0x44>)
 802de64:	781b      	ldrb	r3, [r3, #0]
 802de66:	461a      	mov	r2, r3
 802de68:	68fb      	ldr	r3, [r7, #12]
 802de6a:	4413      	add	r3, r2
 802de6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802de6e:	bf00      	nop
 802de70:	f7ff ffde 	bl	802de30 <HAL_GetTick>
 802de74:	4602      	mov	r2, r0
 802de76:	68bb      	ldr	r3, [r7, #8]
 802de78:	1ad3      	subs	r3, r2, r3
 802de7a:	68fa      	ldr	r2, [r7, #12]
 802de7c:	429a      	cmp	r2, r3
 802de7e:	d8f7      	bhi.n	802de70 <HAL_Delay+0x28>
  {
  }
}
 802de80:	bf00      	nop
 802de82:	bf00      	nop
 802de84:	3710      	adds	r7, #16
 802de86:	46bd      	mov	sp, r7
 802de88:	bd80      	pop	{r7, pc}
 802de8a:	bf00      	nop
 802de8c:	24000010 	.word	0x24000010

0802de90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802de90:	b480      	push	{r7}
 802de92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802de94:	4b03      	ldr	r3, [pc, #12]	; (802dea4 <HAL_GetREVID+0x14>)
 802de96:	681b      	ldr	r3, [r3, #0]
 802de98:	0c1b      	lsrs	r3, r3, #16
}
 802de9a:	4618      	mov	r0, r3
 802de9c:	46bd      	mov	sp, r7
 802de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dea2:	4770      	bx	lr
 802dea4:	5c001000 	.word	0x5c001000

0802dea8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802dea8:	b580      	push	{r7, lr}
 802deaa:	b088      	sub	sp, #32
 802deac:	af00      	add	r7, sp, #0
 802deae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802deb0:	2300      	movs	r3, #0
 802deb2:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802deb4:	2300      	movs	r3, #0
 802deb6:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802deb8:	687b      	ldr	r3, [r7, #4]
 802deba:	2b00      	cmp	r3, #0
 802debc:	d102      	bne.n	802dec4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802debe:	2301      	movs	r3, #1
 802dec0:	77fb      	strb	r3, [r7, #31]
 802dec2:	e10e      	b.n	802e0e2 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802dec4:	687b      	ldr	r3, [r7, #4]
 802dec6:	681b      	ldr	r3, [r3, #0]
 802dec8:	681b      	ldr	r3, [r3, #0]
 802deca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802dece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ded2:	d102      	bne.n	802deda <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802ded4:	2301      	movs	r3, #1
 802ded6:	77fb      	strb	r3, [r7, #31]
 802ded8:	e103      	b.n	802e0e2 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802deda:	687b      	ldr	r3, [r7, #4]
 802dedc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802dee0:	b2db      	uxtb	r3, r3
 802dee2:	2b00      	cmp	r3, #0
 802dee4:	d109      	bne.n	802defa <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802dee6:	687b      	ldr	r3, [r7, #4]
 802dee8:	2200      	movs	r2, #0
 802deea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802deee:	687b      	ldr	r3, [r7, #4]
 802def0:	2200      	movs	r2, #0
 802def2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802def4:	6878      	ldr	r0, [r7, #4]
 802def6:	f7fe fac9 	bl	802c48c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802defa:	687b      	ldr	r3, [r7, #4]
 802defc:	681b      	ldr	r3, [r3, #0]
 802defe:	681b      	ldr	r3, [r3, #0]
 802df00:	f003 0304 	and.w	r3, r3, #4
 802df04:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802df06:	687b      	ldr	r3, [r7, #4]
 802df08:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802df0a:	687b      	ldr	r3, [r7, #4]
 802df0c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802df0e:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802df10:	687b      	ldr	r3, [r7, #4]
 802df12:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802df14:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802df16:	687b      	ldr	r3, [r7, #4]
 802df18:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802df1a:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802df1c:	687b      	ldr	r3, [r7, #4]
 802df1e:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802df20:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802df22:	687b      	ldr	r3, [r7, #4]
 802df24:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802df26:	4313      	orrs	r3, r2
 802df28:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802df2a:	687b      	ldr	r3, [r7, #4]
 802df2c:	681b      	ldr	r3, [r3, #0]
 802df2e:	681a      	ldr	r2, [r3, #0]
 802df30:	4b6e      	ldr	r3, [pc, #440]	; (802e0ec <HAL_COMP_Init+0x244>)
 802df32:	4013      	ands	r3, r2
 802df34:	687a      	ldr	r2, [r7, #4]
 802df36:	6812      	ldr	r2, [r2, #0]
 802df38:	6979      	ldr	r1, [r7, #20]
 802df3a:	430b      	orrs	r3, r1
 802df3c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802df3e:	687b      	ldr	r3, [r7, #4]
 802df40:	685b      	ldr	r3, [r3, #4]
 802df42:	2b10      	cmp	r3, #16
 802df44:	d108      	bne.n	802df58 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802df46:	687b      	ldr	r3, [r7, #4]
 802df48:	681b      	ldr	r3, [r3, #0]
 802df4a:	681a      	ldr	r2, [r3, #0]
 802df4c:	687b      	ldr	r3, [r7, #4]
 802df4e:	681b      	ldr	r3, [r3, #0]
 802df50:	f042 0210 	orr.w	r2, r2, #16
 802df54:	601a      	str	r2, [r3, #0]
 802df56:	e007      	b.n	802df68 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802df58:	687b      	ldr	r3, [r7, #4]
 802df5a:	681b      	ldr	r3, [r3, #0]
 802df5c:	681a      	ldr	r2, [r3, #0]
 802df5e:	687b      	ldr	r3, [r7, #4]
 802df60:	681b      	ldr	r3, [r3, #0]
 802df62:	f022 0210 	bic.w	r2, r2, #16
 802df66:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802df68:	687b      	ldr	r3, [r7, #4]
 802df6a:	681b      	ldr	r3, [r3, #0]
 802df6c:	681b      	ldr	r3, [r3, #0]
 802df6e:	f003 0304 	and.w	r3, r3, #4
 802df72:	2b00      	cmp	r3, #0
 802df74:	d016      	beq.n	802dfa4 <HAL_COMP_Init+0xfc>
 802df76:	69bb      	ldr	r3, [r7, #24]
 802df78:	2b00      	cmp	r3, #0
 802df7a:	d013      	beq.n	802dfa4 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802df7c:	4b5c      	ldr	r3, [pc, #368]	; (802e0f0 <HAL_COMP_Init+0x248>)
 802df7e:	681b      	ldr	r3, [r3, #0]
 802df80:	099b      	lsrs	r3, r3, #6
 802df82:	4a5c      	ldr	r2, [pc, #368]	; (802e0f4 <HAL_COMP_Init+0x24c>)
 802df84:	fba2 2303 	umull	r2, r3, r2, r3
 802df88:	099b      	lsrs	r3, r3, #6
 802df8a:	1c5a      	adds	r2, r3, #1
 802df8c:	4613      	mov	r3, r2
 802df8e:	009b      	lsls	r3, r3, #2
 802df90:	4413      	add	r3, r2
 802df92:	009b      	lsls	r3, r3, #2
 802df94:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802df96:	e002      	b.n	802df9e <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802df98:	68fb      	ldr	r3, [r7, #12]
 802df9a:	3b01      	subs	r3, #1
 802df9c:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802df9e:	68fb      	ldr	r3, [r7, #12]
 802dfa0:	2b00      	cmp	r3, #0
 802dfa2:	d1f9      	bne.n	802df98 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802dfa4:	687b      	ldr	r3, [r7, #4]
 802dfa6:	681b      	ldr	r3, [r3, #0]
 802dfa8:	4a53      	ldr	r2, [pc, #332]	; (802e0f8 <HAL_COMP_Init+0x250>)
 802dfaa:	4293      	cmp	r3, r2
 802dfac:	d102      	bne.n	802dfb4 <HAL_COMP_Init+0x10c>
 802dfae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802dfb2:	e001      	b.n	802dfb8 <HAL_COMP_Init+0x110>
 802dfb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802dfb8:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802dfba:	687b      	ldr	r3, [r7, #4]
 802dfbc:	6a1b      	ldr	r3, [r3, #32]
 802dfbe:	f003 0303 	and.w	r3, r3, #3
 802dfc2:	2b00      	cmp	r3, #0
 802dfc4:	d06d      	beq.n	802e0a2 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802dfc6:	687b      	ldr	r3, [r7, #4]
 802dfc8:	6a1b      	ldr	r3, [r3, #32]
 802dfca:	f003 0310 	and.w	r3, r3, #16
 802dfce:	2b00      	cmp	r3, #0
 802dfd0:	d008      	beq.n	802dfe4 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802dfd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802dfd6:	681a      	ldr	r2, [r3, #0]
 802dfd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802dfdc:	693b      	ldr	r3, [r7, #16]
 802dfde:	4313      	orrs	r3, r2
 802dfe0:	600b      	str	r3, [r1, #0]
 802dfe2:	e008      	b.n	802dff6 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802dfe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802dfe8:	681a      	ldr	r2, [r3, #0]
 802dfea:	693b      	ldr	r3, [r7, #16]
 802dfec:	43db      	mvns	r3, r3
 802dfee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802dff2:	4013      	ands	r3, r2
 802dff4:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802dff6:	687b      	ldr	r3, [r7, #4]
 802dff8:	6a1b      	ldr	r3, [r3, #32]
 802dffa:	f003 0320 	and.w	r3, r3, #32
 802dffe:	2b00      	cmp	r3, #0
 802e000:	d008      	beq.n	802e014 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802e002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e006:	685a      	ldr	r2, [r3, #4]
 802e008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e00c:	693b      	ldr	r3, [r7, #16]
 802e00e:	4313      	orrs	r3, r2
 802e010:	604b      	str	r3, [r1, #4]
 802e012:	e008      	b.n	802e026 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802e014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e018:	685a      	ldr	r2, [r3, #4]
 802e01a:	693b      	ldr	r3, [r7, #16]
 802e01c:	43db      	mvns	r3, r3
 802e01e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e022:	4013      	ands	r3, r2
 802e024:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802e026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e02a:	693b      	ldr	r3, [r7, #16]
 802e02c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802e030:	687b      	ldr	r3, [r7, #4]
 802e032:	6a1b      	ldr	r3, [r3, #32]
 802e034:	f003 0302 	and.w	r3, r3, #2
 802e038:	2b00      	cmp	r3, #0
 802e03a:	d00a      	beq.n	802e052 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802e03c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e040:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e048:	693b      	ldr	r3, [r7, #16]
 802e04a:	4313      	orrs	r3, r2
 802e04c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802e050:	e00a      	b.n	802e068 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802e052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e056:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e05a:	693b      	ldr	r3, [r7, #16]
 802e05c:	43db      	mvns	r3, r3
 802e05e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e062:	4013      	ands	r3, r2
 802e064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802e068:	687b      	ldr	r3, [r7, #4]
 802e06a:	6a1b      	ldr	r3, [r3, #32]
 802e06c:	f003 0301 	and.w	r3, r3, #1
 802e070:	2b00      	cmp	r3, #0
 802e072:	d00a      	beq.n	802e08a <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802e074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e078:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802e07c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e080:	693b      	ldr	r3, [r7, #16]
 802e082:	4313      	orrs	r3, r2
 802e084:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802e088:	e021      	b.n	802e0ce <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802e08a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e08e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802e092:	693b      	ldr	r3, [r7, #16]
 802e094:	43db      	mvns	r3, r3
 802e096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e09a:	4013      	ands	r3, r2
 802e09c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802e0a0:	e015      	b.n	802e0ce <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802e0a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e0a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e0aa:	693b      	ldr	r3, [r7, #16]
 802e0ac:	43db      	mvns	r3, r3
 802e0ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e0b2:	4013      	ands	r3, r2
 802e0b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802e0b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e0bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802e0c0:	693b      	ldr	r3, [r7, #16]
 802e0c2:	43db      	mvns	r3, r3
 802e0c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e0c8:	4013      	ands	r3, r2
 802e0ca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802e0ce:	687b      	ldr	r3, [r7, #4]
 802e0d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802e0d4:	b2db      	uxtb	r3, r3
 802e0d6:	2b00      	cmp	r3, #0
 802e0d8:	d103      	bne.n	802e0e2 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802e0da:	687b      	ldr	r3, [r7, #4]
 802e0dc:	2201      	movs	r2, #1
 802e0de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802e0e2:	7ffb      	ldrb	r3, [r7, #31]
}
 802e0e4:	4618      	mov	r0, r3
 802e0e6:	3720      	adds	r7, #32
 802e0e8:	46bd      	mov	sp, r7
 802e0ea:	bd80      	pop	{r7, pc}
 802e0ec:	f0e8cce1 	.word	0xf0e8cce1
 802e0f0:	24000004 	.word	0x24000004
 802e0f4:	053e2d63 	.word	0x053e2d63
 802e0f8:	5800380c 	.word	0x5800380c

0802e0fc <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802e0fc:	b480      	push	{r7}
 802e0fe:	b085      	sub	sp, #20
 802e100:	af00      	add	r7, sp, #0
 802e102:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802e104:	2300      	movs	r3, #0
 802e106:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802e108:	2300      	movs	r3, #0
 802e10a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802e10c:	687b      	ldr	r3, [r7, #4]
 802e10e:	2b00      	cmp	r3, #0
 802e110:	d102      	bne.n	802e118 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802e112:	2301      	movs	r3, #1
 802e114:	73fb      	strb	r3, [r7, #15]
 802e116:	e030      	b.n	802e17a <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802e118:	687b      	ldr	r3, [r7, #4]
 802e11a:	681b      	ldr	r3, [r3, #0]
 802e11c:	681b      	ldr	r3, [r3, #0]
 802e11e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e126:	d102      	bne.n	802e12e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802e128:	2301      	movs	r3, #1
 802e12a:	73fb      	strb	r3, [r7, #15]
 802e12c:	e025      	b.n	802e17a <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802e12e:	687b      	ldr	r3, [r7, #4]
 802e130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802e134:	b2db      	uxtb	r3, r3
 802e136:	2b01      	cmp	r3, #1
 802e138:	d11d      	bne.n	802e176 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802e13a:	687b      	ldr	r3, [r7, #4]
 802e13c:	681b      	ldr	r3, [r3, #0]
 802e13e:	681a      	ldr	r2, [r3, #0]
 802e140:	687b      	ldr	r3, [r7, #4]
 802e142:	681b      	ldr	r3, [r3, #0]
 802e144:	f042 0201 	orr.w	r2, r2, #1
 802e148:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802e14a:	687b      	ldr	r3, [r7, #4]
 802e14c:	2202      	movs	r2, #2
 802e14e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802e152:	4b0d      	ldr	r3, [pc, #52]	; (802e188 <HAL_COMP_Start+0x8c>)
 802e154:	681b      	ldr	r3, [r3, #0]
 802e156:	099b      	lsrs	r3, r3, #6
 802e158:	4a0c      	ldr	r2, [pc, #48]	; (802e18c <HAL_COMP_Start+0x90>)
 802e15a:	fba2 2303 	umull	r2, r3, r2, r3
 802e15e:	099b      	lsrs	r3, r3, #6
 802e160:	3301      	adds	r3, #1
 802e162:	00db      	lsls	r3, r3, #3
 802e164:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802e166:	e002      	b.n	802e16e <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802e168:	68bb      	ldr	r3, [r7, #8]
 802e16a:	3b01      	subs	r3, #1
 802e16c:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802e16e:	68bb      	ldr	r3, [r7, #8]
 802e170:	2b00      	cmp	r3, #0
 802e172:	d1f9      	bne.n	802e168 <HAL_COMP_Start+0x6c>
 802e174:	e001      	b.n	802e17a <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802e176:	2301      	movs	r3, #1
 802e178:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802e17a:	7bfb      	ldrb	r3, [r7, #15]
}
 802e17c:	4618      	mov	r0, r3
 802e17e:	3714      	adds	r7, #20
 802e180:	46bd      	mov	sp, r7
 802e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e186:	4770      	bx	lr
 802e188:	24000004 	.word	0x24000004
 802e18c:	053e2d63 	.word	0x053e2d63

0802e190 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802e190:	b580      	push	{r7, lr}
 802e192:	b084      	sub	sp, #16
 802e194:	af00      	add	r7, sp, #0
 802e196:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802e198:	687b      	ldr	r3, [r7, #4]
 802e19a:	681b      	ldr	r3, [r3, #0]
 802e19c:	4a33      	ldr	r2, [pc, #204]	; (802e26c <HAL_COMP_IRQHandler+0xdc>)
 802e19e:	4293      	cmp	r3, r2
 802e1a0:	d102      	bne.n	802e1a8 <HAL_COMP_IRQHandler+0x18>
 802e1a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802e1a6:	e001      	b.n	802e1ac <HAL_COMP_IRQHandler+0x1c>
 802e1a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802e1ac:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802e1ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e1b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802e1b6:	68fb      	ldr	r3, [r7, #12]
 802e1b8:	4013      	ands	r3, r2
 802e1ba:	2b00      	cmp	r3, #0
 802e1bc:	d014      	beq.n	802e1e8 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802e1be:	4b2c      	ldr	r3, [pc, #176]	; (802e270 <HAL_COMP_IRQHandler+0xe0>)
 802e1c0:	681b      	ldr	r3, [r3, #0]
 802e1c2:	f003 0310 	and.w	r3, r3, #16
 802e1c6:	2b00      	cmp	r3, #0
 802e1c8:	d006      	beq.n	802e1d8 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802e1ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e1ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802e1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802e1d6:	e004      	b.n	802e1e2 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802e1d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e1dc:	68fb      	ldr	r3, [r7, #12]
 802e1de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802e1e2:	6878      	ldr	r0, [r7, #4]
 802e1e4:	f7fe fcfc 	bl	802cbe0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802e1e8:	687b      	ldr	r3, [r7, #4]
 802e1ea:	681b      	ldr	r3, [r3, #0]
 802e1ec:	681b      	ldr	r3, [r3, #0]
 802e1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e1f2:	2b40      	cmp	r3, #64	; 0x40
 802e1f4:	d136      	bne.n	802e264 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802e1f6:	4b1f      	ldr	r3, [pc, #124]	; (802e274 <HAL_COMP_IRQHandler+0xe4>)
 802e1f8:	681b      	ldr	r3, [r3, #0]
 802e1fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802e1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802e202:	d101      	bne.n	802e208 <HAL_COMP_IRQHandler+0x78>
 802e204:	2301      	movs	r3, #1
 802e206:	e000      	b.n	802e20a <HAL_COMP_IRQHandler+0x7a>
 802e208:	2300      	movs	r3, #0
 802e20a:	2b00      	cmp	r3, #0
 802e20c:	d00b      	beq.n	802e226 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802e20e:	4b19      	ldr	r3, [pc, #100]	; (802e274 <HAL_COMP_IRQHandler+0xe4>)
 802e210:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802e214:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802e216:	687b      	ldr	r3, [r7, #4]
 802e218:	681b      	ldr	r3, [r3, #0]
 802e21a:	681a      	ldr	r2, [r3, #0]
 802e21c:	687b      	ldr	r3, [r7, #4]
 802e21e:	681b      	ldr	r3, [r3, #0]
 802e220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802e224:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802e226:	4b13      	ldr	r3, [pc, #76]	; (802e274 <HAL_COMP_IRQHandler+0xe4>)
 802e228:	681b      	ldr	r3, [r3, #0]
 802e22a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e22e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802e232:	d101      	bne.n	802e238 <HAL_COMP_IRQHandler+0xa8>
 802e234:	2301      	movs	r3, #1
 802e236:	e000      	b.n	802e23a <HAL_COMP_IRQHandler+0xaa>
 802e238:	2300      	movs	r3, #0
 802e23a:	2b00      	cmp	r3, #0
 802e23c:	d00b      	beq.n	802e256 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802e23e:	4b0d      	ldr	r3, [pc, #52]	; (802e274 <HAL_COMP_IRQHandler+0xe4>)
 802e240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802e244:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802e246:	687b      	ldr	r3, [r7, #4]
 802e248:	681b      	ldr	r3, [r3, #0]
 802e24a:	681a      	ldr	r2, [r3, #0]
 802e24c:	687b      	ldr	r3, [r7, #4]
 802e24e:	681b      	ldr	r3, [r3, #0]
 802e250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802e254:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802e256:	687b      	ldr	r3, [r7, #4]
 802e258:	2201      	movs	r2, #1
 802e25a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802e25e:	6878      	ldr	r0, [r7, #4]
 802e260:	f7fe fcbe 	bl	802cbe0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802e264:	bf00      	nop
 802e266:	3710      	adds	r7, #16
 802e268:	46bd      	mov	sp, r7
 802e26a:	bd80      	pop	{r7, pc}
 802e26c:	5800380c 	.word	0x5800380c
 802e270:	58003810 	.word	0x58003810
 802e274:	58003800 	.word	0x58003800

0802e278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802e278:	b480      	push	{r7}
 802e27a:	b085      	sub	sp, #20
 802e27c:	af00      	add	r7, sp, #0
 802e27e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802e280:	687b      	ldr	r3, [r7, #4]
 802e282:	f003 0307 	and.w	r3, r3, #7
 802e286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802e288:	4b0b      	ldr	r3, [pc, #44]	; (802e2b8 <__NVIC_SetPriorityGrouping+0x40>)
 802e28a:	68db      	ldr	r3, [r3, #12]
 802e28c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802e28e:	68ba      	ldr	r2, [r7, #8]
 802e290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802e294:	4013      	ands	r3, r2
 802e296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802e298:	68fb      	ldr	r3, [r7, #12]
 802e29a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802e29c:	68bb      	ldr	r3, [r7, #8]
 802e29e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802e2a0:	4b06      	ldr	r3, [pc, #24]	; (802e2bc <__NVIC_SetPriorityGrouping+0x44>)
 802e2a2:	4313      	orrs	r3, r2
 802e2a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802e2a6:	4a04      	ldr	r2, [pc, #16]	; (802e2b8 <__NVIC_SetPriorityGrouping+0x40>)
 802e2a8:	68bb      	ldr	r3, [r7, #8]
 802e2aa:	60d3      	str	r3, [r2, #12]
}
 802e2ac:	bf00      	nop
 802e2ae:	3714      	adds	r7, #20
 802e2b0:	46bd      	mov	sp, r7
 802e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2b6:	4770      	bx	lr
 802e2b8:	e000ed00 	.word	0xe000ed00
 802e2bc:	05fa0000 	.word	0x05fa0000

0802e2c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802e2c0:	b480      	push	{r7}
 802e2c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802e2c4:	4b04      	ldr	r3, [pc, #16]	; (802e2d8 <__NVIC_GetPriorityGrouping+0x18>)
 802e2c6:	68db      	ldr	r3, [r3, #12]
 802e2c8:	0a1b      	lsrs	r3, r3, #8
 802e2ca:	f003 0307 	and.w	r3, r3, #7
}
 802e2ce:	4618      	mov	r0, r3
 802e2d0:	46bd      	mov	sp, r7
 802e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2d6:	4770      	bx	lr
 802e2d8:	e000ed00 	.word	0xe000ed00

0802e2dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802e2dc:	b480      	push	{r7}
 802e2de:	b083      	sub	sp, #12
 802e2e0:	af00      	add	r7, sp, #0
 802e2e2:	4603      	mov	r3, r0
 802e2e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802e2e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e2ea:	2b00      	cmp	r3, #0
 802e2ec:	db0b      	blt.n	802e306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802e2ee:	88fb      	ldrh	r3, [r7, #6]
 802e2f0:	f003 021f 	and.w	r2, r3, #31
 802e2f4:	4907      	ldr	r1, [pc, #28]	; (802e314 <__NVIC_EnableIRQ+0x38>)
 802e2f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e2fa:	095b      	lsrs	r3, r3, #5
 802e2fc:	2001      	movs	r0, #1
 802e2fe:	fa00 f202 	lsl.w	r2, r0, r2
 802e302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802e306:	bf00      	nop
 802e308:	370c      	adds	r7, #12
 802e30a:	46bd      	mov	sp, r7
 802e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e310:	4770      	bx	lr
 802e312:	bf00      	nop
 802e314:	e000e100 	.word	0xe000e100

0802e318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802e318:	b480      	push	{r7}
 802e31a:	b083      	sub	sp, #12
 802e31c:	af00      	add	r7, sp, #0
 802e31e:	4603      	mov	r3, r0
 802e320:	6039      	str	r1, [r7, #0]
 802e322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802e324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e328:	2b00      	cmp	r3, #0
 802e32a:	db0a      	blt.n	802e342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802e32c:	683b      	ldr	r3, [r7, #0]
 802e32e:	b2da      	uxtb	r2, r3
 802e330:	490c      	ldr	r1, [pc, #48]	; (802e364 <__NVIC_SetPriority+0x4c>)
 802e332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e336:	0112      	lsls	r2, r2, #4
 802e338:	b2d2      	uxtb	r2, r2
 802e33a:	440b      	add	r3, r1
 802e33c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802e340:	e00a      	b.n	802e358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802e342:	683b      	ldr	r3, [r7, #0]
 802e344:	b2da      	uxtb	r2, r3
 802e346:	4908      	ldr	r1, [pc, #32]	; (802e368 <__NVIC_SetPriority+0x50>)
 802e348:	88fb      	ldrh	r3, [r7, #6]
 802e34a:	f003 030f 	and.w	r3, r3, #15
 802e34e:	3b04      	subs	r3, #4
 802e350:	0112      	lsls	r2, r2, #4
 802e352:	b2d2      	uxtb	r2, r2
 802e354:	440b      	add	r3, r1
 802e356:	761a      	strb	r2, [r3, #24]
}
 802e358:	bf00      	nop
 802e35a:	370c      	adds	r7, #12
 802e35c:	46bd      	mov	sp, r7
 802e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e362:	4770      	bx	lr
 802e364:	e000e100 	.word	0xe000e100
 802e368:	e000ed00 	.word	0xe000ed00

0802e36c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802e36c:	b480      	push	{r7}
 802e36e:	b089      	sub	sp, #36	; 0x24
 802e370:	af00      	add	r7, sp, #0
 802e372:	60f8      	str	r0, [r7, #12]
 802e374:	60b9      	str	r1, [r7, #8]
 802e376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802e378:	68fb      	ldr	r3, [r7, #12]
 802e37a:	f003 0307 	and.w	r3, r3, #7
 802e37e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802e380:	69fb      	ldr	r3, [r7, #28]
 802e382:	f1c3 0307 	rsb	r3, r3, #7
 802e386:	2b04      	cmp	r3, #4
 802e388:	bf28      	it	cs
 802e38a:	2304      	movcs	r3, #4
 802e38c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802e38e:	69fb      	ldr	r3, [r7, #28]
 802e390:	3304      	adds	r3, #4
 802e392:	2b06      	cmp	r3, #6
 802e394:	d902      	bls.n	802e39c <NVIC_EncodePriority+0x30>
 802e396:	69fb      	ldr	r3, [r7, #28]
 802e398:	3b03      	subs	r3, #3
 802e39a:	e000      	b.n	802e39e <NVIC_EncodePriority+0x32>
 802e39c:	2300      	movs	r3, #0
 802e39e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802e3a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802e3a4:	69bb      	ldr	r3, [r7, #24]
 802e3a6:	fa02 f303 	lsl.w	r3, r2, r3
 802e3aa:	43da      	mvns	r2, r3
 802e3ac:	68bb      	ldr	r3, [r7, #8]
 802e3ae:	401a      	ands	r2, r3
 802e3b0:	697b      	ldr	r3, [r7, #20]
 802e3b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802e3b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802e3b8:	697b      	ldr	r3, [r7, #20]
 802e3ba:	fa01 f303 	lsl.w	r3, r1, r3
 802e3be:	43d9      	mvns	r1, r3
 802e3c0:	687b      	ldr	r3, [r7, #4]
 802e3c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802e3c4:	4313      	orrs	r3, r2
         );
}
 802e3c6:	4618      	mov	r0, r3
 802e3c8:	3724      	adds	r7, #36	; 0x24
 802e3ca:	46bd      	mov	sp, r7
 802e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3d0:	4770      	bx	lr
	...

0802e3d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802e3d4:	b580      	push	{r7, lr}
 802e3d6:	b082      	sub	sp, #8
 802e3d8:	af00      	add	r7, sp, #0
 802e3da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802e3dc:	687b      	ldr	r3, [r7, #4]
 802e3de:	3b01      	subs	r3, #1
 802e3e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802e3e4:	d301      	bcc.n	802e3ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802e3e6:	2301      	movs	r3, #1
 802e3e8:	e00f      	b.n	802e40a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802e3ea:	4a0a      	ldr	r2, [pc, #40]	; (802e414 <SysTick_Config+0x40>)
 802e3ec:	687b      	ldr	r3, [r7, #4]
 802e3ee:	3b01      	subs	r3, #1
 802e3f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802e3f2:	210f      	movs	r1, #15
 802e3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802e3f8:	f7ff ff8e 	bl	802e318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802e3fc:	4b05      	ldr	r3, [pc, #20]	; (802e414 <SysTick_Config+0x40>)
 802e3fe:	2200      	movs	r2, #0
 802e400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802e402:	4b04      	ldr	r3, [pc, #16]	; (802e414 <SysTick_Config+0x40>)
 802e404:	2207      	movs	r2, #7
 802e406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802e408:	2300      	movs	r3, #0
}
 802e40a:	4618      	mov	r0, r3
 802e40c:	3708      	adds	r7, #8
 802e40e:	46bd      	mov	sp, r7
 802e410:	bd80      	pop	{r7, pc}
 802e412:	bf00      	nop
 802e414:	e000e010 	.word	0xe000e010

0802e418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802e418:	b580      	push	{r7, lr}
 802e41a:	b082      	sub	sp, #8
 802e41c:	af00      	add	r7, sp, #0
 802e41e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802e420:	6878      	ldr	r0, [r7, #4]
 802e422:	f7ff ff29 	bl	802e278 <__NVIC_SetPriorityGrouping>
}
 802e426:	bf00      	nop
 802e428:	3708      	adds	r7, #8
 802e42a:	46bd      	mov	sp, r7
 802e42c:	bd80      	pop	{r7, pc}

0802e42e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802e42e:	b580      	push	{r7, lr}
 802e430:	b086      	sub	sp, #24
 802e432:	af00      	add	r7, sp, #0
 802e434:	4603      	mov	r3, r0
 802e436:	60b9      	str	r1, [r7, #8]
 802e438:	607a      	str	r2, [r7, #4]
 802e43a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802e43c:	f7ff ff40 	bl	802e2c0 <__NVIC_GetPriorityGrouping>
 802e440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802e442:	687a      	ldr	r2, [r7, #4]
 802e444:	68b9      	ldr	r1, [r7, #8]
 802e446:	6978      	ldr	r0, [r7, #20]
 802e448:	f7ff ff90 	bl	802e36c <NVIC_EncodePriority>
 802e44c:	4602      	mov	r2, r0
 802e44e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802e452:	4611      	mov	r1, r2
 802e454:	4618      	mov	r0, r3
 802e456:	f7ff ff5f 	bl	802e318 <__NVIC_SetPriority>
}
 802e45a:	bf00      	nop
 802e45c:	3718      	adds	r7, #24
 802e45e:	46bd      	mov	sp, r7
 802e460:	bd80      	pop	{r7, pc}

0802e462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802e462:	b580      	push	{r7, lr}
 802e464:	b082      	sub	sp, #8
 802e466:	af00      	add	r7, sp, #0
 802e468:	4603      	mov	r3, r0
 802e46a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802e46c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e470:	4618      	mov	r0, r3
 802e472:	f7ff ff33 	bl	802e2dc <__NVIC_EnableIRQ>
}
 802e476:	bf00      	nop
 802e478:	3708      	adds	r7, #8
 802e47a:	46bd      	mov	sp, r7
 802e47c:	bd80      	pop	{r7, pc}

0802e47e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802e47e:	b580      	push	{r7, lr}
 802e480:	b082      	sub	sp, #8
 802e482:	af00      	add	r7, sp, #0
 802e484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802e486:	6878      	ldr	r0, [r7, #4]
 802e488:	f7ff ffa4 	bl	802e3d4 <SysTick_Config>
 802e48c:	4603      	mov	r3, r0
}
 802e48e:	4618      	mov	r0, r3
 802e490:	3708      	adds	r7, #8
 802e492:	46bd      	mov	sp, r7
 802e494:	bd80      	pop	{r7, pc}

0802e496 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802e496:	b580      	push	{r7, lr}
 802e498:	b082      	sub	sp, #8
 802e49a:	af00      	add	r7, sp, #0
 802e49c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802e49e:	687b      	ldr	r3, [r7, #4]
 802e4a0:	2b00      	cmp	r3, #0
 802e4a2:	d101      	bne.n	802e4a8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802e4a4:	2301      	movs	r3, #1
 802e4a6:	e014      	b.n	802e4d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802e4a8:	687b      	ldr	r3, [r7, #4]
 802e4aa:	791b      	ldrb	r3, [r3, #4]
 802e4ac:	b2db      	uxtb	r3, r3
 802e4ae:	2b00      	cmp	r3, #0
 802e4b0:	d105      	bne.n	802e4be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802e4b2:	687b      	ldr	r3, [r7, #4]
 802e4b4:	2200      	movs	r2, #0
 802e4b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802e4b8:	6878      	ldr	r0, [r7, #4]
 802e4ba:	f7fe f867 	bl	802c58c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802e4be:	687b      	ldr	r3, [r7, #4]
 802e4c0:	2202      	movs	r2, #2
 802e4c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802e4c4:	687b      	ldr	r3, [r7, #4]
 802e4c6:	2200      	movs	r2, #0
 802e4c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802e4ca:	687b      	ldr	r3, [r7, #4]
 802e4cc:	2201      	movs	r2, #1
 802e4ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802e4d0:	2300      	movs	r3, #0
}
 802e4d2:	4618      	mov	r0, r3
 802e4d4:	3708      	adds	r7, #8
 802e4d6:	46bd      	mov	sp, r7
 802e4d8:	bd80      	pop	{r7, pc}

0802e4da <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802e4da:	b480      	push	{r7}
 802e4dc:	b083      	sub	sp, #12
 802e4de:	af00      	add	r7, sp, #0
 802e4e0:	6078      	str	r0, [r7, #4]
 802e4e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802e4e4:	687b      	ldr	r3, [r7, #4]
 802e4e6:	795b      	ldrb	r3, [r3, #5]
 802e4e8:	2b01      	cmp	r3, #1
 802e4ea:	d101      	bne.n	802e4f0 <HAL_DAC_Start+0x16>
 802e4ec:	2302      	movs	r3, #2
 802e4ee:	e040      	b.n	802e572 <HAL_DAC_Start+0x98>
 802e4f0:	687b      	ldr	r3, [r7, #4]
 802e4f2:	2201      	movs	r2, #1
 802e4f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802e4f6:	687b      	ldr	r3, [r7, #4]
 802e4f8:	2202      	movs	r2, #2
 802e4fa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802e4fc:	687b      	ldr	r3, [r7, #4]
 802e4fe:	681b      	ldr	r3, [r3, #0]
 802e500:	6819      	ldr	r1, [r3, #0]
 802e502:	683b      	ldr	r3, [r7, #0]
 802e504:	f003 0310 	and.w	r3, r3, #16
 802e508:	2201      	movs	r2, #1
 802e50a:	409a      	lsls	r2, r3
 802e50c:	687b      	ldr	r3, [r7, #4]
 802e50e:	681b      	ldr	r3, [r3, #0]
 802e510:	430a      	orrs	r2, r1
 802e512:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802e514:	683b      	ldr	r3, [r7, #0]
 802e516:	2b00      	cmp	r3, #0
 802e518:	d10f      	bne.n	802e53a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802e51a:	687b      	ldr	r3, [r7, #4]
 802e51c:	681b      	ldr	r3, [r3, #0]
 802e51e:	681b      	ldr	r3, [r3, #0]
 802e520:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802e524:	2b02      	cmp	r3, #2
 802e526:	d11d      	bne.n	802e564 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802e528:	687b      	ldr	r3, [r7, #4]
 802e52a:	681b      	ldr	r3, [r3, #0]
 802e52c:	685a      	ldr	r2, [r3, #4]
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	681b      	ldr	r3, [r3, #0]
 802e532:	f042 0201 	orr.w	r2, r2, #1
 802e536:	605a      	str	r2, [r3, #4]
 802e538:	e014      	b.n	802e564 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802e53a:	687b      	ldr	r3, [r7, #4]
 802e53c:	681b      	ldr	r3, [r3, #0]
 802e53e:	681b      	ldr	r3, [r3, #0]
 802e540:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802e544:	683b      	ldr	r3, [r7, #0]
 802e546:	f003 0310 	and.w	r3, r3, #16
 802e54a:	2102      	movs	r1, #2
 802e54c:	fa01 f303 	lsl.w	r3, r1, r3
 802e550:	429a      	cmp	r2, r3
 802e552:	d107      	bne.n	802e564 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802e554:	687b      	ldr	r3, [r7, #4]
 802e556:	681b      	ldr	r3, [r3, #0]
 802e558:	685a      	ldr	r2, [r3, #4]
 802e55a:	687b      	ldr	r3, [r7, #4]
 802e55c:	681b      	ldr	r3, [r3, #0]
 802e55e:	f042 0202 	orr.w	r2, r2, #2
 802e562:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802e564:	687b      	ldr	r3, [r7, #4]
 802e566:	2201      	movs	r2, #1
 802e568:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802e56a:	687b      	ldr	r3, [r7, #4]
 802e56c:	2200      	movs	r2, #0
 802e56e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802e570:	2300      	movs	r3, #0
}
 802e572:	4618      	mov	r0, r3
 802e574:	370c      	adds	r7, #12
 802e576:	46bd      	mov	sp, r7
 802e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e57c:	4770      	bx	lr

0802e57e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802e57e:	b480      	push	{r7}
 802e580:	b087      	sub	sp, #28
 802e582:	af00      	add	r7, sp, #0
 802e584:	60f8      	str	r0, [r7, #12]
 802e586:	60b9      	str	r1, [r7, #8]
 802e588:	607a      	str	r2, [r7, #4]
 802e58a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802e58c:	2300      	movs	r3, #0
 802e58e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802e590:	68fb      	ldr	r3, [r7, #12]
 802e592:	681b      	ldr	r3, [r3, #0]
 802e594:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802e596:	68bb      	ldr	r3, [r7, #8]
 802e598:	2b00      	cmp	r3, #0
 802e59a:	d105      	bne.n	802e5a8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802e59c:	697a      	ldr	r2, [r7, #20]
 802e59e:	687b      	ldr	r3, [r7, #4]
 802e5a0:	4413      	add	r3, r2
 802e5a2:	3308      	adds	r3, #8
 802e5a4:	617b      	str	r3, [r7, #20]
 802e5a6:	e004      	b.n	802e5b2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802e5a8:	697a      	ldr	r2, [r7, #20]
 802e5aa:	687b      	ldr	r3, [r7, #4]
 802e5ac:	4413      	add	r3, r2
 802e5ae:	3314      	adds	r3, #20
 802e5b0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802e5b2:	697b      	ldr	r3, [r7, #20]
 802e5b4:	461a      	mov	r2, r3
 802e5b6:	683b      	ldr	r3, [r7, #0]
 802e5b8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802e5ba:	2300      	movs	r3, #0
}
 802e5bc:	4618      	mov	r0, r3
 802e5be:	371c      	adds	r7, #28
 802e5c0:	46bd      	mov	sp, r7
 802e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5c6:	4770      	bx	lr

0802e5c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802e5c8:	b580      	push	{r7, lr}
 802e5ca:	b088      	sub	sp, #32
 802e5cc:	af00      	add	r7, sp, #0
 802e5ce:	60f8      	str	r0, [r7, #12]
 802e5d0:	60b9      	str	r1, [r7, #8]
 802e5d2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802e5d4:	68fb      	ldr	r3, [r7, #12]
 802e5d6:	795b      	ldrb	r3, [r3, #5]
 802e5d8:	2b01      	cmp	r3, #1
 802e5da:	d101      	bne.n	802e5e0 <HAL_DAC_ConfigChannel+0x18>
 802e5dc:	2302      	movs	r3, #2
 802e5de:	e11d      	b.n	802e81c <HAL_DAC_ConfigChannel+0x254>
 802e5e0:	68fb      	ldr	r3, [r7, #12]
 802e5e2:	2201      	movs	r2, #1
 802e5e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802e5e6:	68fb      	ldr	r3, [r7, #12]
 802e5e8:	2202      	movs	r2, #2
 802e5ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802e5ec:	68bb      	ldr	r3, [r7, #8]
 802e5ee:	681b      	ldr	r3, [r3, #0]
 802e5f0:	2b04      	cmp	r3, #4
 802e5f2:	d174      	bne.n	802e6de <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802e5f4:	f7ff fc1c 	bl	802de30 <HAL_GetTick>
 802e5f8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802e5fa:	687b      	ldr	r3, [r7, #4]
 802e5fc:	2b00      	cmp	r3, #0
 802e5fe:	d134      	bne.n	802e66a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802e600:	e011      	b.n	802e626 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802e602:	f7ff fc15 	bl	802de30 <HAL_GetTick>
 802e606:	4602      	mov	r2, r0
 802e608:	69bb      	ldr	r3, [r7, #24]
 802e60a:	1ad3      	subs	r3, r2, r3
 802e60c:	2b01      	cmp	r3, #1
 802e60e:	d90a      	bls.n	802e626 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802e610:	68fb      	ldr	r3, [r7, #12]
 802e612:	691b      	ldr	r3, [r3, #16]
 802e614:	f043 0208 	orr.w	r2, r3, #8
 802e618:	68fb      	ldr	r3, [r7, #12]
 802e61a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802e61c:	68fb      	ldr	r3, [r7, #12]
 802e61e:	2203      	movs	r2, #3
 802e620:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802e622:	2303      	movs	r3, #3
 802e624:	e0fa      	b.n	802e81c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802e626:	68fb      	ldr	r3, [r7, #12]
 802e628:	681b      	ldr	r3, [r3, #0]
 802e62a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802e62c:	4b7d      	ldr	r3, [pc, #500]	; (802e824 <HAL_DAC_ConfigChannel+0x25c>)
 802e62e:	4013      	ands	r3, r2
 802e630:	2b00      	cmp	r3, #0
 802e632:	d1e6      	bne.n	802e602 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802e634:	2001      	movs	r0, #1
 802e636:	f7ff fc07 	bl	802de48 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802e63a:	68fb      	ldr	r3, [r7, #12]
 802e63c:	681b      	ldr	r3, [r3, #0]
 802e63e:	68ba      	ldr	r2, [r7, #8]
 802e640:	6992      	ldr	r2, [r2, #24]
 802e642:	641a      	str	r2, [r3, #64]	; 0x40
 802e644:	e01e      	b.n	802e684 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802e646:	f7ff fbf3 	bl	802de30 <HAL_GetTick>
 802e64a:	4602      	mov	r2, r0
 802e64c:	69bb      	ldr	r3, [r7, #24]
 802e64e:	1ad3      	subs	r3, r2, r3
 802e650:	2b01      	cmp	r3, #1
 802e652:	d90a      	bls.n	802e66a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802e654:	68fb      	ldr	r3, [r7, #12]
 802e656:	691b      	ldr	r3, [r3, #16]
 802e658:	f043 0208 	orr.w	r2, r3, #8
 802e65c:	68fb      	ldr	r3, [r7, #12]
 802e65e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802e660:	68fb      	ldr	r3, [r7, #12]
 802e662:	2203      	movs	r2, #3
 802e664:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802e666:	2303      	movs	r3, #3
 802e668:	e0d8      	b.n	802e81c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802e66a:	68fb      	ldr	r3, [r7, #12]
 802e66c:	681b      	ldr	r3, [r3, #0]
 802e66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e670:	2b00      	cmp	r3, #0
 802e672:	dbe8      	blt.n	802e646 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802e674:	2001      	movs	r0, #1
 802e676:	f7ff fbe7 	bl	802de48 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802e67a:	68fb      	ldr	r3, [r7, #12]
 802e67c:	681b      	ldr	r3, [r3, #0]
 802e67e:	68ba      	ldr	r2, [r7, #8]
 802e680:	6992      	ldr	r2, [r2, #24]
 802e682:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802e684:	68fb      	ldr	r3, [r7, #12]
 802e686:	681b      	ldr	r3, [r3, #0]
 802e688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802e68a:	687b      	ldr	r3, [r7, #4]
 802e68c:	f003 0310 	and.w	r3, r3, #16
 802e690:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802e694:	fa01 f303 	lsl.w	r3, r1, r3
 802e698:	43db      	mvns	r3, r3
 802e69a:	ea02 0103 	and.w	r1, r2, r3
 802e69e:	68bb      	ldr	r3, [r7, #8]
 802e6a0:	69da      	ldr	r2, [r3, #28]
 802e6a2:	687b      	ldr	r3, [r7, #4]
 802e6a4:	f003 0310 	and.w	r3, r3, #16
 802e6a8:	409a      	lsls	r2, r3
 802e6aa:	68fb      	ldr	r3, [r7, #12]
 802e6ac:	681b      	ldr	r3, [r3, #0]
 802e6ae:	430a      	orrs	r2, r1
 802e6b0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802e6b2:	68fb      	ldr	r3, [r7, #12]
 802e6b4:	681b      	ldr	r3, [r3, #0]
 802e6b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802e6b8:	687b      	ldr	r3, [r7, #4]
 802e6ba:	f003 0310 	and.w	r3, r3, #16
 802e6be:	21ff      	movs	r1, #255	; 0xff
 802e6c0:	fa01 f303 	lsl.w	r3, r1, r3
 802e6c4:	43db      	mvns	r3, r3
 802e6c6:	ea02 0103 	and.w	r1, r2, r3
 802e6ca:	68bb      	ldr	r3, [r7, #8]
 802e6cc:	6a1a      	ldr	r2, [r3, #32]
 802e6ce:	687b      	ldr	r3, [r7, #4]
 802e6d0:	f003 0310 	and.w	r3, r3, #16
 802e6d4:	409a      	lsls	r2, r3
 802e6d6:	68fb      	ldr	r3, [r7, #12]
 802e6d8:	681b      	ldr	r3, [r3, #0]
 802e6da:	430a      	orrs	r2, r1
 802e6dc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802e6de:	68bb      	ldr	r3, [r7, #8]
 802e6e0:	691b      	ldr	r3, [r3, #16]
 802e6e2:	2b01      	cmp	r3, #1
 802e6e4:	d11d      	bne.n	802e722 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802e6e6:	68fb      	ldr	r3, [r7, #12]
 802e6e8:	681b      	ldr	r3, [r3, #0]
 802e6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e6ec:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	f003 0310 	and.w	r3, r3, #16
 802e6f4:	221f      	movs	r2, #31
 802e6f6:	fa02 f303 	lsl.w	r3, r2, r3
 802e6fa:	43db      	mvns	r3, r3
 802e6fc:	697a      	ldr	r2, [r7, #20]
 802e6fe:	4013      	ands	r3, r2
 802e700:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802e702:	68bb      	ldr	r3, [r7, #8]
 802e704:	695b      	ldr	r3, [r3, #20]
 802e706:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802e708:	687b      	ldr	r3, [r7, #4]
 802e70a:	f003 0310 	and.w	r3, r3, #16
 802e70e:	693a      	ldr	r2, [r7, #16]
 802e710:	fa02 f303 	lsl.w	r3, r2, r3
 802e714:	697a      	ldr	r2, [r7, #20]
 802e716:	4313      	orrs	r3, r2
 802e718:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802e71a:	68fb      	ldr	r3, [r7, #12]
 802e71c:	681b      	ldr	r3, [r3, #0]
 802e71e:	697a      	ldr	r2, [r7, #20]
 802e720:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802e722:	68fb      	ldr	r3, [r7, #12]
 802e724:	681b      	ldr	r3, [r3, #0]
 802e726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e728:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802e72a:	687b      	ldr	r3, [r7, #4]
 802e72c:	f003 0310 	and.w	r3, r3, #16
 802e730:	2207      	movs	r2, #7
 802e732:	fa02 f303 	lsl.w	r3, r2, r3
 802e736:	43db      	mvns	r3, r3
 802e738:	697a      	ldr	r2, [r7, #20]
 802e73a:	4013      	ands	r3, r2
 802e73c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802e73e:	68bb      	ldr	r3, [r7, #8]
 802e740:	68db      	ldr	r3, [r3, #12]
 802e742:	2b01      	cmp	r3, #1
 802e744:	d102      	bne.n	802e74c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802e746:	2300      	movs	r3, #0
 802e748:	61fb      	str	r3, [r7, #28]
 802e74a:	e00f      	b.n	802e76c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802e74c:	68bb      	ldr	r3, [r7, #8]
 802e74e:	68db      	ldr	r3, [r3, #12]
 802e750:	2b02      	cmp	r3, #2
 802e752:	d102      	bne.n	802e75a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802e754:	2301      	movs	r3, #1
 802e756:	61fb      	str	r3, [r7, #28]
 802e758:	e008      	b.n	802e76c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802e75a:	68bb      	ldr	r3, [r7, #8]
 802e75c:	689b      	ldr	r3, [r3, #8]
 802e75e:	2b00      	cmp	r3, #0
 802e760:	d102      	bne.n	802e768 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802e762:	2301      	movs	r3, #1
 802e764:	61fb      	str	r3, [r7, #28]
 802e766:	e001      	b.n	802e76c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802e768:	2300      	movs	r3, #0
 802e76a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802e76c:	68bb      	ldr	r3, [r7, #8]
 802e76e:	681a      	ldr	r2, [r3, #0]
 802e770:	68bb      	ldr	r3, [r7, #8]
 802e772:	689b      	ldr	r3, [r3, #8]
 802e774:	4313      	orrs	r3, r2
 802e776:	69fa      	ldr	r2, [r7, #28]
 802e778:	4313      	orrs	r3, r2
 802e77a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802e77c:	687b      	ldr	r3, [r7, #4]
 802e77e:	f003 0310 	and.w	r3, r3, #16
 802e782:	693a      	ldr	r2, [r7, #16]
 802e784:	fa02 f303 	lsl.w	r3, r2, r3
 802e788:	697a      	ldr	r2, [r7, #20]
 802e78a:	4313      	orrs	r3, r2
 802e78c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802e78e:	68fb      	ldr	r3, [r7, #12]
 802e790:	681b      	ldr	r3, [r3, #0]
 802e792:	697a      	ldr	r2, [r7, #20]
 802e794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802e796:	68fb      	ldr	r3, [r7, #12]
 802e798:	681b      	ldr	r3, [r3, #0]
 802e79a:	6819      	ldr	r1, [r3, #0]
 802e79c:	687b      	ldr	r3, [r7, #4]
 802e79e:	f003 0310 	and.w	r3, r3, #16
 802e7a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802e7a6:	fa02 f303 	lsl.w	r3, r2, r3
 802e7aa:	43da      	mvns	r2, r3
 802e7ac:	68fb      	ldr	r3, [r7, #12]
 802e7ae:	681b      	ldr	r3, [r3, #0]
 802e7b0:	400a      	ands	r2, r1
 802e7b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802e7b4:	68fb      	ldr	r3, [r7, #12]
 802e7b6:	681b      	ldr	r3, [r3, #0]
 802e7b8:	681b      	ldr	r3, [r3, #0]
 802e7ba:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802e7bc:	687b      	ldr	r3, [r7, #4]
 802e7be:	f003 0310 	and.w	r3, r3, #16
 802e7c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 802e7c6:	fa02 f303 	lsl.w	r3, r2, r3
 802e7ca:	43db      	mvns	r3, r3
 802e7cc:	697a      	ldr	r2, [r7, #20]
 802e7ce:	4013      	ands	r3, r2
 802e7d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802e7d2:	68bb      	ldr	r3, [r7, #8]
 802e7d4:	685b      	ldr	r3, [r3, #4]
 802e7d6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	f003 0310 	and.w	r3, r3, #16
 802e7de:	693a      	ldr	r2, [r7, #16]
 802e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 802e7e4:	697a      	ldr	r2, [r7, #20]
 802e7e6:	4313      	orrs	r3, r2
 802e7e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802e7ea:	68fb      	ldr	r3, [r7, #12]
 802e7ec:	681b      	ldr	r3, [r3, #0]
 802e7ee:	697a      	ldr	r2, [r7, #20]
 802e7f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802e7f2:	68fb      	ldr	r3, [r7, #12]
 802e7f4:	681b      	ldr	r3, [r3, #0]
 802e7f6:	6819      	ldr	r1, [r3, #0]
 802e7f8:	687b      	ldr	r3, [r7, #4]
 802e7fa:	f003 0310 	and.w	r3, r3, #16
 802e7fe:	22c0      	movs	r2, #192	; 0xc0
 802e800:	fa02 f303 	lsl.w	r3, r2, r3
 802e804:	43da      	mvns	r2, r3
 802e806:	68fb      	ldr	r3, [r7, #12]
 802e808:	681b      	ldr	r3, [r3, #0]
 802e80a:	400a      	ands	r2, r1
 802e80c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802e80e:	68fb      	ldr	r3, [r7, #12]
 802e810:	2201      	movs	r2, #1
 802e812:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802e814:	68fb      	ldr	r3, [r7, #12]
 802e816:	2200      	movs	r2, #0
 802e818:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802e81a:	2300      	movs	r3, #0
}
 802e81c:	4618      	mov	r0, r3
 802e81e:	3720      	adds	r7, #32
 802e820:	46bd      	mov	sp, r7
 802e822:	bd80      	pop	{r7, pc}
 802e824:	20008000 	.word	0x20008000

0802e828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802e828:	b580      	push	{r7, lr}
 802e82a:	b086      	sub	sp, #24
 802e82c:	af00      	add	r7, sp, #0
 802e82e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802e830:	f7ff fafe 	bl	802de30 <HAL_GetTick>
 802e834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802e836:	687b      	ldr	r3, [r7, #4]
 802e838:	2b00      	cmp	r3, #0
 802e83a:	d101      	bne.n	802e840 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802e83c:	2301      	movs	r3, #1
 802e83e:	e316      	b.n	802ee6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	681b      	ldr	r3, [r3, #0]
 802e844:	4a66      	ldr	r2, [pc, #408]	; (802e9e0 <HAL_DMA_Init+0x1b8>)
 802e846:	4293      	cmp	r3, r2
 802e848:	d04a      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e84a:	687b      	ldr	r3, [r7, #4]
 802e84c:	681b      	ldr	r3, [r3, #0]
 802e84e:	4a65      	ldr	r2, [pc, #404]	; (802e9e4 <HAL_DMA_Init+0x1bc>)
 802e850:	4293      	cmp	r3, r2
 802e852:	d045      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e854:	687b      	ldr	r3, [r7, #4]
 802e856:	681b      	ldr	r3, [r3, #0]
 802e858:	4a63      	ldr	r2, [pc, #396]	; (802e9e8 <HAL_DMA_Init+0x1c0>)
 802e85a:	4293      	cmp	r3, r2
 802e85c:	d040      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e85e:	687b      	ldr	r3, [r7, #4]
 802e860:	681b      	ldr	r3, [r3, #0]
 802e862:	4a62      	ldr	r2, [pc, #392]	; (802e9ec <HAL_DMA_Init+0x1c4>)
 802e864:	4293      	cmp	r3, r2
 802e866:	d03b      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e868:	687b      	ldr	r3, [r7, #4]
 802e86a:	681b      	ldr	r3, [r3, #0]
 802e86c:	4a60      	ldr	r2, [pc, #384]	; (802e9f0 <HAL_DMA_Init+0x1c8>)
 802e86e:	4293      	cmp	r3, r2
 802e870:	d036      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e872:	687b      	ldr	r3, [r7, #4]
 802e874:	681b      	ldr	r3, [r3, #0]
 802e876:	4a5f      	ldr	r2, [pc, #380]	; (802e9f4 <HAL_DMA_Init+0x1cc>)
 802e878:	4293      	cmp	r3, r2
 802e87a:	d031      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e87c:	687b      	ldr	r3, [r7, #4]
 802e87e:	681b      	ldr	r3, [r3, #0]
 802e880:	4a5d      	ldr	r2, [pc, #372]	; (802e9f8 <HAL_DMA_Init+0x1d0>)
 802e882:	4293      	cmp	r3, r2
 802e884:	d02c      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e886:	687b      	ldr	r3, [r7, #4]
 802e888:	681b      	ldr	r3, [r3, #0]
 802e88a:	4a5c      	ldr	r2, [pc, #368]	; (802e9fc <HAL_DMA_Init+0x1d4>)
 802e88c:	4293      	cmp	r3, r2
 802e88e:	d027      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e890:	687b      	ldr	r3, [r7, #4]
 802e892:	681b      	ldr	r3, [r3, #0]
 802e894:	4a5a      	ldr	r2, [pc, #360]	; (802ea00 <HAL_DMA_Init+0x1d8>)
 802e896:	4293      	cmp	r3, r2
 802e898:	d022      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e89a:	687b      	ldr	r3, [r7, #4]
 802e89c:	681b      	ldr	r3, [r3, #0]
 802e89e:	4a59      	ldr	r2, [pc, #356]	; (802ea04 <HAL_DMA_Init+0x1dc>)
 802e8a0:	4293      	cmp	r3, r2
 802e8a2:	d01d      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e8a4:	687b      	ldr	r3, [r7, #4]
 802e8a6:	681b      	ldr	r3, [r3, #0]
 802e8a8:	4a57      	ldr	r2, [pc, #348]	; (802ea08 <HAL_DMA_Init+0x1e0>)
 802e8aa:	4293      	cmp	r3, r2
 802e8ac:	d018      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e8ae:	687b      	ldr	r3, [r7, #4]
 802e8b0:	681b      	ldr	r3, [r3, #0]
 802e8b2:	4a56      	ldr	r2, [pc, #344]	; (802ea0c <HAL_DMA_Init+0x1e4>)
 802e8b4:	4293      	cmp	r3, r2
 802e8b6:	d013      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e8b8:	687b      	ldr	r3, [r7, #4]
 802e8ba:	681b      	ldr	r3, [r3, #0]
 802e8bc:	4a54      	ldr	r2, [pc, #336]	; (802ea10 <HAL_DMA_Init+0x1e8>)
 802e8be:	4293      	cmp	r3, r2
 802e8c0:	d00e      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e8c2:	687b      	ldr	r3, [r7, #4]
 802e8c4:	681b      	ldr	r3, [r3, #0]
 802e8c6:	4a53      	ldr	r2, [pc, #332]	; (802ea14 <HAL_DMA_Init+0x1ec>)
 802e8c8:	4293      	cmp	r3, r2
 802e8ca:	d009      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e8cc:	687b      	ldr	r3, [r7, #4]
 802e8ce:	681b      	ldr	r3, [r3, #0]
 802e8d0:	4a51      	ldr	r2, [pc, #324]	; (802ea18 <HAL_DMA_Init+0x1f0>)
 802e8d2:	4293      	cmp	r3, r2
 802e8d4:	d004      	beq.n	802e8e0 <HAL_DMA_Init+0xb8>
 802e8d6:	687b      	ldr	r3, [r7, #4]
 802e8d8:	681b      	ldr	r3, [r3, #0]
 802e8da:	4a50      	ldr	r2, [pc, #320]	; (802ea1c <HAL_DMA_Init+0x1f4>)
 802e8dc:	4293      	cmp	r3, r2
 802e8de:	d101      	bne.n	802e8e4 <HAL_DMA_Init+0xbc>
 802e8e0:	2301      	movs	r3, #1
 802e8e2:	e000      	b.n	802e8e6 <HAL_DMA_Init+0xbe>
 802e8e4:	2300      	movs	r3, #0
 802e8e6:	2b00      	cmp	r3, #0
 802e8e8:	f000 813b 	beq.w	802eb62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802e8ec:	687b      	ldr	r3, [r7, #4]
 802e8ee:	2202      	movs	r2, #2
 802e8f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802e8f4:	687b      	ldr	r3, [r7, #4]
 802e8f6:	2200      	movs	r2, #0
 802e8f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802e8fc:	687b      	ldr	r3, [r7, #4]
 802e8fe:	681b      	ldr	r3, [r3, #0]
 802e900:	4a37      	ldr	r2, [pc, #220]	; (802e9e0 <HAL_DMA_Init+0x1b8>)
 802e902:	4293      	cmp	r3, r2
 802e904:	d04a      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e906:	687b      	ldr	r3, [r7, #4]
 802e908:	681b      	ldr	r3, [r3, #0]
 802e90a:	4a36      	ldr	r2, [pc, #216]	; (802e9e4 <HAL_DMA_Init+0x1bc>)
 802e90c:	4293      	cmp	r3, r2
 802e90e:	d045      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e910:	687b      	ldr	r3, [r7, #4]
 802e912:	681b      	ldr	r3, [r3, #0]
 802e914:	4a34      	ldr	r2, [pc, #208]	; (802e9e8 <HAL_DMA_Init+0x1c0>)
 802e916:	4293      	cmp	r3, r2
 802e918:	d040      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e91a:	687b      	ldr	r3, [r7, #4]
 802e91c:	681b      	ldr	r3, [r3, #0]
 802e91e:	4a33      	ldr	r2, [pc, #204]	; (802e9ec <HAL_DMA_Init+0x1c4>)
 802e920:	4293      	cmp	r3, r2
 802e922:	d03b      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e924:	687b      	ldr	r3, [r7, #4]
 802e926:	681b      	ldr	r3, [r3, #0]
 802e928:	4a31      	ldr	r2, [pc, #196]	; (802e9f0 <HAL_DMA_Init+0x1c8>)
 802e92a:	4293      	cmp	r3, r2
 802e92c:	d036      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e92e:	687b      	ldr	r3, [r7, #4]
 802e930:	681b      	ldr	r3, [r3, #0]
 802e932:	4a30      	ldr	r2, [pc, #192]	; (802e9f4 <HAL_DMA_Init+0x1cc>)
 802e934:	4293      	cmp	r3, r2
 802e936:	d031      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e938:	687b      	ldr	r3, [r7, #4]
 802e93a:	681b      	ldr	r3, [r3, #0]
 802e93c:	4a2e      	ldr	r2, [pc, #184]	; (802e9f8 <HAL_DMA_Init+0x1d0>)
 802e93e:	4293      	cmp	r3, r2
 802e940:	d02c      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e942:	687b      	ldr	r3, [r7, #4]
 802e944:	681b      	ldr	r3, [r3, #0]
 802e946:	4a2d      	ldr	r2, [pc, #180]	; (802e9fc <HAL_DMA_Init+0x1d4>)
 802e948:	4293      	cmp	r3, r2
 802e94a:	d027      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e94c:	687b      	ldr	r3, [r7, #4]
 802e94e:	681b      	ldr	r3, [r3, #0]
 802e950:	4a2b      	ldr	r2, [pc, #172]	; (802ea00 <HAL_DMA_Init+0x1d8>)
 802e952:	4293      	cmp	r3, r2
 802e954:	d022      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e956:	687b      	ldr	r3, [r7, #4]
 802e958:	681b      	ldr	r3, [r3, #0]
 802e95a:	4a2a      	ldr	r2, [pc, #168]	; (802ea04 <HAL_DMA_Init+0x1dc>)
 802e95c:	4293      	cmp	r3, r2
 802e95e:	d01d      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e960:	687b      	ldr	r3, [r7, #4]
 802e962:	681b      	ldr	r3, [r3, #0]
 802e964:	4a28      	ldr	r2, [pc, #160]	; (802ea08 <HAL_DMA_Init+0x1e0>)
 802e966:	4293      	cmp	r3, r2
 802e968:	d018      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e96a:	687b      	ldr	r3, [r7, #4]
 802e96c:	681b      	ldr	r3, [r3, #0]
 802e96e:	4a27      	ldr	r2, [pc, #156]	; (802ea0c <HAL_DMA_Init+0x1e4>)
 802e970:	4293      	cmp	r3, r2
 802e972:	d013      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e974:	687b      	ldr	r3, [r7, #4]
 802e976:	681b      	ldr	r3, [r3, #0]
 802e978:	4a25      	ldr	r2, [pc, #148]	; (802ea10 <HAL_DMA_Init+0x1e8>)
 802e97a:	4293      	cmp	r3, r2
 802e97c:	d00e      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e97e:	687b      	ldr	r3, [r7, #4]
 802e980:	681b      	ldr	r3, [r3, #0]
 802e982:	4a24      	ldr	r2, [pc, #144]	; (802ea14 <HAL_DMA_Init+0x1ec>)
 802e984:	4293      	cmp	r3, r2
 802e986:	d009      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e988:	687b      	ldr	r3, [r7, #4]
 802e98a:	681b      	ldr	r3, [r3, #0]
 802e98c:	4a22      	ldr	r2, [pc, #136]	; (802ea18 <HAL_DMA_Init+0x1f0>)
 802e98e:	4293      	cmp	r3, r2
 802e990:	d004      	beq.n	802e99c <HAL_DMA_Init+0x174>
 802e992:	687b      	ldr	r3, [r7, #4]
 802e994:	681b      	ldr	r3, [r3, #0]
 802e996:	4a21      	ldr	r2, [pc, #132]	; (802ea1c <HAL_DMA_Init+0x1f4>)
 802e998:	4293      	cmp	r3, r2
 802e99a:	d108      	bne.n	802e9ae <HAL_DMA_Init+0x186>
 802e99c:	687b      	ldr	r3, [r7, #4]
 802e99e:	681b      	ldr	r3, [r3, #0]
 802e9a0:	681a      	ldr	r2, [r3, #0]
 802e9a2:	687b      	ldr	r3, [r7, #4]
 802e9a4:	681b      	ldr	r3, [r3, #0]
 802e9a6:	f022 0201 	bic.w	r2, r2, #1
 802e9aa:	601a      	str	r2, [r3, #0]
 802e9ac:	e007      	b.n	802e9be <HAL_DMA_Init+0x196>
 802e9ae:	687b      	ldr	r3, [r7, #4]
 802e9b0:	681b      	ldr	r3, [r3, #0]
 802e9b2:	681a      	ldr	r2, [r3, #0]
 802e9b4:	687b      	ldr	r3, [r7, #4]
 802e9b6:	681b      	ldr	r3, [r3, #0]
 802e9b8:	f022 0201 	bic.w	r2, r2, #1
 802e9bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802e9be:	e02f      	b.n	802ea20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802e9c0:	f7ff fa36 	bl	802de30 <HAL_GetTick>
 802e9c4:	4602      	mov	r2, r0
 802e9c6:	693b      	ldr	r3, [r7, #16]
 802e9c8:	1ad3      	subs	r3, r2, r3
 802e9ca:	2b05      	cmp	r3, #5
 802e9cc:	d928      	bls.n	802ea20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802e9ce:	687b      	ldr	r3, [r7, #4]
 802e9d0:	2220      	movs	r2, #32
 802e9d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802e9d4:	687b      	ldr	r3, [r7, #4]
 802e9d6:	2203      	movs	r2, #3
 802e9d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802e9dc:	2301      	movs	r3, #1
 802e9de:	e246      	b.n	802ee6e <HAL_DMA_Init+0x646>
 802e9e0:	40020010 	.word	0x40020010
 802e9e4:	40020028 	.word	0x40020028
 802e9e8:	40020040 	.word	0x40020040
 802e9ec:	40020058 	.word	0x40020058
 802e9f0:	40020070 	.word	0x40020070
 802e9f4:	40020088 	.word	0x40020088
 802e9f8:	400200a0 	.word	0x400200a0
 802e9fc:	400200b8 	.word	0x400200b8
 802ea00:	40020410 	.word	0x40020410
 802ea04:	40020428 	.word	0x40020428
 802ea08:	40020440 	.word	0x40020440
 802ea0c:	40020458 	.word	0x40020458
 802ea10:	40020470 	.word	0x40020470
 802ea14:	40020488 	.word	0x40020488
 802ea18:	400204a0 	.word	0x400204a0
 802ea1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802ea20:	687b      	ldr	r3, [r7, #4]
 802ea22:	681b      	ldr	r3, [r3, #0]
 802ea24:	681b      	ldr	r3, [r3, #0]
 802ea26:	f003 0301 	and.w	r3, r3, #1
 802ea2a:	2b00      	cmp	r3, #0
 802ea2c:	d1c8      	bne.n	802e9c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802ea2e:	687b      	ldr	r3, [r7, #4]
 802ea30:	681b      	ldr	r3, [r3, #0]
 802ea32:	681b      	ldr	r3, [r3, #0]
 802ea34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802ea36:	697a      	ldr	r2, [r7, #20]
 802ea38:	4b83      	ldr	r3, [pc, #524]	; (802ec48 <HAL_DMA_Init+0x420>)
 802ea3a:	4013      	ands	r3, r2
 802ea3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802ea3e:	687b      	ldr	r3, [r7, #4]
 802ea40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802ea42:	687b      	ldr	r3, [r7, #4]
 802ea44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802ea46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802ea48:	687b      	ldr	r3, [r7, #4]
 802ea4a:	691b      	ldr	r3, [r3, #16]
 802ea4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802ea4e:	687b      	ldr	r3, [r7, #4]
 802ea50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802ea52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802ea54:	687b      	ldr	r3, [r7, #4]
 802ea56:	699b      	ldr	r3, [r3, #24]
 802ea58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802ea5a:	687b      	ldr	r3, [r7, #4]
 802ea5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802ea5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802ea60:	687b      	ldr	r3, [r7, #4]
 802ea62:	6a1b      	ldr	r3, [r3, #32]
 802ea64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802ea66:	697a      	ldr	r2, [r7, #20]
 802ea68:	4313      	orrs	r3, r2
 802ea6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802ea6c:	687b      	ldr	r3, [r7, #4]
 802ea6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea70:	2b04      	cmp	r3, #4
 802ea72:	d107      	bne.n	802ea84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802ea74:	687b      	ldr	r3, [r7, #4]
 802ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ea78:	687b      	ldr	r3, [r7, #4]
 802ea7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ea7c:	4313      	orrs	r3, r2
 802ea7e:	697a      	ldr	r2, [r7, #20]
 802ea80:	4313      	orrs	r3, r2
 802ea82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802ea84:	4b71      	ldr	r3, [pc, #452]	; (802ec4c <HAL_DMA_Init+0x424>)
 802ea86:	681a      	ldr	r2, [r3, #0]
 802ea88:	4b71      	ldr	r3, [pc, #452]	; (802ec50 <HAL_DMA_Init+0x428>)
 802ea8a:	4013      	ands	r3, r2
 802ea8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802ea90:	d328      	bcc.n	802eae4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802ea92:	687b      	ldr	r3, [r7, #4]
 802ea94:	685b      	ldr	r3, [r3, #4]
 802ea96:	2b28      	cmp	r3, #40	; 0x28
 802ea98:	d903      	bls.n	802eaa2 <HAL_DMA_Init+0x27a>
 802ea9a:	687b      	ldr	r3, [r7, #4]
 802ea9c:	685b      	ldr	r3, [r3, #4]
 802ea9e:	2b2e      	cmp	r3, #46	; 0x2e
 802eaa0:	d917      	bls.n	802ead2 <HAL_DMA_Init+0x2aa>
 802eaa2:	687b      	ldr	r3, [r7, #4]
 802eaa4:	685b      	ldr	r3, [r3, #4]
 802eaa6:	2b3e      	cmp	r3, #62	; 0x3e
 802eaa8:	d903      	bls.n	802eab2 <HAL_DMA_Init+0x28a>
 802eaaa:	687b      	ldr	r3, [r7, #4]
 802eaac:	685b      	ldr	r3, [r3, #4]
 802eaae:	2b42      	cmp	r3, #66	; 0x42
 802eab0:	d90f      	bls.n	802ead2 <HAL_DMA_Init+0x2aa>
 802eab2:	687b      	ldr	r3, [r7, #4]
 802eab4:	685b      	ldr	r3, [r3, #4]
 802eab6:	2b46      	cmp	r3, #70	; 0x46
 802eab8:	d903      	bls.n	802eac2 <HAL_DMA_Init+0x29a>
 802eaba:	687b      	ldr	r3, [r7, #4]
 802eabc:	685b      	ldr	r3, [r3, #4]
 802eabe:	2b48      	cmp	r3, #72	; 0x48
 802eac0:	d907      	bls.n	802ead2 <HAL_DMA_Init+0x2aa>
 802eac2:	687b      	ldr	r3, [r7, #4]
 802eac4:	685b      	ldr	r3, [r3, #4]
 802eac6:	2b4e      	cmp	r3, #78	; 0x4e
 802eac8:	d905      	bls.n	802ead6 <HAL_DMA_Init+0x2ae>
 802eaca:	687b      	ldr	r3, [r7, #4]
 802eacc:	685b      	ldr	r3, [r3, #4]
 802eace:	2b52      	cmp	r3, #82	; 0x52
 802ead0:	d801      	bhi.n	802ead6 <HAL_DMA_Init+0x2ae>
 802ead2:	2301      	movs	r3, #1
 802ead4:	e000      	b.n	802ead8 <HAL_DMA_Init+0x2b0>
 802ead6:	2300      	movs	r3, #0
 802ead8:	2b00      	cmp	r3, #0
 802eada:	d003      	beq.n	802eae4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802eadc:	697b      	ldr	r3, [r7, #20]
 802eade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802eae2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802eae4:	687b      	ldr	r3, [r7, #4]
 802eae6:	681b      	ldr	r3, [r3, #0]
 802eae8:	697a      	ldr	r2, [r7, #20]
 802eaea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802eaec:	687b      	ldr	r3, [r7, #4]
 802eaee:	681b      	ldr	r3, [r3, #0]
 802eaf0:	695b      	ldr	r3, [r3, #20]
 802eaf2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802eaf4:	697b      	ldr	r3, [r7, #20]
 802eaf6:	f023 0307 	bic.w	r3, r3, #7
 802eafa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802eafc:	687b      	ldr	r3, [r7, #4]
 802eafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eb00:	697a      	ldr	r2, [r7, #20]
 802eb02:	4313      	orrs	r3, r2
 802eb04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802eb06:	687b      	ldr	r3, [r7, #4]
 802eb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eb0a:	2b04      	cmp	r3, #4
 802eb0c:	d117      	bne.n	802eb3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802eb0e:	687b      	ldr	r3, [r7, #4]
 802eb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802eb12:	697a      	ldr	r2, [r7, #20]
 802eb14:	4313      	orrs	r3, r2
 802eb16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802eb18:	687b      	ldr	r3, [r7, #4]
 802eb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802eb1c:	2b00      	cmp	r3, #0
 802eb1e:	d00e      	beq.n	802eb3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802eb20:	6878      	ldr	r0, [r7, #4]
 802eb22:	f002 fb4d 	bl	80311c0 <DMA_CheckFifoParam>
 802eb26:	4603      	mov	r3, r0
 802eb28:	2b00      	cmp	r3, #0
 802eb2a:	d008      	beq.n	802eb3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802eb2c:	687b      	ldr	r3, [r7, #4]
 802eb2e:	2240      	movs	r2, #64	; 0x40
 802eb30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802eb32:	687b      	ldr	r3, [r7, #4]
 802eb34:	2201      	movs	r2, #1
 802eb36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802eb3a:	2301      	movs	r3, #1
 802eb3c:	e197      	b.n	802ee6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802eb3e:	687b      	ldr	r3, [r7, #4]
 802eb40:	681b      	ldr	r3, [r3, #0]
 802eb42:	697a      	ldr	r2, [r7, #20]
 802eb44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802eb46:	6878      	ldr	r0, [r7, #4]
 802eb48:	f002 fa88 	bl	803105c <DMA_CalcBaseAndBitshift>
 802eb4c:	4603      	mov	r3, r0
 802eb4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802eb50:	687b      	ldr	r3, [r7, #4]
 802eb52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802eb54:	f003 031f 	and.w	r3, r3, #31
 802eb58:	223f      	movs	r2, #63	; 0x3f
 802eb5a:	409a      	lsls	r2, r3
 802eb5c:	68bb      	ldr	r3, [r7, #8]
 802eb5e:	609a      	str	r2, [r3, #8]
 802eb60:	e0cd      	b.n	802ecfe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802eb62:	687b      	ldr	r3, [r7, #4]
 802eb64:	681b      	ldr	r3, [r3, #0]
 802eb66:	4a3b      	ldr	r2, [pc, #236]	; (802ec54 <HAL_DMA_Init+0x42c>)
 802eb68:	4293      	cmp	r3, r2
 802eb6a:	d022      	beq.n	802ebb2 <HAL_DMA_Init+0x38a>
 802eb6c:	687b      	ldr	r3, [r7, #4]
 802eb6e:	681b      	ldr	r3, [r3, #0]
 802eb70:	4a39      	ldr	r2, [pc, #228]	; (802ec58 <HAL_DMA_Init+0x430>)
 802eb72:	4293      	cmp	r3, r2
 802eb74:	d01d      	beq.n	802ebb2 <HAL_DMA_Init+0x38a>
 802eb76:	687b      	ldr	r3, [r7, #4]
 802eb78:	681b      	ldr	r3, [r3, #0]
 802eb7a:	4a38      	ldr	r2, [pc, #224]	; (802ec5c <HAL_DMA_Init+0x434>)
 802eb7c:	4293      	cmp	r3, r2
 802eb7e:	d018      	beq.n	802ebb2 <HAL_DMA_Init+0x38a>
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	681b      	ldr	r3, [r3, #0]
 802eb84:	4a36      	ldr	r2, [pc, #216]	; (802ec60 <HAL_DMA_Init+0x438>)
 802eb86:	4293      	cmp	r3, r2
 802eb88:	d013      	beq.n	802ebb2 <HAL_DMA_Init+0x38a>
 802eb8a:	687b      	ldr	r3, [r7, #4]
 802eb8c:	681b      	ldr	r3, [r3, #0]
 802eb8e:	4a35      	ldr	r2, [pc, #212]	; (802ec64 <HAL_DMA_Init+0x43c>)
 802eb90:	4293      	cmp	r3, r2
 802eb92:	d00e      	beq.n	802ebb2 <HAL_DMA_Init+0x38a>
 802eb94:	687b      	ldr	r3, [r7, #4]
 802eb96:	681b      	ldr	r3, [r3, #0]
 802eb98:	4a33      	ldr	r2, [pc, #204]	; (802ec68 <HAL_DMA_Init+0x440>)
 802eb9a:	4293      	cmp	r3, r2
 802eb9c:	d009      	beq.n	802ebb2 <HAL_DMA_Init+0x38a>
 802eb9e:	687b      	ldr	r3, [r7, #4]
 802eba0:	681b      	ldr	r3, [r3, #0]
 802eba2:	4a32      	ldr	r2, [pc, #200]	; (802ec6c <HAL_DMA_Init+0x444>)
 802eba4:	4293      	cmp	r3, r2
 802eba6:	d004      	beq.n	802ebb2 <HAL_DMA_Init+0x38a>
 802eba8:	687b      	ldr	r3, [r7, #4]
 802ebaa:	681b      	ldr	r3, [r3, #0]
 802ebac:	4a30      	ldr	r2, [pc, #192]	; (802ec70 <HAL_DMA_Init+0x448>)
 802ebae:	4293      	cmp	r3, r2
 802ebb0:	d101      	bne.n	802ebb6 <HAL_DMA_Init+0x38e>
 802ebb2:	2301      	movs	r3, #1
 802ebb4:	e000      	b.n	802ebb8 <HAL_DMA_Init+0x390>
 802ebb6:	2300      	movs	r3, #0
 802ebb8:	2b00      	cmp	r3, #0
 802ebba:	f000 8097 	beq.w	802ecec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802ebbe:	687b      	ldr	r3, [r7, #4]
 802ebc0:	681b      	ldr	r3, [r3, #0]
 802ebc2:	4a24      	ldr	r2, [pc, #144]	; (802ec54 <HAL_DMA_Init+0x42c>)
 802ebc4:	4293      	cmp	r3, r2
 802ebc6:	d021      	beq.n	802ec0c <HAL_DMA_Init+0x3e4>
 802ebc8:	687b      	ldr	r3, [r7, #4]
 802ebca:	681b      	ldr	r3, [r3, #0]
 802ebcc:	4a22      	ldr	r2, [pc, #136]	; (802ec58 <HAL_DMA_Init+0x430>)
 802ebce:	4293      	cmp	r3, r2
 802ebd0:	d01c      	beq.n	802ec0c <HAL_DMA_Init+0x3e4>
 802ebd2:	687b      	ldr	r3, [r7, #4]
 802ebd4:	681b      	ldr	r3, [r3, #0]
 802ebd6:	4a21      	ldr	r2, [pc, #132]	; (802ec5c <HAL_DMA_Init+0x434>)
 802ebd8:	4293      	cmp	r3, r2
 802ebda:	d017      	beq.n	802ec0c <HAL_DMA_Init+0x3e4>
 802ebdc:	687b      	ldr	r3, [r7, #4]
 802ebde:	681b      	ldr	r3, [r3, #0]
 802ebe0:	4a1f      	ldr	r2, [pc, #124]	; (802ec60 <HAL_DMA_Init+0x438>)
 802ebe2:	4293      	cmp	r3, r2
 802ebe4:	d012      	beq.n	802ec0c <HAL_DMA_Init+0x3e4>
 802ebe6:	687b      	ldr	r3, [r7, #4]
 802ebe8:	681b      	ldr	r3, [r3, #0]
 802ebea:	4a1e      	ldr	r2, [pc, #120]	; (802ec64 <HAL_DMA_Init+0x43c>)
 802ebec:	4293      	cmp	r3, r2
 802ebee:	d00d      	beq.n	802ec0c <HAL_DMA_Init+0x3e4>
 802ebf0:	687b      	ldr	r3, [r7, #4]
 802ebf2:	681b      	ldr	r3, [r3, #0]
 802ebf4:	4a1c      	ldr	r2, [pc, #112]	; (802ec68 <HAL_DMA_Init+0x440>)
 802ebf6:	4293      	cmp	r3, r2
 802ebf8:	d008      	beq.n	802ec0c <HAL_DMA_Init+0x3e4>
 802ebfa:	687b      	ldr	r3, [r7, #4]
 802ebfc:	681b      	ldr	r3, [r3, #0]
 802ebfe:	4a1b      	ldr	r2, [pc, #108]	; (802ec6c <HAL_DMA_Init+0x444>)
 802ec00:	4293      	cmp	r3, r2
 802ec02:	d003      	beq.n	802ec0c <HAL_DMA_Init+0x3e4>
 802ec04:	687b      	ldr	r3, [r7, #4]
 802ec06:	681b      	ldr	r3, [r3, #0]
 802ec08:	4a19      	ldr	r2, [pc, #100]	; (802ec70 <HAL_DMA_Init+0x448>)
 802ec0a:	4293      	cmp	r3, r2
 802ec0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802ec0e:	687b      	ldr	r3, [r7, #4]
 802ec10:	2202      	movs	r2, #2
 802ec12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	2200      	movs	r2, #0
 802ec1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802ec1e:	687b      	ldr	r3, [r7, #4]
 802ec20:	681b      	ldr	r3, [r3, #0]
 802ec22:	681b      	ldr	r3, [r3, #0]
 802ec24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802ec26:	697a      	ldr	r2, [r7, #20]
 802ec28:	4b12      	ldr	r3, [pc, #72]	; (802ec74 <HAL_DMA_Init+0x44c>)
 802ec2a:	4013      	ands	r3, r2
 802ec2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ec2e:	687b      	ldr	r3, [r7, #4]
 802ec30:	689b      	ldr	r3, [r3, #8]
 802ec32:	2b40      	cmp	r3, #64	; 0x40
 802ec34:	d020      	beq.n	802ec78 <HAL_DMA_Init+0x450>
 802ec36:	687b      	ldr	r3, [r7, #4]
 802ec38:	689b      	ldr	r3, [r3, #8]
 802ec3a:	2b80      	cmp	r3, #128	; 0x80
 802ec3c:	d102      	bne.n	802ec44 <HAL_DMA_Init+0x41c>
 802ec3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802ec42:	e01a      	b.n	802ec7a <HAL_DMA_Init+0x452>
 802ec44:	2300      	movs	r3, #0
 802ec46:	e018      	b.n	802ec7a <HAL_DMA_Init+0x452>
 802ec48:	fe10803f 	.word	0xfe10803f
 802ec4c:	5c001000 	.word	0x5c001000
 802ec50:	ffff0000 	.word	0xffff0000
 802ec54:	58025408 	.word	0x58025408
 802ec58:	5802541c 	.word	0x5802541c
 802ec5c:	58025430 	.word	0x58025430
 802ec60:	58025444 	.word	0x58025444
 802ec64:	58025458 	.word	0x58025458
 802ec68:	5802546c 	.word	0x5802546c
 802ec6c:	58025480 	.word	0x58025480
 802ec70:	58025494 	.word	0x58025494
 802ec74:	fffe000f 	.word	0xfffe000f
 802ec78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802ec7a:	687a      	ldr	r2, [r7, #4]
 802ec7c:	68d2      	ldr	r2, [r2, #12]
 802ec7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ec80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802ec82:	687b      	ldr	r3, [r7, #4]
 802ec84:	691b      	ldr	r3, [r3, #16]
 802ec86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802ec88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802ec8a:	687b      	ldr	r3, [r7, #4]
 802ec8c:	695b      	ldr	r3, [r3, #20]
 802ec8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802ec90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802ec92:	687b      	ldr	r3, [r7, #4]
 802ec94:	699b      	ldr	r3, [r3, #24]
 802ec96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802ec98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802ec9a:	687b      	ldr	r3, [r7, #4]
 802ec9c:	69db      	ldr	r3, [r3, #28]
 802ec9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802eca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802eca2:	687b      	ldr	r3, [r7, #4]
 802eca4:	6a1b      	ldr	r3, [r3, #32]
 802eca6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802eca8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ecaa:	697a      	ldr	r2, [r7, #20]
 802ecac:	4313      	orrs	r3, r2
 802ecae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802ecb0:	687b      	ldr	r3, [r7, #4]
 802ecb2:	681b      	ldr	r3, [r3, #0]
 802ecb4:	697a      	ldr	r2, [r7, #20]
 802ecb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802ecb8:	687b      	ldr	r3, [r7, #4]
 802ecba:	681b      	ldr	r3, [r3, #0]
 802ecbc:	461a      	mov	r2, r3
 802ecbe:	4b6e      	ldr	r3, [pc, #440]	; (802ee78 <HAL_DMA_Init+0x650>)
 802ecc0:	4413      	add	r3, r2
 802ecc2:	4a6e      	ldr	r2, [pc, #440]	; (802ee7c <HAL_DMA_Init+0x654>)
 802ecc4:	fba2 2303 	umull	r2, r3, r2, r3
 802ecc8:	091b      	lsrs	r3, r3, #4
 802ecca:	009a      	lsls	r2, r3, #2
 802eccc:	687b      	ldr	r3, [r7, #4]
 802ecce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802ecd0:	6878      	ldr	r0, [r7, #4]
 802ecd2:	f002 f9c3 	bl	803105c <DMA_CalcBaseAndBitshift>
 802ecd6:	4603      	mov	r3, r0
 802ecd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802ecda:	687b      	ldr	r3, [r7, #4]
 802ecdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ecde:	f003 031f 	and.w	r3, r3, #31
 802ece2:	2201      	movs	r2, #1
 802ece4:	409a      	lsls	r2, r3
 802ece6:	68fb      	ldr	r3, [r7, #12]
 802ece8:	605a      	str	r2, [r3, #4]
 802ecea:	e008      	b.n	802ecfe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802ecec:	687b      	ldr	r3, [r7, #4]
 802ecee:	2240      	movs	r2, #64	; 0x40
 802ecf0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802ecf2:	687b      	ldr	r3, [r7, #4]
 802ecf4:	2203      	movs	r2, #3
 802ecf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802ecfa:	2301      	movs	r3, #1
 802ecfc:	e0b7      	b.n	802ee6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802ecfe:	687b      	ldr	r3, [r7, #4]
 802ed00:	681b      	ldr	r3, [r3, #0]
 802ed02:	4a5f      	ldr	r2, [pc, #380]	; (802ee80 <HAL_DMA_Init+0x658>)
 802ed04:	4293      	cmp	r3, r2
 802ed06:	d072      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed08:	687b      	ldr	r3, [r7, #4]
 802ed0a:	681b      	ldr	r3, [r3, #0]
 802ed0c:	4a5d      	ldr	r2, [pc, #372]	; (802ee84 <HAL_DMA_Init+0x65c>)
 802ed0e:	4293      	cmp	r3, r2
 802ed10:	d06d      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed12:	687b      	ldr	r3, [r7, #4]
 802ed14:	681b      	ldr	r3, [r3, #0]
 802ed16:	4a5c      	ldr	r2, [pc, #368]	; (802ee88 <HAL_DMA_Init+0x660>)
 802ed18:	4293      	cmp	r3, r2
 802ed1a:	d068      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed1c:	687b      	ldr	r3, [r7, #4]
 802ed1e:	681b      	ldr	r3, [r3, #0]
 802ed20:	4a5a      	ldr	r2, [pc, #360]	; (802ee8c <HAL_DMA_Init+0x664>)
 802ed22:	4293      	cmp	r3, r2
 802ed24:	d063      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed26:	687b      	ldr	r3, [r7, #4]
 802ed28:	681b      	ldr	r3, [r3, #0]
 802ed2a:	4a59      	ldr	r2, [pc, #356]	; (802ee90 <HAL_DMA_Init+0x668>)
 802ed2c:	4293      	cmp	r3, r2
 802ed2e:	d05e      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed30:	687b      	ldr	r3, [r7, #4]
 802ed32:	681b      	ldr	r3, [r3, #0]
 802ed34:	4a57      	ldr	r2, [pc, #348]	; (802ee94 <HAL_DMA_Init+0x66c>)
 802ed36:	4293      	cmp	r3, r2
 802ed38:	d059      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed3a:	687b      	ldr	r3, [r7, #4]
 802ed3c:	681b      	ldr	r3, [r3, #0]
 802ed3e:	4a56      	ldr	r2, [pc, #344]	; (802ee98 <HAL_DMA_Init+0x670>)
 802ed40:	4293      	cmp	r3, r2
 802ed42:	d054      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed44:	687b      	ldr	r3, [r7, #4]
 802ed46:	681b      	ldr	r3, [r3, #0]
 802ed48:	4a54      	ldr	r2, [pc, #336]	; (802ee9c <HAL_DMA_Init+0x674>)
 802ed4a:	4293      	cmp	r3, r2
 802ed4c:	d04f      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed4e:	687b      	ldr	r3, [r7, #4]
 802ed50:	681b      	ldr	r3, [r3, #0]
 802ed52:	4a53      	ldr	r2, [pc, #332]	; (802eea0 <HAL_DMA_Init+0x678>)
 802ed54:	4293      	cmp	r3, r2
 802ed56:	d04a      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed58:	687b      	ldr	r3, [r7, #4]
 802ed5a:	681b      	ldr	r3, [r3, #0]
 802ed5c:	4a51      	ldr	r2, [pc, #324]	; (802eea4 <HAL_DMA_Init+0x67c>)
 802ed5e:	4293      	cmp	r3, r2
 802ed60:	d045      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed62:	687b      	ldr	r3, [r7, #4]
 802ed64:	681b      	ldr	r3, [r3, #0]
 802ed66:	4a50      	ldr	r2, [pc, #320]	; (802eea8 <HAL_DMA_Init+0x680>)
 802ed68:	4293      	cmp	r3, r2
 802ed6a:	d040      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed6c:	687b      	ldr	r3, [r7, #4]
 802ed6e:	681b      	ldr	r3, [r3, #0]
 802ed70:	4a4e      	ldr	r2, [pc, #312]	; (802eeac <HAL_DMA_Init+0x684>)
 802ed72:	4293      	cmp	r3, r2
 802ed74:	d03b      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed76:	687b      	ldr	r3, [r7, #4]
 802ed78:	681b      	ldr	r3, [r3, #0]
 802ed7a:	4a4d      	ldr	r2, [pc, #308]	; (802eeb0 <HAL_DMA_Init+0x688>)
 802ed7c:	4293      	cmp	r3, r2
 802ed7e:	d036      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed80:	687b      	ldr	r3, [r7, #4]
 802ed82:	681b      	ldr	r3, [r3, #0]
 802ed84:	4a4b      	ldr	r2, [pc, #300]	; (802eeb4 <HAL_DMA_Init+0x68c>)
 802ed86:	4293      	cmp	r3, r2
 802ed88:	d031      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed8a:	687b      	ldr	r3, [r7, #4]
 802ed8c:	681b      	ldr	r3, [r3, #0]
 802ed8e:	4a4a      	ldr	r2, [pc, #296]	; (802eeb8 <HAL_DMA_Init+0x690>)
 802ed90:	4293      	cmp	r3, r2
 802ed92:	d02c      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed94:	687b      	ldr	r3, [r7, #4]
 802ed96:	681b      	ldr	r3, [r3, #0]
 802ed98:	4a48      	ldr	r2, [pc, #288]	; (802eebc <HAL_DMA_Init+0x694>)
 802ed9a:	4293      	cmp	r3, r2
 802ed9c:	d027      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ed9e:	687b      	ldr	r3, [r7, #4]
 802eda0:	681b      	ldr	r3, [r3, #0]
 802eda2:	4a47      	ldr	r2, [pc, #284]	; (802eec0 <HAL_DMA_Init+0x698>)
 802eda4:	4293      	cmp	r3, r2
 802eda6:	d022      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802eda8:	687b      	ldr	r3, [r7, #4]
 802edaa:	681b      	ldr	r3, [r3, #0]
 802edac:	4a45      	ldr	r2, [pc, #276]	; (802eec4 <HAL_DMA_Init+0x69c>)
 802edae:	4293      	cmp	r3, r2
 802edb0:	d01d      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802edb2:	687b      	ldr	r3, [r7, #4]
 802edb4:	681b      	ldr	r3, [r3, #0]
 802edb6:	4a44      	ldr	r2, [pc, #272]	; (802eec8 <HAL_DMA_Init+0x6a0>)
 802edb8:	4293      	cmp	r3, r2
 802edba:	d018      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802edbc:	687b      	ldr	r3, [r7, #4]
 802edbe:	681b      	ldr	r3, [r3, #0]
 802edc0:	4a42      	ldr	r2, [pc, #264]	; (802eecc <HAL_DMA_Init+0x6a4>)
 802edc2:	4293      	cmp	r3, r2
 802edc4:	d013      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802edc6:	687b      	ldr	r3, [r7, #4]
 802edc8:	681b      	ldr	r3, [r3, #0]
 802edca:	4a41      	ldr	r2, [pc, #260]	; (802eed0 <HAL_DMA_Init+0x6a8>)
 802edcc:	4293      	cmp	r3, r2
 802edce:	d00e      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802edd0:	687b      	ldr	r3, [r7, #4]
 802edd2:	681b      	ldr	r3, [r3, #0]
 802edd4:	4a3f      	ldr	r2, [pc, #252]	; (802eed4 <HAL_DMA_Init+0x6ac>)
 802edd6:	4293      	cmp	r3, r2
 802edd8:	d009      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802edda:	687b      	ldr	r3, [r7, #4]
 802eddc:	681b      	ldr	r3, [r3, #0]
 802edde:	4a3e      	ldr	r2, [pc, #248]	; (802eed8 <HAL_DMA_Init+0x6b0>)
 802ede0:	4293      	cmp	r3, r2
 802ede2:	d004      	beq.n	802edee <HAL_DMA_Init+0x5c6>
 802ede4:	687b      	ldr	r3, [r7, #4]
 802ede6:	681b      	ldr	r3, [r3, #0]
 802ede8:	4a3c      	ldr	r2, [pc, #240]	; (802eedc <HAL_DMA_Init+0x6b4>)
 802edea:	4293      	cmp	r3, r2
 802edec:	d101      	bne.n	802edf2 <HAL_DMA_Init+0x5ca>
 802edee:	2301      	movs	r3, #1
 802edf0:	e000      	b.n	802edf4 <HAL_DMA_Init+0x5cc>
 802edf2:	2300      	movs	r3, #0
 802edf4:	2b00      	cmp	r3, #0
 802edf6:	d032      	beq.n	802ee5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802edf8:	6878      	ldr	r0, [r7, #4]
 802edfa:	f002 fa5d 	bl	80312b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802edfe:	687b      	ldr	r3, [r7, #4]
 802ee00:	689b      	ldr	r3, [r3, #8]
 802ee02:	2b80      	cmp	r3, #128	; 0x80
 802ee04:	d102      	bne.n	802ee0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802ee06:	687b      	ldr	r3, [r7, #4]
 802ee08:	2200      	movs	r2, #0
 802ee0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802ee0c:	687b      	ldr	r3, [r7, #4]
 802ee0e:	685a      	ldr	r2, [r3, #4]
 802ee10:	687b      	ldr	r3, [r7, #4]
 802ee12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ee14:	b2d2      	uxtb	r2, r2
 802ee16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802ee18:	687b      	ldr	r3, [r7, #4]
 802ee1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ee1c:	687a      	ldr	r2, [r7, #4]
 802ee1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802ee20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802ee22:	687b      	ldr	r3, [r7, #4]
 802ee24:	685b      	ldr	r3, [r3, #4]
 802ee26:	2b00      	cmp	r3, #0
 802ee28:	d010      	beq.n	802ee4c <HAL_DMA_Init+0x624>
 802ee2a:	687b      	ldr	r3, [r7, #4]
 802ee2c:	685b      	ldr	r3, [r3, #4]
 802ee2e:	2b08      	cmp	r3, #8
 802ee30:	d80c      	bhi.n	802ee4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802ee32:	6878      	ldr	r0, [r7, #4]
 802ee34:	f002 fada 	bl	80313ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802ee38:	687b      	ldr	r3, [r7, #4]
 802ee3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ee3c:	2200      	movs	r2, #0
 802ee3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802ee40:	687b      	ldr	r3, [r7, #4]
 802ee42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ee44:	687a      	ldr	r2, [r7, #4]
 802ee46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802ee48:	605a      	str	r2, [r3, #4]
 802ee4a:	e008      	b.n	802ee5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802ee4c:	687b      	ldr	r3, [r7, #4]
 802ee4e:	2200      	movs	r2, #0
 802ee50:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802ee52:	687b      	ldr	r3, [r7, #4]
 802ee54:	2200      	movs	r2, #0
 802ee56:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802ee58:	687b      	ldr	r3, [r7, #4]
 802ee5a:	2200      	movs	r2, #0
 802ee5c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802ee5e:	687b      	ldr	r3, [r7, #4]
 802ee60:	2200      	movs	r2, #0
 802ee62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802ee64:	687b      	ldr	r3, [r7, #4]
 802ee66:	2201      	movs	r2, #1
 802ee68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802ee6c:	2300      	movs	r3, #0
}
 802ee6e:	4618      	mov	r0, r3
 802ee70:	3718      	adds	r7, #24
 802ee72:	46bd      	mov	sp, r7
 802ee74:	bd80      	pop	{r7, pc}
 802ee76:	bf00      	nop
 802ee78:	a7fdabf8 	.word	0xa7fdabf8
 802ee7c:	cccccccd 	.word	0xcccccccd
 802ee80:	40020010 	.word	0x40020010
 802ee84:	40020028 	.word	0x40020028
 802ee88:	40020040 	.word	0x40020040
 802ee8c:	40020058 	.word	0x40020058
 802ee90:	40020070 	.word	0x40020070
 802ee94:	40020088 	.word	0x40020088
 802ee98:	400200a0 	.word	0x400200a0
 802ee9c:	400200b8 	.word	0x400200b8
 802eea0:	40020410 	.word	0x40020410
 802eea4:	40020428 	.word	0x40020428
 802eea8:	40020440 	.word	0x40020440
 802eeac:	40020458 	.word	0x40020458
 802eeb0:	40020470 	.word	0x40020470
 802eeb4:	40020488 	.word	0x40020488
 802eeb8:	400204a0 	.word	0x400204a0
 802eebc:	400204b8 	.word	0x400204b8
 802eec0:	58025408 	.word	0x58025408
 802eec4:	5802541c 	.word	0x5802541c
 802eec8:	58025430 	.word	0x58025430
 802eecc:	58025444 	.word	0x58025444
 802eed0:	58025458 	.word	0x58025458
 802eed4:	5802546c 	.word	0x5802546c
 802eed8:	58025480 	.word	0x58025480
 802eedc:	58025494 	.word	0x58025494

0802eee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802eee0:	b580      	push	{r7, lr}
 802eee2:	b086      	sub	sp, #24
 802eee4:	af00      	add	r7, sp, #0
 802eee6:	60f8      	str	r0, [r7, #12]
 802eee8:	60b9      	str	r1, [r7, #8]
 802eeea:	607a      	str	r2, [r7, #4]
 802eeec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802eeee:	2300      	movs	r3, #0
 802eef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802eef2:	68fb      	ldr	r3, [r7, #12]
 802eef4:	2b00      	cmp	r3, #0
 802eef6:	d101      	bne.n	802eefc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802eef8:	2301      	movs	r3, #1
 802eefa:	e226      	b.n	802f34a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802eefc:	68fb      	ldr	r3, [r7, #12]
 802eefe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802ef02:	2b01      	cmp	r3, #1
 802ef04:	d101      	bne.n	802ef0a <HAL_DMA_Start_IT+0x2a>
 802ef06:	2302      	movs	r3, #2
 802ef08:	e21f      	b.n	802f34a <HAL_DMA_Start_IT+0x46a>
 802ef0a:	68fb      	ldr	r3, [r7, #12]
 802ef0c:	2201      	movs	r2, #1
 802ef0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802ef12:	68fb      	ldr	r3, [r7, #12]
 802ef14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802ef18:	b2db      	uxtb	r3, r3
 802ef1a:	2b01      	cmp	r3, #1
 802ef1c:	f040 820a 	bne.w	802f334 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802ef20:	68fb      	ldr	r3, [r7, #12]
 802ef22:	2202      	movs	r2, #2
 802ef24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802ef28:	68fb      	ldr	r3, [r7, #12]
 802ef2a:	2200      	movs	r2, #0
 802ef2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802ef2e:	68fb      	ldr	r3, [r7, #12]
 802ef30:	681b      	ldr	r3, [r3, #0]
 802ef32:	4a68      	ldr	r2, [pc, #416]	; (802f0d4 <HAL_DMA_Start_IT+0x1f4>)
 802ef34:	4293      	cmp	r3, r2
 802ef36:	d04a      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef38:	68fb      	ldr	r3, [r7, #12]
 802ef3a:	681b      	ldr	r3, [r3, #0]
 802ef3c:	4a66      	ldr	r2, [pc, #408]	; (802f0d8 <HAL_DMA_Start_IT+0x1f8>)
 802ef3e:	4293      	cmp	r3, r2
 802ef40:	d045      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef42:	68fb      	ldr	r3, [r7, #12]
 802ef44:	681b      	ldr	r3, [r3, #0]
 802ef46:	4a65      	ldr	r2, [pc, #404]	; (802f0dc <HAL_DMA_Start_IT+0x1fc>)
 802ef48:	4293      	cmp	r3, r2
 802ef4a:	d040      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef4c:	68fb      	ldr	r3, [r7, #12]
 802ef4e:	681b      	ldr	r3, [r3, #0]
 802ef50:	4a63      	ldr	r2, [pc, #396]	; (802f0e0 <HAL_DMA_Start_IT+0x200>)
 802ef52:	4293      	cmp	r3, r2
 802ef54:	d03b      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef56:	68fb      	ldr	r3, [r7, #12]
 802ef58:	681b      	ldr	r3, [r3, #0]
 802ef5a:	4a62      	ldr	r2, [pc, #392]	; (802f0e4 <HAL_DMA_Start_IT+0x204>)
 802ef5c:	4293      	cmp	r3, r2
 802ef5e:	d036      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef60:	68fb      	ldr	r3, [r7, #12]
 802ef62:	681b      	ldr	r3, [r3, #0]
 802ef64:	4a60      	ldr	r2, [pc, #384]	; (802f0e8 <HAL_DMA_Start_IT+0x208>)
 802ef66:	4293      	cmp	r3, r2
 802ef68:	d031      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef6a:	68fb      	ldr	r3, [r7, #12]
 802ef6c:	681b      	ldr	r3, [r3, #0]
 802ef6e:	4a5f      	ldr	r2, [pc, #380]	; (802f0ec <HAL_DMA_Start_IT+0x20c>)
 802ef70:	4293      	cmp	r3, r2
 802ef72:	d02c      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef74:	68fb      	ldr	r3, [r7, #12]
 802ef76:	681b      	ldr	r3, [r3, #0]
 802ef78:	4a5d      	ldr	r2, [pc, #372]	; (802f0f0 <HAL_DMA_Start_IT+0x210>)
 802ef7a:	4293      	cmp	r3, r2
 802ef7c:	d027      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef7e:	68fb      	ldr	r3, [r7, #12]
 802ef80:	681b      	ldr	r3, [r3, #0]
 802ef82:	4a5c      	ldr	r2, [pc, #368]	; (802f0f4 <HAL_DMA_Start_IT+0x214>)
 802ef84:	4293      	cmp	r3, r2
 802ef86:	d022      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef88:	68fb      	ldr	r3, [r7, #12]
 802ef8a:	681b      	ldr	r3, [r3, #0]
 802ef8c:	4a5a      	ldr	r2, [pc, #360]	; (802f0f8 <HAL_DMA_Start_IT+0x218>)
 802ef8e:	4293      	cmp	r3, r2
 802ef90:	d01d      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef92:	68fb      	ldr	r3, [r7, #12]
 802ef94:	681b      	ldr	r3, [r3, #0]
 802ef96:	4a59      	ldr	r2, [pc, #356]	; (802f0fc <HAL_DMA_Start_IT+0x21c>)
 802ef98:	4293      	cmp	r3, r2
 802ef9a:	d018      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802ef9c:	68fb      	ldr	r3, [r7, #12]
 802ef9e:	681b      	ldr	r3, [r3, #0]
 802efa0:	4a57      	ldr	r2, [pc, #348]	; (802f100 <HAL_DMA_Start_IT+0x220>)
 802efa2:	4293      	cmp	r3, r2
 802efa4:	d013      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802efa6:	68fb      	ldr	r3, [r7, #12]
 802efa8:	681b      	ldr	r3, [r3, #0]
 802efaa:	4a56      	ldr	r2, [pc, #344]	; (802f104 <HAL_DMA_Start_IT+0x224>)
 802efac:	4293      	cmp	r3, r2
 802efae:	d00e      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802efb0:	68fb      	ldr	r3, [r7, #12]
 802efb2:	681b      	ldr	r3, [r3, #0]
 802efb4:	4a54      	ldr	r2, [pc, #336]	; (802f108 <HAL_DMA_Start_IT+0x228>)
 802efb6:	4293      	cmp	r3, r2
 802efb8:	d009      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802efba:	68fb      	ldr	r3, [r7, #12]
 802efbc:	681b      	ldr	r3, [r3, #0]
 802efbe:	4a53      	ldr	r2, [pc, #332]	; (802f10c <HAL_DMA_Start_IT+0x22c>)
 802efc0:	4293      	cmp	r3, r2
 802efc2:	d004      	beq.n	802efce <HAL_DMA_Start_IT+0xee>
 802efc4:	68fb      	ldr	r3, [r7, #12]
 802efc6:	681b      	ldr	r3, [r3, #0]
 802efc8:	4a51      	ldr	r2, [pc, #324]	; (802f110 <HAL_DMA_Start_IT+0x230>)
 802efca:	4293      	cmp	r3, r2
 802efcc:	d108      	bne.n	802efe0 <HAL_DMA_Start_IT+0x100>
 802efce:	68fb      	ldr	r3, [r7, #12]
 802efd0:	681b      	ldr	r3, [r3, #0]
 802efd2:	681a      	ldr	r2, [r3, #0]
 802efd4:	68fb      	ldr	r3, [r7, #12]
 802efd6:	681b      	ldr	r3, [r3, #0]
 802efd8:	f022 0201 	bic.w	r2, r2, #1
 802efdc:	601a      	str	r2, [r3, #0]
 802efde:	e007      	b.n	802eff0 <HAL_DMA_Start_IT+0x110>
 802efe0:	68fb      	ldr	r3, [r7, #12]
 802efe2:	681b      	ldr	r3, [r3, #0]
 802efe4:	681a      	ldr	r2, [r3, #0]
 802efe6:	68fb      	ldr	r3, [r7, #12]
 802efe8:	681b      	ldr	r3, [r3, #0]
 802efea:	f022 0201 	bic.w	r2, r2, #1
 802efee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802eff0:	683b      	ldr	r3, [r7, #0]
 802eff2:	687a      	ldr	r2, [r7, #4]
 802eff4:	68b9      	ldr	r1, [r7, #8]
 802eff6:	68f8      	ldr	r0, [r7, #12]
 802eff8:	f001 fe84 	bl	8030d04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802effc:	68fb      	ldr	r3, [r7, #12]
 802effe:	681b      	ldr	r3, [r3, #0]
 802f000:	4a34      	ldr	r2, [pc, #208]	; (802f0d4 <HAL_DMA_Start_IT+0x1f4>)
 802f002:	4293      	cmp	r3, r2
 802f004:	d04a      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f006:	68fb      	ldr	r3, [r7, #12]
 802f008:	681b      	ldr	r3, [r3, #0]
 802f00a:	4a33      	ldr	r2, [pc, #204]	; (802f0d8 <HAL_DMA_Start_IT+0x1f8>)
 802f00c:	4293      	cmp	r3, r2
 802f00e:	d045      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f010:	68fb      	ldr	r3, [r7, #12]
 802f012:	681b      	ldr	r3, [r3, #0]
 802f014:	4a31      	ldr	r2, [pc, #196]	; (802f0dc <HAL_DMA_Start_IT+0x1fc>)
 802f016:	4293      	cmp	r3, r2
 802f018:	d040      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f01a:	68fb      	ldr	r3, [r7, #12]
 802f01c:	681b      	ldr	r3, [r3, #0]
 802f01e:	4a30      	ldr	r2, [pc, #192]	; (802f0e0 <HAL_DMA_Start_IT+0x200>)
 802f020:	4293      	cmp	r3, r2
 802f022:	d03b      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f024:	68fb      	ldr	r3, [r7, #12]
 802f026:	681b      	ldr	r3, [r3, #0]
 802f028:	4a2e      	ldr	r2, [pc, #184]	; (802f0e4 <HAL_DMA_Start_IT+0x204>)
 802f02a:	4293      	cmp	r3, r2
 802f02c:	d036      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f02e:	68fb      	ldr	r3, [r7, #12]
 802f030:	681b      	ldr	r3, [r3, #0]
 802f032:	4a2d      	ldr	r2, [pc, #180]	; (802f0e8 <HAL_DMA_Start_IT+0x208>)
 802f034:	4293      	cmp	r3, r2
 802f036:	d031      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f038:	68fb      	ldr	r3, [r7, #12]
 802f03a:	681b      	ldr	r3, [r3, #0]
 802f03c:	4a2b      	ldr	r2, [pc, #172]	; (802f0ec <HAL_DMA_Start_IT+0x20c>)
 802f03e:	4293      	cmp	r3, r2
 802f040:	d02c      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f042:	68fb      	ldr	r3, [r7, #12]
 802f044:	681b      	ldr	r3, [r3, #0]
 802f046:	4a2a      	ldr	r2, [pc, #168]	; (802f0f0 <HAL_DMA_Start_IT+0x210>)
 802f048:	4293      	cmp	r3, r2
 802f04a:	d027      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f04c:	68fb      	ldr	r3, [r7, #12]
 802f04e:	681b      	ldr	r3, [r3, #0]
 802f050:	4a28      	ldr	r2, [pc, #160]	; (802f0f4 <HAL_DMA_Start_IT+0x214>)
 802f052:	4293      	cmp	r3, r2
 802f054:	d022      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f056:	68fb      	ldr	r3, [r7, #12]
 802f058:	681b      	ldr	r3, [r3, #0]
 802f05a:	4a27      	ldr	r2, [pc, #156]	; (802f0f8 <HAL_DMA_Start_IT+0x218>)
 802f05c:	4293      	cmp	r3, r2
 802f05e:	d01d      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f060:	68fb      	ldr	r3, [r7, #12]
 802f062:	681b      	ldr	r3, [r3, #0]
 802f064:	4a25      	ldr	r2, [pc, #148]	; (802f0fc <HAL_DMA_Start_IT+0x21c>)
 802f066:	4293      	cmp	r3, r2
 802f068:	d018      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f06a:	68fb      	ldr	r3, [r7, #12]
 802f06c:	681b      	ldr	r3, [r3, #0]
 802f06e:	4a24      	ldr	r2, [pc, #144]	; (802f100 <HAL_DMA_Start_IT+0x220>)
 802f070:	4293      	cmp	r3, r2
 802f072:	d013      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f074:	68fb      	ldr	r3, [r7, #12]
 802f076:	681b      	ldr	r3, [r3, #0]
 802f078:	4a22      	ldr	r2, [pc, #136]	; (802f104 <HAL_DMA_Start_IT+0x224>)
 802f07a:	4293      	cmp	r3, r2
 802f07c:	d00e      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f07e:	68fb      	ldr	r3, [r7, #12]
 802f080:	681b      	ldr	r3, [r3, #0]
 802f082:	4a21      	ldr	r2, [pc, #132]	; (802f108 <HAL_DMA_Start_IT+0x228>)
 802f084:	4293      	cmp	r3, r2
 802f086:	d009      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f088:	68fb      	ldr	r3, [r7, #12]
 802f08a:	681b      	ldr	r3, [r3, #0]
 802f08c:	4a1f      	ldr	r2, [pc, #124]	; (802f10c <HAL_DMA_Start_IT+0x22c>)
 802f08e:	4293      	cmp	r3, r2
 802f090:	d004      	beq.n	802f09c <HAL_DMA_Start_IT+0x1bc>
 802f092:	68fb      	ldr	r3, [r7, #12]
 802f094:	681b      	ldr	r3, [r3, #0]
 802f096:	4a1e      	ldr	r2, [pc, #120]	; (802f110 <HAL_DMA_Start_IT+0x230>)
 802f098:	4293      	cmp	r3, r2
 802f09a:	d101      	bne.n	802f0a0 <HAL_DMA_Start_IT+0x1c0>
 802f09c:	2301      	movs	r3, #1
 802f09e:	e000      	b.n	802f0a2 <HAL_DMA_Start_IT+0x1c2>
 802f0a0:	2300      	movs	r3, #0
 802f0a2:	2b00      	cmp	r3, #0
 802f0a4:	d036      	beq.n	802f114 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802f0a6:	68fb      	ldr	r3, [r7, #12]
 802f0a8:	681b      	ldr	r3, [r3, #0]
 802f0aa:	681b      	ldr	r3, [r3, #0]
 802f0ac:	f023 021e 	bic.w	r2, r3, #30
 802f0b0:	68fb      	ldr	r3, [r7, #12]
 802f0b2:	681b      	ldr	r3, [r3, #0]
 802f0b4:	f042 0216 	orr.w	r2, r2, #22
 802f0b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802f0ba:	68fb      	ldr	r3, [r7, #12]
 802f0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f0be:	2b00      	cmp	r3, #0
 802f0c0:	d03e      	beq.n	802f140 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802f0c2:	68fb      	ldr	r3, [r7, #12]
 802f0c4:	681b      	ldr	r3, [r3, #0]
 802f0c6:	681a      	ldr	r2, [r3, #0]
 802f0c8:	68fb      	ldr	r3, [r7, #12]
 802f0ca:	681b      	ldr	r3, [r3, #0]
 802f0cc:	f042 0208 	orr.w	r2, r2, #8
 802f0d0:	601a      	str	r2, [r3, #0]
 802f0d2:	e035      	b.n	802f140 <HAL_DMA_Start_IT+0x260>
 802f0d4:	40020010 	.word	0x40020010
 802f0d8:	40020028 	.word	0x40020028
 802f0dc:	40020040 	.word	0x40020040
 802f0e0:	40020058 	.word	0x40020058
 802f0e4:	40020070 	.word	0x40020070
 802f0e8:	40020088 	.word	0x40020088
 802f0ec:	400200a0 	.word	0x400200a0
 802f0f0:	400200b8 	.word	0x400200b8
 802f0f4:	40020410 	.word	0x40020410
 802f0f8:	40020428 	.word	0x40020428
 802f0fc:	40020440 	.word	0x40020440
 802f100:	40020458 	.word	0x40020458
 802f104:	40020470 	.word	0x40020470
 802f108:	40020488 	.word	0x40020488
 802f10c:	400204a0 	.word	0x400204a0
 802f110:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802f114:	68fb      	ldr	r3, [r7, #12]
 802f116:	681b      	ldr	r3, [r3, #0]
 802f118:	681b      	ldr	r3, [r3, #0]
 802f11a:	f023 020e 	bic.w	r2, r3, #14
 802f11e:	68fb      	ldr	r3, [r7, #12]
 802f120:	681b      	ldr	r3, [r3, #0]
 802f122:	f042 020a 	orr.w	r2, r2, #10
 802f126:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802f128:	68fb      	ldr	r3, [r7, #12]
 802f12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f12c:	2b00      	cmp	r3, #0
 802f12e:	d007      	beq.n	802f140 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802f130:	68fb      	ldr	r3, [r7, #12]
 802f132:	681b      	ldr	r3, [r3, #0]
 802f134:	681a      	ldr	r2, [r3, #0]
 802f136:	68fb      	ldr	r3, [r7, #12]
 802f138:	681b      	ldr	r3, [r3, #0]
 802f13a:	f042 0204 	orr.w	r2, r2, #4
 802f13e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f140:	68fb      	ldr	r3, [r7, #12]
 802f142:	681b      	ldr	r3, [r3, #0]
 802f144:	4a83      	ldr	r2, [pc, #524]	; (802f354 <HAL_DMA_Start_IT+0x474>)
 802f146:	4293      	cmp	r3, r2
 802f148:	d072      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f14a:	68fb      	ldr	r3, [r7, #12]
 802f14c:	681b      	ldr	r3, [r3, #0]
 802f14e:	4a82      	ldr	r2, [pc, #520]	; (802f358 <HAL_DMA_Start_IT+0x478>)
 802f150:	4293      	cmp	r3, r2
 802f152:	d06d      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f154:	68fb      	ldr	r3, [r7, #12]
 802f156:	681b      	ldr	r3, [r3, #0]
 802f158:	4a80      	ldr	r2, [pc, #512]	; (802f35c <HAL_DMA_Start_IT+0x47c>)
 802f15a:	4293      	cmp	r3, r2
 802f15c:	d068      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f15e:	68fb      	ldr	r3, [r7, #12]
 802f160:	681b      	ldr	r3, [r3, #0]
 802f162:	4a7f      	ldr	r2, [pc, #508]	; (802f360 <HAL_DMA_Start_IT+0x480>)
 802f164:	4293      	cmp	r3, r2
 802f166:	d063      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f168:	68fb      	ldr	r3, [r7, #12]
 802f16a:	681b      	ldr	r3, [r3, #0]
 802f16c:	4a7d      	ldr	r2, [pc, #500]	; (802f364 <HAL_DMA_Start_IT+0x484>)
 802f16e:	4293      	cmp	r3, r2
 802f170:	d05e      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f172:	68fb      	ldr	r3, [r7, #12]
 802f174:	681b      	ldr	r3, [r3, #0]
 802f176:	4a7c      	ldr	r2, [pc, #496]	; (802f368 <HAL_DMA_Start_IT+0x488>)
 802f178:	4293      	cmp	r3, r2
 802f17a:	d059      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f17c:	68fb      	ldr	r3, [r7, #12]
 802f17e:	681b      	ldr	r3, [r3, #0]
 802f180:	4a7a      	ldr	r2, [pc, #488]	; (802f36c <HAL_DMA_Start_IT+0x48c>)
 802f182:	4293      	cmp	r3, r2
 802f184:	d054      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f186:	68fb      	ldr	r3, [r7, #12]
 802f188:	681b      	ldr	r3, [r3, #0]
 802f18a:	4a79      	ldr	r2, [pc, #484]	; (802f370 <HAL_DMA_Start_IT+0x490>)
 802f18c:	4293      	cmp	r3, r2
 802f18e:	d04f      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f190:	68fb      	ldr	r3, [r7, #12]
 802f192:	681b      	ldr	r3, [r3, #0]
 802f194:	4a77      	ldr	r2, [pc, #476]	; (802f374 <HAL_DMA_Start_IT+0x494>)
 802f196:	4293      	cmp	r3, r2
 802f198:	d04a      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f19a:	68fb      	ldr	r3, [r7, #12]
 802f19c:	681b      	ldr	r3, [r3, #0]
 802f19e:	4a76      	ldr	r2, [pc, #472]	; (802f378 <HAL_DMA_Start_IT+0x498>)
 802f1a0:	4293      	cmp	r3, r2
 802f1a2:	d045      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1a4:	68fb      	ldr	r3, [r7, #12]
 802f1a6:	681b      	ldr	r3, [r3, #0]
 802f1a8:	4a74      	ldr	r2, [pc, #464]	; (802f37c <HAL_DMA_Start_IT+0x49c>)
 802f1aa:	4293      	cmp	r3, r2
 802f1ac:	d040      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1ae:	68fb      	ldr	r3, [r7, #12]
 802f1b0:	681b      	ldr	r3, [r3, #0]
 802f1b2:	4a73      	ldr	r2, [pc, #460]	; (802f380 <HAL_DMA_Start_IT+0x4a0>)
 802f1b4:	4293      	cmp	r3, r2
 802f1b6:	d03b      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1b8:	68fb      	ldr	r3, [r7, #12]
 802f1ba:	681b      	ldr	r3, [r3, #0]
 802f1bc:	4a71      	ldr	r2, [pc, #452]	; (802f384 <HAL_DMA_Start_IT+0x4a4>)
 802f1be:	4293      	cmp	r3, r2
 802f1c0:	d036      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1c2:	68fb      	ldr	r3, [r7, #12]
 802f1c4:	681b      	ldr	r3, [r3, #0]
 802f1c6:	4a70      	ldr	r2, [pc, #448]	; (802f388 <HAL_DMA_Start_IT+0x4a8>)
 802f1c8:	4293      	cmp	r3, r2
 802f1ca:	d031      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1cc:	68fb      	ldr	r3, [r7, #12]
 802f1ce:	681b      	ldr	r3, [r3, #0]
 802f1d0:	4a6e      	ldr	r2, [pc, #440]	; (802f38c <HAL_DMA_Start_IT+0x4ac>)
 802f1d2:	4293      	cmp	r3, r2
 802f1d4:	d02c      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1d6:	68fb      	ldr	r3, [r7, #12]
 802f1d8:	681b      	ldr	r3, [r3, #0]
 802f1da:	4a6d      	ldr	r2, [pc, #436]	; (802f390 <HAL_DMA_Start_IT+0x4b0>)
 802f1dc:	4293      	cmp	r3, r2
 802f1de:	d027      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1e0:	68fb      	ldr	r3, [r7, #12]
 802f1e2:	681b      	ldr	r3, [r3, #0]
 802f1e4:	4a6b      	ldr	r2, [pc, #428]	; (802f394 <HAL_DMA_Start_IT+0x4b4>)
 802f1e6:	4293      	cmp	r3, r2
 802f1e8:	d022      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1ea:	68fb      	ldr	r3, [r7, #12]
 802f1ec:	681b      	ldr	r3, [r3, #0]
 802f1ee:	4a6a      	ldr	r2, [pc, #424]	; (802f398 <HAL_DMA_Start_IT+0x4b8>)
 802f1f0:	4293      	cmp	r3, r2
 802f1f2:	d01d      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1f4:	68fb      	ldr	r3, [r7, #12]
 802f1f6:	681b      	ldr	r3, [r3, #0]
 802f1f8:	4a68      	ldr	r2, [pc, #416]	; (802f39c <HAL_DMA_Start_IT+0x4bc>)
 802f1fa:	4293      	cmp	r3, r2
 802f1fc:	d018      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f1fe:	68fb      	ldr	r3, [r7, #12]
 802f200:	681b      	ldr	r3, [r3, #0]
 802f202:	4a67      	ldr	r2, [pc, #412]	; (802f3a0 <HAL_DMA_Start_IT+0x4c0>)
 802f204:	4293      	cmp	r3, r2
 802f206:	d013      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f208:	68fb      	ldr	r3, [r7, #12]
 802f20a:	681b      	ldr	r3, [r3, #0]
 802f20c:	4a65      	ldr	r2, [pc, #404]	; (802f3a4 <HAL_DMA_Start_IT+0x4c4>)
 802f20e:	4293      	cmp	r3, r2
 802f210:	d00e      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f212:	68fb      	ldr	r3, [r7, #12]
 802f214:	681b      	ldr	r3, [r3, #0]
 802f216:	4a64      	ldr	r2, [pc, #400]	; (802f3a8 <HAL_DMA_Start_IT+0x4c8>)
 802f218:	4293      	cmp	r3, r2
 802f21a:	d009      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f21c:	68fb      	ldr	r3, [r7, #12]
 802f21e:	681b      	ldr	r3, [r3, #0]
 802f220:	4a62      	ldr	r2, [pc, #392]	; (802f3ac <HAL_DMA_Start_IT+0x4cc>)
 802f222:	4293      	cmp	r3, r2
 802f224:	d004      	beq.n	802f230 <HAL_DMA_Start_IT+0x350>
 802f226:	68fb      	ldr	r3, [r7, #12]
 802f228:	681b      	ldr	r3, [r3, #0]
 802f22a:	4a61      	ldr	r2, [pc, #388]	; (802f3b0 <HAL_DMA_Start_IT+0x4d0>)
 802f22c:	4293      	cmp	r3, r2
 802f22e:	d101      	bne.n	802f234 <HAL_DMA_Start_IT+0x354>
 802f230:	2301      	movs	r3, #1
 802f232:	e000      	b.n	802f236 <HAL_DMA_Start_IT+0x356>
 802f234:	2300      	movs	r3, #0
 802f236:	2b00      	cmp	r3, #0
 802f238:	d01a      	beq.n	802f270 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802f23a:	68fb      	ldr	r3, [r7, #12]
 802f23c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f23e:	681b      	ldr	r3, [r3, #0]
 802f240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802f244:	2b00      	cmp	r3, #0
 802f246:	d007      	beq.n	802f258 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802f248:	68fb      	ldr	r3, [r7, #12]
 802f24a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f24c:	681a      	ldr	r2, [r3, #0]
 802f24e:	68fb      	ldr	r3, [r7, #12]
 802f250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802f256:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802f258:	68fb      	ldr	r3, [r7, #12]
 802f25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f25c:	2b00      	cmp	r3, #0
 802f25e:	d007      	beq.n	802f270 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802f260:	68fb      	ldr	r3, [r7, #12]
 802f262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f264:	681a      	ldr	r2, [r3, #0]
 802f266:	68fb      	ldr	r3, [r7, #12]
 802f268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f26a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802f26e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802f270:	68fb      	ldr	r3, [r7, #12]
 802f272:	681b      	ldr	r3, [r3, #0]
 802f274:	4a37      	ldr	r2, [pc, #220]	; (802f354 <HAL_DMA_Start_IT+0x474>)
 802f276:	4293      	cmp	r3, r2
 802f278:	d04a      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f27a:	68fb      	ldr	r3, [r7, #12]
 802f27c:	681b      	ldr	r3, [r3, #0]
 802f27e:	4a36      	ldr	r2, [pc, #216]	; (802f358 <HAL_DMA_Start_IT+0x478>)
 802f280:	4293      	cmp	r3, r2
 802f282:	d045      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f284:	68fb      	ldr	r3, [r7, #12]
 802f286:	681b      	ldr	r3, [r3, #0]
 802f288:	4a34      	ldr	r2, [pc, #208]	; (802f35c <HAL_DMA_Start_IT+0x47c>)
 802f28a:	4293      	cmp	r3, r2
 802f28c:	d040      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f28e:	68fb      	ldr	r3, [r7, #12]
 802f290:	681b      	ldr	r3, [r3, #0]
 802f292:	4a33      	ldr	r2, [pc, #204]	; (802f360 <HAL_DMA_Start_IT+0x480>)
 802f294:	4293      	cmp	r3, r2
 802f296:	d03b      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f298:	68fb      	ldr	r3, [r7, #12]
 802f29a:	681b      	ldr	r3, [r3, #0]
 802f29c:	4a31      	ldr	r2, [pc, #196]	; (802f364 <HAL_DMA_Start_IT+0x484>)
 802f29e:	4293      	cmp	r3, r2
 802f2a0:	d036      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2a2:	68fb      	ldr	r3, [r7, #12]
 802f2a4:	681b      	ldr	r3, [r3, #0]
 802f2a6:	4a30      	ldr	r2, [pc, #192]	; (802f368 <HAL_DMA_Start_IT+0x488>)
 802f2a8:	4293      	cmp	r3, r2
 802f2aa:	d031      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2ac:	68fb      	ldr	r3, [r7, #12]
 802f2ae:	681b      	ldr	r3, [r3, #0]
 802f2b0:	4a2e      	ldr	r2, [pc, #184]	; (802f36c <HAL_DMA_Start_IT+0x48c>)
 802f2b2:	4293      	cmp	r3, r2
 802f2b4:	d02c      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2b6:	68fb      	ldr	r3, [r7, #12]
 802f2b8:	681b      	ldr	r3, [r3, #0]
 802f2ba:	4a2d      	ldr	r2, [pc, #180]	; (802f370 <HAL_DMA_Start_IT+0x490>)
 802f2bc:	4293      	cmp	r3, r2
 802f2be:	d027      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2c0:	68fb      	ldr	r3, [r7, #12]
 802f2c2:	681b      	ldr	r3, [r3, #0]
 802f2c4:	4a2b      	ldr	r2, [pc, #172]	; (802f374 <HAL_DMA_Start_IT+0x494>)
 802f2c6:	4293      	cmp	r3, r2
 802f2c8:	d022      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2ca:	68fb      	ldr	r3, [r7, #12]
 802f2cc:	681b      	ldr	r3, [r3, #0]
 802f2ce:	4a2a      	ldr	r2, [pc, #168]	; (802f378 <HAL_DMA_Start_IT+0x498>)
 802f2d0:	4293      	cmp	r3, r2
 802f2d2:	d01d      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2d4:	68fb      	ldr	r3, [r7, #12]
 802f2d6:	681b      	ldr	r3, [r3, #0]
 802f2d8:	4a28      	ldr	r2, [pc, #160]	; (802f37c <HAL_DMA_Start_IT+0x49c>)
 802f2da:	4293      	cmp	r3, r2
 802f2dc:	d018      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2de:	68fb      	ldr	r3, [r7, #12]
 802f2e0:	681b      	ldr	r3, [r3, #0]
 802f2e2:	4a27      	ldr	r2, [pc, #156]	; (802f380 <HAL_DMA_Start_IT+0x4a0>)
 802f2e4:	4293      	cmp	r3, r2
 802f2e6:	d013      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2e8:	68fb      	ldr	r3, [r7, #12]
 802f2ea:	681b      	ldr	r3, [r3, #0]
 802f2ec:	4a25      	ldr	r2, [pc, #148]	; (802f384 <HAL_DMA_Start_IT+0x4a4>)
 802f2ee:	4293      	cmp	r3, r2
 802f2f0:	d00e      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2f2:	68fb      	ldr	r3, [r7, #12]
 802f2f4:	681b      	ldr	r3, [r3, #0]
 802f2f6:	4a24      	ldr	r2, [pc, #144]	; (802f388 <HAL_DMA_Start_IT+0x4a8>)
 802f2f8:	4293      	cmp	r3, r2
 802f2fa:	d009      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f2fc:	68fb      	ldr	r3, [r7, #12]
 802f2fe:	681b      	ldr	r3, [r3, #0]
 802f300:	4a22      	ldr	r2, [pc, #136]	; (802f38c <HAL_DMA_Start_IT+0x4ac>)
 802f302:	4293      	cmp	r3, r2
 802f304:	d004      	beq.n	802f310 <HAL_DMA_Start_IT+0x430>
 802f306:	68fb      	ldr	r3, [r7, #12]
 802f308:	681b      	ldr	r3, [r3, #0]
 802f30a:	4a21      	ldr	r2, [pc, #132]	; (802f390 <HAL_DMA_Start_IT+0x4b0>)
 802f30c:	4293      	cmp	r3, r2
 802f30e:	d108      	bne.n	802f322 <HAL_DMA_Start_IT+0x442>
 802f310:	68fb      	ldr	r3, [r7, #12]
 802f312:	681b      	ldr	r3, [r3, #0]
 802f314:	681a      	ldr	r2, [r3, #0]
 802f316:	68fb      	ldr	r3, [r7, #12]
 802f318:	681b      	ldr	r3, [r3, #0]
 802f31a:	f042 0201 	orr.w	r2, r2, #1
 802f31e:	601a      	str	r2, [r3, #0]
 802f320:	e012      	b.n	802f348 <HAL_DMA_Start_IT+0x468>
 802f322:	68fb      	ldr	r3, [r7, #12]
 802f324:	681b      	ldr	r3, [r3, #0]
 802f326:	681a      	ldr	r2, [r3, #0]
 802f328:	68fb      	ldr	r3, [r7, #12]
 802f32a:	681b      	ldr	r3, [r3, #0]
 802f32c:	f042 0201 	orr.w	r2, r2, #1
 802f330:	601a      	str	r2, [r3, #0]
 802f332:	e009      	b.n	802f348 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802f334:	68fb      	ldr	r3, [r7, #12]
 802f336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802f33a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802f33c:	68fb      	ldr	r3, [r7, #12]
 802f33e:	2200      	movs	r2, #0
 802f340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802f344:	2301      	movs	r3, #1
 802f346:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802f348:	7dfb      	ldrb	r3, [r7, #23]
}
 802f34a:	4618      	mov	r0, r3
 802f34c:	3718      	adds	r7, #24
 802f34e:	46bd      	mov	sp, r7
 802f350:	bd80      	pop	{r7, pc}
 802f352:	bf00      	nop
 802f354:	40020010 	.word	0x40020010
 802f358:	40020028 	.word	0x40020028
 802f35c:	40020040 	.word	0x40020040
 802f360:	40020058 	.word	0x40020058
 802f364:	40020070 	.word	0x40020070
 802f368:	40020088 	.word	0x40020088
 802f36c:	400200a0 	.word	0x400200a0
 802f370:	400200b8 	.word	0x400200b8
 802f374:	40020410 	.word	0x40020410
 802f378:	40020428 	.word	0x40020428
 802f37c:	40020440 	.word	0x40020440
 802f380:	40020458 	.word	0x40020458
 802f384:	40020470 	.word	0x40020470
 802f388:	40020488 	.word	0x40020488
 802f38c:	400204a0 	.word	0x400204a0
 802f390:	400204b8 	.word	0x400204b8
 802f394:	58025408 	.word	0x58025408
 802f398:	5802541c 	.word	0x5802541c
 802f39c:	58025430 	.word	0x58025430
 802f3a0:	58025444 	.word	0x58025444
 802f3a4:	58025458 	.word	0x58025458
 802f3a8:	5802546c 	.word	0x5802546c
 802f3ac:	58025480 	.word	0x58025480
 802f3b0:	58025494 	.word	0x58025494

0802f3b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802f3b4:	b580      	push	{r7, lr}
 802f3b6:	b086      	sub	sp, #24
 802f3b8:	af00      	add	r7, sp, #0
 802f3ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802f3bc:	f7fe fd38 	bl	802de30 <HAL_GetTick>
 802f3c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802f3c2:	687b      	ldr	r3, [r7, #4]
 802f3c4:	2b00      	cmp	r3, #0
 802f3c6:	d101      	bne.n	802f3cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802f3c8:	2301      	movs	r3, #1
 802f3ca:	e2dc      	b.n	802f986 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802f3cc:	687b      	ldr	r3, [r7, #4]
 802f3ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f3d2:	b2db      	uxtb	r3, r3
 802f3d4:	2b02      	cmp	r3, #2
 802f3d6:	d008      	beq.n	802f3ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802f3d8:	687b      	ldr	r3, [r7, #4]
 802f3da:	2280      	movs	r2, #128	; 0x80
 802f3dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802f3de:	687b      	ldr	r3, [r7, #4]
 802f3e0:	2200      	movs	r2, #0
 802f3e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802f3e6:	2301      	movs	r3, #1
 802f3e8:	e2cd      	b.n	802f986 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f3ea:	687b      	ldr	r3, [r7, #4]
 802f3ec:	681b      	ldr	r3, [r3, #0]
 802f3ee:	4a76      	ldr	r2, [pc, #472]	; (802f5c8 <HAL_DMA_Abort+0x214>)
 802f3f0:	4293      	cmp	r3, r2
 802f3f2:	d04a      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f3f4:	687b      	ldr	r3, [r7, #4]
 802f3f6:	681b      	ldr	r3, [r3, #0]
 802f3f8:	4a74      	ldr	r2, [pc, #464]	; (802f5cc <HAL_DMA_Abort+0x218>)
 802f3fa:	4293      	cmp	r3, r2
 802f3fc:	d045      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f3fe:	687b      	ldr	r3, [r7, #4]
 802f400:	681b      	ldr	r3, [r3, #0]
 802f402:	4a73      	ldr	r2, [pc, #460]	; (802f5d0 <HAL_DMA_Abort+0x21c>)
 802f404:	4293      	cmp	r3, r2
 802f406:	d040      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f408:	687b      	ldr	r3, [r7, #4]
 802f40a:	681b      	ldr	r3, [r3, #0]
 802f40c:	4a71      	ldr	r2, [pc, #452]	; (802f5d4 <HAL_DMA_Abort+0x220>)
 802f40e:	4293      	cmp	r3, r2
 802f410:	d03b      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f412:	687b      	ldr	r3, [r7, #4]
 802f414:	681b      	ldr	r3, [r3, #0]
 802f416:	4a70      	ldr	r2, [pc, #448]	; (802f5d8 <HAL_DMA_Abort+0x224>)
 802f418:	4293      	cmp	r3, r2
 802f41a:	d036      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f41c:	687b      	ldr	r3, [r7, #4]
 802f41e:	681b      	ldr	r3, [r3, #0]
 802f420:	4a6e      	ldr	r2, [pc, #440]	; (802f5dc <HAL_DMA_Abort+0x228>)
 802f422:	4293      	cmp	r3, r2
 802f424:	d031      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f426:	687b      	ldr	r3, [r7, #4]
 802f428:	681b      	ldr	r3, [r3, #0]
 802f42a:	4a6d      	ldr	r2, [pc, #436]	; (802f5e0 <HAL_DMA_Abort+0x22c>)
 802f42c:	4293      	cmp	r3, r2
 802f42e:	d02c      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f430:	687b      	ldr	r3, [r7, #4]
 802f432:	681b      	ldr	r3, [r3, #0]
 802f434:	4a6b      	ldr	r2, [pc, #428]	; (802f5e4 <HAL_DMA_Abort+0x230>)
 802f436:	4293      	cmp	r3, r2
 802f438:	d027      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f43a:	687b      	ldr	r3, [r7, #4]
 802f43c:	681b      	ldr	r3, [r3, #0]
 802f43e:	4a6a      	ldr	r2, [pc, #424]	; (802f5e8 <HAL_DMA_Abort+0x234>)
 802f440:	4293      	cmp	r3, r2
 802f442:	d022      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f444:	687b      	ldr	r3, [r7, #4]
 802f446:	681b      	ldr	r3, [r3, #0]
 802f448:	4a68      	ldr	r2, [pc, #416]	; (802f5ec <HAL_DMA_Abort+0x238>)
 802f44a:	4293      	cmp	r3, r2
 802f44c:	d01d      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f44e:	687b      	ldr	r3, [r7, #4]
 802f450:	681b      	ldr	r3, [r3, #0]
 802f452:	4a67      	ldr	r2, [pc, #412]	; (802f5f0 <HAL_DMA_Abort+0x23c>)
 802f454:	4293      	cmp	r3, r2
 802f456:	d018      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f458:	687b      	ldr	r3, [r7, #4]
 802f45a:	681b      	ldr	r3, [r3, #0]
 802f45c:	4a65      	ldr	r2, [pc, #404]	; (802f5f4 <HAL_DMA_Abort+0x240>)
 802f45e:	4293      	cmp	r3, r2
 802f460:	d013      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f462:	687b      	ldr	r3, [r7, #4]
 802f464:	681b      	ldr	r3, [r3, #0]
 802f466:	4a64      	ldr	r2, [pc, #400]	; (802f5f8 <HAL_DMA_Abort+0x244>)
 802f468:	4293      	cmp	r3, r2
 802f46a:	d00e      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f46c:	687b      	ldr	r3, [r7, #4]
 802f46e:	681b      	ldr	r3, [r3, #0]
 802f470:	4a62      	ldr	r2, [pc, #392]	; (802f5fc <HAL_DMA_Abort+0x248>)
 802f472:	4293      	cmp	r3, r2
 802f474:	d009      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f476:	687b      	ldr	r3, [r7, #4]
 802f478:	681b      	ldr	r3, [r3, #0]
 802f47a:	4a61      	ldr	r2, [pc, #388]	; (802f600 <HAL_DMA_Abort+0x24c>)
 802f47c:	4293      	cmp	r3, r2
 802f47e:	d004      	beq.n	802f48a <HAL_DMA_Abort+0xd6>
 802f480:	687b      	ldr	r3, [r7, #4]
 802f482:	681b      	ldr	r3, [r3, #0]
 802f484:	4a5f      	ldr	r2, [pc, #380]	; (802f604 <HAL_DMA_Abort+0x250>)
 802f486:	4293      	cmp	r3, r2
 802f488:	d101      	bne.n	802f48e <HAL_DMA_Abort+0xda>
 802f48a:	2301      	movs	r3, #1
 802f48c:	e000      	b.n	802f490 <HAL_DMA_Abort+0xdc>
 802f48e:	2300      	movs	r3, #0
 802f490:	2b00      	cmp	r3, #0
 802f492:	d013      	beq.n	802f4bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802f494:	687b      	ldr	r3, [r7, #4]
 802f496:	681b      	ldr	r3, [r3, #0]
 802f498:	681a      	ldr	r2, [r3, #0]
 802f49a:	687b      	ldr	r3, [r7, #4]
 802f49c:	681b      	ldr	r3, [r3, #0]
 802f49e:	f022 021e 	bic.w	r2, r2, #30
 802f4a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802f4a4:	687b      	ldr	r3, [r7, #4]
 802f4a6:	681b      	ldr	r3, [r3, #0]
 802f4a8:	695a      	ldr	r2, [r3, #20]
 802f4aa:	687b      	ldr	r3, [r7, #4]
 802f4ac:	681b      	ldr	r3, [r3, #0]
 802f4ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802f4b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802f4b4:	687b      	ldr	r3, [r7, #4]
 802f4b6:	681b      	ldr	r3, [r3, #0]
 802f4b8:	617b      	str	r3, [r7, #20]
 802f4ba:	e00a      	b.n	802f4d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802f4bc:	687b      	ldr	r3, [r7, #4]
 802f4be:	681b      	ldr	r3, [r3, #0]
 802f4c0:	681a      	ldr	r2, [r3, #0]
 802f4c2:	687b      	ldr	r3, [r7, #4]
 802f4c4:	681b      	ldr	r3, [r3, #0]
 802f4c6:	f022 020e 	bic.w	r2, r2, #14
 802f4ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802f4cc:	687b      	ldr	r3, [r7, #4]
 802f4ce:	681b      	ldr	r3, [r3, #0]
 802f4d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f4d2:	687b      	ldr	r3, [r7, #4]
 802f4d4:	681b      	ldr	r3, [r3, #0]
 802f4d6:	4a3c      	ldr	r2, [pc, #240]	; (802f5c8 <HAL_DMA_Abort+0x214>)
 802f4d8:	4293      	cmp	r3, r2
 802f4da:	d072      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f4dc:	687b      	ldr	r3, [r7, #4]
 802f4de:	681b      	ldr	r3, [r3, #0]
 802f4e0:	4a3a      	ldr	r2, [pc, #232]	; (802f5cc <HAL_DMA_Abort+0x218>)
 802f4e2:	4293      	cmp	r3, r2
 802f4e4:	d06d      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f4e6:	687b      	ldr	r3, [r7, #4]
 802f4e8:	681b      	ldr	r3, [r3, #0]
 802f4ea:	4a39      	ldr	r2, [pc, #228]	; (802f5d0 <HAL_DMA_Abort+0x21c>)
 802f4ec:	4293      	cmp	r3, r2
 802f4ee:	d068      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f4f0:	687b      	ldr	r3, [r7, #4]
 802f4f2:	681b      	ldr	r3, [r3, #0]
 802f4f4:	4a37      	ldr	r2, [pc, #220]	; (802f5d4 <HAL_DMA_Abort+0x220>)
 802f4f6:	4293      	cmp	r3, r2
 802f4f8:	d063      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f4fa:	687b      	ldr	r3, [r7, #4]
 802f4fc:	681b      	ldr	r3, [r3, #0]
 802f4fe:	4a36      	ldr	r2, [pc, #216]	; (802f5d8 <HAL_DMA_Abort+0x224>)
 802f500:	4293      	cmp	r3, r2
 802f502:	d05e      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f504:	687b      	ldr	r3, [r7, #4]
 802f506:	681b      	ldr	r3, [r3, #0]
 802f508:	4a34      	ldr	r2, [pc, #208]	; (802f5dc <HAL_DMA_Abort+0x228>)
 802f50a:	4293      	cmp	r3, r2
 802f50c:	d059      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f50e:	687b      	ldr	r3, [r7, #4]
 802f510:	681b      	ldr	r3, [r3, #0]
 802f512:	4a33      	ldr	r2, [pc, #204]	; (802f5e0 <HAL_DMA_Abort+0x22c>)
 802f514:	4293      	cmp	r3, r2
 802f516:	d054      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f518:	687b      	ldr	r3, [r7, #4]
 802f51a:	681b      	ldr	r3, [r3, #0]
 802f51c:	4a31      	ldr	r2, [pc, #196]	; (802f5e4 <HAL_DMA_Abort+0x230>)
 802f51e:	4293      	cmp	r3, r2
 802f520:	d04f      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f522:	687b      	ldr	r3, [r7, #4]
 802f524:	681b      	ldr	r3, [r3, #0]
 802f526:	4a30      	ldr	r2, [pc, #192]	; (802f5e8 <HAL_DMA_Abort+0x234>)
 802f528:	4293      	cmp	r3, r2
 802f52a:	d04a      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f52c:	687b      	ldr	r3, [r7, #4]
 802f52e:	681b      	ldr	r3, [r3, #0]
 802f530:	4a2e      	ldr	r2, [pc, #184]	; (802f5ec <HAL_DMA_Abort+0x238>)
 802f532:	4293      	cmp	r3, r2
 802f534:	d045      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f536:	687b      	ldr	r3, [r7, #4]
 802f538:	681b      	ldr	r3, [r3, #0]
 802f53a:	4a2d      	ldr	r2, [pc, #180]	; (802f5f0 <HAL_DMA_Abort+0x23c>)
 802f53c:	4293      	cmp	r3, r2
 802f53e:	d040      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f540:	687b      	ldr	r3, [r7, #4]
 802f542:	681b      	ldr	r3, [r3, #0]
 802f544:	4a2b      	ldr	r2, [pc, #172]	; (802f5f4 <HAL_DMA_Abort+0x240>)
 802f546:	4293      	cmp	r3, r2
 802f548:	d03b      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f54a:	687b      	ldr	r3, [r7, #4]
 802f54c:	681b      	ldr	r3, [r3, #0]
 802f54e:	4a2a      	ldr	r2, [pc, #168]	; (802f5f8 <HAL_DMA_Abort+0x244>)
 802f550:	4293      	cmp	r3, r2
 802f552:	d036      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f554:	687b      	ldr	r3, [r7, #4]
 802f556:	681b      	ldr	r3, [r3, #0]
 802f558:	4a28      	ldr	r2, [pc, #160]	; (802f5fc <HAL_DMA_Abort+0x248>)
 802f55a:	4293      	cmp	r3, r2
 802f55c:	d031      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f55e:	687b      	ldr	r3, [r7, #4]
 802f560:	681b      	ldr	r3, [r3, #0]
 802f562:	4a27      	ldr	r2, [pc, #156]	; (802f600 <HAL_DMA_Abort+0x24c>)
 802f564:	4293      	cmp	r3, r2
 802f566:	d02c      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f568:	687b      	ldr	r3, [r7, #4]
 802f56a:	681b      	ldr	r3, [r3, #0]
 802f56c:	4a25      	ldr	r2, [pc, #148]	; (802f604 <HAL_DMA_Abort+0x250>)
 802f56e:	4293      	cmp	r3, r2
 802f570:	d027      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f572:	687b      	ldr	r3, [r7, #4]
 802f574:	681b      	ldr	r3, [r3, #0]
 802f576:	4a24      	ldr	r2, [pc, #144]	; (802f608 <HAL_DMA_Abort+0x254>)
 802f578:	4293      	cmp	r3, r2
 802f57a:	d022      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f57c:	687b      	ldr	r3, [r7, #4]
 802f57e:	681b      	ldr	r3, [r3, #0]
 802f580:	4a22      	ldr	r2, [pc, #136]	; (802f60c <HAL_DMA_Abort+0x258>)
 802f582:	4293      	cmp	r3, r2
 802f584:	d01d      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f586:	687b      	ldr	r3, [r7, #4]
 802f588:	681b      	ldr	r3, [r3, #0]
 802f58a:	4a21      	ldr	r2, [pc, #132]	; (802f610 <HAL_DMA_Abort+0x25c>)
 802f58c:	4293      	cmp	r3, r2
 802f58e:	d018      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f590:	687b      	ldr	r3, [r7, #4]
 802f592:	681b      	ldr	r3, [r3, #0]
 802f594:	4a1f      	ldr	r2, [pc, #124]	; (802f614 <HAL_DMA_Abort+0x260>)
 802f596:	4293      	cmp	r3, r2
 802f598:	d013      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f59a:	687b      	ldr	r3, [r7, #4]
 802f59c:	681b      	ldr	r3, [r3, #0]
 802f59e:	4a1e      	ldr	r2, [pc, #120]	; (802f618 <HAL_DMA_Abort+0x264>)
 802f5a0:	4293      	cmp	r3, r2
 802f5a2:	d00e      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f5a4:	687b      	ldr	r3, [r7, #4]
 802f5a6:	681b      	ldr	r3, [r3, #0]
 802f5a8:	4a1c      	ldr	r2, [pc, #112]	; (802f61c <HAL_DMA_Abort+0x268>)
 802f5aa:	4293      	cmp	r3, r2
 802f5ac:	d009      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f5ae:	687b      	ldr	r3, [r7, #4]
 802f5b0:	681b      	ldr	r3, [r3, #0]
 802f5b2:	4a1b      	ldr	r2, [pc, #108]	; (802f620 <HAL_DMA_Abort+0x26c>)
 802f5b4:	4293      	cmp	r3, r2
 802f5b6:	d004      	beq.n	802f5c2 <HAL_DMA_Abort+0x20e>
 802f5b8:	687b      	ldr	r3, [r7, #4]
 802f5ba:	681b      	ldr	r3, [r3, #0]
 802f5bc:	4a19      	ldr	r2, [pc, #100]	; (802f624 <HAL_DMA_Abort+0x270>)
 802f5be:	4293      	cmp	r3, r2
 802f5c0:	d132      	bne.n	802f628 <HAL_DMA_Abort+0x274>
 802f5c2:	2301      	movs	r3, #1
 802f5c4:	e031      	b.n	802f62a <HAL_DMA_Abort+0x276>
 802f5c6:	bf00      	nop
 802f5c8:	40020010 	.word	0x40020010
 802f5cc:	40020028 	.word	0x40020028
 802f5d0:	40020040 	.word	0x40020040
 802f5d4:	40020058 	.word	0x40020058
 802f5d8:	40020070 	.word	0x40020070
 802f5dc:	40020088 	.word	0x40020088
 802f5e0:	400200a0 	.word	0x400200a0
 802f5e4:	400200b8 	.word	0x400200b8
 802f5e8:	40020410 	.word	0x40020410
 802f5ec:	40020428 	.word	0x40020428
 802f5f0:	40020440 	.word	0x40020440
 802f5f4:	40020458 	.word	0x40020458
 802f5f8:	40020470 	.word	0x40020470
 802f5fc:	40020488 	.word	0x40020488
 802f600:	400204a0 	.word	0x400204a0
 802f604:	400204b8 	.word	0x400204b8
 802f608:	58025408 	.word	0x58025408
 802f60c:	5802541c 	.word	0x5802541c
 802f610:	58025430 	.word	0x58025430
 802f614:	58025444 	.word	0x58025444
 802f618:	58025458 	.word	0x58025458
 802f61c:	5802546c 	.word	0x5802546c
 802f620:	58025480 	.word	0x58025480
 802f624:	58025494 	.word	0x58025494
 802f628:	2300      	movs	r3, #0
 802f62a:	2b00      	cmp	r3, #0
 802f62c:	d007      	beq.n	802f63e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802f62e:	687b      	ldr	r3, [r7, #4]
 802f630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f632:	681a      	ldr	r2, [r3, #0]
 802f634:	687b      	ldr	r3, [r7, #4]
 802f636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802f63c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802f63e:	687b      	ldr	r3, [r7, #4]
 802f640:	681b      	ldr	r3, [r3, #0]
 802f642:	4a6d      	ldr	r2, [pc, #436]	; (802f7f8 <HAL_DMA_Abort+0x444>)
 802f644:	4293      	cmp	r3, r2
 802f646:	d04a      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f648:	687b      	ldr	r3, [r7, #4]
 802f64a:	681b      	ldr	r3, [r3, #0]
 802f64c:	4a6b      	ldr	r2, [pc, #428]	; (802f7fc <HAL_DMA_Abort+0x448>)
 802f64e:	4293      	cmp	r3, r2
 802f650:	d045      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f652:	687b      	ldr	r3, [r7, #4]
 802f654:	681b      	ldr	r3, [r3, #0]
 802f656:	4a6a      	ldr	r2, [pc, #424]	; (802f800 <HAL_DMA_Abort+0x44c>)
 802f658:	4293      	cmp	r3, r2
 802f65a:	d040      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f65c:	687b      	ldr	r3, [r7, #4]
 802f65e:	681b      	ldr	r3, [r3, #0]
 802f660:	4a68      	ldr	r2, [pc, #416]	; (802f804 <HAL_DMA_Abort+0x450>)
 802f662:	4293      	cmp	r3, r2
 802f664:	d03b      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f666:	687b      	ldr	r3, [r7, #4]
 802f668:	681b      	ldr	r3, [r3, #0]
 802f66a:	4a67      	ldr	r2, [pc, #412]	; (802f808 <HAL_DMA_Abort+0x454>)
 802f66c:	4293      	cmp	r3, r2
 802f66e:	d036      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f670:	687b      	ldr	r3, [r7, #4]
 802f672:	681b      	ldr	r3, [r3, #0]
 802f674:	4a65      	ldr	r2, [pc, #404]	; (802f80c <HAL_DMA_Abort+0x458>)
 802f676:	4293      	cmp	r3, r2
 802f678:	d031      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f67a:	687b      	ldr	r3, [r7, #4]
 802f67c:	681b      	ldr	r3, [r3, #0]
 802f67e:	4a64      	ldr	r2, [pc, #400]	; (802f810 <HAL_DMA_Abort+0x45c>)
 802f680:	4293      	cmp	r3, r2
 802f682:	d02c      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f684:	687b      	ldr	r3, [r7, #4]
 802f686:	681b      	ldr	r3, [r3, #0]
 802f688:	4a62      	ldr	r2, [pc, #392]	; (802f814 <HAL_DMA_Abort+0x460>)
 802f68a:	4293      	cmp	r3, r2
 802f68c:	d027      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f68e:	687b      	ldr	r3, [r7, #4]
 802f690:	681b      	ldr	r3, [r3, #0]
 802f692:	4a61      	ldr	r2, [pc, #388]	; (802f818 <HAL_DMA_Abort+0x464>)
 802f694:	4293      	cmp	r3, r2
 802f696:	d022      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f698:	687b      	ldr	r3, [r7, #4]
 802f69a:	681b      	ldr	r3, [r3, #0]
 802f69c:	4a5f      	ldr	r2, [pc, #380]	; (802f81c <HAL_DMA_Abort+0x468>)
 802f69e:	4293      	cmp	r3, r2
 802f6a0:	d01d      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f6a2:	687b      	ldr	r3, [r7, #4]
 802f6a4:	681b      	ldr	r3, [r3, #0]
 802f6a6:	4a5e      	ldr	r2, [pc, #376]	; (802f820 <HAL_DMA_Abort+0x46c>)
 802f6a8:	4293      	cmp	r3, r2
 802f6aa:	d018      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f6ac:	687b      	ldr	r3, [r7, #4]
 802f6ae:	681b      	ldr	r3, [r3, #0]
 802f6b0:	4a5c      	ldr	r2, [pc, #368]	; (802f824 <HAL_DMA_Abort+0x470>)
 802f6b2:	4293      	cmp	r3, r2
 802f6b4:	d013      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f6b6:	687b      	ldr	r3, [r7, #4]
 802f6b8:	681b      	ldr	r3, [r3, #0]
 802f6ba:	4a5b      	ldr	r2, [pc, #364]	; (802f828 <HAL_DMA_Abort+0x474>)
 802f6bc:	4293      	cmp	r3, r2
 802f6be:	d00e      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f6c0:	687b      	ldr	r3, [r7, #4]
 802f6c2:	681b      	ldr	r3, [r3, #0]
 802f6c4:	4a59      	ldr	r2, [pc, #356]	; (802f82c <HAL_DMA_Abort+0x478>)
 802f6c6:	4293      	cmp	r3, r2
 802f6c8:	d009      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f6ca:	687b      	ldr	r3, [r7, #4]
 802f6cc:	681b      	ldr	r3, [r3, #0]
 802f6ce:	4a58      	ldr	r2, [pc, #352]	; (802f830 <HAL_DMA_Abort+0x47c>)
 802f6d0:	4293      	cmp	r3, r2
 802f6d2:	d004      	beq.n	802f6de <HAL_DMA_Abort+0x32a>
 802f6d4:	687b      	ldr	r3, [r7, #4]
 802f6d6:	681b      	ldr	r3, [r3, #0]
 802f6d8:	4a56      	ldr	r2, [pc, #344]	; (802f834 <HAL_DMA_Abort+0x480>)
 802f6da:	4293      	cmp	r3, r2
 802f6dc:	d108      	bne.n	802f6f0 <HAL_DMA_Abort+0x33c>
 802f6de:	687b      	ldr	r3, [r7, #4]
 802f6e0:	681b      	ldr	r3, [r3, #0]
 802f6e2:	681a      	ldr	r2, [r3, #0]
 802f6e4:	687b      	ldr	r3, [r7, #4]
 802f6e6:	681b      	ldr	r3, [r3, #0]
 802f6e8:	f022 0201 	bic.w	r2, r2, #1
 802f6ec:	601a      	str	r2, [r3, #0]
 802f6ee:	e007      	b.n	802f700 <HAL_DMA_Abort+0x34c>
 802f6f0:	687b      	ldr	r3, [r7, #4]
 802f6f2:	681b      	ldr	r3, [r3, #0]
 802f6f4:	681a      	ldr	r2, [r3, #0]
 802f6f6:	687b      	ldr	r3, [r7, #4]
 802f6f8:	681b      	ldr	r3, [r3, #0]
 802f6fa:	f022 0201 	bic.w	r2, r2, #1
 802f6fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802f700:	e013      	b.n	802f72a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802f702:	f7fe fb95 	bl	802de30 <HAL_GetTick>
 802f706:	4602      	mov	r2, r0
 802f708:	693b      	ldr	r3, [r7, #16]
 802f70a:	1ad3      	subs	r3, r2, r3
 802f70c:	2b05      	cmp	r3, #5
 802f70e:	d90c      	bls.n	802f72a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802f710:	687b      	ldr	r3, [r7, #4]
 802f712:	2220      	movs	r2, #32
 802f714:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802f716:	687b      	ldr	r3, [r7, #4]
 802f718:	2203      	movs	r2, #3
 802f71a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802f71e:	687b      	ldr	r3, [r7, #4]
 802f720:	2200      	movs	r2, #0
 802f722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802f726:	2301      	movs	r3, #1
 802f728:	e12d      	b.n	802f986 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802f72a:	697b      	ldr	r3, [r7, #20]
 802f72c:	681b      	ldr	r3, [r3, #0]
 802f72e:	f003 0301 	and.w	r3, r3, #1
 802f732:	2b00      	cmp	r3, #0
 802f734:	d1e5      	bne.n	802f702 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f736:	687b      	ldr	r3, [r7, #4]
 802f738:	681b      	ldr	r3, [r3, #0]
 802f73a:	4a2f      	ldr	r2, [pc, #188]	; (802f7f8 <HAL_DMA_Abort+0x444>)
 802f73c:	4293      	cmp	r3, r2
 802f73e:	d04a      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f740:	687b      	ldr	r3, [r7, #4]
 802f742:	681b      	ldr	r3, [r3, #0]
 802f744:	4a2d      	ldr	r2, [pc, #180]	; (802f7fc <HAL_DMA_Abort+0x448>)
 802f746:	4293      	cmp	r3, r2
 802f748:	d045      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f74a:	687b      	ldr	r3, [r7, #4]
 802f74c:	681b      	ldr	r3, [r3, #0]
 802f74e:	4a2c      	ldr	r2, [pc, #176]	; (802f800 <HAL_DMA_Abort+0x44c>)
 802f750:	4293      	cmp	r3, r2
 802f752:	d040      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f754:	687b      	ldr	r3, [r7, #4]
 802f756:	681b      	ldr	r3, [r3, #0]
 802f758:	4a2a      	ldr	r2, [pc, #168]	; (802f804 <HAL_DMA_Abort+0x450>)
 802f75a:	4293      	cmp	r3, r2
 802f75c:	d03b      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f75e:	687b      	ldr	r3, [r7, #4]
 802f760:	681b      	ldr	r3, [r3, #0]
 802f762:	4a29      	ldr	r2, [pc, #164]	; (802f808 <HAL_DMA_Abort+0x454>)
 802f764:	4293      	cmp	r3, r2
 802f766:	d036      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f768:	687b      	ldr	r3, [r7, #4]
 802f76a:	681b      	ldr	r3, [r3, #0]
 802f76c:	4a27      	ldr	r2, [pc, #156]	; (802f80c <HAL_DMA_Abort+0x458>)
 802f76e:	4293      	cmp	r3, r2
 802f770:	d031      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f772:	687b      	ldr	r3, [r7, #4]
 802f774:	681b      	ldr	r3, [r3, #0]
 802f776:	4a26      	ldr	r2, [pc, #152]	; (802f810 <HAL_DMA_Abort+0x45c>)
 802f778:	4293      	cmp	r3, r2
 802f77a:	d02c      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f77c:	687b      	ldr	r3, [r7, #4]
 802f77e:	681b      	ldr	r3, [r3, #0]
 802f780:	4a24      	ldr	r2, [pc, #144]	; (802f814 <HAL_DMA_Abort+0x460>)
 802f782:	4293      	cmp	r3, r2
 802f784:	d027      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f786:	687b      	ldr	r3, [r7, #4]
 802f788:	681b      	ldr	r3, [r3, #0]
 802f78a:	4a23      	ldr	r2, [pc, #140]	; (802f818 <HAL_DMA_Abort+0x464>)
 802f78c:	4293      	cmp	r3, r2
 802f78e:	d022      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f790:	687b      	ldr	r3, [r7, #4]
 802f792:	681b      	ldr	r3, [r3, #0]
 802f794:	4a21      	ldr	r2, [pc, #132]	; (802f81c <HAL_DMA_Abort+0x468>)
 802f796:	4293      	cmp	r3, r2
 802f798:	d01d      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f79a:	687b      	ldr	r3, [r7, #4]
 802f79c:	681b      	ldr	r3, [r3, #0]
 802f79e:	4a20      	ldr	r2, [pc, #128]	; (802f820 <HAL_DMA_Abort+0x46c>)
 802f7a0:	4293      	cmp	r3, r2
 802f7a2:	d018      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f7a4:	687b      	ldr	r3, [r7, #4]
 802f7a6:	681b      	ldr	r3, [r3, #0]
 802f7a8:	4a1e      	ldr	r2, [pc, #120]	; (802f824 <HAL_DMA_Abort+0x470>)
 802f7aa:	4293      	cmp	r3, r2
 802f7ac:	d013      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f7ae:	687b      	ldr	r3, [r7, #4]
 802f7b0:	681b      	ldr	r3, [r3, #0]
 802f7b2:	4a1d      	ldr	r2, [pc, #116]	; (802f828 <HAL_DMA_Abort+0x474>)
 802f7b4:	4293      	cmp	r3, r2
 802f7b6:	d00e      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f7b8:	687b      	ldr	r3, [r7, #4]
 802f7ba:	681b      	ldr	r3, [r3, #0]
 802f7bc:	4a1b      	ldr	r2, [pc, #108]	; (802f82c <HAL_DMA_Abort+0x478>)
 802f7be:	4293      	cmp	r3, r2
 802f7c0:	d009      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f7c2:	687b      	ldr	r3, [r7, #4]
 802f7c4:	681b      	ldr	r3, [r3, #0]
 802f7c6:	4a1a      	ldr	r2, [pc, #104]	; (802f830 <HAL_DMA_Abort+0x47c>)
 802f7c8:	4293      	cmp	r3, r2
 802f7ca:	d004      	beq.n	802f7d6 <HAL_DMA_Abort+0x422>
 802f7cc:	687b      	ldr	r3, [r7, #4]
 802f7ce:	681b      	ldr	r3, [r3, #0]
 802f7d0:	4a18      	ldr	r2, [pc, #96]	; (802f834 <HAL_DMA_Abort+0x480>)
 802f7d2:	4293      	cmp	r3, r2
 802f7d4:	d101      	bne.n	802f7da <HAL_DMA_Abort+0x426>
 802f7d6:	2301      	movs	r3, #1
 802f7d8:	e000      	b.n	802f7dc <HAL_DMA_Abort+0x428>
 802f7da:	2300      	movs	r3, #0
 802f7dc:	2b00      	cmp	r3, #0
 802f7de:	d02b      	beq.n	802f838 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802f7e0:	687b      	ldr	r3, [r7, #4]
 802f7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f7e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802f7e6:	687b      	ldr	r3, [r7, #4]
 802f7e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f7ea:	f003 031f 	and.w	r3, r3, #31
 802f7ee:	223f      	movs	r2, #63	; 0x3f
 802f7f0:	409a      	lsls	r2, r3
 802f7f2:	68bb      	ldr	r3, [r7, #8]
 802f7f4:	609a      	str	r2, [r3, #8]
 802f7f6:	e02a      	b.n	802f84e <HAL_DMA_Abort+0x49a>
 802f7f8:	40020010 	.word	0x40020010
 802f7fc:	40020028 	.word	0x40020028
 802f800:	40020040 	.word	0x40020040
 802f804:	40020058 	.word	0x40020058
 802f808:	40020070 	.word	0x40020070
 802f80c:	40020088 	.word	0x40020088
 802f810:	400200a0 	.word	0x400200a0
 802f814:	400200b8 	.word	0x400200b8
 802f818:	40020410 	.word	0x40020410
 802f81c:	40020428 	.word	0x40020428
 802f820:	40020440 	.word	0x40020440
 802f824:	40020458 	.word	0x40020458
 802f828:	40020470 	.word	0x40020470
 802f82c:	40020488 	.word	0x40020488
 802f830:	400204a0 	.word	0x400204a0
 802f834:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802f838:	687b      	ldr	r3, [r7, #4]
 802f83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f83c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802f83e:	687b      	ldr	r3, [r7, #4]
 802f840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f842:	f003 031f 	and.w	r3, r3, #31
 802f846:	2201      	movs	r2, #1
 802f848:	409a      	lsls	r2, r3
 802f84a:	68fb      	ldr	r3, [r7, #12]
 802f84c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f84e:	687b      	ldr	r3, [r7, #4]
 802f850:	681b      	ldr	r3, [r3, #0]
 802f852:	4a4f      	ldr	r2, [pc, #316]	; (802f990 <HAL_DMA_Abort+0x5dc>)
 802f854:	4293      	cmp	r3, r2
 802f856:	d072      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f858:	687b      	ldr	r3, [r7, #4]
 802f85a:	681b      	ldr	r3, [r3, #0]
 802f85c:	4a4d      	ldr	r2, [pc, #308]	; (802f994 <HAL_DMA_Abort+0x5e0>)
 802f85e:	4293      	cmp	r3, r2
 802f860:	d06d      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f862:	687b      	ldr	r3, [r7, #4]
 802f864:	681b      	ldr	r3, [r3, #0]
 802f866:	4a4c      	ldr	r2, [pc, #304]	; (802f998 <HAL_DMA_Abort+0x5e4>)
 802f868:	4293      	cmp	r3, r2
 802f86a:	d068      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f86c:	687b      	ldr	r3, [r7, #4]
 802f86e:	681b      	ldr	r3, [r3, #0]
 802f870:	4a4a      	ldr	r2, [pc, #296]	; (802f99c <HAL_DMA_Abort+0x5e8>)
 802f872:	4293      	cmp	r3, r2
 802f874:	d063      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f876:	687b      	ldr	r3, [r7, #4]
 802f878:	681b      	ldr	r3, [r3, #0]
 802f87a:	4a49      	ldr	r2, [pc, #292]	; (802f9a0 <HAL_DMA_Abort+0x5ec>)
 802f87c:	4293      	cmp	r3, r2
 802f87e:	d05e      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f880:	687b      	ldr	r3, [r7, #4]
 802f882:	681b      	ldr	r3, [r3, #0]
 802f884:	4a47      	ldr	r2, [pc, #284]	; (802f9a4 <HAL_DMA_Abort+0x5f0>)
 802f886:	4293      	cmp	r3, r2
 802f888:	d059      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f88a:	687b      	ldr	r3, [r7, #4]
 802f88c:	681b      	ldr	r3, [r3, #0]
 802f88e:	4a46      	ldr	r2, [pc, #280]	; (802f9a8 <HAL_DMA_Abort+0x5f4>)
 802f890:	4293      	cmp	r3, r2
 802f892:	d054      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f894:	687b      	ldr	r3, [r7, #4]
 802f896:	681b      	ldr	r3, [r3, #0]
 802f898:	4a44      	ldr	r2, [pc, #272]	; (802f9ac <HAL_DMA_Abort+0x5f8>)
 802f89a:	4293      	cmp	r3, r2
 802f89c:	d04f      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f89e:	687b      	ldr	r3, [r7, #4]
 802f8a0:	681b      	ldr	r3, [r3, #0]
 802f8a2:	4a43      	ldr	r2, [pc, #268]	; (802f9b0 <HAL_DMA_Abort+0x5fc>)
 802f8a4:	4293      	cmp	r3, r2
 802f8a6:	d04a      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8a8:	687b      	ldr	r3, [r7, #4]
 802f8aa:	681b      	ldr	r3, [r3, #0]
 802f8ac:	4a41      	ldr	r2, [pc, #260]	; (802f9b4 <HAL_DMA_Abort+0x600>)
 802f8ae:	4293      	cmp	r3, r2
 802f8b0:	d045      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8b2:	687b      	ldr	r3, [r7, #4]
 802f8b4:	681b      	ldr	r3, [r3, #0]
 802f8b6:	4a40      	ldr	r2, [pc, #256]	; (802f9b8 <HAL_DMA_Abort+0x604>)
 802f8b8:	4293      	cmp	r3, r2
 802f8ba:	d040      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8bc:	687b      	ldr	r3, [r7, #4]
 802f8be:	681b      	ldr	r3, [r3, #0]
 802f8c0:	4a3e      	ldr	r2, [pc, #248]	; (802f9bc <HAL_DMA_Abort+0x608>)
 802f8c2:	4293      	cmp	r3, r2
 802f8c4:	d03b      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8c6:	687b      	ldr	r3, [r7, #4]
 802f8c8:	681b      	ldr	r3, [r3, #0]
 802f8ca:	4a3d      	ldr	r2, [pc, #244]	; (802f9c0 <HAL_DMA_Abort+0x60c>)
 802f8cc:	4293      	cmp	r3, r2
 802f8ce:	d036      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8d0:	687b      	ldr	r3, [r7, #4]
 802f8d2:	681b      	ldr	r3, [r3, #0]
 802f8d4:	4a3b      	ldr	r2, [pc, #236]	; (802f9c4 <HAL_DMA_Abort+0x610>)
 802f8d6:	4293      	cmp	r3, r2
 802f8d8:	d031      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8da:	687b      	ldr	r3, [r7, #4]
 802f8dc:	681b      	ldr	r3, [r3, #0]
 802f8de:	4a3a      	ldr	r2, [pc, #232]	; (802f9c8 <HAL_DMA_Abort+0x614>)
 802f8e0:	4293      	cmp	r3, r2
 802f8e2:	d02c      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8e4:	687b      	ldr	r3, [r7, #4]
 802f8e6:	681b      	ldr	r3, [r3, #0]
 802f8e8:	4a38      	ldr	r2, [pc, #224]	; (802f9cc <HAL_DMA_Abort+0x618>)
 802f8ea:	4293      	cmp	r3, r2
 802f8ec:	d027      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8ee:	687b      	ldr	r3, [r7, #4]
 802f8f0:	681b      	ldr	r3, [r3, #0]
 802f8f2:	4a37      	ldr	r2, [pc, #220]	; (802f9d0 <HAL_DMA_Abort+0x61c>)
 802f8f4:	4293      	cmp	r3, r2
 802f8f6:	d022      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f8f8:	687b      	ldr	r3, [r7, #4]
 802f8fa:	681b      	ldr	r3, [r3, #0]
 802f8fc:	4a35      	ldr	r2, [pc, #212]	; (802f9d4 <HAL_DMA_Abort+0x620>)
 802f8fe:	4293      	cmp	r3, r2
 802f900:	d01d      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f902:	687b      	ldr	r3, [r7, #4]
 802f904:	681b      	ldr	r3, [r3, #0]
 802f906:	4a34      	ldr	r2, [pc, #208]	; (802f9d8 <HAL_DMA_Abort+0x624>)
 802f908:	4293      	cmp	r3, r2
 802f90a:	d018      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f90c:	687b      	ldr	r3, [r7, #4]
 802f90e:	681b      	ldr	r3, [r3, #0]
 802f910:	4a32      	ldr	r2, [pc, #200]	; (802f9dc <HAL_DMA_Abort+0x628>)
 802f912:	4293      	cmp	r3, r2
 802f914:	d013      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f916:	687b      	ldr	r3, [r7, #4]
 802f918:	681b      	ldr	r3, [r3, #0]
 802f91a:	4a31      	ldr	r2, [pc, #196]	; (802f9e0 <HAL_DMA_Abort+0x62c>)
 802f91c:	4293      	cmp	r3, r2
 802f91e:	d00e      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f920:	687b      	ldr	r3, [r7, #4]
 802f922:	681b      	ldr	r3, [r3, #0]
 802f924:	4a2f      	ldr	r2, [pc, #188]	; (802f9e4 <HAL_DMA_Abort+0x630>)
 802f926:	4293      	cmp	r3, r2
 802f928:	d009      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f92a:	687b      	ldr	r3, [r7, #4]
 802f92c:	681b      	ldr	r3, [r3, #0]
 802f92e:	4a2e      	ldr	r2, [pc, #184]	; (802f9e8 <HAL_DMA_Abort+0x634>)
 802f930:	4293      	cmp	r3, r2
 802f932:	d004      	beq.n	802f93e <HAL_DMA_Abort+0x58a>
 802f934:	687b      	ldr	r3, [r7, #4]
 802f936:	681b      	ldr	r3, [r3, #0]
 802f938:	4a2c      	ldr	r2, [pc, #176]	; (802f9ec <HAL_DMA_Abort+0x638>)
 802f93a:	4293      	cmp	r3, r2
 802f93c:	d101      	bne.n	802f942 <HAL_DMA_Abort+0x58e>
 802f93e:	2301      	movs	r3, #1
 802f940:	e000      	b.n	802f944 <HAL_DMA_Abort+0x590>
 802f942:	2300      	movs	r3, #0
 802f944:	2b00      	cmp	r3, #0
 802f946:	d015      	beq.n	802f974 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802f948:	687b      	ldr	r3, [r7, #4]
 802f94a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802f94c:	687a      	ldr	r2, [r7, #4]
 802f94e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802f950:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802f952:	687b      	ldr	r3, [r7, #4]
 802f954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f956:	2b00      	cmp	r3, #0
 802f958:	d00c      	beq.n	802f974 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802f95a:	687b      	ldr	r3, [r7, #4]
 802f95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f95e:	681a      	ldr	r2, [r3, #0]
 802f960:	687b      	ldr	r3, [r7, #4]
 802f962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802f968:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802f96a:	687b      	ldr	r3, [r7, #4]
 802f96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802f96e:	687a      	ldr	r2, [r7, #4]
 802f970:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802f972:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802f974:	687b      	ldr	r3, [r7, #4]
 802f976:	2201      	movs	r2, #1
 802f978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802f97c:	687b      	ldr	r3, [r7, #4]
 802f97e:	2200      	movs	r2, #0
 802f980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802f984:	2300      	movs	r3, #0
}
 802f986:	4618      	mov	r0, r3
 802f988:	3718      	adds	r7, #24
 802f98a:	46bd      	mov	sp, r7
 802f98c:	bd80      	pop	{r7, pc}
 802f98e:	bf00      	nop
 802f990:	40020010 	.word	0x40020010
 802f994:	40020028 	.word	0x40020028
 802f998:	40020040 	.word	0x40020040
 802f99c:	40020058 	.word	0x40020058
 802f9a0:	40020070 	.word	0x40020070
 802f9a4:	40020088 	.word	0x40020088
 802f9a8:	400200a0 	.word	0x400200a0
 802f9ac:	400200b8 	.word	0x400200b8
 802f9b0:	40020410 	.word	0x40020410
 802f9b4:	40020428 	.word	0x40020428
 802f9b8:	40020440 	.word	0x40020440
 802f9bc:	40020458 	.word	0x40020458
 802f9c0:	40020470 	.word	0x40020470
 802f9c4:	40020488 	.word	0x40020488
 802f9c8:	400204a0 	.word	0x400204a0
 802f9cc:	400204b8 	.word	0x400204b8
 802f9d0:	58025408 	.word	0x58025408
 802f9d4:	5802541c 	.word	0x5802541c
 802f9d8:	58025430 	.word	0x58025430
 802f9dc:	58025444 	.word	0x58025444
 802f9e0:	58025458 	.word	0x58025458
 802f9e4:	5802546c 	.word	0x5802546c
 802f9e8:	58025480 	.word	0x58025480
 802f9ec:	58025494 	.word	0x58025494

0802f9f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802f9f0:	b580      	push	{r7, lr}
 802f9f2:	b084      	sub	sp, #16
 802f9f4:	af00      	add	r7, sp, #0
 802f9f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802f9f8:	687b      	ldr	r3, [r7, #4]
 802f9fa:	2b00      	cmp	r3, #0
 802f9fc:	d101      	bne.n	802fa02 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802f9fe:	2301      	movs	r3, #1
 802fa00:	e237      	b.n	802fe72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802fa02:	687b      	ldr	r3, [r7, #4]
 802fa04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802fa08:	b2db      	uxtb	r3, r3
 802fa0a:	2b02      	cmp	r3, #2
 802fa0c:	d004      	beq.n	802fa18 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802fa0e:	687b      	ldr	r3, [r7, #4]
 802fa10:	2280      	movs	r2, #128	; 0x80
 802fa12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802fa14:	2301      	movs	r3, #1
 802fa16:	e22c      	b.n	802fe72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802fa18:	687b      	ldr	r3, [r7, #4]
 802fa1a:	681b      	ldr	r3, [r3, #0]
 802fa1c:	4a5c      	ldr	r2, [pc, #368]	; (802fb90 <HAL_DMA_Abort_IT+0x1a0>)
 802fa1e:	4293      	cmp	r3, r2
 802fa20:	d04a      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa22:	687b      	ldr	r3, [r7, #4]
 802fa24:	681b      	ldr	r3, [r3, #0]
 802fa26:	4a5b      	ldr	r2, [pc, #364]	; (802fb94 <HAL_DMA_Abort_IT+0x1a4>)
 802fa28:	4293      	cmp	r3, r2
 802fa2a:	d045      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa2c:	687b      	ldr	r3, [r7, #4]
 802fa2e:	681b      	ldr	r3, [r3, #0]
 802fa30:	4a59      	ldr	r2, [pc, #356]	; (802fb98 <HAL_DMA_Abort_IT+0x1a8>)
 802fa32:	4293      	cmp	r3, r2
 802fa34:	d040      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa36:	687b      	ldr	r3, [r7, #4]
 802fa38:	681b      	ldr	r3, [r3, #0]
 802fa3a:	4a58      	ldr	r2, [pc, #352]	; (802fb9c <HAL_DMA_Abort_IT+0x1ac>)
 802fa3c:	4293      	cmp	r3, r2
 802fa3e:	d03b      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa40:	687b      	ldr	r3, [r7, #4]
 802fa42:	681b      	ldr	r3, [r3, #0]
 802fa44:	4a56      	ldr	r2, [pc, #344]	; (802fba0 <HAL_DMA_Abort_IT+0x1b0>)
 802fa46:	4293      	cmp	r3, r2
 802fa48:	d036      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa4a:	687b      	ldr	r3, [r7, #4]
 802fa4c:	681b      	ldr	r3, [r3, #0]
 802fa4e:	4a55      	ldr	r2, [pc, #340]	; (802fba4 <HAL_DMA_Abort_IT+0x1b4>)
 802fa50:	4293      	cmp	r3, r2
 802fa52:	d031      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa54:	687b      	ldr	r3, [r7, #4]
 802fa56:	681b      	ldr	r3, [r3, #0]
 802fa58:	4a53      	ldr	r2, [pc, #332]	; (802fba8 <HAL_DMA_Abort_IT+0x1b8>)
 802fa5a:	4293      	cmp	r3, r2
 802fa5c:	d02c      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa5e:	687b      	ldr	r3, [r7, #4]
 802fa60:	681b      	ldr	r3, [r3, #0]
 802fa62:	4a52      	ldr	r2, [pc, #328]	; (802fbac <HAL_DMA_Abort_IT+0x1bc>)
 802fa64:	4293      	cmp	r3, r2
 802fa66:	d027      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa68:	687b      	ldr	r3, [r7, #4]
 802fa6a:	681b      	ldr	r3, [r3, #0]
 802fa6c:	4a50      	ldr	r2, [pc, #320]	; (802fbb0 <HAL_DMA_Abort_IT+0x1c0>)
 802fa6e:	4293      	cmp	r3, r2
 802fa70:	d022      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa72:	687b      	ldr	r3, [r7, #4]
 802fa74:	681b      	ldr	r3, [r3, #0]
 802fa76:	4a4f      	ldr	r2, [pc, #316]	; (802fbb4 <HAL_DMA_Abort_IT+0x1c4>)
 802fa78:	4293      	cmp	r3, r2
 802fa7a:	d01d      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa7c:	687b      	ldr	r3, [r7, #4]
 802fa7e:	681b      	ldr	r3, [r3, #0]
 802fa80:	4a4d      	ldr	r2, [pc, #308]	; (802fbb8 <HAL_DMA_Abort_IT+0x1c8>)
 802fa82:	4293      	cmp	r3, r2
 802fa84:	d018      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa86:	687b      	ldr	r3, [r7, #4]
 802fa88:	681b      	ldr	r3, [r3, #0]
 802fa8a:	4a4c      	ldr	r2, [pc, #304]	; (802fbbc <HAL_DMA_Abort_IT+0x1cc>)
 802fa8c:	4293      	cmp	r3, r2
 802fa8e:	d013      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa90:	687b      	ldr	r3, [r7, #4]
 802fa92:	681b      	ldr	r3, [r3, #0]
 802fa94:	4a4a      	ldr	r2, [pc, #296]	; (802fbc0 <HAL_DMA_Abort_IT+0x1d0>)
 802fa96:	4293      	cmp	r3, r2
 802fa98:	d00e      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802fa9a:	687b      	ldr	r3, [r7, #4]
 802fa9c:	681b      	ldr	r3, [r3, #0]
 802fa9e:	4a49      	ldr	r2, [pc, #292]	; (802fbc4 <HAL_DMA_Abort_IT+0x1d4>)
 802faa0:	4293      	cmp	r3, r2
 802faa2:	d009      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802faa4:	687b      	ldr	r3, [r7, #4]
 802faa6:	681b      	ldr	r3, [r3, #0]
 802faa8:	4a47      	ldr	r2, [pc, #284]	; (802fbc8 <HAL_DMA_Abort_IT+0x1d8>)
 802faaa:	4293      	cmp	r3, r2
 802faac:	d004      	beq.n	802fab8 <HAL_DMA_Abort_IT+0xc8>
 802faae:	687b      	ldr	r3, [r7, #4]
 802fab0:	681b      	ldr	r3, [r3, #0]
 802fab2:	4a46      	ldr	r2, [pc, #280]	; (802fbcc <HAL_DMA_Abort_IT+0x1dc>)
 802fab4:	4293      	cmp	r3, r2
 802fab6:	d101      	bne.n	802fabc <HAL_DMA_Abort_IT+0xcc>
 802fab8:	2301      	movs	r3, #1
 802faba:	e000      	b.n	802fabe <HAL_DMA_Abort_IT+0xce>
 802fabc:	2300      	movs	r3, #0
 802fabe:	2b00      	cmp	r3, #0
 802fac0:	f000 8086 	beq.w	802fbd0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802fac4:	687b      	ldr	r3, [r7, #4]
 802fac6:	2204      	movs	r2, #4
 802fac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802facc:	687b      	ldr	r3, [r7, #4]
 802face:	681b      	ldr	r3, [r3, #0]
 802fad0:	4a2f      	ldr	r2, [pc, #188]	; (802fb90 <HAL_DMA_Abort_IT+0x1a0>)
 802fad2:	4293      	cmp	r3, r2
 802fad4:	d04a      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fad6:	687b      	ldr	r3, [r7, #4]
 802fad8:	681b      	ldr	r3, [r3, #0]
 802fada:	4a2e      	ldr	r2, [pc, #184]	; (802fb94 <HAL_DMA_Abort_IT+0x1a4>)
 802fadc:	4293      	cmp	r3, r2
 802fade:	d045      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fae0:	687b      	ldr	r3, [r7, #4]
 802fae2:	681b      	ldr	r3, [r3, #0]
 802fae4:	4a2c      	ldr	r2, [pc, #176]	; (802fb98 <HAL_DMA_Abort_IT+0x1a8>)
 802fae6:	4293      	cmp	r3, r2
 802fae8:	d040      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802faea:	687b      	ldr	r3, [r7, #4]
 802faec:	681b      	ldr	r3, [r3, #0]
 802faee:	4a2b      	ldr	r2, [pc, #172]	; (802fb9c <HAL_DMA_Abort_IT+0x1ac>)
 802faf0:	4293      	cmp	r3, r2
 802faf2:	d03b      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802faf4:	687b      	ldr	r3, [r7, #4]
 802faf6:	681b      	ldr	r3, [r3, #0]
 802faf8:	4a29      	ldr	r2, [pc, #164]	; (802fba0 <HAL_DMA_Abort_IT+0x1b0>)
 802fafa:	4293      	cmp	r3, r2
 802fafc:	d036      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fafe:	687b      	ldr	r3, [r7, #4]
 802fb00:	681b      	ldr	r3, [r3, #0]
 802fb02:	4a28      	ldr	r2, [pc, #160]	; (802fba4 <HAL_DMA_Abort_IT+0x1b4>)
 802fb04:	4293      	cmp	r3, r2
 802fb06:	d031      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb08:	687b      	ldr	r3, [r7, #4]
 802fb0a:	681b      	ldr	r3, [r3, #0]
 802fb0c:	4a26      	ldr	r2, [pc, #152]	; (802fba8 <HAL_DMA_Abort_IT+0x1b8>)
 802fb0e:	4293      	cmp	r3, r2
 802fb10:	d02c      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb12:	687b      	ldr	r3, [r7, #4]
 802fb14:	681b      	ldr	r3, [r3, #0]
 802fb16:	4a25      	ldr	r2, [pc, #148]	; (802fbac <HAL_DMA_Abort_IT+0x1bc>)
 802fb18:	4293      	cmp	r3, r2
 802fb1a:	d027      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb1c:	687b      	ldr	r3, [r7, #4]
 802fb1e:	681b      	ldr	r3, [r3, #0]
 802fb20:	4a23      	ldr	r2, [pc, #140]	; (802fbb0 <HAL_DMA_Abort_IT+0x1c0>)
 802fb22:	4293      	cmp	r3, r2
 802fb24:	d022      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb26:	687b      	ldr	r3, [r7, #4]
 802fb28:	681b      	ldr	r3, [r3, #0]
 802fb2a:	4a22      	ldr	r2, [pc, #136]	; (802fbb4 <HAL_DMA_Abort_IT+0x1c4>)
 802fb2c:	4293      	cmp	r3, r2
 802fb2e:	d01d      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb30:	687b      	ldr	r3, [r7, #4]
 802fb32:	681b      	ldr	r3, [r3, #0]
 802fb34:	4a20      	ldr	r2, [pc, #128]	; (802fbb8 <HAL_DMA_Abort_IT+0x1c8>)
 802fb36:	4293      	cmp	r3, r2
 802fb38:	d018      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb3a:	687b      	ldr	r3, [r7, #4]
 802fb3c:	681b      	ldr	r3, [r3, #0]
 802fb3e:	4a1f      	ldr	r2, [pc, #124]	; (802fbbc <HAL_DMA_Abort_IT+0x1cc>)
 802fb40:	4293      	cmp	r3, r2
 802fb42:	d013      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb44:	687b      	ldr	r3, [r7, #4]
 802fb46:	681b      	ldr	r3, [r3, #0]
 802fb48:	4a1d      	ldr	r2, [pc, #116]	; (802fbc0 <HAL_DMA_Abort_IT+0x1d0>)
 802fb4a:	4293      	cmp	r3, r2
 802fb4c:	d00e      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb4e:	687b      	ldr	r3, [r7, #4]
 802fb50:	681b      	ldr	r3, [r3, #0]
 802fb52:	4a1c      	ldr	r2, [pc, #112]	; (802fbc4 <HAL_DMA_Abort_IT+0x1d4>)
 802fb54:	4293      	cmp	r3, r2
 802fb56:	d009      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb58:	687b      	ldr	r3, [r7, #4]
 802fb5a:	681b      	ldr	r3, [r3, #0]
 802fb5c:	4a1a      	ldr	r2, [pc, #104]	; (802fbc8 <HAL_DMA_Abort_IT+0x1d8>)
 802fb5e:	4293      	cmp	r3, r2
 802fb60:	d004      	beq.n	802fb6c <HAL_DMA_Abort_IT+0x17c>
 802fb62:	687b      	ldr	r3, [r7, #4]
 802fb64:	681b      	ldr	r3, [r3, #0]
 802fb66:	4a19      	ldr	r2, [pc, #100]	; (802fbcc <HAL_DMA_Abort_IT+0x1dc>)
 802fb68:	4293      	cmp	r3, r2
 802fb6a:	d108      	bne.n	802fb7e <HAL_DMA_Abort_IT+0x18e>
 802fb6c:	687b      	ldr	r3, [r7, #4]
 802fb6e:	681b      	ldr	r3, [r3, #0]
 802fb70:	681a      	ldr	r2, [r3, #0]
 802fb72:	687b      	ldr	r3, [r7, #4]
 802fb74:	681b      	ldr	r3, [r3, #0]
 802fb76:	f022 0201 	bic.w	r2, r2, #1
 802fb7a:	601a      	str	r2, [r3, #0]
 802fb7c:	e178      	b.n	802fe70 <HAL_DMA_Abort_IT+0x480>
 802fb7e:	687b      	ldr	r3, [r7, #4]
 802fb80:	681b      	ldr	r3, [r3, #0]
 802fb82:	681a      	ldr	r2, [r3, #0]
 802fb84:	687b      	ldr	r3, [r7, #4]
 802fb86:	681b      	ldr	r3, [r3, #0]
 802fb88:	f022 0201 	bic.w	r2, r2, #1
 802fb8c:	601a      	str	r2, [r3, #0]
 802fb8e:	e16f      	b.n	802fe70 <HAL_DMA_Abort_IT+0x480>
 802fb90:	40020010 	.word	0x40020010
 802fb94:	40020028 	.word	0x40020028
 802fb98:	40020040 	.word	0x40020040
 802fb9c:	40020058 	.word	0x40020058
 802fba0:	40020070 	.word	0x40020070
 802fba4:	40020088 	.word	0x40020088
 802fba8:	400200a0 	.word	0x400200a0
 802fbac:	400200b8 	.word	0x400200b8
 802fbb0:	40020410 	.word	0x40020410
 802fbb4:	40020428 	.word	0x40020428
 802fbb8:	40020440 	.word	0x40020440
 802fbbc:	40020458 	.word	0x40020458
 802fbc0:	40020470 	.word	0x40020470
 802fbc4:	40020488 	.word	0x40020488
 802fbc8:	400204a0 	.word	0x400204a0
 802fbcc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802fbd0:	687b      	ldr	r3, [r7, #4]
 802fbd2:	681b      	ldr	r3, [r3, #0]
 802fbd4:	681a      	ldr	r2, [r3, #0]
 802fbd6:	687b      	ldr	r3, [r7, #4]
 802fbd8:	681b      	ldr	r3, [r3, #0]
 802fbda:	f022 020e 	bic.w	r2, r2, #14
 802fbde:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802fbe0:	687b      	ldr	r3, [r7, #4]
 802fbe2:	681b      	ldr	r3, [r3, #0]
 802fbe4:	4a6c      	ldr	r2, [pc, #432]	; (802fd98 <HAL_DMA_Abort_IT+0x3a8>)
 802fbe6:	4293      	cmp	r3, r2
 802fbe8:	d04a      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fbea:	687b      	ldr	r3, [r7, #4]
 802fbec:	681b      	ldr	r3, [r3, #0]
 802fbee:	4a6b      	ldr	r2, [pc, #428]	; (802fd9c <HAL_DMA_Abort_IT+0x3ac>)
 802fbf0:	4293      	cmp	r3, r2
 802fbf2:	d045      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fbf4:	687b      	ldr	r3, [r7, #4]
 802fbf6:	681b      	ldr	r3, [r3, #0]
 802fbf8:	4a69      	ldr	r2, [pc, #420]	; (802fda0 <HAL_DMA_Abort_IT+0x3b0>)
 802fbfa:	4293      	cmp	r3, r2
 802fbfc:	d040      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fbfe:	687b      	ldr	r3, [r7, #4]
 802fc00:	681b      	ldr	r3, [r3, #0]
 802fc02:	4a68      	ldr	r2, [pc, #416]	; (802fda4 <HAL_DMA_Abort_IT+0x3b4>)
 802fc04:	4293      	cmp	r3, r2
 802fc06:	d03b      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc08:	687b      	ldr	r3, [r7, #4]
 802fc0a:	681b      	ldr	r3, [r3, #0]
 802fc0c:	4a66      	ldr	r2, [pc, #408]	; (802fda8 <HAL_DMA_Abort_IT+0x3b8>)
 802fc0e:	4293      	cmp	r3, r2
 802fc10:	d036      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc12:	687b      	ldr	r3, [r7, #4]
 802fc14:	681b      	ldr	r3, [r3, #0]
 802fc16:	4a65      	ldr	r2, [pc, #404]	; (802fdac <HAL_DMA_Abort_IT+0x3bc>)
 802fc18:	4293      	cmp	r3, r2
 802fc1a:	d031      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc1c:	687b      	ldr	r3, [r7, #4]
 802fc1e:	681b      	ldr	r3, [r3, #0]
 802fc20:	4a63      	ldr	r2, [pc, #396]	; (802fdb0 <HAL_DMA_Abort_IT+0x3c0>)
 802fc22:	4293      	cmp	r3, r2
 802fc24:	d02c      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc26:	687b      	ldr	r3, [r7, #4]
 802fc28:	681b      	ldr	r3, [r3, #0]
 802fc2a:	4a62      	ldr	r2, [pc, #392]	; (802fdb4 <HAL_DMA_Abort_IT+0x3c4>)
 802fc2c:	4293      	cmp	r3, r2
 802fc2e:	d027      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc30:	687b      	ldr	r3, [r7, #4]
 802fc32:	681b      	ldr	r3, [r3, #0]
 802fc34:	4a60      	ldr	r2, [pc, #384]	; (802fdb8 <HAL_DMA_Abort_IT+0x3c8>)
 802fc36:	4293      	cmp	r3, r2
 802fc38:	d022      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc3a:	687b      	ldr	r3, [r7, #4]
 802fc3c:	681b      	ldr	r3, [r3, #0]
 802fc3e:	4a5f      	ldr	r2, [pc, #380]	; (802fdbc <HAL_DMA_Abort_IT+0x3cc>)
 802fc40:	4293      	cmp	r3, r2
 802fc42:	d01d      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc44:	687b      	ldr	r3, [r7, #4]
 802fc46:	681b      	ldr	r3, [r3, #0]
 802fc48:	4a5d      	ldr	r2, [pc, #372]	; (802fdc0 <HAL_DMA_Abort_IT+0x3d0>)
 802fc4a:	4293      	cmp	r3, r2
 802fc4c:	d018      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc4e:	687b      	ldr	r3, [r7, #4]
 802fc50:	681b      	ldr	r3, [r3, #0]
 802fc52:	4a5c      	ldr	r2, [pc, #368]	; (802fdc4 <HAL_DMA_Abort_IT+0x3d4>)
 802fc54:	4293      	cmp	r3, r2
 802fc56:	d013      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc58:	687b      	ldr	r3, [r7, #4]
 802fc5a:	681b      	ldr	r3, [r3, #0]
 802fc5c:	4a5a      	ldr	r2, [pc, #360]	; (802fdc8 <HAL_DMA_Abort_IT+0x3d8>)
 802fc5e:	4293      	cmp	r3, r2
 802fc60:	d00e      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc62:	687b      	ldr	r3, [r7, #4]
 802fc64:	681b      	ldr	r3, [r3, #0]
 802fc66:	4a59      	ldr	r2, [pc, #356]	; (802fdcc <HAL_DMA_Abort_IT+0x3dc>)
 802fc68:	4293      	cmp	r3, r2
 802fc6a:	d009      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc6c:	687b      	ldr	r3, [r7, #4]
 802fc6e:	681b      	ldr	r3, [r3, #0]
 802fc70:	4a57      	ldr	r2, [pc, #348]	; (802fdd0 <HAL_DMA_Abort_IT+0x3e0>)
 802fc72:	4293      	cmp	r3, r2
 802fc74:	d004      	beq.n	802fc80 <HAL_DMA_Abort_IT+0x290>
 802fc76:	687b      	ldr	r3, [r7, #4]
 802fc78:	681b      	ldr	r3, [r3, #0]
 802fc7a:	4a56      	ldr	r2, [pc, #344]	; (802fdd4 <HAL_DMA_Abort_IT+0x3e4>)
 802fc7c:	4293      	cmp	r3, r2
 802fc7e:	d108      	bne.n	802fc92 <HAL_DMA_Abort_IT+0x2a2>
 802fc80:	687b      	ldr	r3, [r7, #4]
 802fc82:	681b      	ldr	r3, [r3, #0]
 802fc84:	681a      	ldr	r2, [r3, #0]
 802fc86:	687b      	ldr	r3, [r7, #4]
 802fc88:	681b      	ldr	r3, [r3, #0]
 802fc8a:	f022 0201 	bic.w	r2, r2, #1
 802fc8e:	601a      	str	r2, [r3, #0]
 802fc90:	e007      	b.n	802fca2 <HAL_DMA_Abort_IT+0x2b2>
 802fc92:	687b      	ldr	r3, [r7, #4]
 802fc94:	681b      	ldr	r3, [r3, #0]
 802fc96:	681a      	ldr	r2, [r3, #0]
 802fc98:	687b      	ldr	r3, [r7, #4]
 802fc9a:	681b      	ldr	r3, [r3, #0]
 802fc9c:	f022 0201 	bic.w	r2, r2, #1
 802fca0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802fca2:	687b      	ldr	r3, [r7, #4]
 802fca4:	681b      	ldr	r3, [r3, #0]
 802fca6:	4a3c      	ldr	r2, [pc, #240]	; (802fd98 <HAL_DMA_Abort_IT+0x3a8>)
 802fca8:	4293      	cmp	r3, r2
 802fcaa:	d072      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcac:	687b      	ldr	r3, [r7, #4]
 802fcae:	681b      	ldr	r3, [r3, #0]
 802fcb0:	4a3a      	ldr	r2, [pc, #232]	; (802fd9c <HAL_DMA_Abort_IT+0x3ac>)
 802fcb2:	4293      	cmp	r3, r2
 802fcb4:	d06d      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcb6:	687b      	ldr	r3, [r7, #4]
 802fcb8:	681b      	ldr	r3, [r3, #0]
 802fcba:	4a39      	ldr	r2, [pc, #228]	; (802fda0 <HAL_DMA_Abort_IT+0x3b0>)
 802fcbc:	4293      	cmp	r3, r2
 802fcbe:	d068      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcc0:	687b      	ldr	r3, [r7, #4]
 802fcc2:	681b      	ldr	r3, [r3, #0]
 802fcc4:	4a37      	ldr	r2, [pc, #220]	; (802fda4 <HAL_DMA_Abort_IT+0x3b4>)
 802fcc6:	4293      	cmp	r3, r2
 802fcc8:	d063      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcca:	687b      	ldr	r3, [r7, #4]
 802fccc:	681b      	ldr	r3, [r3, #0]
 802fcce:	4a36      	ldr	r2, [pc, #216]	; (802fda8 <HAL_DMA_Abort_IT+0x3b8>)
 802fcd0:	4293      	cmp	r3, r2
 802fcd2:	d05e      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcd4:	687b      	ldr	r3, [r7, #4]
 802fcd6:	681b      	ldr	r3, [r3, #0]
 802fcd8:	4a34      	ldr	r2, [pc, #208]	; (802fdac <HAL_DMA_Abort_IT+0x3bc>)
 802fcda:	4293      	cmp	r3, r2
 802fcdc:	d059      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcde:	687b      	ldr	r3, [r7, #4]
 802fce0:	681b      	ldr	r3, [r3, #0]
 802fce2:	4a33      	ldr	r2, [pc, #204]	; (802fdb0 <HAL_DMA_Abort_IT+0x3c0>)
 802fce4:	4293      	cmp	r3, r2
 802fce6:	d054      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fce8:	687b      	ldr	r3, [r7, #4]
 802fcea:	681b      	ldr	r3, [r3, #0]
 802fcec:	4a31      	ldr	r2, [pc, #196]	; (802fdb4 <HAL_DMA_Abort_IT+0x3c4>)
 802fcee:	4293      	cmp	r3, r2
 802fcf0:	d04f      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcf2:	687b      	ldr	r3, [r7, #4]
 802fcf4:	681b      	ldr	r3, [r3, #0]
 802fcf6:	4a30      	ldr	r2, [pc, #192]	; (802fdb8 <HAL_DMA_Abort_IT+0x3c8>)
 802fcf8:	4293      	cmp	r3, r2
 802fcfa:	d04a      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fcfc:	687b      	ldr	r3, [r7, #4]
 802fcfe:	681b      	ldr	r3, [r3, #0]
 802fd00:	4a2e      	ldr	r2, [pc, #184]	; (802fdbc <HAL_DMA_Abort_IT+0x3cc>)
 802fd02:	4293      	cmp	r3, r2
 802fd04:	d045      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd06:	687b      	ldr	r3, [r7, #4]
 802fd08:	681b      	ldr	r3, [r3, #0]
 802fd0a:	4a2d      	ldr	r2, [pc, #180]	; (802fdc0 <HAL_DMA_Abort_IT+0x3d0>)
 802fd0c:	4293      	cmp	r3, r2
 802fd0e:	d040      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd10:	687b      	ldr	r3, [r7, #4]
 802fd12:	681b      	ldr	r3, [r3, #0]
 802fd14:	4a2b      	ldr	r2, [pc, #172]	; (802fdc4 <HAL_DMA_Abort_IT+0x3d4>)
 802fd16:	4293      	cmp	r3, r2
 802fd18:	d03b      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd1a:	687b      	ldr	r3, [r7, #4]
 802fd1c:	681b      	ldr	r3, [r3, #0]
 802fd1e:	4a2a      	ldr	r2, [pc, #168]	; (802fdc8 <HAL_DMA_Abort_IT+0x3d8>)
 802fd20:	4293      	cmp	r3, r2
 802fd22:	d036      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd24:	687b      	ldr	r3, [r7, #4]
 802fd26:	681b      	ldr	r3, [r3, #0]
 802fd28:	4a28      	ldr	r2, [pc, #160]	; (802fdcc <HAL_DMA_Abort_IT+0x3dc>)
 802fd2a:	4293      	cmp	r3, r2
 802fd2c:	d031      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd2e:	687b      	ldr	r3, [r7, #4]
 802fd30:	681b      	ldr	r3, [r3, #0]
 802fd32:	4a27      	ldr	r2, [pc, #156]	; (802fdd0 <HAL_DMA_Abort_IT+0x3e0>)
 802fd34:	4293      	cmp	r3, r2
 802fd36:	d02c      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd38:	687b      	ldr	r3, [r7, #4]
 802fd3a:	681b      	ldr	r3, [r3, #0]
 802fd3c:	4a25      	ldr	r2, [pc, #148]	; (802fdd4 <HAL_DMA_Abort_IT+0x3e4>)
 802fd3e:	4293      	cmp	r3, r2
 802fd40:	d027      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd42:	687b      	ldr	r3, [r7, #4]
 802fd44:	681b      	ldr	r3, [r3, #0]
 802fd46:	4a24      	ldr	r2, [pc, #144]	; (802fdd8 <HAL_DMA_Abort_IT+0x3e8>)
 802fd48:	4293      	cmp	r3, r2
 802fd4a:	d022      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd4c:	687b      	ldr	r3, [r7, #4]
 802fd4e:	681b      	ldr	r3, [r3, #0]
 802fd50:	4a22      	ldr	r2, [pc, #136]	; (802fddc <HAL_DMA_Abort_IT+0x3ec>)
 802fd52:	4293      	cmp	r3, r2
 802fd54:	d01d      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd56:	687b      	ldr	r3, [r7, #4]
 802fd58:	681b      	ldr	r3, [r3, #0]
 802fd5a:	4a21      	ldr	r2, [pc, #132]	; (802fde0 <HAL_DMA_Abort_IT+0x3f0>)
 802fd5c:	4293      	cmp	r3, r2
 802fd5e:	d018      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd60:	687b      	ldr	r3, [r7, #4]
 802fd62:	681b      	ldr	r3, [r3, #0]
 802fd64:	4a1f      	ldr	r2, [pc, #124]	; (802fde4 <HAL_DMA_Abort_IT+0x3f4>)
 802fd66:	4293      	cmp	r3, r2
 802fd68:	d013      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd6a:	687b      	ldr	r3, [r7, #4]
 802fd6c:	681b      	ldr	r3, [r3, #0]
 802fd6e:	4a1e      	ldr	r2, [pc, #120]	; (802fde8 <HAL_DMA_Abort_IT+0x3f8>)
 802fd70:	4293      	cmp	r3, r2
 802fd72:	d00e      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd74:	687b      	ldr	r3, [r7, #4]
 802fd76:	681b      	ldr	r3, [r3, #0]
 802fd78:	4a1c      	ldr	r2, [pc, #112]	; (802fdec <HAL_DMA_Abort_IT+0x3fc>)
 802fd7a:	4293      	cmp	r3, r2
 802fd7c:	d009      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd7e:	687b      	ldr	r3, [r7, #4]
 802fd80:	681b      	ldr	r3, [r3, #0]
 802fd82:	4a1b      	ldr	r2, [pc, #108]	; (802fdf0 <HAL_DMA_Abort_IT+0x400>)
 802fd84:	4293      	cmp	r3, r2
 802fd86:	d004      	beq.n	802fd92 <HAL_DMA_Abort_IT+0x3a2>
 802fd88:	687b      	ldr	r3, [r7, #4]
 802fd8a:	681b      	ldr	r3, [r3, #0]
 802fd8c:	4a19      	ldr	r2, [pc, #100]	; (802fdf4 <HAL_DMA_Abort_IT+0x404>)
 802fd8e:	4293      	cmp	r3, r2
 802fd90:	d132      	bne.n	802fdf8 <HAL_DMA_Abort_IT+0x408>
 802fd92:	2301      	movs	r3, #1
 802fd94:	e031      	b.n	802fdfa <HAL_DMA_Abort_IT+0x40a>
 802fd96:	bf00      	nop
 802fd98:	40020010 	.word	0x40020010
 802fd9c:	40020028 	.word	0x40020028
 802fda0:	40020040 	.word	0x40020040
 802fda4:	40020058 	.word	0x40020058
 802fda8:	40020070 	.word	0x40020070
 802fdac:	40020088 	.word	0x40020088
 802fdb0:	400200a0 	.word	0x400200a0
 802fdb4:	400200b8 	.word	0x400200b8
 802fdb8:	40020410 	.word	0x40020410
 802fdbc:	40020428 	.word	0x40020428
 802fdc0:	40020440 	.word	0x40020440
 802fdc4:	40020458 	.word	0x40020458
 802fdc8:	40020470 	.word	0x40020470
 802fdcc:	40020488 	.word	0x40020488
 802fdd0:	400204a0 	.word	0x400204a0
 802fdd4:	400204b8 	.word	0x400204b8
 802fdd8:	58025408 	.word	0x58025408
 802fddc:	5802541c 	.word	0x5802541c
 802fde0:	58025430 	.word	0x58025430
 802fde4:	58025444 	.word	0x58025444
 802fde8:	58025458 	.word	0x58025458
 802fdec:	5802546c 	.word	0x5802546c
 802fdf0:	58025480 	.word	0x58025480
 802fdf4:	58025494 	.word	0x58025494
 802fdf8:	2300      	movs	r3, #0
 802fdfa:	2b00      	cmp	r3, #0
 802fdfc:	d028      	beq.n	802fe50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802fdfe:	687b      	ldr	r3, [r7, #4]
 802fe00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802fe02:	681a      	ldr	r2, [r3, #0]
 802fe04:	687b      	ldr	r3, [r7, #4]
 802fe06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802fe08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802fe0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802fe0e:	687b      	ldr	r3, [r7, #4]
 802fe10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802fe12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802fe14:	687b      	ldr	r3, [r7, #4]
 802fe16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802fe18:	f003 031f 	and.w	r3, r3, #31
 802fe1c:	2201      	movs	r2, #1
 802fe1e:	409a      	lsls	r2, r3
 802fe20:	68fb      	ldr	r3, [r7, #12]
 802fe22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802fe24:	687b      	ldr	r3, [r7, #4]
 802fe26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802fe28:	687a      	ldr	r2, [r7, #4]
 802fe2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802fe2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802fe2e:	687b      	ldr	r3, [r7, #4]
 802fe30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fe32:	2b00      	cmp	r3, #0
 802fe34:	d00c      	beq.n	802fe50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802fe36:	687b      	ldr	r3, [r7, #4]
 802fe38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fe3a:	681a      	ldr	r2, [r3, #0]
 802fe3c:	687b      	ldr	r3, [r7, #4]
 802fe3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fe40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802fe44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802fe46:	687b      	ldr	r3, [r7, #4]
 802fe48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802fe4a:	687a      	ldr	r2, [r7, #4]
 802fe4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802fe4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802fe50:	687b      	ldr	r3, [r7, #4]
 802fe52:	2201      	movs	r2, #1
 802fe54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802fe58:	687b      	ldr	r3, [r7, #4]
 802fe5a:	2200      	movs	r2, #0
 802fe5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802fe60:	687b      	ldr	r3, [r7, #4]
 802fe62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802fe64:	2b00      	cmp	r3, #0
 802fe66:	d003      	beq.n	802fe70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802fe68:	687b      	ldr	r3, [r7, #4]
 802fe6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802fe6c:	6878      	ldr	r0, [r7, #4]
 802fe6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802fe70:	2300      	movs	r3, #0
}
 802fe72:	4618      	mov	r0, r3
 802fe74:	3710      	adds	r7, #16
 802fe76:	46bd      	mov	sp, r7
 802fe78:	bd80      	pop	{r7, pc}
 802fe7a:	bf00      	nop

0802fe7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802fe7c:	b580      	push	{r7, lr}
 802fe7e:	b08a      	sub	sp, #40	; 0x28
 802fe80:	af00      	add	r7, sp, #0
 802fe82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802fe84:	2300      	movs	r3, #0
 802fe86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802fe88:	4b67      	ldr	r3, [pc, #412]	; (8030028 <HAL_DMA_IRQHandler+0x1ac>)
 802fe8a:	681b      	ldr	r3, [r3, #0]
 802fe8c:	4a67      	ldr	r2, [pc, #412]	; (803002c <HAL_DMA_IRQHandler+0x1b0>)
 802fe8e:	fba2 2303 	umull	r2, r3, r2, r3
 802fe92:	0a9b      	lsrs	r3, r3, #10
 802fe94:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802fe96:	687b      	ldr	r3, [r7, #4]
 802fe98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802fe9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802fe9c:	687b      	ldr	r3, [r7, #4]
 802fe9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802fea0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802fea2:	6a3b      	ldr	r3, [r7, #32]
 802fea4:	681b      	ldr	r3, [r3, #0]
 802fea6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802fea8:	69fb      	ldr	r3, [r7, #28]
 802feaa:	681b      	ldr	r3, [r3, #0]
 802feac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802feae:	687b      	ldr	r3, [r7, #4]
 802feb0:	681b      	ldr	r3, [r3, #0]
 802feb2:	4a5f      	ldr	r2, [pc, #380]	; (8030030 <HAL_DMA_IRQHandler+0x1b4>)
 802feb4:	4293      	cmp	r3, r2
 802feb6:	d04a      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802feb8:	687b      	ldr	r3, [r7, #4]
 802feba:	681b      	ldr	r3, [r3, #0]
 802febc:	4a5d      	ldr	r2, [pc, #372]	; (8030034 <HAL_DMA_IRQHandler+0x1b8>)
 802febe:	4293      	cmp	r3, r2
 802fec0:	d045      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802fec2:	687b      	ldr	r3, [r7, #4]
 802fec4:	681b      	ldr	r3, [r3, #0]
 802fec6:	4a5c      	ldr	r2, [pc, #368]	; (8030038 <HAL_DMA_IRQHandler+0x1bc>)
 802fec8:	4293      	cmp	r3, r2
 802feca:	d040      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802fecc:	687b      	ldr	r3, [r7, #4]
 802fece:	681b      	ldr	r3, [r3, #0]
 802fed0:	4a5a      	ldr	r2, [pc, #360]	; (803003c <HAL_DMA_IRQHandler+0x1c0>)
 802fed2:	4293      	cmp	r3, r2
 802fed4:	d03b      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802fed6:	687b      	ldr	r3, [r7, #4]
 802fed8:	681b      	ldr	r3, [r3, #0]
 802feda:	4a59      	ldr	r2, [pc, #356]	; (8030040 <HAL_DMA_IRQHandler+0x1c4>)
 802fedc:	4293      	cmp	r3, r2
 802fede:	d036      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802fee0:	687b      	ldr	r3, [r7, #4]
 802fee2:	681b      	ldr	r3, [r3, #0]
 802fee4:	4a57      	ldr	r2, [pc, #348]	; (8030044 <HAL_DMA_IRQHandler+0x1c8>)
 802fee6:	4293      	cmp	r3, r2
 802fee8:	d031      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802feea:	687b      	ldr	r3, [r7, #4]
 802feec:	681b      	ldr	r3, [r3, #0]
 802feee:	4a56      	ldr	r2, [pc, #344]	; (8030048 <HAL_DMA_IRQHandler+0x1cc>)
 802fef0:	4293      	cmp	r3, r2
 802fef2:	d02c      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802fef4:	687b      	ldr	r3, [r7, #4]
 802fef6:	681b      	ldr	r3, [r3, #0]
 802fef8:	4a54      	ldr	r2, [pc, #336]	; (803004c <HAL_DMA_IRQHandler+0x1d0>)
 802fefa:	4293      	cmp	r3, r2
 802fefc:	d027      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802fefe:	687b      	ldr	r3, [r7, #4]
 802ff00:	681b      	ldr	r3, [r3, #0]
 802ff02:	4a53      	ldr	r2, [pc, #332]	; (8030050 <HAL_DMA_IRQHandler+0x1d4>)
 802ff04:	4293      	cmp	r3, r2
 802ff06:	d022      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802ff08:	687b      	ldr	r3, [r7, #4]
 802ff0a:	681b      	ldr	r3, [r3, #0]
 802ff0c:	4a51      	ldr	r2, [pc, #324]	; (8030054 <HAL_DMA_IRQHandler+0x1d8>)
 802ff0e:	4293      	cmp	r3, r2
 802ff10:	d01d      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802ff12:	687b      	ldr	r3, [r7, #4]
 802ff14:	681b      	ldr	r3, [r3, #0]
 802ff16:	4a50      	ldr	r2, [pc, #320]	; (8030058 <HAL_DMA_IRQHandler+0x1dc>)
 802ff18:	4293      	cmp	r3, r2
 802ff1a:	d018      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802ff1c:	687b      	ldr	r3, [r7, #4]
 802ff1e:	681b      	ldr	r3, [r3, #0]
 802ff20:	4a4e      	ldr	r2, [pc, #312]	; (803005c <HAL_DMA_IRQHandler+0x1e0>)
 802ff22:	4293      	cmp	r3, r2
 802ff24:	d013      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802ff26:	687b      	ldr	r3, [r7, #4]
 802ff28:	681b      	ldr	r3, [r3, #0]
 802ff2a:	4a4d      	ldr	r2, [pc, #308]	; (8030060 <HAL_DMA_IRQHandler+0x1e4>)
 802ff2c:	4293      	cmp	r3, r2
 802ff2e:	d00e      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802ff30:	687b      	ldr	r3, [r7, #4]
 802ff32:	681b      	ldr	r3, [r3, #0]
 802ff34:	4a4b      	ldr	r2, [pc, #300]	; (8030064 <HAL_DMA_IRQHandler+0x1e8>)
 802ff36:	4293      	cmp	r3, r2
 802ff38:	d009      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802ff3a:	687b      	ldr	r3, [r7, #4]
 802ff3c:	681b      	ldr	r3, [r3, #0]
 802ff3e:	4a4a      	ldr	r2, [pc, #296]	; (8030068 <HAL_DMA_IRQHandler+0x1ec>)
 802ff40:	4293      	cmp	r3, r2
 802ff42:	d004      	beq.n	802ff4e <HAL_DMA_IRQHandler+0xd2>
 802ff44:	687b      	ldr	r3, [r7, #4]
 802ff46:	681b      	ldr	r3, [r3, #0]
 802ff48:	4a48      	ldr	r2, [pc, #288]	; (803006c <HAL_DMA_IRQHandler+0x1f0>)
 802ff4a:	4293      	cmp	r3, r2
 802ff4c:	d101      	bne.n	802ff52 <HAL_DMA_IRQHandler+0xd6>
 802ff4e:	2301      	movs	r3, #1
 802ff50:	e000      	b.n	802ff54 <HAL_DMA_IRQHandler+0xd8>
 802ff52:	2300      	movs	r3, #0
 802ff54:	2b00      	cmp	r3, #0
 802ff56:	f000 842b 	beq.w	80307b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802ff5a:	687b      	ldr	r3, [r7, #4]
 802ff5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ff5e:	f003 031f 	and.w	r3, r3, #31
 802ff62:	2208      	movs	r2, #8
 802ff64:	409a      	lsls	r2, r3
 802ff66:	69bb      	ldr	r3, [r7, #24]
 802ff68:	4013      	ands	r3, r2
 802ff6a:	2b00      	cmp	r3, #0
 802ff6c:	f000 80a2 	beq.w	80300b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802ff70:	687b      	ldr	r3, [r7, #4]
 802ff72:	681b      	ldr	r3, [r3, #0]
 802ff74:	4a2e      	ldr	r2, [pc, #184]	; (8030030 <HAL_DMA_IRQHandler+0x1b4>)
 802ff76:	4293      	cmp	r3, r2
 802ff78:	d04a      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ff7a:	687b      	ldr	r3, [r7, #4]
 802ff7c:	681b      	ldr	r3, [r3, #0]
 802ff7e:	4a2d      	ldr	r2, [pc, #180]	; (8030034 <HAL_DMA_IRQHandler+0x1b8>)
 802ff80:	4293      	cmp	r3, r2
 802ff82:	d045      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ff84:	687b      	ldr	r3, [r7, #4]
 802ff86:	681b      	ldr	r3, [r3, #0]
 802ff88:	4a2b      	ldr	r2, [pc, #172]	; (8030038 <HAL_DMA_IRQHandler+0x1bc>)
 802ff8a:	4293      	cmp	r3, r2
 802ff8c:	d040      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ff8e:	687b      	ldr	r3, [r7, #4]
 802ff90:	681b      	ldr	r3, [r3, #0]
 802ff92:	4a2a      	ldr	r2, [pc, #168]	; (803003c <HAL_DMA_IRQHandler+0x1c0>)
 802ff94:	4293      	cmp	r3, r2
 802ff96:	d03b      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ff98:	687b      	ldr	r3, [r7, #4]
 802ff9a:	681b      	ldr	r3, [r3, #0]
 802ff9c:	4a28      	ldr	r2, [pc, #160]	; (8030040 <HAL_DMA_IRQHandler+0x1c4>)
 802ff9e:	4293      	cmp	r3, r2
 802ffa0:	d036      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffa2:	687b      	ldr	r3, [r7, #4]
 802ffa4:	681b      	ldr	r3, [r3, #0]
 802ffa6:	4a27      	ldr	r2, [pc, #156]	; (8030044 <HAL_DMA_IRQHandler+0x1c8>)
 802ffa8:	4293      	cmp	r3, r2
 802ffaa:	d031      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffac:	687b      	ldr	r3, [r7, #4]
 802ffae:	681b      	ldr	r3, [r3, #0]
 802ffb0:	4a25      	ldr	r2, [pc, #148]	; (8030048 <HAL_DMA_IRQHandler+0x1cc>)
 802ffb2:	4293      	cmp	r3, r2
 802ffb4:	d02c      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffb6:	687b      	ldr	r3, [r7, #4]
 802ffb8:	681b      	ldr	r3, [r3, #0]
 802ffba:	4a24      	ldr	r2, [pc, #144]	; (803004c <HAL_DMA_IRQHandler+0x1d0>)
 802ffbc:	4293      	cmp	r3, r2
 802ffbe:	d027      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffc0:	687b      	ldr	r3, [r7, #4]
 802ffc2:	681b      	ldr	r3, [r3, #0]
 802ffc4:	4a22      	ldr	r2, [pc, #136]	; (8030050 <HAL_DMA_IRQHandler+0x1d4>)
 802ffc6:	4293      	cmp	r3, r2
 802ffc8:	d022      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffca:	687b      	ldr	r3, [r7, #4]
 802ffcc:	681b      	ldr	r3, [r3, #0]
 802ffce:	4a21      	ldr	r2, [pc, #132]	; (8030054 <HAL_DMA_IRQHandler+0x1d8>)
 802ffd0:	4293      	cmp	r3, r2
 802ffd2:	d01d      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffd4:	687b      	ldr	r3, [r7, #4]
 802ffd6:	681b      	ldr	r3, [r3, #0]
 802ffd8:	4a1f      	ldr	r2, [pc, #124]	; (8030058 <HAL_DMA_IRQHandler+0x1dc>)
 802ffda:	4293      	cmp	r3, r2
 802ffdc:	d018      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffde:	687b      	ldr	r3, [r7, #4]
 802ffe0:	681b      	ldr	r3, [r3, #0]
 802ffe2:	4a1e      	ldr	r2, [pc, #120]	; (803005c <HAL_DMA_IRQHandler+0x1e0>)
 802ffe4:	4293      	cmp	r3, r2
 802ffe6:	d013      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802ffe8:	687b      	ldr	r3, [r7, #4]
 802ffea:	681b      	ldr	r3, [r3, #0]
 802ffec:	4a1c      	ldr	r2, [pc, #112]	; (8030060 <HAL_DMA_IRQHandler+0x1e4>)
 802ffee:	4293      	cmp	r3, r2
 802fff0:	d00e      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802fff2:	687b      	ldr	r3, [r7, #4]
 802fff4:	681b      	ldr	r3, [r3, #0]
 802fff6:	4a1b      	ldr	r2, [pc, #108]	; (8030064 <HAL_DMA_IRQHandler+0x1e8>)
 802fff8:	4293      	cmp	r3, r2
 802fffa:	d009      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 802fffc:	687b      	ldr	r3, [r7, #4]
 802fffe:	681b      	ldr	r3, [r3, #0]
 8030000:	4a19      	ldr	r2, [pc, #100]	; (8030068 <HAL_DMA_IRQHandler+0x1ec>)
 8030002:	4293      	cmp	r3, r2
 8030004:	d004      	beq.n	8030010 <HAL_DMA_IRQHandler+0x194>
 8030006:	687b      	ldr	r3, [r7, #4]
 8030008:	681b      	ldr	r3, [r3, #0]
 803000a:	4a18      	ldr	r2, [pc, #96]	; (803006c <HAL_DMA_IRQHandler+0x1f0>)
 803000c:	4293      	cmp	r3, r2
 803000e:	d12f      	bne.n	8030070 <HAL_DMA_IRQHandler+0x1f4>
 8030010:	687b      	ldr	r3, [r7, #4]
 8030012:	681b      	ldr	r3, [r3, #0]
 8030014:	681b      	ldr	r3, [r3, #0]
 8030016:	f003 0304 	and.w	r3, r3, #4
 803001a:	2b00      	cmp	r3, #0
 803001c:	bf14      	ite	ne
 803001e:	2301      	movne	r3, #1
 8030020:	2300      	moveq	r3, #0
 8030022:	b2db      	uxtb	r3, r3
 8030024:	e02e      	b.n	8030084 <HAL_DMA_IRQHandler+0x208>
 8030026:	bf00      	nop
 8030028:	24000004 	.word	0x24000004
 803002c:	1b4e81b5 	.word	0x1b4e81b5
 8030030:	40020010 	.word	0x40020010
 8030034:	40020028 	.word	0x40020028
 8030038:	40020040 	.word	0x40020040
 803003c:	40020058 	.word	0x40020058
 8030040:	40020070 	.word	0x40020070
 8030044:	40020088 	.word	0x40020088
 8030048:	400200a0 	.word	0x400200a0
 803004c:	400200b8 	.word	0x400200b8
 8030050:	40020410 	.word	0x40020410
 8030054:	40020428 	.word	0x40020428
 8030058:	40020440 	.word	0x40020440
 803005c:	40020458 	.word	0x40020458
 8030060:	40020470 	.word	0x40020470
 8030064:	40020488 	.word	0x40020488
 8030068:	400204a0 	.word	0x400204a0
 803006c:	400204b8 	.word	0x400204b8
 8030070:	687b      	ldr	r3, [r7, #4]
 8030072:	681b      	ldr	r3, [r3, #0]
 8030074:	681b      	ldr	r3, [r3, #0]
 8030076:	f003 0308 	and.w	r3, r3, #8
 803007a:	2b00      	cmp	r3, #0
 803007c:	bf14      	ite	ne
 803007e:	2301      	movne	r3, #1
 8030080:	2300      	moveq	r3, #0
 8030082:	b2db      	uxtb	r3, r3
 8030084:	2b00      	cmp	r3, #0
 8030086:	d015      	beq.n	80300b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8030088:	687b      	ldr	r3, [r7, #4]
 803008a:	681b      	ldr	r3, [r3, #0]
 803008c:	681a      	ldr	r2, [r3, #0]
 803008e:	687b      	ldr	r3, [r7, #4]
 8030090:	681b      	ldr	r3, [r3, #0]
 8030092:	f022 0204 	bic.w	r2, r2, #4
 8030096:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8030098:	687b      	ldr	r3, [r7, #4]
 803009a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803009c:	f003 031f 	and.w	r3, r3, #31
 80300a0:	2208      	movs	r2, #8
 80300a2:	409a      	lsls	r2, r3
 80300a4:	6a3b      	ldr	r3, [r7, #32]
 80300a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80300a8:	687b      	ldr	r3, [r7, #4]
 80300aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80300ac:	f043 0201 	orr.w	r2, r3, #1
 80300b0:	687b      	ldr	r3, [r7, #4]
 80300b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80300b4:	687b      	ldr	r3, [r7, #4]
 80300b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80300b8:	f003 031f 	and.w	r3, r3, #31
 80300bc:	69ba      	ldr	r2, [r7, #24]
 80300be:	fa22 f303 	lsr.w	r3, r2, r3
 80300c2:	f003 0301 	and.w	r3, r3, #1
 80300c6:	2b00      	cmp	r3, #0
 80300c8:	d06e      	beq.n	80301a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80300ca:	687b      	ldr	r3, [r7, #4]
 80300cc:	681b      	ldr	r3, [r3, #0]
 80300ce:	4a69      	ldr	r2, [pc, #420]	; (8030274 <HAL_DMA_IRQHandler+0x3f8>)
 80300d0:	4293      	cmp	r3, r2
 80300d2:	d04a      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 80300d4:	687b      	ldr	r3, [r7, #4]
 80300d6:	681b      	ldr	r3, [r3, #0]
 80300d8:	4a67      	ldr	r2, [pc, #412]	; (8030278 <HAL_DMA_IRQHandler+0x3fc>)
 80300da:	4293      	cmp	r3, r2
 80300dc:	d045      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 80300de:	687b      	ldr	r3, [r7, #4]
 80300e0:	681b      	ldr	r3, [r3, #0]
 80300e2:	4a66      	ldr	r2, [pc, #408]	; (803027c <HAL_DMA_IRQHandler+0x400>)
 80300e4:	4293      	cmp	r3, r2
 80300e6:	d040      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 80300e8:	687b      	ldr	r3, [r7, #4]
 80300ea:	681b      	ldr	r3, [r3, #0]
 80300ec:	4a64      	ldr	r2, [pc, #400]	; (8030280 <HAL_DMA_IRQHandler+0x404>)
 80300ee:	4293      	cmp	r3, r2
 80300f0:	d03b      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 80300f2:	687b      	ldr	r3, [r7, #4]
 80300f4:	681b      	ldr	r3, [r3, #0]
 80300f6:	4a63      	ldr	r2, [pc, #396]	; (8030284 <HAL_DMA_IRQHandler+0x408>)
 80300f8:	4293      	cmp	r3, r2
 80300fa:	d036      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 80300fc:	687b      	ldr	r3, [r7, #4]
 80300fe:	681b      	ldr	r3, [r3, #0]
 8030100:	4a61      	ldr	r2, [pc, #388]	; (8030288 <HAL_DMA_IRQHandler+0x40c>)
 8030102:	4293      	cmp	r3, r2
 8030104:	d031      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 8030106:	687b      	ldr	r3, [r7, #4]
 8030108:	681b      	ldr	r3, [r3, #0]
 803010a:	4a60      	ldr	r2, [pc, #384]	; (803028c <HAL_DMA_IRQHandler+0x410>)
 803010c:	4293      	cmp	r3, r2
 803010e:	d02c      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 8030110:	687b      	ldr	r3, [r7, #4]
 8030112:	681b      	ldr	r3, [r3, #0]
 8030114:	4a5e      	ldr	r2, [pc, #376]	; (8030290 <HAL_DMA_IRQHandler+0x414>)
 8030116:	4293      	cmp	r3, r2
 8030118:	d027      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 803011a:	687b      	ldr	r3, [r7, #4]
 803011c:	681b      	ldr	r3, [r3, #0]
 803011e:	4a5d      	ldr	r2, [pc, #372]	; (8030294 <HAL_DMA_IRQHandler+0x418>)
 8030120:	4293      	cmp	r3, r2
 8030122:	d022      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 8030124:	687b      	ldr	r3, [r7, #4]
 8030126:	681b      	ldr	r3, [r3, #0]
 8030128:	4a5b      	ldr	r2, [pc, #364]	; (8030298 <HAL_DMA_IRQHandler+0x41c>)
 803012a:	4293      	cmp	r3, r2
 803012c:	d01d      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 803012e:	687b      	ldr	r3, [r7, #4]
 8030130:	681b      	ldr	r3, [r3, #0]
 8030132:	4a5a      	ldr	r2, [pc, #360]	; (803029c <HAL_DMA_IRQHandler+0x420>)
 8030134:	4293      	cmp	r3, r2
 8030136:	d018      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 8030138:	687b      	ldr	r3, [r7, #4]
 803013a:	681b      	ldr	r3, [r3, #0]
 803013c:	4a58      	ldr	r2, [pc, #352]	; (80302a0 <HAL_DMA_IRQHandler+0x424>)
 803013e:	4293      	cmp	r3, r2
 8030140:	d013      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 8030142:	687b      	ldr	r3, [r7, #4]
 8030144:	681b      	ldr	r3, [r3, #0]
 8030146:	4a57      	ldr	r2, [pc, #348]	; (80302a4 <HAL_DMA_IRQHandler+0x428>)
 8030148:	4293      	cmp	r3, r2
 803014a:	d00e      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 803014c:	687b      	ldr	r3, [r7, #4]
 803014e:	681b      	ldr	r3, [r3, #0]
 8030150:	4a55      	ldr	r2, [pc, #340]	; (80302a8 <HAL_DMA_IRQHandler+0x42c>)
 8030152:	4293      	cmp	r3, r2
 8030154:	d009      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 8030156:	687b      	ldr	r3, [r7, #4]
 8030158:	681b      	ldr	r3, [r3, #0]
 803015a:	4a54      	ldr	r2, [pc, #336]	; (80302ac <HAL_DMA_IRQHandler+0x430>)
 803015c:	4293      	cmp	r3, r2
 803015e:	d004      	beq.n	803016a <HAL_DMA_IRQHandler+0x2ee>
 8030160:	687b      	ldr	r3, [r7, #4]
 8030162:	681b      	ldr	r3, [r3, #0]
 8030164:	4a52      	ldr	r2, [pc, #328]	; (80302b0 <HAL_DMA_IRQHandler+0x434>)
 8030166:	4293      	cmp	r3, r2
 8030168:	d10a      	bne.n	8030180 <HAL_DMA_IRQHandler+0x304>
 803016a:	687b      	ldr	r3, [r7, #4]
 803016c:	681b      	ldr	r3, [r3, #0]
 803016e:	695b      	ldr	r3, [r3, #20]
 8030170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030174:	2b00      	cmp	r3, #0
 8030176:	bf14      	ite	ne
 8030178:	2301      	movne	r3, #1
 803017a:	2300      	moveq	r3, #0
 803017c:	b2db      	uxtb	r3, r3
 803017e:	e003      	b.n	8030188 <HAL_DMA_IRQHandler+0x30c>
 8030180:	687b      	ldr	r3, [r7, #4]
 8030182:	681b      	ldr	r3, [r3, #0]
 8030184:	681b      	ldr	r3, [r3, #0]
 8030186:	2300      	movs	r3, #0
 8030188:	2b00      	cmp	r3, #0
 803018a:	d00d      	beq.n	80301a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 803018c:	687b      	ldr	r3, [r7, #4]
 803018e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030190:	f003 031f 	and.w	r3, r3, #31
 8030194:	2201      	movs	r2, #1
 8030196:	409a      	lsls	r2, r3
 8030198:	6a3b      	ldr	r3, [r7, #32]
 803019a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 803019c:	687b      	ldr	r3, [r7, #4]
 803019e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80301a0:	f043 0202 	orr.w	r2, r3, #2
 80301a4:	687b      	ldr	r3, [r7, #4]
 80301a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80301a8:	687b      	ldr	r3, [r7, #4]
 80301aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80301ac:	f003 031f 	and.w	r3, r3, #31
 80301b0:	2204      	movs	r2, #4
 80301b2:	409a      	lsls	r2, r3
 80301b4:	69bb      	ldr	r3, [r7, #24]
 80301b6:	4013      	ands	r3, r2
 80301b8:	2b00      	cmp	r3, #0
 80301ba:	f000 808f 	beq.w	80302dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80301be:	687b      	ldr	r3, [r7, #4]
 80301c0:	681b      	ldr	r3, [r3, #0]
 80301c2:	4a2c      	ldr	r2, [pc, #176]	; (8030274 <HAL_DMA_IRQHandler+0x3f8>)
 80301c4:	4293      	cmp	r3, r2
 80301c6:	d04a      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 80301c8:	687b      	ldr	r3, [r7, #4]
 80301ca:	681b      	ldr	r3, [r3, #0]
 80301cc:	4a2a      	ldr	r2, [pc, #168]	; (8030278 <HAL_DMA_IRQHandler+0x3fc>)
 80301ce:	4293      	cmp	r3, r2
 80301d0:	d045      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 80301d2:	687b      	ldr	r3, [r7, #4]
 80301d4:	681b      	ldr	r3, [r3, #0]
 80301d6:	4a29      	ldr	r2, [pc, #164]	; (803027c <HAL_DMA_IRQHandler+0x400>)
 80301d8:	4293      	cmp	r3, r2
 80301da:	d040      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 80301dc:	687b      	ldr	r3, [r7, #4]
 80301de:	681b      	ldr	r3, [r3, #0]
 80301e0:	4a27      	ldr	r2, [pc, #156]	; (8030280 <HAL_DMA_IRQHandler+0x404>)
 80301e2:	4293      	cmp	r3, r2
 80301e4:	d03b      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 80301e6:	687b      	ldr	r3, [r7, #4]
 80301e8:	681b      	ldr	r3, [r3, #0]
 80301ea:	4a26      	ldr	r2, [pc, #152]	; (8030284 <HAL_DMA_IRQHandler+0x408>)
 80301ec:	4293      	cmp	r3, r2
 80301ee:	d036      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 80301f0:	687b      	ldr	r3, [r7, #4]
 80301f2:	681b      	ldr	r3, [r3, #0]
 80301f4:	4a24      	ldr	r2, [pc, #144]	; (8030288 <HAL_DMA_IRQHandler+0x40c>)
 80301f6:	4293      	cmp	r3, r2
 80301f8:	d031      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 80301fa:	687b      	ldr	r3, [r7, #4]
 80301fc:	681b      	ldr	r3, [r3, #0]
 80301fe:	4a23      	ldr	r2, [pc, #140]	; (803028c <HAL_DMA_IRQHandler+0x410>)
 8030200:	4293      	cmp	r3, r2
 8030202:	d02c      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 8030204:	687b      	ldr	r3, [r7, #4]
 8030206:	681b      	ldr	r3, [r3, #0]
 8030208:	4a21      	ldr	r2, [pc, #132]	; (8030290 <HAL_DMA_IRQHandler+0x414>)
 803020a:	4293      	cmp	r3, r2
 803020c:	d027      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 803020e:	687b      	ldr	r3, [r7, #4]
 8030210:	681b      	ldr	r3, [r3, #0]
 8030212:	4a20      	ldr	r2, [pc, #128]	; (8030294 <HAL_DMA_IRQHandler+0x418>)
 8030214:	4293      	cmp	r3, r2
 8030216:	d022      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 8030218:	687b      	ldr	r3, [r7, #4]
 803021a:	681b      	ldr	r3, [r3, #0]
 803021c:	4a1e      	ldr	r2, [pc, #120]	; (8030298 <HAL_DMA_IRQHandler+0x41c>)
 803021e:	4293      	cmp	r3, r2
 8030220:	d01d      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 8030222:	687b      	ldr	r3, [r7, #4]
 8030224:	681b      	ldr	r3, [r3, #0]
 8030226:	4a1d      	ldr	r2, [pc, #116]	; (803029c <HAL_DMA_IRQHandler+0x420>)
 8030228:	4293      	cmp	r3, r2
 803022a:	d018      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 803022c:	687b      	ldr	r3, [r7, #4]
 803022e:	681b      	ldr	r3, [r3, #0]
 8030230:	4a1b      	ldr	r2, [pc, #108]	; (80302a0 <HAL_DMA_IRQHandler+0x424>)
 8030232:	4293      	cmp	r3, r2
 8030234:	d013      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 8030236:	687b      	ldr	r3, [r7, #4]
 8030238:	681b      	ldr	r3, [r3, #0]
 803023a:	4a1a      	ldr	r2, [pc, #104]	; (80302a4 <HAL_DMA_IRQHandler+0x428>)
 803023c:	4293      	cmp	r3, r2
 803023e:	d00e      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 8030240:	687b      	ldr	r3, [r7, #4]
 8030242:	681b      	ldr	r3, [r3, #0]
 8030244:	4a18      	ldr	r2, [pc, #96]	; (80302a8 <HAL_DMA_IRQHandler+0x42c>)
 8030246:	4293      	cmp	r3, r2
 8030248:	d009      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 803024a:	687b      	ldr	r3, [r7, #4]
 803024c:	681b      	ldr	r3, [r3, #0]
 803024e:	4a17      	ldr	r2, [pc, #92]	; (80302ac <HAL_DMA_IRQHandler+0x430>)
 8030250:	4293      	cmp	r3, r2
 8030252:	d004      	beq.n	803025e <HAL_DMA_IRQHandler+0x3e2>
 8030254:	687b      	ldr	r3, [r7, #4]
 8030256:	681b      	ldr	r3, [r3, #0]
 8030258:	4a15      	ldr	r2, [pc, #84]	; (80302b0 <HAL_DMA_IRQHandler+0x434>)
 803025a:	4293      	cmp	r3, r2
 803025c:	d12a      	bne.n	80302b4 <HAL_DMA_IRQHandler+0x438>
 803025e:	687b      	ldr	r3, [r7, #4]
 8030260:	681b      	ldr	r3, [r3, #0]
 8030262:	681b      	ldr	r3, [r3, #0]
 8030264:	f003 0302 	and.w	r3, r3, #2
 8030268:	2b00      	cmp	r3, #0
 803026a:	bf14      	ite	ne
 803026c:	2301      	movne	r3, #1
 803026e:	2300      	moveq	r3, #0
 8030270:	b2db      	uxtb	r3, r3
 8030272:	e023      	b.n	80302bc <HAL_DMA_IRQHandler+0x440>
 8030274:	40020010 	.word	0x40020010
 8030278:	40020028 	.word	0x40020028
 803027c:	40020040 	.word	0x40020040
 8030280:	40020058 	.word	0x40020058
 8030284:	40020070 	.word	0x40020070
 8030288:	40020088 	.word	0x40020088
 803028c:	400200a0 	.word	0x400200a0
 8030290:	400200b8 	.word	0x400200b8
 8030294:	40020410 	.word	0x40020410
 8030298:	40020428 	.word	0x40020428
 803029c:	40020440 	.word	0x40020440
 80302a0:	40020458 	.word	0x40020458
 80302a4:	40020470 	.word	0x40020470
 80302a8:	40020488 	.word	0x40020488
 80302ac:	400204a0 	.word	0x400204a0
 80302b0:	400204b8 	.word	0x400204b8
 80302b4:	687b      	ldr	r3, [r7, #4]
 80302b6:	681b      	ldr	r3, [r3, #0]
 80302b8:	681b      	ldr	r3, [r3, #0]
 80302ba:	2300      	movs	r3, #0
 80302bc:	2b00      	cmp	r3, #0
 80302be:	d00d      	beq.n	80302dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80302c0:	687b      	ldr	r3, [r7, #4]
 80302c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80302c4:	f003 031f 	and.w	r3, r3, #31
 80302c8:	2204      	movs	r2, #4
 80302ca:	409a      	lsls	r2, r3
 80302cc:	6a3b      	ldr	r3, [r7, #32]
 80302ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80302d0:	687b      	ldr	r3, [r7, #4]
 80302d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80302d4:	f043 0204 	orr.w	r2, r3, #4
 80302d8:	687b      	ldr	r3, [r7, #4]
 80302da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80302dc:	687b      	ldr	r3, [r7, #4]
 80302de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80302e0:	f003 031f 	and.w	r3, r3, #31
 80302e4:	2210      	movs	r2, #16
 80302e6:	409a      	lsls	r2, r3
 80302e8:	69bb      	ldr	r3, [r7, #24]
 80302ea:	4013      	ands	r3, r2
 80302ec:	2b00      	cmp	r3, #0
 80302ee:	f000 80a6 	beq.w	803043e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80302f2:	687b      	ldr	r3, [r7, #4]
 80302f4:	681b      	ldr	r3, [r3, #0]
 80302f6:	4a85      	ldr	r2, [pc, #532]	; (803050c <HAL_DMA_IRQHandler+0x690>)
 80302f8:	4293      	cmp	r3, r2
 80302fa:	d04a      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 80302fc:	687b      	ldr	r3, [r7, #4]
 80302fe:	681b      	ldr	r3, [r3, #0]
 8030300:	4a83      	ldr	r2, [pc, #524]	; (8030510 <HAL_DMA_IRQHandler+0x694>)
 8030302:	4293      	cmp	r3, r2
 8030304:	d045      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030306:	687b      	ldr	r3, [r7, #4]
 8030308:	681b      	ldr	r3, [r3, #0]
 803030a:	4a82      	ldr	r2, [pc, #520]	; (8030514 <HAL_DMA_IRQHandler+0x698>)
 803030c:	4293      	cmp	r3, r2
 803030e:	d040      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030310:	687b      	ldr	r3, [r7, #4]
 8030312:	681b      	ldr	r3, [r3, #0]
 8030314:	4a80      	ldr	r2, [pc, #512]	; (8030518 <HAL_DMA_IRQHandler+0x69c>)
 8030316:	4293      	cmp	r3, r2
 8030318:	d03b      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 803031a:	687b      	ldr	r3, [r7, #4]
 803031c:	681b      	ldr	r3, [r3, #0]
 803031e:	4a7f      	ldr	r2, [pc, #508]	; (803051c <HAL_DMA_IRQHandler+0x6a0>)
 8030320:	4293      	cmp	r3, r2
 8030322:	d036      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030324:	687b      	ldr	r3, [r7, #4]
 8030326:	681b      	ldr	r3, [r3, #0]
 8030328:	4a7d      	ldr	r2, [pc, #500]	; (8030520 <HAL_DMA_IRQHandler+0x6a4>)
 803032a:	4293      	cmp	r3, r2
 803032c:	d031      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 803032e:	687b      	ldr	r3, [r7, #4]
 8030330:	681b      	ldr	r3, [r3, #0]
 8030332:	4a7c      	ldr	r2, [pc, #496]	; (8030524 <HAL_DMA_IRQHandler+0x6a8>)
 8030334:	4293      	cmp	r3, r2
 8030336:	d02c      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030338:	687b      	ldr	r3, [r7, #4]
 803033a:	681b      	ldr	r3, [r3, #0]
 803033c:	4a7a      	ldr	r2, [pc, #488]	; (8030528 <HAL_DMA_IRQHandler+0x6ac>)
 803033e:	4293      	cmp	r3, r2
 8030340:	d027      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030342:	687b      	ldr	r3, [r7, #4]
 8030344:	681b      	ldr	r3, [r3, #0]
 8030346:	4a79      	ldr	r2, [pc, #484]	; (803052c <HAL_DMA_IRQHandler+0x6b0>)
 8030348:	4293      	cmp	r3, r2
 803034a:	d022      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 803034c:	687b      	ldr	r3, [r7, #4]
 803034e:	681b      	ldr	r3, [r3, #0]
 8030350:	4a77      	ldr	r2, [pc, #476]	; (8030530 <HAL_DMA_IRQHandler+0x6b4>)
 8030352:	4293      	cmp	r3, r2
 8030354:	d01d      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030356:	687b      	ldr	r3, [r7, #4]
 8030358:	681b      	ldr	r3, [r3, #0]
 803035a:	4a76      	ldr	r2, [pc, #472]	; (8030534 <HAL_DMA_IRQHandler+0x6b8>)
 803035c:	4293      	cmp	r3, r2
 803035e:	d018      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030360:	687b      	ldr	r3, [r7, #4]
 8030362:	681b      	ldr	r3, [r3, #0]
 8030364:	4a74      	ldr	r2, [pc, #464]	; (8030538 <HAL_DMA_IRQHandler+0x6bc>)
 8030366:	4293      	cmp	r3, r2
 8030368:	d013      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 803036a:	687b      	ldr	r3, [r7, #4]
 803036c:	681b      	ldr	r3, [r3, #0]
 803036e:	4a73      	ldr	r2, [pc, #460]	; (803053c <HAL_DMA_IRQHandler+0x6c0>)
 8030370:	4293      	cmp	r3, r2
 8030372:	d00e      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030374:	687b      	ldr	r3, [r7, #4]
 8030376:	681b      	ldr	r3, [r3, #0]
 8030378:	4a71      	ldr	r2, [pc, #452]	; (8030540 <HAL_DMA_IRQHandler+0x6c4>)
 803037a:	4293      	cmp	r3, r2
 803037c:	d009      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 803037e:	687b      	ldr	r3, [r7, #4]
 8030380:	681b      	ldr	r3, [r3, #0]
 8030382:	4a70      	ldr	r2, [pc, #448]	; (8030544 <HAL_DMA_IRQHandler+0x6c8>)
 8030384:	4293      	cmp	r3, r2
 8030386:	d004      	beq.n	8030392 <HAL_DMA_IRQHandler+0x516>
 8030388:	687b      	ldr	r3, [r7, #4]
 803038a:	681b      	ldr	r3, [r3, #0]
 803038c:	4a6e      	ldr	r2, [pc, #440]	; (8030548 <HAL_DMA_IRQHandler+0x6cc>)
 803038e:	4293      	cmp	r3, r2
 8030390:	d10a      	bne.n	80303a8 <HAL_DMA_IRQHandler+0x52c>
 8030392:	687b      	ldr	r3, [r7, #4]
 8030394:	681b      	ldr	r3, [r3, #0]
 8030396:	681b      	ldr	r3, [r3, #0]
 8030398:	f003 0308 	and.w	r3, r3, #8
 803039c:	2b00      	cmp	r3, #0
 803039e:	bf14      	ite	ne
 80303a0:	2301      	movne	r3, #1
 80303a2:	2300      	moveq	r3, #0
 80303a4:	b2db      	uxtb	r3, r3
 80303a6:	e009      	b.n	80303bc <HAL_DMA_IRQHandler+0x540>
 80303a8:	687b      	ldr	r3, [r7, #4]
 80303aa:	681b      	ldr	r3, [r3, #0]
 80303ac:	681b      	ldr	r3, [r3, #0]
 80303ae:	f003 0304 	and.w	r3, r3, #4
 80303b2:	2b00      	cmp	r3, #0
 80303b4:	bf14      	ite	ne
 80303b6:	2301      	movne	r3, #1
 80303b8:	2300      	moveq	r3, #0
 80303ba:	b2db      	uxtb	r3, r3
 80303bc:	2b00      	cmp	r3, #0
 80303be:	d03e      	beq.n	803043e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80303c0:	687b      	ldr	r3, [r7, #4]
 80303c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80303c4:	f003 031f 	and.w	r3, r3, #31
 80303c8:	2210      	movs	r2, #16
 80303ca:	409a      	lsls	r2, r3
 80303cc:	6a3b      	ldr	r3, [r7, #32]
 80303ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80303d0:	687b      	ldr	r3, [r7, #4]
 80303d2:	681b      	ldr	r3, [r3, #0]
 80303d4:	681b      	ldr	r3, [r3, #0]
 80303d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80303da:	2b00      	cmp	r3, #0
 80303dc:	d018      	beq.n	8030410 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80303de:	687b      	ldr	r3, [r7, #4]
 80303e0:	681b      	ldr	r3, [r3, #0]
 80303e2:	681b      	ldr	r3, [r3, #0]
 80303e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80303e8:	2b00      	cmp	r3, #0
 80303ea:	d108      	bne.n	80303fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80303ec:	687b      	ldr	r3, [r7, #4]
 80303ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80303f0:	2b00      	cmp	r3, #0
 80303f2:	d024      	beq.n	803043e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80303f4:	687b      	ldr	r3, [r7, #4]
 80303f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80303f8:	6878      	ldr	r0, [r7, #4]
 80303fa:	4798      	blx	r3
 80303fc:	e01f      	b.n	803043e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80303fe:	687b      	ldr	r3, [r7, #4]
 8030400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030402:	2b00      	cmp	r3, #0
 8030404:	d01b      	beq.n	803043e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8030406:	687b      	ldr	r3, [r7, #4]
 8030408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803040a:	6878      	ldr	r0, [r7, #4]
 803040c:	4798      	blx	r3
 803040e:	e016      	b.n	803043e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8030410:	687b      	ldr	r3, [r7, #4]
 8030412:	681b      	ldr	r3, [r3, #0]
 8030414:	681b      	ldr	r3, [r3, #0]
 8030416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803041a:	2b00      	cmp	r3, #0
 803041c:	d107      	bne.n	803042e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 803041e:	687b      	ldr	r3, [r7, #4]
 8030420:	681b      	ldr	r3, [r3, #0]
 8030422:	681a      	ldr	r2, [r3, #0]
 8030424:	687b      	ldr	r3, [r7, #4]
 8030426:	681b      	ldr	r3, [r3, #0]
 8030428:	f022 0208 	bic.w	r2, r2, #8
 803042c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 803042e:	687b      	ldr	r3, [r7, #4]
 8030430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030432:	2b00      	cmp	r3, #0
 8030434:	d003      	beq.n	803043e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8030436:	687b      	ldr	r3, [r7, #4]
 8030438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803043a:	6878      	ldr	r0, [r7, #4]
 803043c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 803043e:	687b      	ldr	r3, [r7, #4]
 8030440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030442:	f003 031f 	and.w	r3, r3, #31
 8030446:	2220      	movs	r2, #32
 8030448:	409a      	lsls	r2, r3
 803044a:	69bb      	ldr	r3, [r7, #24]
 803044c:	4013      	ands	r3, r2
 803044e:	2b00      	cmp	r3, #0
 8030450:	f000 8110 	beq.w	8030674 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8030454:	687b      	ldr	r3, [r7, #4]
 8030456:	681b      	ldr	r3, [r3, #0]
 8030458:	4a2c      	ldr	r2, [pc, #176]	; (803050c <HAL_DMA_IRQHandler+0x690>)
 803045a:	4293      	cmp	r3, r2
 803045c:	d04a      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 803045e:	687b      	ldr	r3, [r7, #4]
 8030460:	681b      	ldr	r3, [r3, #0]
 8030462:	4a2b      	ldr	r2, [pc, #172]	; (8030510 <HAL_DMA_IRQHandler+0x694>)
 8030464:	4293      	cmp	r3, r2
 8030466:	d045      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 8030468:	687b      	ldr	r3, [r7, #4]
 803046a:	681b      	ldr	r3, [r3, #0]
 803046c:	4a29      	ldr	r2, [pc, #164]	; (8030514 <HAL_DMA_IRQHandler+0x698>)
 803046e:	4293      	cmp	r3, r2
 8030470:	d040      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 8030472:	687b      	ldr	r3, [r7, #4]
 8030474:	681b      	ldr	r3, [r3, #0]
 8030476:	4a28      	ldr	r2, [pc, #160]	; (8030518 <HAL_DMA_IRQHandler+0x69c>)
 8030478:	4293      	cmp	r3, r2
 803047a:	d03b      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 803047c:	687b      	ldr	r3, [r7, #4]
 803047e:	681b      	ldr	r3, [r3, #0]
 8030480:	4a26      	ldr	r2, [pc, #152]	; (803051c <HAL_DMA_IRQHandler+0x6a0>)
 8030482:	4293      	cmp	r3, r2
 8030484:	d036      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 8030486:	687b      	ldr	r3, [r7, #4]
 8030488:	681b      	ldr	r3, [r3, #0]
 803048a:	4a25      	ldr	r2, [pc, #148]	; (8030520 <HAL_DMA_IRQHandler+0x6a4>)
 803048c:	4293      	cmp	r3, r2
 803048e:	d031      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 8030490:	687b      	ldr	r3, [r7, #4]
 8030492:	681b      	ldr	r3, [r3, #0]
 8030494:	4a23      	ldr	r2, [pc, #140]	; (8030524 <HAL_DMA_IRQHandler+0x6a8>)
 8030496:	4293      	cmp	r3, r2
 8030498:	d02c      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 803049a:	687b      	ldr	r3, [r7, #4]
 803049c:	681b      	ldr	r3, [r3, #0]
 803049e:	4a22      	ldr	r2, [pc, #136]	; (8030528 <HAL_DMA_IRQHandler+0x6ac>)
 80304a0:	4293      	cmp	r3, r2
 80304a2:	d027      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304a4:	687b      	ldr	r3, [r7, #4]
 80304a6:	681b      	ldr	r3, [r3, #0]
 80304a8:	4a20      	ldr	r2, [pc, #128]	; (803052c <HAL_DMA_IRQHandler+0x6b0>)
 80304aa:	4293      	cmp	r3, r2
 80304ac:	d022      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304ae:	687b      	ldr	r3, [r7, #4]
 80304b0:	681b      	ldr	r3, [r3, #0]
 80304b2:	4a1f      	ldr	r2, [pc, #124]	; (8030530 <HAL_DMA_IRQHandler+0x6b4>)
 80304b4:	4293      	cmp	r3, r2
 80304b6:	d01d      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304b8:	687b      	ldr	r3, [r7, #4]
 80304ba:	681b      	ldr	r3, [r3, #0]
 80304bc:	4a1d      	ldr	r2, [pc, #116]	; (8030534 <HAL_DMA_IRQHandler+0x6b8>)
 80304be:	4293      	cmp	r3, r2
 80304c0:	d018      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304c2:	687b      	ldr	r3, [r7, #4]
 80304c4:	681b      	ldr	r3, [r3, #0]
 80304c6:	4a1c      	ldr	r2, [pc, #112]	; (8030538 <HAL_DMA_IRQHandler+0x6bc>)
 80304c8:	4293      	cmp	r3, r2
 80304ca:	d013      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304cc:	687b      	ldr	r3, [r7, #4]
 80304ce:	681b      	ldr	r3, [r3, #0]
 80304d0:	4a1a      	ldr	r2, [pc, #104]	; (803053c <HAL_DMA_IRQHandler+0x6c0>)
 80304d2:	4293      	cmp	r3, r2
 80304d4:	d00e      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304d6:	687b      	ldr	r3, [r7, #4]
 80304d8:	681b      	ldr	r3, [r3, #0]
 80304da:	4a19      	ldr	r2, [pc, #100]	; (8030540 <HAL_DMA_IRQHandler+0x6c4>)
 80304dc:	4293      	cmp	r3, r2
 80304de:	d009      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304e0:	687b      	ldr	r3, [r7, #4]
 80304e2:	681b      	ldr	r3, [r3, #0]
 80304e4:	4a17      	ldr	r2, [pc, #92]	; (8030544 <HAL_DMA_IRQHandler+0x6c8>)
 80304e6:	4293      	cmp	r3, r2
 80304e8:	d004      	beq.n	80304f4 <HAL_DMA_IRQHandler+0x678>
 80304ea:	687b      	ldr	r3, [r7, #4]
 80304ec:	681b      	ldr	r3, [r3, #0]
 80304ee:	4a16      	ldr	r2, [pc, #88]	; (8030548 <HAL_DMA_IRQHandler+0x6cc>)
 80304f0:	4293      	cmp	r3, r2
 80304f2:	d12b      	bne.n	803054c <HAL_DMA_IRQHandler+0x6d0>
 80304f4:	687b      	ldr	r3, [r7, #4]
 80304f6:	681b      	ldr	r3, [r3, #0]
 80304f8:	681b      	ldr	r3, [r3, #0]
 80304fa:	f003 0310 	and.w	r3, r3, #16
 80304fe:	2b00      	cmp	r3, #0
 8030500:	bf14      	ite	ne
 8030502:	2301      	movne	r3, #1
 8030504:	2300      	moveq	r3, #0
 8030506:	b2db      	uxtb	r3, r3
 8030508:	e02a      	b.n	8030560 <HAL_DMA_IRQHandler+0x6e4>
 803050a:	bf00      	nop
 803050c:	40020010 	.word	0x40020010
 8030510:	40020028 	.word	0x40020028
 8030514:	40020040 	.word	0x40020040
 8030518:	40020058 	.word	0x40020058
 803051c:	40020070 	.word	0x40020070
 8030520:	40020088 	.word	0x40020088
 8030524:	400200a0 	.word	0x400200a0
 8030528:	400200b8 	.word	0x400200b8
 803052c:	40020410 	.word	0x40020410
 8030530:	40020428 	.word	0x40020428
 8030534:	40020440 	.word	0x40020440
 8030538:	40020458 	.word	0x40020458
 803053c:	40020470 	.word	0x40020470
 8030540:	40020488 	.word	0x40020488
 8030544:	400204a0 	.word	0x400204a0
 8030548:	400204b8 	.word	0x400204b8
 803054c:	687b      	ldr	r3, [r7, #4]
 803054e:	681b      	ldr	r3, [r3, #0]
 8030550:	681b      	ldr	r3, [r3, #0]
 8030552:	f003 0302 	and.w	r3, r3, #2
 8030556:	2b00      	cmp	r3, #0
 8030558:	bf14      	ite	ne
 803055a:	2301      	movne	r3, #1
 803055c:	2300      	moveq	r3, #0
 803055e:	b2db      	uxtb	r3, r3
 8030560:	2b00      	cmp	r3, #0
 8030562:	f000 8087 	beq.w	8030674 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8030566:	687b      	ldr	r3, [r7, #4]
 8030568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803056a:	f003 031f 	and.w	r3, r3, #31
 803056e:	2220      	movs	r2, #32
 8030570:	409a      	lsls	r2, r3
 8030572:	6a3b      	ldr	r3, [r7, #32]
 8030574:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8030576:	687b      	ldr	r3, [r7, #4]
 8030578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 803057c:	b2db      	uxtb	r3, r3
 803057e:	2b04      	cmp	r3, #4
 8030580:	d139      	bne.n	80305f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8030582:	687b      	ldr	r3, [r7, #4]
 8030584:	681b      	ldr	r3, [r3, #0]
 8030586:	681a      	ldr	r2, [r3, #0]
 8030588:	687b      	ldr	r3, [r7, #4]
 803058a:	681b      	ldr	r3, [r3, #0]
 803058c:	f022 0216 	bic.w	r2, r2, #22
 8030590:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8030592:	687b      	ldr	r3, [r7, #4]
 8030594:	681b      	ldr	r3, [r3, #0]
 8030596:	695a      	ldr	r2, [r3, #20]
 8030598:	687b      	ldr	r3, [r7, #4]
 803059a:	681b      	ldr	r3, [r3, #0]
 803059c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80305a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80305a2:	687b      	ldr	r3, [r7, #4]
 80305a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80305a6:	2b00      	cmp	r3, #0
 80305a8:	d103      	bne.n	80305b2 <HAL_DMA_IRQHandler+0x736>
 80305aa:	687b      	ldr	r3, [r7, #4]
 80305ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80305ae:	2b00      	cmp	r3, #0
 80305b0:	d007      	beq.n	80305c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80305b2:	687b      	ldr	r3, [r7, #4]
 80305b4:	681b      	ldr	r3, [r3, #0]
 80305b6:	681a      	ldr	r2, [r3, #0]
 80305b8:	687b      	ldr	r3, [r7, #4]
 80305ba:	681b      	ldr	r3, [r3, #0]
 80305bc:	f022 0208 	bic.w	r2, r2, #8
 80305c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80305c2:	687b      	ldr	r3, [r7, #4]
 80305c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80305c6:	f003 031f 	and.w	r3, r3, #31
 80305ca:	223f      	movs	r2, #63	; 0x3f
 80305cc:	409a      	lsls	r2, r3
 80305ce:	6a3b      	ldr	r3, [r7, #32]
 80305d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80305d2:	687b      	ldr	r3, [r7, #4]
 80305d4:	2201      	movs	r2, #1
 80305d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80305da:	687b      	ldr	r3, [r7, #4]
 80305dc:	2200      	movs	r2, #0
 80305de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80305e2:	687b      	ldr	r3, [r7, #4]
 80305e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80305e6:	2b00      	cmp	r3, #0
 80305e8:	f000 834a 	beq.w	8030c80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80305ec:	687b      	ldr	r3, [r7, #4]
 80305ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80305f0:	6878      	ldr	r0, [r7, #4]
 80305f2:	4798      	blx	r3
          }
          return;
 80305f4:	e344      	b.n	8030c80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80305f6:	687b      	ldr	r3, [r7, #4]
 80305f8:	681b      	ldr	r3, [r3, #0]
 80305fa:	681b      	ldr	r3, [r3, #0]
 80305fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8030600:	2b00      	cmp	r3, #0
 8030602:	d018      	beq.n	8030636 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8030604:	687b      	ldr	r3, [r7, #4]
 8030606:	681b      	ldr	r3, [r3, #0]
 8030608:	681b      	ldr	r3, [r3, #0]
 803060a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 803060e:	2b00      	cmp	r3, #0
 8030610:	d108      	bne.n	8030624 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8030612:	687b      	ldr	r3, [r7, #4]
 8030614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030616:	2b00      	cmp	r3, #0
 8030618:	d02c      	beq.n	8030674 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 803061a:	687b      	ldr	r3, [r7, #4]
 803061c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803061e:	6878      	ldr	r0, [r7, #4]
 8030620:	4798      	blx	r3
 8030622:	e027      	b.n	8030674 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8030624:	687b      	ldr	r3, [r7, #4]
 8030626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030628:	2b00      	cmp	r3, #0
 803062a:	d023      	beq.n	8030674 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 803062c:	687b      	ldr	r3, [r7, #4]
 803062e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030630:	6878      	ldr	r0, [r7, #4]
 8030632:	4798      	blx	r3
 8030634:	e01e      	b.n	8030674 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8030636:	687b      	ldr	r3, [r7, #4]
 8030638:	681b      	ldr	r3, [r3, #0]
 803063a:	681b      	ldr	r3, [r3, #0]
 803063c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030640:	2b00      	cmp	r3, #0
 8030642:	d10f      	bne.n	8030664 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8030644:	687b      	ldr	r3, [r7, #4]
 8030646:	681b      	ldr	r3, [r3, #0]
 8030648:	681a      	ldr	r2, [r3, #0]
 803064a:	687b      	ldr	r3, [r7, #4]
 803064c:	681b      	ldr	r3, [r3, #0]
 803064e:	f022 0210 	bic.w	r2, r2, #16
 8030652:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8030654:	687b      	ldr	r3, [r7, #4]
 8030656:	2201      	movs	r2, #1
 8030658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 803065c:	687b      	ldr	r3, [r7, #4]
 803065e:	2200      	movs	r2, #0
 8030660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8030664:	687b      	ldr	r3, [r7, #4]
 8030666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030668:	2b00      	cmp	r3, #0
 803066a:	d003      	beq.n	8030674 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 803066c:	687b      	ldr	r3, [r7, #4]
 803066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030670:	6878      	ldr	r0, [r7, #4]
 8030672:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8030674:	687b      	ldr	r3, [r7, #4]
 8030676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030678:	2b00      	cmp	r3, #0
 803067a:	f000 8306 	beq.w	8030c8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 803067e:	687b      	ldr	r3, [r7, #4]
 8030680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030682:	f003 0301 	and.w	r3, r3, #1
 8030686:	2b00      	cmp	r3, #0
 8030688:	f000 8088 	beq.w	803079c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 803068c:	687b      	ldr	r3, [r7, #4]
 803068e:	2204      	movs	r2, #4
 8030690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8030694:	687b      	ldr	r3, [r7, #4]
 8030696:	681b      	ldr	r3, [r3, #0]
 8030698:	4a7a      	ldr	r2, [pc, #488]	; (8030884 <HAL_DMA_IRQHandler+0xa08>)
 803069a:	4293      	cmp	r3, r2
 803069c:	d04a      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 803069e:	687b      	ldr	r3, [r7, #4]
 80306a0:	681b      	ldr	r3, [r3, #0]
 80306a2:	4a79      	ldr	r2, [pc, #484]	; (8030888 <HAL_DMA_IRQHandler+0xa0c>)
 80306a4:	4293      	cmp	r3, r2
 80306a6:	d045      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306a8:	687b      	ldr	r3, [r7, #4]
 80306aa:	681b      	ldr	r3, [r3, #0]
 80306ac:	4a77      	ldr	r2, [pc, #476]	; (803088c <HAL_DMA_IRQHandler+0xa10>)
 80306ae:	4293      	cmp	r3, r2
 80306b0:	d040      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306b2:	687b      	ldr	r3, [r7, #4]
 80306b4:	681b      	ldr	r3, [r3, #0]
 80306b6:	4a76      	ldr	r2, [pc, #472]	; (8030890 <HAL_DMA_IRQHandler+0xa14>)
 80306b8:	4293      	cmp	r3, r2
 80306ba:	d03b      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306bc:	687b      	ldr	r3, [r7, #4]
 80306be:	681b      	ldr	r3, [r3, #0]
 80306c0:	4a74      	ldr	r2, [pc, #464]	; (8030894 <HAL_DMA_IRQHandler+0xa18>)
 80306c2:	4293      	cmp	r3, r2
 80306c4:	d036      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306c6:	687b      	ldr	r3, [r7, #4]
 80306c8:	681b      	ldr	r3, [r3, #0]
 80306ca:	4a73      	ldr	r2, [pc, #460]	; (8030898 <HAL_DMA_IRQHandler+0xa1c>)
 80306cc:	4293      	cmp	r3, r2
 80306ce:	d031      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306d0:	687b      	ldr	r3, [r7, #4]
 80306d2:	681b      	ldr	r3, [r3, #0]
 80306d4:	4a71      	ldr	r2, [pc, #452]	; (803089c <HAL_DMA_IRQHandler+0xa20>)
 80306d6:	4293      	cmp	r3, r2
 80306d8:	d02c      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306da:	687b      	ldr	r3, [r7, #4]
 80306dc:	681b      	ldr	r3, [r3, #0]
 80306de:	4a70      	ldr	r2, [pc, #448]	; (80308a0 <HAL_DMA_IRQHandler+0xa24>)
 80306e0:	4293      	cmp	r3, r2
 80306e2:	d027      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306e4:	687b      	ldr	r3, [r7, #4]
 80306e6:	681b      	ldr	r3, [r3, #0]
 80306e8:	4a6e      	ldr	r2, [pc, #440]	; (80308a4 <HAL_DMA_IRQHandler+0xa28>)
 80306ea:	4293      	cmp	r3, r2
 80306ec:	d022      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306ee:	687b      	ldr	r3, [r7, #4]
 80306f0:	681b      	ldr	r3, [r3, #0]
 80306f2:	4a6d      	ldr	r2, [pc, #436]	; (80308a8 <HAL_DMA_IRQHandler+0xa2c>)
 80306f4:	4293      	cmp	r3, r2
 80306f6:	d01d      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 80306f8:	687b      	ldr	r3, [r7, #4]
 80306fa:	681b      	ldr	r3, [r3, #0]
 80306fc:	4a6b      	ldr	r2, [pc, #428]	; (80308ac <HAL_DMA_IRQHandler+0xa30>)
 80306fe:	4293      	cmp	r3, r2
 8030700:	d018      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 8030702:	687b      	ldr	r3, [r7, #4]
 8030704:	681b      	ldr	r3, [r3, #0]
 8030706:	4a6a      	ldr	r2, [pc, #424]	; (80308b0 <HAL_DMA_IRQHandler+0xa34>)
 8030708:	4293      	cmp	r3, r2
 803070a:	d013      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 803070c:	687b      	ldr	r3, [r7, #4]
 803070e:	681b      	ldr	r3, [r3, #0]
 8030710:	4a68      	ldr	r2, [pc, #416]	; (80308b4 <HAL_DMA_IRQHandler+0xa38>)
 8030712:	4293      	cmp	r3, r2
 8030714:	d00e      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 8030716:	687b      	ldr	r3, [r7, #4]
 8030718:	681b      	ldr	r3, [r3, #0]
 803071a:	4a67      	ldr	r2, [pc, #412]	; (80308b8 <HAL_DMA_IRQHandler+0xa3c>)
 803071c:	4293      	cmp	r3, r2
 803071e:	d009      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 8030720:	687b      	ldr	r3, [r7, #4]
 8030722:	681b      	ldr	r3, [r3, #0]
 8030724:	4a65      	ldr	r2, [pc, #404]	; (80308bc <HAL_DMA_IRQHandler+0xa40>)
 8030726:	4293      	cmp	r3, r2
 8030728:	d004      	beq.n	8030734 <HAL_DMA_IRQHandler+0x8b8>
 803072a:	687b      	ldr	r3, [r7, #4]
 803072c:	681b      	ldr	r3, [r3, #0]
 803072e:	4a64      	ldr	r2, [pc, #400]	; (80308c0 <HAL_DMA_IRQHandler+0xa44>)
 8030730:	4293      	cmp	r3, r2
 8030732:	d108      	bne.n	8030746 <HAL_DMA_IRQHandler+0x8ca>
 8030734:	687b      	ldr	r3, [r7, #4]
 8030736:	681b      	ldr	r3, [r3, #0]
 8030738:	681a      	ldr	r2, [r3, #0]
 803073a:	687b      	ldr	r3, [r7, #4]
 803073c:	681b      	ldr	r3, [r3, #0]
 803073e:	f022 0201 	bic.w	r2, r2, #1
 8030742:	601a      	str	r2, [r3, #0]
 8030744:	e007      	b.n	8030756 <HAL_DMA_IRQHandler+0x8da>
 8030746:	687b      	ldr	r3, [r7, #4]
 8030748:	681b      	ldr	r3, [r3, #0]
 803074a:	681a      	ldr	r2, [r3, #0]
 803074c:	687b      	ldr	r3, [r7, #4]
 803074e:	681b      	ldr	r3, [r3, #0]
 8030750:	f022 0201 	bic.w	r2, r2, #1
 8030754:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8030756:	68fb      	ldr	r3, [r7, #12]
 8030758:	3301      	adds	r3, #1
 803075a:	60fb      	str	r3, [r7, #12]
 803075c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803075e:	429a      	cmp	r2, r3
 8030760:	d307      	bcc.n	8030772 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8030762:	687b      	ldr	r3, [r7, #4]
 8030764:	681b      	ldr	r3, [r3, #0]
 8030766:	681b      	ldr	r3, [r3, #0]
 8030768:	f003 0301 	and.w	r3, r3, #1
 803076c:	2b00      	cmp	r3, #0
 803076e:	d1f2      	bne.n	8030756 <HAL_DMA_IRQHandler+0x8da>
 8030770:	e000      	b.n	8030774 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8030772:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8030774:	687b      	ldr	r3, [r7, #4]
 8030776:	681b      	ldr	r3, [r3, #0]
 8030778:	681b      	ldr	r3, [r3, #0]
 803077a:	f003 0301 	and.w	r3, r3, #1
 803077e:	2b00      	cmp	r3, #0
 8030780:	d004      	beq.n	803078c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8030782:	687b      	ldr	r3, [r7, #4]
 8030784:	2203      	movs	r2, #3
 8030786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 803078a:	e003      	b.n	8030794 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 803078c:	687b      	ldr	r3, [r7, #4]
 803078e:	2201      	movs	r2, #1
 8030790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8030794:	687b      	ldr	r3, [r7, #4]
 8030796:	2200      	movs	r2, #0
 8030798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 803079c:	687b      	ldr	r3, [r7, #4]
 803079e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80307a0:	2b00      	cmp	r3, #0
 80307a2:	f000 8272 	beq.w	8030c8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80307a6:	687b      	ldr	r3, [r7, #4]
 80307a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80307aa:	6878      	ldr	r0, [r7, #4]
 80307ac:	4798      	blx	r3
 80307ae:	e26c      	b.n	8030c8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80307b0:	687b      	ldr	r3, [r7, #4]
 80307b2:	681b      	ldr	r3, [r3, #0]
 80307b4:	4a43      	ldr	r2, [pc, #268]	; (80308c4 <HAL_DMA_IRQHandler+0xa48>)
 80307b6:	4293      	cmp	r3, r2
 80307b8:	d022      	beq.n	8030800 <HAL_DMA_IRQHandler+0x984>
 80307ba:	687b      	ldr	r3, [r7, #4]
 80307bc:	681b      	ldr	r3, [r3, #0]
 80307be:	4a42      	ldr	r2, [pc, #264]	; (80308c8 <HAL_DMA_IRQHandler+0xa4c>)
 80307c0:	4293      	cmp	r3, r2
 80307c2:	d01d      	beq.n	8030800 <HAL_DMA_IRQHandler+0x984>
 80307c4:	687b      	ldr	r3, [r7, #4]
 80307c6:	681b      	ldr	r3, [r3, #0]
 80307c8:	4a40      	ldr	r2, [pc, #256]	; (80308cc <HAL_DMA_IRQHandler+0xa50>)
 80307ca:	4293      	cmp	r3, r2
 80307cc:	d018      	beq.n	8030800 <HAL_DMA_IRQHandler+0x984>
 80307ce:	687b      	ldr	r3, [r7, #4]
 80307d0:	681b      	ldr	r3, [r3, #0]
 80307d2:	4a3f      	ldr	r2, [pc, #252]	; (80308d0 <HAL_DMA_IRQHandler+0xa54>)
 80307d4:	4293      	cmp	r3, r2
 80307d6:	d013      	beq.n	8030800 <HAL_DMA_IRQHandler+0x984>
 80307d8:	687b      	ldr	r3, [r7, #4]
 80307da:	681b      	ldr	r3, [r3, #0]
 80307dc:	4a3d      	ldr	r2, [pc, #244]	; (80308d4 <HAL_DMA_IRQHandler+0xa58>)
 80307de:	4293      	cmp	r3, r2
 80307e0:	d00e      	beq.n	8030800 <HAL_DMA_IRQHandler+0x984>
 80307e2:	687b      	ldr	r3, [r7, #4]
 80307e4:	681b      	ldr	r3, [r3, #0]
 80307e6:	4a3c      	ldr	r2, [pc, #240]	; (80308d8 <HAL_DMA_IRQHandler+0xa5c>)
 80307e8:	4293      	cmp	r3, r2
 80307ea:	d009      	beq.n	8030800 <HAL_DMA_IRQHandler+0x984>
 80307ec:	687b      	ldr	r3, [r7, #4]
 80307ee:	681b      	ldr	r3, [r3, #0]
 80307f0:	4a3a      	ldr	r2, [pc, #232]	; (80308dc <HAL_DMA_IRQHandler+0xa60>)
 80307f2:	4293      	cmp	r3, r2
 80307f4:	d004      	beq.n	8030800 <HAL_DMA_IRQHandler+0x984>
 80307f6:	687b      	ldr	r3, [r7, #4]
 80307f8:	681b      	ldr	r3, [r3, #0]
 80307fa:	4a39      	ldr	r2, [pc, #228]	; (80308e0 <HAL_DMA_IRQHandler+0xa64>)
 80307fc:	4293      	cmp	r3, r2
 80307fe:	d101      	bne.n	8030804 <HAL_DMA_IRQHandler+0x988>
 8030800:	2301      	movs	r3, #1
 8030802:	e000      	b.n	8030806 <HAL_DMA_IRQHandler+0x98a>
 8030804:	2300      	movs	r3, #0
 8030806:	2b00      	cmp	r3, #0
 8030808:	f000 823f 	beq.w	8030c8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 803080c:	687b      	ldr	r3, [r7, #4]
 803080e:	681b      	ldr	r3, [r3, #0]
 8030810:	681b      	ldr	r3, [r3, #0]
 8030812:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8030814:	687b      	ldr	r3, [r7, #4]
 8030816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030818:	f003 031f 	and.w	r3, r3, #31
 803081c:	2204      	movs	r2, #4
 803081e:	409a      	lsls	r2, r3
 8030820:	697b      	ldr	r3, [r7, #20]
 8030822:	4013      	ands	r3, r2
 8030824:	2b00      	cmp	r3, #0
 8030826:	f000 80cd 	beq.w	80309c4 <HAL_DMA_IRQHandler+0xb48>
 803082a:	693b      	ldr	r3, [r7, #16]
 803082c:	f003 0304 	and.w	r3, r3, #4
 8030830:	2b00      	cmp	r3, #0
 8030832:	f000 80c7 	beq.w	80309c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8030836:	687b      	ldr	r3, [r7, #4]
 8030838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803083a:	f003 031f 	and.w	r3, r3, #31
 803083e:	2204      	movs	r2, #4
 8030840:	409a      	lsls	r2, r3
 8030842:	69fb      	ldr	r3, [r7, #28]
 8030844:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030846:	693b      	ldr	r3, [r7, #16]
 8030848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803084c:	2b00      	cmp	r3, #0
 803084e:	d049      	beq.n	80308e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8030850:	693b      	ldr	r3, [r7, #16]
 8030852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8030856:	2b00      	cmp	r3, #0
 8030858:	d109      	bne.n	803086e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 803085a:	687b      	ldr	r3, [r7, #4]
 803085c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803085e:	2b00      	cmp	r3, #0
 8030860:	f000 8210 	beq.w	8030c84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8030864:	687b      	ldr	r3, [r7, #4]
 8030866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030868:	6878      	ldr	r0, [r7, #4]
 803086a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 803086c:	e20a      	b.n	8030c84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 803086e:	687b      	ldr	r3, [r7, #4]
 8030870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030872:	2b00      	cmp	r3, #0
 8030874:	f000 8206 	beq.w	8030c84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8030878:	687b      	ldr	r3, [r7, #4]
 803087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803087c:	6878      	ldr	r0, [r7, #4]
 803087e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030880:	e200      	b.n	8030c84 <HAL_DMA_IRQHandler+0xe08>
 8030882:	bf00      	nop
 8030884:	40020010 	.word	0x40020010
 8030888:	40020028 	.word	0x40020028
 803088c:	40020040 	.word	0x40020040
 8030890:	40020058 	.word	0x40020058
 8030894:	40020070 	.word	0x40020070
 8030898:	40020088 	.word	0x40020088
 803089c:	400200a0 	.word	0x400200a0
 80308a0:	400200b8 	.word	0x400200b8
 80308a4:	40020410 	.word	0x40020410
 80308a8:	40020428 	.word	0x40020428
 80308ac:	40020440 	.word	0x40020440
 80308b0:	40020458 	.word	0x40020458
 80308b4:	40020470 	.word	0x40020470
 80308b8:	40020488 	.word	0x40020488
 80308bc:	400204a0 	.word	0x400204a0
 80308c0:	400204b8 	.word	0x400204b8
 80308c4:	58025408 	.word	0x58025408
 80308c8:	5802541c 	.word	0x5802541c
 80308cc:	58025430 	.word	0x58025430
 80308d0:	58025444 	.word	0x58025444
 80308d4:	58025458 	.word	0x58025458
 80308d8:	5802546c 	.word	0x5802546c
 80308dc:	58025480 	.word	0x58025480
 80308e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80308e4:	693b      	ldr	r3, [r7, #16]
 80308e6:	f003 0320 	and.w	r3, r3, #32
 80308ea:	2b00      	cmp	r3, #0
 80308ec:	d160      	bne.n	80309b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80308ee:	687b      	ldr	r3, [r7, #4]
 80308f0:	681b      	ldr	r3, [r3, #0]
 80308f2:	4a7f      	ldr	r2, [pc, #508]	; (8030af0 <HAL_DMA_IRQHandler+0xc74>)
 80308f4:	4293      	cmp	r3, r2
 80308f6:	d04a      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 80308f8:	687b      	ldr	r3, [r7, #4]
 80308fa:	681b      	ldr	r3, [r3, #0]
 80308fc:	4a7d      	ldr	r2, [pc, #500]	; (8030af4 <HAL_DMA_IRQHandler+0xc78>)
 80308fe:	4293      	cmp	r3, r2
 8030900:	d045      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030902:	687b      	ldr	r3, [r7, #4]
 8030904:	681b      	ldr	r3, [r3, #0]
 8030906:	4a7c      	ldr	r2, [pc, #496]	; (8030af8 <HAL_DMA_IRQHandler+0xc7c>)
 8030908:	4293      	cmp	r3, r2
 803090a:	d040      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 803090c:	687b      	ldr	r3, [r7, #4]
 803090e:	681b      	ldr	r3, [r3, #0]
 8030910:	4a7a      	ldr	r2, [pc, #488]	; (8030afc <HAL_DMA_IRQHandler+0xc80>)
 8030912:	4293      	cmp	r3, r2
 8030914:	d03b      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030916:	687b      	ldr	r3, [r7, #4]
 8030918:	681b      	ldr	r3, [r3, #0]
 803091a:	4a79      	ldr	r2, [pc, #484]	; (8030b00 <HAL_DMA_IRQHandler+0xc84>)
 803091c:	4293      	cmp	r3, r2
 803091e:	d036      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030920:	687b      	ldr	r3, [r7, #4]
 8030922:	681b      	ldr	r3, [r3, #0]
 8030924:	4a77      	ldr	r2, [pc, #476]	; (8030b04 <HAL_DMA_IRQHandler+0xc88>)
 8030926:	4293      	cmp	r3, r2
 8030928:	d031      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 803092a:	687b      	ldr	r3, [r7, #4]
 803092c:	681b      	ldr	r3, [r3, #0]
 803092e:	4a76      	ldr	r2, [pc, #472]	; (8030b08 <HAL_DMA_IRQHandler+0xc8c>)
 8030930:	4293      	cmp	r3, r2
 8030932:	d02c      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030934:	687b      	ldr	r3, [r7, #4]
 8030936:	681b      	ldr	r3, [r3, #0]
 8030938:	4a74      	ldr	r2, [pc, #464]	; (8030b0c <HAL_DMA_IRQHandler+0xc90>)
 803093a:	4293      	cmp	r3, r2
 803093c:	d027      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 803093e:	687b      	ldr	r3, [r7, #4]
 8030940:	681b      	ldr	r3, [r3, #0]
 8030942:	4a73      	ldr	r2, [pc, #460]	; (8030b10 <HAL_DMA_IRQHandler+0xc94>)
 8030944:	4293      	cmp	r3, r2
 8030946:	d022      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030948:	687b      	ldr	r3, [r7, #4]
 803094a:	681b      	ldr	r3, [r3, #0]
 803094c:	4a71      	ldr	r2, [pc, #452]	; (8030b14 <HAL_DMA_IRQHandler+0xc98>)
 803094e:	4293      	cmp	r3, r2
 8030950:	d01d      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030952:	687b      	ldr	r3, [r7, #4]
 8030954:	681b      	ldr	r3, [r3, #0]
 8030956:	4a70      	ldr	r2, [pc, #448]	; (8030b18 <HAL_DMA_IRQHandler+0xc9c>)
 8030958:	4293      	cmp	r3, r2
 803095a:	d018      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 803095c:	687b      	ldr	r3, [r7, #4]
 803095e:	681b      	ldr	r3, [r3, #0]
 8030960:	4a6e      	ldr	r2, [pc, #440]	; (8030b1c <HAL_DMA_IRQHandler+0xca0>)
 8030962:	4293      	cmp	r3, r2
 8030964:	d013      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030966:	687b      	ldr	r3, [r7, #4]
 8030968:	681b      	ldr	r3, [r3, #0]
 803096a:	4a6d      	ldr	r2, [pc, #436]	; (8030b20 <HAL_DMA_IRQHandler+0xca4>)
 803096c:	4293      	cmp	r3, r2
 803096e:	d00e      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030970:	687b      	ldr	r3, [r7, #4]
 8030972:	681b      	ldr	r3, [r3, #0]
 8030974:	4a6b      	ldr	r2, [pc, #428]	; (8030b24 <HAL_DMA_IRQHandler+0xca8>)
 8030976:	4293      	cmp	r3, r2
 8030978:	d009      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 803097a:	687b      	ldr	r3, [r7, #4]
 803097c:	681b      	ldr	r3, [r3, #0]
 803097e:	4a6a      	ldr	r2, [pc, #424]	; (8030b28 <HAL_DMA_IRQHandler+0xcac>)
 8030980:	4293      	cmp	r3, r2
 8030982:	d004      	beq.n	803098e <HAL_DMA_IRQHandler+0xb12>
 8030984:	687b      	ldr	r3, [r7, #4]
 8030986:	681b      	ldr	r3, [r3, #0]
 8030988:	4a68      	ldr	r2, [pc, #416]	; (8030b2c <HAL_DMA_IRQHandler+0xcb0>)
 803098a:	4293      	cmp	r3, r2
 803098c:	d108      	bne.n	80309a0 <HAL_DMA_IRQHandler+0xb24>
 803098e:	687b      	ldr	r3, [r7, #4]
 8030990:	681b      	ldr	r3, [r3, #0]
 8030992:	681a      	ldr	r2, [r3, #0]
 8030994:	687b      	ldr	r3, [r7, #4]
 8030996:	681b      	ldr	r3, [r3, #0]
 8030998:	f022 0208 	bic.w	r2, r2, #8
 803099c:	601a      	str	r2, [r3, #0]
 803099e:	e007      	b.n	80309b0 <HAL_DMA_IRQHandler+0xb34>
 80309a0:	687b      	ldr	r3, [r7, #4]
 80309a2:	681b      	ldr	r3, [r3, #0]
 80309a4:	681a      	ldr	r2, [r3, #0]
 80309a6:	687b      	ldr	r3, [r7, #4]
 80309a8:	681b      	ldr	r3, [r3, #0]
 80309aa:	f022 0204 	bic.w	r2, r2, #4
 80309ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80309b0:	687b      	ldr	r3, [r7, #4]
 80309b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80309b4:	2b00      	cmp	r3, #0
 80309b6:	f000 8165 	beq.w	8030c84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80309ba:	687b      	ldr	r3, [r7, #4]
 80309bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80309be:	6878      	ldr	r0, [r7, #4]
 80309c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80309c2:	e15f      	b.n	8030c84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80309c4:	687b      	ldr	r3, [r7, #4]
 80309c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80309c8:	f003 031f 	and.w	r3, r3, #31
 80309cc:	2202      	movs	r2, #2
 80309ce:	409a      	lsls	r2, r3
 80309d0:	697b      	ldr	r3, [r7, #20]
 80309d2:	4013      	ands	r3, r2
 80309d4:	2b00      	cmp	r3, #0
 80309d6:	f000 80c5 	beq.w	8030b64 <HAL_DMA_IRQHandler+0xce8>
 80309da:	693b      	ldr	r3, [r7, #16]
 80309dc:	f003 0302 	and.w	r3, r3, #2
 80309e0:	2b00      	cmp	r3, #0
 80309e2:	f000 80bf 	beq.w	8030b64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80309e6:	687b      	ldr	r3, [r7, #4]
 80309e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80309ea:	f003 031f 	and.w	r3, r3, #31
 80309ee:	2202      	movs	r2, #2
 80309f0:	409a      	lsls	r2, r3
 80309f2:	69fb      	ldr	r3, [r7, #28]
 80309f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80309f6:	693b      	ldr	r3, [r7, #16]
 80309f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80309fc:	2b00      	cmp	r3, #0
 80309fe:	d018      	beq.n	8030a32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8030a00:	693b      	ldr	r3, [r7, #16]
 8030a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8030a06:	2b00      	cmp	r3, #0
 8030a08:	d109      	bne.n	8030a1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8030a0a:	687b      	ldr	r3, [r7, #4]
 8030a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030a0e:	2b00      	cmp	r3, #0
 8030a10:	f000 813a 	beq.w	8030c88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8030a14:	687b      	ldr	r3, [r7, #4]
 8030a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030a18:	6878      	ldr	r0, [r7, #4]
 8030a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030a1c:	e134      	b.n	8030c88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8030a1e:	687b      	ldr	r3, [r7, #4]
 8030a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030a22:	2b00      	cmp	r3, #0
 8030a24:	f000 8130 	beq.w	8030c88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8030a28:	687b      	ldr	r3, [r7, #4]
 8030a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030a2c:	6878      	ldr	r0, [r7, #4]
 8030a2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030a30:	e12a      	b.n	8030c88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8030a32:	693b      	ldr	r3, [r7, #16]
 8030a34:	f003 0320 	and.w	r3, r3, #32
 8030a38:	2b00      	cmp	r3, #0
 8030a3a:	f040 8089 	bne.w	8030b50 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8030a3e:	687b      	ldr	r3, [r7, #4]
 8030a40:	681b      	ldr	r3, [r3, #0]
 8030a42:	4a2b      	ldr	r2, [pc, #172]	; (8030af0 <HAL_DMA_IRQHandler+0xc74>)
 8030a44:	4293      	cmp	r3, r2
 8030a46:	d04a      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a48:	687b      	ldr	r3, [r7, #4]
 8030a4a:	681b      	ldr	r3, [r3, #0]
 8030a4c:	4a29      	ldr	r2, [pc, #164]	; (8030af4 <HAL_DMA_IRQHandler+0xc78>)
 8030a4e:	4293      	cmp	r3, r2
 8030a50:	d045      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a52:	687b      	ldr	r3, [r7, #4]
 8030a54:	681b      	ldr	r3, [r3, #0]
 8030a56:	4a28      	ldr	r2, [pc, #160]	; (8030af8 <HAL_DMA_IRQHandler+0xc7c>)
 8030a58:	4293      	cmp	r3, r2
 8030a5a:	d040      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a5c:	687b      	ldr	r3, [r7, #4]
 8030a5e:	681b      	ldr	r3, [r3, #0]
 8030a60:	4a26      	ldr	r2, [pc, #152]	; (8030afc <HAL_DMA_IRQHandler+0xc80>)
 8030a62:	4293      	cmp	r3, r2
 8030a64:	d03b      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a66:	687b      	ldr	r3, [r7, #4]
 8030a68:	681b      	ldr	r3, [r3, #0]
 8030a6a:	4a25      	ldr	r2, [pc, #148]	; (8030b00 <HAL_DMA_IRQHandler+0xc84>)
 8030a6c:	4293      	cmp	r3, r2
 8030a6e:	d036      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a70:	687b      	ldr	r3, [r7, #4]
 8030a72:	681b      	ldr	r3, [r3, #0]
 8030a74:	4a23      	ldr	r2, [pc, #140]	; (8030b04 <HAL_DMA_IRQHandler+0xc88>)
 8030a76:	4293      	cmp	r3, r2
 8030a78:	d031      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a7a:	687b      	ldr	r3, [r7, #4]
 8030a7c:	681b      	ldr	r3, [r3, #0]
 8030a7e:	4a22      	ldr	r2, [pc, #136]	; (8030b08 <HAL_DMA_IRQHandler+0xc8c>)
 8030a80:	4293      	cmp	r3, r2
 8030a82:	d02c      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a84:	687b      	ldr	r3, [r7, #4]
 8030a86:	681b      	ldr	r3, [r3, #0]
 8030a88:	4a20      	ldr	r2, [pc, #128]	; (8030b0c <HAL_DMA_IRQHandler+0xc90>)
 8030a8a:	4293      	cmp	r3, r2
 8030a8c:	d027      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a8e:	687b      	ldr	r3, [r7, #4]
 8030a90:	681b      	ldr	r3, [r3, #0]
 8030a92:	4a1f      	ldr	r2, [pc, #124]	; (8030b10 <HAL_DMA_IRQHandler+0xc94>)
 8030a94:	4293      	cmp	r3, r2
 8030a96:	d022      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030a98:	687b      	ldr	r3, [r7, #4]
 8030a9a:	681b      	ldr	r3, [r3, #0]
 8030a9c:	4a1d      	ldr	r2, [pc, #116]	; (8030b14 <HAL_DMA_IRQHandler+0xc98>)
 8030a9e:	4293      	cmp	r3, r2
 8030aa0:	d01d      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030aa2:	687b      	ldr	r3, [r7, #4]
 8030aa4:	681b      	ldr	r3, [r3, #0]
 8030aa6:	4a1c      	ldr	r2, [pc, #112]	; (8030b18 <HAL_DMA_IRQHandler+0xc9c>)
 8030aa8:	4293      	cmp	r3, r2
 8030aaa:	d018      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030aac:	687b      	ldr	r3, [r7, #4]
 8030aae:	681b      	ldr	r3, [r3, #0]
 8030ab0:	4a1a      	ldr	r2, [pc, #104]	; (8030b1c <HAL_DMA_IRQHandler+0xca0>)
 8030ab2:	4293      	cmp	r3, r2
 8030ab4:	d013      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030ab6:	687b      	ldr	r3, [r7, #4]
 8030ab8:	681b      	ldr	r3, [r3, #0]
 8030aba:	4a19      	ldr	r2, [pc, #100]	; (8030b20 <HAL_DMA_IRQHandler+0xca4>)
 8030abc:	4293      	cmp	r3, r2
 8030abe:	d00e      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030ac0:	687b      	ldr	r3, [r7, #4]
 8030ac2:	681b      	ldr	r3, [r3, #0]
 8030ac4:	4a17      	ldr	r2, [pc, #92]	; (8030b24 <HAL_DMA_IRQHandler+0xca8>)
 8030ac6:	4293      	cmp	r3, r2
 8030ac8:	d009      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030aca:	687b      	ldr	r3, [r7, #4]
 8030acc:	681b      	ldr	r3, [r3, #0]
 8030ace:	4a16      	ldr	r2, [pc, #88]	; (8030b28 <HAL_DMA_IRQHandler+0xcac>)
 8030ad0:	4293      	cmp	r3, r2
 8030ad2:	d004      	beq.n	8030ade <HAL_DMA_IRQHandler+0xc62>
 8030ad4:	687b      	ldr	r3, [r7, #4]
 8030ad6:	681b      	ldr	r3, [r3, #0]
 8030ad8:	4a14      	ldr	r2, [pc, #80]	; (8030b2c <HAL_DMA_IRQHandler+0xcb0>)
 8030ada:	4293      	cmp	r3, r2
 8030adc:	d128      	bne.n	8030b30 <HAL_DMA_IRQHandler+0xcb4>
 8030ade:	687b      	ldr	r3, [r7, #4]
 8030ae0:	681b      	ldr	r3, [r3, #0]
 8030ae2:	681a      	ldr	r2, [r3, #0]
 8030ae4:	687b      	ldr	r3, [r7, #4]
 8030ae6:	681b      	ldr	r3, [r3, #0]
 8030ae8:	f022 0214 	bic.w	r2, r2, #20
 8030aec:	601a      	str	r2, [r3, #0]
 8030aee:	e027      	b.n	8030b40 <HAL_DMA_IRQHandler+0xcc4>
 8030af0:	40020010 	.word	0x40020010
 8030af4:	40020028 	.word	0x40020028
 8030af8:	40020040 	.word	0x40020040
 8030afc:	40020058 	.word	0x40020058
 8030b00:	40020070 	.word	0x40020070
 8030b04:	40020088 	.word	0x40020088
 8030b08:	400200a0 	.word	0x400200a0
 8030b0c:	400200b8 	.word	0x400200b8
 8030b10:	40020410 	.word	0x40020410
 8030b14:	40020428 	.word	0x40020428
 8030b18:	40020440 	.word	0x40020440
 8030b1c:	40020458 	.word	0x40020458
 8030b20:	40020470 	.word	0x40020470
 8030b24:	40020488 	.word	0x40020488
 8030b28:	400204a0 	.word	0x400204a0
 8030b2c:	400204b8 	.word	0x400204b8
 8030b30:	687b      	ldr	r3, [r7, #4]
 8030b32:	681b      	ldr	r3, [r3, #0]
 8030b34:	681a      	ldr	r2, [r3, #0]
 8030b36:	687b      	ldr	r3, [r7, #4]
 8030b38:	681b      	ldr	r3, [r3, #0]
 8030b3a:	f022 020a 	bic.w	r2, r2, #10
 8030b3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8030b40:	687b      	ldr	r3, [r7, #4]
 8030b42:	2201      	movs	r2, #1
 8030b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8030b48:	687b      	ldr	r3, [r7, #4]
 8030b4a:	2200      	movs	r2, #0
 8030b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8030b50:	687b      	ldr	r3, [r7, #4]
 8030b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030b54:	2b00      	cmp	r3, #0
 8030b56:	f000 8097 	beq.w	8030c88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8030b5a:	687b      	ldr	r3, [r7, #4]
 8030b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030b5e:	6878      	ldr	r0, [r7, #4]
 8030b60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030b62:	e091      	b.n	8030c88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8030b64:	687b      	ldr	r3, [r7, #4]
 8030b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030b68:	f003 031f 	and.w	r3, r3, #31
 8030b6c:	2208      	movs	r2, #8
 8030b6e:	409a      	lsls	r2, r3
 8030b70:	697b      	ldr	r3, [r7, #20]
 8030b72:	4013      	ands	r3, r2
 8030b74:	2b00      	cmp	r3, #0
 8030b76:	f000 8088 	beq.w	8030c8a <HAL_DMA_IRQHandler+0xe0e>
 8030b7a:	693b      	ldr	r3, [r7, #16]
 8030b7c:	f003 0308 	and.w	r3, r3, #8
 8030b80:	2b00      	cmp	r3, #0
 8030b82:	f000 8082 	beq.w	8030c8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8030b86:	687b      	ldr	r3, [r7, #4]
 8030b88:	681b      	ldr	r3, [r3, #0]
 8030b8a:	4a41      	ldr	r2, [pc, #260]	; (8030c90 <HAL_DMA_IRQHandler+0xe14>)
 8030b8c:	4293      	cmp	r3, r2
 8030b8e:	d04a      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030b90:	687b      	ldr	r3, [r7, #4]
 8030b92:	681b      	ldr	r3, [r3, #0]
 8030b94:	4a3f      	ldr	r2, [pc, #252]	; (8030c94 <HAL_DMA_IRQHandler+0xe18>)
 8030b96:	4293      	cmp	r3, r2
 8030b98:	d045      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030b9a:	687b      	ldr	r3, [r7, #4]
 8030b9c:	681b      	ldr	r3, [r3, #0]
 8030b9e:	4a3e      	ldr	r2, [pc, #248]	; (8030c98 <HAL_DMA_IRQHandler+0xe1c>)
 8030ba0:	4293      	cmp	r3, r2
 8030ba2:	d040      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030ba4:	687b      	ldr	r3, [r7, #4]
 8030ba6:	681b      	ldr	r3, [r3, #0]
 8030ba8:	4a3c      	ldr	r2, [pc, #240]	; (8030c9c <HAL_DMA_IRQHandler+0xe20>)
 8030baa:	4293      	cmp	r3, r2
 8030bac:	d03b      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bae:	687b      	ldr	r3, [r7, #4]
 8030bb0:	681b      	ldr	r3, [r3, #0]
 8030bb2:	4a3b      	ldr	r2, [pc, #236]	; (8030ca0 <HAL_DMA_IRQHandler+0xe24>)
 8030bb4:	4293      	cmp	r3, r2
 8030bb6:	d036      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bb8:	687b      	ldr	r3, [r7, #4]
 8030bba:	681b      	ldr	r3, [r3, #0]
 8030bbc:	4a39      	ldr	r2, [pc, #228]	; (8030ca4 <HAL_DMA_IRQHandler+0xe28>)
 8030bbe:	4293      	cmp	r3, r2
 8030bc0:	d031      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bc2:	687b      	ldr	r3, [r7, #4]
 8030bc4:	681b      	ldr	r3, [r3, #0]
 8030bc6:	4a38      	ldr	r2, [pc, #224]	; (8030ca8 <HAL_DMA_IRQHandler+0xe2c>)
 8030bc8:	4293      	cmp	r3, r2
 8030bca:	d02c      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bcc:	687b      	ldr	r3, [r7, #4]
 8030bce:	681b      	ldr	r3, [r3, #0]
 8030bd0:	4a36      	ldr	r2, [pc, #216]	; (8030cac <HAL_DMA_IRQHandler+0xe30>)
 8030bd2:	4293      	cmp	r3, r2
 8030bd4:	d027      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bd6:	687b      	ldr	r3, [r7, #4]
 8030bd8:	681b      	ldr	r3, [r3, #0]
 8030bda:	4a35      	ldr	r2, [pc, #212]	; (8030cb0 <HAL_DMA_IRQHandler+0xe34>)
 8030bdc:	4293      	cmp	r3, r2
 8030bde:	d022      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030be0:	687b      	ldr	r3, [r7, #4]
 8030be2:	681b      	ldr	r3, [r3, #0]
 8030be4:	4a33      	ldr	r2, [pc, #204]	; (8030cb4 <HAL_DMA_IRQHandler+0xe38>)
 8030be6:	4293      	cmp	r3, r2
 8030be8:	d01d      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bea:	687b      	ldr	r3, [r7, #4]
 8030bec:	681b      	ldr	r3, [r3, #0]
 8030bee:	4a32      	ldr	r2, [pc, #200]	; (8030cb8 <HAL_DMA_IRQHandler+0xe3c>)
 8030bf0:	4293      	cmp	r3, r2
 8030bf2:	d018      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bf4:	687b      	ldr	r3, [r7, #4]
 8030bf6:	681b      	ldr	r3, [r3, #0]
 8030bf8:	4a30      	ldr	r2, [pc, #192]	; (8030cbc <HAL_DMA_IRQHandler+0xe40>)
 8030bfa:	4293      	cmp	r3, r2
 8030bfc:	d013      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030bfe:	687b      	ldr	r3, [r7, #4]
 8030c00:	681b      	ldr	r3, [r3, #0]
 8030c02:	4a2f      	ldr	r2, [pc, #188]	; (8030cc0 <HAL_DMA_IRQHandler+0xe44>)
 8030c04:	4293      	cmp	r3, r2
 8030c06:	d00e      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030c08:	687b      	ldr	r3, [r7, #4]
 8030c0a:	681b      	ldr	r3, [r3, #0]
 8030c0c:	4a2d      	ldr	r2, [pc, #180]	; (8030cc4 <HAL_DMA_IRQHandler+0xe48>)
 8030c0e:	4293      	cmp	r3, r2
 8030c10:	d009      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030c12:	687b      	ldr	r3, [r7, #4]
 8030c14:	681b      	ldr	r3, [r3, #0]
 8030c16:	4a2c      	ldr	r2, [pc, #176]	; (8030cc8 <HAL_DMA_IRQHandler+0xe4c>)
 8030c18:	4293      	cmp	r3, r2
 8030c1a:	d004      	beq.n	8030c26 <HAL_DMA_IRQHandler+0xdaa>
 8030c1c:	687b      	ldr	r3, [r7, #4]
 8030c1e:	681b      	ldr	r3, [r3, #0]
 8030c20:	4a2a      	ldr	r2, [pc, #168]	; (8030ccc <HAL_DMA_IRQHandler+0xe50>)
 8030c22:	4293      	cmp	r3, r2
 8030c24:	d108      	bne.n	8030c38 <HAL_DMA_IRQHandler+0xdbc>
 8030c26:	687b      	ldr	r3, [r7, #4]
 8030c28:	681b      	ldr	r3, [r3, #0]
 8030c2a:	681a      	ldr	r2, [r3, #0]
 8030c2c:	687b      	ldr	r3, [r7, #4]
 8030c2e:	681b      	ldr	r3, [r3, #0]
 8030c30:	f022 021c 	bic.w	r2, r2, #28
 8030c34:	601a      	str	r2, [r3, #0]
 8030c36:	e007      	b.n	8030c48 <HAL_DMA_IRQHandler+0xdcc>
 8030c38:	687b      	ldr	r3, [r7, #4]
 8030c3a:	681b      	ldr	r3, [r3, #0]
 8030c3c:	681a      	ldr	r2, [r3, #0]
 8030c3e:	687b      	ldr	r3, [r7, #4]
 8030c40:	681b      	ldr	r3, [r3, #0]
 8030c42:	f022 020e 	bic.w	r2, r2, #14
 8030c46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8030c48:	687b      	ldr	r3, [r7, #4]
 8030c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030c4c:	f003 031f 	and.w	r3, r3, #31
 8030c50:	2201      	movs	r2, #1
 8030c52:	409a      	lsls	r2, r3
 8030c54:	69fb      	ldr	r3, [r7, #28]
 8030c56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8030c58:	687b      	ldr	r3, [r7, #4]
 8030c5a:	2201      	movs	r2, #1
 8030c5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8030c5e:	687b      	ldr	r3, [r7, #4]
 8030c60:	2201      	movs	r2, #1
 8030c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8030c66:	687b      	ldr	r3, [r7, #4]
 8030c68:	2200      	movs	r2, #0
 8030c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8030c6e:	687b      	ldr	r3, [r7, #4]
 8030c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030c72:	2b00      	cmp	r3, #0
 8030c74:	d009      	beq.n	8030c8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8030c76:	687b      	ldr	r3, [r7, #4]
 8030c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030c7a:	6878      	ldr	r0, [r7, #4]
 8030c7c:	4798      	blx	r3
 8030c7e:	e004      	b.n	8030c8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8030c80:	bf00      	nop
 8030c82:	e002      	b.n	8030c8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030c84:	bf00      	nop
 8030c86:	e000      	b.n	8030c8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030c88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8030c8a:	3728      	adds	r7, #40	; 0x28
 8030c8c:	46bd      	mov	sp, r7
 8030c8e:	bd80      	pop	{r7, pc}
 8030c90:	40020010 	.word	0x40020010
 8030c94:	40020028 	.word	0x40020028
 8030c98:	40020040 	.word	0x40020040
 8030c9c:	40020058 	.word	0x40020058
 8030ca0:	40020070 	.word	0x40020070
 8030ca4:	40020088 	.word	0x40020088
 8030ca8:	400200a0 	.word	0x400200a0
 8030cac:	400200b8 	.word	0x400200b8
 8030cb0:	40020410 	.word	0x40020410
 8030cb4:	40020428 	.word	0x40020428
 8030cb8:	40020440 	.word	0x40020440
 8030cbc:	40020458 	.word	0x40020458
 8030cc0:	40020470 	.word	0x40020470
 8030cc4:	40020488 	.word	0x40020488
 8030cc8:	400204a0 	.word	0x400204a0
 8030ccc:	400204b8 	.word	0x400204b8

08030cd0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8030cd0:	b480      	push	{r7}
 8030cd2:	b083      	sub	sp, #12
 8030cd4:	af00      	add	r7, sp, #0
 8030cd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8030cd8:	687b      	ldr	r3, [r7, #4]
 8030cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8030cde:	b2db      	uxtb	r3, r3
}
 8030ce0:	4618      	mov	r0, r3
 8030ce2:	370c      	adds	r7, #12
 8030ce4:	46bd      	mov	sp, r7
 8030ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030cea:	4770      	bx	lr

08030cec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8030cec:	b480      	push	{r7}
 8030cee:	b083      	sub	sp, #12
 8030cf0:	af00      	add	r7, sp, #0
 8030cf2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8030cf4:	687b      	ldr	r3, [r7, #4]
 8030cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8030cf8:	4618      	mov	r0, r3
 8030cfa:	370c      	adds	r7, #12
 8030cfc:	46bd      	mov	sp, r7
 8030cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d02:	4770      	bx	lr

08030d04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8030d04:	b480      	push	{r7}
 8030d06:	b087      	sub	sp, #28
 8030d08:	af00      	add	r7, sp, #0
 8030d0a:	60f8      	str	r0, [r7, #12]
 8030d0c:	60b9      	str	r1, [r7, #8]
 8030d0e:	607a      	str	r2, [r7, #4]
 8030d10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8030d12:	68fb      	ldr	r3, [r7, #12]
 8030d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8030d16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8030d18:	68fb      	ldr	r3, [r7, #12]
 8030d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8030d1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8030d1e:	68fb      	ldr	r3, [r7, #12]
 8030d20:	681b      	ldr	r3, [r3, #0]
 8030d22:	4a7f      	ldr	r2, [pc, #508]	; (8030f20 <DMA_SetConfig+0x21c>)
 8030d24:	4293      	cmp	r3, r2
 8030d26:	d072      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d28:	68fb      	ldr	r3, [r7, #12]
 8030d2a:	681b      	ldr	r3, [r3, #0]
 8030d2c:	4a7d      	ldr	r2, [pc, #500]	; (8030f24 <DMA_SetConfig+0x220>)
 8030d2e:	4293      	cmp	r3, r2
 8030d30:	d06d      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d32:	68fb      	ldr	r3, [r7, #12]
 8030d34:	681b      	ldr	r3, [r3, #0]
 8030d36:	4a7c      	ldr	r2, [pc, #496]	; (8030f28 <DMA_SetConfig+0x224>)
 8030d38:	4293      	cmp	r3, r2
 8030d3a:	d068      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d3c:	68fb      	ldr	r3, [r7, #12]
 8030d3e:	681b      	ldr	r3, [r3, #0]
 8030d40:	4a7a      	ldr	r2, [pc, #488]	; (8030f2c <DMA_SetConfig+0x228>)
 8030d42:	4293      	cmp	r3, r2
 8030d44:	d063      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d46:	68fb      	ldr	r3, [r7, #12]
 8030d48:	681b      	ldr	r3, [r3, #0]
 8030d4a:	4a79      	ldr	r2, [pc, #484]	; (8030f30 <DMA_SetConfig+0x22c>)
 8030d4c:	4293      	cmp	r3, r2
 8030d4e:	d05e      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d50:	68fb      	ldr	r3, [r7, #12]
 8030d52:	681b      	ldr	r3, [r3, #0]
 8030d54:	4a77      	ldr	r2, [pc, #476]	; (8030f34 <DMA_SetConfig+0x230>)
 8030d56:	4293      	cmp	r3, r2
 8030d58:	d059      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d5a:	68fb      	ldr	r3, [r7, #12]
 8030d5c:	681b      	ldr	r3, [r3, #0]
 8030d5e:	4a76      	ldr	r2, [pc, #472]	; (8030f38 <DMA_SetConfig+0x234>)
 8030d60:	4293      	cmp	r3, r2
 8030d62:	d054      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d64:	68fb      	ldr	r3, [r7, #12]
 8030d66:	681b      	ldr	r3, [r3, #0]
 8030d68:	4a74      	ldr	r2, [pc, #464]	; (8030f3c <DMA_SetConfig+0x238>)
 8030d6a:	4293      	cmp	r3, r2
 8030d6c:	d04f      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d6e:	68fb      	ldr	r3, [r7, #12]
 8030d70:	681b      	ldr	r3, [r3, #0]
 8030d72:	4a73      	ldr	r2, [pc, #460]	; (8030f40 <DMA_SetConfig+0x23c>)
 8030d74:	4293      	cmp	r3, r2
 8030d76:	d04a      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d78:	68fb      	ldr	r3, [r7, #12]
 8030d7a:	681b      	ldr	r3, [r3, #0]
 8030d7c:	4a71      	ldr	r2, [pc, #452]	; (8030f44 <DMA_SetConfig+0x240>)
 8030d7e:	4293      	cmp	r3, r2
 8030d80:	d045      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d82:	68fb      	ldr	r3, [r7, #12]
 8030d84:	681b      	ldr	r3, [r3, #0]
 8030d86:	4a70      	ldr	r2, [pc, #448]	; (8030f48 <DMA_SetConfig+0x244>)
 8030d88:	4293      	cmp	r3, r2
 8030d8a:	d040      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d8c:	68fb      	ldr	r3, [r7, #12]
 8030d8e:	681b      	ldr	r3, [r3, #0]
 8030d90:	4a6e      	ldr	r2, [pc, #440]	; (8030f4c <DMA_SetConfig+0x248>)
 8030d92:	4293      	cmp	r3, r2
 8030d94:	d03b      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030d96:	68fb      	ldr	r3, [r7, #12]
 8030d98:	681b      	ldr	r3, [r3, #0]
 8030d9a:	4a6d      	ldr	r2, [pc, #436]	; (8030f50 <DMA_SetConfig+0x24c>)
 8030d9c:	4293      	cmp	r3, r2
 8030d9e:	d036      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030da0:	68fb      	ldr	r3, [r7, #12]
 8030da2:	681b      	ldr	r3, [r3, #0]
 8030da4:	4a6b      	ldr	r2, [pc, #428]	; (8030f54 <DMA_SetConfig+0x250>)
 8030da6:	4293      	cmp	r3, r2
 8030da8:	d031      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030daa:	68fb      	ldr	r3, [r7, #12]
 8030dac:	681b      	ldr	r3, [r3, #0]
 8030dae:	4a6a      	ldr	r2, [pc, #424]	; (8030f58 <DMA_SetConfig+0x254>)
 8030db0:	4293      	cmp	r3, r2
 8030db2:	d02c      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030db4:	68fb      	ldr	r3, [r7, #12]
 8030db6:	681b      	ldr	r3, [r3, #0]
 8030db8:	4a68      	ldr	r2, [pc, #416]	; (8030f5c <DMA_SetConfig+0x258>)
 8030dba:	4293      	cmp	r3, r2
 8030dbc:	d027      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030dbe:	68fb      	ldr	r3, [r7, #12]
 8030dc0:	681b      	ldr	r3, [r3, #0]
 8030dc2:	4a67      	ldr	r2, [pc, #412]	; (8030f60 <DMA_SetConfig+0x25c>)
 8030dc4:	4293      	cmp	r3, r2
 8030dc6:	d022      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030dc8:	68fb      	ldr	r3, [r7, #12]
 8030dca:	681b      	ldr	r3, [r3, #0]
 8030dcc:	4a65      	ldr	r2, [pc, #404]	; (8030f64 <DMA_SetConfig+0x260>)
 8030dce:	4293      	cmp	r3, r2
 8030dd0:	d01d      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030dd2:	68fb      	ldr	r3, [r7, #12]
 8030dd4:	681b      	ldr	r3, [r3, #0]
 8030dd6:	4a64      	ldr	r2, [pc, #400]	; (8030f68 <DMA_SetConfig+0x264>)
 8030dd8:	4293      	cmp	r3, r2
 8030dda:	d018      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030ddc:	68fb      	ldr	r3, [r7, #12]
 8030dde:	681b      	ldr	r3, [r3, #0]
 8030de0:	4a62      	ldr	r2, [pc, #392]	; (8030f6c <DMA_SetConfig+0x268>)
 8030de2:	4293      	cmp	r3, r2
 8030de4:	d013      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030de6:	68fb      	ldr	r3, [r7, #12]
 8030de8:	681b      	ldr	r3, [r3, #0]
 8030dea:	4a61      	ldr	r2, [pc, #388]	; (8030f70 <DMA_SetConfig+0x26c>)
 8030dec:	4293      	cmp	r3, r2
 8030dee:	d00e      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030df0:	68fb      	ldr	r3, [r7, #12]
 8030df2:	681b      	ldr	r3, [r3, #0]
 8030df4:	4a5f      	ldr	r2, [pc, #380]	; (8030f74 <DMA_SetConfig+0x270>)
 8030df6:	4293      	cmp	r3, r2
 8030df8:	d009      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030dfa:	68fb      	ldr	r3, [r7, #12]
 8030dfc:	681b      	ldr	r3, [r3, #0]
 8030dfe:	4a5e      	ldr	r2, [pc, #376]	; (8030f78 <DMA_SetConfig+0x274>)
 8030e00:	4293      	cmp	r3, r2
 8030e02:	d004      	beq.n	8030e0e <DMA_SetConfig+0x10a>
 8030e04:	68fb      	ldr	r3, [r7, #12]
 8030e06:	681b      	ldr	r3, [r3, #0]
 8030e08:	4a5c      	ldr	r2, [pc, #368]	; (8030f7c <DMA_SetConfig+0x278>)
 8030e0a:	4293      	cmp	r3, r2
 8030e0c:	d101      	bne.n	8030e12 <DMA_SetConfig+0x10e>
 8030e0e:	2301      	movs	r3, #1
 8030e10:	e000      	b.n	8030e14 <DMA_SetConfig+0x110>
 8030e12:	2300      	movs	r3, #0
 8030e14:	2b00      	cmp	r3, #0
 8030e16:	d00d      	beq.n	8030e34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8030e18:	68fb      	ldr	r3, [r7, #12]
 8030e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8030e1c:	68fa      	ldr	r2, [r7, #12]
 8030e1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8030e20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8030e22:	68fb      	ldr	r3, [r7, #12]
 8030e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030e26:	2b00      	cmp	r3, #0
 8030e28:	d004      	beq.n	8030e34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8030e2a:	68fb      	ldr	r3, [r7, #12]
 8030e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8030e2e:	68fa      	ldr	r2, [r7, #12]
 8030e30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8030e32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8030e34:	68fb      	ldr	r3, [r7, #12]
 8030e36:	681b      	ldr	r3, [r3, #0]
 8030e38:	4a39      	ldr	r2, [pc, #228]	; (8030f20 <DMA_SetConfig+0x21c>)
 8030e3a:	4293      	cmp	r3, r2
 8030e3c:	d04a      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e3e:	68fb      	ldr	r3, [r7, #12]
 8030e40:	681b      	ldr	r3, [r3, #0]
 8030e42:	4a38      	ldr	r2, [pc, #224]	; (8030f24 <DMA_SetConfig+0x220>)
 8030e44:	4293      	cmp	r3, r2
 8030e46:	d045      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e48:	68fb      	ldr	r3, [r7, #12]
 8030e4a:	681b      	ldr	r3, [r3, #0]
 8030e4c:	4a36      	ldr	r2, [pc, #216]	; (8030f28 <DMA_SetConfig+0x224>)
 8030e4e:	4293      	cmp	r3, r2
 8030e50:	d040      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e52:	68fb      	ldr	r3, [r7, #12]
 8030e54:	681b      	ldr	r3, [r3, #0]
 8030e56:	4a35      	ldr	r2, [pc, #212]	; (8030f2c <DMA_SetConfig+0x228>)
 8030e58:	4293      	cmp	r3, r2
 8030e5a:	d03b      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e5c:	68fb      	ldr	r3, [r7, #12]
 8030e5e:	681b      	ldr	r3, [r3, #0]
 8030e60:	4a33      	ldr	r2, [pc, #204]	; (8030f30 <DMA_SetConfig+0x22c>)
 8030e62:	4293      	cmp	r3, r2
 8030e64:	d036      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e66:	68fb      	ldr	r3, [r7, #12]
 8030e68:	681b      	ldr	r3, [r3, #0]
 8030e6a:	4a32      	ldr	r2, [pc, #200]	; (8030f34 <DMA_SetConfig+0x230>)
 8030e6c:	4293      	cmp	r3, r2
 8030e6e:	d031      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e70:	68fb      	ldr	r3, [r7, #12]
 8030e72:	681b      	ldr	r3, [r3, #0]
 8030e74:	4a30      	ldr	r2, [pc, #192]	; (8030f38 <DMA_SetConfig+0x234>)
 8030e76:	4293      	cmp	r3, r2
 8030e78:	d02c      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e7a:	68fb      	ldr	r3, [r7, #12]
 8030e7c:	681b      	ldr	r3, [r3, #0]
 8030e7e:	4a2f      	ldr	r2, [pc, #188]	; (8030f3c <DMA_SetConfig+0x238>)
 8030e80:	4293      	cmp	r3, r2
 8030e82:	d027      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e84:	68fb      	ldr	r3, [r7, #12]
 8030e86:	681b      	ldr	r3, [r3, #0]
 8030e88:	4a2d      	ldr	r2, [pc, #180]	; (8030f40 <DMA_SetConfig+0x23c>)
 8030e8a:	4293      	cmp	r3, r2
 8030e8c:	d022      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e8e:	68fb      	ldr	r3, [r7, #12]
 8030e90:	681b      	ldr	r3, [r3, #0]
 8030e92:	4a2c      	ldr	r2, [pc, #176]	; (8030f44 <DMA_SetConfig+0x240>)
 8030e94:	4293      	cmp	r3, r2
 8030e96:	d01d      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030e98:	68fb      	ldr	r3, [r7, #12]
 8030e9a:	681b      	ldr	r3, [r3, #0]
 8030e9c:	4a2a      	ldr	r2, [pc, #168]	; (8030f48 <DMA_SetConfig+0x244>)
 8030e9e:	4293      	cmp	r3, r2
 8030ea0:	d018      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030ea2:	68fb      	ldr	r3, [r7, #12]
 8030ea4:	681b      	ldr	r3, [r3, #0]
 8030ea6:	4a29      	ldr	r2, [pc, #164]	; (8030f4c <DMA_SetConfig+0x248>)
 8030ea8:	4293      	cmp	r3, r2
 8030eaa:	d013      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030eac:	68fb      	ldr	r3, [r7, #12]
 8030eae:	681b      	ldr	r3, [r3, #0]
 8030eb0:	4a27      	ldr	r2, [pc, #156]	; (8030f50 <DMA_SetConfig+0x24c>)
 8030eb2:	4293      	cmp	r3, r2
 8030eb4:	d00e      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030eb6:	68fb      	ldr	r3, [r7, #12]
 8030eb8:	681b      	ldr	r3, [r3, #0]
 8030eba:	4a26      	ldr	r2, [pc, #152]	; (8030f54 <DMA_SetConfig+0x250>)
 8030ebc:	4293      	cmp	r3, r2
 8030ebe:	d009      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030ec0:	68fb      	ldr	r3, [r7, #12]
 8030ec2:	681b      	ldr	r3, [r3, #0]
 8030ec4:	4a24      	ldr	r2, [pc, #144]	; (8030f58 <DMA_SetConfig+0x254>)
 8030ec6:	4293      	cmp	r3, r2
 8030ec8:	d004      	beq.n	8030ed4 <DMA_SetConfig+0x1d0>
 8030eca:	68fb      	ldr	r3, [r7, #12]
 8030ecc:	681b      	ldr	r3, [r3, #0]
 8030ece:	4a23      	ldr	r2, [pc, #140]	; (8030f5c <DMA_SetConfig+0x258>)
 8030ed0:	4293      	cmp	r3, r2
 8030ed2:	d101      	bne.n	8030ed8 <DMA_SetConfig+0x1d4>
 8030ed4:	2301      	movs	r3, #1
 8030ed6:	e000      	b.n	8030eda <DMA_SetConfig+0x1d6>
 8030ed8:	2300      	movs	r3, #0
 8030eda:	2b00      	cmp	r3, #0
 8030edc:	d059      	beq.n	8030f92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8030ede:	68fb      	ldr	r3, [r7, #12]
 8030ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030ee2:	f003 031f 	and.w	r3, r3, #31
 8030ee6:	223f      	movs	r2, #63	; 0x3f
 8030ee8:	409a      	lsls	r2, r3
 8030eea:	697b      	ldr	r3, [r7, #20]
 8030eec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8030eee:	68fb      	ldr	r3, [r7, #12]
 8030ef0:	681b      	ldr	r3, [r3, #0]
 8030ef2:	681a      	ldr	r2, [r3, #0]
 8030ef4:	68fb      	ldr	r3, [r7, #12]
 8030ef6:	681b      	ldr	r3, [r3, #0]
 8030ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8030efc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8030efe:	68fb      	ldr	r3, [r7, #12]
 8030f00:	681b      	ldr	r3, [r3, #0]
 8030f02:	683a      	ldr	r2, [r7, #0]
 8030f04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8030f06:	68fb      	ldr	r3, [r7, #12]
 8030f08:	689b      	ldr	r3, [r3, #8]
 8030f0a:	2b40      	cmp	r3, #64	; 0x40
 8030f0c:	d138      	bne.n	8030f80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8030f0e:	68fb      	ldr	r3, [r7, #12]
 8030f10:	681b      	ldr	r3, [r3, #0]
 8030f12:	687a      	ldr	r2, [r7, #4]
 8030f14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8030f16:	68fb      	ldr	r3, [r7, #12]
 8030f18:	681b      	ldr	r3, [r3, #0]
 8030f1a:	68ba      	ldr	r2, [r7, #8]
 8030f1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8030f1e:	e086      	b.n	803102e <DMA_SetConfig+0x32a>
 8030f20:	40020010 	.word	0x40020010
 8030f24:	40020028 	.word	0x40020028
 8030f28:	40020040 	.word	0x40020040
 8030f2c:	40020058 	.word	0x40020058
 8030f30:	40020070 	.word	0x40020070
 8030f34:	40020088 	.word	0x40020088
 8030f38:	400200a0 	.word	0x400200a0
 8030f3c:	400200b8 	.word	0x400200b8
 8030f40:	40020410 	.word	0x40020410
 8030f44:	40020428 	.word	0x40020428
 8030f48:	40020440 	.word	0x40020440
 8030f4c:	40020458 	.word	0x40020458
 8030f50:	40020470 	.word	0x40020470
 8030f54:	40020488 	.word	0x40020488
 8030f58:	400204a0 	.word	0x400204a0
 8030f5c:	400204b8 	.word	0x400204b8
 8030f60:	58025408 	.word	0x58025408
 8030f64:	5802541c 	.word	0x5802541c
 8030f68:	58025430 	.word	0x58025430
 8030f6c:	58025444 	.word	0x58025444
 8030f70:	58025458 	.word	0x58025458
 8030f74:	5802546c 	.word	0x5802546c
 8030f78:	58025480 	.word	0x58025480
 8030f7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8030f80:	68fb      	ldr	r3, [r7, #12]
 8030f82:	681b      	ldr	r3, [r3, #0]
 8030f84:	68ba      	ldr	r2, [r7, #8]
 8030f86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8030f88:	68fb      	ldr	r3, [r7, #12]
 8030f8a:	681b      	ldr	r3, [r3, #0]
 8030f8c:	687a      	ldr	r2, [r7, #4]
 8030f8e:	60da      	str	r2, [r3, #12]
}
 8030f90:	e04d      	b.n	803102e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8030f92:	68fb      	ldr	r3, [r7, #12]
 8030f94:	681b      	ldr	r3, [r3, #0]
 8030f96:	4a29      	ldr	r2, [pc, #164]	; (803103c <DMA_SetConfig+0x338>)
 8030f98:	4293      	cmp	r3, r2
 8030f9a:	d022      	beq.n	8030fe2 <DMA_SetConfig+0x2de>
 8030f9c:	68fb      	ldr	r3, [r7, #12]
 8030f9e:	681b      	ldr	r3, [r3, #0]
 8030fa0:	4a27      	ldr	r2, [pc, #156]	; (8031040 <DMA_SetConfig+0x33c>)
 8030fa2:	4293      	cmp	r3, r2
 8030fa4:	d01d      	beq.n	8030fe2 <DMA_SetConfig+0x2de>
 8030fa6:	68fb      	ldr	r3, [r7, #12]
 8030fa8:	681b      	ldr	r3, [r3, #0]
 8030faa:	4a26      	ldr	r2, [pc, #152]	; (8031044 <DMA_SetConfig+0x340>)
 8030fac:	4293      	cmp	r3, r2
 8030fae:	d018      	beq.n	8030fe2 <DMA_SetConfig+0x2de>
 8030fb0:	68fb      	ldr	r3, [r7, #12]
 8030fb2:	681b      	ldr	r3, [r3, #0]
 8030fb4:	4a24      	ldr	r2, [pc, #144]	; (8031048 <DMA_SetConfig+0x344>)
 8030fb6:	4293      	cmp	r3, r2
 8030fb8:	d013      	beq.n	8030fe2 <DMA_SetConfig+0x2de>
 8030fba:	68fb      	ldr	r3, [r7, #12]
 8030fbc:	681b      	ldr	r3, [r3, #0]
 8030fbe:	4a23      	ldr	r2, [pc, #140]	; (803104c <DMA_SetConfig+0x348>)
 8030fc0:	4293      	cmp	r3, r2
 8030fc2:	d00e      	beq.n	8030fe2 <DMA_SetConfig+0x2de>
 8030fc4:	68fb      	ldr	r3, [r7, #12]
 8030fc6:	681b      	ldr	r3, [r3, #0]
 8030fc8:	4a21      	ldr	r2, [pc, #132]	; (8031050 <DMA_SetConfig+0x34c>)
 8030fca:	4293      	cmp	r3, r2
 8030fcc:	d009      	beq.n	8030fe2 <DMA_SetConfig+0x2de>
 8030fce:	68fb      	ldr	r3, [r7, #12]
 8030fd0:	681b      	ldr	r3, [r3, #0]
 8030fd2:	4a20      	ldr	r2, [pc, #128]	; (8031054 <DMA_SetConfig+0x350>)
 8030fd4:	4293      	cmp	r3, r2
 8030fd6:	d004      	beq.n	8030fe2 <DMA_SetConfig+0x2de>
 8030fd8:	68fb      	ldr	r3, [r7, #12]
 8030fda:	681b      	ldr	r3, [r3, #0]
 8030fdc:	4a1e      	ldr	r2, [pc, #120]	; (8031058 <DMA_SetConfig+0x354>)
 8030fde:	4293      	cmp	r3, r2
 8030fe0:	d101      	bne.n	8030fe6 <DMA_SetConfig+0x2e2>
 8030fe2:	2301      	movs	r3, #1
 8030fe4:	e000      	b.n	8030fe8 <DMA_SetConfig+0x2e4>
 8030fe6:	2300      	movs	r3, #0
 8030fe8:	2b00      	cmp	r3, #0
 8030fea:	d020      	beq.n	803102e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8030fec:	68fb      	ldr	r3, [r7, #12]
 8030fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030ff0:	f003 031f 	and.w	r3, r3, #31
 8030ff4:	2201      	movs	r2, #1
 8030ff6:	409a      	lsls	r2, r3
 8030ff8:	693b      	ldr	r3, [r7, #16]
 8030ffa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8030ffc:	68fb      	ldr	r3, [r7, #12]
 8030ffe:	681b      	ldr	r3, [r3, #0]
 8031000:	683a      	ldr	r2, [r7, #0]
 8031002:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8031004:	68fb      	ldr	r3, [r7, #12]
 8031006:	689b      	ldr	r3, [r3, #8]
 8031008:	2b40      	cmp	r3, #64	; 0x40
 803100a:	d108      	bne.n	803101e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 803100c:	68fb      	ldr	r3, [r7, #12]
 803100e:	681b      	ldr	r3, [r3, #0]
 8031010:	687a      	ldr	r2, [r7, #4]
 8031012:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8031014:	68fb      	ldr	r3, [r7, #12]
 8031016:	681b      	ldr	r3, [r3, #0]
 8031018:	68ba      	ldr	r2, [r7, #8]
 803101a:	60da      	str	r2, [r3, #12]
}
 803101c:	e007      	b.n	803102e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 803101e:	68fb      	ldr	r3, [r7, #12]
 8031020:	681b      	ldr	r3, [r3, #0]
 8031022:	68ba      	ldr	r2, [r7, #8]
 8031024:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8031026:	68fb      	ldr	r3, [r7, #12]
 8031028:	681b      	ldr	r3, [r3, #0]
 803102a:	687a      	ldr	r2, [r7, #4]
 803102c:	60da      	str	r2, [r3, #12]
}
 803102e:	bf00      	nop
 8031030:	371c      	adds	r7, #28
 8031032:	46bd      	mov	sp, r7
 8031034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031038:	4770      	bx	lr
 803103a:	bf00      	nop
 803103c:	58025408 	.word	0x58025408
 8031040:	5802541c 	.word	0x5802541c
 8031044:	58025430 	.word	0x58025430
 8031048:	58025444 	.word	0x58025444
 803104c:	58025458 	.word	0x58025458
 8031050:	5802546c 	.word	0x5802546c
 8031054:	58025480 	.word	0x58025480
 8031058:	58025494 	.word	0x58025494

0803105c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 803105c:	b480      	push	{r7}
 803105e:	b085      	sub	sp, #20
 8031060:	af00      	add	r7, sp, #0
 8031062:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8031064:	687b      	ldr	r3, [r7, #4]
 8031066:	681b      	ldr	r3, [r3, #0]
 8031068:	4a42      	ldr	r2, [pc, #264]	; (8031174 <DMA_CalcBaseAndBitshift+0x118>)
 803106a:	4293      	cmp	r3, r2
 803106c:	d04a      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 803106e:	687b      	ldr	r3, [r7, #4]
 8031070:	681b      	ldr	r3, [r3, #0]
 8031072:	4a41      	ldr	r2, [pc, #260]	; (8031178 <DMA_CalcBaseAndBitshift+0x11c>)
 8031074:	4293      	cmp	r3, r2
 8031076:	d045      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 8031078:	687b      	ldr	r3, [r7, #4]
 803107a:	681b      	ldr	r3, [r3, #0]
 803107c:	4a3f      	ldr	r2, [pc, #252]	; (803117c <DMA_CalcBaseAndBitshift+0x120>)
 803107e:	4293      	cmp	r3, r2
 8031080:	d040      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 8031082:	687b      	ldr	r3, [r7, #4]
 8031084:	681b      	ldr	r3, [r3, #0]
 8031086:	4a3e      	ldr	r2, [pc, #248]	; (8031180 <DMA_CalcBaseAndBitshift+0x124>)
 8031088:	4293      	cmp	r3, r2
 803108a:	d03b      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 803108c:	687b      	ldr	r3, [r7, #4]
 803108e:	681b      	ldr	r3, [r3, #0]
 8031090:	4a3c      	ldr	r2, [pc, #240]	; (8031184 <DMA_CalcBaseAndBitshift+0x128>)
 8031092:	4293      	cmp	r3, r2
 8031094:	d036      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 8031096:	687b      	ldr	r3, [r7, #4]
 8031098:	681b      	ldr	r3, [r3, #0]
 803109a:	4a3b      	ldr	r2, [pc, #236]	; (8031188 <DMA_CalcBaseAndBitshift+0x12c>)
 803109c:	4293      	cmp	r3, r2
 803109e:	d031      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310a0:	687b      	ldr	r3, [r7, #4]
 80310a2:	681b      	ldr	r3, [r3, #0]
 80310a4:	4a39      	ldr	r2, [pc, #228]	; (803118c <DMA_CalcBaseAndBitshift+0x130>)
 80310a6:	4293      	cmp	r3, r2
 80310a8:	d02c      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310aa:	687b      	ldr	r3, [r7, #4]
 80310ac:	681b      	ldr	r3, [r3, #0]
 80310ae:	4a38      	ldr	r2, [pc, #224]	; (8031190 <DMA_CalcBaseAndBitshift+0x134>)
 80310b0:	4293      	cmp	r3, r2
 80310b2:	d027      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310b4:	687b      	ldr	r3, [r7, #4]
 80310b6:	681b      	ldr	r3, [r3, #0]
 80310b8:	4a36      	ldr	r2, [pc, #216]	; (8031194 <DMA_CalcBaseAndBitshift+0x138>)
 80310ba:	4293      	cmp	r3, r2
 80310bc:	d022      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310be:	687b      	ldr	r3, [r7, #4]
 80310c0:	681b      	ldr	r3, [r3, #0]
 80310c2:	4a35      	ldr	r2, [pc, #212]	; (8031198 <DMA_CalcBaseAndBitshift+0x13c>)
 80310c4:	4293      	cmp	r3, r2
 80310c6:	d01d      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310c8:	687b      	ldr	r3, [r7, #4]
 80310ca:	681b      	ldr	r3, [r3, #0]
 80310cc:	4a33      	ldr	r2, [pc, #204]	; (803119c <DMA_CalcBaseAndBitshift+0x140>)
 80310ce:	4293      	cmp	r3, r2
 80310d0:	d018      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310d2:	687b      	ldr	r3, [r7, #4]
 80310d4:	681b      	ldr	r3, [r3, #0]
 80310d6:	4a32      	ldr	r2, [pc, #200]	; (80311a0 <DMA_CalcBaseAndBitshift+0x144>)
 80310d8:	4293      	cmp	r3, r2
 80310da:	d013      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310dc:	687b      	ldr	r3, [r7, #4]
 80310de:	681b      	ldr	r3, [r3, #0]
 80310e0:	4a30      	ldr	r2, [pc, #192]	; (80311a4 <DMA_CalcBaseAndBitshift+0x148>)
 80310e2:	4293      	cmp	r3, r2
 80310e4:	d00e      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310e6:	687b      	ldr	r3, [r7, #4]
 80310e8:	681b      	ldr	r3, [r3, #0]
 80310ea:	4a2f      	ldr	r2, [pc, #188]	; (80311a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80310ec:	4293      	cmp	r3, r2
 80310ee:	d009      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310f0:	687b      	ldr	r3, [r7, #4]
 80310f2:	681b      	ldr	r3, [r3, #0]
 80310f4:	4a2d      	ldr	r2, [pc, #180]	; (80311ac <DMA_CalcBaseAndBitshift+0x150>)
 80310f6:	4293      	cmp	r3, r2
 80310f8:	d004      	beq.n	8031104 <DMA_CalcBaseAndBitshift+0xa8>
 80310fa:	687b      	ldr	r3, [r7, #4]
 80310fc:	681b      	ldr	r3, [r3, #0]
 80310fe:	4a2c      	ldr	r2, [pc, #176]	; (80311b0 <DMA_CalcBaseAndBitshift+0x154>)
 8031100:	4293      	cmp	r3, r2
 8031102:	d101      	bne.n	8031108 <DMA_CalcBaseAndBitshift+0xac>
 8031104:	2301      	movs	r3, #1
 8031106:	e000      	b.n	803110a <DMA_CalcBaseAndBitshift+0xae>
 8031108:	2300      	movs	r3, #0
 803110a:	2b00      	cmp	r3, #0
 803110c:	d024      	beq.n	8031158 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 803110e:	687b      	ldr	r3, [r7, #4]
 8031110:	681b      	ldr	r3, [r3, #0]
 8031112:	b2db      	uxtb	r3, r3
 8031114:	3b10      	subs	r3, #16
 8031116:	4a27      	ldr	r2, [pc, #156]	; (80311b4 <DMA_CalcBaseAndBitshift+0x158>)
 8031118:	fba2 2303 	umull	r2, r3, r2, r3
 803111c:	091b      	lsrs	r3, r3, #4
 803111e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8031120:	68fb      	ldr	r3, [r7, #12]
 8031122:	f003 0307 	and.w	r3, r3, #7
 8031126:	4a24      	ldr	r2, [pc, #144]	; (80311b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8031128:	5cd3      	ldrb	r3, [r2, r3]
 803112a:	461a      	mov	r2, r3
 803112c:	687b      	ldr	r3, [r7, #4]
 803112e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8031130:	68fb      	ldr	r3, [r7, #12]
 8031132:	2b03      	cmp	r3, #3
 8031134:	d908      	bls.n	8031148 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8031136:	687b      	ldr	r3, [r7, #4]
 8031138:	681b      	ldr	r3, [r3, #0]
 803113a:	461a      	mov	r2, r3
 803113c:	4b1f      	ldr	r3, [pc, #124]	; (80311bc <DMA_CalcBaseAndBitshift+0x160>)
 803113e:	4013      	ands	r3, r2
 8031140:	1d1a      	adds	r2, r3, #4
 8031142:	687b      	ldr	r3, [r7, #4]
 8031144:	659a      	str	r2, [r3, #88]	; 0x58
 8031146:	e00d      	b.n	8031164 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8031148:	687b      	ldr	r3, [r7, #4]
 803114a:	681b      	ldr	r3, [r3, #0]
 803114c:	461a      	mov	r2, r3
 803114e:	4b1b      	ldr	r3, [pc, #108]	; (80311bc <DMA_CalcBaseAndBitshift+0x160>)
 8031150:	4013      	ands	r3, r2
 8031152:	687a      	ldr	r2, [r7, #4]
 8031154:	6593      	str	r3, [r2, #88]	; 0x58
 8031156:	e005      	b.n	8031164 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8031158:	687b      	ldr	r3, [r7, #4]
 803115a:	681b      	ldr	r3, [r3, #0]
 803115c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8031160:	687b      	ldr	r3, [r7, #4]
 8031162:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8031164:	687b      	ldr	r3, [r7, #4]
 8031166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8031168:	4618      	mov	r0, r3
 803116a:	3714      	adds	r7, #20
 803116c:	46bd      	mov	sp, r7
 803116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031172:	4770      	bx	lr
 8031174:	40020010 	.word	0x40020010
 8031178:	40020028 	.word	0x40020028
 803117c:	40020040 	.word	0x40020040
 8031180:	40020058 	.word	0x40020058
 8031184:	40020070 	.word	0x40020070
 8031188:	40020088 	.word	0x40020088
 803118c:	400200a0 	.word	0x400200a0
 8031190:	400200b8 	.word	0x400200b8
 8031194:	40020410 	.word	0x40020410
 8031198:	40020428 	.word	0x40020428
 803119c:	40020440 	.word	0x40020440
 80311a0:	40020458 	.word	0x40020458
 80311a4:	40020470 	.word	0x40020470
 80311a8:	40020488 	.word	0x40020488
 80311ac:	400204a0 	.word	0x400204a0
 80311b0:	400204b8 	.word	0x400204b8
 80311b4:	aaaaaaab 	.word	0xaaaaaaab
 80311b8:	0805b280 	.word	0x0805b280
 80311bc:	fffffc00 	.word	0xfffffc00

080311c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80311c0:	b480      	push	{r7}
 80311c2:	b085      	sub	sp, #20
 80311c4:	af00      	add	r7, sp, #0
 80311c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80311c8:	2300      	movs	r3, #0
 80311ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80311cc:	687b      	ldr	r3, [r7, #4]
 80311ce:	699b      	ldr	r3, [r3, #24]
 80311d0:	2b00      	cmp	r3, #0
 80311d2:	d120      	bne.n	8031216 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80311d4:	687b      	ldr	r3, [r7, #4]
 80311d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80311d8:	2b03      	cmp	r3, #3
 80311da:	d858      	bhi.n	803128e <DMA_CheckFifoParam+0xce>
 80311dc:	a201      	add	r2, pc, #4	; (adr r2, 80311e4 <DMA_CheckFifoParam+0x24>)
 80311de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80311e2:	bf00      	nop
 80311e4:	080311f5 	.word	0x080311f5
 80311e8:	08031207 	.word	0x08031207
 80311ec:	080311f5 	.word	0x080311f5
 80311f0:	0803128f 	.word	0x0803128f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80311f4:	687b      	ldr	r3, [r7, #4]
 80311f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80311f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80311fc:	2b00      	cmp	r3, #0
 80311fe:	d048      	beq.n	8031292 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8031200:	2301      	movs	r3, #1
 8031202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8031204:	e045      	b.n	8031292 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8031206:	687b      	ldr	r3, [r7, #4]
 8031208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803120a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 803120e:	d142      	bne.n	8031296 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8031210:	2301      	movs	r3, #1
 8031212:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8031214:	e03f      	b.n	8031296 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8031216:	687b      	ldr	r3, [r7, #4]
 8031218:	699b      	ldr	r3, [r3, #24]
 803121a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803121e:	d123      	bne.n	8031268 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8031220:	687b      	ldr	r3, [r7, #4]
 8031222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031224:	2b03      	cmp	r3, #3
 8031226:	d838      	bhi.n	803129a <DMA_CheckFifoParam+0xda>
 8031228:	a201      	add	r2, pc, #4	; (adr r2, 8031230 <DMA_CheckFifoParam+0x70>)
 803122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803122e:	bf00      	nop
 8031230:	08031241 	.word	0x08031241
 8031234:	08031247 	.word	0x08031247
 8031238:	08031241 	.word	0x08031241
 803123c:	08031259 	.word	0x08031259
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8031240:	2301      	movs	r3, #1
 8031242:	73fb      	strb	r3, [r7, #15]
        break;
 8031244:	e030      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8031246:	687b      	ldr	r3, [r7, #4]
 8031248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803124a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 803124e:	2b00      	cmp	r3, #0
 8031250:	d025      	beq.n	803129e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8031252:	2301      	movs	r3, #1
 8031254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8031256:	e022      	b.n	803129e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8031258:	687b      	ldr	r3, [r7, #4]
 803125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803125c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8031260:	d11f      	bne.n	80312a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8031262:	2301      	movs	r3, #1
 8031264:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8031266:	e01c      	b.n	80312a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8031268:	687b      	ldr	r3, [r7, #4]
 803126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803126c:	2b02      	cmp	r3, #2
 803126e:	d902      	bls.n	8031276 <DMA_CheckFifoParam+0xb6>
 8031270:	2b03      	cmp	r3, #3
 8031272:	d003      	beq.n	803127c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8031274:	e018      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8031276:	2301      	movs	r3, #1
 8031278:	73fb      	strb	r3, [r7, #15]
        break;
 803127a:	e015      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 803127c:	687b      	ldr	r3, [r7, #4]
 803127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8031284:	2b00      	cmp	r3, #0
 8031286:	d00e      	beq.n	80312a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8031288:	2301      	movs	r3, #1
 803128a:	73fb      	strb	r3, [r7, #15]
    break;
 803128c:	e00b      	b.n	80312a6 <DMA_CheckFifoParam+0xe6>
        break;
 803128e:	bf00      	nop
 8031290:	e00a      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
        break;
 8031292:	bf00      	nop
 8031294:	e008      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
        break;
 8031296:	bf00      	nop
 8031298:	e006      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
        break;
 803129a:	bf00      	nop
 803129c:	e004      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
        break;
 803129e:	bf00      	nop
 80312a0:	e002      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
        break;
 80312a2:	bf00      	nop
 80312a4:	e000      	b.n	80312a8 <DMA_CheckFifoParam+0xe8>
    break;
 80312a6:	bf00      	nop
    }
  }

  return status;
 80312a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80312aa:	4618      	mov	r0, r3
 80312ac:	3714      	adds	r7, #20
 80312ae:	46bd      	mov	sp, r7
 80312b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80312b4:	4770      	bx	lr
 80312b6:	bf00      	nop

080312b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80312b8:	b480      	push	{r7}
 80312ba:	b085      	sub	sp, #20
 80312bc:	af00      	add	r7, sp, #0
 80312be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80312c0:	687b      	ldr	r3, [r7, #4]
 80312c2:	681b      	ldr	r3, [r3, #0]
 80312c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80312c6:	687b      	ldr	r3, [r7, #4]
 80312c8:	681b      	ldr	r3, [r3, #0]
 80312ca:	4a38      	ldr	r2, [pc, #224]	; (80313ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80312cc:	4293      	cmp	r3, r2
 80312ce:	d022      	beq.n	8031316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80312d0:	687b      	ldr	r3, [r7, #4]
 80312d2:	681b      	ldr	r3, [r3, #0]
 80312d4:	4a36      	ldr	r2, [pc, #216]	; (80313b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80312d6:	4293      	cmp	r3, r2
 80312d8:	d01d      	beq.n	8031316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80312da:	687b      	ldr	r3, [r7, #4]
 80312dc:	681b      	ldr	r3, [r3, #0]
 80312de:	4a35      	ldr	r2, [pc, #212]	; (80313b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80312e0:	4293      	cmp	r3, r2
 80312e2:	d018      	beq.n	8031316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80312e4:	687b      	ldr	r3, [r7, #4]
 80312e6:	681b      	ldr	r3, [r3, #0]
 80312e8:	4a33      	ldr	r2, [pc, #204]	; (80313b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80312ea:	4293      	cmp	r3, r2
 80312ec:	d013      	beq.n	8031316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80312ee:	687b      	ldr	r3, [r7, #4]
 80312f0:	681b      	ldr	r3, [r3, #0]
 80312f2:	4a32      	ldr	r2, [pc, #200]	; (80313bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80312f4:	4293      	cmp	r3, r2
 80312f6:	d00e      	beq.n	8031316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80312f8:	687b      	ldr	r3, [r7, #4]
 80312fa:	681b      	ldr	r3, [r3, #0]
 80312fc:	4a30      	ldr	r2, [pc, #192]	; (80313c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80312fe:	4293      	cmp	r3, r2
 8031300:	d009      	beq.n	8031316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8031302:	687b      	ldr	r3, [r7, #4]
 8031304:	681b      	ldr	r3, [r3, #0]
 8031306:	4a2f      	ldr	r2, [pc, #188]	; (80313c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8031308:	4293      	cmp	r3, r2
 803130a:	d004      	beq.n	8031316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 803130c:	687b      	ldr	r3, [r7, #4]
 803130e:	681b      	ldr	r3, [r3, #0]
 8031310:	4a2d      	ldr	r2, [pc, #180]	; (80313c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8031312:	4293      	cmp	r3, r2
 8031314:	d101      	bne.n	803131a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8031316:	2301      	movs	r3, #1
 8031318:	e000      	b.n	803131c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 803131a:	2300      	movs	r3, #0
 803131c:	2b00      	cmp	r3, #0
 803131e:	d01a      	beq.n	8031356 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8031320:	687b      	ldr	r3, [r7, #4]
 8031322:	681b      	ldr	r3, [r3, #0]
 8031324:	b2db      	uxtb	r3, r3
 8031326:	3b08      	subs	r3, #8
 8031328:	4a28      	ldr	r2, [pc, #160]	; (80313cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 803132a:	fba2 2303 	umull	r2, r3, r2, r3
 803132e:	091b      	lsrs	r3, r3, #4
 8031330:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8031332:	68fa      	ldr	r2, [r7, #12]
 8031334:	4b26      	ldr	r3, [pc, #152]	; (80313d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8031336:	4413      	add	r3, r2
 8031338:	009b      	lsls	r3, r3, #2
 803133a:	461a      	mov	r2, r3
 803133c:	687b      	ldr	r3, [r7, #4]
 803133e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8031340:	687b      	ldr	r3, [r7, #4]
 8031342:	4a24      	ldr	r2, [pc, #144]	; (80313d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8031344:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8031346:	68fb      	ldr	r3, [r7, #12]
 8031348:	f003 031f 	and.w	r3, r3, #31
 803134c:	2201      	movs	r2, #1
 803134e:	409a      	lsls	r2, r3
 8031350:	687b      	ldr	r3, [r7, #4]
 8031352:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8031354:	e024      	b.n	80313a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8031356:	687b      	ldr	r3, [r7, #4]
 8031358:	681b      	ldr	r3, [r3, #0]
 803135a:	b2db      	uxtb	r3, r3
 803135c:	3b10      	subs	r3, #16
 803135e:	4a1e      	ldr	r2, [pc, #120]	; (80313d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8031360:	fba2 2303 	umull	r2, r3, r2, r3
 8031364:	091b      	lsrs	r3, r3, #4
 8031366:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8031368:	68bb      	ldr	r3, [r7, #8]
 803136a:	4a1c      	ldr	r2, [pc, #112]	; (80313dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 803136c:	4293      	cmp	r3, r2
 803136e:	d806      	bhi.n	803137e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8031370:	68bb      	ldr	r3, [r7, #8]
 8031372:	4a1b      	ldr	r2, [pc, #108]	; (80313e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8031374:	4293      	cmp	r3, r2
 8031376:	d902      	bls.n	803137e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8031378:	68fb      	ldr	r3, [r7, #12]
 803137a:	3308      	adds	r3, #8
 803137c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 803137e:	68fa      	ldr	r2, [r7, #12]
 8031380:	4b18      	ldr	r3, [pc, #96]	; (80313e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8031382:	4413      	add	r3, r2
 8031384:	009b      	lsls	r3, r3, #2
 8031386:	461a      	mov	r2, r3
 8031388:	687b      	ldr	r3, [r7, #4]
 803138a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 803138c:	687b      	ldr	r3, [r7, #4]
 803138e:	4a16      	ldr	r2, [pc, #88]	; (80313e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8031390:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8031392:	68fb      	ldr	r3, [r7, #12]
 8031394:	f003 031f 	and.w	r3, r3, #31
 8031398:	2201      	movs	r2, #1
 803139a:	409a      	lsls	r2, r3
 803139c:	687b      	ldr	r3, [r7, #4]
 803139e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80313a0:	bf00      	nop
 80313a2:	3714      	adds	r7, #20
 80313a4:	46bd      	mov	sp, r7
 80313a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80313aa:	4770      	bx	lr
 80313ac:	58025408 	.word	0x58025408
 80313b0:	5802541c 	.word	0x5802541c
 80313b4:	58025430 	.word	0x58025430
 80313b8:	58025444 	.word	0x58025444
 80313bc:	58025458 	.word	0x58025458
 80313c0:	5802546c 	.word	0x5802546c
 80313c4:	58025480 	.word	0x58025480
 80313c8:	58025494 	.word	0x58025494
 80313cc:	cccccccd 	.word	0xcccccccd
 80313d0:	16009600 	.word	0x16009600
 80313d4:	58025880 	.word	0x58025880
 80313d8:	aaaaaaab 	.word	0xaaaaaaab
 80313dc:	400204b8 	.word	0x400204b8
 80313e0:	4002040f 	.word	0x4002040f
 80313e4:	10008200 	.word	0x10008200
 80313e8:	40020880 	.word	0x40020880

080313ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80313ec:	b480      	push	{r7}
 80313ee:	b085      	sub	sp, #20
 80313f0:	af00      	add	r7, sp, #0
 80313f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80313f4:	687b      	ldr	r3, [r7, #4]
 80313f6:	685b      	ldr	r3, [r3, #4]
 80313f8:	b2db      	uxtb	r3, r3
 80313fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80313fc:	68fb      	ldr	r3, [r7, #12]
 80313fe:	2b00      	cmp	r3, #0
 8031400:	d04a      	beq.n	8031498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8031402:	68fb      	ldr	r3, [r7, #12]
 8031404:	2b08      	cmp	r3, #8
 8031406:	d847      	bhi.n	8031498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8031408:	687b      	ldr	r3, [r7, #4]
 803140a:	681b      	ldr	r3, [r3, #0]
 803140c:	4a25      	ldr	r2, [pc, #148]	; (80314a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 803140e:	4293      	cmp	r3, r2
 8031410:	d022      	beq.n	8031458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8031412:	687b      	ldr	r3, [r7, #4]
 8031414:	681b      	ldr	r3, [r3, #0]
 8031416:	4a24      	ldr	r2, [pc, #144]	; (80314a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8031418:	4293      	cmp	r3, r2
 803141a:	d01d      	beq.n	8031458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 803141c:	687b      	ldr	r3, [r7, #4]
 803141e:	681b      	ldr	r3, [r3, #0]
 8031420:	4a22      	ldr	r2, [pc, #136]	; (80314ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8031422:	4293      	cmp	r3, r2
 8031424:	d018      	beq.n	8031458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8031426:	687b      	ldr	r3, [r7, #4]
 8031428:	681b      	ldr	r3, [r3, #0]
 803142a:	4a21      	ldr	r2, [pc, #132]	; (80314b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 803142c:	4293      	cmp	r3, r2
 803142e:	d013      	beq.n	8031458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8031430:	687b      	ldr	r3, [r7, #4]
 8031432:	681b      	ldr	r3, [r3, #0]
 8031434:	4a1f      	ldr	r2, [pc, #124]	; (80314b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8031436:	4293      	cmp	r3, r2
 8031438:	d00e      	beq.n	8031458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 803143a:	687b      	ldr	r3, [r7, #4]
 803143c:	681b      	ldr	r3, [r3, #0]
 803143e:	4a1e      	ldr	r2, [pc, #120]	; (80314b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8031440:	4293      	cmp	r3, r2
 8031442:	d009      	beq.n	8031458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8031444:	687b      	ldr	r3, [r7, #4]
 8031446:	681b      	ldr	r3, [r3, #0]
 8031448:	4a1c      	ldr	r2, [pc, #112]	; (80314bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 803144a:	4293      	cmp	r3, r2
 803144c:	d004      	beq.n	8031458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 803144e:	687b      	ldr	r3, [r7, #4]
 8031450:	681b      	ldr	r3, [r3, #0]
 8031452:	4a1b      	ldr	r2, [pc, #108]	; (80314c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8031454:	4293      	cmp	r3, r2
 8031456:	d101      	bne.n	803145c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8031458:	2301      	movs	r3, #1
 803145a:	e000      	b.n	803145e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 803145c:	2300      	movs	r3, #0
 803145e:	2b00      	cmp	r3, #0
 8031460:	d00a      	beq.n	8031478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8031462:	68fa      	ldr	r2, [r7, #12]
 8031464:	4b17      	ldr	r3, [pc, #92]	; (80314c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8031466:	4413      	add	r3, r2
 8031468:	009b      	lsls	r3, r3, #2
 803146a:	461a      	mov	r2, r3
 803146c:	687b      	ldr	r3, [r7, #4]
 803146e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8031470:	687b      	ldr	r3, [r7, #4]
 8031472:	4a15      	ldr	r2, [pc, #84]	; (80314c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8031474:	671a      	str	r2, [r3, #112]	; 0x70
 8031476:	e009      	b.n	803148c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8031478:	68fa      	ldr	r2, [r7, #12]
 803147a:	4b14      	ldr	r3, [pc, #80]	; (80314cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 803147c:	4413      	add	r3, r2
 803147e:	009b      	lsls	r3, r3, #2
 8031480:	461a      	mov	r2, r3
 8031482:	687b      	ldr	r3, [r7, #4]
 8031484:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8031486:	687b      	ldr	r3, [r7, #4]
 8031488:	4a11      	ldr	r2, [pc, #68]	; (80314d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 803148a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 803148c:	68fb      	ldr	r3, [r7, #12]
 803148e:	3b01      	subs	r3, #1
 8031490:	2201      	movs	r2, #1
 8031492:	409a      	lsls	r2, r3
 8031494:	687b      	ldr	r3, [r7, #4]
 8031496:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8031498:	bf00      	nop
 803149a:	3714      	adds	r7, #20
 803149c:	46bd      	mov	sp, r7
 803149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314a2:	4770      	bx	lr
 80314a4:	58025408 	.word	0x58025408
 80314a8:	5802541c 	.word	0x5802541c
 80314ac:	58025430 	.word	0x58025430
 80314b0:	58025444 	.word	0x58025444
 80314b4:	58025458 	.word	0x58025458
 80314b8:	5802546c 	.word	0x5802546c
 80314bc:	58025480 	.word	0x58025480
 80314c0:	58025494 	.word	0x58025494
 80314c4:	1600963f 	.word	0x1600963f
 80314c8:	58025940 	.word	0x58025940
 80314cc:	1000823f 	.word	0x1000823f
 80314d0:	40020940 	.word	0x40020940

080314d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80314d4:	b480      	push	{r7}
 80314d6:	b089      	sub	sp, #36	; 0x24
 80314d8:	af00      	add	r7, sp, #0
 80314da:	6078      	str	r0, [r7, #4]
 80314dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80314de:	2300      	movs	r3, #0
 80314e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80314e2:	4b89      	ldr	r3, [pc, #548]	; (8031708 <HAL_GPIO_Init+0x234>)
 80314e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80314e6:	e194      	b.n	8031812 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80314e8:	683b      	ldr	r3, [r7, #0]
 80314ea:	681a      	ldr	r2, [r3, #0]
 80314ec:	2101      	movs	r1, #1
 80314ee:	69fb      	ldr	r3, [r7, #28]
 80314f0:	fa01 f303 	lsl.w	r3, r1, r3
 80314f4:	4013      	ands	r3, r2
 80314f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80314f8:	693b      	ldr	r3, [r7, #16]
 80314fa:	2b00      	cmp	r3, #0
 80314fc:	f000 8186 	beq.w	803180c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8031500:	683b      	ldr	r3, [r7, #0]
 8031502:	685b      	ldr	r3, [r3, #4]
 8031504:	f003 0303 	and.w	r3, r3, #3
 8031508:	2b01      	cmp	r3, #1
 803150a:	d005      	beq.n	8031518 <HAL_GPIO_Init+0x44>
 803150c:	683b      	ldr	r3, [r7, #0]
 803150e:	685b      	ldr	r3, [r3, #4]
 8031510:	f003 0303 	and.w	r3, r3, #3
 8031514:	2b02      	cmp	r3, #2
 8031516:	d130      	bne.n	803157a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8031518:	687b      	ldr	r3, [r7, #4]
 803151a:	689b      	ldr	r3, [r3, #8]
 803151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 803151e:	69fb      	ldr	r3, [r7, #28]
 8031520:	005b      	lsls	r3, r3, #1
 8031522:	2203      	movs	r2, #3
 8031524:	fa02 f303 	lsl.w	r3, r2, r3
 8031528:	43db      	mvns	r3, r3
 803152a:	69ba      	ldr	r2, [r7, #24]
 803152c:	4013      	ands	r3, r2
 803152e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8031530:	683b      	ldr	r3, [r7, #0]
 8031532:	68da      	ldr	r2, [r3, #12]
 8031534:	69fb      	ldr	r3, [r7, #28]
 8031536:	005b      	lsls	r3, r3, #1
 8031538:	fa02 f303 	lsl.w	r3, r2, r3
 803153c:	69ba      	ldr	r2, [r7, #24]
 803153e:	4313      	orrs	r3, r2
 8031540:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8031542:	687b      	ldr	r3, [r7, #4]
 8031544:	69ba      	ldr	r2, [r7, #24]
 8031546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8031548:	687b      	ldr	r3, [r7, #4]
 803154a:	685b      	ldr	r3, [r3, #4]
 803154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 803154e:	2201      	movs	r2, #1
 8031550:	69fb      	ldr	r3, [r7, #28]
 8031552:	fa02 f303 	lsl.w	r3, r2, r3
 8031556:	43db      	mvns	r3, r3
 8031558:	69ba      	ldr	r2, [r7, #24]
 803155a:	4013      	ands	r3, r2
 803155c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 803155e:	683b      	ldr	r3, [r7, #0]
 8031560:	685b      	ldr	r3, [r3, #4]
 8031562:	091b      	lsrs	r3, r3, #4
 8031564:	f003 0201 	and.w	r2, r3, #1
 8031568:	69fb      	ldr	r3, [r7, #28]
 803156a:	fa02 f303 	lsl.w	r3, r2, r3
 803156e:	69ba      	ldr	r2, [r7, #24]
 8031570:	4313      	orrs	r3, r2
 8031572:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8031574:	687b      	ldr	r3, [r7, #4]
 8031576:	69ba      	ldr	r2, [r7, #24]
 8031578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 803157a:	683b      	ldr	r3, [r7, #0]
 803157c:	685b      	ldr	r3, [r3, #4]
 803157e:	f003 0303 	and.w	r3, r3, #3
 8031582:	2b03      	cmp	r3, #3
 8031584:	d017      	beq.n	80315b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8031586:	687b      	ldr	r3, [r7, #4]
 8031588:	68db      	ldr	r3, [r3, #12]
 803158a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 803158c:	69fb      	ldr	r3, [r7, #28]
 803158e:	005b      	lsls	r3, r3, #1
 8031590:	2203      	movs	r2, #3
 8031592:	fa02 f303 	lsl.w	r3, r2, r3
 8031596:	43db      	mvns	r3, r3
 8031598:	69ba      	ldr	r2, [r7, #24]
 803159a:	4013      	ands	r3, r2
 803159c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 803159e:	683b      	ldr	r3, [r7, #0]
 80315a0:	689a      	ldr	r2, [r3, #8]
 80315a2:	69fb      	ldr	r3, [r7, #28]
 80315a4:	005b      	lsls	r3, r3, #1
 80315a6:	fa02 f303 	lsl.w	r3, r2, r3
 80315aa:	69ba      	ldr	r2, [r7, #24]
 80315ac:	4313      	orrs	r3, r2
 80315ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80315b0:	687b      	ldr	r3, [r7, #4]
 80315b2:	69ba      	ldr	r2, [r7, #24]
 80315b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80315b6:	683b      	ldr	r3, [r7, #0]
 80315b8:	685b      	ldr	r3, [r3, #4]
 80315ba:	f003 0303 	and.w	r3, r3, #3
 80315be:	2b02      	cmp	r3, #2
 80315c0:	d123      	bne.n	803160a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80315c2:	69fb      	ldr	r3, [r7, #28]
 80315c4:	08da      	lsrs	r2, r3, #3
 80315c6:	687b      	ldr	r3, [r7, #4]
 80315c8:	3208      	adds	r2, #8
 80315ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80315ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80315d0:	69fb      	ldr	r3, [r7, #28]
 80315d2:	f003 0307 	and.w	r3, r3, #7
 80315d6:	009b      	lsls	r3, r3, #2
 80315d8:	220f      	movs	r2, #15
 80315da:	fa02 f303 	lsl.w	r3, r2, r3
 80315de:	43db      	mvns	r3, r3
 80315e0:	69ba      	ldr	r2, [r7, #24]
 80315e2:	4013      	ands	r3, r2
 80315e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80315e6:	683b      	ldr	r3, [r7, #0]
 80315e8:	691a      	ldr	r2, [r3, #16]
 80315ea:	69fb      	ldr	r3, [r7, #28]
 80315ec:	f003 0307 	and.w	r3, r3, #7
 80315f0:	009b      	lsls	r3, r3, #2
 80315f2:	fa02 f303 	lsl.w	r3, r2, r3
 80315f6:	69ba      	ldr	r2, [r7, #24]
 80315f8:	4313      	orrs	r3, r2
 80315fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80315fc:	69fb      	ldr	r3, [r7, #28]
 80315fe:	08da      	lsrs	r2, r3, #3
 8031600:	687b      	ldr	r3, [r7, #4]
 8031602:	3208      	adds	r2, #8
 8031604:	69b9      	ldr	r1, [r7, #24]
 8031606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 803160a:	687b      	ldr	r3, [r7, #4]
 803160c:	681b      	ldr	r3, [r3, #0]
 803160e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8031610:	69fb      	ldr	r3, [r7, #28]
 8031612:	005b      	lsls	r3, r3, #1
 8031614:	2203      	movs	r2, #3
 8031616:	fa02 f303 	lsl.w	r3, r2, r3
 803161a:	43db      	mvns	r3, r3
 803161c:	69ba      	ldr	r2, [r7, #24]
 803161e:	4013      	ands	r3, r2
 8031620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8031622:	683b      	ldr	r3, [r7, #0]
 8031624:	685b      	ldr	r3, [r3, #4]
 8031626:	f003 0203 	and.w	r2, r3, #3
 803162a:	69fb      	ldr	r3, [r7, #28]
 803162c:	005b      	lsls	r3, r3, #1
 803162e:	fa02 f303 	lsl.w	r3, r2, r3
 8031632:	69ba      	ldr	r2, [r7, #24]
 8031634:	4313      	orrs	r3, r2
 8031636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8031638:	687b      	ldr	r3, [r7, #4]
 803163a:	69ba      	ldr	r2, [r7, #24]
 803163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 803163e:	683b      	ldr	r3, [r7, #0]
 8031640:	685b      	ldr	r3, [r3, #4]
 8031642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8031646:	2b00      	cmp	r3, #0
 8031648:	f000 80e0 	beq.w	803180c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 803164c:	4b2f      	ldr	r3, [pc, #188]	; (803170c <HAL_GPIO_Init+0x238>)
 803164e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8031652:	4a2e      	ldr	r2, [pc, #184]	; (803170c <HAL_GPIO_Init+0x238>)
 8031654:	f043 0302 	orr.w	r3, r3, #2
 8031658:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 803165c:	4b2b      	ldr	r3, [pc, #172]	; (803170c <HAL_GPIO_Init+0x238>)
 803165e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8031662:	f003 0302 	and.w	r3, r3, #2
 8031666:	60fb      	str	r3, [r7, #12]
 8031668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 803166a:	4a29      	ldr	r2, [pc, #164]	; (8031710 <HAL_GPIO_Init+0x23c>)
 803166c:	69fb      	ldr	r3, [r7, #28]
 803166e:	089b      	lsrs	r3, r3, #2
 8031670:	3302      	adds	r3, #2
 8031672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8031676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8031678:	69fb      	ldr	r3, [r7, #28]
 803167a:	f003 0303 	and.w	r3, r3, #3
 803167e:	009b      	lsls	r3, r3, #2
 8031680:	220f      	movs	r2, #15
 8031682:	fa02 f303 	lsl.w	r3, r2, r3
 8031686:	43db      	mvns	r3, r3
 8031688:	69ba      	ldr	r2, [r7, #24]
 803168a:	4013      	ands	r3, r2
 803168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 803168e:	687b      	ldr	r3, [r7, #4]
 8031690:	4a20      	ldr	r2, [pc, #128]	; (8031714 <HAL_GPIO_Init+0x240>)
 8031692:	4293      	cmp	r3, r2
 8031694:	d052      	beq.n	803173c <HAL_GPIO_Init+0x268>
 8031696:	687b      	ldr	r3, [r7, #4]
 8031698:	4a1f      	ldr	r2, [pc, #124]	; (8031718 <HAL_GPIO_Init+0x244>)
 803169a:	4293      	cmp	r3, r2
 803169c:	d031      	beq.n	8031702 <HAL_GPIO_Init+0x22e>
 803169e:	687b      	ldr	r3, [r7, #4]
 80316a0:	4a1e      	ldr	r2, [pc, #120]	; (803171c <HAL_GPIO_Init+0x248>)
 80316a2:	4293      	cmp	r3, r2
 80316a4:	d02b      	beq.n	80316fe <HAL_GPIO_Init+0x22a>
 80316a6:	687b      	ldr	r3, [r7, #4]
 80316a8:	4a1d      	ldr	r2, [pc, #116]	; (8031720 <HAL_GPIO_Init+0x24c>)
 80316aa:	4293      	cmp	r3, r2
 80316ac:	d025      	beq.n	80316fa <HAL_GPIO_Init+0x226>
 80316ae:	687b      	ldr	r3, [r7, #4]
 80316b0:	4a1c      	ldr	r2, [pc, #112]	; (8031724 <HAL_GPIO_Init+0x250>)
 80316b2:	4293      	cmp	r3, r2
 80316b4:	d01f      	beq.n	80316f6 <HAL_GPIO_Init+0x222>
 80316b6:	687b      	ldr	r3, [r7, #4]
 80316b8:	4a1b      	ldr	r2, [pc, #108]	; (8031728 <HAL_GPIO_Init+0x254>)
 80316ba:	4293      	cmp	r3, r2
 80316bc:	d019      	beq.n	80316f2 <HAL_GPIO_Init+0x21e>
 80316be:	687b      	ldr	r3, [r7, #4]
 80316c0:	4a1a      	ldr	r2, [pc, #104]	; (803172c <HAL_GPIO_Init+0x258>)
 80316c2:	4293      	cmp	r3, r2
 80316c4:	d013      	beq.n	80316ee <HAL_GPIO_Init+0x21a>
 80316c6:	687b      	ldr	r3, [r7, #4]
 80316c8:	4a19      	ldr	r2, [pc, #100]	; (8031730 <HAL_GPIO_Init+0x25c>)
 80316ca:	4293      	cmp	r3, r2
 80316cc:	d00d      	beq.n	80316ea <HAL_GPIO_Init+0x216>
 80316ce:	687b      	ldr	r3, [r7, #4]
 80316d0:	4a18      	ldr	r2, [pc, #96]	; (8031734 <HAL_GPIO_Init+0x260>)
 80316d2:	4293      	cmp	r3, r2
 80316d4:	d007      	beq.n	80316e6 <HAL_GPIO_Init+0x212>
 80316d6:	687b      	ldr	r3, [r7, #4]
 80316d8:	4a17      	ldr	r2, [pc, #92]	; (8031738 <HAL_GPIO_Init+0x264>)
 80316da:	4293      	cmp	r3, r2
 80316dc:	d101      	bne.n	80316e2 <HAL_GPIO_Init+0x20e>
 80316de:	2309      	movs	r3, #9
 80316e0:	e02d      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316e2:	230a      	movs	r3, #10
 80316e4:	e02b      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316e6:	2308      	movs	r3, #8
 80316e8:	e029      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316ea:	2307      	movs	r3, #7
 80316ec:	e027      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316ee:	2306      	movs	r3, #6
 80316f0:	e025      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316f2:	2305      	movs	r3, #5
 80316f4:	e023      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316f6:	2304      	movs	r3, #4
 80316f8:	e021      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316fa:	2303      	movs	r3, #3
 80316fc:	e01f      	b.n	803173e <HAL_GPIO_Init+0x26a>
 80316fe:	2302      	movs	r3, #2
 8031700:	e01d      	b.n	803173e <HAL_GPIO_Init+0x26a>
 8031702:	2301      	movs	r3, #1
 8031704:	e01b      	b.n	803173e <HAL_GPIO_Init+0x26a>
 8031706:	bf00      	nop
 8031708:	58000080 	.word	0x58000080
 803170c:	58024400 	.word	0x58024400
 8031710:	58000400 	.word	0x58000400
 8031714:	58020000 	.word	0x58020000
 8031718:	58020400 	.word	0x58020400
 803171c:	58020800 	.word	0x58020800
 8031720:	58020c00 	.word	0x58020c00
 8031724:	58021000 	.word	0x58021000
 8031728:	58021400 	.word	0x58021400
 803172c:	58021800 	.word	0x58021800
 8031730:	58021c00 	.word	0x58021c00
 8031734:	58022000 	.word	0x58022000
 8031738:	58022400 	.word	0x58022400
 803173c:	2300      	movs	r3, #0
 803173e:	69fa      	ldr	r2, [r7, #28]
 8031740:	f002 0203 	and.w	r2, r2, #3
 8031744:	0092      	lsls	r2, r2, #2
 8031746:	4093      	lsls	r3, r2
 8031748:	69ba      	ldr	r2, [r7, #24]
 803174a:	4313      	orrs	r3, r2
 803174c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 803174e:	4938      	ldr	r1, [pc, #224]	; (8031830 <HAL_GPIO_Init+0x35c>)
 8031750:	69fb      	ldr	r3, [r7, #28]
 8031752:	089b      	lsrs	r3, r3, #2
 8031754:	3302      	adds	r3, #2
 8031756:	69ba      	ldr	r2, [r7, #24]
 8031758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 803175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8031760:	681b      	ldr	r3, [r3, #0]
 8031762:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8031764:	693b      	ldr	r3, [r7, #16]
 8031766:	43db      	mvns	r3, r3
 8031768:	69ba      	ldr	r2, [r7, #24]
 803176a:	4013      	ands	r3, r2
 803176c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 803176e:	683b      	ldr	r3, [r7, #0]
 8031770:	685b      	ldr	r3, [r3, #4]
 8031772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8031776:	2b00      	cmp	r3, #0
 8031778:	d003      	beq.n	8031782 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 803177a:	69ba      	ldr	r2, [r7, #24]
 803177c:	693b      	ldr	r3, [r7, #16]
 803177e:	4313      	orrs	r3, r2
 8031780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8031782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8031786:	69bb      	ldr	r3, [r7, #24]
 8031788:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 803178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 803178e:	685b      	ldr	r3, [r3, #4]
 8031790:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8031792:	693b      	ldr	r3, [r7, #16]
 8031794:	43db      	mvns	r3, r3
 8031796:	69ba      	ldr	r2, [r7, #24]
 8031798:	4013      	ands	r3, r2
 803179a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 803179c:	683b      	ldr	r3, [r7, #0]
 803179e:	685b      	ldr	r3, [r3, #4]
 80317a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80317a4:	2b00      	cmp	r3, #0
 80317a6:	d003      	beq.n	80317b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80317a8:	69ba      	ldr	r2, [r7, #24]
 80317aa:	693b      	ldr	r3, [r7, #16]
 80317ac:	4313      	orrs	r3, r2
 80317ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80317b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80317b4:	69bb      	ldr	r3, [r7, #24]
 80317b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80317b8:	697b      	ldr	r3, [r7, #20]
 80317ba:	685b      	ldr	r3, [r3, #4]
 80317bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80317be:	693b      	ldr	r3, [r7, #16]
 80317c0:	43db      	mvns	r3, r3
 80317c2:	69ba      	ldr	r2, [r7, #24]
 80317c4:	4013      	ands	r3, r2
 80317c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80317c8:	683b      	ldr	r3, [r7, #0]
 80317ca:	685b      	ldr	r3, [r3, #4]
 80317cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80317d0:	2b00      	cmp	r3, #0
 80317d2:	d003      	beq.n	80317dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80317d4:	69ba      	ldr	r2, [r7, #24]
 80317d6:	693b      	ldr	r3, [r7, #16]
 80317d8:	4313      	orrs	r3, r2
 80317da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80317dc:	697b      	ldr	r3, [r7, #20]
 80317de:	69ba      	ldr	r2, [r7, #24]
 80317e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80317e2:	697b      	ldr	r3, [r7, #20]
 80317e4:	681b      	ldr	r3, [r3, #0]
 80317e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80317e8:	693b      	ldr	r3, [r7, #16]
 80317ea:	43db      	mvns	r3, r3
 80317ec:	69ba      	ldr	r2, [r7, #24]
 80317ee:	4013      	ands	r3, r2
 80317f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80317f2:	683b      	ldr	r3, [r7, #0]
 80317f4:	685b      	ldr	r3, [r3, #4]
 80317f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80317fa:	2b00      	cmp	r3, #0
 80317fc:	d003      	beq.n	8031806 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80317fe:	69ba      	ldr	r2, [r7, #24]
 8031800:	693b      	ldr	r3, [r7, #16]
 8031802:	4313      	orrs	r3, r2
 8031804:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8031806:	697b      	ldr	r3, [r7, #20]
 8031808:	69ba      	ldr	r2, [r7, #24]
 803180a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 803180c:	69fb      	ldr	r3, [r7, #28]
 803180e:	3301      	adds	r3, #1
 8031810:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8031812:	683b      	ldr	r3, [r7, #0]
 8031814:	681a      	ldr	r2, [r3, #0]
 8031816:	69fb      	ldr	r3, [r7, #28]
 8031818:	fa22 f303 	lsr.w	r3, r2, r3
 803181c:	2b00      	cmp	r3, #0
 803181e:	f47f ae63 	bne.w	80314e8 <HAL_GPIO_Init+0x14>
  }
}
 8031822:	bf00      	nop
 8031824:	bf00      	nop
 8031826:	3724      	adds	r7, #36	; 0x24
 8031828:	46bd      	mov	sp, r7
 803182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803182e:	4770      	bx	lr
 8031830:	58000400 	.word	0x58000400

08031834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8031834:	b480      	push	{r7}
 8031836:	b083      	sub	sp, #12
 8031838:	af00      	add	r7, sp, #0
 803183a:	6078      	str	r0, [r7, #4]
 803183c:	460b      	mov	r3, r1
 803183e:	807b      	strh	r3, [r7, #2]
 8031840:	4613      	mov	r3, r2
 8031842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8031844:	787b      	ldrb	r3, [r7, #1]
 8031846:	2b00      	cmp	r3, #0
 8031848:	d003      	beq.n	8031852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 803184a:	887a      	ldrh	r2, [r7, #2]
 803184c:	687b      	ldr	r3, [r7, #4]
 803184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8031850:	e003      	b.n	803185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8031852:	887b      	ldrh	r3, [r7, #2]
 8031854:	041a      	lsls	r2, r3, #16
 8031856:	687b      	ldr	r3, [r7, #4]
 8031858:	619a      	str	r2, [r3, #24]
}
 803185a:	bf00      	nop
 803185c:	370c      	adds	r7, #12
 803185e:	46bd      	mov	sp, r7
 8031860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031864:	4770      	bx	lr
	...

08031868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8031868:	b580      	push	{r7, lr}
 803186a:	b082      	sub	sp, #8
 803186c:	af00      	add	r7, sp, #0
 803186e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8031870:	687b      	ldr	r3, [r7, #4]
 8031872:	2b00      	cmp	r3, #0
 8031874:	d101      	bne.n	803187a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8031876:	2301      	movs	r3, #1
 8031878:	e07f      	b.n	803197a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 803187a:	687b      	ldr	r3, [r7, #4]
 803187c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031880:	b2db      	uxtb	r3, r3
 8031882:	2b00      	cmp	r3, #0
 8031884:	d106      	bne.n	8031894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8031886:	687b      	ldr	r3, [r7, #4]
 8031888:	2200      	movs	r2, #0
 803188a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 803188e:	6878      	ldr	r0, [r7, #4]
 8031890:	f7fa ff9e 	bl	802c7d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8031894:	687b      	ldr	r3, [r7, #4]
 8031896:	2224      	movs	r2, #36	; 0x24
 8031898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 803189c:	687b      	ldr	r3, [r7, #4]
 803189e:	681b      	ldr	r3, [r3, #0]
 80318a0:	681a      	ldr	r2, [r3, #0]
 80318a2:	687b      	ldr	r3, [r7, #4]
 80318a4:	681b      	ldr	r3, [r3, #0]
 80318a6:	f022 0201 	bic.w	r2, r2, #1
 80318aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80318ac:	687b      	ldr	r3, [r7, #4]
 80318ae:	685a      	ldr	r2, [r3, #4]
 80318b0:	687b      	ldr	r3, [r7, #4]
 80318b2:	681b      	ldr	r3, [r3, #0]
 80318b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80318b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80318ba:	687b      	ldr	r3, [r7, #4]
 80318bc:	681b      	ldr	r3, [r3, #0]
 80318be:	689a      	ldr	r2, [r3, #8]
 80318c0:	687b      	ldr	r3, [r7, #4]
 80318c2:	681b      	ldr	r3, [r3, #0]
 80318c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80318c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80318ca:	687b      	ldr	r3, [r7, #4]
 80318cc:	68db      	ldr	r3, [r3, #12]
 80318ce:	2b01      	cmp	r3, #1
 80318d0:	d107      	bne.n	80318e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80318d2:	687b      	ldr	r3, [r7, #4]
 80318d4:	689a      	ldr	r2, [r3, #8]
 80318d6:	687b      	ldr	r3, [r7, #4]
 80318d8:	681b      	ldr	r3, [r3, #0]
 80318da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80318de:	609a      	str	r2, [r3, #8]
 80318e0:	e006      	b.n	80318f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80318e2:	687b      	ldr	r3, [r7, #4]
 80318e4:	689a      	ldr	r2, [r3, #8]
 80318e6:	687b      	ldr	r3, [r7, #4]
 80318e8:	681b      	ldr	r3, [r3, #0]
 80318ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80318ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80318f0:	687b      	ldr	r3, [r7, #4]
 80318f2:	68db      	ldr	r3, [r3, #12]
 80318f4:	2b02      	cmp	r3, #2
 80318f6:	d104      	bne.n	8031902 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80318f8:	687b      	ldr	r3, [r7, #4]
 80318fa:	681b      	ldr	r3, [r3, #0]
 80318fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8031900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8031902:	687b      	ldr	r3, [r7, #4]
 8031904:	681b      	ldr	r3, [r3, #0]
 8031906:	6859      	ldr	r1, [r3, #4]
 8031908:	687b      	ldr	r3, [r7, #4]
 803190a:	681a      	ldr	r2, [r3, #0]
 803190c:	4b1d      	ldr	r3, [pc, #116]	; (8031984 <HAL_I2C_Init+0x11c>)
 803190e:	430b      	orrs	r3, r1
 8031910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8031912:	687b      	ldr	r3, [r7, #4]
 8031914:	681b      	ldr	r3, [r3, #0]
 8031916:	68da      	ldr	r2, [r3, #12]
 8031918:	687b      	ldr	r3, [r7, #4]
 803191a:	681b      	ldr	r3, [r3, #0]
 803191c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8031920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8031922:	687b      	ldr	r3, [r7, #4]
 8031924:	691a      	ldr	r2, [r3, #16]
 8031926:	687b      	ldr	r3, [r7, #4]
 8031928:	695b      	ldr	r3, [r3, #20]
 803192a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 803192e:	687b      	ldr	r3, [r7, #4]
 8031930:	699b      	ldr	r3, [r3, #24]
 8031932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8031934:	687b      	ldr	r3, [r7, #4]
 8031936:	681b      	ldr	r3, [r3, #0]
 8031938:	430a      	orrs	r2, r1
 803193a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 803193c:	687b      	ldr	r3, [r7, #4]
 803193e:	69d9      	ldr	r1, [r3, #28]
 8031940:	687b      	ldr	r3, [r7, #4]
 8031942:	6a1a      	ldr	r2, [r3, #32]
 8031944:	687b      	ldr	r3, [r7, #4]
 8031946:	681b      	ldr	r3, [r3, #0]
 8031948:	430a      	orrs	r2, r1
 803194a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 803194c:	687b      	ldr	r3, [r7, #4]
 803194e:	681b      	ldr	r3, [r3, #0]
 8031950:	681a      	ldr	r2, [r3, #0]
 8031952:	687b      	ldr	r3, [r7, #4]
 8031954:	681b      	ldr	r3, [r3, #0]
 8031956:	f042 0201 	orr.w	r2, r2, #1
 803195a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 803195c:	687b      	ldr	r3, [r7, #4]
 803195e:	2200      	movs	r2, #0
 8031960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8031962:	687b      	ldr	r3, [r7, #4]
 8031964:	2220      	movs	r2, #32
 8031966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 803196a:	687b      	ldr	r3, [r7, #4]
 803196c:	2200      	movs	r2, #0
 803196e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8031970:	687b      	ldr	r3, [r7, #4]
 8031972:	2200      	movs	r2, #0
 8031974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8031978:	2300      	movs	r3, #0
}
 803197a:	4618      	mov	r0, r3
 803197c:	3708      	adds	r7, #8
 803197e:	46bd      	mov	sp, r7
 8031980:	bd80      	pop	{r7, pc}
 8031982:	bf00      	nop
 8031984:	02008000 	.word	0x02008000

08031988 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8031988:	b580      	push	{r7, lr}
 803198a:	b084      	sub	sp, #16
 803198c:	af00      	add	r7, sp, #0
 803198e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8031990:	687b      	ldr	r3, [r7, #4]
 8031992:	681b      	ldr	r3, [r3, #0]
 8031994:	699b      	ldr	r3, [r3, #24]
 8031996:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8031998:	687b      	ldr	r3, [r7, #4]
 803199a:	681b      	ldr	r3, [r3, #0]
 803199c:	681b      	ldr	r3, [r3, #0]
 803199e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80319a0:	687b      	ldr	r3, [r7, #4]
 80319a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319a4:	2b00      	cmp	r3, #0
 80319a6:	d005      	beq.n	80319b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80319a8:	687b      	ldr	r3, [r7, #4]
 80319aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80319ac:	68ba      	ldr	r2, [r7, #8]
 80319ae:	68f9      	ldr	r1, [r7, #12]
 80319b0:	6878      	ldr	r0, [r7, #4]
 80319b2:	4798      	blx	r3
  }
}
 80319b4:	bf00      	nop
 80319b6:	3710      	adds	r7, #16
 80319b8:	46bd      	mov	sp, r7
 80319ba:	bd80      	pop	{r7, pc}

080319bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80319bc:	b580      	push	{r7, lr}
 80319be:	b086      	sub	sp, #24
 80319c0:	af00      	add	r7, sp, #0
 80319c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80319c4:	687b      	ldr	r3, [r7, #4]
 80319c6:	681b      	ldr	r3, [r3, #0]
 80319c8:	699b      	ldr	r3, [r3, #24]
 80319ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80319cc:	687b      	ldr	r3, [r7, #4]
 80319ce:	681b      	ldr	r3, [r3, #0]
 80319d0:	681b      	ldr	r3, [r3, #0]
 80319d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80319d4:	697b      	ldr	r3, [r7, #20]
 80319d6:	0a1b      	lsrs	r3, r3, #8
 80319d8:	f003 0301 	and.w	r3, r3, #1
 80319dc:	2b00      	cmp	r3, #0
 80319de:	d010      	beq.n	8031a02 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80319e0:	693b      	ldr	r3, [r7, #16]
 80319e2:	09db      	lsrs	r3, r3, #7
 80319e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80319e8:	2b00      	cmp	r3, #0
 80319ea:	d00a      	beq.n	8031a02 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80319ec:	687b      	ldr	r3, [r7, #4]
 80319ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80319f0:	f043 0201 	orr.w	r2, r3, #1
 80319f4:	687b      	ldr	r3, [r7, #4]
 80319f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80319f8:	687b      	ldr	r3, [r7, #4]
 80319fa:	681b      	ldr	r3, [r3, #0]
 80319fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031a00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8031a02:	697b      	ldr	r3, [r7, #20]
 8031a04:	0a9b      	lsrs	r3, r3, #10
 8031a06:	f003 0301 	and.w	r3, r3, #1
 8031a0a:	2b00      	cmp	r3, #0
 8031a0c:	d010      	beq.n	8031a30 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8031a0e:	693b      	ldr	r3, [r7, #16]
 8031a10:	09db      	lsrs	r3, r3, #7
 8031a12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8031a16:	2b00      	cmp	r3, #0
 8031a18:	d00a      	beq.n	8031a30 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8031a1a:	687b      	ldr	r3, [r7, #4]
 8031a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031a1e:	f043 0208 	orr.w	r2, r3, #8
 8031a22:	687b      	ldr	r3, [r7, #4]
 8031a24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8031a26:	687b      	ldr	r3, [r7, #4]
 8031a28:	681b      	ldr	r3, [r3, #0]
 8031a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8031a2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8031a30:	697b      	ldr	r3, [r7, #20]
 8031a32:	0a5b      	lsrs	r3, r3, #9
 8031a34:	f003 0301 	and.w	r3, r3, #1
 8031a38:	2b00      	cmp	r3, #0
 8031a3a:	d010      	beq.n	8031a5e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8031a3c:	693b      	ldr	r3, [r7, #16]
 8031a3e:	09db      	lsrs	r3, r3, #7
 8031a40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8031a44:	2b00      	cmp	r3, #0
 8031a46:	d00a      	beq.n	8031a5e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8031a48:	687b      	ldr	r3, [r7, #4]
 8031a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031a4c:	f043 0202 	orr.w	r2, r3, #2
 8031a50:	687b      	ldr	r3, [r7, #4]
 8031a52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8031a54:	687b      	ldr	r3, [r7, #4]
 8031a56:	681b      	ldr	r3, [r3, #0]
 8031a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8031a5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8031a5e:	687b      	ldr	r3, [r7, #4]
 8031a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031a62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8031a64:	68fb      	ldr	r3, [r7, #12]
 8031a66:	f003 030b 	and.w	r3, r3, #11
 8031a6a:	2b00      	cmp	r3, #0
 8031a6c:	d003      	beq.n	8031a76 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8031a6e:	68f9      	ldr	r1, [r7, #12]
 8031a70:	6878      	ldr	r0, [r7, #4]
 8031a72:	f000 fc77 	bl	8032364 <I2C_ITError>
  }
}
 8031a76:	bf00      	nop
 8031a78:	3718      	adds	r7, #24
 8031a7a:	46bd      	mov	sp, r7
 8031a7c:	bd80      	pop	{r7, pc}

08031a7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031a7e:	b480      	push	{r7}
 8031a80:	b083      	sub	sp, #12
 8031a82:	af00      	add	r7, sp, #0
 8031a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8031a86:	bf00      	nop
 8031a88:	370c      	adds	r7, #12
 8031a8a:	46bd      	mov	sp, r7
 8031a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a90:	4770      	bx	lr

08031a92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031a92:	b480      	push	{r7}
 8031a94:	b083      	sub	sp, #12
 8031a96:	af00      	add	r7, sp, #0
 8031a98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8031a9a:	bf00      	nop
 8031a9c:	370c      	adds	r7, #12
 8031a9e:	46bd      	mov	sp, r7
 8031aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031aa4:	4770      	bx	lr

08031aa6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8031aa6:	b480      	push	{r7}
 8031aa8:	b083      	sub	sp, #12
 8031aaa:	af00      	add	r7, sp, #0
 8031aac:	6078      	str	r0, [r7, #4]
 8031aae:	460b      	mov	r3, r1
 8031ab0:	70fb      	strb	r3, [r7, #3]
 8031ab2:	4613      	mov	r3, r2
 8031ab4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8031ab6:	bf00      	nop
 8031ab8:	370c      	adds	r7, #12
 8031aba:	46bd      	mov	sp, r7
 8031abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ac0:	4770      	bx	lr

08031ac2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031ac2:	b480      	push	{r7}
 8031ac4:	b083      	sub	sp, #12
 8031ac6:	af00      	add	r7, sp, #0
 8031ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8031aca:	bf00      	nop
 8031acc:	370c      	adds	r7, #12
 8031ace:	46bd      	mov	sp, r7
 8031ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ad4:	4770      	bx	lr

08031ad6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8031ad6:	b480      	push	{r7}
 8031ad8:	b083      	sub	sp, #12
 8031ada:	af00      	add	r7, sp, #0
 8031adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8031ade:	bf00      	nop
 8031ae0:	370c      	adds	r7, #12
 8031ae2:	46bd      	mov	sp, r7
 8031ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ae8:	4770      	bx	lr

08031aea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031aea:	b480      	push	{r7}
 8031aec:	b083      	sub	sp, #12
 8031aee:	af00      	add	r7, sp, #0
 8031af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8031af2:	bf00      	nop
 8031af4:	370c      	adds	r7, #12
 8031af6:	46bd      	mov	sp, r7
 8031af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031afc:	4770      	bx	lr

08031afe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8031afe:	b580      	push	{r7, lr}
 8031b00:	b086      	sub	sp, #24
 8031b02:	af00      	add	r7, sp, #0
 8031b04:	60f8      	str	r0, [r7, #12]
 8031b06:	60b9      	str	r1, [r7, #8]
 8031b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8031b0a:	68fb      	ldr	r3, [r7, #12]
 8031b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8031b10:	68bb      	ldr	r3, [r7, #8]
 8031b12:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8031b14:	68fb      	ldr	r3, [r7, #12]
 8031b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8031b1a:	2b01      	cmp	r3, #1
 8031b1c:	d101      	bne.n	8031b22 <I2C_Slave_ISR_IT+0x24>
 8031b1e:	2302      	movs	r3, #2
 8031b20:	e0ec      	b.n	8031cfc <I2C_Slave_ISR_IT+0x1fe>
 8031b22:	68fb      	ldr	r3, [r7, #12]
 8031b24:	2201      	movs	r2, #1
 8031b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8031b2a:	693b      	ldr	r3, [r7, #16]
 8031b2c:	095b      	lsrs	r3, r3, #5
 8031b2e:	f003 0301 	and.w	r3, r3, #1
 8031b32:	2b00      	cmp	r3, #0
 8031b34:	d009      	beq.n	8031b4a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8031b36:	687b      	ldr	r3, [r7, #4]
 8031b38:	095b      	lsrs	r3, r3, #5
 8031b3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8031b3e:	2b00      	cmp	r3, #0
 8031b40:	d003      	beq.n	8031b4a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8031b42:	6939      	ldr	r1, [r7, #16]
 8031b44:	68f8      	ldr	r0, [r7, #12]
 8031b46:	f000 f9bf 	bl	8031ec8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8031b4a:	693b      	ldr	r3, [r7, #16]
 8031b4c:	091b      	lsrs	r3, r3, #4
 8031b4e:	f003 0301 	and.w	r3, r3, #1
 8031b52:	2b00      	cmp	r3, #0
 8031b54:	d04d      	beq.n	8031bf2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8031b56:	687b      	ldr	r3, [r7, #4]
 8031b58:	091b      	lsrs	r3, r3, #4
 8031b5a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8031b5e:	2b00      	cmp	r3, #0
 8031b60:	d047      	beq.n	8031bf2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8031b62:	68fb      	ldr	r3, [r7, #12]
 8031b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031b66:	b29b      	uxth	r3, r3
 8031b68:	2b00      	cmp	r3, #0
 8031b6a:	d128      	bne.n	8031bbe <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8031b6c:	68fb      	ldr	r3, [r7, #12]
 8031b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031b72:	b2db      	uxtb	r3, r3
 8031b74:	2b28      	cmp	r3, #40	; 0x28
 8031b76:	d108      	bne.n	8031b8a <I2C_Slave_ISR_IT+0x8c>
 8031b78:	697b      	ldr	r3, [r7, #20]
 8031b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031b7e:	d104      	bne.n	8031b8a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8031b80:	6939      	ldr	r1, [r7, #16]
 8031b82:	68f8      	ldr	r0, [r7, #12]
 8031b84:	f000 fb98 	bl	80322b8 <I2C_ITListenCplt>
 8031b88:	e032      	b.n	8031bf0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8031b8a:	68fb      	ldr	r3, [r7, #12]
 8031b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031b90:	b2db      	uxtb	r3, r3
 8031b92:	2b29      	cmp	r3, #41	; 0x29
 8031b94:	d10e      	bne.n	8031bb4 <I2C_Slave_ISR_IT+0xb6>
 8031b96:	697b      	ldr	r3, [r7, #20]
 8031b98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031b9c:	d00a      	beq.n	8031bb4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8031b9e:	68fb      	ldr	r3, [r7, #12]
 8031ba0:	681b      	ldr	r3, [r3, #0]
 8031ba2:	2210      	movs	r2, #16
 8031ba4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8031ba6:	68f8      	ldr	r0, [r7, #12]
 8031ba8:	f000 fcd3 	bl	8032552 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8031bac:	68f8      	ldr	r0, [r7, #12]
 8031bae:	f000 f92d 	bl	8031e0c <I2C_ITSlaveSeqCplt>
 8031bb2:	e01d      	b.n	8031bf0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8031bb4:	68fb      	ldr	r3, [r7, #12]
 8031bb6:	681b      	ldr	r3, [r3, #0]
 8031bb8:	2210      	movs	r2, #16
 8031bba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8031bbc:	e096      	b.n	8031cec <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8031bbe:	68fb      	ldr	r3, [r7, #12]
 8031bc0:	681b      	ldr	r3, [r3, #0]
 8031bc2:	2210      	movs	r2, #16
 8031bc4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8031bc6:	68fb      	ldr	r3, [r7, #12]
 8031bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031bca:	f043 0204 	orr.w	r2, r3, #4
 8031bce:	68fb      	ldr	r3, [r7, #12]
 8031bd0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8031bd2:	697b      	ldr	r3, [r7, #20]
 8031bd4:	2b00      	cmp	r3, #0
 8031bd6:	d004      	beq.n	8031be2 <I2C_Slave_ISR_IT+0xe4>
 8031bd8:	697b      	ldr	r3, [r7, #20]
 8031bda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8031bde:	f040 8085 	bne.w	8031cec <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8031be2:	68fb      	ldr	r3, [r7, #12]
 8031be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031be6:	4619      	mov	r1, r3
 8031be8:	68f8      	ldr	r0, [r7, #12]
 8031bea:	f000 fbbb 	bl	8032364 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8031bee:	e07d      	b.n	8031cec <I2C_Slave_ISR_IT+0x1ee>
 8031bf0:	e07c      	b.n	8031cec <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8031bf2:	693b      	ldr	r3, [r7, #16]
 8031bf4:	089b      	lsrs	r3, r3, #2
 8031bf6:	f003 0301 	and.w	r3, r3, #1
 8031bfa:	2b00      	cmp	r3, #0
 8031bfc:	d030      	beq.n	8031c60 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8031bfe:	687b      	ldr	r3, [r7, #4]
 8031c00:	089b      	lsrs	r3, r3, #2
 8031c02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8031c06:	2b00      	cmp	r3, #0
 8031c08:	d02a      	beq.n	8031c60 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8031c0a:	68fb      	ldr	r3, [r7, #12]
 8031c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031c0e:	b29b      	uxth	r3, r3
 8031c10:	2b00      	cmp	r3, #0
 8031c12:	d018      	beq.n	8031c46 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8031c14:	68fb      	ldr	r3, [r7, #12]
 8031c16:	681b      	ldr	r3, [r3, #0]
 8031c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8031c1a:	68fb      	ldr	r3, [r7, #12]
 8031c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031c1e:	b2d2      	uxtb	r2, r2
 8031c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8031c22:	68fb      	ldr	r3, [r7, #12]
 8031c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031c26:	1c5a      	adds	r2, r3, #1
 8031c28:	68fb      	ldr	r3, [r7, #12]
 8031c2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8031c2c:	68fb      	ldr	r3, [r7, #12]
 8031c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8031c30:	3b01      	subs	r3, #1
 8031c32:	b29a      	uxth	r2, r3
 8031c34:	68fb      	ldr	r3, [r7, #12]
 8031c36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8031c38:	68fb      	ldr	r3, [r7, #12]
 8031c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031c3c:	b29b      	uxth	r3, r3
 8031c3e:	3b01      	subs	r3, #1
 8031c40:	b29a      	uxth	r2, r3
 8031c42:	68fb      	ldr	r3, [r7, #12]
 8031c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8031c46:	68fb      	ldr	r3, [r7, #12]
 8031c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031c4a:	b29b      	uxth	r3, r3
 8031c4c:	2b00      	cmp	r3, #0
 8031c4e:	d14f      	bne.n	8031cf0 <I2C_Slave_ISR_IT+0x1f2>
 8031c50:	697b      	ldr	r3, [r7, #20]
 8031c52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8031c56:	d04b      	beq.n	8031cf0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8031c58:	68f8      	ldr	r0, [r7, #12]
 8031c5a:	f000 f8d7 	bl	8031e0c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8031c5e:	e047      	b.n	8031cf0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8031c60:	693b      	ldr	r3, [r7, #16]
 8031c62:	08db      	lsrs	r3, r3, #3
 8031c64:	f003 0301 	and.w	r3, r3, #1
 8031c68:	2b00      	cmp	r3, #0
 8031c6a:	d00a      	beq.n	8031c82 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8031c6c:	687b      	ldr	r3, [r7, #4]
 8031c6e:	08db      	lsrs	r3, r3, #3
 8031c70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8031c74:	2b00      	cmp	r3, #0
 8031c76:	d004      	beq.n	8031c82 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8031c78:	6939      	ldr	r1, [r7, #16]
 8031c7a:	68f8      	ldr	r0, [r7, #12]
 8031c7c:	f000 f842 	bl	8031d04 <I2C_ITAddrCplt>
 8031c80:	e037      	b.n	8031cf2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8031c82:	693b      	ldr	r3, [r7, #16]
 8031c84:	085b      	lsrs	r3, r3, #1
 8031c86:	f003 0301 	and.w	r3, r3, #1
 8031c8a:	2b00      	cmp	r3, #0
 8031c8c:	d031      	beq.n	8031cf2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8031c8e:	687b      	ldr	r3, [r7, #4]
 8031c90:	085b      	lsrs	r3, r3, #1
 8031c92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8031c96:	2b00      	cmp	r3, #0
 8031c98:	d02b      	beq.n	8031cf2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8031c9a:	68fb      	ldr	r3, [r7, #12]
 8031c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031c9e:	b29b      	uxth	r3, r3
 8031ca0:	2b00      	cmp	r3, #0
 8031ca2:	d018      	beq.n	8031cd6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8031ca4:	68fb      	ldr	r3, [r7, #12]
 8031ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031ca8:	781a      	ldrb	r2, [r3, #0]
 8031caa:	68fb      	ldr	r3, [r7, #12]
 8031cac:	681b      	ldr	r3, [r3, #0]
 8031cae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8031cb0:	68fb      	ldr	r3, [r7, #12]
 8031cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031cb4:	1c5a      	adds	r2, r3, #1
 8031cb6:	68fb      	ldr	r3, [r7, #12]
 8031cb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8031cba:	68fb      	ldr	r3, [r7, #12]
 8031cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8031cbe:	b29b      	uxth	r3, r3
 8031cc0:	3b01      	subs	r3, #1
 8031cc2:	b29a      	uxth	r2, r3
 8031cc4:	68fb      	ldr	r3, [r7, #12]
 8031cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8031cc8:	68fb      	ldr	r3, [r7, #12]
 8031cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8031ccc:	3b01      	subs	r3, #1
 8031cce:	b29a      	uxth	r2, r3
 8031cd0:	68fb      	ldr	r3, [r7, #12]
 8031cd2:	851a      	strh	r2, [r3, #40]	; 0x28
 8031cd4:	e00d      	b.n	8031cf2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8031cd6:	697b      	ldr	r3, [r7, #20]
 8031cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8031cdc:	d002      	beq.n	8031ce4 <I2C_Slave_ISR_IT+0x1e6>
 8031cde:	697b      	ldr	r3, [r7, #20]
 8031ce0:	2b00      	cmp	r3, #0
 8031ce2:	d106      	bne.n	8031cf2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8031ce4:	68f8      	ldr	r0, [r7, #12]
 8031ce6:	f000 f891 	bl	8031e0c <I2C_ITSlaveSeqCplt>
 8031cea:	e002      	b.n	8031cf2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8031cec:	bf00      	nop
 8031cee:	e000      	b.n	8031cf2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8031cf0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8031cf2:	68fb      	ldr	r3, [r7, #12]
 8031cf4:	2200      	movs	r2, #0
 8031cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8031cfa:	2300      	movs	r3, #0
}
 8031cfc:	4618      	mov	r0, r3
 8031cfe:	3718      	adds	r7, #24
 8031d00:	46bd      	mov	sp, r7
 8031d02:	bd80      	pop	{r7, pc}

08031d04 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8031d04:	b580      	push	{r7, lr}
 8031d06:	b084      	sub	sp, #16
 8031d08:	af00      	add	r7, sp, #0
 8031d0a:	6078      	str	r0, [r7, #4]
 8031d0c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8031d0e:	687b      	ldr	r3, [r7, #4]
 8031d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031d14:	b2db      	uxtb	r3, r3
 8031d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8031d1a:	2b28      	cmp	r3, #40	; 0x28
 8031d1c:	d16a      	bne.n	8031df4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8031d1e:	687b      	ldr	r3, [r7, #4]
 8031d20:	681b      	ldr	r3, [r3, #0]
 8031d22:	699b      	ldr	r3, [r3, #24]
 8031d24:	0c1b      	lsrs	r3, r3, #16
 8031d26:	b2db      	uxtb	r3, r3
 8031d28:	f003 0301 	and.w	r3, r3, #1
 8031d2c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8031d2e:	687b      	ldr	r3, [r7, #4]
 8031d30:	681b      	ldr	r3, [r3, #0]
 8031d32:	699b      	ldr	r3, [r3, #24]
 8031d34:	0c1b      	lsrs	r3, r3, #16
 8031d36:	b29b      	uxth	r3, r3
 8031d38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8031d3c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8031d3e:	687b      	ldr	r3, [r7, #4]
 8031d40:	681b      	ldr	r3, [r3, #0]
 8031d42:	689b      	ldr	r3, [r3, #8]
 8031d44:	b29b      	uxth	r3, r3
 8031d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8031d4a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8031d4c:	687b      	ldr	r3, [r7, #4]
 8031d4e:	681b      	ldr	r3, [r3, #0]
 8031d50:	68db      	ldr	r3, [r3, #12]
 8031d52:	b29b      	uxth	r3, r3
 8031d54:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8031d58:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8031d5a:	687b      	ldr	r3, [r7, #4]
 8031d5c:	68db      	ldr	r3, [r3, #12]
 8031d5e:	2b02      	cmp	r3, #2
 8031d60:	d138      	bne.n	8031dd4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8031d62:	897b      	ldrh	r3, [r7, #10]
 8031d64:	09db      	lsrs	r3, r3, #7
 8031d66:	b29a      	uxth	r2, r3
 8031d68:	89bb      	ldrh	r3, [r7, #12]
 8031d6a:	4053      	eors	r3, r2
 8031d6c:	b29b      	uxth	r3, r3
 8031d6e:	f003 0306 	and.w	r3, r3, #6
 8031d72:	2b00      	cmp	r3, #0
 8031d74:	d11c      	bne.n	8031db0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8031d76:	897b      	ldrh	r3, [r7, #10]
 8031d78:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8031d7a:	687b      	ldr	r3, [r7, #4]
 8031d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031d7e:	1c5a      	adds	r2, r3, #1
 8031d80:	687b      	ldr	r3, [r7, #4]
 8031d82:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8031d84:	687b      	ldr	r3, [r7, #4]
 8031d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031d88:	2b02      	cmp	r3, #2
 8031d8a:	d13b      	bne.n	8031e04 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8031d8c:	687b      	ldr	r3, [r7, #4]
 8031d8e:	2200      	movs	r2, #0
 8031d90:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8031d92:	687b      	ldr	r3, [r7, #4]
 8031d94:	681b      	ldr	r3, [r3, #0]
 8031d96:	2208      	movs	r2, #8
 8031d98:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8031d9a:	687b      	ldr	r3, [r7, #4]
 8031d9c:	2200      	movs	r2, #0
 8031d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8031da2:	89ba      	ldrh	r2, [r7, #12]
 8031da4:	7bfb      	ldrb	r3, [r7, #15]
 8031da6:	4619      	mov	r1, r3
 8031da8:	6878      	ldr	r0, [r7, #4]
 8031daa:	f7ff fe7c 	bl	8031aa6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8031dae:	e029      	b.n	8031e04 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8031db0:	893b      	ldrh	r3, [r7, #8]
 8031db2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8031db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8031db8:	6878      	ldr	r0, [r7, #4]
 8031dba:	f000 fc0c 	bl	80325d6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8031dbe:	687b      	ldr	r3, [r7, #4]
 8031dc0:	2200      	movs	r2, #0
 8031dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8031dc6:	89ba      	ldrh	r2, [r7, #12]
 8031dc8:	7bfb      	ldrb	r3, [r7, #15]
 8031dca:	4619      	mov	r1, r3
 8031dcc:	6878      	ldr	r0, [r7, #4]
 8031dce:	f7ff fe6a 	bl	8031aa6 <HAL_I2C_AddrCallback>
}
 8031dd2:	e017      	b.n	8031e04 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8031dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8031dd8:	6878      	ldr	r0, [r7, #4]
 8031dda:	f000 fbfc 	bl	80325d6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8031dde:	687b      	ldr	r3, [r7, #4]
 8031de0:	2200      	movs	r2, #0
 8031de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8031de6:	89ba      	ldrh	r2, [r7, #12]
 8031de8:	7bfb      	ldrb	r3, [r7, #15]
 8031dea:	4619      	mov	r1, r3
 8031dec:	6878      	ldr	r0, [r7, #4]
 8031dee:	f7ff fe5a 	bl	8031aa6 <HAL_I2C_AddrCallback>
}
 8031df2:	e007      	b.n	8031e04 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8031df4:	687b      	ldr	r3, [r7, #4]
 8031df6:	681b      	ldr	r3, [r3, #0]
 8031df8:	2208      	movs	r2, #8
 8031dfa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8031dfc:	687b      	ldr	r3, [r7, #4]
 8031dfe:	2200      	movs	r2, #0
 8031e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8031e04:	bf00      	nop
 8031e06:	3710      	adds	r7, #16
 8031e08:	46bd      	mov	sp, r7
 8031e0a:	bd80      	pop	{r7, pc}

08031e0c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8031e0c:	b580      	push	{r7, lr}
 8031e0e:	b084      	sub	sp, #16
 8031e10:	af00      	add	r7, sp, #0
 8031e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8031e14:	687b      	ldr	r3, [r7, #4]
 8031e16:	681b      	ldr	r3, [r3, #0]
 8031e18:	681b      	ldr	r3, [r3, #0]
 8031e1a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8031e1c:	687b      	ldr	r3, [r7, #4]
 8031e1e:	2200      	movs	r2, #0
 8031e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8031e24:	68fb      	ldr	r3, [r7, #12]
 8031e26:	0b9b      	lsrs	r3, r3, #14
 8031e28:	f003 0301 	and.w	r3, r3, #1
 8031e2c:	2b00      	cmp	r3, #0
 8031e2e:	d008      	beq.n	8031e42 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8031e30:	687b      	ldr	r3, [r7, #4]
 8031e32:	681b      	ldr	r3, [r3, #0]
 8031e34:	681a      	ldr	r2, [r3, #0]
 8031e36:	687b      	ldr	r3, [r7, #4]
 8031e38:	681b      	ldr	r3, [r3, #0]
 8031e3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8031e3e:	601a      	str	r2, [r3, #0]
 8031e40:	e00d      	b.n	8031e5e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8031e42:	68fb      	ldr	r3, [r7, #12]
 8031e44:	0bdb      	lsrs	r3, r3, #15
 8031e46:	f003 0301 	and.w	r3, r3, #1
 8031e4a:	2b00      	cmp	r3, #0
 8031e4c:	d007      	beq.n	8031e5e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8031e4e:	687b      	ldr	r3, [r7, #4]
 8031e50:	681b      	ldr	r3, [r3, #0]
 8031e52:	681a      	ldr	r2, [r3, #0]
 8031e54:	687b      	ldr	r3, [r7, #4]
 8031e56:	681b      	ldr	r3, [r3, #0]
 8031e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8031e5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8031e5e:	687b      	ldr	r3, [r7, #4]
 8031e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031e64:	b2db      	uxtb	r3, r3
 8031e66:	2b29      	cmp	r3, #41	; 0x29
 8031e68:	d112      	bne.n	8031e90 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8031e6a:	687b      	ldr	r3, [r7, #4]
 8031e6c:	2228      	movs	r2, #40	; 0x28
 8031e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8031e72:	687b      	ldr	r3, [r7, #4]
 8031e74:	2221      	movs	r2, #33	; 0x21
 8031e76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8031e78:	2101      	movs	r1, #1
 8031e7a:	6878      	ldr	r0, [r7, #4]
 8031e7c:	f000 fbab 	bl	80325d6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8031e80:	687b      	ldr	r3, [r7, #4]
 8031e82:	2200      	movs	r2, #0
 8031e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8031e88:	6878      	ldr	r0, [r7, #4]
 8031e8a:	f7ff fdf8 	bl	8031a7e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8031e8e:	e017      	b.n	8031ec0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8031e90:	687b      	ldr	r3, [r7, #4]
 8031e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031e96:	b2db      	uxtb	r3, r3
 8031e98:	2b2a      	cmp	r3, #42	; 0x2a
 8031e9a:	d111      	bne.n	8031ec0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8031e9c:	687b      	ldr	r3, [r7, #4]
 8031e9e:	2228      	movs	r2, #40	; 0x28
 8031ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8031ea4:	687b      	ldr	r3, [r7, #4]
 8031ea6:	2222      	movs	r2, #34	; 0x22
 8031ea8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8031eaa:	2102      	movs	r1, #2
 8031eac:	6878      	ldr	r0, [r7, #4]
 8031eae:	f000 fb92 	bl	80325d6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8031eb2:	687b      	ldr	r3, [r7, #4]
 8031eb4:	2200      	movs	r2, #0
 8031eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8031eba:	6878      	ldr	r0, [r7, #4]
 8031ebc:	f7ff fde9 	bl	8031a92 <HAL_I2C_SlaveRxCpltCallback>
}
 8031ec0:	bf00      	nop
 8031ec2:	3710      	adds	r7, #16
 8031ec4:	46bd      	mov	sp, r7
 8031ec6:	bd80      	pop	{r7, pc}

08031ec8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8031ec8:	b580      	push	{r7, lr}
 8031eca:	b086      	sub	sp, #24
 8031ecc:	af00      	add	r7, sp, #0
 8031ece:	6078      	str	r0, [r7, #4]
 8031ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8031ed2:	687b      	ldr	r3, [r7, #4]
 8031ed4:	681b      	ldr	r3, [r3, #0]
 8031ed6:	681b      	ldr	r3, [r3, #0]
 8031ed8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8031eda:	683b      	ldr	r3, [r7, #0]
 8031edc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8031ede:	687b      	ldr	r3, [r7, #4]
 8031ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031ee4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8031ee6:	687b      	ldr	r3, [r7, #4]
 8031ee8:	681b      	ldr	r3, [r3, #0]
 8031eea:	2220      	movs	r2, #32
 8031eec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8031eee:	7bfb      	ldrb	r3, [r7, #15]
 8031ef0:	2b21      	cmp	r3, #33	; 0x21
 8031ef2:	d002      	beq.n	8031efa <I2C_ITSlaveCplt+0x32>
 8031ef4:	7bfb      	ldrb	r3, [r7, #15]
 8031ef6:	2b29      	cmp	r3, #41	; 0x29
 8031ef8:	d108      	bne.n	8031f0c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8031efa:	f248 0101 	movw	r1, #32769	; 0x8001
 8031efe:	6878      	ldr	r0, [r7, #4]
 8031f00:	f000 fb69 	bl	80325d6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8031f04:	687b      	ldr	r3, [r7, #4]
 8031f06:	2221      	movs	r2, #33	; 0x21
 8031f08:	631a      	str	r2, [r3, #48]	; 0x30
 8031f0a:	e00d      	b.n	8031f28 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8031f0c:	7bfb      	ldrb	r3, [r7, #15]
 8031f0e:	2b22      	cmp	r3, #34	; 0x22
 8031f10:	d002      	beq.n	8031f18 <I2C_ITSlaveCplt+0x50>
 8031f12:	7bfb      	ldrb	r3, [r7, #15]
 8031f14:	2b2a      	cmp	r3, #42	; 0x2a
 8031f16:	d107      	bne.n	8031f28 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8031f18:	f248 0102 	movw	r1, #32770	; 0x8002
 8031f1c:	6878      	ldr	r0, [r7, #4]
 8031f1e:	f000 fb5a 	bl	80325d6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8031f22:	687b      	ldr	r3, [r7, #4]
 8031f24:	2222      	movs	r2, #34	; 0x22
 8031f26:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8031f28:	687b      	ldr	r3, [r7, #4]
 8031f2a:	681b      	ldr	r3, [r3, #0]
 8031f2c:	685a      	ldr	r2, [r3, #4]
 8031f2e:	687b      	ldr	r3, [r7, #4]
 8031f30:	681b      	ldr	r3, [r3, #0]
 8031f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8031f36:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8031f38:	687b      	ldr	r3, [r7, #4]
 8031f3a:	681b      	ldr	r3, [r3, #0]
 8031f3c:	6859      	ldr	r1, [r3, #4]
 8031f3e:	687b      	ldr	r3, [r7, #4]
 8031f40:	681a      	ldr	r2, [r3, #0]
 8031f42:	4b80      	ldr	r3, [pc, #512]	; (8032144 <I2C_ITSlaveCplt+0x27c>)
 8031f44:	400b      	ands	r3, r1
 8031f46:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8031f48:	6878      	ldr	r0, [r7, #4]
 8031f4a:	f000 fb02 	bl	8032552 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8031f4e:	693b      	ldr	r3, [r7, #16]
 8031f50:	0b9b      	lsrs	r3, r3, #14
 8031f52:	f003 0301 	and.w	r3, r3, #1
 8031f56:	2b00      	cmp	r3, #0
 8031f58:	d07a      	beq.n	8032050 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8031f5a:	687b      	ldr	r3, [r7, #4]
 8031f5c:	681b      	ldr	r3, [r3, #0]
 8031f5e:	681a      	ldr	r2, [r3, #0]
 8031f60:	687b      	ldr	r3, [r7, #4]
 8031f62:	681b      	ldr	r3, [r3, #0]
 8031f64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8031f68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8031f6a:	687b      	ldr	r3, [r7, #4]
 8031f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031f6e:	2b00      	cmp	r3, #0
 8031f70:	f000 8111 	beq.w	8032196 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8031f74:	687b      	ldr	r3, [r7, #4]
 8031f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031f78:	681b      	ldr	r3, [r3, #0]
 8031f7a:	4a73      	ldr	r2, [pc, #460]	; (8032148 <I2C_ITSlaveCplt+0x280>)
 8031f7c:	4293      	cmp	r3, r2
 8031f7e:	d059      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031f80:	687b      	ldr	r3, [r7, #4]
 8031f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031f84:	681b      	ldr	r3, [r3, #0]
 8031f86:	4a71      	ldr	r2, [pc, #452]	; (803214c <I2C_ITSlaveCplt+0x284>)
 8031f88:	4293      	cmp	r3, r2
 8031f8a:	d053      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031f8c:	687b      	ldr	r3, [r7, #4]
 8031f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031f90:	681b      	ldr	r3, [r3, #0]
 8031f92:	4a6f      	ldr	r2, [pc, #444]	; (8032150 <I2C_ITSlaveCplt+0x288>)
 8031f94:	4293      	cmp	r3, r2
 8031f96:	d04d      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031f98:	687b      	ldr	r3, [r7, #4]
 8031f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031f9c:	681b      	ldr	r3, [r3, #0]
 8031f9e:	4a6d      	ldr	r2, [pc, #436]	; (8032154 <I2C_ITSlaveCplt+0x28c>)
 8031fa0:	4293      	cmp	r3, r2
 8031fa2:	d047      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031fa4:	687b      	ldr	r3, [r7, #4]
 8031fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fa8:	681b      	ldr	r3, [r3, #0]
 8031faa:	4a6b      	ldr	r2, [pc, #428]	; (8032158 <I2C_ITSlaveCplt+0x290>)
 8031fac:	4293      	cmp	r3, r2
 8031fae:	d041      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031fb0:	687b      	ldr	r3, [r7, #4]
 8031fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fb4:	681b      	ldr	r3, [r3, #0]
 8031fb6:	4a69      	ldr	r2, [pc, #420]	; (803215c <I2C_ITSlaveCplt+0x294>)
 8031fb8:	4293      	cmp	r3, r2
 8031fba:	d03b      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031fbc:	687b      	ldr	r3, [r7, #4]
 8031fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fc0:	681b      	ldr	r3, [r3, #0]
 8031fc2:	4a67      	ldr	r2, [pc, #412]	; (8032160 <I2C_ITSlaveCplt+0x298>)
 8031fc4:	4293      	cmp	r3, r2
 8031fc6:	d035      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031fc8:	687b      	ldr	r3, [r7, #4]
 8031fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fcc:	681b      	ldr	r3, [r3, #0]
 8031fce:	4a65      	ldr	r2, [pc, #404]	; (8032164 <I2C_ITSlaveCplt+0x29c>)
 8031fd0:	4293      	cmp	r3, r2
 8031fd2:	d02f      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031fd4:	687b      	ldr	r3, [r7, #4]
 8031fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fd8:	681b      	ldr	r3, [r3, #0]
 8031fda:	4a63      	ldr	r2, [pc, #396]	; (8032168 <I2C_ITSlaveCplt+0x2a0>)
 8031fdc:	4293      	cmp	r3, r2
 8031fde:	d029      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031fe0:	687b      	ldr	r3, [r7, #4]
 8031fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031fe4:	681b      	ldr	r3, [r3, #0]
 8031fe6:	4a61      	ldr	r2, [pc, #388]	; (803216c <I2C_ITSlaveCplt+0x2a4>)
 8031fe8:	4293      	cmp	r3, r2
 8031fea:	d023      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031fec:	687b      	ldr	r3, [r7, #4]
 8031fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031ff0:	681b      	ldr	r3, [r3, #0]
 8031ff2:	4a5f      	ldr	r2, [pc, #380]	; (8032170 <I2C_ITSlaveCplt+0x2a8>)
 8031ff4:	4293      	cmp	r3, r2
 8031ff6:	d01d      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8031ff8:	687b      	ldr	r3, [r7, #4]
 8031ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031ffc:	681b      	ldr	r3, [r3, #0]
 8031ffe:	4a5d      	ldr	r2, [pc, #372]	; (8032174 <I2C_ITSlaveCplt+0x2ac>)
 8032000:	4293      	cmp	r3, r2
 8032002:	d017      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8032004:	687b      	ldr	r3, [r7, #4]
 8032006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032008:	681b      	ldr	r3, [r3, #0]
 803200a:	4a5b      	ldr	r2, [pc, #364]	; (8032178 <I2C_ITSlaveCplt+0x2b0>)
 803200c:	4293      	cmp	r3, r2
 803200e:	d011      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8032010:	687b      	ldr	r3, [r7, #4]
 8032012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032014:	681b      	ldr	r3, [r3, #0]
 8032016:	4a59      	ldr	r2, [pc, #356]	; (803217c <I2C_ITSlaveCplt+0x2b4>)
 8032018:	4293      	cmp	r3, r2
 803201a:	d00b      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 803201c:	687b      	ldr	r3, [r7, #4]
 803201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032020:	681b      	ldr	r3, [r3, #0]
 8032022:	4a57      	ldr	r2, [pc, #348]	; (8032180 <I2C_ITSlaveCplt+0x2b8>)
 8032024:	4293      	cmp	r3, r2
 8032026:	d005      	beq.n	8032034 <I2C_ITSlaveCplt+0x16c>
 8032028:	687b      	ldr	r3, [r7, #4]
 803202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803202c:	681b      	ldr	r3, [r3, #0]
 803202e:	4a55      	ldr	r2, [pc, #340]	; (8032184 <I2C_ITSlaveCplt+0x2bc>)
 8032030:	4293      	cmp	r3, r2
 8032032:	d105      	bne.n	8032040 <I2C_ITSlaveCplt+0x178>
 8032034:	687b      	ldr	r3, [r7, #4]
 8032036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032038:	681b      	ldr	r3, [r3, #0]
 803203a:	685b      	ldr	r3, [r3, #4]
 803203c:	b29b      	uxth	r3, r3
 803203e:	e004      	b.n	803204a <I2C_ITSlaveCplt+0x182>
 8032040:	687b      	ldr	r3, [r7, #4]
 8032042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032044:	681b      	ldr	r3, [r3, #0]
 8032046:	685b      	ldr	r3, [r3, #4]
 8032048:	b29b      	uxth	r3, r3
 803204a:	687a      	ldr	r2, [r7, #4]
 803204c:	8553      	strh	r3, [r2, #42]	; 0x2a
 803204e:	e0a2      	b.n	8032196 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8032050:	693b      	ldr	r3, [r7, #16]
 8032052:	0bdb      	lsrs	r3, r3, #15
 8032054:	f003 0301 	and.w	r3, r3, #1
 8032058:	2b00      	cmp	r3, #0
 803205a:	f000 809c 	beq.w	8032196 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803205e:	687b      	ldr	r3, [r7, #4]
 8032060:	681b      	ldr	r3, [r3, #0]
 8032062:	681a      	ldr	r2, [r3, #0]
 8032064:	687b      	ldr	r3, [r7, #4]
 8032066:	681b      	ldr	r3, [r3, #0]
 8032068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803206c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 803206e:	687b      	ldr	r3, [r7, #4]
 8032070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032072:	2b00      	cmp	r3, #0
 8032074:	f000 808f 	beq.w	8032196 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8032078:	687b      	ldr	r3, [r7, #4]
 803207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803207c:	681b      	ldr	r3, [r3, #0]
 803207e:	4a32      	ldr	r2, [pc, #200]	; (8032148 <I2C_ITSlaveCplt+0x280>)
 8032080:	4293      	cmp	r3, r2
 8032082:	d059      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 8032084:	687b      	ldr	r3, [r7, #4]
 8032086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032088:	681b      	ldr	r3, [r3, #0]
 803208a:	4a30      	ldr	r2, [pc, #192]	; (803214c <I2C_ITSlaveCplt+0x284>)
 803208c:	4293      	cmp	r3, r2
 803208e:	d053      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 8032090:	687b      	ldr	r3, [r7, #4]
 8032092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032094:	681b      	ldr	r3, [r3, #0]
 8032096:	4a2e      	ldr	r2, [pc, #184]	; (8032150 <I2C_ITSlaveCplt+0x288>)
 8032098:	4293      	cmp	r3, r2
 803209a:	d04d      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 803209c:	687b      	ldr	r3, [r7, #4]
 803209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320a0:	681b      	ldr	r3, [r3, #0]
 80320a2:	4a2c      	ldr	r2, [pc, #176]	; (8032154 <I2C_ITSlaveCplt+0x28c>)
 80320a4:	4293      	cmp	r3, r2
 80320a6:	d047      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320a8:	687b      	ldr	r3, [r7, #4]
 80320aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320ac:	681b      	ldr	r3, [r3, #0]
 80320ae:	4a2a      	ldr	r2, [pc, #168]	; (8032158 <I2C_ITSlaveCplt+0x290>)
 80320b0:	4293      	cmp	r3, r2
 80320b2:	d041      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320b4:	687b      	ldr	r3, [r7, #4]
 80320b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320b8:	681b      	ldr	r3, [r3, #0]
 80320ba:	4a28      	ldr	r2, [pc, #160]	; (803215c <I2C_ITSlaveCplt+0x294>)
 80320bc:	4293      	cmp	r3, r2
 80320be:	d03b      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320c0:	687b      	ldr	r3, [r7, #4]
 80320c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320c4:	681b      	ldr	r3, [r3, #0]
 80320c6:	4a26      	ldr	r2, [pc, #152]	; (8032160 <I2C_ITSlaveCplt+0x298>)
 80320c8:	4293      	cmp	r3, r2
 80320ca:	d035      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320cc:	687b      	ldr	r3, [r7, #4]
 80320ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320d0:	681b      	ldr	r3, [r3, #0]
 80320d2:	4a24      	ldr	r2, [pc, #144]	; (8032164 <I2C_ITSlaveCplt+0x29c>)
 80320d4:	4293      	cmp	r3, r2
 80320d6:	d02f      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320d8:	687b      	ldr	r3, [r7, #4]
 80320da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320dc:	681b      	ldr	r3, [r3, #0]
 80320de:	4a22      	ldr	r2, [pc, #136]	; (8032168 <I2C_ITSlaveCplt+0x2a0>)
 80320e0:	4293      	cmp	r3, r2
 80320e2:	d029      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320e4:	687b      	ldr	r3, [r7, #4]
 80320e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320e8:	681b      	ldr	r3, [r3, #0]
 80320ea:	4a20      	ldr	r2, [pc, #128]	; (803216c <I2C_ITSlaveCplt+0x2a4>)
 80320ec:	4293      	cmp	r3, r2
 80320ee:	d023      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320f0:	687b      	ldr	r3, [r7, #4]
 80320f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80320f4:	681b      	ldr	r3, [r3, #0]
 80320f6:	4a1e      	ldr	r2, [pc, #120]	; (8032170 <I2C_ITSlaveCplt+0x2a8>)
 80320f8:	4293      	cmp	r3, r2
 80320fa:	d01d      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 80320fc:	687b      	ldr	r3, [r7, #4]
 80320fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032100:	681b      	ldr	r3, [r3, #0]
 8032102:	4a1c      	ldr	r2, [pc, #112]	; (8032174 <I2C_ITSlaveCplt+0x2ac>)
 8032104:	4293      	cmp	r3, r2
 8032106:	d017      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 8032108:	687b      	ldr	r3, [r7, #4]
 803210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803210c:	681b      	ldr	r3, [r3, #0]
 803210e:	4a1a      	ldr	r2, [pc, #104]	; (8032178 <I2C_ITSlaveCplt+0x2b0>)
 8032110:	4293      	cmp	r3, r2
 8032112:	d011      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 8032114:	687b      	ldr	r3, [r7, #4]
 8032116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032118:	681b      	ldr	r3, [r3, #0]
 803211a:	4a18      	ldr	r2, [pc, #96]	; (803217c <I2C_ITSlaveCplt+0x2b4>)
 803211c:	4293      	cmp	r3, r2
 803211e:	d00b      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 8032120:	687b      	ldr	r3, [r7, #4]
 8032122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032124:	681b      	ldr	r3, [r3, #0]
 8032126:	4a16      	ldr	r2, [pc, #88]	; (8032180 <I2C_ITSlaveCplt+0x2b8>)
 8032128:	4293      	cmp	r3, r2
 803212a:	d005      	beq.n	8032138 <I2C_ITSlaveCplt+0x270>
 803212c:	687b      	ldr	r3, [r7, #4]
 803212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032130:	681b      	ldr	r3, [r3, #0]
 8032132:	4a14      	ldr	r2, [pc, #80]	; (8032184 <I2C_ITSlaveCplt+0x2bc>)
 8032134:	4293      	cmp	r3, r2
 8032136:	d127      	bne.n	8032188 <I2C_ITSlaveCplt+0x2c0>
 8032138:	687b      	ldr	r3, [r7, #4]
 803213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803213c:	681b      	ldr	r3, [r3, #0]
 803213e:	685b      	ldr	r3, [r3, #4]
 8032140:	b29b      	uxth	r3, r3
 8032142:	e026      	b.n	8032192 <I2C_ITSlaveCplt+0x2ca>
 8032144:	fe00e800 	.word	0xfe00e800
 8032148:	40020010 	.word	0x40020010
 803214c:	40020028 	.word	0x40020028
 8032150:	40020040 	.word	0x40020040
 8032154:	40020058 	.word	0x40020058
 8032158:	40020070 	.word	0x40020070
 803215c:	40020088 	.word	0x40020088
 8032160:	400200a0 	.word	0x400200a0
 8032164:	400200b8 	.word	0x400200b8
 8032168:	40020410 	.word	0x40020410
 803216c:	40020428 	.word	0x40020428
 8032170:	40020440 	.word	0x40020440
 8032174:	40020458 	.word	0x40020458
 8032178:	40020470 	.word	0x40020470
 803217c:	40020488 	.word	0x40020488
 8032180:	400204a0 	.word	0x400204a0
 8032184:	400204b8 	.word	0x400204b8
 8032188:	687b      	ldr	r3, [r7, #4]
 803218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803218c:	681b      	ldr	r3, [r3, #0]
 803218e:	685b      	ldr	r3, [r3, #4]
 8032190:	b29b      	uxth	r3, r3
 8032192:	687a      	ldr	r2, [r7, #4]
 8032194:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8032196:	697b      	ldr	r3, [r7, #20]
 8032198:	089b      	lsrs	r3, r3, #2
 803219a:	f003 0301 	and.w	r3, r3, #1
 803219e:	2b00      	cmp	r3, #0
 80321a0:	d020      	beq.n	80321e4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80321a2:	697b      	ldr	r3, [r7, #20]
 80321a4:	f023 0304 	bic.w	r3, r3, #4
 80321a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80321aa:	687b      	ldr	r3, [r7, #4]
 80321ac:	681b      	ldr	r3, [r3, #0]
 80321ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80321b0:	687b      	ldr	r3, [r7, #4]
 80321b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321b4:	b2d2      	uxtb	r2, r2
 80321b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80321b8:	687b      	ldr	r3, [r7, #4]
 80321ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321bc:	1c5a      	adds	r2, r3, #1
 80321be:	687b      	ldr	r3, [r7, #4]
 80321c0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80321c2:	687b      	ldr	r3, [r7, #4]
 80321c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80321c6:	2b00      	cmp	r3, #0
 80321c8:	d00c      	beq.n	80321e4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80321ca:	687b      	ldr	r3, [r7, #4]
 80321cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80321ce:	3b01      	subs	r3, #1
 80321d0:	b29a      	uxth	r2, r3
 80321d2:	687b      	ldr	r3, [r7, #4]
 80321d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80321d6:	687b      	ldr	r3, [r7, #4]
 80321d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80321da:	b29b      	uxth	r3, r3
 80321dc:	3b01      	subs	r3, #1
 80321de:	b29a      	uxth	r2, r3
 80321e0:	687b      	ldr	r3, [r7, #4]
 80321e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80321e4:	687b      	ldr	r3, [r7, #4]
 80321e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80321e8:	b29b      	uxth	r3, r3
 80321ea:	2b00      	cmp	r3, #0
 80321ec:	d005      	beq.n	80321fa <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80321ee:	687b      	ldr	r3, [r7, #4]
 80321f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80321f2:	f043 0204 	orr.w	r2, r3, #4
 80321f6:	687b      	ldr	r3, [r7, #4]
 80321f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80321fa:	687b      	ldr	r3, [r7, #4]
 80321fc:	2200      	movs	r2, #0
 80321fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8032202:	687b      	ldr	r3, [r7, #4]
 8032204:	2200      	movs	r2, #0
 8032206:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8032208:	687b      	ldr	r3, [r7, #4]
 803220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803220c:	2b00      	cmp	r3, #0
 803220e:	d010      	beq.n	8032232 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8032210:	687b      	ldr	r3, [r7, #4]
 8032212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032214:	4619      	mov	r1, r3
 8032216:	6878      	ldr	r0, [r7, #4]
 8032218:	f000 f8a4 	bl	8032364 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 803221c:	687b      	ldr	r3, [r7, #4]
 803221e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032222:	b2db      	uxtb	r3, r3
 8032224:	2b28      	cmp	r3, #40	; 0x28
 8032226:	d141      	bne.n	80322ac <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8032228:	6979      	ldr	r1, [r7, #20]
 803222a:	6878      	ldr	r0, [r7, #4]
 803222c:	f000 f844 	bl	80322b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8032230:	e03c      	b.n	80322ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8032232:	687b      	ldr	r3, [r7, #4]
 8032234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032236:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 803223a:	d014      	beq.n	8032266 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 803223c:	6878      	ldr	r0, [r7, #4]
 803223e:	f7ff fde5 	bl	8031e0c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8032242:	687b      	ldr	r3, [r7, #4]
 8032244:	4a1b      	ldr	r2, [pc, #108]	; (80322b4 <I2C_ITSlaveCplt+0x3ec>)
 8032246:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8032248:	687b      	ldr	r3, [r7, #4]
 803224a:	2220      	movs	r2, #32
 803224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8032250:	687b      	ldr	r3, [r7, #4]
 8032252:	2200      	movs	r2, #0
 8032254:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8032256:	687b      	ldr	r3, [r7, #4]
 8032258:	2200      	movs	r2, #0
 803225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 803225e:	6878      	ldr	r0, [r7, #4]
 8032260:	f7ff fc2f 	bl	8031ac2 <HAL_I2C_ListenCpltCallback>
}
 8032264:	e022      	b.n	80322ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8032266:	687b      	ldr	r3, [r7, #4]
 8032268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 803226c:	b2db      	uxtb	r3, r3
 803226e:	2b22      	cmp	r3, #34	; 0x22
 8032270:	d10e      	bne.n	8032290 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8032272:	687b      	ldr	r3, [r7, #4]
 8032274:	2220      	movs	r2, #32
 8032276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 803227a:	687b      	ldr	r3, [r7, #4]
 803227c:	2200      	movs	r2, #0
 803227e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8032280:	687b      	ldr	r3, [r7, #4]
 8032282:	2200      	movs	r2, #0
 8032284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8032288:	6878      	ldr	r0, [r7, #4]
 803228a:	f7ff fc02 	bl	8031a92 <HAL_I2C_SlaveRxCpltCallback>
}
 803228e:	e00d      	b.n	80322ac <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8032290:	687b      	ldr	r3, [r7, #4]
 8032292:	2220      	movs	r2, #32
 8032294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8032298:	687b      	ldr	r3, [r7, #4]
 803229a:	2200      	movs	r2, #0
 803229c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 803229e:	687b      	ldr	r3, [r7, #4]
 80322a0:	2200      	movs	r2, #0
 80322a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80322a6:	6878      	ldr	r0, [r7, #4]
 80322a8:	f7ff fbe9 	bl	8031a7e <HAL_I2C_SlaveTxCpltCallback>
}
 80322ac:	bf00      	nop
 80322ae:	3718      	adds	r7, #24
 80322b0:	46bd      	mov	sp, r7
 80322b2:	bd80      	pop	{r7, pc}
 80322b4:	ffff0000 	.word	0xffff0000

080322b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80322b8:	b580      	push	{r7, lr}
 80322ba:	b082      	sub	sp, #8
 80322bc:	af00      	add	r7, sp, #0
 80322be:	6078      	str	r0, [r7, #4]
 80322c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80322c2:	687b      	ldr	r3, [r7, #4]
 80322c4:	4a26      	ldr	r2, [pc, #152]	; (8032360 <I2C_ITListenCplt+0xa8>)
 80322c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80322c8:	687b      	ldr	r3, [r7, #4]
 80322ca:	2200      	movs	r2, #0
 80322cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80322ce:	687b      	ldr	r3, [r7, #4]
 80322d0:	2220      	movs	r2, #32
 80322d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80322d6:	687b      	ldr	r3, [r7, #4]
 80322d8:	2200      	movs	r2, #0
 80322da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80322de:	687b      	ldr	r3, [r7, #4]
 80322e0:	2200      	movs	r2, #0
 80322e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80322e4:	683b      	ldr	r3, [r7, #0]
 80322e6:	089b      	lsrs	r3, r3, #2
 80322e8:	f003 0301 	and.w	r3, r3, #1
 80322ec:	2b00      	cmp	r3, #0
 80322ee:	d022      	beq.n	8032336 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80322f0:	687b      	ldr	r3, [r7, #4]
 80322f2:	681b      	ldr	r3, [r3, #0]
 80322f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80322f6:	687b      	ldr	r3, [r7, #4]
 80322f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80322fa:	b2d2      	uxtb	r2, r2
 80322fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80322fe:	687b      	ldr	r3, [r7, #4]
 8032300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032302:	1c5a      	adds	r2, r3, #1
 8032304:	687b      	ldr	r3, [r7, #4]
 8032306:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8032308:	687b      	ldr	r3, [r7, #4]
 803230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803230c:	2b00      	cmp	r3, #0
 803230e:	d012      	beq.n	8032336 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8032310:	687b      	ldr	r3, [r7, #4]
 8032312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8032314:	3b01      	subs	r3, #1
 8032316:	b29a      	uxth	r2, r3
 8032318:	687b      	ldr	r3, [r7, #4]
 803231a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 803231c:	687b      	ldr	r3, [r7, #4]
 803231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032320:	b29b      	uxth	r3, r3
 8032322:	3b01      	subs	r3, #1
 8032324:	b29a      	uxth	r2, r3
 8032326:	687b      	ldr	r3, [r7, #4]
 8032328:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 803232a:	687b      	ldr	r3, [r7, #4]
 803232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803232e:	f043 0204 	orr.w	r2, r3, #4
 8032332:	687b      	ldr	r3, [r7, #4]
 8032334:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8032336:	f248 0103 	movw	r1, #32771	; 0x8003
 803233a:	6878      	ldr	r0, [r7, #4]
 803233c:	f000 f94b 	bl	80325d6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032340:	687b      	ldr	r3, [r7, #4]
 8032342:	681b      	ldr	r3, [r3, #0]
 8032344:	2210      	movs	r2, #16
 8032346:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8032348:	687b      	ldr	r3, [r7, #4]
 803234a:	2200      	movs	r2, #0
 803234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8032350:	6878      	ldr	r0, [r7, #4]
 8032352:	f7ff fbb6 	bl	8031ac2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8032356:	bf00      	nop
 8032358:	3708      	adds	r7, #8
 803235a:	46bd      	mov	sp, r7
 803235c:	bd80      	pop	{r7, pc}
 803235e:	bf00      	nop
 8032360:	ffff0000 	.word	0xffff0000

08032364 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8032364:	b580      	push	{r7, lr}
 8032366:	b084      	sub	sp, #16
 8032368:	af00      	add	r7, sp, #0
 803236a:	6078      	str	r0, [r7, #4]
 803236c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 803236e:	687b      	ldr	r3, [r7, #4]
 8032370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8032376:	687b      	ldr	r3, [r7, #4]
 8032378:	2200      	movs	r2, #0
 803237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 803237e:	687b      	ldr	r3, [r7, #4]
 8032380:	4a5d      	ldr	r2, [pc, #372]	; (80324f8 <I2C_ITError+0x194>)
 8032382:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8032384:	687b      	ldr	r3, [r7, #4]
 8032386:	2200      	movs	r2, #0
 8032388:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 803238a:	687b      	ldr	r3, [r7, #4]
 803238c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803238e:	683b      	ldr	r3, [r7, #0]
 8032390:	431a      	orrs	r2, r3
 8032392:	687b      	ldr	r3, [r7, #4]
 8032394:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8032396:	7bfb      	ldrb	r3, [r7, #15]
 8032398:	2b28      	cmp	r3, #40	; 0x28
 803239a:	d005      	beq.n	80323a8 <I2C_ITError+0x44>
 803239c:	7bfb      	ldrb	r3, [r7, #15]
 803239e:	2b29      	cmp	r3, #41	; 0x29
 80323a0:	d002      	beq.n	80323a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80323a2:	7bfb      	ldrb	r3, [r7, #15]
 80323a4:	2b2a      	cmp	r3, #42	; 0x2a
 80323a6:	d10b      	bne.n	80323c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80323a8:	2103      	movs	r1, #3
 80323aa:	6878      	ldr	r0, [r7, #4]
 80323ac:	f000 f913 	bl	80325d6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80323b0:	687b      	ldr	r3, [r7, #4]
 80323b2:	2228      	movs	r2, #40	; 0x28
 80323b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80323b8:	687b      	ldr	r3, [r7, #4]
 80323ba:	4a50      	ldr	r2, [pc, #320]	; (80324fc <I2C_ITError+0x198>)
 80323bc:	635a      	str	r2, [r3, #52]	; 0x34
 80323be:	e011      	b.n	80323e4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80323c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80323c4:	6878      	ldr	r0, [r7, #4]
 80323c6:	f000 f906 	bl	80325d6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80323ca:	687b      	ldr	r3, [r7, #4]
 80323cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80323d0:	b2db      	uxtb	r3, r3
 80323d2:	2b60      	cmp	r3, #96	; 0x60
 80323d4:	d003      	beq.n	80323de <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80323d6:	687b      	ldr	r3, [r7, #4]
 80323d8:	2220      	movs	r2, #32
 80323da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80323de:	687b      	ldr	r3, [r7, #4]
 80323e0:	2200      	movs	r2, #0
 80323e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80323e4:	687b      	ldr	r3, [r7, #4]
 80323e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80323e8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80323ea:	687b      	ldr	r3, [r7, #4]
 80323ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80323ee:	2b00      	cmp	r3, #0
 80323f0:	d039      	beq.n	8032466 <I2C_ITError+0x102>
 80323f2:	68bb      	ldr	r3, [r7, #8]
 80323f4:	2b11      	cmp	r3, #17
 80323f6:	d002      	beq.n	80323fe <I2C_ITError+0x9a>
 80323f8:	68bb      	ldr	r3, [r7, #8]
 80323fa:	2b21      	cmp	r3, #33	; 0x21
 80323fc:	d133      	bne.n	8032466 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80323fe:	687b      	ldr	r3, [r7, #4]
 8032400:	681b      	ldr	r3, [r3, #0]
 8032402:	681b      	ldr	r3, [r3, #0]
 8032404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8032408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803240c:	d107      	bne.n	803241e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 803240e:	687b      	ldr	r3, [r7, #4]
 8032410:	681b      	ldr	r3, [r3, #0]
 8032412:	681a      	ldr	r2, [r3, #0]
 8032414:	687b      	ldr	r3, [r7, #4]
 8032416:	681b      	ldr	r3, [r3, #0]
 8032418:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 803241c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803241e:	687b      	ldr	r3, [r7, #4]
 8032420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032422:	4618      	mov	r0, r3
 8032424:	f7fe fc54 	bl	8030cd0 <HAL_DMA_GetState>
 8032428:	4603      	mov	r3, r0
 803242a:	2b01      	cmp	r3, #1
 803242c:	d017      	beq.n	803245e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 803242e:	687b      	ldr	r3, [r7, #4]
 8032430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032432:	4a33      	ldr	r2, [pc, #204]	; (8032500 <I2C_ITError+0x19c>)
 8032434:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032436:	687b      	ldr	r3, [r7, #4]
 8032438:	2200      	movs	r2, #0
 803243a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 803243e:	687b      	ldr	r3, [r7, #4]
 8032440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032442:	4618      	mov	r0, r3
 8032444:	f7fd fad4 	bl	802f9f0 <HAL_DMA_Abort_IT>
 8032448:	4603      	mov	r3, r0
 803244a:	2b00      	cmp	r3, #0
 803244c:	d04d      	beq.n	80324ea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 803244e:	687b      	ldr	r3, [r7, #4]
 8032450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032454:	687a      	ldr	r2, [r7, #4]
 8032456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8032458:	4610      	mov	r0, r2
 803245a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803245c:	e045      	b.n	80324ea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 803245e:	6878      	ldr	r0, [r7, #4]
 8032460:	f000 f850 	bl	8032504 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8032464:	e041      	b.n	80324ea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8032466:	687b      	ldr	r3, [r7, #4]
 8032468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803246a:	2b00      	cmp	r3, #0
 803246c:	d039      	beq.n	80324e2 <I2C_ITError+0x17e>
 803246e:	68bb      	ldr	r3, [r7, #8]
 8032470:	2b12      	cmp	r3, #18
 8032472:	d002      	beq.n	803247a <I2C_ITError+0x116>
 8032474:	68bb      	ldr	r3, [r7, #8]
 8032476:	2b22      	cmp	r3, #34	; 0x22
 8032478:	d133      	bne.n	80324e2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 803247a:	687b      	ldr	r3, [r7, #4]
 803247c:	681b      	ldr	r3, [r3, #0]
 803247e:	681b      	ldr	r3, [r3, #0]
 8032480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8032484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8032488:	d107      	bne.n	803249a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803248a:	687b      	ldr	r3, [r7, #4]
 803248c:	681b      	ldr	r3, [r3, #0]
 803248e:	681a      	ldr	r2, [r3, #0]
 8032490:	687b      	ldr	r3, [r7, #4]
 8032492:	681b      	ldr	r3, [r3, #0]
 8032494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8032498:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 803249a:	687b      	ldr	r3, [r7, #4]
 803249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803249e:	4618      	mov	r0, r3
 80324a0:	f7fe fc16 	bl	8030cd0 <HAL_DMA_GetState>
 80324a4:	4603      	mov	r3, r0
 80324a6:	2b01      	cmp	r3, #1
 80324a8:	d017      	beq.n	80324da <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80324aa:	687b      	ldr	r3, [r7, #4]
 80324ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80324ae:	4a14      	ldr	r2, [pc, #80]	; (8032500 <I2C_ITError+0x19c>)
 80324b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80324b2:	687b      	ldr	r3, [r7, #4]
 80324b4:	2200      	movs	r2, #0
 80324b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80324ba:	687b      	ldr	r3, [r7, #4]
 80324bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80324be:	4618      	mov	r0, r3
 80324c0:	f7fd fa96 	bl	802f9f0 <HAL_DMA_Abort_IT>
 80324c4:	4603      	mov	r3, r0
 80324c6:	2b00      	cmp	r3, #0
 80324c8:	d011      	beq.n	80324ee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80324ca:	687b      	ldr	r3, [r7, #4]
 80324cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80324ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80324d0:	687a      	ldr	r2, [r7, #4]
 80324d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80324d4:	4610      	mov	r0, r2
 80324d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80324d8:	e009      	b.n	80324ee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80324da:	6878      	ldr	r0, [r7, #4]
 80324dc:	f000 f812 	bl	8032504 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80324e0:	e005      	b.n	80324ee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80324e2:	6878      	ldr	r0, [r7, #4]
 80324e4:	f000 f80e 	bl	8032504 <I2C_TreatErrorCallback>
  }
}
 80324e8:	e002      	b.n	80324f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80324ea:	bf00      	nop
 80324ec:	e000      	b.n	80324f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80324ee:	bf00      	nop
}
 80324f0:	bf00      	nop
 80324f2:	3710      	adds	r7, #16
 80324f4:	46bd      	mov	sp, r7
 80324f6:	bd80      	pop	{r7, pc}
 80324f8:	ffff0000 	.word	0xffff0000
 80324fc:	08031aff 	.word	0x08031aff
 8032500:	0803259b 	.word	0x0803259b

08032504 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8032504:	b580      	push	{r7, lr}
 8032506:	b082      	sub	sp, #8
 8032508:	af00      	add	r7, sp, #0
 803250a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 803250c:	687b      	ldr	r3, [r7, #4]
 803250e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032512:	b2db      	uxtb	r3, r3
 8032514:	2b60      	cmp	r3, #96	; 0x60
 8032516:	d10e      	bne.n	8032536 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8032518:	687b      	ldr	r3, [r7, #4]
 803251a:	2220      	movs	r2, #32
 803251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8032520:	687b      	ldr	r3, [r7, #4]
 8032522:	2200      	movs	r2, #0
 8032524:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8032526:	687b      	ldr	r3, [r7, #4]
 8032528:	2200      	movs	r2, #0
 803252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 803252e:	6878      	ldr	r0, [r7, #4]
 8032530:	f7ff fadb 	bl	8031aea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8032534:	e009      	b.n	803254a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8032536:	687b      	ldr	r3, [r7, #4]
 8032538:	2200      	movs	r2, #0
 803253a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 803253c:	687b      	ldr	r3, [r7, #4]
 803253e:	2200      	movs	r2, #0
 8032540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8032544:	6878      	ldr	r0, [r7, #4]
 8032546:	f7ff fac6 	bl	8031ad6 <HAL_I2C_ErrorCallback>
}
 803254a:	bf00      	nop
 803254c:	3708      	adds	r7, #8
 803254e:	46bd      	mov	sp, r7
 8032550:	bd80      	pop	{r7, pc}

08032552 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8032552:	b480      	push	{r7}
 8032554:	b083      	sub	sp, #12
 8032556:	af00      	add	r7, sp, #0
 8032558:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 803255a:	687b      	ldr	r3, [r7, #4]
 803255c:	681b      	ldr	r3, [r3, #0]
 803255e:	699b      	ldr	r3, [r3, #24]
 8032560:	f003 0302 	and.w	r3, r3, #2
 8032564:	2b02      	cmp	r3, #2
 8032566:	d103      	bne.n	8032570 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8032568:	687b      	ldr	r3, [r7, #4]
 803256a:	681b      	ldr	r3, [r3, #0]
 803256c:	2200      	movs	r2, #0
 803256e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8032570:	687b      	ldr	r3, [r7, #4]
 8032572:	681b      	ldr	r3, [r3, #0]
 8032574:	699b      	ldr	r3, [r3, #24]
 8032576:	f003 0301 	and.w	r3, r3, #1
 803257a:	2b01      	cmp	r3, #1
 803257c:	d007      	beq.n	803258e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 803257e:	687b      	ldr	r3, [r7, #4]
 8032580:	681b      	ldr	r3, [r3, #0]
 8032582:	699a      	ldr	r2, [r3, #24]
 8032584:	687b      	ldr	r3, [r7, #4]
 8032586:	681b      	ldr	r3, [r3, #0]
 8032588:	f042 0201 	orr.w	r2, r2, #1
 803258c:	619a      	str	r2, [r3, #24]
  }
}
 803258e:	bf00      	nop
 8032590:	370c      	adds	r7, #12
 8032592:	46bd      	mov	sp, r7
 8032594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032598:	4770      	bx	lr

0803259a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 803259a:	b580      	push	{r7, lr}
 803259c:	b084      	sub	sp, #16
 803259e:	af00      	add	r7, sp, #0
 80325a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80325a2:	687b      	ldr	r3, [r7, #4]
 80325a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80325a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80325a8:	68fb      	ldr	r3, [r7, #12]
 80325aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80325ac:	2b00      	cmp	r3, #0
 80325ae:	d003      	beq.n	80325b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80325b0:	68fb      	ldr	r3, [r7, #12]
 80325b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80325b4:	2200      	movs	r2, #0
 80325b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80325b8:	68fb      	ldr	r3, [r7, #12]
 80325ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325bc:	2b00      	cmp	r3, #0
 80325be:	d003      	beq.n	80325c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80325c0:	68fb      	ldr	r3, [r7, #12]
 80325c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325c4:	2200      	movs	r2, #0
 80325c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80325c8:	68f8      	ldr	r0, [r7, #12]
 80325ca:	f7ff ff9b 	bl	8032504 <I2C_TreatErrorCallback>
}
 80325ce:	bf00      	nop
 80325d0:	3710      	adds	r7, #16
 80325d2:	46bd      	mov	sp, r7
 80325d4:	bd80      	pop	{r7, pc}

080325d6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80325d6:	b480      	push	{r7}
 80325d8:	b085      	sub	sp, #20
 80325da:	af00      	add	r7, sp, #0
 80325dc:	6078      	str	r0, [r7, #4]
 80325de:	460b      	mov	r3, r1
 80325e0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80325e2:	2300      	movs	r3, #0
 80325e4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80325e6:	887b      	ldrh	r3, [r7, #2]
 80325e8:	f003 0301 	and.w	r3, r3, #1
 80325ec:	2b00      	cmp	r3, #0
 80325ee:	d00f      	beq.n	8032610 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80325f0:	68fb      	ldr	r3, [r7, #12]
 80325f2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80325f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80325f8:	687b      	ldr	r3, [r7, #4]
 80325fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80325fe:	b2db      	uxtb	r3, r3
 8032600:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8032604:	2b28      	cmp	r3, #40	; 0x28
 8032606:	d003      	beq.n	8032610 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8032608:	68fb      	ldr	r3, [r7, #12]
 803260a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 803260e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8032610:	887b      	ldrh	r3, [r7, #2]
 8032612:	f003 0302 	and.w	r3, r3, #2
 8032616:	2b00      	cmp	r3, #0
 8032618:	d00f      	beq.n	803263a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 803261a:	68fb      	ldr	r3, [r7, #12]
 803261c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8032620:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8032622:	687b      	ldr	r3, [r7, #4]
 8032624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032628:	b2db      	uxtb	r3, r3
 803262a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 803262e:	2b28      	cmp	r3, #40	; 0x28
 8032630:	d003      	beq.n	803263a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8032632:	68fb      	ldr	r3, [r7, #12]
 8032634:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8032638:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 803263a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 803263e:	2b00      	cmp	r3, #0
 8032640:	da03      	bge.n	803264a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8032642:	68fb      	ldr	r3, [r7, #12]
 8032644:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8032648:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 803264a:	887b      	ldrh	r3, [r7, #2]
 803264c:	2b10      	cmp	r3, #16
 803264e:	d103      	bne.n	8032658 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8032650:	68fb      	ldr	r3, [r7, #12]
 8032652:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8032656:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8032658:	887b      	ldrh	r3, [r7, #2]
 803265a:	2b20      	cmp	r3, #32
 803265c:	d103      	bne.n	8032666 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 803265e:	68fb      	ldr	r3, [r7, #12]
 8032660:	f043 0320 	orr.w	r3, r3, #32
 8032664:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8032666:	887b      	ldrh	r3, [r7, #2]
 8032668:	2b40      	cmp	r3, #64	; 0x40
 803266a:	d103      	bne.n	8032674 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 803266c:	68fb      	ldr	r3, [r7, #12]
 803266e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032672:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8032674:	687b      	ldr	r3, [r7, #4]
 8032676:	681b      	ldr	r3, [r3, #0]
 8032678:	6819      	ldr	r1, [r3, #0]
 803267a:	68fb      	ldr	r3, [r7, #12]
 803267c:	43da      	mvns	r2, r3
 803267e:	687b      	ldr	r3, [r7, #4]
 8032680:	681b      	ldr	r3, [r3, #0]
 8032682:	400a      	ands	r2, r1
 8032684:	601a      	str	r2, [r3, #0]
}
 8032686:	bf00      	nop
 8032688:	3714      	adds	r7, #20
 803268a:	46bd      	mov	sp, r7
 803268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032690:	4770      	bx	lr

08032692 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8032692:	b480      	push	{r7}
 8032694:	b083      	sub	sp, #12
 8032696:	af00      	add	r7, sp, #0
 8032698:	6078      	str	r0, [r7, #4]
 803269a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 803269c:	687b      	ldr	r3, [r7, #4]
 803269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80326a2:	b2db      	uxtb	r3, r3
 80326a4:	2b20      	cmp	r3, #32
 80326a6:	d138      	bne.n	803271a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80326a8:	687b      	ldr	r3, [r7, #4]
 80326aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80326ae:	2b01      	cmp	r3, #1
 80326b0:	d101      	bne.n	80326b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80326b2:	2302      	movs	r3, #2
 80326b4:	e032      	b.n	803271c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80326b6:	687b      	ldr	r3, [r7, #4]
 80326b8:	2201      	movs	r2, #1
 80326ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80326be:	687b      	ldr	r3, [r7, #4]
 80326c0:	2224      	movs	r2, #36	; 0x24
 80326c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80326c6:	687b      	ldr	r3, [r7, #4]
 80326c8:	681b      	ldr	r3, [r3, #0]
 80326ca:	681a      	ldr	r2, [r3, #0]
 80326cc:	687b      	ldr	r3, [r7, #4]
 80326ce:	681b      	ldr	r3, [r3, #0]
 80326d0:	f022 0201 	bic.w	r2, r2, #1
 80326d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80326d6:	687b      	ldr	r3, [r7, #4]
 80326d8:	681b      	ldr	r3, [r3, #0]
 80326da:	681a      	ldr	r2, [r3, #0]
 80326dc:	687b      	ldr	r3, [r7, #4]
 80326de:	681b      	ldr	r3, [r3, #0]
 80326e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80326e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80326e6:	687b      	ldr	r3, [r7, #4]
 80326e8:	681b      	ldr	r3, [r3, #0]
 80326ea:	6819      	ldr	r1, [r3, #0]
 80326ec:	687b      	ldr	r3, [r7, #4]
 80326ee:	681b      	ldr	r3, [r3, #0]
 80326f0:	683a      	ldr	r2, [r7, #0]
 80326f2:	430a      	orrs	r2, r1
 80326f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80326f6:	687b      	ldr	r3, [r7, #4]
 80326f8:	681b      	ldr	r3, [r3, #0]
 80326fa:	681a      	ldr	r2, [r3, #0]
 80326fc:	687b      	ldr	r3, [r7, #4]
 80326fe:	681b      	ldr	r3, [r3, #0]
 8032700:	f042 0201 	orr.w	r2, r2, #1
 8032704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8032706:	687b      	ldr	r3, [r7, #4]
 8032708:	2220      	movs	r2, #32
 803270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 803270e:	687b      	ldr	r3, [r7, #4]
 8032710:	2200      	movs	r2, #0
 8032712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8032716:	2300      	movs	r3, #0
 8032718:	e000      	b.n	803271c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 803271a:	2302      	movs	r3, #2
  }
}
 803271c:	4618      	mov	r0, r3
 803271e:	370c      	adds	r7, #12
 8032720:	46bd      	mov	sp, r7
 8032722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032726:	4770      	bx	lr

08032728 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8032728:	b480      	push	{r7}
 803272a:	b085      	sub	sp, #20
 803272c:	af00      	add	r7, sp, #0
 803272e:	6078      	str	r0, [r7, #4]
 8032730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8032732:	687b      	ldr	r3, [r7, #4]
 8032734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032738:	b2db      	uxtb	r3, r3
 803273a:	2b20      	cmp	r3, #32
 803273c:	d139      	bne.n	80327b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 803273e:	687b      	ldr	r3, [r7, #4]
 8032740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8032744:	2b01      	cmp	r3, #1
 8032746:	d101      	bne.n	803274c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8032748:	2302      	movs	r3, #2
 803274a:	e033      	b.n	80327b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 803274c:	687b      	ldr	r3, [r7, #4]
 803274e:	2201      	movs	r2, #1
 8032750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8032754:	687b      	ldr	r3, [r7, #4]
 8032756:	2224      	movs	r2, #36	; 0x24
 8032758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 803275c:	687b      	ldr	r3, [r7, #4]
 803275e:	681b      	ldr	r3, [r3, #0]
 8032760:	681a      	ldr	r2, [r3, #0]
 8032762:	687b      	ldr	r3, [r7, #4]
 8032764:	681b      	ldr	r3, [r3, #0]
 8032766:	f022 0201 	bic.w	r2, r2, #1
 803276a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 803276c:	687b      	ldr	r3, [r7, #4]
 803276e:	681b      	ldr	r3, [r3, #0]
 8032770:	681b      	ldr	r3, [r3, #0]
 8032772:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8032774:	68fb      	ldr	r3, [r7, #12]
 8032776:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 803277a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 803277c:	683b      	ldr	r3, [r7, #0]
 803277e:	021b      	lsls	r3, r3, #8
 8032780:	68fa      	ldr	r2, [r7, #12]
 8032782:	4313      	orrs	r3, r2
 8032784:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8032786:	687b      	ldr	r3, [r7, #4]
 8032788:	681b      	ldr	r3, [r3, #0]
 803278a:	68fa      	ldr	r2, [r7, #12]
 803278c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 803278e:	687b      	ldr	r3, [r7, #4]
 8032790:	681b      	ldr	r3, [r3, #0]
 8032792:	681a      	ldr	r2, [r3, #0]
 8032794:	687b      	ldr	r3, [r7, #4]
 8032796:	681b      	ldr	r3, [r3, #0]
 8032798:	f042 0201 	orr.w	r2, r2, #1
 803279c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 803279e:	687b      	ldr	r3, [r7, #4]
 80327a0:	2220      	movs	r2, #32
 80327a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80327a6:	687b      	ldr	r3, [r7, #4]
 80327a8:	2200      	movs	r2, #0
 80327aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80327ae:	2300      	movs	r3, #0
 80327b0:	e000      	b.n	80327b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80327b2:	2302      	movs	r3, #2
  }
}
 80327b4:	4618      	mov	r0, r3
 80327b6:	3714      	adds	r7, #20
 80327b8:	46bd      	mov	sp, r7
 80327ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327be:	4770      	bx	lr

080327c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80327c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80327c2:	b08f      	sub	sp, #60	; 0x3c
 80327c4:	af0a      	add	r7, sp, #40	; 0x28
 80327c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80327c8:	687b      	ldr	r3, [r7, #4]
 80327ca:	2b00      	cmp	r3, #0
 80327cc:	d101      	bne.n	80327d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80327ce:	2301      	movs	r3, #1
 80327d0:	e116      	b.n	8032a00 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80327d2:	687b      	ldr	r3, [r7, #4]
 80327d4:	681b      	ldr	r3, [r3, #0]
 80327d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80327d8:	687b      	ldr	r3, [r7, #4]
 80327da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80327de:	b2db      	uxtb	r3, r3
 80327e0:	2b00      	cmp	r3, #0
 80327e2:	d106      	bne.n	80327f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80327e4:	687b      	ldr	r3, [r7, #4]
 80327e6:	2200      	movs	r2, #0
 80327e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80327ec:	6878      	ldr	r0, [r7, #4]
 80327ee:	f00c f82f 	bl	803e850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80327f2:	687b      	ldr	r3, [r7, #4]
 80327f4:	2203      	movs	r2, #3
 80327f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80327fa:	68bb      	ldr	r3, [r7, #8]
 80327fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80327fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032802:	2b00      	cmp	r3, #0
 8032804:	d102      	bne.n	803280c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8032806:	687b      	ldr	r3, [r7, #4]
 8032808:	2200      	movs	r2, #0
 803280a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 803280c:	687b      	ldr	r3, [r7, #4]
 803280e:	681b      	ldr	r3, [r3, #0]
 8032810:	4618      	mov	r0, r3
 8032812:	f008 fb78 	bl	803af06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8032816:	687b      	ldr	r3, [r7, #4]
 8032818:	681b      	ldr	r3, [r3, #0]
 803281a:	603b      	str	r3, [r7, #0]
 803281c:	687e      	ldr	r6, [r7, #4]
 803281e:	466d      	mov	r5, sp
 8032820:	f106 0410 	add.w	r4, r6, #16
 8032824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8032826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8032828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 803282a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 803282c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8032830:	e885 0003 	stmia.w	r5, {r0, r1}
 8032834:	1d33      	adds	r3, r6, #4
 8032836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8032838:	6838      	ldr	r0, [r7, #0]
 803283a:	f008 fa43 	bl	803acc4 <USB_CoreInit>
 803283e:	4603      	mov	r3, r0
 8032840:	2b00      	cmp	r3, #0
 8032842:	d005      	beq.n	8032850 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8032844:	687b      	ldr	r3, [r7, #4]
 8032846:	2202      	movs	r2, #2
 8032848:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 803284c:	2301      	movs	r3, #1
 803284e:	e0d7      	b.n	8032a00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8032850:	687b      	ldr	r3, [r7, #4]
 8032852:	681b      	ldr	r3, [r3, #0]
 8032854:	2100      	movs	r1, #0
 8032856:	4618      	mov	r0, r3
 8032858:	f008 fb66 	bl	803af28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 803285c:	2300      	movs	r3, #0
 803285e:	73fb      	strb	r3, [r7, #15]
 8032860:	e04a      	b.n	80328f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8032862:	7bfa      	ldrb	r2, [r7, #15]
 8032864:	6879      	ldr	r1, [r7, #4]
 8032866:	4613      	mov	r3, r2
 8032868:	00db      	lsls	r3, r3, #3
 803286a:	4413      	add	r3, r2
 803286c:	009b      	lsls	r3, r3, #2
 803286e:	440b      	add	r3, r1
 8032870:	333d      	adds	r3, #61	; 0x3d
 8032872:	2201      	movs	r2, #1
 8032874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8032876:	7bfa      	ldrb	r2, [r7, #15]
 8032878:	6879      	ldr	r1, [r7, #4]
 803287a:	4613      	mov	r3, r2
 803287c:	00db      	lsls	r3, r3, #3
 803287e:	4413      	add	r3, r2
 8032880:	009b      	lsls	r3, r3, #2
 8032882:	440b      	add	r3, r1
 8032884:	333c      	adds	r3, #60	; 0x3c
 8032886:	7bfa      	ldrb	r2, [r7, #15]
 8032888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 803288a:	7bfa      	ldrb	r2, [r7, #15]
 803288c:	7bfb      	ldrb	r3, [r7, #15]
 803288e:	b298      	uxth	r0, r3
 8032890:	6879      	ldr	r1, [r7, #4]
 8032892:	4613      	mov	r3, r2
 8032894:	00db      	lsls	r3, r3, #3
 8032896:	4413      	add	r3, r2
 8032898:	009b      	lsls	r3, r3, #2
 803289a:	440b      	add	r3, r1
 803289c:	3344      	adds	r3, #68	; 0x44
 803289e:	4602      	mov	r2, r0
 80328a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80328a2:	7bfa      	ldrb	r2, [r7, #15]
 80328a4:	6879      	ldr	r1, [r7, #4]
 80328a6:	4613      	mov	r3, r2
 80328a8:	00db      	lsls	r3, r3, #3
 80328aa:	4413      	add	r3, r2
 80328ac:	009b      	lsls	r3, r3, #2
 80328ae:	440b      	add	r3, r1
 80328b0:	3340      	adds	r3, #64	; 0x40
 80328b2:	2200      	movs	r2, #0
 80328b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80328b6:	7bfa      	ldrb	r2, [r7, #15]
 80328b8:	6879      	ldr	r1, [r7, #4]
 80328ba:	4613      	mov	r3, r2
 80328bc:	00db      	lsls	r3, r3, #3
 80328be:	4413      	add	r3, r2
 80328c0:	009b      	lsls	r3, r3, #2
 80328c2:	440b      	add	r3, r1
 80328c4:	3348      	adds	r3, #72	; 0x48
 80328c6:	2200      	movs	r2, #0
 80328c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80328ca:	7bfa      	ldrb	r2, [r7, #15]
 80328cc:	6879      	ldr	r1, [r7, #4]
 80328ce:	4613      	mov	r3, r2
 80328d0:	00db      	lsls	r3, r3, #3
 80328d2:	4413      	add	r3, r2
 80328d4:	009b      	lsls	r3, r3, #2
 80328d6:	440b      	add	r3, r1
 80328d8:	334c      	adds	r3, #76	; 0x4c
 80328da:	2200      	movs	r2, #0
 80328dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80328de:	7bfa      	ldrb	r2, [r7, #15]
 80328e0:	6879      	ldr	r1, [r7, #4]
 80328e2:	4613      	mov	r3, r2
 80328e4:	00db      	lsls	r3, r3, #3
 80328e6:	4413      	add	r3, r2
 80328e8:	009b      	lsls	r3, r3, #2
 80328ea:	440b      	add	r3, r1
 80328ec:	3354      	adds	r3, #84	; 0x54
 80328ee:	2200      	movs	r2, #0
 80328f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80328f2:	7bfb      	ldrb	r3, [r7, #15]
 80328f4:	3301      	adds	r3, #1
 80328f6:	73fb      	strb	r3, [r7, #15]
 80328f8:	7bfa      	ldrb	r2, [r7, #15]
 80328fa:	687b      	ldr	r3, [r7, #4]
 80328fc:	685b      	ldr	r3, [r3, #4]
 80328fe:	429a      	cmp	r2, r3
 8032900:	d3af      	bcc.n	8032862 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8032902:	2300      	movs	r3, #0
 8032904:	73fb      	strb	r3, [r7, #15]
 8032906:	e044      	b.n	8032992 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8032908:	7bfa      	ldrb	r2, [r7, #15]
 803290a:	6879      	ldr	r1, [r7, #4]
 803290c:	4613      	mov	r3, r2
 803290e:	00db      	lsls	r3, r3, #3
 8032910:	4413      	add	r3, r2
 8032912:	009b      	lsls	r3, r3, #2
 8032914:	440b      	add	r3, r1
 8032916:	f203 237d 	addw	r3, r3, #637	; 0x27d
 803291a:	2200      	movs	r2, #0
 803291c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 803291e:	7bfa      	ldrb	r2, [r7, #15]
 8032920:	6879      	ldr	r1, [r7, #4]
 8032922:	4613      	mov	r3, r2
 8032924:	00db      	lsls	r3, r3, #3
 8032926:	4413      	add	r3, r2
 8032928:	009b      	lsls	r3, r3, #2
 803292a:	440b      	add	r3, r1
 803292c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8032930:	7bfa      	ldrb	r2, [r7, #15]
 8032932:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8032934:	7bfa      	ldrb	r2, [r7, #15]
 8032936:	6879      	ldr	r1, [r7, #4]
 8032938:	4613      	mov	r3, r2
 803293a:	00db      	lsls	r3, r3, #3
 803293c:	4413      	add	r3, r2
 803293e:	009b      	lsls	r3, r3, #2
 8032940:	440b      	add	r3, r1
 8032942:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8032946:	2200      	movs	r2, #0
 8032948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 803294a:	7bfa      	ldrb	r2, [r7, #15]
 803294c:	6879      	ldr	r1, [r7, #4]
 803294e:	4613      	mov	r3, r2
 8032950:	00db      	lsls	r3, r3, #3
 8032952:	4413      	add	r3, r2
 8032954:	009b      	lsls	r3, r3, #2
 8032956:	440b      	add	r3, r1
 8032958:	f503 7322 	add.w	r3, r3, #648	; 0x288
 803295c:	2200      	movs	r2, #0
 803295e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8032960:	7bfa      	ldrb	r2, [r7, #15]
 8032962:	6879      	ldr	r1, [r7, #4]
 8032964:	4613      	mov	r3, r2
 8032966:	00db      	lsls	r3, r3, #3
 8032968:	4413      	add	r3, r2
 803296a:	009b      	lsls	r3, r3, #2
 803296c:	440b      	add	r3, r1
 803296e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8032972:	2200      	movs	r2, #0
 8032974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8032976:	7bfa      	ldrb	r2, [r7, #15]
 8032978:	6879      	ldr	r1, [r7, #4]
 803297a:	4613      	mov	r3, r2
 803297c:	00db      	lsls	r3, r3, #3
 803297e:	4413      	add	r3, r2
 8032980:	009b      	lsls	r3, r3, #2
 8032982:	440b      	add	r3, r1
 8032984:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8032988:	2200      	movs	r2, #0
 803298a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 803298c:	7bfb      	ldrb	r3, [r7, #15]
 803298e:	3301      	adds	r3, #1
 8032990:	73fb      	strb	r3, [r7, #15]
 8032992:	7bfa      	ldrb	r2, [r7, #15]
 8032994:	687b      	ldr	r3, [r7, #4]
 8032996:	685b      	ldr	r3, [r3, #4]
 8032998:	429a      	cmp	r2, r3
 803299a:	d3b5      	bcc.n	8032908 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 803299c:	687b      	ldr	r3, [r7, #4]
 803299e:	681b      	ldr	r3, [r3, #0]
 80329a0:	603b      	str	r3, [r7, #0]
 80329a2:	687e      	ldr	r6, [r7, #4]
 80329a4:	466d      	mov	r5, sp
 80329a6:	f106 0410 	add.w	r4, r6, #16
 80329aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80329ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80329ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80329b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80329b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80329b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80329ba:	1d33      	adds	r3, r6, #4
 80329bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80329be:	6838      	ldr	r0, [r7, #0]
 80329c0:	f008 fafe 	bl	803afc0 <USB_DevInit>
 80329c4:	4603      	mov	r3, r0
 80329c6:	2b00      	cmp	r3, #0
 80329c8:	d005      	beq.n	80329d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80329ca:	687b      	ldr	r3, [r7, #4]
 80329cc:	2202      	movs	r2, #2
 80329ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80329d2:	2301      	movs	r3, #1
 80329d4:	e014      	b.n	8032a00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80329d6:	687b      	ldr	r3, [r7, #4]
 80329d8:	2200      	movs	r2, #0
 80329da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80329de:	687b      	ldr	r3, [r7, #4]
 80329e0:	2201      	movs	r2, #1
 80329e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80329e6:	687b      	ldr	r3, [r7, #4]
 80329e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80329ea:	2b01      	cmp	r3, #1
 80329ec:	d102      	bne.n	80329f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80329ee:	6878      	ldr	r0, [r7, #4]
 80329f0:	f001 f98c 	bl	8033d0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80329f4:	687b      	ldr	r3, [r7, #4]
 80329f6:	681b      	ldr	r3, [r3, #0]
 80329f8:	4618      	mov	r0, r3
 80329fa:	f009 fc4c 	bl	803c296 <USB_DevDisconnect>

  return HAL_OK;
 80329fe:	2300      	movs	r3, #0
}
 8032a00:	4618      	mov	r0, r3
 8032a02:	3714      	adds	r7, #20
 8032a04:	46bd      	mov	sp, r7
 8032a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08032a08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8032a08:	b580      	push	{r7, lr}
 8032a0a:	b084      	sub	sp, #16
 8032a0c:	af00      	add	r7, sp, #0
 8032a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8032a10:	687b      	ldr	r3, [r7, #4]
 8032a12:	681b      	ldr	r3, [r3, #0]
 8032a14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8032a16:	687b      	ldr	r3, [r7, #4]
 8032a18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8032a1c:	2b01      	cmp	r3, #1
 8032a1e:	d101      	bne.n	8032a24 <HAL_PCD_Start+0x1c>
 8032a20:	2302      	movs	r3, #2
 8032a22:	e020      	b.n	8032a66 <HAL_PCD_Start+0x5e>
 8032a24:	687b      	ldr	r3, [r7, #4]
 8032a26:	2201      	movs	r2, #1
 8032a28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8032a2c:	687b      	ldr	r3, [r7, #4]
 8032a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032a30:	2b01      	cmp	r3, #1
 8032a32:	d109      	bne.n	8032a48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8032a34:	687b      	ldr	r3, [r7, #4]
 8032a36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8032a38:	2b01      	cmp	r3, #1
 8032a3a:	d005      	beq.n	8032a48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8032a3c:	68fb      	ldr	r3, [r7, #12]
 8032a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8032a44:	68fb      	ldr	r3, [r7, #12]
 8032a46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8032a48:	687b      	ldr	r3, [r7, #4]
 8032a4a:	681b      	ldr	r3, [r3, #0]
 8032a4c:	4618      	mov	r0, r3
 8032a4e:	f008 fa49 	bl	803aee4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8032a52:	687b      	ldr	r3, [r7, #4]
 8032a54:	681b      	ldr	r3, [r3, #0]
 8032a56:	4618      	mov	r0, r3
 8032a58:	f009 fbfc 	bl	803c254 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8032a5c:	687b      	ldr	r3, [r7, #4]
 8032a5e:	2200      	movs	r2, #0
 8032a60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8032a64:	2300      	movs	r3, #0
}
 8032a66:	4618      	mov	r0, r3
 8032a68:	3710      	adds	r7, #16
 8032a6a:	46bd      	mov	sp, r7
 8032a6c:	bd80      	pop	{r7, pc}

08032a6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8032a6e:	b590      	push	{r4, r7, lr}
 8032a70:	b08d      	sub	sp, #52	; 0x34
 8032a72:	af00      	add	r7, sp, #0
 8032a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8032a76:	687b      	ldr	r3, [r7, #4]
 8032a78:	681b      	ldr	r3, [r3, #0]
 8032a7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8032a7c:	6a3b      	ldr	r3, [r7, #32]
 8032a7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8032a80:	687b      	ldr	r3, [r7, #4]
 8032a82:	681b      	ldr	r3, [r3, #0]
 8032a84:	4618      	mov	r0, r3
 8032a86:	f009 fcba 	bl	803c3fe <USB_GetMode>
 8032a8a:	4603      	mov	r3, r0
 8032a8c:	2b00      	cmp	r3, #0
 8032a8e:	f040 84b7 	bne.w	8033400 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8032a92:	687b      	ldr	r3, [r7, #4]
 8032a94:	681b      	ldr	r3, [r3, #0]
 8032a96:	4618      	mov	r0, r3
 8032a98:	f009 fc1e 	bl	803c2d8 <USB_ReadInterrupts>
 8032a9c:	4603      	mov	r3, r0
 8032a9e:	2b00      	cmp	r3, #0
 8032aa0:	f000 84ad 	beq.w	80333fe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8032aa4:	69fb      	ldr	r3, [r7, #28]
 8032aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032aaa:	689b      	ldr	r3, [r3, #8]
 8032aac:	0a1b      	lsrs	r3, r3, #8
 8032aae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8032ab2:	687b      	ldr	r3, [r7, #4]
 8032ab4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8032ab8:	687b      	ldr	r3, [r7, #4]
 8032aba:	681b      	ldr	r3, [r3, #0]
 8032abc:	4618      	mov	r0, r3
 8032abe:	f009 fc0b 	bl	803c2d8 <USB_ReadInterrupts>
 8032ac2:	4603      	mov	r3, r0
 8032ac4:	f003 0302 	and.w	r3, r3, #2
 8032ac8:	2b02      	cmp	r3, #2
 8032aca:	d107      	bne.n	8032adc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8032acc:	687b      	ldr	r3, [r7, #4]
 8032ace:	681b      	ldr	r3, [r3, #0]
 8032ad0:	695a      	ldr	r2, [r3, #20]
 8032ad2:	687b      	ldr	r3, [r7, #4]
 8032ad4:	681b      	ldr	r3, [r3, #0]
 8032ad6:	f002 0202 	and.w	r2, r2, #2
 8032ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8032adc:	687b      	ldr	r3, [r7, #4]
 8032ade:	681b      	ldr	r3, [r3, #0]
 8032ae0:	4618      	mov	r0, r3
 8032ae2:	f009 fbf9 	bl	803c2d8 <USB_ReadInterrupts>
 8032ae6:	4603      	mov	r3, r0
 8032ae8:	f003 0310 	and.w	r3, r3, #16
 8032aec:	2b10      	cmp	r3, #16
 8032aee:	d161      	bne.n	8032bb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8032af0:	687b      	ldr	r3, [r7, #4]
 8032af2:	681b      	ldr	r3, [r3, #0]
 8032af4:	699a      	ldr	r2, [r3, #24]
 8032af6:	687b      	ldr	r3, [r7, #4]
 8032af8:	681b      	ldr	r3, [r3, #0]
 8032afa:	f022 0210 	bic.w	r2, r2, #16
 8032afe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8032b00:	6a3b      	ldr	r3, [r7, #32]
 8032b02:	6a1b      	ldr	r3, [r3, #32]
 8032b04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8032b06:	69bb      	ldr	r3, [r7, #24]
 8032b08:	f003 020f 	and.w	r2, r3, #15
 8032b0c:	4613      	mov	r3, r2
 8032b0e:	00db      	lsls	r3, r3, #3
 8032b10:	4413      	add	r3, r2
 8032b12:	009b      	lsls	r3, r3, #2
 8032b14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8032b18:	687a      	ldr	r2, [r7, #4]
 8032b1a:	4413      	add	r3, r2
 8032b1c:	3304      	adds	r3, #4
 8032b1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8032b20:	69bb      	ldr	r3, [r7, #24]
 8032b22:	0c5b      	lsrs	r3, r3, #17
 8032b24:	f003 030f 	and.w	r3, r3, #15
 8032b28:	2b02      	cmp	r3, #2
 8032b2a:	d124      	bne.n	8032b76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8032b2c:	69ba      	ldr	r2, [r7, #24]
 8032b2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8032b32:	4013      	ands	r3, r2
 8032b34:	2b00      	cmp	r3, #0
 8032b36:	d035      	beq.n	8032ba4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8032b38:	697b      	ldr	r3, [r7, #20]
 8032b3a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8032b3c:	69bb      	ldr	r3, [r7, #24]
 8032b3e:	091b      	lsrs	r3, r3, #4
 8032b40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8032b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8032b46:	b29b      	uxth	r3, r3
 8032b48:	461a      	mov	r2, r3
 8032b4a:	6a38      	ldr	r0, [r7, #32]
 8032b4c:	f009 fa30 	bl	803bfb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8032b50:	697b      	ldr	r3, [r7, #20]
 8032b52:	691a      	ldr	r2, [r3, #16]
 8032b54:	69bb      	ldr	r3, [r7, #24]
 8032b56:	091b      	lsrs	r3, r3, #4
 8032b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8032b5c:	441a      	add	r2, r3
 8032b5e:	697b      	ldr	r3, [r7, #20]
 8032b60:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8032b62:	697b      	ldr	r3, [r7, #20]
 8032b64:	6a1a      	ldr	r2, [r3, #32]
 8032b66:	69bb      	ldr	r3, [r7, #24]
 8032b68:	091b      	lsrs	r3, r3, #4
 8032b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8032b6e:	441a      	add	r2, r3
 8032b70:	697b      	ldr	r3, [r7, #20]
 8032b72:	621a      	str	r2, [r3, #32]
 8032b74:	e016      	b.n	8032ba4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8032b76:	69bb      	ldr	r3, [r7, #24]
 8032b78:	0c5b      	lsrs	r3, r3, #17
 8032b7a:	f003 030f 	and.w	r3, r3, #15
 8032b7e:	2b06      	cmp	r3, #6
 8032b80:	d110      	bne.n	8032ba4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8032b82:	687b      	ldr	r3, [r7, #4]
 8032b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8032b88:	2208      	movs	r2, #8
 8032b8a:	4619      	mov	r1, r3
 8032b8c:	6a38      	ldr	r0, [r7, #32]
 8032b8e:	f009 fa0f 	bl	803bfb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8032b92:	697b      	ldr	r3, [r7, #20]
 8032b94:	6a1a      	ldr	r2, [r3, #32]
 8032b96:	69bb      	ldr	r3, [r7, #24]
 8032b98:	091b      	lsrs	r3, r3, #4
 8032b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8032b9e:	441a      	add	r2, r3
 8032ba0:	697b      	ldr	r3, [r7, #20]
 8032ba2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8032ba4:	687b      	ldr	r3, [r7, #4]
 8032ba6:	681b      	ldr	r3, [r3, #0]
 8032ba8:	699a      	ldr	r2, [r3, #24]
 8032baa:	687b      	ldr	r3, [r7, #4]
 8032bac:	681b      	ldr	r3, [r3, #0]
 8032bae:	f042 0210 	orr.w	r2, r2, #16
 8032bb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8032bb4:	687b      	ldr	r3, [r7, #4]
 8032bb6:	681b      	ldr	r3, [r3, #0]
 8032bb8:	4618      	mov	r0, r3
 8032bba:	f009 fb8d 	bl	803c2d8 <USB_ReadInterrupts>
 8032bbe:	4603      	mov	r3, r0
 8032bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8032bc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8032bc8:	f040 80a7 	bne.w	8032d1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8032bcc:	2300      	movs	r3, #0
 8032bce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8032bd0:	687b      	ldr	r3, [r7, #4]
 8032bd2:	681b      	ldr	r3, [r3, #0]
 8032bd4:	4618      	mov	r0, r3
 8032bd6:	f009 fb92 	bl	803c2fe <USB_ReadDevAllOutEpInterrupt>
 8032bda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8032bdc:	e099      	b.n	8032d12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8032bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032be0:	f003 0301 	and.w	r3, r3, #1
 8032be4:	2b00      	cmp	r3, #0
 8032be6:	f000 808e 	beq.w	8032d06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8032bea:	687b      	ldr	r3, [r7, #4]
 8032bec:	681b      	ldr	r3, [r3, #0]
 8032bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032bf0:	b2d2      	uxtb	r2, r2
 8032bf2:	4611      	mov	r1, r2
 8032bf4:	4618      	mov	r0, r3
 8032bf6:	f009 fbb6 	bl	803c366 <USB_ReadDevOutEPInterrupt>
 8032bfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8032bfc:	693b      	ldr	r3, [r7, #16]
 8032bfe:	f003 0301 	and.w	r3, r3, #1
 8032c02:	2b00      	cmp	r3, #0
 8032c04:	d00c      	beq.n	8032c20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8032c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c08:	015a      	lsls	r2, r3, #5
 8032c0a:	69fb      	ldr	r3, [r7, #28]
 8032c0c:	4413      	add	r3, r2
 8032c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032c12:	461a      	mov	r2, r3
 8032c14:	2301      	movs	r3, #1
 8032c16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8032c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8032c1a:	6878      	ldr	r0, [r7, #4]
 8032c1c:	f000 fef0 	bl	8033a00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8032c20:	693b      	ldr	r3, [r7, #16]
 8032c22:	f003 0308 	and.w	r3, r3, #8
 8032c26:	2b00      	cmp	r3, #0
 8032c28:	d00c      	beq.n	8032c44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8032c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c2c:	015a      	lsls	r2, r3, #5
 8032c2e:	69fb      	ldr	r3, [r7, #28]
 8032c30:	4413      	add	r3, r2
 8032c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032c36:	461a      	mov	r2, r3
 8032c38:	2308      	movs	r3, #8
 8032c3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8032c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8032c3e:	6878      	ldr	r0, [r7, #4]
 8032c40:	f000 ffc6 	bl	8033bd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8032c44:	693b      	ldr	r3, [r7, #16]
 8032c46:	f003 0310 	and.w	r3, r3, #16
 8032c4a:	2b00      	cmp	r3, #0
 8032c4c:	d008      	beq.n	8032c60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8032c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c50:	015a      	lsls	r2, r3, #5
 8032c52:	69fb      	ldr	r3, [r7, #28]
 8032c54:	4413      	add	r3, r2
 8032c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032c5a:	461a      	mov	r2, r3
 8032c5c:	2310      	movs	r3, #16
 8032c5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8032c60:	693b      	ldr	r3, [r7, #16]
 8032c62:	f003 0302 	and.w	r3, r3, #2
 8032c66:	2b00      	cmp	r3, #0
 8032c68:	d030      	beq.n	8032ccc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8032c6a:	6a3b      	ldr	r3, [r7, #32]
 8032c6c:	695b      	ldr	r3, [r3, #20]
 8032c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8032c72:	2b80      	cmp	r3, #128	; 0x80
 8032c74:	d109      	bne.n	8032c8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8032c76:	69fb      	ldr	r3, [r7, #28]
 8032c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032c7c:	685b      	ldr	r3, [r3, #4]
 8032c7e:	69fa      	ldr	r2, [r7, #28]
 8032c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8032c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8032c88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8032c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032c8c:	4613      	mov	r3, r2
 8032c8e:	00db      	lsls	r3, r3, #3
 8032c90:	4413      	add	r3, r2
 8032c92:	009b      	lsls	r3, r3, #2
 8032c94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8032c98:	687a      	ldr	r2, [r7, #4]
 8032c9a:	4413      	add	r3, r2
 8032c9c:	3304      	adds	r3, #4
 8032c9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8032ca0:	697b      	ldr	r3, [r7, #20]
 8032ca2:	78db      	ldrb	r3, [r3, #3]
 8032ca4:	2b01      	cmp	r3, #1
 8032ca6:	d108      	bne.n	8032cba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8032ca8:	697b      	ldr	r3, [r7, #20]
 8032caa:	2200      	movs	r2, #0
 8032cac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8032cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cb0:	b2db      	uxtb	r3, r3
 8032cb2:	4619      	mov	r1, r3
 8032cb4:	6878      	ldr	r0, [r7, #4]
 8032cb6:	f00b fef7 	bl	803eaa8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8032cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cbc:	015a      	lsls	r2, r3, #5
 8032cbe:	69fb      	ldr	r3, [r7, #28]
 8032cc0:	4413      	add	r3, r2
 8032cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032cc6:	461a      	mov	r2, r3
 8032cc8:	2302      	movs	r3, #2
 8032cca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8032ccc:	693b      	ldr	r3, [r7, #16]
 8032cce:	f003 0320 	and.w	r3, r3, #32
 8032cd2:	2b00      	cmp	r3, #0
 8032cd4:	d008      	beq.n	8032ce8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8032cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cd8:	015a      	lsls	r2, r3, #5
 8032cda:	69fb      	ldr	r3, [r7, #28]
 8032cdc:	4413      	add	r3, r2
 8032cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032ce2:	461a      	mov	r2, r3
 8032ce4:	2320      	movs	r3, #32
 8032ce6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8032ce8:	693b      	ldr	r3, [r7, #16]
 8032cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8032cee:	2b00      	cmp	r3, #0
 8032cf0:	d009      	beq.n	8032d06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8032cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cf4:	015a      	lsls	r2, r3, #5
 8032cf6:	69fb      	ldr	r3, [r7, #28]
 8032cf8:	4413      	add	r3, r2
 8032cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032cfe:	461a      	mov	r2, r3
 8032d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8032d04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8032d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032d08:	3301      	adds	r3, #1
 8032d0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8032d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032d0e:	085b      	lsrs	r3, r3, #1
 8032d10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8032d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032d14:	2b00      	cmp	r3, #0
 8032d16:	f47f af62 	bne.w	8032bde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8032d1a:	687b      	ldr	r3, [r7, #4]
 8032d1c:	681b      	ldr	r3, [r3, #0]
 8032d1e:	4618      	mov	r0, r3
 8032d20:	f009 fada 	bl	803c2d8 <USB_ReadInterrupts>
 8032d24:	4603      	mov	r3, r0
 8032d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8032d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8032d2e:	f040 80db 	bne.w	8032ee8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8032d32:	687b      	ldr	r3, [r7, #4]
 8032d34:	681b      	ldr	r3, [r3, #0]
 8032d36:	4618      	mov	r0, r3
 8032d38:	f009 fafb 	bl	803c332 <USB_ReadDevAllInEpInterrupt>
 8032d3c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8032d3e:	2300      	movs	r3, #0
 8032d40:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8032d42:	e0cd      	b.n	8032ee0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8032d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032d46:	f003 0301 	and.w	r3, r3, #1
 8032d4a:	2b00      	cmp	r3, #0
 8032d4c:	f000 80c2 	beq.w	8032ed4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8032d50:	687b      	ldr	r3, [r7, #4]
 8032d52:	681b      	ldr	r3, [r3, #0]
 8032d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032d56:	b2d2      	uxtb	r2, r2
 8032d58:	4611      	mov	r1, r2
 8032d5a:	4618      	mov	r0, r3
 8032d5c:	f009 fb21 	bl	803c3a2 <USB_ReadDevInEPInterrupt>
 8032d60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8032d62:	693b      	ldr	r3, [r7, #16]
 8032d64:	f003 0301 	and.w	r3, r3, #1
 8032d68:	2b00      	cmp	r3, #0
 8032d6a:	d057      	beq.n	8032e1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8032d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032d6e:	f003 030f 	and.w	r3, r3, #15
 8032d72:	2201      	movs	r2, #1
 8032d74:	fa02 f303 	lsl.w	r3, r2, r3
 8032d78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8032d7a:	69fb      	ldr	r3, [r7, #28]
 8032d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8032d82:	68fb      	ldr	r3, [r7, #12]
 8032d84:	43db      	mvns	r3, r3
 8032d86:	69f9      	ldr	r1, [r7, #28]
 8032d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8032d8c:	4013      	ands	r3, r2
 8032d8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8032d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032d92:	015a      	lsls	r2, r3, #5
 8032d94:	69fb      	ldr	r3, [r7, #28]
 8032d96:	4413      	add	r3, r2
 8032d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032d9c:	461a      	mov	r2, r3
 8032d9e:	2301      	movs	r3, #1
 8032da0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8032da2:	687b      	ldr	r3, [r7, #4]
 8032da4:	691b      	ldr	r3, [r3, #16]
 8032da6:	2b01      	cmp	r3, #1
 8032da8:	d132      	bne.n	8032e10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8032daa:	6879      	ldr	r1, [r7, #4]
 8032dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032dae:	4613      	mov	r3, r2
 8032db0:	00db      	lsls	r3, r3, #3
 8032db2:	4413      	add	r3, r2
 8032db4:	009b      	lsls	r3, r3, #2
 8032db6:	440b      	add	r3, r1
 8032db8:	334c      	adds	r3, #76	; 0x4c
 8032dba:	6819      	ldr	r1, [r3, #0]
 8032dbc:	6878      	ldr	r0, [r7, #4]
 8032dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032dc0:	4613      	mov	r3, r2
 8032dc2:	00db      	lsls	r3, r3, #3
 8032dc4:	4413      	add	r3, r2
 8032dc6:	009b      	lsls	r3, r3, #2
 8032dc8:	4403      	add	r3, r0
 8032dca:	3348      	adds	r3, #72	; 0x48
 8032dcc:	681b      	ldr	r3, [r3, #0]
 8032dce:	4419      	add	r1, r3
 8032dd0:	6878      	ldr	r0, [r7, #4]
 8032dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032dd4:	4613      	mov	r3, r2
 8032dd6:	00db      	lsls	r3, r3, #3
 8032dd8:	4413      	add	r3, r2
 8032dda:	009b      	lsls	r3, r3, #2
 8032ddc:	4403      	add	r3, r0
 8032dde:	334c      	adds	r3, #76	; 0x4c
 8032de0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8032de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032de4:	2b00      	cmp	r3, #0
 8032de6:	d113      	bne.n	8032e10 <HAL_PCD_IRQHandler+0x3a2>
 8032de8:	6879      	ldr	r1, [r7, #4]
 8032dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032dec:	4613      	mov	r3, r2
 8032dee:	00db      	lsls	r3, r3, #3
 8032df0:	4413      	add	r3, r2
 8032df2:	009b      	lsls	r3, r3, #2
 8032df4:	440b      	add	r3, r1
 8032df6:	3354      	adds	r3, #84	; 0x54
 8032df8:	681b      	ldr	r3, [r3, #0]
 8032dfa:	2b00      	cmp	r3, #0
 8032dfc:	d108      	bne.n	8032e10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8032dfe:	687b      	ldr	r3, [r7, #4]
 8032e00:	6818      	ldr	r0, [r3, #0]
 8032e02:	687b      	ldr	r3, [r7, #4]
 8032e04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8032e08:	461a      	mov	r2, r3
 8032e0a:	2101      	movs	r1, #1
 8032e0c:	f009 fb2a 	bl	803c464 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8032e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032e12:	b2db      	uxtb	r3, r3
 8032e14:	4619      	mov	r1, r3
 8032e16:	6878      	ldr	r0, [r7, #4]
 8032e18:	f00b fdc1 	bl	803e99e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8032e1c:	693b      	ldr	r3, [r7, #16]
 8032e1e:	f003 0308 	and.w	r3, r3, #8
 8032e22:	2b00      	cmp	r3, #0
 8032e24:	d008      	beq.n	8032e38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8032e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032e28:	015a      	lsls	r2, r3, #5
 8032e2a:	69fb      	ldr	r3, [r7, #28]
 8032e2c:	4413      	add	r3, r2
 8032e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032e32:	461a      	mov	r2, r3
 8032e34:	2308      	movs	r3, #8
 8032e36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8032e38:	693b      	ldr	r3, [r7, #16]
 8032e3a:	f003 0310 	and.w	r3, r3, #16
 8032e3e:	2b00      	cmp	r3, #0
 8032e40:	d008      	beq.n	8032e54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8032e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032e44:	015a      	lsls	r2, r3, #5
 8032e46:	69fb      	ldr	r3, [r7, #28]
 8032e48:	4413      	add	r3, r2
 8032e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032e4e:	461a      	mov	r2, r3
 8032e50:	2310      	movs	r3, #16
 8032e52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8032e54:	693b      	ldr	r3, [r7, #16]
 8032e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032e5a:	2b00      	cmp	r3, #0
 8032e5c:	d008      	beq.n	8032e70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8032e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032e60:	015a      	lsls	r2, r3, #5
 8032e62:	69fb      	ldr	r3, [r7, #28]
 8032e64:	4413      	add	r3, r2
 8032e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032e6a:	461a      	mov	r2, r3
 8032e6c:	2340      	movs	r3, #64	; 0x40
 8032e6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8032e70:	693b      	ldr	r3, [r7, #16]
 8032e72:	f003 0302 	and.w	r3, r3, #2
 8032e76:	2b00      	cmp	r3, #0
 8032e78:	d023      	beq.n	8032ec2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8032e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8032e7c:	6a38      	ldr	r0, [r7, #32]
 8032e7e:	f008 f9fd 	bl	803b27c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8032e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032e84:	4613      	mov	r3, r2
 8032e86:	00db      	lsls	r3, r3, #3
 8032e88:	4413      	add	r3, r2
 8032e8a:	009b      	lsls	r3, r3, #2
 8032e8c:	3338      	adds	r3, #56	; 0x38
 8032e8e:	687a      	ldr	r2, [r7, #4]
 8032e90:	4413      	add	r3, r2
 8032e92:	3304      	adds	r3, #4
 8032e94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8032e96:	697b      	ldr	r3, [r7, #20]
 8032e98:	78db      	ldrb	r3, [r3, #3]
 8032e9a:	2b01      	cmp	r3, #1
 8032e9c:	d108      	bne.n	8032eb0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8032e9e:	697b      	ldr	r3, [r7, #20]
 8032ea0:	2200      	movs	r2, #0
 8032ea2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8032ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ea6:	b2db      	uxtb	r3, r3
 8032ea8:	4619      	mov	r1, r3
 8032eaa:	6878      	ldr	r0, [r7, #4]
 8032eac:	f00b fe0e 	bl	803eacc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8032eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032eb2:	015a      	lsls	r2, r3, #5
 8032eb4:	69fb      	ldr	r3, [r7, #28]
 8032eb6:	4413      	add	r3, r2
 8032eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8032ebc:	461a      	mov	r2, r3
 8032ebe:	2302      	movs	r3, #2
 8032ec0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8032ec2:	693b      	ldr	r3, [r7, #16]
 8032ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8032ec8:	2b00      	cmp	r3, #0
 8032eca:	d003      	beq.n	8032ed4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8032ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8032ece:	6878      	ldr	r0, [r7, #4]
 8032ed0:	f000 fd08 	bl	80338e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8032ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ed6:	3301      	adds	r3, #1
 8032ed8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8032eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032edc:	085b      	lsrs	r3, r3, #1
 8032ede:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8032ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032ee2:	2b00      	cmp	r3, #0
 8032ee4:	f47f af2e 	bne.w	8032d44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8032ee8:	687b      	ldr	r3, [r7, #4]
 8032eea:	681b      	ldr	r3, [r3, #0]
 8032eec:	4618      	mov	r0, r3
 8032eee:	f009 f9f3 	bl	803c2d8 <USB_ReadInterrupts>
 8032ef2:	4603      	mov	r3, r0
 8032ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8032ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8032efc:	d122      	bne.n	8032f44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8032efe:	69fb      	ldr	r3, [r7, #28]
 8032f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032f04:	685b      	ldr	r3, [r3, #4]
 8032f06:	69fa      	ldr	r2, [r7, #28]
 8032f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8032f0c:	f023 0301 	bic.w	r3, r3, #1
 8032f10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8032f12:	687b      	ldr	r3, [r7, #4]
 8032f14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8032f18:	2b01      	cmp	r3, #1
 8032f1a:	d108      	bne.n	8032f2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8032f1c:	687b      	ldr	r3, [r7, #4]
 8032f1e:	2200      	movs	r2, #0
 8032f20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8032f24:	2100      	movs	r1, #0
 8032f26:	6878      	ldr	r0, [r7, #4]
 8032f28:	f000 ff14 	bl	8033d54 <HAL_PCDEx_LPM_Callback>
 8032f2c:	e002      	b.n	8032f34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8032f2e:	6878      	ldr	r0, [r7, #4]
 8032f30:	f00b fdac 	bl	803ea8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8032f34:	687b      	ldr	r3, [r7, #4]
 8032f36:	681b      	ldr	r3, [r3, #0]
 8032f38:	695a      	ldr	r2, [r3, #20]
 8032f3a:	687b      	ldr	r3, [r7, #4]
 8032f3c:	681b      	ldr	r3, [r3, #0]
 8032f3e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8032f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8032f44:	687b      	ldr	r3, [r7, #4]
 8032f46:	681b      	ldr	r3, [r3, #0]
 8032f48:	4618      	mov	r0, r3
 8032f4a:	f009 f9c5 	bl	803c2d8 <USB_ReadInterrupts>
 8032f4e:	4603      	mov	r3, r0
 8032f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8032f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8032f58:	d112      	bne.n	8032f80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8032f5a:	69fb      	ldr	r3, [r7, #28]
 8032f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032f60:	689b      	ldr	r3, [r3, #8]
 8032f62:	f003 0301 	and.w	r3, r3, #1
 8032f66:	2b01      	cmp	r3, #1
 8032f68:	d102      	bne.n	8032f70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8032f6a:	6878      	ldr	r0, [r7, #4]
 8032f6c:	f00b fd68 	bl	803ea40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8032f70:	687b      	ldr	r3, [r7, #4]
 8032f72:	681b      	ldr	r3, [r3, #0]
 8032f74:	695a      	ldr	r2, [r3, #20]
 8032f76:	687b      	ldr	r3, [r7, #4]
 8032f78:	681b      	ldr	r3, [r3, #0]
 8032f7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8032f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8032f80:	687b      	ldr	r3, [r7, #4]
 8032f82:	681b      	ldr	r3, [r3, #0]
 8032f84:	4618      	mov	r0, r3
 8032f86:	f009 f9a7 	bl	803c2d8 <USB_ReadInterrupts>
 8032f8a:	4603      	mov	r3, r0
 8032f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8032f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8032f94:	d121      	bne.n	8032fda <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8032f96:	687b      	ldr	r3, [r7, #4]
 8032f98:	681b      	ldr	r3, [r3, #0]
 8032f9a:	695a      	ldr	r2, [r3, #20]
 8032f9c:	687b      	ldr	r3, [r7, #4]
 8032f9e:	681b      	ldr	r3, [r3, #0]
 8032fa0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8032fa4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8032fa6:	687b      	ldr	r3, [r7, #4]
 8032fa8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8032fac:	2b00      	cmp	r3, #0
 8032fae:	d111      	bne.n	8032fd4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8032fb0:	687b      	ldr	r3, [r7, #4]
 8032fb2:	2201      	movs	r2, #1
 8032fb4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8032fb8:	687b      	ldr	r3, [r7, #4]
 8032fba:	681b      	ldr	r3, [r3, #0]
 8032fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032fbe:	089b      	lsrs	r3, r3, #2
 8032fc0:	f003 020f 	and.w	r2, r3, #15
 8032fc4:	687b      	ldr	r3, [r7, #4]
 8032fc6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8032fca:	2101      	movs	r1, #1
 8032fcc:	6878      	ldr	r0, [r7, #4]
 8032fce:	f000 fec1 	bl	8033d54 <HAL_PCDEx_LPM_Callback>
 8032fd2:	e002      	b.n	8032fda <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8032fd4:	6878      	ldr	r0, [r7, #4]
 8032fd6:	f00b fd33 	bl	803ea40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8032fda:	687b      	ldr	r3, [r7, #4]
 8032fdc:	681b      	ldr	r3, [r3, #0]
 8032fde:	4618      	mov	r0, r3
 8032fe0:	f009 f97a 	bl	803c2d8 <USB_ReadInterrupts>
 8032fe4:	4603      	mov	r3, r0
 8032fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8032fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032fee:	f040 80b7 	bne.w	8033160 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8032ff2:	69fb      	ldr	r3, [r7, #28]
 8032ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032ff8:	685b      	ldr	r3, [r3, #4]
 8032ffa:	69fa      	ldr	r2, [r7, #28]
 8032ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8033000:	f023 0301 	bic.w	r3, r3, #1
 8033004:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8033006:	687b      	ldr	r3, [r7, #4]
 8033008:	681b      	ldr	r3, [r3, #0]
 803300a:	2110      	movs	r1, #16
 803300c:	4618      	mov	r0, r3
 803300e:	f008 f935 	bl	803b27c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8033012:	2300      	movs	r3, #0
 8033014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8033016:	e046      	b.n	80330a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8033018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803301a:	015a      	lsls	r2, r3, #5
 803301c:	69fb      	ldr	r3, [r7, #28]
 803301e:	4413      	add	r3, r2
 8033020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8033024:	461a      	mov	r2, r3
 8033026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803302a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 803302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803302e:	015a      	lsls	r2, r3, #5
 8033030:	69fb      	ldr	r3, [r7, #28]
 8033032:	4413      	add	r3, r2
 8033034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8033038:	681b      	ldr	r3, [r3, #0]
 803303a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803303c:	0151      	lsls	r1, r2, #5
 803303e:	69fa      	ldr	r2, [r7, #28]
 8033040:	440a      	add	r2, r1
 8033042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8033046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803304a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 803304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803304e:	015a      	lsls	r2, r3, #5
 8033050:	69fb      	ldr	r3, [r7, #28]
 8033052:	4413      	add	r3, r2
 8033054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033058:	461a      	mov	r2, r3
 803305a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803305e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8033060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033062:	015a      	lsls	r2, r3, #5
 8033064:	69fb      	ldr	r3, [r7, #28]
 8033066:	4413      	add	r3, r2
 8033068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803306c:	681b      	ldr	r3, [r3, #0]
 803306e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8033070:	0151      	lsls	r1, r2, #5
 8033072:	69fa      	ldr	r2, [r7, #28]
 8033074:	440a      	add	r2, r1
 8033076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803307a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803307e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8033080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033082:	015a      	lsls	r2, r3, #5
 8033084:	69fb      	ldr	r3, [r7, #28]
 8033086:	4413      	add	r3, r2
 8033088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803308c:	681b      	ldr	r3, [r3, #0]
 803308e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8033090:	0151      	lsls	r1, r2, #5
 8033092:	69fa      	ldr	r2, [r7, #28]
 8033094:	440a      	add	r2, r1
 8033096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803309a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803309e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80330a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80330a2:	3301      	adds	r3, #1
 80330a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80330a6:	687b      	ldr	r3, [r7, #4]
 80330a8:	685b      	ldr	r3, [r3, #4]
 80330aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80330ac:	429a      	cmp	r2, r3
 80330ae:	d3b3      	bcc.n	8033018 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80330b0:	69fb      	ldr	r3, [r7, #28]
 80330b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80330b6:	69db      	ldr	r3, [r3, #28]
 80330b8:	69fa      	ldr	r2, [r7, #28]
 80330ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80330be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80330c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80330c4:	687b      	ldr	r3, [r7, #4]
 80330c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80330c8:	2b00      	cmp	r3, #0
 80330ca:	d016      	beq.n	80330fa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80330cc:	69fb      	ldr	r3, [r7, #28]
 80330ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80330d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80330d6:	69fa      	ldr	r2, [r7, #28]
 80330d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80330dc:	f043 030b 	orr.w	r3, r3, #11
 80330e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80330e4:	69fb      	ldr	r3, [r7, #28]
 80330e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80330ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80330ec:	69fa      	ldr	r2, [r7, #28]
 80330ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80330f2:	f043 030b 	orr.w	r3, r3, #11
 80330f6:	6453      	str	r3, [r2, #68]	; 0x44
 80330f8:	e015      	b.n	8033126 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80330fa:	69fb      	ldr	r3, [r7, #28]
 80330fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033100:	695a      	ldr	r2, [r3, #20]
 8033102:	69fb      	ldr	r3, [r7, #28]
 8033104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033108:	4619      	mov	r1, r3
 803310a:	f242 032b 	movw	r3, #8235	; 0x202b
 803310e:	4313      	orrs	r3, r2
 8033110:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8033112:	69fb      	ldr	r3, [r7, #28]
 8033114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033118:	691b      	ldr	r3, [r3, #16]
 803311a:	69fa      	ldr	r2, [r7, #28]
 803311c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8033120:	f043 030b 	orr.w	r3, r3, #11
 8033124:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8033126:	69fb      	ldr	r3, [r7, #28]
 8033128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803312c:	681b      	ldr	r3, [r3, #0]
 803312e:	69fa      	ldr	r2, [r7, #28]
 8033130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8033134:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8033138:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 803313a:	687b      	ldr	r3, [r7, #4]
 803313c:	6818      	ldr	r0, [r3, #0]
 803313e:	687b      	ldr	r3, [r7, #4]
 8033140:	691b      	ldr	r3, [r3, #16]
 8033142:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8033144:	687b      	ldr	r3, [r7, #4]
 8033146:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 803314a:	461a      	mov	r2, r3
 803314c:	f009 f98a 	bl	803c464 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8033150:	687b      	ldr	r3, [r7, #4]
 8033152:	681b      	ldr	r3, [r3, #0]
 8033154:	695a      	ldr	r2, [r3, #20]
 8033156:	687b      	ldr	r3, [r7, #4]
 8033158:	681b      	ldr	r3, [r3, #0]
 803315a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 803315e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8033160:	687b      	ldr	r3, [r7, #4]
 8033162:	681b      	ldr	r3, [r3, #0]
 8033164:	4618      	mov	r0, r3
 8033166:	f009 f8b7 	bl	803c2d8 <USB_ReadInterrupts>
 803316a:	4603      	mov	r3, r0
 803316c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8033170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033174:	d124      	bne.n	80331c0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8033176:	687b      	ldr	r3, [r7, #4]
 8033178:	681b      	ldr	r3, [r3, #0]
 803317a:	4618      	mov	r0, r3
 803317c:	f009 f94e 	bl	803c41c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8033180:	687b      	ldr	r3, [r7, #4]
 8033182:	681b      	ldr	r3, [r3, #0]
 8033184:	4618      	mov	r0, r3
 8033186:	f008 f8f6 	bl	803b376 <USB_GetDevSpeed>
 803318a:	4603      	mov	r3, r0
 803318c:	461a      	mov	r2, r3
 803318e:	687b      	ldr	r3, [r7, #4]
 8033190:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8033192:	687b      	ldr	r3, [r7, #4]
 8033194:	681c      	ldr	r4, [r3, #0]
 8033196:	f001 fd91 	bl	8034cbc <HAL_RCC_GetHCLKFreq>
 803319a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 803319c:	687b      	ldr	r3, [r7, #4]
 803319e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80331a0:	b2db      	uxtb	r3, r3
 80331a2:	461a      	mov	r2, r3
 80331a4:	4620      	mov	r0, r4
 80331a6:	f007 fdfb 	bl	803ada0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80331aa:	6878      	ldr	r0, [r7, #4]
 80331ac:	f00b fc1f 	bl	803e9ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80331b0:	687b      	ldr	r3, [r7, #4]
 80331b2:	681b      	ldr	r3, [r3, #0]
 80331b4:	695a      	ldr	r2, [r3, #20]
 80331b6:	687b      	ldr	r3, [r7, #4]
 80331b8:	681b      	ldr	r3, [r3, #0]
 80331ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80331be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80331c0:	687b      	ldr	r3, [r7, #4]
 80331c2:	681b      	ldr	r3, [r3, #0]
 80331c4:	4618      	mov	r0, r3
 80331c6:	f009 f887 	bl	803c2d8 <USB_ReadInterrupts>
 80331ca:	4603      	mov	r3, r0
 80331cc:	f003 0308 	and.w	r3, r3, #8
 80331d0:	2b08      	cmp	r3, #8
 80331d2:	d10a      	bne.n	80331ea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80331d4:	6878      	ldr	r0, [r7, #4]
 80331d6:	f00b fbfc 	bl	803e9d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80331da:	687b      	ldr	r3, [r7, #4]
 80331dc:	681b      	ldr	r3, [r3, #0]
 80331de:	695a      	ldr	r2, [r3, #20]
 80331e0:	687b      	ldr	r3, [r7, #4]
 80331e2:	681b      	ldr	r3, [r3, #0]
 80331e4:	f002 0208 	and.w	r2, r2, #8
 80331e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80331ea:	687b      	ldr	r3, [r7, #4]
 80331ec:	681b      	ldr	r3, [r3, #0]
 80331ee:	4618      	mov	r0, r3
 80331f0:	f009 f872 	bl	803c2d8 <USB_ReadInterrupts>
 80331f4:	4603      	mov	r3, r0
 80331f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80331fa:	2b80      	cmp	r3, #128	; 0x80
 80331fc:	d122      	bne.n	8033244 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80331fe:	6a3b      	ldr	r3, [r7, #32]
 8033200:	699b      	ldr	r3, [r3, #24]
 8033202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8033206:	6a3b      	ldr	r3, [r7, #32]
 8033208:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803320a:	2301      	movs	r3, #1
 803320c:	627b      	str	r3, [r7, #36]	; 0x24
 803320e:	e014      	b.n	803323a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8033210:	6879      	ldr	r1, [r7, #4]
 8033212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033214:	4613      	mov	r3, r2
 8033216:	00db      	lsls	r3, r3, #3
 8033218:	4413      	add	r3, r2
 803321a:	009b      	lsls	r3, r3, #2
 803321c:	440b      	add	r3, r1
 803321e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8033222:	781b      	ldrb	r3, [r3, #0]
 8033224:	2b01      	cmp	r3, #1
 8033226:	d105      	bne.n	8033234 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8033228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803322a:	b2db      	uxtb	r3, r3
 803322c:	4619      	mov	r1, r3
 803322e:	6878      	ldr	r0, [r7, #4]
 8033230:	f000 fb27 	bl	8033882 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8033234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033236:	3301      	adds	r3, #1
 8033238:	627b      	str	r3, [r7, #36]	; 0x24
 803323a:	687b      	ldr	r3, [r7, #4]
 803323c:	685b      	ldr	r3, [r3, #4]
 803323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033240:	429a      	cmp	r2, r3
 8033242:	d3e5      	bcc.n	8033210 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8033244:	687b      	ldr	r3, [r7, #4]
 8033246:	681b      	ldr	r3, [r3, #0]
 8033248:	4618      	mov	r0, r3
 803324a:	f009 f845 	bl	803c2d8 <USB_ReadInterrupts>
 803324e:	4603      	mov	r3, r0
 8033250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8033254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8033258:	d13b      	bne.n	80332d2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803325a:	2301      	movs	r3, #1
 803325c:	627b      	str	r3, [r7, #36]	; 0x24
 803325e:	e02b      	b.n	80332b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8033260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033262:	015a      	lsls	r2, r3, #5
 8033264:	69fb      	ldr	r3, [r7, #28]
 8033266:	4413      	add	r3, r2
 8033268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803326c:	681b      	ldr	r3, [r3, #0]
 803326e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8033270:	6879      	ldr	r1, [r7, #4]
 8033272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033274:	4613      	mov	r3, r2
 8033276:	00db      	lsls	r3, r3, #3
 8033278:	4413      	add	r3, r2
 803327a:	009b      	lsls	r3, r3, #2
 803327c:	440b      	add	r3, r1
 803327e:	3340      	adds	r3, #64	; 0x40
 8033280:	781b      	ldrb	r3, [r3, #0]
 8033282:	2b01      	cmp	r3, #1
 8033284:	d115      	bne.n	80332b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8033286:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8033288:	2b00      	cmp	r3, #0
 803328a:	da12      	bge.n	80332b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 803328c:	6879      	ldr	r1, [r7, #4]
 803328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033290:	4613      	mov	r3, r2
 8033292:	00db      	lsls	r3, r3, #3
 8033294:	4413      	add	r3, r2
 8033296:	009b      	lsls	r3, r3, #2
 8033298:	440b      	add	r3, r1
 803329a:	333f      	adds	r3, #63	; 0x3f
 803329c:	2201      	movs	r2, #1
 803329e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80332a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80332a2:	b2db      	uxtb	r3, r3
 80332a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80332a8:	b2db      	uxtb	r3, r3
 80332aa:	4619      	mov	r1, r3
 80332ac:	6878      	ldr	r0, [r7, #4]
 80332ae:	f000 fae8 	bl	8033882 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80332b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80332b4:	3301      	adds	r3, #1
 80332b6:	627b      	str	r3, [r7, #36]	; 0x24
 80332b8:	687b      	ldr	r3, [r7, #4]
 80332ba:	685b      	ldr	r3, [r3, #4]
 80332bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80332be:	429a      	cmp	r2, r3
 80332c0:	d3ce      	bcc.n	8033260 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80332c2:	687b      	ldr	r3, [r7, #4]
 80332c4:	681b      	ldr	r3, [r3, #0]
 80332c6:	695a      	ldr	r2, [r3, #20]
 80332c8:	687b      	ldr	r3, [r7, #4]
 80332ca:	681b      	ldr	r3, [r3, #0]
 80332cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80332d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80332d2:	687b      	ldr	r3, [r7, #4]
 80332d4:	681b      	ldr	r3, [r3, #0]
 80332d6:	4618      	mov	r0, r3
 80332d8:	f008 fffe 	bl	803c2d8 <USB_ReadInterrupts>
 80332dc:	4603      	mov	r3, r0
 80332de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80332e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80332e6:	d155      	bne.n	8033394 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80332e8:	2301      	movs	r3, #1
 80332ea:	627b      	str	r3, [r7, #36]	; 0x24
 80332ec:	e045      	b.n	803337a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80332ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80332f0:	015a      	lsls	r2, r3, #5
 80332f2:	69fb      	ldr	r3, [r7, #28]
 80332f4:	4413      	add	r3, r2
 80332f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80332fa:	681b      	ldr	r3, [r3, #0]
 80332fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80332fe:	6879      	ldr	r1, [r7, #4]
 8033300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033302:	4613      	mov	r3, r2
 8033304:	00db      	lsls	r3, r3, #3
 8033306:	4413      	add	r3, r2
 8033308:	009b      	lsls	r3, r3, #2
 803330a:	440b      	add	r3, r1
 803330c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8033310:	781b      	ldrb	r3, [r3, #0]
 8033312:	2b01      	cmp	r3, #1
 8033314:	d12e      	bne.n	8033374 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8033316:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8033318:	2b00      	cmp	r3, #0
 803331a:	da2b      	bge.n	8033374 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 803331c:	69bb      	ldr	r3, [r7, #24]
 803331e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8033322:	687b      	ldr	r3, [r7, #4]
 8033324:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8033328:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 803332c:	429a      	cmp	r2, r3
 803332e:	d121      	bne.n	8033374 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8033330:	6879      	ldr	r1, [r7, #4]
 8033332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033334:	4613      	mov	r3, r2
 8033336:	00db      	lsls	r3, r3, #3
 8033338:	4413      	add	r3, r2
 803333a:	009b      	lsls	r3, r3, #2
 803333c:	440b      	add	r3, r1
 803333e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8033342:	2201      	movs	r2, #1
 8033344:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8033346:	6a3b      	ldr	r3, [r7, #32]
 8033348:	699b      	ldr	r3, [r3, #24]
 803334a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803334e:	6a3b      	ldr	r3, [r7, #32]
 8033350:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8033352:	6a3b      	ldr	r3, [r7, #32]
 8033354:	695b      	ldr	r3, [r3, #20]
 8033356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803335a:	2b00      	cmp	r3, #0
 803335c:	d10a      	bne.n	8033374 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 803335e:	69fb      	ldr	r3, [r7, #28]
 8033360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033364:	685b      	ldr	r3, [r3, #4]
 8033366:	69fa      	ldr	r2, [r7, #28]
 8033368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803336c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8033370:	6053      	str	r3, [r2, #4]
            break;
 8033372:	e007      	b.n	8033384 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8033374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033376:	3301      	adds	r3, #1
 8033378:	627b      	str	r3, [r7, #36]	; 0x24
 803337a:	687b      	ldr	r3, [r7, #4]
 803337c:	685b      	ldr	r3, [r3, #4]
 803337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033380:	429a      	cmp	r2, r3
 8033382:	d3b4      	bcc.n	80332ee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8033384:	687b      	ldr	r3, [r7, #4]
 8033386:	681b      	ldr	r3, [r3, #0]
 8033388:	695a      	ldr	r2, [r3, #20]
 803338a:	687b      	ldr	r3, [r7, #4]
 803338c:	681b      	ldr	r3, [r3, #0]
 803338e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8033392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8033394:	687b      	ldr	r3, [r7, #4]
 8033396:	681b      	ldr	r3, [r3, #0]
 8033398:	4618      	mov	r0, r3
 803339a:	f008 ff9d 	bl	803c2d8 <USB_ReadInterrupts>
 803339e:	4603      	mov	r3, r0
 80333a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80333a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80333a8:	d10a      	bne.n	80333c0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80333aa:	6878      	ldr	r0, [r7, #4]
 80333ac:	f00b fba0 	bl	803eaf0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80333b0:	687b      	ldr	r3, [r7, #4]
 80333b2:	681b      	ldr	r3, [r3, #0]
 80333b4:	695a      	ldr	r2, [r3, #20]
 80333b6:	687b      	ldr	r3, [r7, #4]
 80333b8:	681b      	ldr	r3, [r3, #0]
 80333ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80333be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80333c0:	687b      	ldr	r3, [r7, #4]
 80333c2:	681b      	ldr	r3, [r3, #0]
 80333c4:	4618      	mov	r0, r3
 80333c6:	f008 ff87 	bl	803c2d8 <USB_ReadInterrupts>
 80333ca:	4603      	mov	r3, r0
 80333cc:	f003 0304 	and.w	r3, r3, #4
 80333d0:	2b04      	cmp	r3, #4
 80333d2:	d115      	bne.n	8033400 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80333d4:	687b      	ldr	r3, [r7, #4]
 80333d6:	681b      	ldr	r3, [r3, #0]
 80333d8:	685b      	ldr	r3, [r3, #4]
 80333da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80333dc:	69bb      	ldr	r3, [r7, #24]
 80333de:	f003 0304 	and.w	r3, r3, #4
 80333e2:	2b00      	cmp	r3, #0
 80333e4:	d002      	beq.n	80333ec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80333e6:	6878      	ldr	r0, [r7, #4]
 80333e8:	f00b fb90 	bl	803eb0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80333ec:	687b      	ldr	r3, [r7, #4]
 80333ee:	681b      	ldr	r3, [r3, #0]
 80333f0:	6859      	ldr	r1, [r3, #4]
 80333f2:	687b      	ldr	r3, [r7, #4]
 80333f4:	681b      	ldr	r3, [r3, #0]
 80333f6:	69ba      	ldr	r2, [r7, #24]
 80333f8:	430a      	orrs	r2, r1
 80333fa:	605a      	str	r2, [r3, #4]
 80333fc:	e000      	b.n	8033400 <HAL_PCD_IRQHandler+0x992>
      return;
 80333fe:	bf00      	nop
    }
  }
}
 8033400:	3734      	adds	r7, #52	; 0x34
 8033402:	46bd      	mov	sp, r7
 8033404:	bd90      	pop	{r4, r7, pc}

08033406 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8033406:	b580      	push	{r7, lr}
 8033408:	b082      	sub	sp, #8
 803340a:	af00      	add	r7, sp, #0
 803340c:	6078      	str	r0, [r7, #4]
 803340e:	460b      	mov	r3, r1
 8033410:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8033412:	687b      	ldr	r3, [r7, #4]
 8033414:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033418:	2b01      	cmp	r3, #1
 803341a:	d101      	bne.n	8033420 <HAL_PCD_SetAddress+0x1a>
 803341c:	2302      	movs	r3, #2
 803341e:	e013      	b.n	8033448 <HAL_PCD_SetAddress+0x42>
 8033420:	687b      	ldr	r3, [r7, #4]
 8033422:	2201      	movs	r2, #1
 8033424:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8033428:	687b      	ldr	r3, [r7, #4]
 803342a:	78fa      	ldrb	r2, [r7, #3]
 803342c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8033430:	687b      	ldr	r3, [r7, #4]
 8033432:	681b      	ldr	r3, [r3, #0]
 8033434:	78fa      	ldrb	r2, [r7, #3]
 8033436:	4611      	mov	r1, r2
 8033438:	4618      	mov	r0, r3
 803343a:	f008 fee5 	bl	803c208 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 803343e:	687b      	ldr	r3, [r7, #4]
 8033440:	2200      	movs	r2, #0
 8033442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8033446:	2300      	movs	r3, #0
}
 8033448:	4618      	mov	r0, r3
 803344a:	3708      	adds	r7, #8
 803344c:	46bd      	mov	sp, r7
 803344e:	bd80      	pop	{r7, pc}

08033450 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8033450:	b580      	push	{r7, lr}
 8033452:	b084      	sub	sp, #16
 8033454:	af00      	add	r7, sp, #0
 8033456:	6078      	str	r0, [r7, #4]
 8033458:	4608      	mov	r0, r1
 803345a:	4611      	mov	r1, r2
 803345c:	461a      	mov	r2, r3
 803345e:	4603      	mov	r3, r0
 8033460:	70fb      	strb	r3, [r7, #3]
 8033462:	460b      	mov	r3, r1
 8033464:	803b      	strh	r3, [r7, #0]
 8033466:	4613      	mov	r3, r2
 8033468:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 803346a:	2300      	movs	r3, #0
 803346c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 803346e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033472:	2b00      	cmp	r3, #0
 8033474:	da0f      	bge.n	8033496 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033476:	78fb      	ldrb	r3, [r7, #3]
 8033478:	f003 020f 	and.w	r2, r3, #15
 803347c:	4613      	mov	r3, r2
 803347e:	00db      	lsls	r3, r3, #3
 8033480:	4413      	add	r3, r2
 8033482:	009b      	lsls	r3, r3, #2
 8033484:	3338      	adds	r3, #56	; 0x38
 8033486:	687a      	ldr	r2, [r7, #4]
 8033488:	4413      	add	r3, r2
 803348a:	3304      	adds	r3, #4
 803348c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803348e:	68fb      	ldr	r3, [r7, #12]
 8033490:	2201      	movs	r2, #1
 8033492:	705a      	strb	r2, [r3, #1]
 8033494:	e00f      	b.n	80334b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8033496:	78fb      	ldrb	r3, [r7, #3]
 8033498:	f003 020f 	and.w	r2, r3, #15
 803349c:	4613      	mov	r3, r2
 803349e:	00db      	lsls	r3, r3, #3
 80334a0:	4413      	add	r3, r2
 80334a2:	009b      	lsls	r3, r3, #2
 80334a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80334a8:	687a      	ldr	r2, [r7, #4]
 80334aa:	4413      	add	r3, r2
 80334ac:	3304      	adds	r3, #4
 80334ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80334b0:	68fb      	ldr	r3, [r7, #12]
 80334b2:	2200      	movs	r2, #0
 80334b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80334b6:	78fb      	ldrb	r3, [r7, #3]
 80334b8:	f003 030f 	and.w	r3, r3, #15
 80334bc:	b2da      	uxtb	r2, r3
 80334be:	68fb      	ldr	r3, [r7, #12]
 80334c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80334c2:	883a      	ldrh	r2, [r7, #0]
 80334c4:	68fb      	ldr	r3, [r7, #12]
 80334c6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80334c8:	68fb      	ldr	r3, [r7, #12]
 80334ca:	78ba      	ldrb	r2, [r7, #2]
 80334cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80334ce:	68fb      	ldr	r3, [r7, #12]
 80334d0:	785b      	ldrb	r3, [r3, #1]
 80334d2:	2b00      	cmp	r3, #0
 80334d4:	d004      	beq.n	80334e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80334d6:	68fb      	ldr	r3, [r7, #12]
 80334d8:	781b      	ldrb	r3, [r3, #0]
 80334da:	b29a      	uxth	r2, r3
 80334dc:	68fb      	ldr	r3, [r7, #12]
 80334de:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80334e0:	78bb      	ldrb	r3, [r7, #2]
 80334e2:	2b02      	cmp	r3, #2
 80334e4:	d102      	bne.n	80334ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80334e6:	68fb      	ldr	r3, [r7, #12]
 80334e8:	2200      	movs	r2, #0
 80334ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80334ec:	687b      	ldr	r3, [r7, #4]
 80334ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80334f2:	2b01      	cmp	r3, #1
 80334f4:	d101      	bne.n	80334fa <HAL_PCD_EP_Open+0xaa>
 80334f6:	2302      	movs	r3, #2
 80334f8:	e00e      	b.n	8033518 <HAL_PCD_EP_Open+0xc8>
 80334fa:	687b      	ldr	r3, [r7, #4]
 80334fc:	2201      	movs	r2, #1
 80334fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8033502:	687b      	ldr	r3, [r7, #4]
 8033504:	681b      	ldr	r3, [r3, #0]
 8033506:	68f9      	ldr	r1, [r7, #12]
 8033508:	4618      	mov	r0, r3
 803350a:	f007 ff59 	bl	803b3c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 803350e:	687b      	ldr	r3, [r7, #4]
 8033510:	2200      	movs	r2, #0
 8033512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8033516:	7afb      	ldrb	r3, [r7, #11]
}
 8033518:	4618      	mov	r0, r3
 803351a:	3710      	adds	r7, #16
 803351c:	46bd      	mov	sp, r7
 803351e:	bd80      	pop	{r7, pc}

08033520 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8033520:	b580      	push	{r7, lr}
 8033522:	b084      	sub	sp, #16
 8033524:	af00      	add	r7, sp, #0
 8033526:	6078      	str	r0, [r7, #4]
 8033528:	460b      	mov	r3, r1
 803352a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 803352c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033530:	2b00      	cmp	r3, #0
 8033532:	da0f      	bge.n	8033554 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033534:	78fb      	ldrb	r3, [r7, #3]
 8033536:	f003 020f 	and.w	r2, r3, #15
 803353a:	4613      	mov	r3, r2
 803353c:	00db      	lsls	r3, r3, #3
 803353e:	4413      	add	r3, r2
 8033540:	009b      	lsls	r3, r3, #2
 8033542:	3338      	adds	r3, #56	; 0x38
 8033544:	687a      	ldr	r2, [r7, #4]
 8033546:	4413      	add	r3, r2
 8033548:	3304      	adds	r3, #4
 803354a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803354c:	68fb      	ldr	r3, [r7, #12]
 803354e:	2201      	movs	r2, #1
 8033550:	705a      	strb	r2, [r3, #1]
 8033552:	e00f      	b.n	8033574 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8033554:	78fb      	ldrb	r3, [r7, #3]
 8033556:	f003 020f 	and.w	r2, r3, #15
 803355a:	4613      	mov	r3, r2
 803355c:	00db      	lsls	r3, r3, #3
 803355e:	4413      	add	r3, r2
 8033560:	009b      	lsls	r3, r3, #2
 8033562:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033566:	687a      	ldr	r2, [r7, #4]
 8033568:	4413      	add	r3, r2
 803356a:	3304      	adds	r3, #4
 803356c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803356e:	68fb      	ldr	r3, [r7, #12]
 8033570:	2200      	movs	r2, #0
 8033572:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8033574:	78fb      	ldrb	r3, [r7, #3]
 8033576:	f003 030f 	and.w	r3, r3, #15
 803357a:	b2da      	uxtb	r2, r3
 803357c:	68fb      	ldr	r3, [r7, #12]
 803357e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8033580:	687b      	ldr	r3, [r7, #4]
 8033582:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033586:	2b01      	cmp	r3, #1
 8033588:	d101      	bne.n	803358e <HAL_PCD_EP_Close+0x6e>
 803358a:	2302      	movs	r3, #2
 803358c:	e00e      	b.n	80335ac <HAL_PCD_EP_Close+0x8c>
 803358e:	687b      	ldr	r3, [r7, #4]
 8033590:	2201      	movs	r2, #1
 8033592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8033596:	687b      	ldr	r3, [r7, #4]
 8033598:	681b      	ldr	r3, [r3, #0]
 803359a:	68f9      	ldr	r1, [r7, #12]
 803359c:	4618      	mov	r0, r3
 803359e:	f007 ff97 	bl	803b4d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80335a2:	687b      	ldr	r3, [r7, #4]
 80335a4:	2200      	movs	r2, #0
 80335a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80335aa:	2300      	movs	r3, #0
}
 80335ac:	4618      	mov	r0, r3
 80335ae:	3710      	adds	r7, #16
 80335b0:	46bd      	mov	sp, r7
 80335b2:	bd80      	pop	{r7, pc}

080335b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80335b4:	b580      	push	{r7, lr}
 80335b6:	b086      	sub	sp, #24
 80335b8:	af00      	add	r7, sp, #0
 80335ba:	60f8      	str	r0, [r7, #12]
 80335bc:	607a      	str	r2, [r7, #4]
 80335be:	603b      	str	r3, [r7, #0]
 80335c0:	460b      	mov	r3, r1
 80335c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80335c4:	7afb      	ldrb	r3, [r7, #11]
 80335c6:	f003 020f 	and.w	r2, r3, #15
 80335ca:	4613      	mov	r3, r2
 80335cc:	00db      	lsls	r3, r3, #3
 80335ce:	4413      	add	r3, r2
 80335d0:	009b      	lsls	r3, r3, #2
 80335d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80335d6:	68fa      	ldr	r2, [r7, #12]
 80335d8:	4413      	add	r3, r2
 80335da:	3304      	adds	r3, #4
 80335dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80335de:	697b      	ldr	r3, [r7, #20]
 80335e0:	687a      	ldr	r2, [r7, #4]
 80335e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80335e4:	697b      	ldr	r3, [r7, #20]
 80335e6:	683a      	ldr	r2, [r7, #0]
 80335e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80335ea:	697b      	ldr	r3, [r7, #20]
 80335ec:	2200      	movs	r2, #0
 80335ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80335f0:	697b      	ldr	r3, [r7, #20]
 80335f2:	2200      	movs	r2, #0
 80335f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80335f6:	7afb      	ldrb	r3, [r7, #11]
 80335f8:	f003 030f 	and.w	r3, r3, #15
 80335fc:	b2da      	uxtb	r2, r3
 80335fe:	697b      	ldr	r3, [r7, #20]
 8033600:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8033602:	68fb      	ldr	r3, [r7, #12]
 8033604:	691b      	ldr	r3, [r3, #16]
 8033606:	2b01      	cmp	r3, #1
 8033608:	d102      	bne.n	8033610 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 803360a:	687a      	ldr	r2, [r7, #4]
 803360c:	697b      	ldr	r3, [r7, #20]
 803360e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8033610:	7afb      	ldrb	r3, [r7, #11]
 8033612:	f003 030f 	and.w	r3, r3, #15
 8033616:	2b00      	cmp	r3, #0
 8033618:	d109      	bne.n	803362e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803361a:	68fb      	ldr	r3, [r7, #12]
 803361c:	6818      	ldr	r0, [r3, #0]
 803361e:	68fb      	ldr	r3, [r7, #12]
 8033620:	691b      	ldr	r3, [r3, #16]
 8033622:	b2db      	uxtb	r3, r3
 8033624:	461a      	mov	r2, r3
 8033626:	6979      	ldr	r1, [r7, #20]
 8033628:	f008 fa7e 	bl	803bb28 <USB_EP0StartXfer>
 803362c:	e008      	b.n	8033640 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803362e:	68fb      	ldr	r3, [r7, #12]
 8033630:	6818      	ldr	r0, [r3, #0]
 8033632:	68fb      	ldr	r3, [r7, #12]
 8033634:	691b      	ldr	r3, [r3, #16]
 8033636:	b2db      	uxtb	r3, r3
 8033638:	461a      	mov	r2, r3
 803363a:	6979      	ldr	r1, [r7, #20]
 803363c:	f008 f824 	bl	803b688 <USB_EPStartXfer>
  }

  return HAL_OK;
 8033640:	2300      	movs	r3, #0
}
 8033642:	4618      	mov	r0, r3
 8033644:	3718      	adds	r7, #24
 8033646:	46bd      	mov	sp, r7
 8033648:	bd80      	pop	{r7, pc}

0803364a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803364a:	b480      	push	{r7}
 803364c:	b083      	sub	sp, #12
 803364e:	af00      	add	r7, sp, #0
 8033650:	6078      	str	r0, [r7, #4]
 8033652:	460b      	mov	r3, r1
 8033654:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8033656:	78fb      	ldrb	r3, [r7, #3]
 8033658:	f003 020f 	and.w	r2, r3, #15
 803365c:	6879      	ldr	r1, [r7, #4]
 803365e:	4613      	mov	r3, r2
 8033660:	00db      	lsls	r3, r3, #3
 8033662:	4413      	add	r3, r2
 8033664:	009b      	lsls	r3, r3, #2
 8033666:	440b      	add	r3, r1
 8033668:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 803366c:	681b      	ldr	r3, [r3, #0]
}
 803366e:	4618      	mov	r0, r3
 8033670:	370c      	adds	r7, #12
 8033672:	46bd      	mov	sp, r7
 8033674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033678:	4770      	bx	lr

0803367a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 803367a:	b580      	push	{r7, lr}
 803367c:	b086      	sub	sp, #24
 803367e:	af00      	add	r7, sp, #0
 8033680:	60f8      	str	r0, [r7, #12]
 8033682:	607a      	str	r2, [r7, #4]
 8033684:	603b      	str	r3, [r7, #0]
 8033686:	460b      	mov	r3, r1
 8033688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803368a:	7afb      	ldrb	r3, [r7, #11]
 803368c:	f003 020f 	and.w	r2, r3, #15
 8033690:	4613      	mov	r3, r2
 8033692:	00db      	lsls	r3, r3, #3
 8033694:	4413      	add	r3, r2
 8033696:	009b      	lsls	r3, r3, #2
 8033698:	3338      	adds	r3, #56	; 0x38
 803369a:	68fa      	ldr	r2, [r7, #12]
 803369c:	4413      	add	r3, r2
 803369e:	3304      	adds	r3, #4
 80336a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80336a2:	697b      	ldr	r3, [r7, #20]
 80336a4:	687a      	ldr	r2, [r7, #4]
 80336a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80336a8:	697b      	ldr	r3, [r7, #20]
 80336aa:	683a      	ldr	r2, [r7, #0]
 80336ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80336ae:	697b      	ldr	r3, [r7, #20]
 80336b0:	2200      	movs	r2, #0
 80336b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80336b4:	697b      	ldr	r3, [r7, #20]
 80336b6:	2201      	movs	r2, #1
 80336b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80336ba:	7afb      	ldrb	r3, [r7, #11]
 80336bc:	f003 030f 	and.w	r3, r3, #15
 80336c0:	b2da      	uxtb	r2, r3
 80336c2:	697b      	ldr	r3, [r7, #20]
 80336c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80336c6:	68fb      	ldr	r3, [r7, #12]
 80336c8:	691b      	ldr	r3, [r3, #16]
 80336ca:	2b01      	cmp	r3, #1
 80336cc:	d102      	bne.n	80336d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80336ce:	687a      	ldr	r2, [r7, #4]
 80336d0:	697b      	ldr	r3, [r7, #20]
 80336d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80336d4:	7afb      	ldrb	r3, [r7, #11]
 80336d6:	f003 030f 	and.w	r3, r3, #15
 80336da:	2b00      	cmp	r3, #0
 80336dc:	d109      	bne.n	80336f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80336de:	68fb      	ldr	r3, [r7, #12]
 80336e0:	6818      	ldr	r0, [r3, #0]
 80336e2:	68fb      	ldr	r3, [r7, #12]
 80336e4:	691b      	ldr	r3, [r3, #16]
 80336e6:	b2db      	uxtb	r3, r3
 80336e8:	461a      	mov	r2, r3
 80336ea:	6979      	ldr	r1, [r7, #20]
 80336ec:	f008 fa1c 	bl	803bb28 <USB_EP0StartXfer>
 80336f0:	e008      	b.n	8033704 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80336f2:	68fb      	ldr	r3, [r7, #12]
 80336f4:	6818      	ldr	r0, [r3, #0]
 80336f6:	68fb      	ldr	r3, [r7, #12]
 80336f8:	691b      	ldr	r3, [r3, #16]
 80336fa:	b2db      	uxtb	r3, r3
 80336fc:	461a      	mov	r2, r3
 80336fe:	6979      	ldr	r1, [r7, #20]
 8033700:	f007 ffc2 	bl	803b688 <USB_EPStartXfer>
  }

  return HAL_OK;
 8033704:	2300      	movs	r3, #0
}
 8033706:	4618      	mov	r0, r3
 8033708:	3718      	adds	r7, #24
 803370a:	46bd      	mov	sp, r7
 803370c:	bd80      	pop	{r7, pc}

0803370e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803370e:	b580      	push	{r7, lr}
 8033710:	b084      	sub	sp, #16
 8033712:	af00      	add	r7, sp, #0
 8033714:	6078      	str	r0, [r7, #4]
 8033716:	460b      	mov	r3, r1
 8033718:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 803371a:	78fb      	ldrb	r3, [r7, #3]
 803371c:	f003 020f 	and.w	r2, r3, #15
 8033720:	687b      	ldr	r3, [r7, #4]
 8033722:	685b      	ldr	r3, [r3, #4]
 8033724:	429a      	cmp	r2, r3
 8033726:	d901      	bls.n	803372c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8033728:	2301      	movs	r3, #1
 803372a:	e050      	b.n	80337ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 803372c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033730:	2b00      	cmp	r3, #0
 8033732:	da0f      	bge.n	8033754 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033734:	78fb      	ldrb	r3, [r7, #3]
 8033736:	f003 020f 	and.w	r2, r3, #15
 803373a:	4613      	mov	r3, r2
 803373c:	00db      	lsls	r3, r3, #3
 803373e:	4413      	add	r3, r2
 8033740:	009b      	lsls	r3, r3, #2
 8033742:	3338      	adds	r3, #56	; 0x38
 8033744:	687a      	ldr	r2, [r7, #4]
 8033746:	4413      	add	r3, r2
 8033748:	3304      	adds	r3, #4
 803374a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803374c:	68fb      	ldr	r3, [r7, #12]
 803374e:	2201      	movs	r2, #1
 8033750:	705a      	strb	r2, [r3, #1]
 8033752:	e00d      	b.n	8033770 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8033754:	78fa      	ldrb	r2, [r7, #3]
 8033756:	4613      	mov	r3, r2
 8033758:	00db      	lsls	r3, r3, #3
 803375a:	4413      	add	r3, r2
 803375c:	009b      	lsls	r3, r3, #2
 803375e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033762:	687a      	ldr	r2, [r7, #4]
 8033764:	4413      	add	r3, r2
 8033766:	3304      	adds	r3, #4
 8033768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803376a:	68fb      	ldr	r3, [r7, #12]
 803376c:	2200      	movs	r2, #0
 803376e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8033770:	68fb      	ldr	r3, [r7, #12]
 8033772:	2201      	movs	r2, #1
 8033774:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8033776:	78fb      	ldrb	r3, [r7, #3]
 8033778:	f003 030f 	and.w	r3, r3, #15
 803377c:	b2da      	uxtb	r2, r3
 803377e:	68fb      	ldr	r3, [r7, #12]
 8033780:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8033782:	687b      	ldr	r3, [r7, #4]
 8033784:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033788:	2b01      	cmp	r3, #1
 803378a:	d101      	bne.n	8033790 <HAL_PCD_EP_SetStall+0x82>
 803378c:	2302      	movs	r3, #2
 803378e:	e01e      	b.n	80337ce <HAL_PCD_EP_SetStall+0xc0>
 8033790:	687b      	ldr	r3, [r7, #4]
 8033792:	2201      	movs	r2, #1
 8033794:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8033798:	687b      	ldr	r3, [r7, #4]
 803379a:	681b      	ldr	r3, [r3, #0]
 803379c:	68f9      	ldr	r1, [r7, #12]
 803379e:	4618      	mov	r0, r3
 80337a0:	f008 fc5e 	bl	803c060 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80337a4:	78fb      	ldrb	r3, [r7, #3]
 80337a6:	f003 030f 	and.w	r3, r3, #15
 80337aa:	2b00      	cmp	r3, #0
 80337ac:	d10a      	bne.n	80337c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80337ae:	687b      	ldr	r3, [r7, #4]
 80337b0:	6818      	ldr	r0, [r3, #0]
 80337b2:	687b      	ldr	r3, [r7, #4]
 80337b4:	691b      	ldr	r3, [r3, #16]
 80337b6:	b2d9      	uxtb	r1, r3
 80337b8:	687b      	ldr	r3, [r7, #4]
 80337ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80337be:	461a      	mov	r2, r3
 80337c0:	f008 fe50 	bl	803c464 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80337c4:	687b      	ldr	r3, [r7, #4]
 80337c6:	2200      	movs	r2, #0
 80337c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80337cc:	2300      	movs	r3, #0
}
 80337ce:	4618      	mov	r0, r3
 80337d0:	3710      	adds	r7, #16
 80337d2:	46bd      	mov	sp, r7
 80337d4:	bd80      	pop	{r7, pc}

080337d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80337d6:	b580      	push	{r7, lr}
 80337d8:	b084      	sub	sp, #16
 80337da:	af00      	add	r7, sp, #0
 80337dc:	6078      	str	r0, [r7, #4]
 80337de:	460b      	mov	r3, r1
 80337e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80337e2:	78fb      	ldrb	r3, [r7, #3]
 80337e4:	f003 020f 	and.w	r2, r3, #15
 80337e8:	687b      	ldr	r3, [r7, #4]
 80337ea:	685b      	ldr	r3, [r3, #4]
 80337ec:	429a      	cmp	r2, r3
 80337ee:	d901      	bls.n	80337f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80337f0:	2301      	movs	r3, #1
 80337f2:	e042      	b.n	803387a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80337f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80337f8:	2b00      	cmp	r3, #0
 80337fa:	da0f      	bge.n	803381c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80337fc:	78fb      	ldrb	r3, [r7, #3]
 80337fe:	f003 020f 	and.w	r2, r3, #15
 8033802:	4613      	mov	r3, r2
 8033804:	00db      	lsls	r3, r3, #3
 8033806:	4413      	add	r3, r2
 8033808:	009b      	lsls	r3, r3, #2
 803380a:	3338      	adds	r3, #56	; 0x38
 803380c:	687a      	ldr	r2, [r7, #4]
 803380e:	4413      	add	r3, r2
 8033810:	3304      	adds	r3, #4
 8033812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8033814:	68fb      	ldr	r3, [r7, #12]
 8033816:	2201      	movs	r2, #1
 8033818:	705a      	strb	r2, [r3, #1]
 803381a:	e00f      	b.n	803383c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 803381c:	78fb      	ldrb	r3, [r7, #3]
 803381e:	f003 020f 	and.w	r2, r3, #15
 8033822:	4613      	mov	r3, r2
 8033824:	00db      	lsls	r3, r3, #3
 8033826:	4413      	add	r3, r2
 8033828:	009b      	lsls	r3, r3, #2
 803382a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803382e:	687a      	ldr	r2, [r7, #4]
 8033830:	4413      	add	r3, r2
 8033832:	3304      	adds	r3, #4
 8033834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8033836:	68fb      	ldr	r3, [r7, #12]
 8033838:	2200      	movs	r2, #0
 803383a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 803383c:	68fb      	ldr	r3, [r7, #12]
 803383e:	2200      	movs	r2, #0
 8033840:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8033842:	78fb      	ldrb	r3, [r7, #3]
 8033844:	f003 030f 	and.w	r3, r3, #15
 8033848:	b2da      	uxtb	r2, r3
 803384a:	68fb      	ldr	r3, [r7, #12]
 803384c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 803384e:	687b      	ldr	r3, [r7, #4]
 8033850:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033854:	2b01      	cmp	r3, #1
 8033856:	d101      	bne.n	803385c <HAL_PCD_EP_ClrStall+0x86>
 8033858:	2302      	movs	r3, #2
 803385a:	e00e      	b.n	803387a <HAL_PCD_EP_ClrStall+0xa4>
 803385c:	687b      	ldr	r3, [r7, #4]
 803385e:	2201      	movs	r2, #1
 8033860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8033864:	687b      	ldr	r3, [r7, #4]
 8033866:	681b      	ldr	r3, [r3, #0]
 8033868:	68f9      	ldr	r1, [r7, #12]
 803386a:	4618      	mov	r0, r3
 803386c:	f008 fc66 	bl	803c13c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8033870:	687b      	ldr	r3, [r7, #4]
 8033872:	2200      	movs	r2, #0
 8033874:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8033878:	2300      	movs	r3, #0
}
 803387a:	4618      	mov	r0, r3
 803387c:	3710      	adds	r7, #16
 803387e:	46bd      	mov	sp, r7
 8033880:	bd80      	pop	{r7, pc}

08033882 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8033882:	b580      	push	{r7, lr}
 8033884:	b084      	sub	sp, #16
 8033886:	af00      	add	r7, sp, #0
 8033888:	6078      	str	r0, [r7, #4]
 803388a:	460b      	mov	r3, r1
 803388c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 803388e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033892:	2b00      	cmp	r3, #0
 8033894:	da0c      	bge.n	80338b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033896:	78fb      	ldrb	r3, [r7, #3]
 8033898:	f003 020f 	and.w	r2, r3, #15
 803389c:	4613      	mov	r3, r2
 803389e:	00db      	lsls	r3, r3, #3
 80338a0:	4413      	add	r3, r2
 80338a2:	009b      	lsls	r3, r3, #2
 80338a4:	3338      	adds	r3, #56	; 0x38
 80338a6:	687a      	ldr	r2, [r7, #4]
 80338a8:	4413      	add	r3, r2
 80338aa:	3304      	adds	r3, #4
 80338ac:	60fb      	str	r3, [r7, #12]
 80338ae:	e00c      	b.n	80338ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80338b0:	78fb      	ldrb	r3, [r7, #3]
 80338b2:	f003 020f 	and.w	r2, r3, #15
 80338b6:	4613      	mov	r3, r2
 80338b8:	00db      	lsls	r3, r3, #3
 80338ba:	4413      	add	r3, r2
 80338bc:	009b      	lsls	r3, r3, #2
 80338be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80338c2:	687a      	ldr	r2, [r7, #4]
 80338c4:	4413      	add	r3, r2
 80338c6:	3304      	adds	r3, #4
 80338c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80338ca:	687b      	ldr	r3, [r7, #4]
 80338cc:	681b      	ldr	r3, [r3, #0]
 80338ce:	68f9      	ldr	r1, [r7, #12]
 80338d0:	4618      	mov	r0, r3
 80338d2:	f008 fa85 	bl	803bde0 <USB_EPStopXfer>
 80338d6:	4603      	mov	r3, r0
 80338d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80338da:	7afb      	ldrb	r3, [r7, #11]
}
 80338dc:	4618      	mov	r0, r3
 80338de:	3710      	adds	r7, #16
 80338e0:	46bd      	mov	sp, r7
 80338e2:	bd80      	pop	{r7, pc}

080338e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80338e4:	b580      	push	{r7, lr}
 80338e6:	b08a      	sub	sp, #40	; 0x28
 80338e8:	af02      	add	r7, sp, #8
 80338ea:	6078      	str	r0, [r7, #4]
 80338ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80338ee:	687b      	ldr	r3, [r7, #4]
 80338f0:	681b      	ldr	r3, [r3, #0]
 80338f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80338f4:	697b      	ldr	r3, [r7, #20]
 80338f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80338f8:	683a      	ldr	r2, [r7, #0]
 80338fa:	4613      	mov	r3, r2
 80338fc:	00db      	lsls	r3, r3, #3
 80338fe:	4413      	add	r3, r2
 8033900:	009b      	lsls	r3, r3, #2
 8033902:	3338      	adds	r3, #56	; 0x38
 8033904:	687a      	ldr	r2, [r7, #4]
 8033906:	4413      	add	r3, r2
 8033908:	3304      	adds	r3, #4
 803390a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 803390c:	68fb      	ldr	r3, [r7, #12]
 803390e:	6a1a      	ldr	r2, [r3, #32]
 8033910:	68fb      	ldr	r3, [r7, #12]
 8033912:	699b      	ldr	r3, [r3, #24]
 8033914:	429a      	cmp	r2, r3
 8033916:	d901      	bls.n	803391c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8033918:	2301      	movs	r3, #1
 803391a:	e06c      	b.n	80339f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 803391c:	68fb      	ldr	r3, [r7, #12]
 803391e:	699a      	ldr	r2, [r3, #24]
 8033920:	68fb      	ldr	r3, [r7, #12]
 8033922:	6a1b      	ldr	r3, [r3, #32]
 8033924:	1ad3      	subs	r3, r2, r3
 8033926:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8033928:	68fb      	ldr	r3, [r7, #12]
 803392a:	68db      	ldr	r3, [r3, #12]
 803392c:	69fa      	ldr	r2, [r7, #28]
 803392e:	429a      	cmp	r2, r3
 8033930:	d902      	bls.n	8033938 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8033932:	68fb      	ldr	r3, [r7, #12]
 8033934:	68db      	ldr	r3, [r3, #12]
 8033936:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8033938:	69fb      	ldr	r3, [r7, #28]
 803393a:	3303      	adds	r3, #3
 803393c:	089b      	lsrs	r3, r3, #2
 803393e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8033940:	e02b      	b.n	803399a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8033942:	68fb      	ldr	r3, [r7, #12]
 8033944:	699a      	ldr	r2, [r3, #24]
 8033946:	68fb      	ldr	r3, [r7, #12]
 8033948:	6a1b      	ldr	r3, [r3, #32]
 803394a:	1ad3      	subs	r3, r2, r3
 803394c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 803394e:	68fb      	ldr	r3, [r7, #12]
 8033950:	68db      	ldr	r3, [r3, #12]
 8033952:	69fa      	ldr	r2, [r7, #28]
 8033954:	429a      	cmp	r2, r3
 8033956:	d902      	bls.n	803395e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8033958:	68fb      	ldr	r3, [r7, #12]
 803395a:	68db      	ldr	r3, [r3, #12]
 803395c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 803395e:	69fb      	ldr	r3, [r7, #28]
 8033960:	3303      	adds	r3, #3
 8033962:	089b      	lsrs	r3, r3, #2
 8033964:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8033966:	68fb      	ldr	r3, [r7, #12]
 8033968:	6919      	ldr	r1, [r3, #16]
 803396a:	683b      	ldr	r3, [r7, #0]
 803396c:	b2da      	uxtb	r2, r3
 803396e:	69fb      	ldr	r3, [r7, #28]
 8033970:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8033972:	687b      	ldr	r3, [r7, #4]
 8033974:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8033976:	b2db      	uxtb	r3, r3
 8033978:	9300      	str	r3, [sp, #0]
 803397a:	4603      	mov	r3, r0
 803397c:	6978      	ldr	r0, [r7, #20]
 803397e:	f008 fad9 	bl	803bf34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8033982:	68fb      	ldr	r3, [r7, #12]
 8033984:	691a      	ldr	r2, [r3, #16]
 8033986:	69fb      	ldr	r3, [r7, #28]
 8033988:	441a      	add	r2, r3
 803398a:	68fb      	ldr	r3, [r7, #12]
 803398c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 803398e:	68fb      	ldr	r3, [r7, #12]
 8033990:	6a1a      	ldr	r2, [r3, #32]
 8033992:	69fb      	ldr	r3, [r7, #28]
 8033994:	441a      	add	r2, r3
 8033996:	68fb      	ldr	r3, [r7, #12]
 8033998:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 803399a:	683b      	ldr	r3, [r7, #0]
 803399c:	015a      	lsls	r2, r3, #5
 803399e:	693b      	ldr	r3, [r7, #16]
 80339a0:	4413      	add	r3, r2
 80339a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80339a6:	699b      	ldr	r3, [r3, #24]
 80339a8:	b29b      	uxth	r3, r3
 80339aa:	69ba      	ldr	r2, [r7, #24]
 80339ac:	429a      	cmp	r2, r3
 80339ae:	d809      	bhi.n	80339c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80339b0:	68fb      	ldr	r3, [r7, #12]
 80339b2:	6a1a      	ldr	r2, [r3, #32]
 80339b4:	68fb      	ldr	r3, [r7, #12]
 80339b6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80339b8:	429a      	cmp	r2, r3
 80339ba:	d203      	bcs.n	80339c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80339bc:	68fb      	ldr	r3, [r7, #12]
 80339be:	699b      	ldr	r3, [r3, #24]
 80339c0:	2b00      	cmp	r3, #0
 80339c2:	d1be      	bne.n	8033942 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80339c4:	68fb      	ldr	r3, [r7, #12]
 80339c6:	699a      	ldr	r2, [r3, #24]
 80339c8:	68fb      	ldr	r3, [r7, #12]
 80339ca:	6a1b      	ldr	r3, [r3, #32]
 80339cc:	429a      	cmp	r2, r3
 80339ce:	d811      	bhi.n	80339f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80339d0:	683b      	ldr	r3, [r7, #0]
 80339d2:	f003 030f 	and.w	r3, r3, #15
 80339d6:	2201      	movs	r2, #1
 80339d8:	fa02 f303 	lsl.w	r3, r2, r3
 80339dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80339de:	693b      	ldr	r3, [r7, #16]
 80339e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80339e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80339e6:	68bb      	ldr	r3, [r7, #8]
 80339e8:	43db      	mvns	r3, r3
 80339ea:	6939      	ldr	r1, [r7, #16]
 80339ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80339f0:	4013      	ands	r3, r2
 80339f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80339f4:	2300      	movs	r3, #0
}
 80339f6:	4618      	mov	r0, r3
 80339f8:	3720      	adds	r7, #32
 80339fa:	46bd      	mov	sp, r7
 80339fc:	bd80      	pop	{r7, pc}
	...

08033a00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8033a00:	b580      	push	{r7, lr}
 8033a02:	b088      	sub	sp, #32
 8033a04:	af00      	add	r7, sp, #0
 8033a06:	6078      	str	r0, [r7, #4]
 8033a08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8033a0a:	687b      	ldr	r3, [r7, #4]
 8033a0c:	681b      	ldr	r3, [r3, #0]
 8033a0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8033a10:	69fb      	ldr	r3, [r7, #28]
 8033a12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8033a14:	69fb      	ldr	r3, [r7, #28]
 8033a16:	333c      	adds	r3, #60	; 0x3c
 8033a18:	3304      	adds	r3, #4
 8033a1a:	681b      	ldr	r3, [r3, #0]
 8033a1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8033a1e:	683b      	ldr	r3, [r7, #0]
 8033a20:	015a      	lsls	r2, r3, #5
 8033a22:	69bb      	ldr	r3, [r7, #24]
 8033a24:	4413      	add	r3, r2
 8033a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033a2a:	689b      	ldr	r3, [r3, #8]
 8033a2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8033a2e:	687b      	ldr	r3, [r7, #4]
 8033a30:	691b      	ldr	r3, [r3, #16]
 8033a32:	2b01      	cmp	r3, #1
 8033a34:	d17b      	bne.n	8033b2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8033a36:	693b      	ldr	r3, [r7, #16]
 8033a38:	f003 0308 	and.w	r3, r3, #8
 8033a3c:	2b00      	cmp	r3, #0
 8033a3e:	d015      	beq.n	8033a6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033a40:	697b      	ldr	r3, [r7, #20]
 8033a42:	4a61      	ldr	r2, [pc, #388]	; (8033bc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8033a44:	4293      	cmp	r3, r2
 8033a46:	f240 80b9 	bls.w	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8033a4a:	693b      	ldr	r3, [r7, #16]
 8033a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033a50:	2b00      	cmp	r3, #0
 8033a52:	f000 80b3 	beq.w	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8033a56:	683b      	ldr	r3, [r7, #0]
 8033a58:	015a      	lsls	r2, r3, #5
 8033a5a:	69bb      	ldr	r3, [r7, #24]
 8033a5c:	4413      	add	r3, r2
 8033a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033a62:	461a      	mov	r2, r3
 8033a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8033a68:	6093      	str	r3, [r2, #8]
 8033a6a:	e0a7      	b.n	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8033a6c:	693b      	ldr	r3, [r7, #16]
 8033a6e:	f003 0320 	and.w	r3, r3, #32
 8033a72:	2b00      	cmp	r3, #0
 8033a74:	d009      	beq.n	8033a8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8033a76:	683b      	ldr	r3, [r7, #0]
 8033a78:	015a      	lsls	r2, r3, #5
 8033a7a:	69bb      	ldr	r3, [r7, #24]
 8033a7c:	4413      	add	r3, r2
 8033a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033a82:	461a      	mov	r2, r3
 8033a84:	2320      	movs	r3, #32
 8033a86:	6093      	str	r3, [r2, #8]
 8033a88:	e098      	b.n	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8033a8a:	693b      	ldr	r3, [r7, #16]
 8033a8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8033a90:	2b00      	cmp	r3, #0
 8033a92:	f040 8093 	bne.w	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033a96:	697b      	ldr	r3, [r7, #20]
 8033a98:	4a4b      	ldr	r2, [pc, #300]	; (8033bc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8033a9a:	4293      	cmp	r3, r2
 8033a9c:	d90f      	bls.n	8033abe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8033a9e:	693b      	ldr	r3, [r7, #16]
 8033aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033aa4:	2b00      	cmp	r3, #0
 8033aa6:	d00a      	beq.n	8033abe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8033aa8:	683b      	ldr	r3, [r7, #0]
 8033aaa:	015a      	lsls	r2, r3, #5
 8033aac:	69bb      	ldr	r3, [r7, #24]
 8033aae:	4413      	add	r3, r2
 8033ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033ab4:	461a      	mov	r2, r3
 8033ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8033aba:	6093      	str	r3, [r2, #8]
 8033abc:	e07e      	b.n	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8033abe:	683a      	ldr	r2, [r7, #0]
 8033ac0:	4613      	mov	r3, r2
 8033ac2:	00db      	lsls	r3, r3, #3
 8033ac4:	4413      	add	r3, r2
 8033ac6:	009b      	lsls	r3, r3, #2
 8033ac8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033acc:	687a      	ldr	r2, [r7, #4]
 8033ace:	4413      	add	r3, r2
 8033ad0:	3304      	adds	r3, #4
 8033ad2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8033ad4:	68fb      	ldr	r3, [r7, #12]
 8033ad6:	69da      	ldr	r2, [r3, #28]
 8033ad8:	683b      	ldr	r3, [r7, #0]
 8033ada:	0159      	lsls	r1, r3, #5
 8033adc:	69bb      	ldr	r3, [r7, #24]
 8033ade:	440b      	add	r3, r1
 8033ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033ae4:	691b      	ldr	r3, [r3, #16]
 8033ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8033aea:	1ad2      	subs	r2, r2, r3
 8033aec:	68fb      	ldr	r3, [r7, #12]
 8033aee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8033af0:	683b      	ldr	r3, [r7, #0]
 8033af2:	2b00      	cmp	r3, #0
 8033af4:	d114      	bne.n	8033b20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8033af6:	68fb      	ldr	r3, [r7, #12]
 8033af8:	699b      	ldr	r3, [r3, #24]
 8033afa:	2b00      	cmp	r3, #0
 8033afc:	d109      	bne.n	8033b12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8033afe:	687b      	ldr	r3, [r7, #4]
 8033b00:	6818      	ldr	r0, [r3, #0]
 8033b02:	687b      	ldr	r3, [r7, #4]
 8033b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8033b08:	461a      	mov	r2, r3
 8033b0a:	2101      	movs	r1, #1
 8033b0c:	f008 fcaa 	bl	803c464 <USB_EP0_OutStart>
 8033b10:	e006      	b.n	8033b20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8033b12:	68fb      	ldr	r3, [r7, #12]
 8033b14:	691a      	ldr	r2, [r3, #16]
 8033b16:	68fb      	ldr	r3, [r7, #12]
 8033b18:	6a1b      	ldr	r3, [r3, #32]
 8033b1a:	441a      	add	r2, r3
 8033b1c:	68fb      	ldr	r3, [r7, #12]
 8033b1e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8033b20:	683b      	ldr	r3, [r7, #0]
 8033b22:	b2db      	uxtb	r3, r3
 8033b24:	4619      	mov	r1, r3
 8033b26:	6878      	ldr	r0, [r7, #4]
 8033b28:	f00a ff1e 	bl	803e968 <HAL_PCD_DataOutStageCallback>
 8033b2c:	e046      	b.n	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8033b2e:	697b      	ldr	r3, [r7, #20]
 8033b30:	4a26      	ldr	r2, [pc, #152]	; (8033bcc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8033b32:	4293      	cmp	r3, r2
 8033b34:	d124      	bne.n	8033b80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8033b36:	693b      	ldr	r3, [r7, #16]
 8033b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8033b3c:	2b00      	cmp	r3, #0
 8033b3e:	d00a      	beq.n	8033b56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8033b40:	683b      	ldr	r3, [r7, #0]
 8033b42:	015a      	lsls	r2, r3, #5
 8033b44:	69bb      	ldr	r3, [r7, #24]
 8033b46:	4413      	add	r3, r2
 8033b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033b4c:	461a      	mov	r2, r3
 8033b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8033b52:	6093      	str	r3, [r2, #8]
 8033b54:	e032      	b.n	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8033b56:	693b      	ldr	r3, [r7, #16]
 8033b58:	f003 0320 	and.w	r3, r3, #32
 8033b5c:	2b00      	cmp	r3, #0
 8033b5e:	d008      	beq.n	8033b72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8033b60:	683b      	ldr	r3, [r7, #0]
 8033b62:	015a      	lsls	r2, r3, #5
 8033b64:	69bb      	ldr	r3, [r7, #24]
 8033b66:	4413      	add	r3, r2
 8033b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033b6c:	461a      	mov	r2, r3
 8033b6e:	2320      	movs	r3, #32
 8033b70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8033b72:	683b      	ldr	r3, [r7, #0]
 8033b74:	b2db      	uxtb	r3, r3
 8033b76:	4619      	mov	r1, r3
 8033b78:	6878      	ldr	r0, [r7, #4]
 8033b7a:	f00a fef5 	bl	803e968 <HAL_PCD_DataOutStageCallback>
 8033b7e:	e01d      	b.n	8033bbc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8033b80:	683b      	ldr	r3, [r7, #0]
 8033b82:	2b00      	cmp	r3, #0
 8033b84:	d114      	bne.n	8033bb0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8033b86:	6879      	ldr	r1, [r7, #4]
 8033b88:	683a      	ldr	r2, [r7, #0]
 8033b8a:	4613      	mov	r3, r2
 8033b8c:	00db      	lsls	r3, r3, #3
 8033b8e:	4413      	add	r3, r2
 8033b90:	009b      	lsls	r3, r3, #2
 8033b92:	440b      	add	r3, r1
 8033b94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8033b98:	681b      	ldr	r3, [r3, #0]
 8033b9a:	2b00      	cmp	r3, #0
 8033b9c:	d108      	bne.n	8033bb0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8033b9e:	687b      	ldr	r3, [r7, #4]
 8033ba0:	6818      	ldr	r0, [r3, #0]
 8033ba2:	687b      	ldr	r3, [r7, #4]
 8033ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8033ba8:	461a      	mov	r2, r3
 8033baa:	2100      	movs	r1, #0
 8033bac:	f008 fc5a 	bl	803c464 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8033bb0:	683b      	ldr	r3, [r7, #0]
 8033bb2:	b2db      	uxtb	r3, r3
 8033bb4:	4619      	mov	r1, r3
 8033bb6:	6878      	ldr	r0, [r7, #4]
 8033bb8:	f00a fed6 	bl	803e968 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8033bbc:	2300      	movs	r3, #0
}
 8033bbe:	4618      	mov	r0, r3
 8033bc0:	3720      	adds	r7, #32
 8033bc2:	46bd      	mov	sp, r7
 8033bc4:	bd80      	pop	{r7, pc}
 8033bc6:	bf00      	nop
 8033bc8:	4f54300a 	.word	0x4f54300a
 8033bcc:	4f54310a 	.word	0x4f54310a

08033bd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8033bd0:	b580      	push	{r7, lr}
 8033bd2:	b086      	sub	sp, #24
 8033bd4:	af00      	add	r7, sp, #0
 8033bd6:	6078      	str	r0, [r7, #4]
 8033bd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8033bda:	687b      	ldr	r3, [r7, #4]
 8033bdc:	681b      	ldr	r3, [r3, #0]
 8033bde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8033be0:	697b      	ldr	r3, [r7, #20]
 8033be2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8033be4:	697b      	ldr	r3, [r7, #20]
 8033be6:	333c      	adds	r3, #60	; 0x3c
 8033be8:	3304      	adds	r3, #4
 8033bea:	681b      	ldr	r3, [r3, #0]
 8033bec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8033bee:	683b      	ldr	r3, [r7, #0]
 8033bf0:	015a      	lsls	r2, r3, #5
 8033bf2:	693b      	ldr	r3, [r7, #16]
 8033bf4:	4413      	add	r3, r2
 8033bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033bfa:	689b      	ldr	r3, [r3, #8]
 8033bfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033bfe:	68fb      	ldr	r3, [r7, #12]
 8033c00:	4a15      	ldr	r2, [pc, #84]	; (8033c58 <PCD_EP_OutSetupPacket_int+0x88>)
 8033c02:	4293      	cmp	r3, r2
 8033c04:	d90e      	bls.n	8033c24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8033c06:	68bb      	ldr	r3, [r7, #8]
 8033c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033c0c:	2b00      	cmp	r3, #0
 8033c0e:	d009      	beq.n	8033c24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8033c10:	683b      	ldr	r3, [r7, #0]
 8033c12:	015a      	lsls	r2, r3, #5
 8033c14:	693b      	ldr	r3, [r7, #16]
 8033c16:	4413      	add	r3, r2
 8033c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033c1c:	461a      	mov	r2, r3
 8033c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8033c22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8033c24:	6878      	ldr	r0, [r7, #4]
 8033c26:	f00a fe8d 	bl	803e944 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8033c2a:	68fb      	ldr	r3, [r7, #12]
 8033c2c:	4a0a      	ldr	r2, [pc, #40]	; (8033c58 <PCD_EP_OutSetupPacket_int+0x88>)
 8033c2e:	4293      	cmp	r3, r2
 8033c30:	d90c      	bls.n	8033c4c <PCD_EP_OutSetupPacket_int+0x7c>
 8033c32:	687b      	ldr	r3, [r7, #4]
 8033c34:	691b      	ldr	r3, [r3, #16]
 8033c36:	2b01      	cmp	r3, #1
 8033c38:	d108      	bne.n	8033c4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8033c3a:	687b      	ldr	r3, [r7, #4]
 8033c3c:	6818      	ldr	r0, [r3, #0]
 8033c3e:	687b      	ldr	r3, [r7, #4]
 8033c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8033c44:	461a      	mov	r2, r3
 8033c46:	2101      	movs	r1, #1
 8033c48:	f008 fc0c 	bl	803c464 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8033c4c:	2300      	movs	r3, #0
}
 8033c4e:	4618      	mov	r0, r3
 8033c50:	3718      	adds	r7, #24
 8033c52:	46bd      	mov	sp, r7
 8033c54:	bd80      	pop	{r7, pc}
 8033c56:	bf00      	nop
 8033c58:	4f54300a 	.word	0x4f54300a

08033c5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8033c5c:	b480      	push	{r7}
 8033c5e:	b085      	sub	sp, #20
 8033c60:	af00      	add	r7, sp, #0
 8033c62:	6078      	str	r0, [r7, #4]
 8033c64:	460b      	mov	r3, r1
 8033c66:	70fb      	strb	r3, [r7, #3]
 8033c68:	4613      	mov	r3, r2
 8033c6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8033c6c:	687b      	ldr	r3, [r7, #4]
 8033c6e:	681b      	ldr	r3, [r3, #0]
 8033c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033c72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8033c74:	78fb      	ldrb	r3, [r7, #3]
 8033c76:	2b00      	cmp	r3, #0
 8033c78:	d107      	bne.n	8033c8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8033c7a:	883b      	ldrh	r3, [r7, #0]
 8033c7c:	0419      	lsls	r1, r3, #16
 8033c7e:	687b      	ldr	r3, [r7, #4]
 8033c80:	681b      	ldr	r3, [r3, #0]
 8033c82:	68ba      	ldr	r2, [r7, #8]
 8033c84:	430a      	orrs	r2, r1
 8033c86:	629a      	str	r2, [r3, #40]	; 0x28
 8033c88:	e028      	b.n	8033cdc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8033c8a:	687b      	ldr	r3, [r7, #4]
 8033c8c:	681b      	ldr	r3, [r3, #0]
 8033c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033c90:	0c1b      	lsrs	r3, r3, #16
 8033c92:	68ba      	ldr	r2, [r7, #8]
 8033c94:	4413      	add	r3, r2
 8033c96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8033c98:	2300      	movs	r3, #0
 8033c9a:	73fb      	strb	r3, [r7, #15]
 8033c9c:	e00d      	b.n	8033cba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8033c9e:	687b      	ldr	r3, [r7, #4]
 8033ca0:	681a      	ldr	r2, [r3, #0]
 8033ca2:	7bfb      	ldrb	r3, [r7, #15]
 8033ca4:	3340      	adds	r3, #64	; 0x40
 8033ca6:	009b      	lsls	r3, r3, #2
 8033ca8:	4413      	add	r3, r2
 8033caa:	685b      	ldr	r3, [r3, #4]
 8033cac:	0c1b      	lsrs	r3, r3, #16
 8033cae:	68ba      	ldr	r2, [r7, #8]
 8033cb0:	4413      	add	r3, r2
 8033cb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8033cb4:	7bfb      	ldrb	r3, [r7, #15]
 8033cb6:	3301      	adds	r3, #1
 8033cb8:	73fb      	strb	r3, [r7, #15]
 8033cba:	7bfa      	ldrb	r2, [r7, #15]
 8033cbc:	78fb      	ldrb	r3, [r7, #3]
 8033cbe:	3b01      	subs	r3, #1
 8033cc0:	429a      	cmp	r2, r3
 8033cc2:	d3ec      	bcc.n	8033c9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8033cc4:	883b      	ldrh	r3, [r7, #0]
 8033cc6:	0418      	lsls	r0, r3, #16
 8033cc8:	687b      	ldr	r3, [r7, #4]
 8033cca:	6819      	ldr	r1, [r3, #0]
 8033ccc:	78fb      	ldrb	r3, [r7, #3]
 8033cce:	3b01      	subs	r3, #1
 8033cd0:	68ba      	ldr	r2, [r7, #8]
 8033cd2:	4302      	orrs	r2, r0
 8033cd4:	3340      	adds	r3, #64	; 0x40
 8033cd6:	009b      	lsls	r3, r3, #2
 8033cd8:	440b      	add	r3, r1
 8033cda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8033cdc:	2300      	movs	r3, #0
}
 8033cde:	4618      	mov	r0, r3
 8033ce0:	3714      	adds	r7, #20
 8033ce2:	46bd      	mov	sp, r7
 8033ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033ce8:	4770      	bx	lr

08033cea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8033cea:	b480      	push	{r7}
 8033cec:	b083      	sub	sp, #12
 8033cee:	af00      	add	r7, sp, #0
 8033cf0:	6078      	str	r0, [r7, #4]
 8033cf2:	460b      	mov	r3, r1
 8033cf4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8033cf6:	687b      	ldr	r3, [r7, #4]
 8033cf8:	681b      	ldr	r3, [r3, #0]
 8033cfa:	887a      	ldrh	r2, [r7, #2]
 8033cfc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8033cfe:	2300      	movs	r3, #0
}
 8033d00:	4618      	mov	r0, r3
 8033d02:	370c      	adds	r7, #12
 8033d04:	46bd      	mov	sp, r7
 8033d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033d0a:	4770      	bx	lr

08033d0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8033d0c:	b480      	push	{r7}
 8033d0e:	b085      	sub	sp, #20
 8033d10:	af00      	add	r7, sp, #0
 8033d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8033d14:	687b      	ldr	r3, [r7, #4]
 8033d16:	681b      	ldr	r3, [r3, #0]
 8033d18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8033d1a:	687b      	ldr	r3, [r7, #4]
 8033d1c:	2201      	movs	r2, #1
 8033d1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8033d22:	687b      	ldr	r3, [r7, #4]
 8033d24:	2200      	movs	r2, #0
 8033d26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8033d2a:	68fb      	ldr	r3, [r7, #12]
 8033d2c:	699b      	ldr	r3, [r3, #24]
 8033d2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8033d32:	68fb      	ldr	r3, [r7, #12]
 8033d34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8033d36:	68fb      	ldr	r3, [r7, #12]
 8033d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8033d3a:	4b05      	ldr	r3, [pc, #20]	; (8033d50 <HAL_PCDEx_ActivateLPM+0x44>)
 8033d3c:	4313      	orrs	r3, r2
 8033d3e:	68fa      	ldr	r2, [r7, #12]
 8033d40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8033d42:	2300      	movs	r3, #0
}
 8033d44:	4618      	mov	r0, r3
 8033d46:	3714      	adds	r7, #20
 8033d48:	46bd      	mov	sp, r7
 8033d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033d4e:	4770      	bx	lr
 8033d50:	10000003 	.word	0x10000003

08033d54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8033d54:	b480      	push	{r7}
 8033d56:	b083      	sub	sp, #12
 8033d58:	af00      	add	r7, sp, #0
 8033d5a:	6078      	str	r0, [r7, #4]
 8033d5c:	460b      	mov	r3, r1
 8033d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8033d60:	bf00      	nop
 8033d62:	370c      	adds	r7, #12
 8033d64:	46bd      	mov	sp, r7
 8033d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033d6a:	4770      	bx	lr

08033d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8033d6c:	b580      	push	{r7, lr}
 8033d6e:	b084      	sub	sp, #16
 8033d70:	af00      	add	r7, sp, #0
 8033d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8033d74:	4b19      	ldr	r3, [pc, #100]	; (8033ddc <HAL_PWREx_ConfigSupply+0x70>)
 8033d76:	68db      	ldr	r3, [r3, #12]
 8033d78:	f003 0304 	and.w	r3, r3, #4
 8033d7c:	2b04      	cmp	r3, #4
 8033d7e:	d00a      	beq.n	8033d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8033d80:	4b16      	ldr	r3, [pc, #88]	; (8033ddc <HAL_PWREx_ConfigSupply+0x70>)
 8033d82:	68db      	ldr	r3, [r3, #12]
 8033d84:	f003 0307 	and.w	r3, r3, #7
 8033d88:	687a      	ldr	r2, [r7, #4]
 8033d8a:	429a      	cmp	r2, r3
 8033d8c:	d001      	beq.n	8033d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8033d8e:	2301      	movs	r3, #1
 8033d90:	e01f      	b.n	8033dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8033d92:	2300      	movs	r3, #0
 8033d94:	e01d      	b.n	8033dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8033d96:	4b11      	ldr	r3, [pc, #68]	; (8033ddc <HAL_PWREx_ConfigSupply+0x70>)
 8033d98:	68db      	ldr	r3, [r3, #12]
 8033d9a:	f023 0207 	bic.w	r2, r3, #7
 8033d9e:	490f      	ldr	r1, [pc, #60]	; (8033ddc <HAL_PWREx_ConfigSupply+0x70>)
 8033da0:	687b      	ldr	r3, [r7, #4]
 8033da2:	4313      	orrs	r3, r2
 8033da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8033da6:	f7fa f843 	bl	802de30 <HAL_GetTick>
 8033daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8033dac:	e009      	b.n	8033dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8033dae:	f7fa f83f 	bl	802de30 <HAL_GetTick>
 8033db2:	4602      	mov	r2, r0
 8033db4:	68fb      	ldr	r3, [r7, #12]
 8033db6:	1ad3      	subs	r3, r2, r3
 8033db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8033dbc:	d901      	bls.n	8033dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8033dbe:	2301      	movs	r3, #1
 8033dc0:	e007      	b.n	8033dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8033dc2:	4b06      	ldr	r3, [pc, #24]	; (8033ddc <HAL_PWREx_ConfigSupply+0x70>)
 8033dc4:	685b      	ldr	r3, [r3, #4]
 8033dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8033dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033dce:	d1ee      	bne.n	8033dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8033dd0:	2300      	movs	r3, #0
}
 8033dd2:	4618      	mov	r0, r3
 8033dd4:	3710      	adds	r7, #16
 8033dd6:	46bd      	mov	sp, r7
 8033dd8:	bd80      	pop	{r7, pc}
 8033dda:	bf00      	nop
 8033ddc:	58024800 	.word	0x58024800

08033de0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8033de0:	b480      	push	{r7}
 8033de2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8033de4:	4b05      	ldr	r3, [pc, #20]	; (8033dfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8033de6:	68db      	ldr	r3, [r3, #12]
 8033de8:	4a04      	ldr	r2, [pc, #16]	; (8033dfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8033dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8033dee:	60d3      	str	r3, [r2, #12]
}
 8033df0:	bf00      	nop
 8033df2:	46bd      	mov	sp, r7
 8033df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033df8:	4770      	bx	lr
 8033dfa:	bf00      	nop
 8033dfc:	58024800 	.word	0x58024800

08033e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8033e00:	b580      	push	{r7, lr}
 8033e02:	b08c      	sub	sp, #48	; 0x30
 8033e04:	af00      	add	r7, sp, #0
 8033e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8033e08:	687b      	ldr	r3, [r7, #4]
 8033e0a:	2b00      	cmp	r3, #0
 8033e0c:	d102      	bne.n	8033e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8033e0e:	2301      	movs	r3, #1
 8033e10:	f000 bc1d 	b.w	803464e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8033e14:	687b      	ldr	r3, [r7, #4]
 8033e16:	681b      	ldr	r3, [r3, #0]
 8033e18:	f003 0301 	and.w	r3, r3, #1
 8033e1c:	2b00      	cmp	r3, #0
 8033e1e:	f000 8087 	beq.w	8033f30 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8033e22:	4b99      	ldr	r3, [pc, #612]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e24:	691b      	ldr	r3, [r3, #16]
 8033e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8033e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8033e2c:	4b96      	ldr	r3, [pc, #600]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033e30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8033e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033e34:	2b10      	cmp	r3, #16
 8033e36:	d007      	beq.n	8033e48 <HAL_RCC_OscConfig+0x48>
 8033e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033e3a:	2b18      	cmp	r3, #24
 8033e3c:	d110      	bne.n	8033e60 <HAL_RCC_OscConfig+0x60>
 8033e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033e40:	f003 0303 	and.w	r3, r3, #3
 8033e44:	2b02      	cmp	r3, #2
 8033e46:	d10b      	bne.n	8033e60 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8033e48:	4b8f      	ldr	r3, [pc, #572]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e4a:	681b      	ldr	r3, [r3, #0]
 8033e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033e50:	2b00      	cmp	r3, #0
 8033e52:	d06c      	beq.n	8033f2e <HAL_RCC_OscConfig+0x12e>
 8033e54:	687b      	ldr	r3, [r7, #4]
 8033e56:	685b      	ldr	r3, [r3, #4]
 8033e58:	2b00      	cmp	r3, #0
 8033e5a:	d168      	bne.n	8033f2e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8033e5c:	2301      	movs	r3, #1
 8033e5e:	e3f6      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8033e60:	687b      	ldr	r3, [r7, #4]
 8033e62:	685b      	ldr	r3, [r3, #4]
 8033e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8033e68:	d106      	bne.n	8033e78 <HAL_RCC_OscConfig+0x78>
 8033e6a:	4b87      	ldr	r3, [pc, #540]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e6c:	681b      	ldr	r3, [r3, #0]
 8033e6e:	4a86      	ldr	r2, [pc, #536]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8033e74:	6013      	str	r3, [r2, #0]
 8033e76:	e02e      	b.n	8033ed6 <HAL_RCC_OscConfig+0xd6>
 8033e78:	687b      	ldr	r3, [r7, #4]
 8033e7a:	685b      	ldr	r3, [r3, #4]
 8033e7c:	2b00      	cmp	r3, #0
 8033e7e:	d10c      	bne.n	8033e9a <HAL_RCC_OscConfig+0x9a>
 8033e80:	4b81      	ldr	r3, [pc, #516]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e82:	681b      	ldr	r3, [r3, #0]
 8033e84:	4a80      	ldr	r2, [pc, #512]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8033e8a:	6013      	str	r3, [r2, #0]
 8033e8c:	4b7e      	ldr	r3, [pc, #504]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e8e:	681b      	ldr	r3, [r3, #0]
 8033e90:	4a7d      	ldr	r2, [pc, #500]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8033e96:	6013      	str	r3, [r2, #0]
 8033e98:	e01d      	b.n	8033ed6 <HAL_RCC_OscConfig+0xd6>
 8033e9a:	687b      	ldr	r3, [r7, #4]
 8033e9c:	685b      	ldr	r3, [r3, #4]
 8033e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8033ea2:	d10c      	bne.n	8033ebe <HAL_RCC_OscConfig+0xbe>
 8033ea4:	4b78      	ldr	r3, [pc, #480]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033ea6:	681b      	ldr	r3, [r3, #0]
 8033ea8:	4a77      	ldr	r2, [pc, #476]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8033eae:	6013      	str	r3, [r2, #0]
 8033eb0:	4b75      	ldr	r3, [pc, #468]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033eb2:	681b      	ldr	r3, [r3, #0]
 8033eb4:	4a74      	ldr	r2, [pc, #464]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8033eba:	6013      	str	r3, [r2, #0]
 8033ebc:	e00b      	b.n	8033ed6 <HAL_RCC_OscConfig+0xd6>
 8033ebe:	4b72      	ldr	r3, [pc, #456]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033ec0:	681b      	ldr	r3, [r3, #0]
 8033ec2:	4a71      	ldr	r2, [pc, #452]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8033ec8:	6013      	str	r3, [r2, #0]
 8033eca:	4b6f      	ldr	r3, [pc, #444]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033ecc:	681b      	ldr	r3, [r3, #0]
 8033ece:	4a6e      	ldr	r2, [pc, #440]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8033ed4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8033ed6:	687b      	ldr	r3, [r7, #4]
 8033ed8:	685b      	ldr	r3, [r3, #4]
 8033eda:	2b00      	cmp	r3, #0
 8033edc:	d013      	beq.n	8033f06 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8033ede:	f7f9 ffa7 	bl	802de30 <HAL_GetTick>
 8033ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8033ee4:	e008      	b.n	8033ef8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8033ee6:	f7f9 ffa3 	bl	802de30 <HAL_GetTick>
 8033eea:	4602      	mov	r2, r0
 8033eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033eee:	1ad3      	subs	r3, r2, r3
 8033ef0:	2b64      	cmp	r3, #100	; 0x64
 8033ef2:	d901      	bls.n	8033ef8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8033ef4:	2303      	movs	r3, #3
 8033ef6:	e3aa      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8033ef8:	4b63      	ldr	r3, [pc, #396]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033efa:	681b      	ldr	r3, [r3, #0]
 8033efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033f00:	2b00      	cmp	r3, #0
 8033f02:	d0f0      	beq.n	8033ee6 <HAL_RCC_OscConfig+0xe6>
 8033f04:	e014      	b.n	8033f30 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8033f06:	f7f9 ff93 	bl	802de30 <HAL_GetTick>
 8033f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8033f0c:	e008      	b.n	8033f20 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8033f0e:	f7f9 ff8f 	bl	802de30 <HAL_GetTick>
 8033f12:	4602      	mov	r2, r0
 8033f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f16:	1ad3      	subs	r3, r2, r3
 8033f18:	2b64      	cmp	r3, #100	; 0x64
 8033f1a:	d901      	bls.n	8033f20 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8033f1c:	2303      	movs	r3, #3
 8033f1e:	e396      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8033f20:	4b59      	ldr	r3, [pc, #356]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033f22:	681b      	ldr	r3, [r3, #0]
 8033f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033f28:	2b00      	cmp	r3, #0
 8033f2a:	d1f0      	bne.n	8033f0e <HAL_RCC_OscConfig+0x10e>
 8033f2c:	e000      	b.n	8033f30 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8033f2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8033f30:	687b      	ldr	r3, [r7, #4]
 8033f32:	681b      	ldr	r3, [r3, #0]
 8033f34:	f003 0302 	and.w	r3, r3, #2
 8033f38:	2b00      	cmp	r3, #0
 8033f3a:	f000 80cb 	beq.w	80340d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8033f3e:	4b52      	ldr	r3, [pc, #328]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033f40:	691b      	ldr	r3, [r3, #16]
 8033f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8033f46:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8033f48:	4b4f      	ldr	r3, [pc, #316]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033f4c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8033f4e:	6a3b      	ldr	r3, [r7, #32]
 8033f50:	2b00      	cmp	r3, #0
 8033f52:	d007      	beq.n	8033f64 <HAL_RCC_OscConfig+0x164>
 8033f54:	6a3b      	ldr	r3, [r7, #32]
 8033f56:	2b18      	cmp	r3, #24
 8033f58:	d156      	bne.n	8034008 <HAL_RCC_OscConfig+0x208>
 8033f5a:	69fb      	ldr	r3, [r7, #28]
 8033f5c:	f003 0303 	and.w	r3, r3, #3
 8033f60:	2b00      	cmp	r3, #0
 8033f62:	d151      	bne.n	8034008 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8033f64:	4b48      	ldr	r3, [pc, #288]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033f66:	681b      	ldr	r3, [r3, #0]
 8033f68:	f003 0304 	and.w	r3, r3, #4
 8033f6c:	2b00      	cmp	r3, #0
 8033f6e:	d005      	beq.n	8033f7c <HAL_RCC_OscConfig+0x17c>
 8033f70:	687b      	ldr	r3, [r7, #4]
 8033f72:	68db      	ldr	r3, [r3, #12]
 8033f74:	2b00      	cmp	r3, #0
 8033f76:	d101      	bne.n	8033f7c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8033f78:	2301      	movs	r3, #1
 8033f7a:	e368      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8033f7c:	4b42      	ldr	r3, [pc, #264]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033f7e:	681b      	ldr	r3, [r3, #0]
 8033f80:	f023 0219 	bic.w	r2, r3, #25
 8033f84:	687b      	ldr	r3, [r7, #4]
 8033f86:	68db      	ldr	r3, [r3, #12]
 8033f88:	493f      	ldr	r1, [pc, #252]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033f8a:	4313      	orrs	r3, r2
 8033f8c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8033f8e:	f7f9 ff4f 	bl	802de30 <HAL_GetTick>
 8033f92:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8033f94:	e008      	b.n	8033fa8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8033f96:	f7f9 ff4b 	bl	802de30 <HAL_GetTick>
 8033f9a:	4602      	mov	r2, r0
 8033f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f9e:	1ad3      	subs	r3, r2, r3
 8033fa0:	2b02      	cmp	r3, #2
 8033fa2:	d901      	bls.n	8033fa8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8033fa4:	2303      	movs	r3, #3
 8033fa6:	e352      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8033fa8:	4b37      	ldr	r3, [pc, #220]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033faa:	681b      	ldr	r3, [r3, #0]
 8033fac:	f003 0304 	and.w	r3, r3, #4
 8033fb0:	2b00      	cmp	r3, #0
 8033fb2:	d0f0      	beq.n	8033f96 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8033fb4:	f7f9 ff6c 	bl	802de90 <HAL_GetREVID>
 8033fb8:	4603      	mov	r3, r0
 8033fba:	f241 0203 	movw	r2, #4099	; 0x1003
 8033fbe:	4293      	cmp	r3, r2
 8033fc0:	d817      	bhi.n	8033ff2 <HAL_RCC_OscConfig+0x1f2>
 8033fc2:	687b      	ldr	r3, [r7, #4]
 8033fc4:	691b      	ldr	r3, [r3, #16]
 8033fc6:	2b40      	cmp	r3, #64	; 0x40
 8033fc8:	d108      	bne.n	8033fdc <HAL_RCC_OscConfig+0x1dc>
 8033fca:	4b2f      	ldr	r3, [pc, #188]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033fcc:	685b      	ldr	r3, [r3, #4]
 8033fce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8033fd2:	4a2d      	ldr	r2, [pc, #180]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033fd8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8033fda:	e07b      	b.n	80340d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8033fdc:	4b2a      	ldr	r3, [pc, #168]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033fde:	685b      	ldr	r3, [r3, #4]
 8033fe0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8033fe4:	687b      	ldr	r3, [r7, #4]
 8033fe6:	691b      	ldr	r3, [r3, #16]
 8033fe8:	031b      	lsls	r3, r3, #12
 8033fea:	4927      	ldr	r1, [pc, #156]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033fec:	4313      	orrs	r3, r2
 8033fee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8033ff0:	e070      	b.n	80340d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8033ff2:	4b25      	ldr	r3, [pc, #148]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8033ff4:	685b      	ldr	r3, [r3, #4]
 8033ff6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8033ffa:	687b      	ldr	r3, [r7, #4]
 8033ffc:	691b      	ldr	r3, [r3, #16]
 8033ffe:	061b      	lsls	r3, r3, #24
 8034000:	4921      	ldr	r1, [pc, #132]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8034002:	4313      	orrs	r3, r2
 8034004:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8034006:	e065      	b.n	80340d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8034008:	687b      	ldr	r3, [r7, #4]
 803400a:	68db      	ldr	r3, [r3, #12]
 803400c:	2b00      	cmp	r3, #0
 803400e:	d048      	beq.n	80340a2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8034010:	4b1d      	ldr	r3, [pc, #116]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8034012:	681b      	ldr	r3, [r3, #0]
 8034014:	f023 0219 	bic.w	r2, r3, #25
 8034018:	687b      	ldr	r3, [r7, #4]
 803401a:	68db      	ldr	r3, [r3, #12]
 803401c:	491a      	ldr	r1, [pc, #104]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 803401e:	4313      	orrs	r3, r2
 8034020:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034022:	f7f9 ff05 	bl	802de30 <HAL_GetTick>
 8034026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8034028:	e008      	b.n	803403c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803402a:	f7f9 ff01 	bl	802de30 <HAL_GetTick>
 803402e:	4602      	mov	r2, r0
 8034030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034032:	1ad3      	subs	r3, r2, r3
 8034034:	2b02      	cmp	r3, #2
 8034036:	d901      	bls.n	803403c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8034038:	2303      	movs	r3, #3
 803403a:	e308      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 803403c:	4b12      	ldr	r3, [pc, #72]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 803403e:	681b      	ldr	r3, [r3, #0]
 8034040:	f003 0304 	and.w	r3, r3, #4
 8034044:	2b00      	cmp	r3, #0
 8034046:	d0f0      	beq.n	803402a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8034048:	f7f9 ff22 	bl	802de90 <HAL_GetREVID>
 803404c:	4603      	mov	r3, r0
 803404e:	f241 0203 	movw	r2, #4099	; 0x1003
 8034052:	4293      	cmp	r3, r2
 8034054:	d81a      	bhi.n	803408c <HAL_RCC_OscConfig+0x28c>
 8034056:	687b      	ldr	r3, [r7, #4]
 8034058:	691b      	ldr	r3, [r3, #16]
 803405a:	2b40      	cmp	r3, #64	; 0x40
 803405c:	d108      	bne.n	8034070 <HAL_RCC_OscConfig+0x270>
 803405e:	4b0a      	ldr	r3, [pc, #40]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8034060:	685b      	ldr	r3, [r3, #4]
 8034062:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8034066:	4a08      	ldr	r2, [pc, #32]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8034068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803406c:	6053      	str	r3, [r2, #4]
 803406e:	e031      	b.n	80340d4 <HAL_RCC_OscConfig+0x2d4>
 8034070:	4b05      	ldr	r3, [pc, #20]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8034072:	685b      	ldr	r3, [r3, #4]
 8034074:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8034078:	687b      	ldr	r3, [r7, #4]
 803407a:	691b      	ldr	r3, [r3, #16]
 803407c:	031b      	lsls	r3, r3, #12
 803407e:	4902      	ldr	r1, [pc, #8]	; (8034088 <HAL_RCC_OscConfig+0x288>)
 8034080:	4313      	orrs	r3, r2
 8034082:	604b      	str	r3, [r1, #4]
 8034084:	e026      	b.n	80340d4 <HAL_RCC_OscConfig+0x2d4>
 8034086:	bf00      	nop
 8034088:	58024400 	.word	0x58024400
 803408c:	4b9a      	ldr	r3, [pc, #616]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803408e:	685b      	ldr	r3, [r3, #4]
 8034090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8034094:	687b      	ldr	r3, [r7, #4]
 8034096:	691b      	ldr	r3, [r3, #16]
 8034098:	061b      	lsls	r3, r3, #24
 803409a:	4997      	ldr	r1, [pc, #604]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803409c:	4313      	orrs	r3, r2
 803409e:	604b      	str	r3, [r1, #4]
 80340a0:	e018      	b.n	80340d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80340a2:	4b95      	ldr	r3, [pc, #596]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80340a4:	681b      	ldr	r3, [r3, #0]
 80340a6:	4a94      	ldr	r2, [pc, #592]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80340a8:	f023 0301 	bic.w	r3, r3, #1
 80340ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80340ae:	f7f9 febf 	bl	802de30 <HAL_GetTick>
 80340b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80340b4:	e008      	b.n	80340c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80340b6:	f7f9 febb 	bl	802de30 <HAL_GetTick>
 80340ba:	4602      	mov	r2, r0
 80340bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80340be:	1ad3      	subs	r3, r2, r3
 80340c0:	2b02      	cmp	r3, #2
 80340c2:	d901      	bls.n	80340c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80340c4:	2303      	movs	r3, #3
 80340c6:	e2c2      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80340c8:	4b8b      	ldr	r3, [pc, #556]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80340ca:	681b      	ldr	r3, [r3, #0]
 80340cc:	f003 0304 	and.w	r3, r3, #4
 80340d0:	2b00      	cmp	r3, #0
 80340d2:	d1f0      	bne.n	80340b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80340d4:	687b      	ldr	r3, [r7, #4]
 80340d6:	681b      	ldr	r3, [r3, #0]
 80340d8:	f003 0310 	and.w	r3, r3, #16
 80340dc:	2b00      	cmp	r3, #0
 80340de:	f000 80a9 	beq.w	8034234 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80340e2:	4b85      	ldr	r3, [pc, #532]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80340e4:	691b      	ldr	r3, [r3, #16]
 80340e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80340ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80340ec:	4b82      	ldr	r3, [pc, #520]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80340ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80340f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80340f2:	69bb      	ldr	r3, [r7, #24]
 80340f4:	2b08      	cmp	r3, #8
 80340f6:	d007      	beq.n	8034108 <HAL_RCC_OscConfig+0x308>
 80340f8:	69bb      	ldr	r3, [r7, #24]
 80340fa:	2b18      	cmp	r3, #24
 80340fc:	d13a      	bne.n	8034174 <HAL_RCC_OscConfig+0x374>
 80340fe:	697b      	ldr	r3, [r7, #20]
 8034100:	f003 0303 	and.w	r3, r3, #3
 8034104:	2b01      	cmp	r3, #1
 8034106:	d135      	bne.n	8034174 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8034108:	4b7b      	ldr	r3, [pc, #492]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803410a:	681b      	ldr	r3, [r3, #0]
 803410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034110:	2b00      	cmp	r3, #0
 8034112:	d005      	beq.n	8034120 <HAL_RCC_OscConfig+0x320>
 8034114:	687b      	ldr	r3, [r7, #4]
 8034116:	69db      	ldr	r3, [r3, #28]
 8034118:	2b80      	cmp	r3, #128	; 0x80
 803411a:	d001      	beq.n	8034120 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 803411c:	2301      	movs	r3, #1
 803411e:	e296      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8034120:	f7f9 feb6 	bl	802de90 <HAL_GetREVID>
 8034124:	4603      	mov	r3, r0
 8034126:	f241 0203 	movw	r2, #4099	; 0x1003
 803412a:	4293      	cmp	r3, r2
 803412c:	d817      	bhi.n	803415e <HAL_RCC_OscConfig+0x35e>
 803412e:	687b      	ldr	r3, [r7, #4]
 8034130:	6a1b      	ldr	r3, [r3, #32]
 8034132:	2b20      	cmp	r3, #32
 8034134:	d108      	bne.n	8034148 <HAL_RCC_OscConfig+0x348>
 8034136:	4b70      	ldr	r3, [pc, #448]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034138:	685b      	ldr	r3, [r3, #4]
 803413a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 803413e:	4a6e      	ldr	r2, [pc, #440]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8034144:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8034146:	e075      	b.n	8034234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8034148:	4b6b      	ldr	r3, [pc, #428]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803414a:	685b      	ldr	r3, [r3, #4]
 803414c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8034150:	687b      	ldr	r3, [r7, #4]
 8034152:	6a1b      	ldr	r3, [r3, #32]
 8034154:	069b      	lsls	r3, r3, #26
 8034156:	4968      	ldr	r1, [pc, #416]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034158:	4313      	orrs	r3, r2
 803415a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 803415c:	e06a      	b.n	8034234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 803415e:	4b66      	ldr	r3, [pc, #408]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034160:	68db      	ldr	r3, [r3, #12]
 8034162:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8034166:	687b      	ldr	r3, [r7, #4]
 8034168:	6a1b      	ldr	r3, [r3, #32]
 803416a:	061b      	lsls	r3, r3, #24
 803416c:	4962      	ldr	r1, [pc, #392]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803416e:	4313      	orrs	r3, r2
 8034170:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8034172:	e05f      	b.n	8034234 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8034174:	687b      	ldr	r3, [r7, #4]
 8034176:	69db      	ldr	r3, [r3, #28]
 8034178:	2b00      	cmp	r3, #0
 803417a:	d042      	beq.n	8034202 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 803417c:	4b5e      	ldr	r3, [pc, #376]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803417e:	681b      	ldr	r3, [r3, #0]
 8034180:	4a5d      	ldr	r2, [pc, #372]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8034186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034188:	f7f9 fe52 	bl	802de30 <HAL_GetTick>
 803418c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 803418e:	e008      	b.n	80341a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8034190:	f7f9 fe4e 	bl	802de30 <HAL_GetTick>
 8034194:	4602      	mov	r2, r0
 8034196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034198:	1ad3      	subs	r3, r2, r3
 803419a:	2b02      	cmp	r3, #2
 803419c:	d901      	bls.n	80341a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 803419e:	2303      	movs	r3, #3
 80341a0:	e255      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80341a2:	4b55      	ldr	r3, [pc, #340]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80341a4:	681b      	ldr	r3, [r3, #0]
 80341a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80341aa:	2b00      	cmp	r3, #0
 80341ac:	d0f0      	beq.n	8034190 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80341ae:	f7f9 fe6f 	bl	802de90 <HAL_GetREVID>
 80341b2:	4603      	mov	r3, r0
 80341b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80341b8:	4293      	cmp	r3, r2
 80341ba:	d817      	bhi.n	80341ec <HAL_RCC_OscConfig+0x3ec>
 80341bc:	687b      	ldr	r3, [r7, #4]
 80341be:	6a1b      	ldr	r3, [r3, #32]
 80341c0:	2b20      	cmp	r3, #32
 80341c2:	d108      	bne.n	80341d6 <HAL_RCC_OscConfig+0x3d6>
 80341c4:	4b4c      	ldr	r3, [pc, #304]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80341c6:	685b      	ldr	r3, [r3, #4]
 80341c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80341cc:	4a4a      	ldr	r2, [pc, #296]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80341ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80341d2:	6053      	str	r3, [r2, #4]
 80341d4:	e02e      	b.n	8034234 <HAL_RCC_OscConfig+0x434>
 80341d6:	4b48      	ldr	r3, [pc, #288]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80341d8:	685b      	ldr	r3, [r3, #4]
 80341da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80341de:	687b      	ldr	r3, [r7, #4]
 80341e0:	6a1b      	ldr	r3, [r3, #32]
 80341e2:	069b      	lsls	r3, r3, #26
 80341e4:	4944      	ldr	r1, [pc, #272]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80341e6:	4313      	orrs	r3, r2
 80341e8:	604b      	str	r3, [r1, #4]
 80341ea:	e023      	b.n	8034234 <HAL_RCC_OscConfig+0x434>
 80341ec:	4b42      	ldr	r3, [pc, #264]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80341ee:	68db      	ldr	r3, [r3, #12]
 80341f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80341f4:	687b      	ldr	r3, [r7, #4]
 80341f6:	6a1b      	ldr	r3, [r3, #32]
 80341f8:	061b      	lsls	r3, r3, #24
 80341fa:	493f      	ldr	r1, [pc, #252]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80341fc:	4313      	orrs	r3, r2
 80341fe:	60cb      	str	r3, [r1, #12]
 8034200:	e018      	b.n	8034234 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8034202:	4b3d      	ldr	r3, [pc, #244]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034204:	681b      	ldr	r3, [r3, #0]
 8034206:	4a3c      	ldr	r2, [pc, #240]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803420c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803420e:	f7f9 fe0f 	bl	802de30 <HAL_GetTick>
 8034212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8034214:	e008      	b.n	8034228 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8034216:	f7f9 fe0b 	bl	802de30 <HAL_GetTick>
 803421a:	4602      	mov	r2, r0
 803421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803421e:	1ad3      	subs	r3, r2, r3
 8034220:	2b02      	cmp	r3, #2
 8034222:	d901      	bls.n	8034228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8034224:	2303      	movs	r3, #3
 8034226:	e212      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8034228:	4b33      	ldr	r3, [pc, #204]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803422a:	681b      	ldr	r3, [r3, #0]
 803422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034230:	2b00      	cmp	r3, #0
 8034232:	d1f0      	bne.n	8034216 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8034234:	687b      	ldr	r3, [r7, #4]
 8034236:	681b      	ldr	r3, [r3, #0]
 8034238:	f003 0308 	and.w	r3, r3, #8
 803423c:	2b00      	cmp	r3, #0
 803423e:	d036      	beq.n	80342ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8034240:	687b      	ldr	r3, [r7, #4]
 8034242:	695b      	ldr	r3, [r3, #20]
 8034244:	2b00      	cmp	r3, #0
 8034246:	d019      	beq.n	803427c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8034248:	4b2b      	ldr	r3, [pc, #172]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803424c:	4a2a      	ldr	r2, [pc, #168]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803424e:	f043 0301 	orr.w	r3, r3, #1
 8034252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034254:	f7f9 fdec 	bl	802de30 <HAL_GetTick>
 8034258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 803425a:	e008      	b.n	803426e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 803425c:	f7f9 fde8 	bl	802de30 <HAL_GetTick>
 8034260:	4602      	mov	r2, r0
 8034262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034264:	1ad3      	subs	r3, r2, r3
 8034266:	2b02      	cmp	r3, #2
 8034268:	d901      	bls.n	803426e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 803426a:	2303      	movs	r3, #3
 803426c:	e1ef      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 803426e:	4b22      	ldr	r3, [pc, #136]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034272:	f003 0302 	and.w	r3, r3, #2
 8034276:	2b00      	cmp	r3, #0
 8034278:	d0f0      	beq.n	803425c <HAL_RCC_OscConfig+0x45c>
 803427a:	e018      	b.n	80342ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 803427c:	4b1e      	ldr	r3, [pc, #120]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 803427e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034280:	4a1d      	ldr	r2, [pc, #116]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 8034282:	f023 0301 	bic.w	r3, r3, #1
 8034286:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034288:	f7f9 fdd2 	bl	802de30 <HAL_GetTick>
 803428c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 803428e:	e008      	b.n	80342a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8034290:	f7f9 fdce 	bl	802de30 <HAL_GetTick>
 8034294:	4602      	mov	r2, r0
 8034296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034298:	1ad3      	subs	r3, r2, r3
 803429a:	2b02      	cmp	r3, #2
 803429c:	d901      	bls.n	80342a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 803429e:	2303      	movs	r3, #3
 80342a0:	e1d5      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80342a2:	4b15      	ldr	r3, [pc, #84]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80342a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80342a6:	f003 0302 	and.w	r3, r3, #2
 80342aa:	2b00      	cmp	r3, #0
 80342ac:	d1f0      	bne.n	8034290 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80342ae:	687b      	ldr	r3, [r7, #4]
 80342b0:	681b      	ldr	r3, [r3, #0]
 80342b2:	f003 0320 	and.w	r3, r3, #32
 80342b6:	2b00      	cmp	r3, #0
 80342b8:	d039      	beq.n	803432e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80342ba:	687b      	ldr	r3, [r7, #4]
 80342bc:	699b      	ldr	r3, [r3, #24]
 80342be:	2b00      	cmp	r3, #0
 80342c0:	d01c      	beq.n	80342fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80342c2:	4b0d      	ldr	r3, [pc, #52]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80342c4:	681b      	ldr	r3, [r3, #0]
 80342c6:	4a0c      	ldr	r2, [pc, #48]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80342c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80342cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80342ce:	f7f9 fdaf 	bl	802de30 <HAL_GetTick>
 80342d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80342d4:	e008      	b.n	80342e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80342d6:	f7f9 fdab 	bl	802de30 <HAL_GetTick>
 80342da:	4602      	mov	r2, r0
 80342dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80342de:	1ad3      	subs	r3, r2, r3
 80342e0:	2b02      	cmp	r3, #2
 80342e2:	d901      	bls.n	80342e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80342e4:	2303      	movs	r3, #3
 80342e6:	e1b2      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80342e8:	4b03      	ldr	r3, [pc, #12]	; (80342f8 <HAL_RCC_OscConfig+0x4f8>)
 80342ea:	681b      	ldr	r3, [r3, #0]
 80342ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80342f0:	2b00      	cmp	r3, #0
 80342f2:	d0f0      	beq.n	80342d6 <HAL_RCC_OscConfig+0x4d6>
 80342f4:	e01b      	b.n	803432e <HAL_RCC_OscConfig+0x52e>
 80342f6:	bf00      	nop
 80342f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80342fc:	4b9b      	ldr	r3, [pc, #620]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80342fe:	681b      	ldr	r3, [r3, #0]
 8034300:	4a9a      	ldr	r2, [pc, #616]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8034306:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8034308:	f7f9 fd92 	bl	802de30 <HAL_GetTick>
 803430c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 803430e:	e008      	b.n	8034322 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8034310:	f7f9 fd8e 	bl	802de30 <HAL_GetTick>
 8034314:	4602      	mov	r2, r0
 8034316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034318:	1ad3      	subs	r3, r2, r3
 803431a:	2b02      	cmp	r3, #2
 803431c:	d901      	bls.n	8034322 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 803431e:	2303      	movs	r3, #3
 8034320:	e195      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8034322:	4b92      	ldr	r3, [pc, #584]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034324:	681b      	ldr	r3, [r3, #0]
 8034326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803432a:	2b00      	cmp	r3, #0
 803432c:	d1f0      	bne.n	8034310 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 803432e:	687b      	ldr	r3, [r7, #4]
 8034330:	681b      	ldr	r3, [r3, #0]
 8034332:	f003 0304 	and.w	r3, r3, #4
 8034336:	2b00      	cmp	r3, #0
 8034338:	f000 8081 	beq.w	803443e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 803433c:	4b8c      	ldr	r3, [pc, #560]	; (8034570 <HAL_RCC_OscConfig+0x770>)
 803433e:	681b      	ldr	r3, [r3, #0]
 8034340:	4a8b      	ldr	r2, [pc, #556]	; (8034570 <HAL_RCC_OscConfig+0x770>)
 8034342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8034346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8034348:	f7f9 fd72 	bl	802de30 <HAL_GetTick>
 803434c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803434e:	e008      	b.n	8034362 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8034350:	f7f9 fd6e 	bl	802de30 <HAL_GetTick>
 8034354:	4602      	mov	r2, r0
 8034356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034358:	1ad3      	subs	r3, r2, r3
 803435a:	2b64      	cmp	r3, #100	; 0x64
 803435c:	d901      	bls.n	8034362 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 803435e:	2303      	movs	r3, #3
 8034360:	e175      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8034362:	4b83      	ldr	r3, [pc, #524]	; (8034570 <HAL_RCC_OscConfig+0x770>)
 8034364:	681b      	ldr	r3, [r3, #0]
 8034366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803436a:	2b00      	cmp	r3, #0
 803436c:	d0f0      	beq.n	8034350 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 803436e:	687b      	ldr	r3, [r7, #4]
 8034370:	689b      	ldr	r3, [r3, #8]
 8034372:	2b01      	cmp	r3, #1
 8034374:	d106      	bne.n	8034384 <HAL_RCC_OscConfig+0x584>
 8034376:	4b7d      	ldr	r3, [pc, #500]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803437a:	4a7c      	ldr	r2, [pc, #496]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803437c:	f043 0301 	orr.w	r3, r3, #1
 8034380:	6713      	str	r3, [r2, #112]	; 0x70
 8034382:	e02d      	b.n	80343e0 <HAL_RCC_OscConfig+0x5e0>
 8034384:	687b      	ldr	r3, [r7, #4]
 8034386:	689b      	ldr	r3, [r3, #8]
 8034388:	2b00      	cmp	r3, #0
 803438a:	d10c      	bne.n	80343a6 <HAL_RCC_OscConfig+0x5a6>
 803438c:	4b77      	ldr	r3, [pc, #476]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034390:	4a76      	ldr	r2, [pc, #472]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034392:	f023 0301 	bic.w	r3, r3, #1
 8034396:	6713      	str	r3, [r2, #112]	; 0x70
 8034398:	4b74      	ldr	r3, [pc, #464]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803439c:	4a73      	ldr	r2, [pc, #460]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803439e:	f023 0304 	bic.w	r3, r3, #4
 80343a2:	6713      	str	r3, [r2, #112]	; 0x70
 80343a4:	e01c      	b.n	80343e0 <HAL_RCC_OscConfig+0x5e0>
 80343a6:	687b      	ldr	r3, [r7, #4]
 80343a8:	689b      	ldr	r3, [r3, #8]
 80343aa:	2b05      	cmp	r3, #5
 80343ac:	d10c      	bne.n	80343c8 <HAL_RCC_OscConfig+0x5c8>
 80343ae:	4b6f      	ldr	r3, [pc, #444]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80343b2:	4a6e      	ldr	r2, [pc, #440]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343b4:	f043 0304 	orr.w	r3, r3, #4
 80343b8:	6713      	str	r3, [r2, #112]	; 0x70
 80343ba:	4b6c      	ldr	r3, [pc, #432]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80343be:	4a6b      	ldr	r2, [pc, #428]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343c0:	f043 0301 	orr.w	r3, r3, #1
 80343c4:	6713      	str	r3, [r2, #112]	; 0x70
 80343c6:	e00b      	b.n	80343e0 <HAL_RCC_OscConfig+0x5e0>
 80343c8:	4b68      	ldr	r3, [pc, #416]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80343cc:	4a67      	ldr	r2, [pc, #412]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343ce:	f023 0301 	bic.w	r3, r3, #1
 80343d2:	6713      	str	r3, [r2, #112]	; 0x70
 80343d4:	4b65      	ldr	r3, [pc, #404]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80343d8:	4a64      	ldr	r2, [pc, #400]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80343da:	f023 0304 	bic.w	r3, r3, #4
 80343de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80343e0:	687b      	ldr	r3, [r7, #4]
 80343e2:	689b      	ldr	r3, [r3, #8]
 80343e4:	2b00      	cmp	r3, #0
 80343e6:	d015      	beq.n	8034414 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80343e8:	f7f9 fd22 	bl	802de30 <HAL_GetTick>
 80343ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80343ee:	e00a      	b.n	8034406 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80343f0:	f7f9 fd1e 	bl	802de30 <HAL_GetTick>
 80343f4:	4602      	mov	r2, r0
 80343f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343f8:	1ad3      	subs	r3, r2, r3
 80343fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80343fe:	4293      	cmp	r3, r2
 8034400:	d901      	bls.n	8034406 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8034402:	2303      	movs	r3, #3
 8034404:	e123      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8034406:	4b59      	ldr	r3, [pc, #356]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803440a:	f003 0302 	and.w	r3, r3, #2
 803440e:	2b00      	cmp	r3, #0
 8034410:	d0ee      	beq.n	80343f0 <HAL_RCC_OscConfig+0x5f0>
 8034412:	e014      	b.n	803443e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034414:	f7f9 fd0c 	bl	802de30 <HAL_GetTick>
 8034418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 803441a:	e00a      	b.n	8034432 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 803441c:	f7f9 fd08 	bl	802de30 <HAL_GetTick>
 8034420:	4602      	mov	r2, r0
 8034422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034424:	1ad3      	subs	r3, r2, r3
 8034426:	f241 3288 	movw	r2, #5000	; 0x1388
 803442a:	4293      	cmp	r3, r2
 803442c:	d901      	bls.n	8034432 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 803442e:	2303      	movs	r3, #3
 8034430:	e10d      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8034432:	4b4e      	ldr	r3, [pc, #312]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034436:	f003 0302 	and.w	r3, r3, #2
 803443a:	2b00      	cmp	r3, #0
 803443c:	d1ee      	bne.n	803441c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 803443e:	687b      	ldr	r3, [r7, #4]
 8034440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034442:	2b00      	cmp	r3, #0
 8034444:	f000 8102 	beq.w	803464c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8034448:	4b48      	ldr	r3, [pc, #288]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803444a:	691b      	ldr	r3, [r3, #16]
 803444c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8034450:	2b18      	cmp	r3, #24
 8034452:	f000 80bd 	beq.w	80345d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8034456:	687b      	ldr	r3, [r7, #4]
 8034458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803445a:	2b02      	cmp	r3, #2
 803445c:	f040 809e 	bne.w	803459c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034460:	4b42      	ldr	r3, [pc, #264]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034462:	681b      	ldr	r3, [r3, #0]
 8034464:	4a41      	ldr	r2, [pc, #260]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 803446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803446c:	f7f9 fce0 	bl	802de30 <HAL_GetTick>
 8034470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8034472:	e008      	b.n	8034486 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034474:	f7f9 fcdc 	bl	802de30 <HAL_GetTick>
 8034478:	4602      	mov	r2, r0
 803447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803447c:	1ad3      	subs	r3, r2, r3
 803447e:	2b02      	cmp	r3, #2
 8034480:	d901      	bls.n	8034486 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8034482:	2303      	movs	r3, #3
 8034484:	e0e3      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8034486:	4b39      	ldr	r3, [pc, #228]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034488:	681b      	ldr	r3, [r3, #0]
 803448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803448e:	2b00      	cmp	r3, #0
 8034490:	d1f0      	bne.n	8034474 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8034492:	4b36      	ldr	r3, [pc, #216]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8034496:	4b37      	ldr	r3, [pc, #220]	; (8034574 <HAL_RCC_OscConfig+0x774>)
 8034498:	4013      	ands	r3, r2
 803449a:	687a      	ldr	r2, [r7, #4]
 803449c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 803449e:	687a      	ldr	r2, [r7, #4]
 80344a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80344a2:	0112      	lsls	r2, r2, #4
 80344a4:	430a      	orrs	r2, r1
 80344a6:	4931      	ldr	r1, [pc, #196]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80344a8:	4313      	orrs	r3, r2
 80344aa:	628b      	str	r3, [r1, #40]	; 0x28
 80344ac:	687b      	ldr	r3, [r7, #4]
 80344ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80344b0:	3b01      	subs	r3, #1
 80344b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80344b6:	687b      	ldr	r3, [r7, #4]
 80344b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80344ba:	3b01      	subs	r3, #1
 80344bc:	025b      	lsls	r3, r3, #9
 80344be:	b29b      	uxth	r3, r3
 80344c0:	431a      	orrs	r2, r3
 80344c2:	687b      	ldr	r3, [r7, #4]
 80344c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80344c6:	3b01      	subs	r3, #1
 80344c8:	041b      	lsls	r3, r3, #16
 80344ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80344ce:	431a      	orrs	r2, r3
 80344d0:	687b      	ldr	r3, [r7, #4]
 80344d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80344d4:	3b01      	subs	r3, #1
 80344d6:	061b      	lsls	r3, r3, #24
 80344d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80344dc:	4923      	ldr	r1, [pc, #140]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80344de:	4313      	orrs	r3, r2
 80344e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80344e2:	4b22      	ldr	r3, [pc, #136]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80344e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80344e6:	4a21      	ldr	r2, [pc, #132]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80344e8:	f023 0301 	bic.w	r3, r3, #1
 80344ec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80344ee:	4b1f      	ldr	r3, [pc, #124]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80344f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80344f2:	4b21      	ldr	r3, [pc, #132]	; (8034578 <HAL_RCC_OscConfig+0x778>)
 80344f4:	4013      	ands	r3, r2
 80344f6:	687a      	ldr	r2, [r7, #4]
 80344f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80344fa:	00d2      	lsls	r2, r2, #3
 80344fc:	491b      	ldr	r1, [pc, #108]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 80344fe:	4313      	orrs	r3, r2
 8034500:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8034502:	4b1a      	ldr	r3, [pc, #104]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034506:	f023 020c 	bic.w	r2, r3, #12
 803450a:	687b      	ldr	r3, [r7, #4]
 803450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803450e:	4917      	ldr	r1, [pc, #92]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034510:	4313      	orrs	r3, r2
 8034512:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8034514:	4b15      	ldr	r3, [pc, #84]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034518:	f023 0202 	bic.w	r2, r3, #2
 803451c:	687b      	ldr	r3, [r7, #4]
 803451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034520:	4912      	ldr	r1, [pc, #72]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034522:	4313      	orrs	r3, r2
 8034524:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8034526:	4b11      	ldr	r3, [pc, #68]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803452a:	4a10      	ldr	r2, [pc, #64]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8034530:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8034532:	4b0e      	ldr	r3, [pc, #56]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034536:	4a0d      	ldr	r2, [pc, #52]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803453c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 803453e:	4b0b      	ldr	r3, [pc, #44]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034542:	4a0a      	ldr	r2, [pc, #40]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8034548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 803454a:	4b08      	ldr	r3, [pc, #32]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803454e:	4a07      	ldr	r2, [pc, #28]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034550:	f043 0301 	orr.w	r3, r3, #1
 8034554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8034556:	4b05      	ldr	r3, [pc, #20]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 8034558:	681b      	ldr	r3, [r3, #0]
 803455a:	4a04      	ldr	r2, [pc, #16]	; (803456c <HAL_RCC_OscConfig+0x76c>)
 803455c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8034560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034562:	f7f9 fc65 	bl	802de30 <HAL_GetTick>
 8034566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8034568:	e011      	b.n	803458e <HAL_RCC_OscConfig+0x78e>
 803456a:	bf00      	nop
 803456c:	58024400 	.word	0x58024400
 8034570:	58024800 	.word	0x58024800
 8034574:	fffffc0c 	.word	0xfffffc0c
 8034578:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 803457c:	f7f9 fc58 	bl	802de30 <HAL_GetTick>
 8034580:	4602      	mov	r2, r0
 8034582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034584:	1ad3      	subs	r3, r2, r3
 8034586:	2b02      	cmp	r3, #2
 8034588:	d901      	bls.n	803458e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 803458a:	2303      	movs	r3, #3
 803458c:	e05f      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803458e:	4b32      	ldr	r3, [pc, #200]	; (8034658 <HAL_RCC_OscConfig+0x858>)
 8034590:	681b      	ldr	r3, [r3, #0]
 8034592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034596:	2b00      	cmp	r3, #0
 8034598:	d0f0      	beq.n	803457c <HAL_RCC_OscConfig+0x77c>
 803459a:	e057      	b.n	803464c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 803459c:	4b2e      	ldr	r3, [pc, #184]	; (8034658 <HAL_RCC_OscConfig+0x858>)
 803459e:	681b      	ldr	r3, [r3, #0]
 80345a0:	4a2d      	ldr	r2, [pc, #180]	; (8034658 <HAL_RCC_OscConfig+0x858>)
 80345a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80345a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80345a8:	f7f9 fc42 	bl	802de30 <HAL_GetTick>
 80345ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80345ae:	e008      	b.n	80345c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80345b0:	f7f9 fc3e 	bl	802de30 <HAL_GetTick>
 80345b4:	4602      	mov	r2, r0
 80345b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80345b8:	1ad3      	subs	r3, r2, r3
 80345ba:	2b02      	cmp	r3, #2
 80345bc:	d901      	bls.n	80345c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80345be:	2303      	movs	r3, #3
 80345c0:	e045      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80345c2:	4b25      	ldr	r3, [pc, #148]	; (8034658 <HAL_RCC_OscConfig+0x858>)
 80345c4:	681b      	ldr	r3, [r3, #0]
 80345c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80345ca:	2b00      	cmp	r3, #0
 80345cc:	d1f0      	bne.n	80345b0 <HAL_RCC_OscConfig+0x7b0>
 80345ce:	e03d      	b.n	803464c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80345d0:	4b21      	ldr	r3, [pc, #132]	; (8034658 <HAL_RCC_OscConfig+0x858>)
 80345d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80345d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80345d6:	4b20      	ldr	r3, [pc, #128]	; (8034658 <HAL_RCC_OscConfig+0x858>)
 80345d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80345da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80345dc:	687b      	ldr	r3, [r7, #4]
 80345de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80345e0:	2b01      	cmp	r3, #1
 80345e2:	d031      	beq.n	8034648 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80345e4:	693b      	ldr	r3, [r7, #16]
 80345e6:	f003 0203 	and.w	r2, r3, #3
 80345ea:	687b      	ldr	r3, [r7, #4]
 80345ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80345ee:	429a      	cmp	r2, r3
 80345f0:	d12a      	bne.n	8034648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80345f2:	693b      	ldr	r3, [r7, #16]
 80345f4:	091b      	lsrs	r3, r3, #4
 80345f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80345fa:	687b      	ldr	r3, [r7, #4]
 80345fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80345fe:	429a      	cmp	r2, r3
 8034600:	d122      	bne.n	8034648 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8034602:	68fb      	ldr	r3, [r7, #12]
 8034604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034608:	687b      	ldr	r3, [r7, #4]
 803460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803460c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 803460e:	429a      	cmp	r2, r3
 8034610:	d11a      	bne.n	8034648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8034612:	68fb      	ldr	r3, [r7, #12]
 8034614:	0a5b      	lsrs	r3, r3, #9
 8034616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803461a:	687b      	ldr	r3, [r7, #4]
 803461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803461e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8034620:	429a      	cmp	r2, r3
 8034622:	d111      	bne.n	8034648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8034624:	68fb      	ldr	r3, [r7, #12]
 8034626:	0c1b      	lsrs	r3, r3, #16
 8034628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803462c:	687b      	ldr	r3, [r7, #4]
 803462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034630:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8034632:	429a      	cmp	r2, r3
 8034634:	d108      	bne.n	8034648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8034636:	68fb      	ldr	r3, [r7, #12]
 8034638:	0e1b      	lsrs	r3, r3, #24
 803463a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803463e:	687b      	ldr	r3, [r7, #4]
 8034640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034642:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8034644:	429a      	cmp	r2, r3
 8034646:	d001      	beq.n	803464c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8034648:	2301      	movs	r3, #1
 803464a:	e000      	b.n	803464e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 803464c:	2300      	movs	r3, #0
}
 803464e:	4618      	mov	r0, r3
 8034650:	3730      	adds	r7, #48	; 0x30
 8034652:	46bd      	mov	sp, r7
 8034654:	bd80      	pop	{r7, pc}
 8034656:	bf00      	nop
 8034658:	58024400 	.word	0x58024400

0803465c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 803465c:	b580      	push	{r7, lr}
 803465e:	b086      	sub	sp, #24
 8034660:	af00      	add	r7, sp, #0
 8034662:	6078      	str	r0, [r7, #4]
 8034664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8034666:	687b      	ldr	r3, [r7, #4]
 8034668:	2b00      	cmp	r3, #0
 803466a:	d101      	bne.n	8034670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 803466c:	2301      	movs	r3, #1
 803466e:	e19c      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8034670:	4b8a      	ldr	r3, [pc, #552]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 8034672:	681b      	ldr	r3, [r3, #0]
 8034674:	f003 030f 	and.w	r3, r3, #15
 8034678:	683a      	ldr	r2, [r7, #0]
 803467a:	429a      	cmp	r2, r3
 803467c:	d910      	bls.n	80346a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 803467e:	4b87      	ldr	r3, [pc, #540]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 8034680:	681b      	ldr	r3, [r3, #0]
 8034682:	f023 020f 	bic.w	r2, r3, #15
 8034686:	4985      	ldr	r1, [pc, #532]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 8034688:	683b      	ldr	r3, [r7, #0]
 803468a:	4313      	orrs	r3, r2
 803468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 803468e:	4b83      	ldr	r3, [pc, #524]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 8034690:	681b      	ldr	r3, [r3, #0]
 8034692:	f003 030f 	and.w	r3, r3, #15
 8034696:	683a      	ldr	r2, [r7, #0]
 8034698:	429a      	cmp	r2, r3
 803469a:	d001      	beq.n	80346a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 803469c:	2301      	movs	r3, #1
 803469e:	e184      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80346a0:	687b      	ldr	r3, [r7, #4]
 80346a2:	681b      	ldr	r3, [r3, #0]
 80346a4:	f003 0304 	and.w	r3, r3, #4
 80346a8:	2b00      	cmp	r3, #0
 80346aa:	d010      	beq.n	80346ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80346ac:	687b      	ldr	r3, [r7, #4]
 80346ae:	691a      	ldr	r2, [r3, #16]
 80346b0:	4b7b      	ldr	r3, [pc, #492]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80346b2:	699b      	ldr	r3, [r3, #24]
 80346b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80346b8:	429a      	cmp	r2, r3
 80346ba:	d908      	bls.n	80346ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80346bc:	4b78      	ldr	r3, [pc, #480]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80346be:	699b      	ldr	r3, [r3, #24]
 80346c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80346c4:	687b      	ldr	r3, [r7, #4]
 80346c6:	691b      	ldr	r3, [r3, #16]
 80346c8:	4975      	ldr	r1, [pc, #468]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80346ca:	4313      	orrs	r3, r2
 80346cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80346ce:	687b      	ldr	r3, [r7, #4]
 80346d0:	681b      	ldr	r3, [r3, #0]
 80346d2:	f003 0308 	and.w	r3, r3, #8
 80346d6:	2b00      	cmp	r3, #0
 80346d8:	d010      	beq.n	80346fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80346da:	687b      	ldr	r3, [r7, #4]
 80346dc:	695a      	ldr	r2, [r3, #20]
 80346de:	4b70      	ldr	r3, [pc, #448]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80346e0:	69db      	ldr	r3, [r3, #28]
 80346e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80346e6:	429a      	cmp	r2, r3
 80346e8:	d908      	bls.n	80346fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80346ea:	4b6d      	ldr	r3, [pc, #436]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80346ec:	69db      	ldr	r3, [r3, #28]
 80346ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80346f2:	687b      	ldr	r3, [r7, #4]
 80346f4:	695b      	ldr	r3, [r3, #20]
 80346f6:	496a      	ldr	r1, [pc, #424]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80346f8:	4313      	orrs	r3, r2
 80346fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80346fc:	687b      	ldr	r3, [r7, #4]
 80346fe:	681b      	ldr	r3, [r3, #0]
 8034700:	f003 0310 	and.w	r3, r3, #16
 8034704:	2b00      	cmp	r3, #0
 8034706:	d010      	beq.n	803472a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8034708:	687b      	ldr	r3, [r7, #4]
 803470a:	699a      	ldr	r2, [r3, #24]
 803470c:	4b64      	ldr	r3, [pc, #400]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 803470e:	69db      	ldr	r3, [r3, #28]
 8034710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8034714:	429a      	cmp	r2, r3
 8034716:	d908      	bls.n	803472a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8034718:	4b61      	ldr	r3, [pc, #388]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 803471a:	69db      	ldr	r3, [r3, #28]
 803471c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8034720:	687b      	ldr	r3, [r7, #4]
 8034722:	699b      	ldr	r3, [r3, #24]
 8034724:	495e      	ldr	r1, [pc, #376]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034726:	4313      	orrs	r3, r2
 8034728:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 803472a:	687b      	ldr	r3, [r7, #4]
 803472c:	681b      	ldr	r3, [r3, #0]
 803472e:	f003 0320 	and.w	r3, r3, #32
 8034732:	2b00      	cmp	r3, #0
 8034734:	d010      	beq.n	8034758 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8034736:	687b      	ldr	r3, [r7, #4]
 8034738:	69da      	ldr	r2, [r3, #28]
 803473a:	4b59      	ldr	r3, [pc, #356]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 803473c:	6a1b      	ldr	r3, [r3, #32]
 803473e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034742:	429a      	cmp	r2, r3
 8034744:	d908      	bls.n	8034758 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8034746:	4b56      	ldr	r3, [pc, #344]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034748:	6a1b      	ldr	r3, [r3, #32]
 803474a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803474e:	687b      	ldr	r3, [r7, #4]
 8034750:	69db      	ldr	r3, [r3, #28]
 8034752:	4953      	ldr	r1, [pc, #332]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034754:	4313      	orrs	r3, r2
 8034756:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8034758:	687b      	ldr	r3, [r7, #4]
 803475a:	681b      	ldr	r3, [r3, #0]
 803475c:	f003 0302 	and.w	r3, r3, #2
 8034760:	2b00      	cmp	r3, #0
 8034762:	d010      	beq.n	8034786 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8034764:	687b      	ldr	r3, [r7, #4]
 8034766:	68da      	ldr	r2, [r3, #12]
 8034768:	4b4d      	ldr	r3, [pc, #308]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 803476a:	699b      	ldr	r3, [r3, #24]
 803476c:	f003 030f 	and.w	r3, r3, #15
 8034770:	429a      	cmp	r2, r3
 8034772:	d908      	bls.n	8034786 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8034774:	4b4a      	ldr	r3, [pc, #296]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034776:	699b      	ldr	r3, [r3, #24]
 8034778:	f023 020f 	bic.w	r2, r3, #15
 803477c:	687b      	ldr	r3, [r7, #4]
 803477e:	68db      	ldr	r3, [r3, #12]
 8034780:	4947      	ldr	r1, [pc, #284]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034782:	4313      	orrs	r3, r2
 8034784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8034786:	687b      	ldr	r3, [r7, #4]
 8034788:	681b      	ldr	r3, [r3, #0]
 803478a:	f003 0301 	and.w	r3, r3, #1
 803478e:	2b00      	cmp	r3, #0
 8034790:	d055      	beq.n	803483e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8034792:	4b43      	ldr	r3, [pc, #268]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034794:	699b      	ldr	r3, [r3, #24]
 8034796:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 803479a:	687b      	ldr	r3, [r7, #4]
 803479c:	689b      	ldr	r3, [r3, #8]
 803479e:	4940      	ldr	r1, [pc, #256]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80347a0:	4313      	orrs	r3, r2
 80347a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80347a4:	687b      	ldr	r3, [r7, #4]
 80347a6:	685b      	ldr	r3, [r3, #4]
 80347a8:	2b02      	cmp	r3, #2
 80347aa:	d107      	bne.n	80347bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80347ac:	4b3c      	ldr	r3, [pc, #240]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80347ae:	681b      	ldr	r3, [r3, #0]
 80347b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80347b4:	2b00      	cmp	r3, #0
 80347b6:	d121      	bne.n	80347fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80347b8:	2301      	movs	r3, #1
 80347ba:	e0f6      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80347bc:	687b      	ldr	r3, [r7, #4]
 80347be:	685b      	ldr	r3, [r3, #4]
 80347c0:	2b03      	cmp	r3, #3
 80347c2:	d107      	bne.n	80347d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80347c4:	4b36      	ldr	r3, [pc, #216]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80347c6:	681b      	ldr	r3, [r3, #0]
 80347c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80347cc:	2b00      	cmp	r3, #0
 80347ce:	d115      	bne.n	80347fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80347d0:	2301      	movs	r3, #1
 80347d2:	e0ea      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80347d4:	687b      	ldr	r3, [r7, #4]
 80347d6:	685b      	ldr	r3, [r3, #4]
 80347d8:	2b01      	cmp	r3, #1
 80347da:	d107      	bne.n	80347ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80347dc:	4b30      	ldr	r3, [pc, #192]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80347de:	681b      	ldr	r3, [r3, #0]
 80347e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80347e4:	2b00      	cmp	r3, #0
 80347e6:	d109      	bne.n	80347fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80347e8:	2301      	movs	r3, #1
 80347ea:	e0de      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80347ec:	4b2c      	ldr	r3, [pc, #176]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80347ee:	681b      	ldr	r3, [r3, #0]
 80347f0:	f003 0304 	and.w	r3, r3, #4
 80347f4:	2b00      	cmp	r3, #0
 80347f6:	d101      	bne.n	80347fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80347f8:	2301      	movs	r3, #1
 80347fa:	e0d6      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80347fc:	4b28      	ldr	r3, [pc, #160]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 80347fe:	691b      	ldr	r3, [r3, #16]
 8034800:	f023 0207 	bic.w	r2, r3, #7
 8034804:	687b      	ldr	r3, [r7, #4]
 8034806:	685b      	ldr	r3, [r3, #4]
 8034808:	4925      	ldr	r1, [pc, #148]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 803480a:	4313      	orrs	r3, r2
 803480c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803480e:	f7f9 fb0f 	bl	802de30 <HAL_GetTick>
 8034812:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8034814:	e00a      	b.n	803482c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8034816:	f7f9 fb0b 	bl	802de30 <HAL_GetTick>
 803481a:	4602      	mov	r2, r0
 803481c:	697b      	ldr	r3, [r7, #20]
 803481e:	1ad3      	subs	r3, r2, r3
 8034820:	f241 3288 	movw	r2, #5000	; 0x1388
 8034824:	4293      	cmp	r3, r2
 8034826:	d901      	bls.n	803482c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8034828:	2303      	movs	r3, #3
 803482a:	e0be      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 803482c:	4b1c      	ldr	r3, [pc, #112]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 803482e:	691b      	ldr	r3, [r3, #16]
 8034830:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8034834:	687b      	ldr	r3, [r7, #4]
 8034836:	685b      	ldr	r3, [r3, #4]
 8034838:	00db      	lsls	r3, r3, #3
 803483a:	429a      	cmp	r2, r3
 803483c:	d1eb      	bne.n	8034816 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 803483e:	687b      	ldr	r3, [r7, #4]
 8034840:	681b      	ldr	r3, [r3, #0]
 8034842:	f003 0302 	and.w	r3, r3, #2
 8034846:	2b00      	cmp	r3, #0
 8034848:	d010      	beq.n	803486c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 803484a:	687b      	ldr	r3, [r7, #4]
 803484c:	68da      	ldr	r2, [r3, #12]
 803484e:	4b14      	ldr	r3, [pc, #80]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034850:	699b      	ldr	r3, [r3, #24]
 8034852:	f003 030f 	and.w	r3, r3, #15
 8034856:	429a      	cmp	r2, r3
 8034858:	d208      	bcs.n	803486c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 803485a:	4b11      	ldr	r3, [pc, #68]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 803485c:	699b      	ldr	r3, [r3, #24]
 803485e:	f023 020f 	bic.w	r2, r3, #15
 8034862:	687b      	ldr	r3, [r7, #4]
 8034864:	68db      	ldr	r3, [r3, #12]
 8034866:	490e      	ldr	r1, [pc, #56]	; (80348a0 <HAL_RCC_ClockConfig+0x244>)
 8034868:	4313      	orrs	r3, r2
 803486a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 803486c:	4b0b      	ldr	r3, [pc, #44]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 803486e:	681b      	ldr	r3, [r3, #0]
 8034870:	f003 030f 	and.w	r3, r3, #15
 8034874:	683a      	ldr	r2, [r7, #0]
 8034876:	429a      	cmp	r2, r3
 8034878:	d214      	bcs.n	80348a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 803487a:	4b08      	ldr	r3, [pc, #32]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 803487c:	681b      	ldr	r3, [r3, #0]
 803487e:	f023 020f 	bic.w	r2, r3, #15
 8034882:	4906      	ldr	r1, [pc, #24]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 8034884:	683b      	ldr	r3, [r7, #0]
 8034886:	4313      	orrs	r3, r2
 8034888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 803488a:	4b04      	ldr	r3, [pc, #16]	; (803489c <HAL_RCC_ClockConfig+0x240>)
 803488c:	681b      	ldr	r3, [r3, #0]
 803488e:	f003 030f 	and.w	r3, r3, #15
 8034892:	683a      	ldr	r2, [r7, #0]
 8034894:	429a      	cmp	r2, r3
 8034896:	d005      	beq.n	80348a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8034898:	2301      	movs	r3, #1
 803489a:	e086      	b.n	80349aa <HAL_RCC_ClockConfig+0x34e>
 803489c:	52002000 	.word	0x52002000
 80348a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80348a4:	687b      	ldr	r3, [r7, #4]
 80348a6:	681b      	ldr	r3, [r3, #0]
 80348a8:	f003 0304 	and.w	r3, r3, #4
 80348ac:	2b00      	cmp	r3, #0
 80348ae:	d010      	beq.n	80348d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80348b0:	687b      	ldr	r3, [r7, #4]
 80348b2:	691a      	ldr	r2, [r3, #16]
 80348b4:	4b3f      	ldr	r3, [pc, #252]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 80348b6:	699b      	ldr	r3, [r3, #24]
 80348b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80348bc:	429a      	cmp	r2, r3
 80348be:	d208      	bcs.n	80348d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80348c0:	4b3c      	ldr	r3, [pc, #240]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 80348c2:	699b      	ldr	r3, [r3, #24]
 80348c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80348c8:	687b      	ldr	r3, [r7, #4]
 80348ca:	691b      	ldr	r3, [r3, #16]
 80348cc:	4939      	ldr	r1, [pc, #228]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 80348ce:	4313      	orrs	r3, r2
 80348d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80348d2:	687b      	ldr	r3, [r7, #4]
 80348d4:	681b      	ldr	r3, [r3, #0]
 80348d6:	f003 0308 	and.w	r3, r3, #8
 80348da:	2b00      	cmp	r3, #0
 80348dc:	d010      	beq.n	8034900 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80348de:	687b      	ldr	r3, [r7, #4]
 80348e0:	695a      	ldr	r2, [r3, #20]
 80348e2:	4b34      	ldr	r3, [pc, #208]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 80348e4:	69db      	ldr	r3, [r3, #28]
 80348e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80348ea:	429a      	cmp	r2, r3
 80348ec:	d208      	bcs.n	8034900 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80348ee:	4b31      	ldr	r3, [pc, #196]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 80348f0:	69db      	ldr	r3, [r3, #28]
 80348f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80348f6:	687b      	ldr	r3, [r7, #4]
 80348f8:	695b      	ldr	r3, [r3, #20]
 80348fa:	492e      	ldr	r1, [pc, #184]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 80348fc:	4313      	orrs	r3, r2
 80348fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8034900:	687b      	ldr	r3, [r7, #4]
 8034902:	681b      	ldr	r3, [r3, #0]
 8034904:	f003 0310 	and.w	r3, r3, #16
 8034908:	2b00      	cmp	r3, #0
 803490a:	d010      	beq.n	803492e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 803490c:	687b      	ldr	r3, [r7, #4]
 803490e:	699a      	ldr	r2, [r3, #24]
 8034910:	4b28      	ldr	r3, [pc, #160]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 8034912:	69db      	ldr	r3, [r3, #28]
 8034914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8034918:	429a      	cmp	r2, r3
 803491a:	d208      	bcs.n	803492e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 803491c:	4b25      	ldr	r3, [pc, #148]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 803491e:	69db      	ldr	r3, [r3, #28]
 8034920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8034924:	687b      	ldr	r3, [r7, #4]
 8034926:	699b      	ldr	r3, [r3, #24]
 8034928:	4922      	ldr	r1, [pc, #136]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 803492a:	4313      	orrs	r3, r2
 803492c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 803492e:	687b      	ldr	r3, [r7, #4]
 8034930:	681b      	ldr	r3, [r3, #0]
 8034932:	f003 0320 	and.w	r3, r3, #32
 8034936:	2b00      	cmp	r3, #0
 8034938:	d010      	beq.n	803495c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 803493a:	687b      	ldr	r3, [r7, #4]
 803493c:	69da      	ldr	r2, [r3, #28]
 803493e:	4b1d      	ldr	r3, [pc, #116]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 8034940:	6a1b      	ldr	r3, [r3, #32]
 8034942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034946:	429a      	cmp	r2, r3
 8034948:	d208      	bcs.n	803495c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 803494a:	4b1a      	ldr	r3, [pc, #104]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 803494c:	6a1b      	ldr	r3, [r3, #32]
 803494e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8034952:	687b      	ldr	r3, [r7, #4]
 8034954:	69db      	ldr	r3, [r3, #28]
 8034956:	4917      	ldr	r1, [pc, #92]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 8034958:	4313      	orrs	r3, r2
 803495a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 803495c:	f000 f834 	bl	80349c8 <HAL_RCC_GetSysClockFreq>
 8034960:	4602      	mov	r2, r0
 8034962:	4b14      	ldr	r3, [pc, #80]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 8034964:	699b      	ldr	r3, [r3, #24]
 8034966:	0a1b      	lsrs	r3, r3, #8
 8034968:	f003 030f 	and.w	r3, r3, #15
 803496c:	4912      	ldr	r1, [pc, #72]	; (80349b8 <HAL_RCC_ClockConfig+0x35c>)
 803496e:	5ccb      	ldrb	r3, [r1, r3]
 8034970:	f003 031f 	and.w	r3, r3, #31
 8034974:	fa22 f303 	lsr.w	r3, r2, r3
 8034978:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 803497a:	4b0e      	ldr	r3, [pc, #56]	; (80349b4 <HAL_RCC_ClockConfig+0x358>)
 803497c:	699b      	ldr	r3, [r3, #24]
 803497e:	f003 030f 	and.w	r3, r3, #15
 8034982:	4a0d      	ldr	r2, [pc, #52]	; (80349b8 <HAL_RCC_ClockConfig+0x35c>)
 8034984:	5cd3      	ldrb	r3, [r2, r3]
 8034986:	f003 031f 	and.w	r3, r3, #31
 803498a:	693a      	ldr	r2, [r7, #16]
 803498c:	fa22 f303 	lsr.w	r3, r2, r3
 8034990:	4a0a      	ldr	r2, [pc, #40]	; (80349bc <HAL_RCC_ClockConfig+0x360>)
 8034992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8034994:	4a0a      	ldr	r2, [pc, #40]	; (80349c0 <HAL_RCC_ClockConfig+0x364>)
 8034996:	693b      	ldr	r3, [r7, #16]
 8034998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 803499a:	4b0a      	ldr	r3, [pc, #40]	; (80349c4 <HAL_RCC_ClockConfig+0x368>)
 803499c:	681b      	ldr	r3, [r3, #0]
 803499e:	4618      	mov	r0, r3
 80349a0:	f7f9 f9fc 	bl	802dd9c <HAL_InitTick>
 80349a4:	4603      	mov	r3, r0
 80349a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80349a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80349aa:	4618      	mov	r0, r3
 80349ac:	3718      	adds	r7, #24
 80349ae:	46bd      	mov	sp, r7
 80349b0:	bd80      	pop	{r7, pc}
 80349b2:	bf00      	nop
 80349b4:	58024400 	.word	0x58024400
 80349b8:	0805b270 	.word	0x0805b270
 80349bc:	24000008 	.word	0x24000008
 80349c0:	24000004 	.word	0x24000004
 80349c4:	2400000c 	.word	0x2400000c

080349c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80349c8:	b480      	push	{r7}
 80349ca:	b089      	sub	sp, #36	; 0x24
 80349cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80349ce:	4bb3      	ldr	r3, [pc, #716]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80349d0:	691b      	ldr	r3, [r3, #16]
 80349d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80349d6:	2b18      	cmp	r3, #24
 80349d8:	f200 8155 	bhi.w	8034c86 <HAL_RCC_GetSysClockFreq+0x2be>
 80349dc:	a201      	add	r2, pc, #4	; (adr r2, 80349e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80349de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80349e2:	bf00      	nop
 80349e4:	08034a49 	.word	0x08034a49
 80349e8:	08034c87 	.word	0x08034c87
 80349ec:	08034c87 	.word	0x08034c87
 80349f0:	08034c87 	.word	0x08034c87
 80349f4:	08034c87 	.word	0x08034c87
 80349f8:	08034c87 	.word	0x08034c87
 80349fc:	08034c87 	.word	0x08034c87
 8034a00:	08034c87 	.word	0x08034c87
 8034a04:	08034a6f 	.word	0x08034a6f
 8034a08:	08034c87 	.word	0x08034c87
 8034a0c:	08034c87 	.word	0x08034c87
 8034a10:	08034c87 	.word	0x08034c87
 8034a14:	08034c87 	.word	0x08034c87
 8034a18:	08034c87 	.word	0x08034c87
 8034a1c:	08034c87 	.word	0x08034c87
 8034a20:	08034c87 	.word	0x08034c87
 8034a24:	08034a75 	.word	0x08034a75
 8034a28:	08034c87 	.word	0x08034c87
 8034a2c:	08034c87 	.word	0x08034c87
 8034a30:	08034c87 	.word	0x08034c87
 8034a34:	08034c87 	.word	0x08034c87
 8034a38:	08034c87 	.word	0x08034c87
 8034a3c:	08034c87 	.word	0x08034c87
 8034a40:	08034c87 	.word	0x08034c87
 8034a44:	08034a7b 	.word	0x08034a7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8034a48:	4b94      	ldr	r3, [pc, #592]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034a4a:	681b      	ldr	r3, [r3, #0]
 8034a4c:	f003 0320 	and.w	r3, r3, #32
 8034a50:	2b00      	cmp	r3, #0
 8034a52:	d009      	beq.n	8034a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8034a54:	4b91      	ldr	r3, [pc, #580]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034a56:	681b      	ldr	r3, [r3, #0]
 8034a58:	08db      	lsrs	r3, r3, #3
 8034a5a:	f003 0303 	and.w	r3, r3, #3
 8034a5e:	4a90      	ldr	r2, [pc, #576]	; (8034ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8034a60:	fa22 f303 	lsr.w	r3, r2, r3
 8034a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8034a66:	e111      	b.n	8034c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8034a68:	4b8d      	ldr	r3, [pc, #564]	; (8034ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8034a6a:	61bb      	str	r3, [r7, #24]
    break;
 8034a6c:	e10e      	b.n	8034c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8034a6e:	4b8d      	ldr	r3, [pc, #564]	; (8034ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8034a70:	61bb      	str	r3, [r7, #24]
    break;
 8034a72:	e10b      	b.n	8034c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8034a74:	4b8c      	ldr	r3, [pc, #560]	; (8034ca8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8034a76:	61bb      	str	r3, [r7, #24]
    break;
 8034a78:	e108      	b.n	8034c8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8034a7a:	4b88      	ldr	r3, [pc, #544]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034a7e:	f003 0303 	and.w	r3, r3, #3
 8034a82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8034a84:	4b85      	ldr	r3, [pc, #532]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034a88:	091b      	lsrs	r3, r3, #4
 8034a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034a8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8034a90:	4b82      	ldr	r3, [pc, #520]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034a94:	f003 0301 	and.w	r3, r3, #1
 8034a98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8034a9a:	4b80      	ldr	r3, [pc, #512]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034a9e:	08db      	lsrs	r3, r3, #3
 8034aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8034aa4:	68fa      	ldr	r2, [r7, #12]
 8034aa6:	fb02 f303 	mul.w	r3, r2, r3
 8034aaa:	ee07 3a90 	vmov	s15, r3
 8034aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034ab2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8034ab6:	693b      	ldr	r3, [r7, #16]
 8034ab8:	2b00      	cmp	r3, #0
 8034aba:	f000 80e1 	beq.w	8034c80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8034abe:	697b      	ldr	r3, [r7, #20]
 8034ac0:	2b02      	cmp	r3, #2
 8034ac2:	f000 8083 	beq.w	8034bcc <HAL_RCC_GetSysClockFreq+0x204>
 8034ac6:	697b      	ldr	r3, [r7, #20]
 8034ac8:	2b02      	cmp	r3, #2
 8034aca:	f200 80a1 	bhi.w	8034c10 <HAL_RCC_GetSysClockFreq+0x248>
 8034ace:	697b      	ldr	r3, [r7, #20]
 8034ad0:	2b00      	cmp	r3, #0
 8034ad2:	d003      	beq.n	8034adc <HAL_RCC_GetSysClockFreq+0x114>
 8034ad4:	697b      	ldr	r3, [r7, #20]
 8034ad6:	2b01      	cmp	r3, #1
 8034ad8:	d056      	beq.n	8034b88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8034ada:	e099      	b.n	8034c10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8034adc:	4b6f      	ldr	r3, [pc, #444]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034ade:	681b      	ldr	r3, [r3, #0]
 8034ae0:	f003 0320 	and.w	r3, r3, #32
 8034ae4:	2b00      	cmp	r3, #0
 8034ae6:	d02d      	beq.n	8034b44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8034ae8:	4b6c      	ldr	r3, [pc, #432]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034aea:	681b      	ldr	r3, [r3, #0]
 8034aec:	08db      	lsrs	r3, r3, #3
 8034aee:	f003 0303 	and.w	r3, r3, #3
 8034af2:	4a6b      	ldr	r2, [pc, #428]	; (8034ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8034af4:	fa22 f303 	lsr.w	r3, r2, r3
 8034af8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8034afa:	687b      	ldr	r3, [r7, #4]
 8034afc:	ee07 3a90 	vmov	s15, r3
 8034b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034b04:	693b      	ldr	r3, [r7, #16]
 8034b06:	ee07 3a90 	vmov	s15, r3
 8034b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034b12:	4b62      	ldr	r3, [pc, #392]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034b1a:	ee07 3a90 	vmov	s15, r3
 8034b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8034b26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8034cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8034b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8034b42:	e087      	b.n	8034c54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8034b44:	693b      	ldr	r3, [r7, #16]
 8034b46:	ee07 3a90 	vmov	s15, r3
 8034b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034b4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8034cb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8034b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034b56:	4b51      	ldr	r3, [pc, #324]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034b5e:	ee07 3a90 	vmov	s15, r3
 8034b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8034b6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8034cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8034b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8034b86:	e065      	b.n	8034c54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8034b88:	693b      	ldr	r3, [r7, #16]
 8034b8a:	ee07 3a90 	vmov	s15, r3
 8034b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034b92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8034cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8034b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034b9a:	4b40      	ldr	r3, [pc, #256]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034ba2:	ee07 3a90 	vmov	s15, r3
 8034ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8034bae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8034cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8034bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8034bca:	e043      	b.n	8034c54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8034bcc:	693b      	ldr	r3, [r7, #16]
 8034bce:	ee07 3a90 	vmov	s15, r3
 8034bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034bd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8034cb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8034bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034bde:	4b2f      	ldr	r3, [pc, #188]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034be6:	ee07 3a90 	vmov	s15, r3
 8034bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8034bf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8034cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8034bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8034c0e:	e021      	b.n	8034c54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8034c10:	693b      	ldr	r3, [r7, #16]
 8034c12:	ee07 3a90 	vmov	s15, r3
 8034c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034c1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8034cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8034c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034c22:	4b1e      	ldr	r3, [pc, #120]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034c2a:	ee07 3a90 	vmov	s15, r3
 8034c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8034c36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8034cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8034c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8034c52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8034c54:	4b11      	ldr	r3, [pc, #68]	; (8034c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034c58:	0a5b      	lsrs	r3, r3, #9
 8034c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034c5e:	3301      	adds	r3, #1
 8034c60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8034c62:	683b      	ldr	r3, [r7, #0]
 8034c64:	ee07 3a90 	vmov	s15, r3
 8034c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8034c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8034c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8034c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8034c78:	ee17 3a90 	vmov	r3, s15
 8034c7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8034c7e:	e005      	b.n	8034c8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8034c80:	2300      	movs	r3, #0
 8034c82:	61bb      	str	r3, [r7, #24]
    break;
 8034c84:	e002      	b.n	8034c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8034c86:	4b07      	ldr	r3, [pc, #28]	; (8034ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8034c88:	61bb      	str	r3, [r7, #24]
    break;
 8034c8a:	bf00      	nop
  }

  return sysclockfreq;
 8034c8c:	69bb      	ldr	r3, [r7, #24]
}
 8034c8e:	4618      	mov	r0, r3
 8034c90:	3724      	adds	r7, #36	; 0x24
 8034c92:	46bd      	mov	sp, r7
 8034c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034c98:	4770      	bx	lr
 8034c9a:	bf00      	nop
 8034c9c:	58024400 	.word	0x58024400
 8034ca0:	03d09000 	.word	0x03d09000
 8034ca4:	003d0900 	.word	0x003d0900
 8034ca8:	017d7840 	.word	0x017d7840
 8034cac:	46000000 	.word	0x46000000
 8034cb0:	4c742400 	.word	0x4c742400
 8034cb4:	4a742400 	.word	0x4a742400
 8034cb8:	4bbebc20 	.word	0x4bbebc20

08034cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8034cbc:	b580      	push	{r7, lr}
 8034cbe:	b082      	sub	sp, #8
 8034cc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8034cc2:	f7ff fe81 	bl	80349c8 <HAL_RCC_GetSysClockFreq>
 8034cc6:	4602      	mov	r2, r0
 8034cc8:	4b10      	ldr	r3, [pc, #64]	; (8034d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8034cca:	699b      	ldr	r3, [r3, #24]
 8034ccc:	0a1b      	lsrs	r3, r3, #8
 8034cce:	f003 030f 	and.w	r3, r3, #15
 8034cd2:	490f      	ldr	r1, [pc, #60]	; (8034d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8034cd4:	5ccb      	ldrb	r3, [r1, r3]
 8034cd6:	f003 031f 	and.w	r3, r3, #31
 8034cda:	fa22 f303 	lsr.w	r3, r2, r3
 8034cde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8034ce0:	4b0a      	ldr	r3, [pc, #40]	; (8034d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8034ce2:	699b      	ldr	r3, [r3, #24]
 8034ce4:	f003 030f 	and.w	r3, r3, #15
 8034ce8:	4a09      	ldr	r2, [pc, #36]	; (8034d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8034cea:	5cd3      	ldrb	r3, [r2, r3]
 8034cec:	f003 031f 	and.w	r3, r3, #31
 8034cf0:	687a      	ldr	r2, [r7, #4]
 8034cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8034cf6:	4a07      	ldr	r2, [pc, #28]	; (8034d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8034cf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8034cfa:	4a07      	ldr	r2, [pc, #28]	; (8034d18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8034cfc:	687b      	ldr	r3, [r7, #4]
 8034cfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8034d00:	4b04      	ldr	r3, [pc, #16]	; (8034d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8034d02:	681b      	ldr	r3, [r3, #0]
}
 8034d04:	4618      	mov	r0, r3
 8034d06:	3708      	adds	r7, #8
 8034d08:	46bd      	mov	sp, r7
 8034d0a:	bd80      	pop	{r7, pc}
 8034d0c:	58024400 	.word	0x58024400
 8034d10:	0805b270 	.word	0x0805b270
 8034d14:	24000008 	.word	0x24000008
 8034d18:	24000004 	.word	0x24000004

08034d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8034d1c:	b580      	push	{r7, lr}
 8034d1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8034d20:	f7ff ffcc 	bl	8034cbc <HAL_RCC_GetHCLKFreq>
 8034d24:	4602      	mov	r2, r0
 8034d26:	4b06      	ldr	r3, [pc, #24]	; (8034d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8034d28:	69db      	ldr	r3, [r3, #28]
 8034d2a:	091b      	lsrs	r3, r3, #4
 8034d2c:	f003 0307 	and.w	r3, r3, #7
 8034d30:	4904      	ldr	r1, [pc, #16]	; (8034d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8034d32:	5ccb      	ldrb	r3, [r1, r3]
 8034d34:	f003 031f 	and.w	r3, r3, #31
 8034d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8034d3c:	4618      	mov	r0, r3
 8034d3e:	bd80      	pop	{r7, pc}
 8034d40:	58024400 	.word	0x58024400
 8034d44:	0805b270 	.word	0x0805b270

08034d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8034d48:	b580      	push	{r7, lr}
 8034d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8034d4c:	f7ff ffb6 	bl	8034cbc <HAL_RCC_GetHCLKFreq>
 8034d50:	4602      	mov	r2, r0
 8034d52:	4b06      	ldr	r3, [pc, #24]	; (8034d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8034d54:	69db      	ldr	r3, [r3, #28]
 8034d56:	0a1b      	lsrs	r3, r3, #8
 8034d58:	f003 0307 	and.w	r3, r3, #7
 8034d5c:	4904      	ldr	r1, [pc, #16]	; (8034d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8034d5e:	5ccb      	ldrb	r3, [r1, r3]
 8034d60:	f003 031f 	and.w	r3, r3, #31
 8034d64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8034d68:	4618      	mov	r0, r3
 8034d6a:	bd80      	pop	{r7, pc}
 8034d6c:	58024400 	.word	0x58024400
 8034d70:	0805b270 	.word	0x0805b270

08034d74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8034d74:	b580      	push	{r7, lr}
 8034d76:	b086      	sub	sp, #24
 8034d78:	af00      	add	r7, sp, #0
 8034d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8034d7c:	2300      	movs	r3, #0
 8034d7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8034d80:	2300      	movs	r3, #0
 8034d82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8034d84:	687b      	ldr	r3, [r7, #4]
 8034d86:	681b      	ldr	r3, [r3, #0]
 8034d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8034d8c:	2b00      	cmp	r3, #0
 8034d8e:	d03f      	beq.n	8034e10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8034d90:	687b      	ldr	r3, [r7, #4]
 8034d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8034d98:	d02a      	beq.n	8034df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8034d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8034d9e:	d824      	bhi.n	8034dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8034da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8034da4:	d018      	beq.n	8034dd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8034da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8034daa:	d81e      	bhi.n	8034dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8034dac:	2b00      	cmp	r3, #0
 8034dae:	d003      	beq.n	8034db8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8034db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034db4:	d007      	beq.n	8034dc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8034db6:	e018      	b.n	8034dea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8034db8:	4ba3      	ldr	r3, [pc, #652]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034dbc:	4aa2      	ldr	r2, [pc, #648]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8034dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8034dc4:	e015      	b.n	8034df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8034dc6:	687b      	ldr	r3, [r7, #4]
 8034dc8:	3304      	adds	r3, #4
 8034dca:	2102      	movs	r1, #2
 8034dcc:	4618      	mov	r0, r3
 8034dce:	f001 f9d5 	bl	803617c <RCCEx_PLL2_Config>
 8034dd2:	4603      	mov	r3, r0
 8034dd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8034dd6:	e00c      	b.n	8034df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8034dd8:	687b      	ldr	r3, [r7, #4]
 8034dda:	3324      	adds	r3, #36	; 0x24
 8034ddc:	2102      	movs	r1, #2
 8034dde:	4618      	mov	r0, r3
 8034de0:	f001 fa7e 	bl	80362e0 <RCCEx_PLL3_Config>
 8034de4:	4603      	mov	r3, r0
 8034de6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8034de8:	e003      	b.n	8034df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8034dea:	2301      	movs	r3, #1
 8034dec:	75fb      	strb	r3, [r7, #23]
      break;
 8034dee:	e000      	b.n	8034df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8034df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8034df2:	7dfb      	ldrb	r3, [r7, #23]
 8034df4:	2b00      	cmp	r3, #0
 8034df6:	d109      	bne.n	8034e0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8034df8:	4b93      	ldr	r3, [pc, #588]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8034e00:	687b      	ldr	r3, [r7, #4]
 8034e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034e04:	4990      	ldr	r1, [pc, #576]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034e06:	4313      	orrs	r3, r2
 8034e08:	650b      	str	r3, [r1, #80]	; 0x50
 8034e0a:	e001      	b.n	8034e10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8034e0c:	7dfb      	ldrb	r3, [r7, #23]
 8034e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8034e10:	687b      	ldr	r3, [r7, #4]
 8034e12:	681b      	ldr	r3, [r3, #0]
 8034e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034e18:	2b00      	cmp	r3, #0
 8034e1a:	d03d      	beq.n	8034e98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8034e1c:	687b      	ldr	r3, [r7, #4]
 8034e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034e20:	2b04      	cmp	r3, #4
 8034e22:	d826      	bhi.n	8034e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8034e24:	a201      	add	r2, pc, #4	; (adr r2, 8034e2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8034e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034e2a:	bf00      	nop
 8034e2c:	08034e41 	.word	0x08034e41
 8034e30:	08034e4f 	.word	0x08034e4f
 8034e34:	08034e61 	.word	0x08034e61
 8034e38:	08034e79 	.word	0x08034e79
 8034e3c:	08034e79 	.word	0x08034e79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8034e40:	4b81      	ldr	r3, [pc, #516]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034e44:	4a80      	ldr	r2, [pc, #512]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8034e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8034e4c:	e015      	b.n	8034e7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8034e4e:	687b      	ldr	r3, [r7, #4]
 8034e50:	3304      	adds	r3, #4
 8034e52:	2100      	movs	r1, #0
 8034e54:	4618      	mov	r0, r3
 8034e56:	f001 f991 	bl	803617c <RCCEx_PLL2_Config>
 8034e5a:	4603      	mov	r3, r0
 8034e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8034e5e:	e00c      	b.n	8034e7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8034e60:	687b      	ldr	r3, [r7, #4]
 8034e62:	3324      	adds	r3, #36	; 0x24
 8034e64:	2100      	movs	r1, #0
 8034e66:	4618      	mov	r0, r3
 8034e68:	f001 fa3a 	bl	80362e0 <RCCEx_PLL3_Config>
 8034e6c:	4603      	mov	r3, r0
 8034e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8034e70:	e003      	b.n	8034e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8034e72:	2301      	movs	r3, #1
 8034e74:	75fb      	strb	r3, [r7, #23]
      break;
 8034e76:	e000      	b.n	8034e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8034e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8034e7a:	7dfb      	ldrb	r3, [r7, #23]
 8034e7c:	2b00      	cmp	r3, #0
 8034e7e:	d109      	bne.n	8034e94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8034e80:	4b71      	ldr	r3, [pc, #452]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034e84:	f023 0207 	bic.w	r2, r3, #7
 8034e88:	687b      	ldr	r3, [r7, #4]
 8034e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034e8c:	496e      	ldr	r1, [pc, #440]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034e8e:	4313      	orrs	r3, r2
 8034e90:	650b      	str	r3, [r1, #80]	; 0x50
 8034e92:	e001      	b.n	8034e98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8034e94:	7dfb      	ldrb	r3, [r7, #23]
 8034e96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8034e98:	687b      	ldr	r3, [r7, #4]
 8034e9a:	681b      	ldr	r3, [r3, #0]
 8034e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034ea0:	2b00      	cmp	r3, #0
 8034ea2:	d042      	beq.n	8034f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8034ea4:	687b      	ldr	r3, [r7, #4]
 8034ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8034ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034eac:	d02b      	beq.n	8034f06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8034eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034eb2:	d825      	bhi.n	8034f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8034eb4:	2bc0      	cmp	r3, #192	; 0xc0
 8034eb6:	d028      	beq.n	8034f0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8034eb8:	2bc0      	cmp	r3, #192	; 0xc0
 8034eba:	d821      	bhi.n	8034f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8034ebc:	2b80      	cmp	r3, #128	; 0x80
 8034ebe:	d016      	beq.n	8034eee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8034ec0:	2b80      	cmp	r3, #128	; 0x80
 8034ec2:	d81d      	bhi.n	8034f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8034ec4:	2b00      	cmp	r3, #0
 8034ec6:	d002      	beq.n	8034ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8034ec8:	2b40      	cmp	r3, #64	; 0x40
 8034eca:	d007      	beq.n	8034edc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8034ecc:	e018      	b.n	8034f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8034ece:	4b5e      	ldr	r3, [pc, #376]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034ed2:	4a5d      	ldr	r2, [pc, #372]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8034ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8034eda:	e017      	b.n	8034f0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8034edc:	687b      	ldr	r3, [r7, #4]
 8034ede:	3304      	adds	r3, #4
 8034ee0:	2100      	movs	r1, #0
 8034ee2:	4618      	mov	r0, r3
 8034ee4:	f001 f94a 	bl	803617c <RCCEx_PLL2_Config>
 8034ee8:	4603      	mov	r3, r0
 8034eea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8034eec:	e00e      	b.n	8034f0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8034eee:	687b      	ldr	r3, [r7, #4]
 8034ef0:	3324      	adds	r3, #36	; 0x24
 8034ef2:	2100      	movs	r1, #0
 8034ef4:	4618      	mov	r0, r3
 8034ef6:	f001 f9f3 	bl	80362e0 <RCCEx_PLL3_Config>
 8034efa:	4603      	mov	r3, r0
 8034efc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8034efe:	e005      	b.n	8034f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8034f00:	2301      	movs	r3, #1
 8034f02:	75fb      	strb	r3, [r7, #23]
      break;
 8034f04:	e002      	b.n	8034f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8034f06:	bf00      	nop
 8034f08:	e000      	b.n	8034f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8034f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8034f0c:	7dfb      	ldrb	r3, [r7, #23]
 8034f0e:	2b00      	cmp	r3, #0
 8034f10:	d109      	bne.n	8034f26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8034f12:	4b4d      	ldr	r3, [pc, #308]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034f16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8034f1a:	687b      	ldr	r3, [r7, #4]
 8034f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8034f1e:	494a      	ldr	r1, [pc, #296]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034f20:	4313      	orrs	r3, r2
 8034f22:	650b      	str	r3, [r1, #80]	; 0x50
 8034f24:	e001      	b.n	8034f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8034f26:	7dfb      	ldrb	r3, [r7, #23]
 8034f28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8034f2a:	687b      	ldr	r3, [r7, #4]
 8034f2c:	681b      	ldr	r3, [r3, #0]
 8034f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8034f32:	2b00      	cmp	r3, #0
 8034f34:	d049      	beq.n	8034fca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8034f36:	687b      	ldr	r3, [r7, #4]
 8034f38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8034f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8034f40:	d030      	beq.n	8034fa4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8034f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8034f46:	d82a      	bhi.n	8034f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8034f48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8034f4c:	d02c      	beq.n	8034fa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8034f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8034f52:	d824      	bhi.n	8034f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8034f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034f58:	d018      	beq.n	8034f8c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8034f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034f5e:	d81e      	bhi.n	8034f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8034f60:	2b00      	cmp	r3, #0
 8034f62:	d003      	beq.n	8034f6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8034f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8034f68:	d007      	beq.n	8034f7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8034f6a:	e018      	b.n	8034f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8034f6c:	4b36      	ldr	r3, [pc, #216]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034f70:	4a35      	ldr	r2, [pc, #212]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8034f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8034f78:	e017      	b.n	8034faa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8034f7a:	687b      	ldr	r3, [r7, #4]
 8034f7c:	3304      	adds	r3, #4
 8034f7e:	2100      	movs	r1, #0
 8034f80:	4618      	mov	r0, r3
 8034f82:	f001 f8fb 	bl	803617c <RCCEx_PLL2_Config>
 8034f86:	4603      	mov	r3, r0
 8034f88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8034f8a:	e00e      	b.n	8034faa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8034f8c:	687b      	ldr	r3, [r7, #4]
 8034f8e:	3324      	adds	r3, #36	; 0x24
 8034f90:	2100      	movs	r1, #0
 8034f92:	4618      	mov	r0, r3
 8034f94:	f001 f9a4 	bl	80362e0 <RCCEx_PLL3_Config>
 8034f98:	4603      	mov	r3, r0
 8034f9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8034f9c:	e005      	b.n	8034faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8034f9e:	2301      	movs	r3, #1
 8034fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8034fa2:	e002      	b.n	8034faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8034fa4:	bf00      	nop
 8034fa6:	e000      	b.n	8034faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8034fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8034faa:	7dfb      	ldrb	r3, [r7, #23]
 8034fac:	2b00      	cmp	r3, #0
 8034fae:	d10a      	bne.n	8034fc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8034fb0:	4b25      	ldr	r3, [pc, #148]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8034fb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8034fb8:	687b      	ldr	r3, [r7, #4]
 8034fba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8034fbe:	4922      	ldr	r1, [pc, #136]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8034fc0:	4313      	orrs	r3, r2
 8034fc2:	658b      	str	r3, [r1, #88]	; 0x58
 8034fc4:	e001      	b.n	8034fca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8034fc6:	7dfb      	ldrb	r3, [r7, #23]
 8034fc8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8034fca:	687b      	ldr	r3, [r7, #4]
 8034fcc:	681b      	ldr	r3, [r3, #0]
 8034fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8034fd2:	2b00      	cmp	r3, #0
 8034fd4:	d04b      	beq.n	803506e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8034fd6:	687b      	ldr	r3, [r7, #4]
 8034fd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8034fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8034fe0:	d030      	beq.n	8035044 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8034fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8034fe6:	d82a      	bhi.n	803503e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8034fe8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8034fec:	d02e      	beq.n	803504c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8034fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8034ff2:	d824      	bhi.n	803503e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8034ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8034ff8:	d018      	beq.n	803502c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8034ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8034ffe:	d81e      	bhi.n	803503e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8035000:	2b00      	cmp	r3, #0
 8035002:	d003      	beq.n	803500c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8035004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8035008:	d007      	beq.n	803501a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 803500a:	e018      	b.n	803503e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803500c:	4b0e      	ldr	r3, [pc, #56]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035010:	4a0d      	ldr	r2, [pc, #52]	; (8035048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8035012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8035018:	e019      	b.n	803504e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803501a:	687b      	ldr	r3, [r7, #4]
 803501c:	3304      	adds	r3, #4
 803501e:	2100      	movs	r1, #0
 8035020:	4618      	mov	r0, r3
 8035022:	f001 f8ab 	bl	803617c <RCCEx_PLL2_Config>
 8035026:	4603      	mov	r3, r0
 8035028:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 803502a:	e010      	b.n	803504e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 803502c:	687b      	ldr	r3, [r7, #4]
 803502e:	3324      	adds	r3, #36	; 0x24
 8035030:	2100      	movs	r1, #0
 8035032:	4618      	mov	r0, r3
 8035034:	f001 f954 	bl	80362e0 <RCCEx_PLL3_Config>
 8035038:	4603      	mov	r3, r0
 803503a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803503c:	e007      	b.n	803504e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 803503e:	2301      	movs	r3, #1
 8035040:	75fb      	strb	r3, [r7, #23]
      break;
 8035042:	e004      	b.n	803504e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8035044:	bf00      	nop
 8035046:	e002      	b.n	803504e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8035048:	58024400 	.word	0x58024400
      break;
 803504c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803504e:	7dfb      	ldrb	r3, [r7, #23]
 8035050:	2b00      	cmp	r3, #0
 8035052:	d10a      	bne.n	803506a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8035054:	4b99      	ldr	r3, [pc, #612]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035058:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 803505c:	687b      	ldr	r3, [r7, #4]
 803505e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8035062:	4996      	ldr	r1, [pc, #600]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035064:	4313      	orrs	r3, r2
 8035066:	658b      	str	r3, [r1, #88]	; 0x58
 8035068:	e001      	b.n	803506e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803506a:	7dfb      	ldrb	r3, [r7, #23]
 803506c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 803506e:	687b      	ldr	r3, [r7, #4]
 8035070:	681b      	ldr	r3, [r3, #0]
 8035072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8035076:	2b00      	cmp	r3, #0
 8035078:	d032      	beq.n	80350e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 803507a:	687b      	ldr	r3, [r7, #4]
 803507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803507e:	2b30      	cmp	r3, #48	; 0x30
 8035080:	d01c      	beq.n	80350bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8035082:	2b30      	cmp	r3, #48	; 0x30
 8035084:	d817      	bhi.n	80350b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8035086:	2b20      	cmp	r3, #32
 8035088:	d00c      	beq.n	80350a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 803508a:	2b20      	cmp	r3, #32
 803508c:	d813      	bhi.n	80350b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 803508e:	2b00      	cmp	r3, #0
 8035090:	d016      	beq.n	80350c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8035092:	2b10      	cmp	r3, #16
 8035094:	d10f      	bne.n	80350b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035096:	4b89      	ldr	r3, [pc, #548]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803509a:	4a88      	ldr	r2, [pc, #544]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803509c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80350a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80350a2:	e00e      	b.n	80350c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80350a4:	687b      	ldr	r3, [r7, #4]
 80350a6:	3304      	adds	r3, #4
 80350a8:	2102      	movs	r1, #2
 80350aa:	4618      	mov	r0, r3
 80350ac:	f001 f866 	bl	803617c <RCCEx_PLL2_Config>
 80350b0:	4603      	mov	r3, r0
 80350b2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80350b4:	e005      	b.n	80350c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80350b6:	2301      	movs	r3, #1
 80350b8:	75fb      	strb	r3, [r7, #23]
      break;
 80350ba:	e002      	b.n	80350c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80350bc:	bf00      	nop
 80350be:	e000      	b.n	80350c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80350c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80350c2:	7dfb      	ldrb	r3, [r7, #23]
 80350c4:	2b00      	cmp	r3, #0
 80350c6:	d109      	bne.n	80350dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80350c8:	4b7c      	ldr	r3, [pc, #496]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80350ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80350cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80350d0:	687b      	ldr	r3, [r7, #4]
 80350d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80350d4:	4979      	ldr	r1, [pc, #484]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80350d6:	4313      	orrs	r3, r2
 80350d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80350da:	e001      	b.n	80350e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80350dc:	7dfb      	ldrb	r3, [r7, #23]
 80350de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80350e0:	687b      	ldr	r3, [r7, #4]
 80350e2:	681b      	ldr	r3, [r3, #0]
 80350e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80350e8:	2b00      	cmp	r3, #0
 80350ea:	d047      	beq.n	803517c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80350ec:	687b      	ldr	r3, [r7, #4]
 80350ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80350f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80350f4:	d030      	beq.n	8035158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80350f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80350fa:	d82a      	bhi.n	8035152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80350fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8035100:	d02c      	beq.n	803515c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8035102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8035106:	d824      	bhi.n	8035152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8035108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803510c:	d018      	beq.n	8035140 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 803510e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035112:	d81e      	bhi.n	8035152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8035114:	2b00      	cmp	r3, #0
 8035116:	d003      	beq.n	8035120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8035118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803511c:	d007      	beq.n	803512e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 803511e:	e018      	b.n	8035152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035120:	4b66      	ldr	r3, [pc, #408]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035124:	4a65      	ldr	r2, [pc, #404]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803512a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 803512c:	e017      	b.n	803515e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803512e:	687b      	ldr	r3, [r7, #4]
 8035130:	3304      	adds	r3, #4
 8035132:	2100      	movs	r1, #0
 8035134:	4618      	mov	r0, r3
 8035136:	f001 f821 	bl	803617c <RCCEx_PLL2_Config>
 803513a:	4603      	mov	r3, r0
 803513c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 803513e:	e00e      	b.n	803515e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8035140:	687b      	ldr	r3, [r7, #4]
 8035142:	3324      	adds	r3, #36	; 0x24
 8035144:	2100      	movs	r1, #0
 8035146:	4618      	mov	r0, r3
 8035148:	f001 f8ca 	bl	80362e0 <RCCEx_PLL3_Config>
 803514c:	4603      	mov	r3, r0
 803514e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8035150:	e005      	b.n	803515e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035152:	2301      	movs	r3, #1
 8035154:	75fb      	strb	r3, [r7, #23]
      break;
 8035156:	e002      	b.n	803515e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8035158:	bf00      	nop
 803515a:	e000      	b.n	803515e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 803515c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803515e:	7dfb      	ldrb	r3, [r7, #23]
 8035160:	2b00      	cmp	r3, #0
 8035162:	d109      	bne.n	8035178 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8035164:	4b55      	ldr	r3, [pc, #340]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035168:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 803516c:	687b      	ldr	r3, [r7, #4]
 803516e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8035170:	4952      	ldr	r1, [pc, #328]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035172:	4313      	orrs	r3, r2
 8035174:	650b      	str	r3, [r1, #80]	; 0x50
 8035176:	e001      	b.n	803517c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035178:	7dfb      	ldrb	r3, [r7, #23]
 803517a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 803517c:	687b      	ldr	r3, [r7, #4]
 803517e:	681b      	ldr	r3, [r3, #0]
 8035180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8035184:	2b00      	cmp	r3, #0
 8035186:	d049      	beq.n	803521c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8035188:	687b      	ldr	r3, [r7, #4]
 803518a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 803518c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8035190:	d02e      	beq.n	80351f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8035192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8035196:	d828      	bhi.n	80351ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8035198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 803519c:	d02a      	beq.n	80351f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 803519e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80351a2:	d822      	bhi.n	80351ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80351a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80351a8:	d026      	beq.n	80351f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80351aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80351ae:	d81c      	bhi.n	80351ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80351b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80351b4:	d010      	beq.n	80351d8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80351b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80351ba:	d816      	bhi.n	80351ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80351bc:	2b00      	cmp	r3, #0
 80351be:	d01d      	beq.n	80351fc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80351c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80351c4:	d111      	bne.n	80351ea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80351c6:	687b      	ldr	r3, [r7, #4]
 80351c8:	3304      	adds	r3, #4
 80351ca:	2101      	movs	r1, #1
 80351cc:	4618      	mov	r0, r3
 80351ce:	f000 ffd5 	bl	803617c <RCCEx_PLL2_Config>
 80351d2:	4603      	mov	r3, r0
 80351d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80351d6:	e012      	b.n	80351fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80351d8:	687b      	ldr	r3, [r7, #4]
 80351da:	3324      	adds	r3, #36	; 0x24
 80351dc:	2101      	movs	r1, #1
 80351de:	4618      	mov	r0, r3
 80351e0:	f001 f87e 	bl	80362e0 <RCCEx_PLL3_Config>
 80351e4:	4603      	mov	r3, r0
 80351e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80351e8:	e009      	b.n	80351fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80351ea:	2301      	movs	r3, #1
 80351ec:	75fb      	strb	r3, [r7, #23]
      break;
 80351ee:	e006      	b.n	80351fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80351f0:	bf00      	nop
 80351f2:	e004      	b.n	80351fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80351f4:	bf00      	nop
 80351f6:	e002      	b.n	80351fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80351f8:	bf00      	nop
 80351fa:	e000      	b.n	80351fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80351fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80351fe:	7dfb      	ldrb	r3, [r7, #23]
 8035200:	2b00      	cmp	r3, #0
 8035202:	d109      	bne.n	8035218 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8035204:	4b2d      	ldr	r3, [pc, #180]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035208:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 803520c:	687b      	ldr	r3, [r7, #4]
 803520e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8035210:	492a      	ldr	r1, [pc, #168]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035212:	4313      	orrs	r3, r2
 8035214:	650b      	str	r3, [r1, #80]	; 0x50
 8035216:	e001      	b.n	803521c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035218:	7dfb      	ldrb	r3, [r7, #23]
 803521a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 803521c:	687b      	ldr	r3, [r7, #4]
 803521e:	681b      	ldr	r3, [r3, #0]
 8035220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8035224:	2b00      	cmp	r3, #0
 8035226:	d04d      	beq.n	80352c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8035228:	687b      	ldr	r3, [r7, #4]
 803522a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 803522e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8035232:	d02e      	beq.n	8035292 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8035234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8035238:	d828      	bhi.n	803528c <HAL_RCCEx_PeriphCLKConfig+0x518>
 803523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803523e:	d02a      	beq.n	8035296 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8035240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035244:	d822      	bhi.n	803528c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8035246:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803524a:	d026      	beq.n	803529a <HAL_RCCEx_PeriphCLKConfig+0x526>
 803524c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8035250:	d81c      	bhi.n	803528c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8035252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035256:	d010      	beq.n	803527a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8035258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803525c:	d816      	bhi.n	803528c <HAL_RCCEx_PeriphCLKConfig+0x518>
 803525e:	2b00      	cmp	r3, #0
 8035260:	d01d      	beq.n	803529e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8035262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8035266:	d111      	bne.n	803528c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035268:	687b      	ldr	r3, [r7, #4]
 803526a:	3304      	adds	r3, #4
 803526c:	2101      	movs	r1, #1
 803526e:	4618      	mov	r0, r3
 8035270:	f000 ff84 	bl	803617c <RCCEx_PLL2_Config>
 8035274:	4603      	mov	r3, r0
 8035276:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8035278:	e012      	b.n	80352a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803527a:	687b      	ldr	r3, [r7, #4]
 803527c:	3324      	adds	r3, #36	; 0x24
 803527e:	2101      	movs	r1, #1
 8035280:	4618      	mov	r0, r3
 8035282:	f001 f82d 	bl	80362e0 <RCCEx_PLL3_Config>
 8035286:	4603      	mov	r3, r0
 8035288:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 803528a:	e009      	b.n	80352a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 803528c:	2301      	movs	r3, #1
 803528e:	75fb      	strb	r3, [r7, #23]
      break;
 8035290:	e006      	b.n	80352a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8035292:	bf00      	nop
 8035294:	e004      	b.n	80352a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8035296:	bf00      	nop
 8035298:	e002      	b.n	80352a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803529a:	bf00      	nop
 803529c:	e000      	b.n	80352a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803529e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80352a0:	7dfb      	ldrb	r3, [r7, #23]
 80352a2:	2b00      	cmp	r3, #0
 80352a4:	d10c      	bne.n	80352c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80352a6:	4b05      	ldr	r3, [pc, #20]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80352a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80352aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80352ae:	687b      	ldr	r3, [r7, #4]
 80352b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80352b4:	4901      	ldr	r1, [pc, #4]	; (80352bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80352b6:	4313      	orrs	r3, r2
 80352b8:	658b      	str	r3, [r1, #88]	; 0x58
 80352ba:	e003      	b.n	80352c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80352bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80352c0:	7dfb      	ldrb	r3, [r7, #23]
 80352c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80352c4:	687b      	ldr	r3, [r7, #4]
 80352c6:	681b      	ldr	r3, [r3, #0]
 80352c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80352cc:	2b00      	cmp	r3, #0
 80352ce:	d02f      	beq.n	8035330 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80352d0:	687b      	ldr	r3, [r7, #4]
 80352d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80352d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80352d8:	d00e      	beq.n	80352f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80352da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80352de:	d814      	bhi.n	803530a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80352e0:	2b00      	cmp	r3, #0
 80352e2:	d015      	beq.n	8035310 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80352e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80352e8:	d10f      	bne.n	803530a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80352ea:	4baf      	ldr	r3, [pc, #700]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80352ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80352ee:	4aae      	ldr	r2, [pc, #696]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80352f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80352f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80352f6:	e00c      	b.n	8035312 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80352f8:	687b      	ldr	r3, [r7, #4]
 80352fa:	3304      	adds	r3, #4
 80352fc:	2101      	movs	r1, #1
 80352fe:	4618      	mov	r0, r3
 8035300:	f000 ff3c 	bl	803617c <RCCEx_PLL2_Config>
 8035304:	4603      	mov	r3, r0
 8035306:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8035308:	e003      	b.n	8035312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803530a:	2301      	movs	r3, #1
 803530c:	75fb      	strb	r3, [r7, #23]
      break;
 803530e:	e000      	b.n	8035312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8035310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035312:	7dfb      	ldrb	r3, [r7, #23]
 8035314:	2b00      	cmp	r3, #0
 8035316:	d109      	bne.n	803532c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8035318:	4ba3      	ldr	r3, [pc, #652]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803531a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803531c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8035320:	687b      	ldr	r3, [r7, #4]
 8035322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8035324:	49a0      	ldr	r1, [pc, #640]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035326:	4313      	orrs	r3, r2
 8035328:	650b      	str	r3, [r1, #80]	; 0x50
 803532a:	e001      	b.n	8035330 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803532c:	7dfb      	ldrb	r3, [r7, #23]
 803532e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8035330:	687b      	ldr	r3, [r7, #4]
 8035332:	681b      	ldr	r3, [r3, #0]
 8035334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8035338:	2b00      	cmp	r3, #0
 803533a:	d032      	beq.n	80353a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 803533c:	687b      	ldr	r3, [r7, #4]
 803533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8035340:	2b03      	cmp	r3, #3
 8035342:	d81b      	bhi.n	803537c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8035344:	a201      	add	r2, pc, #4	; (adr r2, 803534c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8035346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803534a:	bf00      	nop
 803534c:	08035383 	.word	0x08035383
 8035350:	0803535d 	.word	0x0803535d
 8035354:	0803536b 	.word	0x0803536b
 8035358:	08035383 	.word	0x08035383
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803535c:	4b92      	ldr	r3, [pc, #584]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035360:	4a91      	ldr	r2, [pc, #580]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8035368:	e00c      	b.n	8035384 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 803536a:	687b      	ldr	r3, [r7, #4]
 803536c:	3304      	adds	r3, #4
 803536e:	2102      	movs	r1, #2
 8035370:	4618      	mov	r0, r3
 8035372:	f000 ff03 	bl	803617c <RCCEx_PLL2_Config>
 8035376:	4603      	mov	r3, r0
 8035378:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 803537a:	e003      	b.n	8035384 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 803537c:	2301      	movs	r3, #1
 803537e:	75fb      	strb	r3, [r7, #23]
      break;
 8035380:	e000      	b.n	8035384 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8035382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035384:	7dfb      	ldrb	r3, [r7, #23]
 8035386:	2b00      	cmp	r3, #0
 8035388:	d109      	bne.n	803539e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 803538a:	4b87      	ldr	r3, [pc, #540]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803538e:	f023 0203 	bic.w	r2, r3, #3
 8035392:	687b      	ldr	r3, [r7, #4]
 8035394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8035396:	4984      	ldr	r1, [pc, #528]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035398:	4313      	orrs	r3, r2
 803539a:	64cb      	str	r3, [r1, #76]	; 0x4c
 803539c:	e001      	b.n	80353a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803539e:	7dfb      	ldrb	r3, [r7, #23]
 80353a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80353a2:	687b      	ldr	r3, [r7, #4]
 80353a4:	681b      	ldr	r3, [r3, #0]
 80353a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80353aa:	2b00      	cmp	r3, #0
 80353ac:	f000 8086 	beq.w	80354bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80353b0:	4b7e      	ldr	r3, [pc, #504]	; (80355ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80353b2:	681b      	ldr	r3, [r3, #0]
 80353b4:	4a7d      	ldr	r2, [pc, #500]	; (80355ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80353b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80353ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80353bc:	f7f8 fd38 	bl	802de30 <HAL_GetTick>
 80353c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80353c2:	e009      	b.n	80353d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80353c4:	f7f8 fd34 	bl	802de30 <HAL_GetTick>
 80353c8:	4602      	mov	r2, r0
 80353ca:	693b      	ldr	r3, [r7, #16]
 80353cc:	1ad3      	subs	r3, r2, r3
 80353ce:	2b64      	cmp	r3, #100	; 0x64
 80353d0:	d902      	bls.n	80353d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80353d2:	2303      	movs	r3, #3
 80353d4:	75fb      	strb	r3, [r7, #23]
        break;
 80353d6:	e005      	b.n	80353e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80353d8:	4b74      	ldr	r3, [pc, #464]	; (80355ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80353da:	681b      	ldr	r3, [r3, #0]
 80353dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80353e0:	2b00      	cmp	r3, #0
 80353e2:	d0ef      	beq.n	80353c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80353e4:	7dfb      	ldrb	r3, [r7, #23]
 80353e6:	2b00      	cmp	r3, #0
 80353e8:	d166      	bne.n	80354b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80353ea:	4b6f      	ldr	r3, [pc, #444]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80353ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80353ee:	687b      	ldr	r3, [r7, #4]
 80353f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80353f4:	4053      	eors	r3, r2
 80353f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80353fa:	2b00      	cmp	r3, #0
 80353fc:	d013      	beq.n	8035426 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80353fe:	4b6a      	ldr	r3, [pc, #424]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8035406:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8035408:	4b67      	ldr	r3, [pc, #412]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803540c:	4a66      	ldr	r2, [pc, #408]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803540e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8035412:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8035414:	4b64      	ldr	r3, [pc, #400]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035418:	4a63      	ldr	r2, [pc, #396]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803541e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8035420:	4a61      	ldr	r2, [pc, #388]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035422:	68fb      	ldr	r3, [r7, #12]
 8035424:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8035426:	687b      	ldr	r3, [r7, #4]
 8035428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803542c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035430:	d115      	bne.n	803545e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8035432:	f7f8 fcfd 	bl	802de30 <HAL_GetTick>
 8035436:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8035438:	e00b      	b.n	8035452 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 803543a:	f7f8 fcf9 	bl	802de30 <HAL_GetTick>
 803543e:	4602      	mov	r2, r0
 8035440:	693b      	ldr	r3, [r7, #16]
 8035442:	1ad3      	subs	r3, r2, r3
 8035444:	f241 3288 	movw	r2, #5000	; 0x1388
 8035448:	4293      	cmp	r3, r2
 803544a:	d902      	bls.n	8035452 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 803544c:	2303      	movs	r3, #3
 803544e:	75fb      	strb	r3, [r7, #23]
            break;
 8035450:	e005      	b.n	803545e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8035452:	4b55      	ldr	r3, [pc, #340]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035456:	f003 0302 	and.w	r3, r3, #2
 803545a:	2b00      	cmp	r3, #0
 803545c:	d0ed      	beq.n	803543a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 803545e:	7dfb      	ldrb	r3, [r7, #23]
 8035460:	2b00      	cmp	r3, #0
 8035462:	d126      	bne.n	80354b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8035464:	687b      	ldr	r3, [r7, #4]
 8035466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803546e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8035472:	d10d      	bne.n	8035490 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8035474:	4b4c      	ldr	r3, [pc, #304]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035476:	691b      	ldr	r3, [r3, #16]
 8035478:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 803547c:	687b      	ldr	r3, [r7, #4]
 803547e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8035482:	0919      	lsrs	r1, r3, #4
 8035484:	4b4a      	ldr	r3, [pc, #296]	; (80355b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8035486:	400b      	ands	r3, r1
 8035488:	4947      	ldr	r1, [pc, #284]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803548a:	4313      	orrs	r3, r2
 803548c:	610b      	str	r3, [r1, #16]
 803548e:	e005      	b.n	803549c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8035490:	4b45      	ldr	r3, [pc, #276]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035492:	691b      	ldr	r3, [r3, #16]
 8035494:	4a44      	ldr	r2, [pc, #272]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035496:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 803549a:	6113      	str	r3, [r2, #16]
 803549c:	4b42      	ldr	r3, [pc, #264]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803549e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80354a0:	687b      	ldr	r3, [r7, #4]
 80354a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80354a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80354aa:	493f      	ldr	r1, [pc, #252]	; (80355a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80354ac:	4313      	orrs	r3, r2
 80354ae:	670b      	str	r3, [r1, #112]	; 0x70
 80354b0:	e004      	b.n	80354bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80354b2:	7dfb      	ldrb	r3, [r7, #23]
 80354b4:	75bb      	strb	r3, [r7, #22]
 80354b6:	e001      	b.n	80354bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80354b8:	7dfb      	ldrb	r3, [r7, #23]
 80354ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80354bc:	687b      	ldr	r3, [r7, #4]
 80354be:	681b      	ldr	r3, [r3, #0]
 80354c0:	f003 0301 	and.w	r3, r3, #1
 80354c4:	2b00      	cmp	r3, #0
 80354c6:	f000 8085 	beq.w	80355d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80354ca:	687b      	ldr	r3, [r7, #4]
 80354cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80354ce:	2b28      	cmp	r3, #40	; 0x28
 80354d0:	d866      	bhi.n	80355a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80354d2:	a201      	add	r2, pc, #4	; (adr r2, 80354d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80354d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80354d8:	080355b5 	.word	0x080355b5
 80354dc:	080355a1 	.word	0x080355a1
 80354e0:	080355a1 	.word	0x080355a1
 80354e4:	080355a1 	.word	0x080355a1
 80354e8:	080355a1 	.word	0x080355a1
 80354ec:	080355a1 	.word	0x080355a1
 80354f0:	080355a1 	.word	0x080355a1
 80354f4:	080355a1 	.word	0x080355a1
 80354f8:	0803557d 	.word	0x0803557d
 80354fc:	080355a1 	.word	0x080355a1
 8035500:	080355a1 	.word	0x080355a1
 8035504:	080355a1 	.word	0x080355a1
 8035508:	080355a1 	.word	0x080355a1
 803550c:	080355a1 	.word	0x080355a1
 8035510:	080355a1 	.word	0x080355a1
 8035514:	080355a1 	.word	0x080355a1
 8035518:	0803558f 	.word	0x0803558f
 803551c:	080355a1 	.word	0x080355a1
 8035520:	080355a1 	.word	0x080355a1
 8035524:	080355a1 	.word	0x080355a1
 8035528:	080355a1 	.word	0x080355a1
 803552c:	080355a1 	.word	0x080355a1
 8035530:	080355a1 	.word	0x080355a1
 8035534:	080355a1 	.word	0x080355a1
 8035538:	080355b5 	.word	0x080355b5
 803553c:	080355a1 	.word	0x080355a1
 8035540:	080355a1 	.word	0x080355a1
 8035544:	080355a1 	.word	0x080355a1
 8035548:	080355a1 	.word	0x080355a1
 803554c:	080355a1 	.word	0x080355a1
 8035550:	080355a1 	.word	0x080355a1
 8035554:	080355a1 	.word	0x080355a1
 8035558:	080355b5 	.word	0x080355b5
 803555c:	080355a1 	.word	0x080355a1
 8035560:	080355a1 	.word	0x080355a1
 8035564:	080355a1 	.word	0x080355a1
 8035568:	080355a1 	.word	0x080355a1
 803556c:	080355a1 	.word	0x080355a1
 8035570:	080355a1 	.word	0x080355a1
 8035574:	080355a1 	.word	0x080355a1
 8035578:	080355b5 	.word	0x080355b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803557c:	687b      	ldr	r3, [r7, #4]
 803557e:	3304      	adds	r3, #4
 8035580:	2101      	movs	r1, #1
 8035582:	4618      	mov	r0, r3
 8035584:	f000 fdfa 	bl	803617c <RCCEx_PLL2_Config>
 8035588:	4603      	mov	r3, r0
 803558a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 803558c:	e013      	b.n	80355b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803558e:	687b      	ldr	r3, [r7, #4]
 8035590:	3324      	adds	r3, #36	; 0x24
 8035592:	2101      	movs	r1, #1
 8035594:	4618      	mov	r0, r3
 8035596:	f000 fea3 	bl	80362e0 <RCCEx_PLL3_Config>
 803559a:	4603      	mov	r3, r0
 803559c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 803559e:	e00a      	b.n	80355b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80355a0:	2301      	movs	r3, #1
 80355a2:	75fb      	strb	r3, [r7, #23]
      break;
 80355a4:	e007      	b.n	80355b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80355a6:	bf00      	nop
 80355a8:	58024400 	.word	0x58024400
 80355ac:	58024800 	.word	0x58024800
 80355b0:	00ffffcf 	.word	0x00ffffcf
      break;
 80355b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80355b6:	7dfb      	ldrb	r3, [r7, #23]
 80355b8:	2b00      	cmp	r3, #0
 80355ba:	d109      	bne.n	80355d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80355bc:	4b96      	ldr	r3, [pc, #600]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80355be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80355c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80355c4:	687b      	ldr	r3, [r7, #4]
 80355c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80355c8:	4993      	ldr	r1, [pc, #588]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80355ca:	4313      	orrs	r3, r2
 80355cc:	654b      	str	r3, [r1, #84]	; 0x54
 80355ce:	e001      	b.n	80355d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80355d0:	7dfb      	ldrb	r3, [r7, #23]
 80355d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80355d4:	687b      	ldr	r3, [r7, #4]
 80355d6:	681b      	ldr	r3, [r3, #0]
 80355d8:	f003 0302 	and.w	r3, r3, #2
 80355dc:	2b00      	cmp	r3, #0
 80355de:	d038      	beq.n	8035652 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80355e0:	687b      	ldr	r3, [r7, #4]
 80355e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80355e4:	2b05      	cmp	r3, #5
 80355e6:	d821      	bhi.n	803562c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80355e8:	a201      	add	r2, pc, #4	; (adr r2, 80355f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80355ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80355ee:	bf00      	nop
 80355f0:	08035633 	.word	0x08035633
 80355f4:	08035609 	.word	0x08035609
 80355f8:	0803561b 	.word	0x0803561b
 80355fc:	08035633 	.word	0x08035633
 8035600:	08035633 	.word	0x08035633
 8035604:	08035633 	.word	0x08035633
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035608:	687b      	ldr	r3, [r7, #4]
 803560a:	3304      	adds	r3, #4
 803560c:	2101      	movs	r1, #1
 803560e:	4618      	mov	r0, r3
 8035610:	f000 fdb4 	bl	803617c <RCCEx_PLL2_Config>
 8035614:	4603      	mov	r3, r0
 8035616:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8035618:	e00c      	b.n	8035634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803561a:	687b      	ldr	r3, [r7, #4]
 803561c:	3324      	adds	r3, #36	; 0x24
 803561e:	2101      	movs	r1, #1
 8035620:	4618      	mov	r0, r3
 8035622:	f000 fe5d 	bl	80362e0 <RCCEx_PLL3_Config>
 8035626:	4603      	mov	r3, r0
 8035628:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 803562a:	e003      	b.n	8035634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803562c:	2301      	movs	r3, #1
 803562e:	75fb      	strb	r3, [r7, #23]
      break;
 8035630:	e000      	b.n	8035634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8035632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035634:	7dfb      	ldrb	r3, [r7, #23]
 8035636:	2b00      	cmp	r3, #0
 8035638:	d109      	bne.n	803564e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 803563a:	4b77      	ldr	r3, [pc, #476]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803563e:	f023 0207 	bic.w	r2, r3, #7
 8035642:	687b      	ldr	r3, [r7, #4]
 8035644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035646:	4974      	ldr	r1, [pc, #464]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035648:	4313      	orrs	r3, r2
 803564a:	654b      	str	r3, [r1, #84]	; 0x54
 803564c:	e001      	b.n	8035652 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803564e:	7dfb      	ldrb	r3, [r7, #23]
 8035650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8035652:	687b      	ldr	r3, [r7, #4]
 8035654:	681b      	ldr	r3, [r3, #0]
 8035656:	f003 0304 	and.w	r3, r3, #4
 803565a:	2b00      	cmp	r3, #0
 803565c:	d03a      	beq.n	80356d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 803565e:	687b      	ldr	r3, [r7, #4]
 8035660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8035664:	2b05      	cmp	r3, #5
 8035666:	d821      	bhi.n	80356ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8035668:	a201      	add	r2, pc, #4	; (adr r2, 8035670 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 803566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803566e:	bf00      	nop
 8035670:	080356b3 	.word	0x080356b3
 8035674:	08035689 	.word	0x08035689
 8035678:	0803569b 	.word	0x0803569b
 803567c:	080356b3 	.word	0x080356b3
 8035680:	080356b3 	.word	0x080356b3
 8035684:	080356b3 	.word	0x080356b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035688:	687b      	ldr	r3, [r7, #4]
 803568a:	3304      	adds	r3, #4
 803568c:	2101      	movs	r1, #1
 803568e:	4618      	mov	r0, r3
 8035690:	f000 fd74 	bl	803617c <RCCEx_PLL2_Config>
 8035694:	4603      	mov	r3, r0
 8035696:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8035698:	e00c      	b.n	80356b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803569a:	687b      	ldr	r3, [r7, #4]
 803569c:	3324      	adds	r3, #36	; 0x24
 803569e:	2101      	movs	r1, #1
 80356a0:	4618      	mov	r0, r3
 80356a2:	f000 fe1d 	bl	80362e0 <RCCEx_PLL3_Config>
 80356a6:	4603      	mov	r3, r0
 80356a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80356aa:	e003      	b.n	80356b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80356ac:	2301      	movs	r3, #1
 80356ae:	75fb      	strb	r3, [r7, #23]
      break;
 80356b0:	e000      	b.n	80356b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80356b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80356b4:	7dfb      	ldrb	r3, [r7, #23]
 80356b6:	2b00      	cmp	r3, #0
 80356b8:	d10a      	bne.n	80356d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80356ba:	4b57      	ldr	r3, [pc, #348]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80356bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80356be:	f023 0207 	bic.w	r2, r3, #7
 80356c2:	687b      	ldr	r3, [r7, #4]
 80356c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80356c8:	4953      	ldr	r1, [pc, #332]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80356ca:	4313      	orrs	r3, r2
 80356cc:	658b      	str	r3, [r1, #88]	; 0x58
 80356ce:	e001      	b.n	80356d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80356d0:	7dfb      	ldrb	r3, [r7, #23]
 80356d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80356d4:	687b      	ldr	r3, [r7, #4]
 80356d6:	681b      	ldr	r3, [r3, #0]
 80356d8:	f003 0320 	and.w	r3, r3, #32
 80356dc:	2b00      	cmp	r3, #0
 80356de:	d04b      	beq.n	8035778 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80356e0:	687b      	ldr	r3, [r7, #4]
 80356e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80356e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80356ea:	d02e      	beq.n	803574a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80356ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80356f0:	d828      	bhi.n	8035744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80356f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80356f6:	d02a      	beq.n	803574e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80356f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80356fc:	d822      	bhi.n	8035744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80356fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8035702:	d026      	beq.n	8035752 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8035704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8035708:	d81c      	bhi.n	8035744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803570a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803570e:	d010      	beq.n	8035732 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8035710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035714:	d816      	bhi.n	8035744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8035716:	2b00      	cmp	r3, #0
 8035718:	d01d      	beq.n	8035756 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 803571a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803571e:	d111      	bne.n	8035744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8035720:	687b      	ldr	r3, [r7, #4]
 8035722:	3304      	adds	r3, #4
 8035724:	2100      	movs	r1, #0
 8035726:	4618      	mov	r0, r3
 8035728:	f000 fd28 	bl	803617c <RCCEx_PLL2_Config>
 803572c:	4603      	mov	r3, r0
 803572e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8035730:	e012      	b.n	8035758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8035732:	687b      	ldr	r3, [r7, #4]
 8035734:	3324      	adds	r3, #36	; 0x24
 8035736:	2102      	movs	r1, #2
 8035738:	4618      	mov	r0, r3
 803573a:	f000 fdd1 	bl	80362e0 <RCCEx_PLL3_Config>
 803573e:	4603      	mov	r3, r0
 8035740:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8035742:	e009      	b.n	8035758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035744:	2301      	movs	r3, #1
 8035746:	75fb      	strb	r3, [r7, #23]
      break;
 8035748:	e006      	b.n	8035758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 803574a:	bf00      	nop
 803574c:	e004      	b.n	8035758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 803574e:	bf00      	nop
 8035750:	e002      	b.n	8035758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8035752:	bf00      	nop
 8035754:	e000      	b.n	8035758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8035756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035758:	7dfb      	ldrb	r3, [r7, #23]
 803575a:	2b00      	cmp	r3, #0
 803575c:	d10a      	bne.n	8035774 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 803575e:	4b2e      	ldr	r3, [pc, #184]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035762:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8035766:	687b      	ldr	r3, [r7, #4]
 8035768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803576c:	492a      	ldr	r1, [pc, #168]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803576e:	4313      	orrs	r3, r2
 8035770:	654b      	str	r3, [r1, #84]	; 0x54
 8035772:	e001      	b.n	8035778 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035774:	7dfb      	ldrb	r3, [r7, #23]
 8035776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8035778:	687b      	ldr	r3, [r7, #4]
 803577a:	681b      	ldr	r3, [r3, #0]
 803577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035780:	2b00      	cmp	r3, #0
 8035782:	d04d      	beq.n	8035820 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8035784:	687b      	ldr	r3, [r7, #4]
 8035786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 803578a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 803578e:	d02e      	beq.n	80357ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8035790:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8035794:	d828      	bhi.n	80357e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8035796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803579a:	d02a      	beq.n	80357f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 803579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80357a0:	d822      	bhi.n	80357e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80357a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80357a6:	d026      	beq.n	80357f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80357a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80357ac:	d81c      	bhi.n	80357e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80357ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80357b2:	d010      	beq.n	80357d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80357b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80357b8:	d816      	bhi.n	80357e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80357ba:	2b00      	cmp	r3, #0
 80357bc:	d01d      	beq.n	80357fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80357be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80357c2:	d111      	bne.n	80357e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80357c4:	687b      	ldr	r3, [r7, #4]
 80357c6:	3304      	adds	r3, #4
 80357c8:	2100      	movs	r1, #0
 80357ca:	4618      	mov	r0, r3
 80357cc:	f000 fcd6 	bl	803617c <RCCEx_PLL2_Config>
 80357d0:	4603      	mov	r3, r0
 80357d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80357d4:	e012      	b.n	80357fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80357d6:	687b      	ldr	r3, [r7, #4]
 80357d8:	3324      	adds	r3, #36	; 0x24
 80357da:	2102      	movs	r1, #2
 80357dc:	4618      	mov	r0, r3
 80357de:	f000 fd7f 	bl	80362e0 <RCCEx_PLL3_Config>
 80357e2:	4603      	mov	r3, r0
 80357e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80357e6:	e009      	b.n	80357fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80357e8:	2301      	movs	r3, #1
 80357ea:	75fb      	strb	r3, [r7, #23]
      break;
 80357ec:	e006      	b.n	80357fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80357ee:	bf00      	nop
 80357f0:	e004      	b.n	80357fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80357f2:	bf00      	nop
 80357f4:	e002      	b.n	80357fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80357f6:	bf00      	nop
 80357f8:	e000      	b.n	80357fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80357fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80357fc:	7dfb      	ldrb	r3, [r7, #23]
 80357fe:	2b00      	cmp	r3, #0
 8035800:	d10c      	bne.n	803581c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8035802:	4b05      	ldr	r3, [pc, #20]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035806:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 803580a:	687b      	ldr	r3, [r7, #4]
 803580c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8035810:	4901      	ldr	r1, [pc, #4]	; (8035818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035812:	4313      	orrs	r3, r2
 8035814:	658b      	str	r3, [r1, #88]	; 0x58
 8035816:	e003      	b.n	8035820 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8035818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 803581c:	7dfb      	ldrb	r3, [r7, #23]
 803581e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8035820:	687b      	ldr	r3, [r7, #4]
 8035822:	681b      	ldr	r3, [r3, #0]
 8035824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035828:	2b00      	cmp	r3, #0
 803582a:	d04b      	beq.n	80358c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 803582c:	687b      	ldr	r3, [r7, #4]
 803582e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8035832:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8035836:	d02e      	beq.n	8035896 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8035838:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 803583c:	d828      	bhi.n	8035890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 803583e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035842:	d02a      	beq.n	803589a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8035844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035848:	d822      	bhi.n	8035890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 803584a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 803584e:	d026      	beq.n	803589e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8035850:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8035854:	d81c      	bhi.n	8035890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8035856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803585a:	d010      	beq.n	803587e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 803585c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8035860:	d816      	bhi.n	8035890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8035862:	2b00      	cmp	r3, #0
 8035864:	d01d      	beq.n	80358a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8035866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803586a:	d111      	bne.n	8035890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803586c:	687b      	ldr	r3, [r7, #4]
 803586e:	3304      	adds	r3, #4
 8035870:	2100      	movs	r1, #0
 8035872:	4618      	mov	r0, r3
 8035874:	f000 fc82 	bl	803617c <RCCEx_PLL2_Config>
 8035878:	4603      	mov	r3, r0
 803587a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 803587c:	e012      	b.n	80358a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803587e:	687b      	ldr	r3, [r7, #4]
 8035880:	3324      	adds	r3, #36	; 0x24
 8035882:	2102      	movs	r1, #2
 8035884:	4618      	mov	r0, r3
 8035886:	f000 fd2b 	bl	80362e0 <RCCEx_PLL3_Config>
 803588a:	4603      	mov	r3, r0
 803588c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 803588e:	e009      	b.n	80358a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035890:	2301      	movs	r3, #1
 8035892:	75fb      	strb	r3, [r7, #23]
      break;
 8035894:	e006      	b.n	80358a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8035896:	bf00      	nop
 8035898:	e004      	b.n	80358a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 803589a:	bf00      	nop
 803589c:	e002      	b.n	80358a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 803589e:	bf00      	nop
 80358a0:	e000      	b.n	80358a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80358a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80358a4:	7dfb      	ldrb	r3, [r7, #23]
 80358a6:	2b00      	cmp	r3, #0
 80358a8:	d10a      	bne.n	80358c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80358aa:	4b9d      	ldr	r3, [pc, #628]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80358ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80358ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80358b2:	687b      	ldr	r3, [r7, #4]
 80358b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80358b8:	4999      	ldr	r1, [pc, #612]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80358ba:	4313      	orrs	r3, r2
 80358bc:	658b      	str	r3, [r1, #88]	; 0x58
 80358be:	e001      	b.n	80358c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80358c0:	7dfb      	ldrb	r3, [r7, #23]
 80358c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80358c4:	687b      	ldr	r3, [r7, #4]
 80358c6:	681b      	ldr	r3, [r3, #0]
 80358c8:	f003 0308 	and.w	r3, r3, #8
 80358cc:	2b00      	cmp	r3, #0
 80358ce:	d01a      	beq.n	8035906 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80358d0:	687b      	ldr	r3, [r7, #4]
 80358d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80358d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80358da:	d10a      	bne.n	80358f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80358dc:	687b      	ldr	r3, [r7, #4]
 80358de:	3324      	adds	r3, #36	; 0x24
 80358e0:	2102      	movs	r1, #2
 80358e2:	4618      	mov	r0, r3
 80358e4:	f000 fcfc 	bl	80362e0 <RCCEx_PLL3_Config>
 80358e8:	4603      	mov	r3, r0
 80358ea:	2b00      	cmp	r3, #0
 80358ec:	d001      	beq.n	80358f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80358ee:	2301      	movs	r3, #1
 80358f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80358f2:	4b8b      	ldr	r3, [pc, #556]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80358f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80358f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80358fa:	687b      	ldr	r3, [r7, #4]
 80358fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8035900:	4987      	ldr	r1, [pc, #540]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035902:	4313      	orrs	r3, r2
 8035904:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8035906:	687b      	ldr	r3, [r7, #4]
 8035908:	681b      	ldr	r3, [r3, #0]
 803590a:	f003 0310 	and.w	r3, r3, #16
 803590e:	2b00      	cmp	r3, #0
 8035910:	d01a      	beq.n	8035948 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8035912:	687b      	ldr	r3, [r7, #4]
 8035914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8035918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803591c:	d10a      	bne.n	8035934 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 803591e:	687b      	ldr	r3, [r7, #4]
 8035920:	3324      	adds	r3, #36	; 0x24
 8035922:	2102      	movs	r1, #2
 8035924:	4618      	mov	r0, r3
 8035926:	f000 fcdb 	bl	80362e0 <RCCEx_PLL3_Config>
 803592a:	4603      	mov	r3, r0
 803592c:	2b00      	cmp	r3, #0
 803592e:	d001      	beq.n	8035934 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8035930:	2301      	movs	r3, #1
 8035932:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8035934:	4b7a      	ldr	r3, [pc, #488]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 803593c:	687b      	ldr	r3, [r7, #4]
 803593e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8035942:	4977      	ldr	r1, [pc, #476]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035944:	4313      	orrs	r3, r2
 8035946:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8035948:	687b      	ldr	r3, [r7, #4]
 803594a:	681b      	ldr	r3, [r3, #0]
 803594c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8035950:	2b00      	cmp	r3, #0
 8035952:	d034      	beq.n	80359be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8035954:	687b      	ldr	r3, [r7, #4]
 8035956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 803595a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 803595e:	d01d      	beq.n	803599c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8035960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8035964:	d817      	bhi.n	8035996 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8035966:	2b00      	cmp	r3, #0
 8035968:	d003      	beq.n	8035972 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 803596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803596e:	d009      	beq.n	8035984 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8035970:	e011      	b.n	8035996 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8035972:	687b      	ldr	r3, [r7, #4]
 8035974:	3304      	adds	r3, #4
 8035976:	2100      	movs	r1, #0
 8035978:	4618      	mov	r0, r3
 803597a:	f000 fbff 	bl	803617c <RCCEx_PLL2_Config>
 803597e:	4603      	mov	r3, r0
 8035980:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8035982:	e00c      	b.n	803599e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8035984:	687b      	ldr	r3, [r7, #4]
 8035986:	3324      	adds	r3, #36	; 0x24
 8035988:	2102      	movs	r1, #2
 803598a:	4618      	mov	r0, r3
 803598c:	f000 fca8 	bl	80362e0 <RCCEx_PLL3_Config>
 8035990:	4603      	mov	r3, r0
 8035992:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8035994:	e003      	b.n	803599e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035996:	2301      	movs	r3, #1
 8035998:	75fb      	strb	r3, [r7, #23]
      break;
 803599a:	e000      	b.n	803599e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 803599c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803599e:	7dfb      	ldrb	r3, [r7, #23]
 80359a0:	2b00      	cmp	r3, #0
 80359a2:	d10a      	bne.n	80359ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80359a4:	4b5e      	ldr	r3, [pc, #376]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80359a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80359a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80359ac:	687b      	ldr	r3, [r7, #4]
 80359ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80359b2:	495b      	ldr	r1, [pc, #364]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80359b4:	4313      	orrs	r3, r2
 80359b6:	658b      	str	r3, [r1, #88]	; 0x58
 80359b8:	e001      	b.n	80359be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80359ba:	7dfb      	ldrb	r3, [r7, #23]
 80359bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80359be:	687b      	ldr	r3, [r7, #4]
 80359c0:	681b      	ldr	r3, [r3, #0]
 80359c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80359c6:	2b00      	cmp	r3, #0
 80359c8:	d033      	beq.n	8035a32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80359ca:	687b      	ldr	r3, [r7, #4]
 80359cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80359d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80359d4:	d01c      	beq.n	8035a10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80359d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80359da:	d816      	bhi.n	8035a0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80359dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80359e0:	d003      	beq.n	80359ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80359e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80359e6:	d007      	beq.n	80359f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80359e8:	e00f      	b.n	8035a0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80359ea:	4b4d      	ldr	r3, [pc, #308]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80359ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80359ee:	4a4c      	ldr	r2, [pc, #304]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80359f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80359f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80359f6:	e00c      	b.n	8035a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80359f8:	687b      	ldr	r3, [r7, #4]
 80359fa:	3324      	adds	r3, #36	; 0x24
 80359fc:	2101      	movs	r1, #1
 80359fe:	4618      	mov	r0, r3
 8035a00:	f000 fc6e 	bl	80362e0 <RCCEx_PLL3_Config>
 8035a04:	4603      	mov	r3, r0
 8035a06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8035a08:	e003      	b.n	8035a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035a0a:	2301      	movs	r3, #1
 8035a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8035a0e:	e000      	b.n	8035a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8035a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035a12:	7dfb      	ldrb	r3, [r7, #23]
 8035a14:	2b00      	cmp	r3, #0
 8035a16:	d10a      	bne.n	8035a2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8035a18:	4b41      	ldr	r3, [pc, #260]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8035a20:	687b      	ldr	r3, [r7, #4]
 8035a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035a26:	493e      	ldr	r1, [pc, #248]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035a28:	4313      	orrs	r3, r2
 8035a2a:	654b      	str	r3, [r1, #84]	; 0x54
 8035a2c:	e001      	b.n	8035a32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035a2e:	7dfb      	ldrb	r3, [r7, #23]
 8035a30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8035a32:	687b      	ldr	r3, [r7, #4]
 8035a34:	681b      	ldr	r3, [r3, #0]
 8035a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8035a3a:	2b00      	cmp	r3, #0
 8035a3c:	d029      	beq.n	8035a92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8035a3e:	687b      	ldr	r3, [r7, #4]
 8035a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8035a42:	2b00      	cmp	r3, #0
 8035a44:	d003      	beq.n	8035a4e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8035a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8035a4a:	d007      	beq.n	8035a5c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8035a4c:	e00f      	b.n	8035a6e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035a4e:	4b34      	ldr	r3, [pc, #208]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035a52:	4a33      	ldr	r2, [pc, #204]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8035a5a:	e00b      	b.n	8035a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8035a5c:	687b      	ldr	r3, [r7, #4]
 8035a5e:	3304      	adds	r3, #4
 8035a60:	2102      	movs	r1, #2
 8035a62:	4618      	mov	r0, r3
 8035a64:	f000 fb8a 	bl	803617c <RCCEx_PLL2_Config>
 8035a68:	4603      	mov	r3, r0
 8035a6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8035a6c:	e002      	b.n	8035a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8035a6e:	2301      	movs	r3, #1
 8035a70:	75fb      	strb	r3, [r7, #23]
      break;
 8035a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035a74:	7dfb      	ldrb	r3, [r7, #23]
 8035a76:	2b00      	cmp	r3, #0
 8035a78:	d109      	bne.n	8035a8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8035a7a:	4b29      	ldr	r3, [pc, #164]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8035a7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8035a82:	687b      	ldr	r3, [r7, #4]
 8035a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8035a86:	4926      	ldr	r1, [pc, #152]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035a88:	4313      	orrs	r3, r2
 8035a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8035a8c:	e001      	b.n	8035a92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035a8e:	7dfb      	ldrb	r3, [r7, #23]
 8035a90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8035a92:	687b      	ldr	r3, [r7, #4]
 8035a94:	681b      	ldr	r3, [r3, #0]
 8035a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8035a9a:	2b00      	cmp	r3, #0
 8035a9c:	d00a      	beq.n	8035ab4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8035a9e:	687b      	ldr	r3, [r7, #4]
 8035aa0:	3324      	adds	r3, #36	; 0x24
 8035aa2:	2102      	movs	r1, #2
 8035aa4:	4618      	mov	r0, r3
 8035aa6:	f000 fc1b 	bl	80362e0 <RCCEx_PLL3_Config>
 8035aaa:	4603      	mov	r3, r0
 8035aac:	2b00      	cmp	r3, #0
 8035aae:	d001      	beq.n	8035ab4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8035ab0:	2301      	movs	r3, #1
 8035ab2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8035ab4:	687b      	ldr	r3, [r7, #4]
 8035ab6:	681b      	ldr	r3, [r3, #0]
 8035ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8035abc:	2b00      	cmp	r3, #0
 8035abe:	d033      	beq.n	8035b28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8035ac0:	687b      	ldr	r3, [r7, #4]
 8035ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8035ac8:	d017      	beq.n	8035afa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8035aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8035ace:	d811      	bhi.n	8035af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8035ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035ad4:	d013      	beq.n	8035afe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8035ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035ada:	d80b      	bhi.n	8035af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8035adc:	2b00      	cmp	r3, #0
 8035ade:	d010      	beq.n	8035b02 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8035ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035ae4:	d106      	bne.n	8035af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035ae6:	4b0e      	ldr	r3, [pc, #56]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035aea:	4a0d      	ldr	r2, [pc, #52]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8035af2:	e007      	b.n	8035b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035af4:	2301      	movs	r3, #1
 8035af6:	75fb      	strb	r3, [r7, #23]
      break;
 8035af8:	e004      	b.n	8035b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8035afa:	bf00      	nop
 8035afc:	e002      	b.n	8035b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8035afe:	bf00      	nop
 8035b00:	e000      	b.n	8035b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8035b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035b04:	7dfb      	ldrb	r3, [r7, #23]
 8035b06:	2b00      	cmp	r3, #0
 8035b08:	d10c      	bne.n	8035b24 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8035b0a:	4b05      	ldr	r3, [pc, #20]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8035b12:	687b      	ldr	r3, [r7, #4]
 8035b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035b16:	4902      	ldr	r1, [pc, #8]	; (8035b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035b18:	4313      	orrs	r3, r2
 8035b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8035b1c:	e004      	b.n	8035b28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8035b1e:	bf00      	nop
 8035b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035b24:	7dfb      	ldrb	r3, [r7, #23]
 8035b26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8035b28:	687b      	ldr	r3, [r7, #4]
 8035b2a:	681b      	ldr	r3, [r3, #0]
 8035b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8035b30:	2b00      	cmp	r3, #0
 8035b32:	d008      	beq.n	8035b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8035b34:	4b31      	ldr	r3, [pc, #196]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8035b3c:	687b      	ldr	r3, [r7, #4]
 8035b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035b40:	492e      	ldr	r1, [pc, #184]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b42:	4313      	orrs	r3, r2
 8035b44:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8035b46:	687b      	ldr	r3, [r7, #4]
 8035b48:	681b      	ldr	r3, [r3, #0]
 8035b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8035b4e:	2b00      	cmp	r3, #0
 8035b50:	d009      	beq.n	8035b66 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8035b52:	4b2a      	ldr	r3, [pc, #168]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b54:	691b      	ldr	r3, [r3, #16]
 8035b56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8035b5a:	687b      	ldr	r3, [r7, #4]
 8035b5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8035b60:	4926      	ldr	r1, [pc, #152]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b62:	4313      	orrs	r3, r2
 8035b64:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8035b66:	687b      	ldr	r3, [r7, #4]
 8035b68:	681b      	ldr	r3, [r3, #0]
 8035b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8035b6e:	2b00      	cmp	r3, #0
 8035b70:	d008      	beq.n	8035b84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8035b72:	4b22      	ldr	r3, [pc, #136]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035b76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8035b7a:	687b      	ldr	r3, [r7, #4]
 8035b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8035b7e:	491f      	ldr	r1, [pc, #124]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b80:	4313      	orrs	r3, r2
 8035b82:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8035b84:	687b      	ldr	r3, [r7, #4]
 8035b86:	681b      	ldr	r3, [r3, #0]
 8035b88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8035b8c:	2b00      	cmp	r3, #0
 8035b8e:	d00d      	beq.n	8035bac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8035b90:	4b1a      	ldr	r3, [pc, #104]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b92:	691b      	ldr	r3, [r3, #16]
 8035b94:	4a19      	ldr	r2, [pc, #100]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8035b9a:	6113      	str	r3, [r2, #16]
 8035b9c:	4b17      	ldr	r3, [pc, #92]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035b9e:	691a      	ldr	r2, [r3, #16]
 8035ba0:	687b      	ldr	r3, [r7, #4]
 8035ba2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8035ba6:	4915      	ldr	r1, [pc, #84]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035ba8:	4313      	orrs	r3, r2
 8035baa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8035bac:	687b      	ldr	r3, [r7, #4]
 8035bae:	681b      	ldr	r3, [r3, #0]
 8035bb0:	2b00      	cmp	r3, #0
 8035bb2:	da08      	bge.n	8035bc6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8035bb4:	4b11      	ldr	r3, [pc, #68]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8035bb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8035bbc:	687b      	ldr	r3, [r7, #4]
 8035bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035bc0:	490e      	ldr	r1, [pc, #56]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035bc2:	4313      	orrs	r3, r2
 8035bc4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8035bc6:	687b      	ldr	r3, [r7, #4]
 8035bc8:	681b      	ldr	r3, [r3, #0]
 8035bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8035bce:	2b00      	cmp	r3, #0
 8035bd0:	d009      	beq.n	8035be6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8035bd2:	4b0a      	ldr	r3, [pc, #40]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8035bda:	687b      	ldr	r3, [r7, #4]
 8035bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8035be0:	4906      	ldr	r1, [pc, #24]	; (8035bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035be2:	4313      	orrs	r3, r2
 8035be4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8035be6:	7dbb      	ldrb	r3, [r7, #22]
 8035be8:	2b00      	cmp	r3, #0
 8035bea:	d101      	bne.n	8035bf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8035bec:	2300      	movs	r3, #0
 8035bee:	e000      	b.n	8035bf2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8035bf0:	2301      	movs	r3, #1
}
 8035bf2:	4618      	mov	r0, r3
 8035bf4:	3718      	adds	r7, #24
 8035bf6:	46bd      	mov	sp, r7
 8035bf8:	bd80      	pop	{r7, pc}
 8035bfa:	bf00      	nop
 8035bfc:	58024400 	.word	0x58024400

08035c00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8035c00:	b580      	push	{r7, lr}
 8035c02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8035c04:	f7ff f85a 	bl	8034cbc <HAL_RCC_GetHCLKFreq>
 8035c08:	4602      	mov	r2, r0
 8035c0a:	4b06      	ldr	r3, [pc, #24]	; (8035c24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8035c0c:	6a1b      	ldr	r3, [r3, #32]
 8035c0e:	091b      	lsrs	r3, r3, #4
 8035c10:	f003 0307 	and.w	r3, r3, #7
 8035c14:	4904      	ldr	r1, [pc, #16]	; (8035c28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8035c16:	5ccb      	ldrb	r3, [r1, r3]
 8035c18:	f003 031f 	and.w	r3, r3, #31
 8035c1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8035c20:	4618      	mov	r0, r3
 8035c22:	bd80      	pop	{r7, pc}
 8035c24:	58024400 	.word	0x58024400
 8035c28:	0805b270 	.word	0x0805b270

08035c2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8035c2c:	b480      	push	{r7}
 8035c2e:	b089      	sub	sp, #36	; 0x24
 8035c30:	af00      	add	r7, sp, #0
 8035c32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8035c34:	4ba1      	ldr	r3, [pc, #644]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035c38:	f003 0303 	and.w	r3, r3, #3
 8035c3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8035c3e:	4b9f      	ldr	r3, [pc, #636]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035c42:	0b1b      	lsrs	r3, r3, #12
 8035c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8035c48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8035c4a:	4b9c      	ldr	r3, [pc, #624]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035c4e:	091b      	lsrs	r3, r3, #4
 8035c50:	f003 0301 	and.w	r3, r3, #1
 8035c54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8035c56:	4b99      	ldr	r3, [pc, #612]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8035c5a:	08db      	lsrs	r3, r3, #3
 8035c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8035c60:	693a      	ldr	r2, [r7, #16]
 8035c62:	fb02 f303 	mul.w	r3, r2, r3
 8035c66:	ee07 3a90 	vmov	s15, r3
 8035c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035c6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8035c72:	697b      	ldr	r3, [r7, #20]
 8035c74:	2b00      	cmp	r3, #0
 8035c76:	f000 8111 	beq.w	8035e9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8035c7a:	69bb      	ldr	r3, [r7, #24]
 8035c7c:	2b02      	cmp	r3, #2
 8035c7e:	f000 8083 	beq.w	8035d88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8035c82:	69bb      	ldr	r3, [r7, #24]
 8035c84:	2b02      	cmp	r3, #2
 8035c86:	f200 80a1 	bhi.w	8035dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8035c8a:	69bb      	ldr	r3, [r7, #24]
 8035c8c:	2b00      	cmp	r3, #0
 8035c8e:	d003      	beq.n	8035c98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8035c90:	69bb      	ldr	r3, [r7, #24]
 8035c92:	2b01      	cmp	r3, #1
 8035c94:	d056      	beq.n	8035d44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8035c96:	e099      	b.n	8035dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8035c98:	4b88      	ldr	r3, [pc, #544]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035c9a:	681b      	ldr	r3, [r3, #0]
 8035c9c:	f003 0320 	and.w	r3, r3, #32
 8035ca0:	2b00      	cmp	r3, #0
 8035ca2:	d02d      	beq.n	8035d00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8035ca4:	4b85      	ldr	r3, [pc, #532]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035ca6:	681b      	ldr	r3, [r3, #0]
 8035ca8:	08db      	lsrs	r3, r3, #3
 8035caa:	f003 0303 	and.w	r3, r3, #3
 8035cae:	4a84      	ldr	r2, [pc, #528]	; (8035ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8035cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8035cb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8035cb6:	68bb      	ldr	r3, [r7, #8]
 8035cb8:	ee07 3a90 	vmov	s15, r3
 8035cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035cc0:	697b      	ldr	r3, [r7, #20]
 8035cc2:	ee07 3a90 	vmov	s15, r3
 8035cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035cce:	4b7b      	ldr	r3, [pc, #492]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035cd6:	ee07 3a90 	vmov	s15, r3
 8035cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8035ce2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8035ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8035ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035cfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8035cfe:	e087      	b.n	8035e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8035d00:	697b      	ldr	r3, [r7, #20]
 8035d02:	ee07 3a90 	vmov	s15, r3
 8035d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035d0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8035ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8035d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035d12:	4b6a      	ldr	r3, [pc, #424]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035d1a:	ee07 3a90 	vmov	s15, r3
 8035d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8035d26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8035ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8035d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8035d42:	e065      	b.n	8035e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8035d44:	697b      	ldr	r3, [r7, #20]
 8035d46:	ee07 3a90 	vmov	s15, r3
 8035d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035d4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8035ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8035d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035d56:	4b59      	ldr	r3, [pc, #356]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035d5e:	ee07 3a90 	vmov	s15, r3
 8035d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8035d6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8035ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8035d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035d82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8035d86:	e043      	b.n	8035e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8035d88:	697b      	ldr	r3, [r7, #20]
 8035d8a:	ee07 3a90 	vmov	s15, r3
 8035d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035d92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8035ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8035d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035d9a:	4b48      	ldr	r3, [pc, #288]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035da2:	ee07 3a90 	vmov	s15, r3
 8035da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8035dae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8035ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8035db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8035dca:	e021      	b.n	8035e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8035dcc:	697b      	ldr	r3, [r7, #20]
 8035dce:	ee07 3a90 	vmov	s15, r3
 8035dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035dd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8035ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8035dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035dde:	4b37      	ldr	r3, [pc, #220]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035de6:	ee07 3a90 	vmov	s15, r3
 8035dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8035df2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8035ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8035df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8035e0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8035e10:	4b2a      	ldr	r3, [pc, #168]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035e14:	0a5b      	lsrs	r3, r3, #9
 8035e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035e1a:	ee07 3a90 	vmov	s15, r3
 8035e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8035e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8035e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8035e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8035e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8035e36:	ee17 2a90 	vmov	r2, s15
 8035e3a:	687b      	ldr	r3, [r7, #4]
 8035e3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8035e3e:	4b1f      	ldr	r3, [pc, #124]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035e42:	0c1b      	lsrs	r3, r3, #16
 8035e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035e48:	ee07 3a90 	vmov	s15, r3
 8035e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035e50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8035e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8035e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8035e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8035e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8035e64:	ee17 2a90 	vmov	r2, s15
 8035e68:	687b      	ldr	r3, [r7, #4]
 8035e6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8035e6c:	4b13      	ldr	r3, [pc, #76]	; (8035ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8035e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035e70:	0e1b      	lsrs	r3, r3, #24
 8035e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035e76:	ee07 3a90 	vmov	s15, r3
 8035e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8035e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8035e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8035e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8035e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8035e92:	ee17 2a90 	vmov	r2, s15
 8035e96:	687b      	ldr	r3, [r7, #4]
 8035e98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8035e9a:	e008      	b.n	8035eae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8035e9c:	687b      	ldr	r3, [r7, #4]
 8035e9e:	2200      	movs	r2, #0
 8035ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8035ea2:	687b      	ldr	r3, [r7, #4]
 8035ea4:	2200      	movs	r2, #0
 8035ea6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8035ea8:	687b      	ldr	r3, [r7, #4]
 8035eaa:	2200      	movs	r2, #0
 8035eac:	609a      	str	r2, [r3, #8]
}
 8035eae:	bf00      	nop
 8035eb0:	3724      	adds	r7, #36	; 0x24
 8035eb2:	46bd      	mov	sp, r7
 8035eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035eb8:	4770      	bx	lr
 8035eba:	bf00      	nop
 8035ebc:	58024400 	.word	0x58024400
 8035ec0:	03d09000 	.word	0x03d09000
 8035ec4:	46000000 	.word	0x46000000
 8035ec8:	4c742400 	.word	0x4c742400
 8035ecc:	4a742400 	.word	0x4a742400
 8035ed0:	4bbebc20 	.word	0x4bbebc20

08035ed4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8035ed4:	b480      	push	{r7}
 8035ed6:	b089      	sub	sp, #36	; 0x24
 8035ed8:	af00      	add	r7, sp, #0
 8035eda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8035edc:	4ba1      	ldr	r3, [pc, #644]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035ee0:	f003 0303 	and.w	r3, r3, #3
 8035ee4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8035ee6:	4b9f      	ldr	r3, [pc, #636]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035eea:	0d1b      	lsrs	r3, r3, #20
 8035eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8035ef0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8035ef2:	4b9c      	ldr	r3, [pc, #624]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035ef6:	0a1b      	lsrs	r3, r3, #8
 8035ef8:	f003 0301 	and.w	r3, r3, #1
 8035efc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8035efe:	4b99      	ldr	r3, [pc, #612]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8035f02:	08db      	lsrs	r3, r3, #3
 8035f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8035f08:	693a      	ldr	r2, [r7, #16]
 8035f0a:	fb02 f303 	mul.w	r3, r2, r3
 8035f0e:	ee07 3a90 	vmov	s15, r3
 8035f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8035f1a:	697b      	ldr	r3, [r7, #20]
 8035f1c:	2b00      	cmp	r3, #0
 8035f1e:	f000 8111 	beq.w	8036144 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8035f22:	69bb      	ldr	r3, [r7, #24]
 8035f24:	2b02      	cmp	r3, #2
 8035f26:	f000 8083 	beq.w	8036030 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8035f2a:	69bb      	ldr	r3, [r7, #24]
 8035f2c:	2b02      	cmp	r3, #2
 8035f2e:	f200 80a1 	bhi.w	8036074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8035f32:	69bb      	ldr	r3, [r7, #24]
 8035f34:	2b00      	cmp	r3, #0
 8035f36:	d003      	beq.n	8035f40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8035f38:	69bb      	ldr	r3, [r7, #24]
 8035f3a:	2b01      	cmp	r3, #1
 8035f3c:	d056      	beq.n	8035fec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8035f3e:	e099      	b.n	8036074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8035f40:	4b88      	ldr	r3, [pc, #544]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035f42:	681b      	ldr	r3, [r3, #0]
 8035f44:	f003 0320 	and.w	r3, r3, #32
 8035f48:	2b00      	cmp	r3, #0
 8035f4a:	d02d      	beq.n	8035fa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8035f4c:	4b85      	ldr	r3, [pc, #532]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035f4e:	681b      	ldr	r3, [r3, #0]
 8035f50:	08db      	lsrs	r3, r3, #3
 8035f52:	f003 0303 	and.w	r3, r3, #3
 8035f56:	4a84      	ldr	r2, [pc, #528]	; (8036168 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8035f58:	fa22 f303 	lsr.w	r3, r2, r3
 8035f5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8035f5e:	68bb      	ldr	r3, [r7, #8]
 8035f60:	ee07 3a90 	vmov	s15, r3
 8035f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035f68:	697b      	ldr	r3, [r7, #20]
 8035f6a:	ee07 3a90 	vmov	s15, r3
 8035f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035f76:	4b7b      	ldr	r3, [pc, #492]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035f7e:	ee07 3a90 	vmov	s15, r3
 8035f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8035f8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 803616c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8035f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8035fa6:	e087      	b.n	80360b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8035fa8:	697b      	ldr	r3, [r7, #20]
 8035faa:	ee07 3a90 	vmov	s15, r3
 8035fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035fb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8036170 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8035fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035fba:	4b6a      	ldr	r3, [pc, #424]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8035fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035fc2:	ee07 3a90 	vmov	s15, r3
 8035fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8035fce:	eddf 5a67 	vldr	s11, [pc, #412]	; 803616c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8035fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8035fea:	e065      	b.n	80360b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8035fec:	697b      	ldr	r3, [r7, #20]
 8035fee:	ee07 3a90 	vmov	s15, r3
 8035ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035ff6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8036174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8035ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035ffe:	4b59      	ldr	r3, [pc, #356]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036006:	ee07 3a90 	vmov	s15, r3
 803600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803600e:	ed97 6a03 	vldr	s12, [r7, #12]
 8036012:	eddf 5a56 	vldr	s11, [pc, #344]	; 803616c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8036016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803601e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8036022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8036026:	ee67 7a27 	vmul.f32	s15, s14, s15
 803602a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803602e:	e043      	b.n	80360b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8036030:	697b      	ldr	r3, [r7, #20]
 8036032:	ee07 3a90 	vmov	s15, r3
 8036036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803603a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8036178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 803603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036042:	4b48      	ldr	r3, [pc, #288]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803604a:	ee07 3a90 	vmov	s15, r3
 803604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036052:	ed97 6a03 	vldr	s12, [r7, #12]
 8036056:	eddf 5a45 	vldr	s11, [pc, #276]	; 803616c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8036062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8036066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803606e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8036072:	e021      	b.n	80360b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8036074:	697b      	ldr	r3, [r7, #20]
 8036076:	ee07 3a90 	vmov	s15, r3
 803607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803607e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8036174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8036082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036086:	4b37      	ldr	r3, [pc, #220]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803608e:	ee07 3a90 	vmov	s15, r3
 8036092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036096:	ed97 6a03 	vldr	s12, [r7, #12]
 803609a:	eddf 5a34 	vldr	s11, [pc, #208]	; 803616c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803609e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80360a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80360a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80360aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80360ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80360b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80360b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80360b8:	4b2a      	ldr	r3, [pc, #168]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80360ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80360bc:	0a5b      	lsrs	r3, r3, #9
 80360be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80360c2:	ee07 3a90 	vmov	s15, r3
 80360c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80360ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80360ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80360d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80360d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80360da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80360de:	ee17 2a90 	vmov	r2, s15
 80360e2:	687b      	ldr	r3, [r7, #4]
 80360e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80360e6:	4b1f      	ldr	r3, [pc, #124]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80360e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80360ea:	0c1b      	lsrs	r3, r3, #16
 80360ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80360f0:	ee07 3a90 	vmov	s15, r3
 80360f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80360f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80360fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8036100:	edd7 6a07 	vldr	s13, [r7, #28]
 8036104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8036108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 803610c:	ee17 2a90 	vmov	r2, s15
 8036110:	687b      	ldr	r3, [r7, #4]
 8036112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8036114:	4b13      	ldr	r3, [pc, #76]	; (8036164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036118:	0e1b      	lsrs	r3, r3, #24
 803611a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803611e:	ee07 3a90 	vmov	s15, r3
 8036122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 803612a:	ee37 7a87 	vadd.f32	s14, s15, s14
 803612e:	edd7 6a07 	vldr	s13, [r7, #28]
 8036132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8036136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 803613a:	ee17 2a90 	vmov	r2, s15
 803613e:	687b      	ldr	r3, [r7, #4]
 8036140:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8036142:	e008      	b.n	8036156 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8036144:	687b      	ldr	r3, [r7, #4]
 8036146:	2200      	movs	r2, #0
 8036148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 803614a:	687b      	ldr	r3, [r7, #4]
 803614c:	2200      	movs	r2, #0
 803614e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8036150:	687b      	ldr	r3, [r7, #4]
 8036152:	2200      	movs	r2, #0
 8036154:	609a      	str	r2, [r3, #8]
}
 8036156:	bf00      	nop
 8036158:	3724      	adds	r7, #36	; 0x24
 803615a:	46bd      	mov	sp, r7
 803615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036160:	4770      	bx	lr
 8036162:	bf00      	nop
 8036164:	58024400 	.word	0x58024400
 8036168:	03d09000 	.word	0x03d09000
 803616c:	46000000 	.word	0x46000000
 8036170:	4c742400 	.word	0x4c742400
 8036174:	4a742400 	.word	0x4a742400
 8036178:	4bbebc20 	.word	0x4bbebc20

0803617c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 803617c:	b580      	push	{r7, lr}
 803617e:	b084      	sub	sp, #16
 8036180:	af00      	add	r7, sp, #0
 8036182:	6078      	str	r0, [r7, #4]
 8036184:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8036186:	2300      	movs	r3, #0
 8036188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 803618a:	4b53      	ldr	r3, [pc, #332]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 803618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803618e:	f003 0303 	and.w	r3, r3, #3
 8036192:	2b03      	cmp	r3, #3
 8036194:	d101      	bne.n	803619a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8036196:	2301      	movs	r3, #1
 8036198:	e099      	b.n	80362ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 803619a:	4b4f      	ldr	r3, [pc, #316]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 803619c:	681b      	ldr	r3, [r3, #0]
 803619e:	4a4e      	ldr	r2, [pc, #312]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 80361a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80361a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80361a6:	f7f7 fe43 	bl	802de30 <HAL_GetTick>
 80361aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80361ac:	e008      	b.n	80361c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80361ae:	f7f7 fe3f 	bl	802de30 <HAL_GetTick>
 80361b2:	4602      	mov	r2, r0
 80361b4:	68bb      	ldr	r3, [r7, #8]
 80361b6:	1ad3      	subs	r3, r2, r3
 80361b8:	2b02      	cmp	r3, #2
 80361ba:	d901      	bls.n	80361c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80361bc:	2303      	movs	r3, #3
 80361be:	e086      	b.n	80362ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80361c0:	4b45      	ldr	r3, [pc, #276]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 80361c2:	681b      	ldr	r3, [r3, #0]
 80361c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80361c8:	2b00      	cmp	r3, #0
 80361ca:	d1f0      	bne.n	80361ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80361cc:	4b42      	ldr	r3, [pc, #264]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 80361ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80361d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80361d4:	687b      	ldr	r3, [r7, #4]
 80361d6:	681b      	ldr	r3, [r3, #0]
 80361d8:	031b      	lsls	r3, r3, #12
 80361da:	493f      	ldr	r1, [pc, #252]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 80361dc:	4313      	orrs	r3, r2
 80361de:	628b      	str	r3, [r1, #40]	; 0x28
 80361e0:	687b      	ldr	r3, [r7, #4]
 80361e2:	685b      	ldr	r3, [r3, #4]
 80361e4:	3b01      	subs	r3, #1
 80361e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80361ea:	687b      	ldr	r3, [r7, #4]
 80361ec:	689b      	ldr	r3, [r3, #8]
 80361ee:	3b01      	subs	r3, #1
 80361f0:	025b      	lsls	r3, r3, #9
 80361f2:	b29b      	uxth	r3, r3
 80361f4:	431a      	orrs	r2, r3
 80361f6:	687b      	ldr	r3, [r7, #4]
 80361f8:	68db      	ldr	r3, [r3, #12]
 80361fa:	3b01      	subs	r3, #1
 80361fc:	041b      	lsls	r3, r3, #16
 80361fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8036202:	431a      	orrs	r2, r3
 8036204:	687b      	ldr	r3, [r7, #4]
 8036206:	691b      	ldr	r3, [r3, #16]
 8036208:	3b01      	subs	r3, #1
 803620a:	061b      	lsls	r3, r3, #24
 803620c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8036210:	4931      	ldr	r1, [pc, #196]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036212:	4313      	orrs	r3, r2
 8036214:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8036216:	4b30      	ldr	r3, [pc, #192]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803621a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 803621e:	687b      	ldr	r3, [r7, #4]
 8036220:	695b      	ldr	r3, [r3, #20]
 8036222:	492d      	ldr	r1, [pc, #180]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036224:	4313      	orrs	r3, r2
 8036226:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8036228:	4b2b      	ldr	r3, [pc, #172]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 803622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803622c:	f023 0220 	bic.w	r2, r3, #32
 8036230:	687b      	ldr	r3, [r7, #4]
 8036232:	699b      	ldr	r3, [r3, #24]
 8036234:	4928      	ldr	r1, [pc, #160]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036236:	4313      	orrs	r3, r2
 8036238:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 803623a:	4b27      	ldr	r3, [pc, #156]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 803623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803623e:	4a26      	ldr	r2, [pc, #152]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036240:	f023 0310 	bic.w	r3, r3, #16
 8036244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8036246:	4b24      	ldr	r3, [pc, #144]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803624a:	4b24      	ldr	r3, [pc, #144]	; (80362dc <RCCEx_PLL2_Config+0x160>)
 803624c:	4013      	ands	r3, r2
 803624e:	687a      	ldr	r2, [r7, #4]
 8036250:	69d2      	ldr	r2, [r2, #28]
 8036252:	00d2      	lsls	r2, r2, #3
 8036254:	4920      	ldr	r1, [pc, #128]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036256:	4313      	orrs	r3, r2
 8036258:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 803625a:	4b1f      	ldr	r3, [pc, #124]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 803625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803625e:	4a1e      	ldr	r2, [pc, #120]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036260:	f043 0310 	orr.w	r3, r3, #16
 8036264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8036266:	683b      	ldr	r3, [r7, #0]
 8036268:	2b00      	cmp	r3, #0
 803626a:	d106      	bne.n	803627a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 803626c:	4b1a      	ldr	r3, [pc, #104]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 803626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036270:	4a19      	ldr	r2, [pc, #100]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8036276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8036278:	e00f      	b.n	803629a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 803627a:	683b      	ldr	r3, [r7, #0]
 803627c:	2b01      	cmp	r3, #1
 803627e:	d106      	bne.n	803628e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8036280:	4b15      	ldr	r3, [pc, #84]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036284:	4a14      	ldr	r2, [pc, #80]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803628a:	62d3      	str	r3, [r2, #44]	; 0x2c
 803628c:	e005      	b.n	803629a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 803628e:	4b12      	ldr	r3, [pc, #72]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036292:	4a11      	ldr	r2, [pc, #68]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 8036294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8036298:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 803629a:	4b0f      	ldr	r3, [pc, #60]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 803629c:	681b      	ldr	r3, [r3, #0]
 803629e:	4a0e      	ldr	r2, [pc, #56]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 80362a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80362a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80362a6:	f7f7 fdc3 	bl	802de30 <HAL_GetTick>
 80362aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80362ac:	e008      	b.n	80362c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80362ae:	f7f7 fdbf 	bl	802de30 <HAL_GetTick>
 80362b2:	4602      	mov	r2, r0
 80362b4:	68bb      	ldr	r3, [r7, #8]
 80362b6:	1ad3      	subs	r3, r2, r3
 80362b8:	2b02      	cmp	r3, #2
 80362ba:	d901      	bls.n	80362c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80362bc:	2303      	movs	r3, #3
 80362be:	e006      	b.n	80362ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80362c0:	4b05      	ldr	r3, [pc, #20]	; (80362d8 <RCCEx_PLL2_Config+0x15c>)
 80362c2:	681b      	ldr	r3, [r3, #0]
 80362c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80362c8:	2b00      	cmp	r3, #0
 80362ca:	d0f0      	beq.n	80362ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80362cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80362ce:	4618      	mov	r0, r3
 80362d0:	3710      	adds	r7, #16
 80362d2:	46bd      	mov	sp, r7
 80362d4:	bd80      	pop	{r7, pc}
 80362d6:	bf00      	nop
 80362d8:	58024400 	.word	0x58024400
 80362dc:	ffff0007 	.word	0xffff0007

080362e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80362e0:	b580      	push	{r7, lr}
 80362e2:	b084      	sub	sp, #16
 80362e4:	af00      	add	r7, sp, #0
 80362e6:	6078      	str	r0, [r7, #4]
 80362e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80362ea:	2300      	movs	r3, #0
 80362ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80362ee:	4b53      	ldr	r3, [pc, #332]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80362f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80362f2:	f003 0303 	and.w	r3, r3, #3
 80362f6:	2b03      	cmp	r3, #3
 80362f8:	d101      	bne.n	80362fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80362fa:	2301      	movs	r3, #1
 80362fc:	e099      	b.n	8036432 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80362fe:	4b4f      	ldr	r3, [pc, #316]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036300:	681b      	ldr	r3, [r3, #0]
 8036302:	4a4e      	ldr	r2, [pc, #312]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8036308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803630a:	f7f7 fd91 	bl	802de30 <HAL_GetTick>
 803630e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8036310:	e008      	b.n	8036324 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8036312:	f7f7 fd8d 	bl	802de30 <HAL_GetTick>
 8036316:	4602      	mov	r2, r0
 8036318:	68bb      	ldr	r3, [r7, #8]
 803631a:	1ad3      	subs	r3, r2, r3
 803631c:	2b02      	cmp	r3, #2
 803631e:	d901      	bls.n	8036324 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8036320:	2303      	movs	r3, #3
 8036322:	e086      	b.n	8036432 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8036324:	4b45      	ldr	r3, [pc, #276]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036326:	681b      	ldr	r3, [r3, #0]
 8036328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 803632c:	2b00      	cmp	r3, #0
 803632e:	d1f0      	bne.n	8036312 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8036330:	4b42      	ldr	r3, [pc, #264]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036334:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8036338:	687b      	ldr	r3, [r7, #4]
 803633a:	681b      	ldr	r3, [r3, #0]
 803633c:	051b      	lsls	r3, r3, #20
 803633e:	493f      	ldr	r1, [pc, #252]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036340:	4313      	orrs	r3, r2
 8036342:	628b      	str	r3, [r1, #40]	; 0x28
 8036344:	687b      	ldr	r3, [r7, #4]
 8036346:	685b      	ldr	r3, [r3, #4]
 8036348:	3b01      	subs	r3, #1
 803634a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803634e:	687b      	ldr	r3, [r7, #4]
 8036350:	689b      	ldr	r3, [r3, #8]
 8036352:	3b01      	subs	r3, #1
 8036354:	025b      	lsls	r3, r3, #9
 8036356:	b29b      	uxth	r3, r3
 8036358:	431a      	orrs	r2, r3
 803635a:	687b      	ldr	r3, [r7, #4]
 803635c:	68db      	ldr	r3, [r3, #12]
 803635e:	3b01      	subs	r3, #1
 8036360:	041b      	lsls	r3, r3, #16
 8036362:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8036366:	431a      	orrs	r2, r3
 8036368:	687b      	ldr	r3, [r7, #4]
 803636a:	691b      	ldr	r3, [r3, #16]
 803636c:	3b01      	subs	r3, #1
 803636e:	061b      	lsls	r3, r3, #24
 8036370:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8036374:	4931      	ldr	r1, [pc, #196]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036376:	4313      	orrs	r3, r2
 8036378:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 803637a:	4b30      	ldr	r3, [pc, #192]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 803637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803637e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8036382:	687b      	ldr	r3, [r7, #4]
 8036384:	695b      	ldr	r3, [r3, #20]
 8036386:	492d      	ldr	r1, [pc, #180]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036388:	4313      	orrs	r3, r2
 803638a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 803638c:	4b2b      	ldr	r3, [pc, #172]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 803638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036390:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8036394:	687b      	ldr	r3, [r7, #4]
 8036396:	699b      	ldr	r3, [r3, #24]
 8036398:	4928      	ldr	r1, [pc, #160]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 803639a:	4313      	orrs	r3, r2
 803639c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 803639e:	4b27      	ldr	r3, [pc, #156]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80363a2:	4a26      	ldr	r2, [pc, #152]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80363a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80363aa:	4b24      	ldr	r3, [pc, #144]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80363ae:	4b24      	ldr	r3, [pc, #144]	; (8036440 <RCCEx_PLL3_Config+0x160>)
 80363b0:	4013      	ands	r3, r2
 80363b2:	687a      	ldr	r2, [r7, #4]
 80363b4:	69d2      	ldr	r2, [r2, #28]
 80363b6:	00d2      	lsls	r2, r2, #3
 80363b8:	4920      	ldr	r1, [pc, #128]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363ba:	4313      	orrs	r3, r2
 80363bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80363be:	4b1f      	ldr	r3, [pc, #124]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80363c2:	4a1e      	ldr	r2, [pc, #120]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80363c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80363ca:	683b      	ldr	r3, [r7, #0]
 80363cc:	2b00      	cmp	r3, #0
 80363ce:	d106      	bne.n	80363de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80363d0:	4b1a      	ldr	r3, [pc, #104]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80363d4:	4a19      	ldr	r2, [pc, #100]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80363da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80363dc:	e00f      	b.n	80363fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80363de:	683b      	ldr	r3, [r7, #0]
 80363e0:	2b01      	cmp	r3, #1
 80363e2:	d106      	bne.n	80363f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80363e4:	4b15      	ldr	r3, [pc, #84]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80363e8:	4a14      	ldr	r2, [pc, #80]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80363ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80363f0:	e005      	b.n	80363fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80363f2:	4b12      	ldr	r3, [pc, #72]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80363f6:	4a11      	ldr	r2, [pc, #68]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 80363f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80363fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80363fe:	4b0f      	ldr	r3, [pc, #60]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036400:	681b      	ldr	r3, [r3, #0]
 8036402:	4a0e      	ldr	r2, [pc, #56]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8036408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803640a:	f7f7 fd11 	bl	802de30 <HAL_GetTick>
 803640e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8036410:	e008      	b.n	8036424 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8036412:	f7f7 fd0d 	bl	802de30 <HAL_GetTick>
 8036416:	4602      	mov	r2, r0
 8036418:	68bb      	ldr	r3, [r7, #8]
 803641a:	1ad3      	subs	r3, r2, r3
 803641c:	2b02      	cmp	r3, #2
 803641e:	d901      	bls.n	8036424 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8036420:	2303      	movs	r3, #3
 8036422:	e006      	b.n	8036432 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8036424:	4b05      	ldr	r3, [pc, #20]	; (803643c <RCCEx_PLL3_Config+0x15c>)
 8036426:	681b      	ldr	r3, [r3, #0]
 8036428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 803642c:	2b00      	cmp	r3, #0
 803642e:	d0f0      	beq.n	8036412 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8036430:	7bfb      	ldrb	r3, [r7, #15]
}
 8036432:	4618      	mov	r0, r3
 8036434:	3710      	adds	r7, #16
 8036436:	46bd      	mov	sp, r7
 8036438:	bd80      	pop	{r7, pc}
 803643a:	bf00      	nop
 803643c:	58024400 	.word	0x58024400
 8036440:	ffff0007 	.word	0xffff0007

08036444 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8036444:	b580      	push	{r7, lr}
 8036446:	b084      	sub	sp, #16
 8036448:	af00      	add	r7, sp, #0
 803644a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 803644c:	687b      	ldr	r3, [r7, #4]
 803644e:	2b00      	cmp	r3, #0
 8036450:	d101      	bne.n	8036456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8036452:	2301      	movs	r3, #1
 8036454:	e0f1      	b.n	803663a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8036456:	687b      	ldr	r3, [r7, #4]
 8036458:	2200      	movs	r2, #0
 803645a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 803645c:	687b      	ldr	r3, [r7, #4]
 803645e:	681b      	ldr	r3, [r3, #0]
 8036460:	4a78      	ldr	r2, [pc, #480]	; (8036644 <HAL_SPI_Init+0x200>)
 8036462:	4293      	cmp	r3, r2
 8036464:	d00f      	beq.n	8036486 <HAL_SPI_Init+0x42>
 8036466:	687b      	ldr	r3, [r7, #4]
 8036468:	681b      	ldr	r3, [r3, #0]
 803646a:	4a77      	ldr	r2, [pc, #476]	; (8036648 <HAL_SPI_Init+0x204>)
 803646c:	4293      	cmp	r3, r2
 803646e:	d00a      	beq.n	8036486 <HAL_SPI_Init+0x42>
 8036470:	687b      	ldr	r3, [r7, #4]
 8036472:	681b      	ldr	r3, [r3, #0]
 8036474:	4a75      	ldr	r2, [pc, #468]	; (803664c <HAL_SPI_Init+0x208>)
 8036476:	4293      	cmp	r3, r2
 8036478:	d005      	beq.n	8036486 <HAL_SPI_Init+0x42>
 803647a:	687b      	ldr	r3, [r7, #4]
 803647c:	68db      	ldr	r3, [r3, #12]
 803647e:	2b0f      	cmp	r3, #15
 8036480:	d901      	bls.n	8036486 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8036482:	2301      	movs	r3, #1
 8036484:	e0d9      	b.n	803663a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8036486:	6878      	ldr	r0, [r7, #4]
 8036488:	f001 f8ee 	bl	8037668 <SPI_GetPacketSize>
 803648c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803648e:	687b      	ldr	r3, [r7, #4]
 8036490:	681b      	ldr	r3, [r3, #0]
 8036492:	4a6c      	ldr	r2, [pc, #432]	; (8036644 <HAL_SPI_Init+0x200>)
 8036494:	4293      	cmp	r3, r2
 8036496:	d00c      	beq.n	80364b2 <HAL_SPI_Init+0x6e>
 8036498:	687b      	ldr	r3, [r7, #4]
 803649a:	681b      	ldr	r3, [r3, #0]
 803649c:	4a6a      	ldr	r2, [pc, #424]	; (8036648 <HAL_SPI_Init+0x204>)
 803649e:	4293      	cmp	r3, r2
 80364a0:	d007      	beq.n	80364b2 <HAL_SPI_Init+0x6e>
 80364a2:	687b      	ldr	r3, [r7, #4]
 80364a4:	681b      	ldr	r3, [r3, #0]
 80364a6:	4a69      	ldr	r2, [pc, #420]	; (803664c <HAL_SPI_Init+0x208>)
 80364a8:	4293      	cmp	r3, r2
 80364aa:	d002      	beq.n	80364b2 <HAL_SPI_Init+0x6e>
 80364ac:	68fb      	ldr	r3, [r7, #12]
 80364ae:	2b08      	cmp	r3, #8
 80364b0:	d811      	bhi.n	80364d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80364b2:	687b      	ldr	r3, [r7, #4]
 80364b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80364b6:	4a63      	ldr	r2, [pc, #396]	; (8036644 <HAL_SPI_Init+0x200>)
 80364b8:	4293      	cmp	r3, r2
 80364ba:	d009      	beq.n	80364d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80364bc:	687b      	ldr	r3, [r7, #4]
 80364be:	681b      	ldr	r3, [r3, #0]
 80364c0:	4a61      	ldr	r2, [pc, #388]	; (8036648 <HAL_SPI_Init+0x204>)
 80364c2:	4293      	cmp	r3, r2
 80364c4:	d004      	beq.n	80364d0 <HAL_SPI_Init+0x8c>
 80364c6:	687b      	ldr	r3, [r7, #4]
 80364c8:	681b      	ldr	r3, [r3, #0]
 80364ca:	4a60      	ldr	r2, [pc, #384]	; (803664c <HAL_SPI_Init+0x208>)
 80364cc:	4293      	cmp	r3, r2
 80364ce:	d104      	bne.n	80364da <HAL_SPI_Init+0x96>
 80364d0:	68fb      	ldr	r3, [r7, #12]
 80364d2:	2b10      	cmp	r3, #16
 80364d4:	d901      	bls.n	80364da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80364d6:	2301      	movs	r3, #1
 80364d8:	e0af      	b.n	803663a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80364da:	687b      	ldr	r3, [r7, #4]
 80364dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80364e0:	b2db      	uxtb	r3, r3
 80364e2:	2b00      	cmp	r3, #0
 80364e4:	d106      	bne.n	80364f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80364e6:	687b      	ldr	r3, [r7, #4]
 80364e8:	2200      	movs	r2, #0
 80364ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80364ee:	6878      	ldr	r0, [r7, #4]
 80364f0:	f7f6 fc46 	bl	802cd80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80364f4:	687b      	ldr	r3, [r7, #4]
 80364f6:	2202      	movs	r2, #2
 80364f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80364fc:	687b      	ldr	r3, [r7, #4]
 80364fe:	681b      	ldr	r3, [r3, #0]
 8036500:	681a      	ldr	r2, [r3, #0]
 8036502:	687b      	ldr	r3, [r7, #4]
 8036504:	681b      	ldr	r3, [r3, #0]
 8036506:	f022 0201 	bic.w	r2, r2, #1
 803650a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 803650c:	687b      	ldr	r3, [r7, #4]
 803650e:	681b      	ldr	r3, [r3, #0]
 8036510:	689b      	ldr	r3, [r3, #8]
 8036512:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8036516:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8036518:	687b      	ldr	r3, [r7, #4]
 803651a:	699b      	ldr	r3, [r3, #24]
 803651c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8036520:	d119      	bne.n	8036556 <HAL_SPI_Init+0x112>
 8036522:	687b      	ldr	r3, [r7, #4]
 8036524:	685b      	ldr	r3, [r3, #4]
 8036526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803652a:	d103      	bne.n	8036534 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 803652c:	687b      	ldr	r3, [r7, #4]
 803652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8036530:	2b00      	cmp	r3, #0
 8036532:	d008      	beq.n	8036546 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8036534:	687b      	ldr	r3, [r7, #4]
 8036536:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8036538:	2b00      	cmp	r3, #0
 803653a:	d10c      	bne.n	8036556 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 803653c:	687b      	ldr	r3, [r7, #4]
 803653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8036540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8036544:	d107      	bne.n	8036556 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8036546:	687b      	ldr	r3, [r7, #4]
 8036548:	681b      	ldr	r3, [r3, #0]
 803654a:	681a      	ldr	r2, [r3, #0]
 803654c:	687b      	ldr	r3, [r7, #4]
 803654e:	681b      	ldr	r3, [r3, #0]
 8036550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8036554:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8036556:	687b      	ldr	r3, [r7, #4]
 8036558:	69da      	ldr	r2, [r3, #28]
 803655a:	687b      	ldr	r3, [r7, #4]
 803655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803655e:	431a      	orrs	r2, r3
 8036560:	68bb      	ldr	r3, [r7, #8]
 8036562:	431a      	orrs	r2, r3
 8036564:	687b      	ldr	r3, [r7, #4]
 8036566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036568:	ea42 0103 	orr.w	r1, r2, r3
 803656c:	687b      	ldr	r3, [r7, #4]
 803656e:	68da      	ldr	r2, [r3, #12]
 8036570:	687b      	ldr	r3, [r7, #4]
 8036572:	681b      	ldr	r3, [r3, #0]
 8036574:	430a      	orrs	r2, r1
 8036576:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8036578:	687b      	ldr	r3, [r7, #4]
 803657a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803657c:	687b      	ldr	r3, [r7, #4]
 803657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036580:	431a      	orrs	r2, r3
 8036582:	687b      	ldr	r3, [r7, #4]
 8036584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036586:	431a      	orrs	r2, r3
 8036588:	687b      	ldr	r3, [r7, #4]
 803658a:	699b      	ldr	r3, [r3, #24]
 803658c:	431a      	orrs	r2, r3
 803658e:	687b      	ldr	r3, [r7, #4]
 8036590:	691b      	ldr	r3, [r3, #16]
 8036592:	431a      	orrs	r2, r3
 8036594:	687b      	ldr	r3, [r7, #4]
 8036596:	695b      	ldr	r3, [r3, #20]
 8036598:	431a      	orrs	r2, r3
 803659a:	687b      	ldr	r3, [r7, #4]
 803659c:	6a1b      	ldr	r3, [r3, #32]
 803659e:	431a      	orrs	r2, r3
 80365a0:	687b      	ldr	r3, [r7, #4]
 80365a2:	685b      	ldr	r3, [r3, #4]
 80365a4:	431a      	orrs	r2, r3
 80365a6:	687b      	ldr	r3, [r7, #4]
 80365a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80365aa:	431a      	orrs	r2, r3
 80365ac:	687b      	ldr	r3, [r7, #4]
 80365ae:	689b      	ldr	r3, [r3, #8]
 80365b0:	431a      	orrs	r2, r3
 80365b2:	687b      	ldr	r3, [r7, #4]
 80365b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80365b6:	ea42 0103 	orr.w	r1, r2, r3
 80365ba:	687b      	ldr	r3, [r7, #4]
 80365bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80365be:	687b      	ldr	r3, [r7, #4]
 80365c0:	681b      	ldr	r3, [r3, #0]
 80365c2:	430a      	orrs	r2, r1
 80365c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80365c6:	687b      	ldr	r3, [r7, #4]
 80365c8:	685b      	ldr	r3, [r3, #4]
 80365ca:	2b00      	cmp	r3, #0
 80365cc:	d113      	bne.n	80365f6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80365ce:	687b      	ldr	r3, [r7, #4]
 80365d0:	681b      	ldr	r3, [r3, #0]
 80365d2:	689b      	ldr	r3, [r3, #8]
 80365d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80365d8:	687b      	ldr	r3, [r7, #4]
 80365da:	681b      	ldr	r3, [r3, #0]
 80365dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80365e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80365e2:	687b      	ldr	r3, [r7, #4]
 80365e4:	681b      	ldr	r3, [r3, #0]
 80365e6:	689b      	ldr	r3, [r3, #8]
 80365e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80365ec:	687b      	ldr	r3, [r7, #4]
 80365ee:	681b      	ldr	r3, [r3, #0]
 80365f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80365f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80365f6:	687b      	ldr	r3, [r7, #4]
 80365f8:	681b      	ldr	r3, [r3, #0]
 80365fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80365fc:	687b      	ldr	r3, [r7, #4]
 80365fe:	681b      	ldr	r3, [r3, #0]
 8036600:	f022 0201 	bic.w	r2, r2, #1
 8036604:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8036606:	687b      	ldr	r3, [r7, #4]
 8036608:	685b      	ldr	r3, [r3, #4]
 803660a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803660e:	2b00      	cmp	r3, #0
 8036610:	d00a      	beq.n	8036628 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8036612:	687b      	ldr	r3, [r7, #4]
 8036614:	681b      	ldr	r3, [r3, #0]
 8036616:	68db      	ldr	r3, [r3, #12]
 8036618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 803661c:	687b      	ldr	r3, [r7, #4]
 803661e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8036620:	687b      	ldr	r3, [r7, #4]
 8036622:	681b      	ldr	r3, [r3, #0]
 8036624:	430a      	orrs	r2, r1
 8036626:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8036628:	687b      	ldr	r3, [r7, #4]
 803662a:	2200      	movs	r2, #0
 803662c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8036630:	687b      	ldr	r3, [r7, #4]
 8036632:	2201      	movs	r2, #1
 8036634:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8036638:	2300      	movs	r3, #0
}
 803663a:	4618      	mov	r0, r3
 803663c:	3710      	adds	r7, #16
 803663e:	46bd      	mov	sp, r7
 8036640:	bd80      	pop	{r7, pc}
 8036642:	bf00      	nop
 8036644:	40013000 	.word	0x40013000
 8036648:	40003800 	.word	0x40003800
 803664c:	40003c00 	.word	0x40003c00

08036650 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8036650:	b580      	push	{r7, lr}
 8036652:	b086      	sub	sp, #24
 8036654:	af00      	add	r7, sp, #0
 8036656:	60f8      	str	r0, [r7, #12]
 8036658:	60b9      	str	r1, [r7, #8]
 803665a:	4613      	mov	r3, r2
 803665c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 803665e:	2300      	movs	r3, #0
 8036660:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8036662:	68fb      	ldr	r3, [r7, #12]
 8036664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036668:	2b01      	cmp	r3, #1
 803666a:	d101      	bne.n	8036670 <HAL_SPI_Transmit_DMA+0x20>
 803666c:	2302      	movs	r3, #2
 803666e:	e12c      	b.n	80368ca <HAL_SPI_Transmit_DMA+0x27a>
 8036670:	68fb      	ldr	r3, [r7, #12]
 8036672:	2201      	movs	r2, #1
 8036674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8036678:	68fb      	ldr	r3, [r7, #12]
 803667a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803667e:	b2db      	uxtb	r3, r3
 8036680:	2b01      	cmp	r3, #1
 8036682:	d007      	beq.n	8036694 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8036684:	2302      	movs	r3, #2
 8036686:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036688:	68fb      	ldr	r3, [r7, #12]
 803668a:	2200      	movs	r2, #0
 803668c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036690:	7dfb      	ldrb	r3, [r7, #23]
 8036692:	e11a      	b.n	80368ca <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8036694:	68bb      	ldr	r3, [r7, #8]
 8036696:	2b00      	cmp	r3, #0
 8036698:	d002      	beq.n	80366a0 <HAL_SPI_Transmit_DMA+0x50>
 803669a:	88fb      	ldrh	r3, [r7, #6]
 803669c:	2b00      	cmp	r3, #0
 803669e:	d107      	bne.n	80366b0 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80366a0:	2301      	movs	r3, #1
 80366a2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80366a4:	68fb      	ldr	r3, [r7, #12]
 80366a6:	2200      	movs	r2, #0
 80366a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80366ac:	7dfb      	ldrb	r3, [r7, #23]
 80366ae:	e10c      	b.n	80368ca <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80366b0:	68fb      	ldr	r3, [r7, #12]
 80366b2:	2203      	movs	r2, #3
 80366b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80366b8:	68fb      	ldr	r3, [r7, #12]
 80366ba:	2200      	movs	r2, #0
 80366bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80366c0:	68fb      	ldr	r3, [r7, #12]
 80366c2:	68ba      	ldr	r2, [r7, #8]
 80366c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80366c6:	68fb      	ldr	r3, [r7, #12]
 80366c8:	88fa      	ldrh	r2, [r7, #6]
 80366ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80366ce:	68fb      	ldr	r3, [r7, #12]
 80366d0:	88fa      	ldrh	r2, [r7, #6]
 80366d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80366d6:	68fb      	ldr	r3, [r7, #12]
 80366d8:	2200      	movs	r2, #0
 80366da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80366dc:	68fb      	ldr	r3, [r7, #12]
 80366de:	2200      	movs	r2, #0
 80366e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80366e2:	68fb      	ldr	r3, [r7, #12]
 80366e4:	2200      	movs	r2, #0
 80366e6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80366e8:	68fb      	ldr	r3, [r7, #12]
 80366ea:	2200      	movs	r2, #0
 80366ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80366f0:	68fb      	ldr	r3, [r7, #12]
 80366f2:	2200      	movs	r2, #0
 80366f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80366f8:	68fb      	ldr	r3, [r7, #12]
 80366fa:	689b      	ldr	r3, [r3, #8]
 80366fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8036700:	d107      	bne.n	8036712 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8036702:	68fb      	ldr	r3, [r7, #12]
 8036704:	681b      	ldr	r3, [r3, #0]
 8036706:	681a      	ldr	r2, [r3, #0]
 8036708:	68fb      	ldr	r3, [r7, #12]
 803670a:	681b      	ldr	r3, [r3, #0]
 803670c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8036710:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8036712:	68fb      	ldr	r3, [r7, #12]
 8036714:	68db      	ldr	r3, [r3, #12]
 8036716:	2b0f      	cmp	r3, #15
 8036718:	d905      	bls.n	8036726 <HAL_SPI_Transmit_DMA+0xd6>
 803671a:	68fb      	ldr	r3, [r7, #12]
 803671c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803671e:	699b      	ldr	r3, [r3, #24]
 8036720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036724:	d10f      	bne.n	8036746 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036726:	68fb      	ldr	r3, [r7, #12]
 8036728:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803672a:	2b07      	cmp	r3, #7
 803672c:	d913      	bls.n	8036756 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803672e:	68fb      	ldr	r3, [r7, #12]
 8036730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036732:	699b      	ldr	r3, [r3, #24]
 8036734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036738:	d00d      	beq.n	8036756 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 803673a:	68fb      	ldr	r3, [r7, #12]
 803673c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803673e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036744:	d007      	beq.n	8036756 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8036746:	2301      	movs	r3, #1
 8036748:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803674a:	68fb      	ldr	r3, [r7, #12]
 803674c:	2200      	movs	r2, #0
 803674e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036752:	7dfb      	ldrb	r3, [r7, #23]
 8036754:	e0b9      	b.n	80368ca <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8036756:	68fb      	ldr	r3, [r7, #12]
 8036758:	68db      	ldr	r3, [r3, #12]
 803675a:	2b07      	cmp	r3, #7
 803675c:	d820      	bhi.n	80367a0 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 803675e:	68fb      	ldr	r3, [r7, #12]
 8036760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036762:	699b      	ldr	r3, [r3, #24]
 8036764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036768:	d109      	bne.n	803677e <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 803676a:	68fb      	ldr	r3, [r7, #12]
 803676c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036770:	b29b      	uxth	r3, r3
 8036772:	3301      	adds	r3, #1
 8036774:	105b      	asrs	r3, r3, #1
 8036776:	b29a      	uxth	r2, r3
 8036778:	68fb      	ldr	r3, [r7, #12]
 803677a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803677e:	68fb      	ldr	r3, [r7, #12]
 8036780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036782:	699b      	ldr	r3, [r3, #24]
 8036784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036788:	d11e      	bne.n	80367c8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 803678a:	68fb      	ldr	r3, [r7, #12]
 803678c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036790:	b29b      	uxth	r3, r3
 8036792:	3303      	adds	r3, #3
 8036794:	109b      	asrs	r3, r3, #2
 8036796:	b29a      	uxth	r2, r3
 8036798:	68fb      	ldr	r3, [r7, #12]
 803679a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 803679e:	e013      	b.n	80367c8 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80367a0:	68fb      	ldr	r3, [r7, #12]
 80367a2:	68db      	ldr	r3, [r3, #12]
 80367a4:	2b0f      	cmp	r3, #15
 80367a6:	d80f      	bhi.n	80367c8 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80367a8:	68fb      	ldr	r3, [r7, #12]
 80367aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80367ac:	699b      	ldr	r3, [r3, #24]
 80367ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80367b2:	d109      	bne.n	80367c8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80367b4:	68fb      	ldr	r3, [r7, #12]
 80367b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80367ba:	b29b      	uxth	r3, r3
 80367bc:	3301      	adds	r3, #1
 80367be:	105b      	asrs	r3, r3, #1
 80367c0:	b29a      	uxth	r2, r3
 80367c2:	68fb      	ldr	r3, [r7, #12]
 80367c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80367c8:	68fb      	ldr	r3, [r7, #12]
 80367ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80367cc:	4a41      	ldr	r2, [pc, #260]	; (80368d4 <HAL_SPI_Transmit_DMA+0x284>)
 80367ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80367d0:	68fb      	ldr	r3, [r7, #12]
 80367d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80367d4:	4a40      	ldr	r2, [pc, #256]	; (80368d8 <HAL_SPI_Transmit_DMA+0x288>)
 80367d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80367d8:	68fb      	ldr	r3, [r7, #12]
 80367da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80367dc:	4a3f      	ldr	r2, [pc, #252]	; (80368dc <HAL_SPI_Transmit_DMA+0x28c>)
 80367de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80367e0:	68fb      	ldr	r3, [r7, #12]
 80367e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80367e4:	2200      	movs	r2, #0
 80367e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80367e8:	68fb      	ldr	r3, [r7, #12]
 80367ea:	681b      	ldr	r3, [r3, #0]
 80367ec:	689a      	ldr	r2, [r3, #8]
 80367ee:	68fb      	ldr	r3, [r7, #12]
 80367f0:	681b      	ldr	r3, [r3, #0]
 80367f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80367f6:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80367f8:	68fb      	ldr	r3, [r7, #12]
 80367fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80367fc:	68fb      	ldr	r3, [r7, #12]
 80367fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8036800:	4619      	mov	r1, r3
 8036802:	68fb      	ldr	r3, [r7, #12]
 8036804:	681b      	ldr	r3, [r3, #0]
 8036806:	3320      	adds	r3, #32
 8036808:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 803680a:	68fb      	ldr	r3, [r7, #12]
 803680c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036810:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8036812:	f7f8 fb65 	bl	802eee0 <HAL_DMA_Start_IT>
 8036816:	4603      	mov	r3, r0
 8036818:	2b00      	cmp	r3, #0
 803681a:	d013      	beq.n	8036844 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 803681c:	68fb      	ldr	r3, [r7, #12]
 803681e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036822:	f043 0210 	orr.w	r2, r3, #16
 8036826:	68fb      	ldr	r3, [r7, #12]
 8036828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 803682c:	68fb      	ldr	r3, [r7, #12]
 803682e:	2200      	movs	r2, #0
 8036830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8036834:	68fb      	ldr	r3, [r7, #12]
 8036836:	2201      	movs	r2, #1
 8036838:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 803683c:	2301      	movs	r3, #1
 803683e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8036840:	7dfb      	ldrb	r3, [r7, #23]
 8036842:	e042      	b.n	80368ca <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8036844:	68fb      	ldr	r3, [r7, #12]
 8036846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036848:	69db      	ldr	r3, [r3, #28]
 803684a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803684e:	d108      	bne.n	8036862 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8036850:	68fb      	ldr	r3, [r7, #12]
 8036852:	681b      	ldr	r3, [r3, #0]
 8036854:	6859      	ldr	r1, [r3, #4]
 8036856:	68fb      	ldr	r3, [r7, #12]
 8036858:	681a      	ldr	r2, [r3, #0]
 803685a:	4b21      	ldr	r3, [pc, #132]	; (80368e0 <HAL_SPI_Transmit_DMA+0x290>)
 803685c:	400b      	ands	r3, r1
 803685e:	6053      	str	r3, [r2, #4]
 8036860:	e009      	b.n	8036876 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8036862:	68fb      	ldr	r3, [r7, #12]
 8036864:	681b      	ldr	r3, [r3, #0]
 8036866:	685a      	ldr	r2, [r3, #4]
 8036868:	4b1d      	ldr	r3, [pc, #116]	; (80368e0 <HAL_SPI_Transmit_DMA+0x290>)
 803686a:	4013      	ands	r3, r2
 803686c:	88f9      	ldrh	r1, [r7, #6]
 803686e:	68fa      	ldr	r2, [r7, #12]
 8036870:	6812      	ldr	r2, [r2, #0]
 8036872:	430b      	orrs	r3, r1
 8036874:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8036876:	68fb      	ldr	r3, [r7, #12]
 8036878:	681b      	ldr	r3, [r3, #0]
 803687a:	689a      	ldr	r2, [r3, #8]
 803687c:	68fb      	ldr	r3, [r7, #12]
 803687e:	681b      	ldr	r3, [r3, #0]
 8036880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8036884:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8036886:	68fb      	ldr	r3, [r7, #12]
 8036888:	681b      	ldr	r3, [r3, #0]
 803688a:	691a      	ldr	r2, [r3, #16]
 803688c:	68fb      	ldr	r3, [r7, #12]
 803688e:	681b      	ldr	r3, [r3, #0]
 8036890:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8036894:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8036896:	68fb      	ldr	r3, [r7, #12]
 8036898:	681b      	ldr	r3, [r3, #0]
 803689a:	681a      	ldr	r2, [r3, #0]
 803689c:	68fb      	ldr	r3, [r7, #12]
 803689e:	681b      	ldr	r3, [r3, #0]
 80368a0:	f042 0201 	orr.w	r2, r2, #1
 80368a4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80368a6:	68fb      	ldr	r3, [r7, #12]
 80368a8:	685b      	ldr	r3, [r3, #4]
 80368aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80368ae:	d107      	bne.n	80368c0 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80368b0:	68fb      	ldr	r3, [r7, #12]
 80368b2:	681b      	ldr	r3, [r3, #0]
 80368b4:	681a      	ldr	r2, [r3, #0]
 80368b6:	68fb      	ldr	r3, [r7, #12]
 80368b8:	681b      	ldr	r3, [r3, #0]
 80368ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80368be:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80368c0:	68fb      	ldr	r3, [r7, #12]
 80368c2:	2200      	movs	r2, #0
 80368c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80368c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80368ca:	4618      	mov	r0, r3
 80368cc:	3718      	adds	r7, #24
 80368ce:	46bd      	mov	sp, r7
 80368d0:	bd80      	pop	{r7, pc}
 80368d2:	bf00      	nop
 80368d4:	0803745b 	.word	0x0803745b
 80368d8:	08037389 	.word	0x08037389
 80368dc:	080374af 	.word	0x080374af
 80368e0:	ffff0000 	.word	0xffff0000

080368e4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80368e4:	b580      	push	{r7, lr}
 80368e6:	b086      	sub	sp, #24
 80368e8:	af00      	add	r7, sp, #0
 80368ea:	60f8      	str	r0, [r7, #12]
 80368ec:	60b9      	str	r1, [r7, #8]
 80368ee:	4613      	mov	r3, r2
 80368f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80368f2:	2300      	movs	r3, #0
 80368f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80368f6:	68fb      	ldr	r3, [r7, #12]
 80368f8:	689b      	ldr	r3, [r3, #8]
 80368fa:	2b00      	cmp	r3, #0
 80368fc:	d110      	bne.n	8036920 <HAL_SPI_Receive_DMA+0x3c>
 80368fe:	68fb      	ldr	r3, [r7, #12]
 8036900:	685b      	ldr	r3, [r3, #4]
 8036902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8036906:	d10b      	bne.n	8036920 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8036908:	68fb      	ldr	r3, [r7, #12]
 803690a:	2204      	movs	r2, #4
 803690c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8036910:	88fb      	ldrh	r3, [r7, #6]
 8036912:	68ba      	ldr	r2, [r7, #8]
 8036914:	68b9      	ldr	r1, [r7, #8]
 8036916:	68f8      	ldr	r0, [r7, #12]
 8036918:	f000 f940 	bl	8036b9c <HAL_SPI_TransmitReceive_DMA>
 803691c:	4603      	mov	r3, r0
 803691e:	e130      	b.n	8036b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8036920:	68fb      	ldr	r3, [r7, #12]
 8036922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036926:	2b01      	cmp	r3, #1
 8036928:	d101      	bne.n	803692e <HAL_SPI_Receive_DMA+0x4a>
 803692a:	2302      	movs	r3, #2
 803692c:	e129      	b.n	8036b82 <HAL_SPI_Receive_DMA+0x29e>
 803692e:	68fb      	ldr	r3, [r7, #12]
 8036930:	2201      	movs	r2, #1
 8036932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8036936:	68fb      	ldr	r3, [r7, #12]
 8036938:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803693c:	b2db      	uxtb	r3, r3
 803693e:	2b01      	cmp	r3, #1
 8036940:	d007      	beq.n	8036952 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8036942:	2302      	movs	r3, #2
 8036944:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036946:	68fb      	ldr	r3, [r7, #12]
 8036948:	2200      	movs	r2, #0
 803694a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 803694e:	7dfb      	ldrb	r3, [r7, #23]
 8036950:	e117      	b.n	8036b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8036952:	68bb      	ldr	r3, [r7, #8]
 8036954:	2b00      	cmp	r3, #0
 8036956:	d002      	beq.n	803695e <HAL_SPI_Receive_DMA+0x7a>
 8036958:	88fb      	ldrh	r3, [r7, #6]
 803695a:	2b00      	cmp	r3, #0
 803695c:	d107      	bne.n	803696e <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 803695e:	2301      	movs	r3, #1
 8036960:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036962:	68fb      	ldr	r3, [r7, #12]
 8036964:	2200      	movs	r2, #0
 8036966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 803696a:	7dfb      	ldrb	r3, [r7, #23]
 803696c:	e109      	b.n	8036b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 803696e:	68fb      	ldr	r3, [r7, #12]
 8036970:	2204      	movs	r2, #4
 8036972:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8036976:	68fb      	ldr	r3, [r7, #12]
 8036978:	2200      	movs	r2, #0
 803697a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 803697e:	68fb      	ldr	r3, [r7, #12]
 8036980:	68ba      	ldr	r2, [r7, #8]
 8036982:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8036984:	68fb      	ldr	r3, [r7, #12]
 8036986:	88fa      	ldrh	r2, [r7, #6]
 8036988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 803698c:	68fb      	ldr	r3, [r7, #12]
 803698e:	88fa      	ldrh	r2, [r7, #6]
 8036990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8036994:	68fb      	ldr	r3, [r7, #12]
 8036996:	2200      	movs	r2, #0
 8036998:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 803699a:	68fb      	ldr	r3, [r7, #12]
 803699c:	2200      	movs	r2, #0
 803699e:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80369a0:	68fb      	ldr	r3, [r7, #12]
 80369a2:	2200      	movs	r2, #0
 80369a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80369a8:	68fb      	ldr	r3, [r7, #12]
 80369aa:	2200      	movs	r2, #0
 80369ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80369b0:	68fb      	ldr	r3, [r7, #12]
 80369b2:	689b      	ldr	r3, [r3, #8]
 80369b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80369b8:	d107      	bne.n	80369ca <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 80369ba:	68fb      	ldr	r3, [r7, #12]
 80369bc:	681b      	ldr	r3, [r3, #0]
 80369be:	681a      	ldr	r2, [r3, #0]
 80369c0:	68fb      	ldr	r3, [r7, #12]
 80369c2:	681b      	ldr	r3, [r3, #0]
 80369c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80369c8:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80369ca:	68fb      	ldr	r3, [r7, #12]
 80369cc:	68db      	ldr	r3, [r3, #12]
 80369ce:	2b0f      	cmp	r3, #15
 80369d0:	d905      	bls.n	80369de <HAL_SPI_Receive_DMA+0xfa>
 80369d2:	68fb      	ldr	r3, [r7, #12]
 80369d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80369d6:	699b      	ldr	r3, [r3, #24]
 80369d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80369dc:	d10f      	bne.n	80369fe <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80369de:	68fb      	ldr	r3, [r7, #12]
 80369e0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80369e2:	2b07      	cmp	r3, #7
 80369e4:	d913      	bls.n	8036a0e <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80369e6:	68fb      	ldr	r3, [r7, #12]
 80369e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80369ea:	699b      	ldr	r3, [r3, #24]
 80369ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80369f0:	d00d      	beq.n	8036a0e <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80369f2:	68fb      	ldr	r3, [r7, #12]
 80369f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80369f6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80369f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80369fc:	d007      	beq.n	8036a0e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80369fe:	2301      	movs	r3, #1
 8036a00:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036a02:	68fb      	ldr	r3, [r7, #12]
 8036a04:	2200      	movs	r2, #0
 8036a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036a0a:	7dfb      	ldrb	r3, [r7, #23]
 8036a0c:	e0b9      	b.n	8036b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8036a0e:	68fb      	ldr	r3, [r7, #12]
 8036a10:	681b      	ldr	r3, [r3, #0]
 8036a12:	689a      	ldr	r2, [r3, #8]
 8036a14:	68fb      	ldr	r3, [r7, #12]
 8036a16:	681b      	ldr	r3, [r3, #0]
 8036a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8036a1c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8036a1e:	68fb      	ldr	r3, [r7, #12]
 8036a20:	68db      	ldr	r3, [r3, #12]
 8036a22:	2b07      	cmp	r3, #7
 8036a24:	d820      	bhi.n	8036a68 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8036a26:	68fb      	ldr	r3, [r7, #12]
 8036a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a2a:	699b      	ldr	r3, [r3, #24]
 8036a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036a30:	d109      	bne.n	8036a46 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8036a32:	68fb      	ldr	r3, [r7, #12]
 8036a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036a38:	b29b      	uxth	r3, r3
 8036a3a:	3301      	adds	r3, #1
 8036a3c:	105b      	asrs	r3, r3, #1
 8036a3e:	b29a      	uxth	r2, r3
 8036a40:	68fb      	ldr	r3, [r7, #12]
 8036a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036a46:	68fb      	ldr	r3, [r7, #12]
 8036a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a4a:	699b      	ldr	r3, [r3, #24]
 8036a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036a50:	d11e      	bne.n	8036a90 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8036a52:	68fb      	ldr	r3, [r7, #12]
 8036a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036a58:	b29b      	uxth	r3, r3
 8036a5a:	3303      	adds	r3, #3
 8036a5c:	109b      	asrs	r3, r3, #2
 8036a5e:	b29a      	uxth	r2, r3
 8036a60:	68fb      	ldr	r3, [r7, #12]
 8036a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8036a66:	e013      	b.n	8036a90 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8036a68:	68fb      	ldr	r3, [r7, #12]
 8036a6a:	68db      	ldr	r3, [r3, #12]
 8036a6c:	2b0f      	cmp	r3, #15
 8036a6e:	d80f      	bhi.n	8036a90 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036a70:	68fb      	ldr	r3, [r7, #12]
 8036a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a74:	699b      	ldr	r3, [r3, #24]
 8036a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036a7a:	d109      	bne.n	8036a90 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8036a7c:	68fb      	ldr	r3, [r7, #12]
 8036a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036a82:	b29b      	uxth	r3, r3
 8036a84:	3301      	adds	r3, #1
 8036a86:	105b      	asrs	r3, r3, #1
 8036a88:	b29a      	uxth	r2, r3
 8036a8a:	68fb      	ldr	r3, [r7, #12]
 8036a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8036a90:	68fb      	ldr	r3, [r7, #12]
 8036a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a94:	4a3d      	ldr	r2, [pc, #244]	; (8036b8c <HAL_SPI_Receive_DMA+0x2a8>)
 8036a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8036a98:	68fb      	ldr	r3, [r7, #12]
 8036a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a9c:	4a3c      	ldr	r2, [pc, #240]	; (8036b90 <HAL_SPI_Receive_DMA+0x2ac>)
 8036a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8036aa0:	68fb      	ldr	r3, [r7, #12]
 8036aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036aa4:	4a3b      	ldr	r2, [pc, #236]	; (8036b94 <HAL_SPI_Receive_DMA+0x2b0>)
 8036aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8036aa8:	68fb      	ldr	r3, [r7, #12]
 8036aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036aac:	2200      	movs	r2, #0
 8036aae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8036ab0:	68fb      	ldr	r3, [r7, #12]
 8036ab2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8036ab4:	68fb      	ldr	r3, [r7, #12]
 8036ab6:	681b      	ldr	r3, [r3, #0]
 8036ab8:	3330      	adds	r3, #48	; 0x30
 8036aba:	4619      	mov	r1, r3
 8036abc:	68fb      	ldr	r3, [r7, #12]
 8036abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8036ac0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8036ac2:	68fb      	ldr	r3, [r7, #12]
 8036ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036ac8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8036aca:	f7f8 fa09 	bl	802eee0 <HAL_DMA_Start_IT>
 8036ace:	4603      	mov	r3, r0
 8036ad0:	2b00      	cmp	r3, #0
 8036ad2:	d013      	beq.n	8036afc <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8036ad4:	68fb      	ldr	r3, [r7, #12]
 8036ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036ada:	f043 0210 	orr.w	r2, r3, #16
 8036ade:	68fb      	ldr	r3, [r7, #12]
 8036ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8036ae4:	68fb      	ldr	r3, [r7, #12]
 8036ae6:	2200      	movs	r2, #0
 8036ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8036aec:	68fb      	ldr	r3, [r7, #12]
 8036aee:	2201      	movs	r2, #1
 8036af0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8036af4:	2301      	movs	r3, #1
 8036af6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8036af8:	7dfb      	ldrb	r3, [r7, #23]
 8036afa:	e042      	b.n	8036b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8036afc:	68fb      	ldr	r3, [r7, #12]
 8036afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b00:	69db      	ldr	r3, [r3, #28]
 8036b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036b06:	d108      	bne.n	8036b1a <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8036b08:	68fb      	ldr	r3, [r7, #12]
 8036b0a:	681b      	ldr	r3, [r3, #0]
 8036b0c:	6859      	ldr	r1, [r3, #4]
 8036b0e:	68fb      	ldr	r3, [r7, #12]
 8036b10:	681a      	ldr	r2, [r3, #0]
 8036b12:	4b21      	ldr	r3, [pc, #132]	; (8036b98 <HAL_SPI_Receive_DMA+0x2b4>)
 8036b14:	400b      	ands	r3, r1
 8036b16:	6053      	str	r3, [r2, #4]
 8036b18:	e009      	b.n	8036b2e <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8036b1a:	68fb      	ldr	r3, [r7, #12]
 8036b1c:	681b      	ldr	r3, [r3, #0]
 8036b1e:	685a      	ldr	r2, [r3, #4]
 8036b20:	4b1d      	ldr	r3, [pc, #116]	; (8036b98 <HAL_SPI_Receive_DMA+0x2b4>)
 8036b22:	4013      	ands	r3, r2
 8036b24:	88f9      	ldrh	r1, [r7, #6]
 8036b26:	68fa      	ldr	r2, [r7, #12]
 8036b28:	6812      	ldr	r2, [r2, #0]
 8036b2a:	430b      	orrs	r3, r1
 8036b2c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8036b2e:	68fb      	ldr	r3, [r7, #12]
 8036b30:	681b      	ldr	r3, [r3, #0]
 8036b32:	689a      	ldr	r2, [r3, #8]
 8036b34:	68fb      	ldr	r3, [r7, #12]
 8036b36:	681b      	ldr	r3, [r3, #0]
 8036b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8036b3c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8036b3e:	68fb      	ldr	r3, [r7, #12]
 8036b40:	681b      	ldr	r3, [r3, #0]
 8036b42:	691a      	ldr	r2, [r3, #16]
 8036b44:	68fb      	ldr	r3, [r7, #12]
 8036b46:	681b      	ldr	r3, [r3, #0]
 8036b48:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8036b4c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8036b4e:	68fb      	ldr	r3, [r7, #12]
 8036b50:	681b      	ldr	r3, [r3, #0]
 8036b52:	681a      	ldr	r2, [r3, #0]
 8036b54:	68fb      	ldr	r3, [r7, #12]
 8036b56:	681b      	ldr	r3, [r3, #0]
 8036b58:	f042 0201 	orr.w	r2, r2, #1
 8036b5c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8036b5e:	68fb      	ldr	r3, [r7, #12]
 8036b60:	685b      	ldr	r3, [r3, #4]
 8036b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8036b66:	d107      	bne.n	8036b78 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8036b68:	68fb      	ldr	r3, [r7, #12]
 8036b6a:	681b      	ldr	r3, [r3, #0]
 8036b6c:	681a      	ldr	r2, [r3, #0]
 8036b6e:	68fb      	ldr	r3, [r7, #12]
 8036b70:	681b      	ldr	r3, [r3, #0]
 8036b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8036b76:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8036b78:	68fb      	ldr	r3, [r7, #12]
 8036b7a:	2200      	movs	r2, #0
 8036b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8036b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8036b82:	4618      	mov	r0, r3
 8036b84:	3718      	adds	r7, #24
 8036b86:	46bd      	mov	sp, r7
 8036b88:	bd80      	pop	{r7, pc}
 8036b8a:	bf00      	nop
 8036b8c:	08037477 	.word	0x08037477
 8036b90:	080373cf 	.word	0x080373cf
 8036b94:	080374af 	.word	0x080374af
 8036b98:	ffff0000 	.word	0xffff0000

08036b9c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8036b9c:	b580      	push	{r7, lr}
 8036b9e:	b086      	sub	sp, #24
 8036ba0:	af00      	add	r7, sp, #0
 8036ba2:	60f8      	str	r0, [r7, #12]
 8036ba4:	60b9      	str	r1, [r7, #8]
 8036ba6:	607a      	str	r2, [r7, #4]
 8036ba8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8036baa:	2300      	movs	r3, #0
 8036bac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8036bae:	68fb      	ldr	r3, [r7, #12]
 8036bb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036bb4:	2b01      	cmp	r3, #1
 8036bb6:	d101      	bne.n	8036bbc <HAL_SPI_TransmitReceive_DMA+0x20>
 8036bb8:	2302      	movs	r3, #2
 8036bba:	e1b4      	b.n	8036f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
 8036bbc:	68fb      	ldr	r3, [r7, #12]
 8036bbe:	2201      	movs	r2, #1
 8036bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8036bc4:	68fb      	ldr	r3, [r7, #12]
 8036bc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8036bca:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8036bcc:	68fb      	ldr	r3, [r7, #12]
 8036bce:	685b      	ldr	r3, [r3, #4]
 8036bd0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8036bd2:	7dbb      	ldrb	r3, [r7, #22]
 8036bd4:	2b01      	cmp	r3, #1
 8036bd6:	d012      	beq.n	8036bfe <HAL_SPI_TransmitReceive_DMA+0x62>
 8036bd8:	693b      	ldr	r3, [r7, #16]
 8036bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8036bde:	d106      	bne.n	8036bee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8036be0:	68fb      	ldr	r3, [r7, #12]
 8036be2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8036be4:	2b00      	cmp	r3, #0
 8036be6:	d102      	bne.n	8036bee <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8036be8:	7dbb      	ldrb	r3, [r7, #22]
 8036bea:	2b04      	cmp	r3, #4
 8036bec:	d007      	beq.n	8036bfe <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8036bee:	2302      	movs	r3, #2
 8036bf0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036bf2:	68fb      	ldr	r3, [r7, #12]
 8036bf4:	2200      	movs	r2, #0
 8036bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036bfa:	7dfb      	ldrb	r3, [r7, #23]
 8036bfc:	e193      	b.n	8036f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8036bfe:	68bb      	ldr	r3, [r7, #8]
 8036c00:	2b00      	cmp	r3, #0
 8036c02:	d005      	beq.n	8036c10 <HAL_SPI_TransmitReceive_DMA+0x74>
 8036c04:	687b      	ldr	r3, [r7, #4]
 8036c06:	2b00      	cmp	r3, #0
 8036c08:	d002      	beq.n	8036c10 <HAL_SPI_TransmitReceive_DMA+0x74>
 8036c0a:	887b      	ldrh	r3, [r7, #2]
 8036c0c:	2b00      	cmp	r3, #0
 8036c0e:	d107      	bne.n	8036c20 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8036c10:	2301      	movs	r3, #1
 8036c12:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036c14:	68fb      	ldr	r3, [r7, #12]
 8036c16:	2200      	movs	r2, #0
 8036c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036c1c:	7dfb      	ldrb	r3, [r7, #23]
 8036c1e:	e182      	b.n	8036f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8036c20:	68fb      	ldr	r3, [r7, #12]
 8036c22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8036c26:	b2db      	uxtb	r3, r3
 8036c28:	2b04      	cmp	r3, #4
 8036c2a:	d003      	beq.n	8036c34 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8036c2c:	68fb      	ldr	r3, [r7, #12]
 8036c2e:	2205      	movs	r2, #5
 8036c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8036c34:	68fb      	ldr	r3, [r7, #12]
 8036c36:	2200      	movs	r2, #0
 8036c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8036c3c:	68fb      	ldr	r3, [r7, #12]
 8036c3e:	68ba      	ldr	r2, [r7, #8]
 8036c40:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8036c42:	68fb      	ldr	r3, [r7, #12]
 8036c44:	887a      	ldrh	r2, [r7, #2]
 8036c46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8036c4a:	68fb      	ldr	r3, [r7, #12]
 8036c4c:	887a      	ldrh	r2, [r7, #2]
 8036c4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8036c52:	68fb      	ldr	r3, [r7, #12]
 8036c54:	687a      	ldr	r2, [r7, #4]
 8036c56:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8036c58:	68fb      	ldr	r3, [r7, #12]
 8036c5a:	887a      	ldrh	r2, [r7, #2]
 8036c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8036c60:	68fb      	ldr	r3, [r7, #12]
 8036c62:	887a      	ldrh	r2, [r7, #2]
 8036c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8036c68:	68fb      	ldr	r3, [r7, #12]
 8036c6a:	2200      	movs	r2, #0
 8036c6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8036c6e:	68fb      	ldr	r3, [r7, #12]
 8036c70:	2200      	movs	r2, #0
 8036c72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8036c74:	68fb      	ldr	r3, [r7, #12]
 8036c76:	681b      	ldr	r3, [r3, #0]
 8036c78:	689a      	ldr	r2, [r3, #8]
 8036c7a:	68fb      	ldr	r3, [r7, #12]
 8036c7c:	681b      	ldr	r3, [r3, #0]
 8036c7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8036c82:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8036c84:	68fb      	ldr	r3, [r7, #12]
 8036c86:	68db      	ldr	r3, [r3, #12]
 8036c88:	2b0f      	cmp	r3, #15
 8036c8a:	d905      	bls.n	8036c98 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8036c8c:	68fb      	ldr	r3, [r7, #12]
 8036c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036c90:	699b      	ldr	r3, [r3, #24]
 8036c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036c96:	d10f      	bne.n	8036cb8 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036c98:	68fb      	ldr	r3, [r7, #12]
 8036c9a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8036c9c:	2b07      	cmp	r3, #7
 8036c9e:	d913      	bls.n	8036cc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036ca0:	68fb      	ldr	r3, [r7, #12]
 8036ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036ca4:	699b      	ldr	r3, [r3, #24]
 8036ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036caa:	d00d      	beq.n	8036cc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8036cac:	68fb      	ldr	r3, [r7, #12]
 8036cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036cb0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036cb6:	d007      	beq.n	8036cc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8036cb8:	2301      	movs	r3, #1
 8036cba:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8036cbc:	68fb      	ldr	r3, [r7, #12]
 8036cbe:	2200      	movs	r2, #0
 8036cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036cc4:	7dfb      	ldrb	r3, [r7, #23]
 8036cc6:	e12e      	b.n	8036f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8036cc8:	68fb      	ldr	r3, [r7, #12]
 8036cca:	68db      	ldr	r3, [r3, #12]
 8036ccc:	2b07      	cmp	r3, #7
 8036cce:	d840      	bhi.n	8036d52 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8036cd0:	68fb      	ldr	r3, [r7, #12]
 8036cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036cd4:	699b      	ldr	r3, [r3, #24]
 8036cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036cda:	d109      	bne.n	8036cf0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8036cdc:	68fb      	ldr	r3, [r7, #12]
 8036cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036ce2:	b29b      	uxth	r3, r3
 8036ce4:	3301      	adds	r3, #1
 8036ce6:	105b      	asrs	r3, r3, #1
 8036ce8:	b29a      	uxth	r2, r3
 8036cea:	68fb      	ldr	r3, [r7, #12]
 8036cec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036cf0:	68fb      	ldr	r3, [r7, #12]
 8036cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036cf4:	699b      	ldr	r3, [r3, #24]
 8036cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036cfa:	d109      	bne.n	8036d10 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8036cfc:	68fb      	ldr	r3, [r7, #12]
 8036cfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036d02:	b29b      	uxth	r3, r3
 8036d04:	3303      	adds	r3, #3
 8036d06:	109b      	asrs	r3, r3, #2
 8036d08:	b29a      	uxth	r2, r3
 8036d0a:	68fb      	ldr	r3, [r7, #12]
 8036d0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8036d10:	68fb      	ldr	r3, [r7, #12]
 8036d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d14:	699b      	ldr	r3, [r3, #24]
 8036d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036d1a:	d109      	bne.n	8036d30 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8036d1c:	68fb      	ldr	r3, [r7, #12]
 8036d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036d22:	b29b      	uxth	r3, r3
 8036d24:	3301      	adds	r3, #1
 8036d26:	105b      	asrs	r3, r3, #1
 8036d28:	b29a      	uxth	r2, r3
 8036d2a:	68fb      	ldr	r3, [r7, #12]
 8036d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036d30:	68fb      	ldr	r3, [r7, #12]
 8036d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d34:	699b      	ldr	r3, [r3, #24]
 8036d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036d3a:	d12e      	bne.n	8036d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8036d3c:	68fb      	ldr	r3, [r7, #12]
 8036d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036d42:	b29b      	uxth	r3, r3
 8036d44:	3303      	adds	r3, #3
 8036d46:	109b      	asrs	r3, r3, #2
 8036d48:	b29a      	uxth	r2, r3
 8036d4a:	68fb      	ldr	r3, [r7, #12]
 8036d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8036d50:	e023      	b.n	8036d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8036d52:	68fb      	ldr	r3, [r7, #12]
 8036d54:	68db      	ldr	r3, [r3, #12]
 8036d56:	2b0f      	cmp	r3, #15
 8036d58:	d81f      	bhi.n	8036d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036d5a:	68fb      	ldr	r3, [r7, #12]
 8036d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036d5e:	699b      	ldr	r3, [r3, #24]
 8036d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036d64:	d109      	bne.n	8036d7a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8036d66:	68fb      	ldr	r3, [r7, #12]
 8036d68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036d6c:	b29b      	uxth	r3, r3
 8036d6e:	3301      	adds	r3, #1
 8036d70:	105b      	asrs	r3, r3, #1
 8036d72:	b29a      	uxth	r2, r3
 8036d74:	68fb      	ldr	r3, [r7, #12]
 8036d76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036d7a:	68fb      	ldr	r3, [r7, #12]
 8036d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d7e:	699b      	ldr	r3, [r3, #24]
 8036d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036d84:	d109      	bne.n	8036d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8036d86:	68fb      	ldr	r3, [r7, #12]
 8036d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036d8c:	b29b      	uxth	r3, r3
 8036d8e:	3301      	adds	r3, #1
 8036d90:	105b      	asrs	r3, r3, #1
 8036d92:	b29a      	uxth	r2, r3
 8036d94:	68fb      	ldr	r3, [r7, #12]
 8036d96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8036d9a:	68fb      	ldr	r3, [r7, #12]
 8036d9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8036da0:	b2db      	uxtb	r3, r3
 8036da2:	2b04      	cmp	r3, #4
 8036da4:	d108      	bne.n	8036db8 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8036da6:	68fb      	ldr	r3, [r7, #12]
 8036da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036daa:	4a61      	ldr	r2, [pc, #388]	; (8036f30 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8036dac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8036dae:	68fb      	ldr	r3, [r7, #12]
 8036db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036db2:	4a60      	ldr	r2, [pc, #384]	; (8036f34 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8036db4:	63da      	str	r2, [r3, #60]	; 0x3c
 8036db6:	e007      	b.n	8036dc8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8036db8:	68fb      	ldr	r3, [r7, #12]
 8036dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dbc:	4a5e      	ldr	r2, [pc, #376]	; (8036f38 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8036dbe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8036dc0:	68fb      	ldr	r3, [r7, #12]
 8036dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dc4:	4a5d      	ldr	r2, [pc, #372]	; (8036f3c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8036dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8036dc8:	68fb      	ldr	r3, [r7, #12]
 8036dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dcc:	4a5c      	ldr	r2, [pc, #368]	; (8036f40 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8036dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8036dd0:	68fb      	ldr	r3, [r7, #12]
 8036dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dd4:	2200      	movs	r2, #0
 8036dd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8036dd8:	68fb      	ldr	r3, [r7, #12]
 8036dda:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8036ddc:	68fb      	ldr	r3, [r7, #12]
 8036dde:	681b      	ldr	r3, [r3, #0]
 8036de0:	3330      	adds	r3, #48	; 0x30
 8036de2:	4619      	mov	r1, r3
 8036de4:	68fb      	ldr	r3, [r7, #12]
 8036de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8036de8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8036dea:	68fb      	ldr	r3, [r7, #12]
 8036dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036df0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8036df2:	f7f8 f875 	bl	802eee0 <HAL_DMA_Start_IT>
 8036df6:	4603      	mov	r3, r0
 8036df8:	2b00      	cmp	r3, #0
 8036dfa:	d013      	beq.n	8036e24 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8036dfc:	68fb      	ldr	r3, [r7, #12]
 8036dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036e02:	f043 0210 	orr.w	r2, r3, #16
 8036e06:	68fb      	ldr	r3, [r7, #12]
 8036e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8036e0c:	68fb      	ldr	r3, [r7, #12]
 8036e0e:	2200      	movs	r2, #0
 8036e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8036e14:	68fb      	ldr	r3, [r7, #12]
 8036e16:	2201      	movs	r2, #1
 8036e18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8036e1c:	2301      	movs	r3, #1
 8036e1e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8036e20:	7dfb      	ldrb	r3, [r7, #23]
 8036e22:	e080      	b.n	8036f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8036e24:	68fb      	ldr	r3, [r7, #12]
 8036e26:	681b      	ldr	r3, [r3, #0]
 8036e28:	689a      	ldr	r2, [r3, #8]
 8036e2a:	68fb      	ldr	r3, [r7, #12]
 8036e2c:	681b      	ldr	r3, [r3, #0]
 8036e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8036e32:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8036e34:	68fb      	ldr	r3, [r7, #12]
 8036e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036e38:	2200      	movs	r2, #0
 8036e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8036e3c:	68fb      	ldr	r3, [r7, #12]
 8036e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036e40:	2200      	movs	r2, #0
 8036e42:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8036e44:	68fb      	ldr	r3, [r7, #12]
 8036e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036e48:	2200      	movs	r2, #0
 8036e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8036e4c:	68fb      	ldr	r3, [r7, #12]
 8036e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036e50:	2200      	movs	r2, #0
 8036e52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8036e54:	68fb      	ldr	r3, [r7, #12]
 8036e56:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8036e58:	68fb      	ldr	r3, [r7, #12]
 8036e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8036e5c:	4619      	mov	r1, r3
 8036e5e:	68fb      	ldr	r3, [r7, #12]
 8036e60:	681b      	ldr	r3, [r3, #0]
 8036e62:	3320      	adds	r3, #32
 8036e64:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8036e66:	68fb      	ldr	r3, [r7, #12]
 8036e68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036e6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8036e6e:	f7f8 f837 	bl	802eee0 <HAL_DMA_Start_IT>
 8036e72:	4603      	mov	r3, r0
 8036e74:	2b00      	cmp	r3, #0
 8036e76:	d013      	beq.n	8036ea0 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8036e78:	68fb      	ldr	r3, [r7, #12]
 8036e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036e7e:	f043 0210 	orr.w	r2, r3, #16
 8036e82:	68fb      	ldr	r3, [r7, #12]
 8036e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8036e88:	68fb      	ldr	r3, [r7, #12]
 8036e8a:	2200      	movs	r2, #0
 8036e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8036e90:	68fb      	ldr	r3, [r7, #12]
 8036e92:	2201      	movs	r2, #1
 8036e94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8036e98:	2301      	movs	r3, #1
 8036e9a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8036e9c:	7dfb      	ldrb	r3, [r7, #23]
 8036e9e:	e042      	b.n	8036f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8036ea0:	68fb      	ldr	r3, [r7, #12]
 8036ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036ea4:	69db      	ldr	r3, [r3, #28]
 8036ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036eaa:	d108      	bne.n	8036ebe <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8036eac:	68fb      	ldr	r3, [r7, #12]
 8036eae:	681b      	ldr	r3, [r3, #0]
 8036eb0:	6859      	ldr	r1, [r3, #4]
 8036eb2:	68fb      	ldr	r3, [r7, #12]
 8036eb4:	681a      	ldr	r2, [r3, #0]
 8036eb6:	4b23      	ldr	r3, [pc, #140]	; (8036f44 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8036eb8:	400b      	ands	r3, r1
 8036eba:	6053      	str	r3, [r2, #4]
 8036ebc:	e009      	b.n	8036ed2 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8036ebe:	68fb      	ldr	r3, [r7, #12]
 8036ec0:	681b      	ldr	r3, [r3, #0]
 8036ec2:	685a      	ldr	r2, [r3, #4]
 8036ec4:	4b1f      	ldr	r3, [pc, #124]	; (8036f44 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8036ec6:	4013      	ands	r3, r2
 8036ec8:	8879      	ldrh	r1, [r7, #2]
 8036eca:	68fa      	ldr	r2, [r7, #12]
 8036ecc:	6812      	ldr	r2, [r2, #0]
 8036ece:	430b      	orrs	r3, r1
 8036ed0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8036ed2:	68fb      	ldr	r3, [r7, #12]
 8036ed4:	681b      	ldr	r3, [r3, #0]
 8036ed6:	689a      	ldr	r2, [r3, #8]
 8036ed8:	68fb      	ldr	r3, [r7, #12]
 8036eda:	681b      	ldr	r3, [r3, #0]
 8036edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8036ee0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8036ee2:	68fb      	ldr	r3, [r7, #12]
 8036ee4:	681b      	ldr	r3, [r3, #0]
 8036ee6:	691a      	ldr	r2, [r3, #16]
 8036ee8:	68fb      	ldr	r3, [r7, #12]
 8036eea:	681b      	ldr	r3, [r3, #0]
 8036eec:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8036ef0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8036ef2:	68fb      	ldr	r3, [r7, #12]
 8036ef4:	681b      	ldr	r3, [r3, #0]
 8036ef6:	681a      	ldr	r2, [r3, #0]
 8036ef8:	68fb      	ldr	r3, [r7, #12]
 8036efa:	681b      	ldr	r3, [r3, #0]
 8036efc:	f042 0201 	orr.w	r2, r2, #1
 8036f00:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8036f02:	68fb      	ldr	r3, [r7, #12]
 8036f04:	685b      	ldr	r3, [r3, #4]
 8036f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8036f0a:	d107      	bne.n	8036f1c <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8036f0c:	68fb      	ldr	r3, [r7, #12]
 8036f0e:	681b      	ldr	r3, [r3, #0]
 8036f10:	681a      	ldr	r2, [r3, #0]
 8036f12:	68fb      	ldr	r3, [r7, #12]
 8036f14:	681b      	ldr	r3, [r3, #0]
 8036f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8036f1a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8036f1c:	68fb      	ldr	r3, [r7, #12]
 8036f1e:	2200      	movs	r2, #0
 8036f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8036f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8036f26:	4618      	mov	r0, r3
 8036f28:	3718      	adds	r7, #24
 8036f2a:	46bd      	mov	sp, r7
 8036f2c:	bd80      	pop	{r7, pc}
 8036f2e:	bf00      	nop
 8036f30:	08037477 	.word	0x08037477
 8036f34:	080373cf 	.word	0x080373cf
 8036f38:	08037493 	.word	0x08037493
 8036f3c:	08037415 	.word	0x08037415
 8036f40:	080374af 	.word	0x080374af
 8036f44:	ffff0000 	.word	0xffff0000

08036f48 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8036f48:	b580      	push	{r7, lr}
 8036f4a:	b08a      	sub	sp, #40	; 0x28
 8036f4c:	af00      	add	r7, sp, #0
 8036f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8036f50:	687b      	ldr	r3, [r7, #4]
 8036f52:	681b      	ldr	r3, [r3, #0]
 8036f54:	691b      	ldr	r3, [r3, #16]
 8036f56:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8036f58:	687b      	ldr	r3, [r7, #4]
 8036f5a:	681b      	ldr	r3, [r3, #0]
 8036f5c:	695b      	ldr	r3, [r3, #20]
 8036f5e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8036f60:	6a3a      	ldr	r2, [r7, #32]
 8036f62:	69fb      	ldr	r3, [r7, #28]
 8036f64:	4013      	ands	r3, r2
 8036f66:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8036f68:	687b      	ldr	r3, [r7, #4]
 8036f6a:	681b      	ldr	r3, [r3, #0]
 8036f6c:	689b      	ldr	r3, [r3, #8]
 8036f6e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8036f70:	2300      	movs	r3, #0
 8036f72:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8036f74:	687b      	ldr	r3, [r7, #4]
 8036f76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8036f7a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8036f7c:	687b      	ldr	r3, [r7, #4]
 8036f7e:	681b      	ldr	r3, [r3, #0]
 8036f80:	3330      	adds	r3, #48	; 0x30
 8036f82:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8036f84:	69bb      	ldr	r3, [r7, #24]
 8036f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036f8a:	2b00      	cmp	r3, #0
 8036f8c:	d113      	bne.n	8036fb6 <HAL_SPI_IRQHandler+0x6e>
 8036f8e:	69bb      	ldr	r3, [r7, #24]
 8036f90:	f003 0320 	and.w	r3, r3, #32
 8036f94:	2b00      	cmp	r3, #0
 8036f96:	d10e      	bne.n	8036fb6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8036f98:	69bb      	ldr	r3, [r7, #24]
 8036f9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8036f9e:	2b00      	cmp	r3, #0
 8036fa0:	d009      	beq.n	8036fb6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8036fa2:	687b      	ldr	r3, [r7, #4]
 8036fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8036fa6:	6878      	ldr	r0, [r7, #4]
 8036fa8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8036faa:	687b      	ldr	r3, [r7, #4]
 8036fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036fae:	6878      	ldr	r0, [r7, #4]
 8036fb0:	4798      	blx	r3
    handled = 1UL;
 8036fb2:	2301      	movs	r3, #1
 8036fb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8036fb6:	69bb      	ldr	r3, [r7, #24]
 8036fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036fbc:	2b00      	cmp	r3, #0
 8036fbe:	d10f      	bne.n	8036fe0 <HAL_SPI_IRQHandler+0x98>
 8036fc0:	69bb      	ldr	r3, [r7, #24]
 8036fc2:	f003 0301 	and.w	r3, r3, #1
 8036fc6:	2b00      	cmp	r3, #0
 8036fc8:	d00a      	beq.n	8036fe0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8036fca:	69bb      	ldr	r3, [r7, #24]
 8036fcc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8036fd0:	2b00      	cmp	r3, #0
 8036fd2:	d105      	bne.n	8036fe0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8036fd4:	687b      	ldr	r3, [r7, #4]
 8036fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036fd8:	6878      	ldr	r0, [r7, #4]
 8036fda:	4798      	blx	r3
    handled = 1UL;
 8036fdc:	2301      	movs	r3, #1
 8036fde:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8036fe0:	69bb      	ldr	r3, [r7, #24]
 8036fe2:	f003 0320 	and.w	r3, r3, #32
 8036fe6:	2b00      	cmp	r3, #0
 8036fe8:	d10f      	bne.n	803700a <HAL_SPI_IRQHandler+0xc2>
 8036fea:	69bb      	ldr	r3, [r7, #24]
 8036fec:	f003 0302 	and.w	r3, r3, #2
 8036ff0:	2b00      	cmp	r3, #0
 8036ff2:	d00a      	beq.n	803700a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8036ff4:	69bb      	ldr	r3, [r7, #24]
 8036ff6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8036ffa:	2b00      	cmp	r3, #0
 8036ffc:	d105      	bne.n	803700a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8036ffe:	687b      	ldr	r3, [r7, #4]
 8037000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8037002:	6878      	ldr	r0, [r7, #4]
 8037004:	4798      	blx	r3
    handled = 1UL;
 8037006:	2301      	movs	r3, #1
 8037008:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 803700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803700c:	2b00      	cmp	r3, #0
 803700e:	f040 815a 	bne.w	80372c6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8037012:	69bb      	ldr	r3, [r7, #24]
 8037014:	f003 0308 	and.w	r3, r3, #8
 8037018:	2b00      	cmp	r3, #0
 803701a:	f000 808b 	beq.w	8037134 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 803701e:	687b      	ldr	r3, [r7, #4]
 8037020:	681b      	ldr	r3, [r3, #0]
 8037022:	699a      	ldr	r2, [r3, #24]
 8037024:	687b      	ldr	r3, [r7, #4]
 8037026:	681b      	ldr	r3, [r3, #0]
 8037028:	f042 0208 	orr.w	r2, r2, #8
 803702c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 803702e:	687b      	ldr	r3, [r7, #4]
 8037030:	681b      	ldr	r3, [r3, #0]
 8037032:	699a      	ldr	r2, [r3, #24]
 8037034:	687b      	ldr	r3, [r7, #4]
 8037036:	681b      	ldr	r3, [r3, #0]
 8037038:	f042 0210 	orr.w	r2, r2, #16
 803703c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 803703e:	687b      	ldr	r3, [r7, #4]
 8037040:	681b      	ldr	r3, [r3, #0]
 8037042:	699a      	ldr	r2, [r3, #24]
 8037044:	687b      	ldr	r3, [r7, #4]
 8037046:	681b      	ldr	r3, [r3, #0]
 8037048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 803704c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 803704e:	687b      	ldr	r3, [r7, #4]
 8037050:	681b      	ldr	r3, [r3, #0]
 8037052:	691a      	ldr	r2, [r3, #16]
 8037054:	687b      	ldr	r3, [r7, #4]
 8037056:	681b      	ldr	r3, [r3, #0]
 8037058:	f022 0208 	bic.w	r2, r2, #8
 803705c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 803705e:	687b      	ldr	r3, [r7, #4]
 8037060:	681b      	ldr	r3, [r3, #0]
 8037062:	689b      	ldr	r3, [r3, #8]
 8037064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8037068:	2b00      	cmp	r3, #0
 803706a:	d13d      	bne.n	80370e8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 803706c:	e036      	b.n	80370dc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 803706e:	687b      	ldr	r3, [r7, #4]
 8037070:	68db      	ldr	r3, [r3, #12]
 8037072:	2b0f      	cmp	r3, #15
 8037074:	d90b      	bls.n	803708e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8037076:	687b      	ldr	r3, [r7, #4]
 8037078:	681a      	ldr	r2, [r3, #0]
 803707a:	687b      	ldr	r3, [r7, #4]
 803707c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803707e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8037080:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8037082:	687b      	ldr	r3, [r7, #4]
 8037084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037086:	1d1a      	adds	r2, r3, #4
 8037088:	687b      	ldr	r3, [r7, #4]
 803708a:	665a      	str	r2, [r3, #100]	; 0x64
 803708c:	e01d      	b.n	80370ca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 803708e:	687b      	ldr	r3, [r7, #4]
 8037090:	68db      	ldr	r3, [r3, #12]
 8037092:	2b07      	cmp	r3, #7
 8037094:	d90b      	bls.n	80370ae <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8037096:	687b      	ldr	r3, [r7, #4]
 8037098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803709a:	68fa      	ldr	r2, [r7, #12]
 803709c:	8812      	ldrh	r2, [r2, #0]
 803709e:	b292      	uxth	r2, r2
 80370a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80370a2:	687b      	ldr	r3, [r7, #4]
 80370a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80370a6:	1c9a      	adds	r2, r3, #2
 80370a8:	687b      	ldr	r3, [r7, #4]
 80370aa:	665a      	str	r2, [r3, #100]	; 0x64
 80370ac:	e00d      	b.n	80370ca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80370ae:	687b      	ldr	r3, [r7, #4]
 80370b0:	681b      	ldr	r3, [r3, #0]
 80370b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80370b6:	687b      	ldr	r3, [r7, #4]
 80370b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80370ba:	7812      	ldrb	r2, [r2, #0]
 80370bc:	b2d2      	uxtb	r2, r2
 80370be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80370c0:	687b      	ldr	r3, [r7, #4]
 80370c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80370c4:	1c5a      	adds	r2, r3, #1
 80370c6:	687b      	ldr	r3, [r7, #4]
 80370c8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80370ca:	687b      	ldr	r3, [r7, #4]
 80370cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80370d0:	b29b      	uxth	r3, r3
 80370d2:	3b01      	subs	r3, #1
 80370d4:	b29a      	uxth	r2, r3
 80370d6:	687b      	ldr	r3, [r7, #4]
 80370d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80370dc:	687b      	ldr	r3, [r7, #4]
 80370de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80370e2:	b29b      	uxth	r3, r3
 80370e4:	2b00      	cmp	r3, #0
 80370e6:	d1c2      	bne.n	803706e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80370e8:	6878      	ldr	r0, [r7, #4]
 80370ea:	f000 fa1d 	bl	8037528 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80370ee:	687b      	ldr	r3, [r7, #4]
 80370f0:	2201      	movs	r2, #1
 80370f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80370f6:	687b      	ldr	r3, [r7, #4]
 80370f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80370fc:	2b00      	cmp	r3, #0
 80370fe:	d003      	beq.n	8037108 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8037100:	6878      	ldr	r0, [r7, #4]
 8037102:	f000 f929 	bl	8037358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8037106:	e0e3      	b.n	80372d0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8037108:	7cfb      	ldrb	r3, [r7, #19]
 803710a:	2b05      	cmp	r3, #5
 803710c:	d103      	bne.n	8037116 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 803710e:	6878      	ldr	r0, [r7, #4]
 8037110:	f000 f8fa 	bl	8037308 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8037114:	e0d9      	b.n	80372ca <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8037116:	7cfb      	ldrb	r3, [r7, #19]
 8037118:	2b04      	cmp	r3, #4
 803711a:	d103      	bne.n	8037124 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 803711c:	6878      	ldr	r0, [r7, #4]
 803711e:	f000 f8e9 	bl	80372f4 <HAL_SPI_RxCpltCallback>
    return;
 8037122:	e0d2      	b.n	80372ca <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8037124:	7cfb      	ldrb	r3, [r7, #19]
 8037126:	2b03      	cmp	r3, #3
 8037128:	f040 80cf 	bne.w	80372ca <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 803712c:	6878      	ldr	r0, [r7, #4]
 803712e:	f000 f8d7 	bl	80372e0 <HAL_SPI_TxCpltCallback>
    return;
 8037132:	e0ca      	b.n	80372ca <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8037134:	69fb      	ldr	r3, [r7, #28]
 8037136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803713a:	2b00      	cmp	r3, #0
 803713c:	d00d      	beq.n	803715a <HAL_SPI_IRQHandler+0x212>
 803713e:	6a3b      	ldr	r3, [r7, #32]
 8037140:	f003 0308 	and.w	r3, r3, #8
 8037144:	2b00      	cmp	r3, #0
 8037146:	d008      	beq.n	803715a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8037148:	687b      	ldr	r3, [r7, #4]
 803714a:	681b      	ldr	r3, [r3, #0]
 803714c:	699a      	ldr	r2, [r3, #24]
 803714e:	687b      	ldr	r3, [r7, #4]
 8037150:	681b      	ldr	r3, [r3, #0]
 8037152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8037156:	619a      	str	r2, [r3, #24]

    return;
 8037158:	e0ba      	b.n	80372d0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 803715a:	69bb      	ldr	r3, [r7, #24]
 803715c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8037160:	2b00      	cmp	r3, #0
 8037162:	f000 80b5 	beq.w	80372d0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8037166:	69bb      	ldr	r3, [r7, #24]
 8037168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803716c:	2b00      	cmp	r3, #0
 803716e:	d00f      	beq.n	8037190 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8037170:	687b      	ldr	r3, [r7, #4]
 8037172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037176:	f043 0204 	orr.w	r2, r3, #4
 803717a:	687b      	ldr	r3, [r7, #4]
 803717c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8037180:	687b      	ldr	r3, [r7, #4]
 8037182:	681b      	ldr	r3, [r3, #0]
 8037184:	699a      	ldr	r2, [r3, #24]
 8037186:	687b      	ldr	r3, [r7, #4]
 8037188:	681b      	ldr	r3, [r3, #0]
 803718a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803718e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8037190:	69bb      	ldr	r3, [r7, #24]
 8037192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8037196:	2b00      	cmp	r3, #0
 8037198:	d00f      	beq.n	80371ba <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 803719a:	687b      	ldr	r3, [r7, #4]
 803719c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80371a0:	f043 0201 	orr.w	r2, r3, #1
 80371a4:	687b      	ldr	r3, [r7, #4]
 80371a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80371aa:	687b      	ldr	r3, [r7, #4]
 80371ac:	681b      	ldr	r3, [r3, #0]
 80371ae:	699a      	ldr	r2, [r3, #24]
 80371b0:	687b      	ldr	r3, [r7, #4]
 80371b2:	681b      	ldr	r3, [r3, #0]
 80371b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80371b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80371ba:	69bb      	ldr	r3, [r7, #24]
 80371bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80371c0:	2b00      	cmp	r3, #0
 80371c2:	d00f      	beq.n	80371e4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80371c4:	687b      	ldr	r3, [r7, #4]
 80371c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80371ca:	f043 0208 	orr.w	r2, r3, #8
 80371ce:	687b      	ldr	r3, [r7, #4]
 80371d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80371d4:	687b      	ldr	r3, [r7, #4]
 80371d6:	681b      	ldr	r3, [r3, #0]
 80371d8:	699a      	ldr	r2, [r3, #24]
 80371da:	687b      	ldr	r3, [r7, #4]
 80371dc:	681b      	ldr	r3, [r3, #0]
 80371de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80371e2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80371e4:	69bb      	ldr	r3, [r7, #24]
 80371e6:	f003 0320 	and.w	r3, r3, #32
 80371ea:	2b00      	cmp	r3, #0
 80371ec:	d00f      	beq.n	803720e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80371ee:	687b      	ldr	r3, [r7, #4]
 80371f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80371f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80371f8:	687b      	ldr	r3, [r7, #4]
 80371fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80371fe:	687b      	ldr	r3, [r7, #4]
 8037200:	681b      	ldr	r3, [r3, #0]
 8037202:	699a      	ldr	r2, [r3, #24]
 8037204:	687b      	ldr	r3, [r7, #4]
 8037206:	681b      	ldr	r3, [r3, #0]
 8037208:	f042 0220 	orr.w	r2, r2, #32
 803720c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 803720e:	687b      	ldr	r3, [r7, #4]
 8037210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037214:	2b00      	cmp	r3, #0
 8037216:	d05a      	beq.n	80372ce <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8037218:	687b      	ldr	r3, [r7, #4]
 803721a:	681b      	ldr	r3, [r3, #0]
 803721c:	681a      	ldr	r2, [r3, #0]
 803721e:	687b      	ldr	r3, [r7, #4]
 8037220:	681b      	ldr	r3, [r3, #0]
 8037222:	f022 0201 	bic.w	r2, r2, #1
 8037226:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8037228:	687b      	ldr	r3, [r7, #4]
 803722a:	681b      	ldr	r3, [r3, #0]
 803722c:	6919      	ldr	r1, [r3, #16]
 803722e:	687b      	ldr	r3, [r7, #4]
 8037230:	681a      	ldr	r2, [r3, #0]
 8037232:	4b29      	ldr	r3, [pc, #164]	; (80372d8 <HAL_SPI_IRQHandler+0x390>)
 8037234:	400b      	ands	r3, r1
 8037236:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8037238:	697b      	ldr	r3, [r7, #20]
 803723a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 803723e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8037242:	d138      	bne.n	80372b6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8037244:	687b      	ldr	r3, [r7, #4]
 8037246:	681b      	ldr	r3, [r3, #0]
 8037248:	689a      	ldr	r2, [r3, #8]
 803724a:	687b      	ldr	r3, [r7, #4]
 803724c:	681b      	ldr	r3, [r3, #0]
 803724e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8037252:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8037254:	687b      	ldr	r3, [r7, #4]
 8037256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037258:	2b00      	cmp	r3, #0
 803725a:	d013      	beq.n	8037284 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 803725c:	687b      	ldr	r3, [r7, #4]
 803725e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037260:	4a1e      	ldr	r2, [pc, #120]	; (80372dc <HAL_SPI_IRQHandler+0x394>)
 8037262:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8037264:	687b      	ldr	r3, [r7, #4]
 8037266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037268:	4618      	mov	r0, r3
 803726a:	f7f8 fbc1 	bl	802f9f0 <HAL_DMA_Abort_IT>
 803726e:	4603      	mov	r3, r0
 8037270:	2b00      	cmp	r3, #0
 8037272:	d007      	beq.n	8037284 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8037274:	687b      	ldr	r3, [r7, #4]
 8037276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803727a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803727e:	687b      	ldr	r3, [r7, #4]
 8037280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8037284:	687b      	ldr	r3, [r7, #4]
 8037286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037288:	2b00      	cmp	r3, #0
 803728a:	d020      	beq.n	80372ce <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 803728c:	687b      	ldr	r3, [r7, #4]
 803728e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037290:	4a12      	ldr	r2, [pc, #72]	; (80372dc <HAL_SPI_IRQHandler+0x394>)
 8037292:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8037294:	687b      	ldr	r3, [r7, #4]
 8037296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037298:	4618      	mov	r0, r3
 803729a:	f7f8 fba9 	bl	802f9f0 <HAL_DMA_Abort_IT>
 803729e:	4603      	mov	r3, r0
 80372a0:	2b00      	cmp	r3, #0
 80372a2:	d014      	beq.n	80372ce <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80372a4:	687b      	ldr	r3, [r7, #4]
 80372a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80372aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80372ae:	687b      	ldr	r3, [r7, #4]
 80372b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80372b4:	e00b      	b.n	80372ce <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80372b6:	687b      	ldr	r3, [r7, #4]
 80372b8:	2201      	movs	r2, #1
 80372ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80372be:	6878      	ldr	r0, [r7, #4]
 80372c0:	f000 f84a 	bl	8037358 <HAL_SPI_ErrorCallback>
    return;
 80372c4:	e003      	b.n	80372ce <HAL_SPI_IRQHandler+0x386>
    return;
 80372c6:	bf00      	nop
 80372c8:	e002      	b.n	80372d0 <HAL_SPI_IRQHandler+0x388>
    return;
 80372ca:	bf00      	nop
 80372cc:	e000      	b.n	80372d0 <HAL_SPI_IRQHandler+0x388>
    return;
 80372ce:	bf00      	nop
  }
}
 80372d0:	3728      	adds	r7, #40	; 0x28
 80372d2:	46bd      	mov	sp, r7
 80372d4:	bd80      	pop	{r7, pc}
 80372d6:	bf00      	nop
 80372d8:	fffffc94 	.word	0xfffffc94
 80372dc:	080374f5 	.word	0x080374f5

080372e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80372e0:	b480      	push	{r7}
 80372e2:	b083      	sub	sp, #12
 80372e4:	af00      	add	r7, sp, #0
 80372e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80372e8:	bf00      	nop
 80372ea:	370c      	adds	r7, #12
 80372ec:	46bd      	mov	sp, r7
 80372ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80372f2:	4770      	bx	lr

080372f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80372f4:	b480      	push	{r7}
 80372f6:	b083      	sub	sp, #12
 80372f8:	af00      	add	r7, sp, #0
 80372fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80372fc:	bf00      	nop
 80372fe:	370c      	adds	r7, #12
 8037300:	46bd      	mov	sp, r7
 8037302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037306:	4770      	bx	lr

08037308 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8037308:	b480      	push	{r7}
 803730a:	b083      	sub	sp, #12
 803730c:	af00      	add	r7, sp, #0
 803730e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8037310:	bf00      	nop
 8037312:	370c      	adds	r7, #12
 8037314:	46bd      	mov	sp, r7
 8037316:	f85d 7b04 	ldr.w	r7, [sp], #4
 803731a:	4770      	bx	lr

0803731c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 803731c:	b480      	push	{r7}
 803731e:	b083      	sub	sp, #12
 8037320:	af00      	add	r7, sp, #0
 8037322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8037324:	bf00      	nop
 8037326:	370c      	adds	r7, #12
 8037328:	46bd      	mov	sp, r7
 803732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803732e:	4770      	bx	lr

08037330 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8037330:	b480      	push	{r7}
 8037332:	b083      	sub	sp, #12
 8037334:	af00      	add	r7, sp, #0
 8037336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8037338:	bf00      	nop
 803733a:	370c      	adds	r7, #12
 803733c:	46bd      	mov	sp, r7
 803733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037342:	4770      	bx	lr

08037344 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8037344:	b480      	push	{r7}
 8037346:	b083      	sub	sp, #12
 8037348:	af00      	add	r7, sp, #0
 803734a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 803734c:	bf00      	nop
 803734e:	370c      	adds	r7, #12
 8037350:	46bd      	mov	sp, r7
 8037352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037356:	4770      	bx	lr

08037358 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8037358:	b480      	push	{r7}
 803735a:	b083      	sub	sp, #12
 803735c:	af00      	add	r7, sp, #0
 803735e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8037360:	bf00      	nop
 8037362:	370c      	adds	r7, #12
 8037364:	46bd      	mov	sp, r7
 8037366:	f85d 7b04 	ldr.w	r7, [sp], #4
 803736a:	4770      	bx	lr

0803736c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 803736c:	b480      	push	{r7}
 803736e:	b083      	sub	sp, #12
 8037370:	af00      	add	r7, sp, #0
 8037372:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8037374:	687b      	ldr	r3, [r7, #4]
 8037376:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803737a:	b2db      	uxtb	r3, r3
}
 803737c:	4618      	mov	r0, r3
 803737e:	370c      	adds	r7, #12
 8037380:	46bd      	mov	sp, r7
 8037382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037386:	4770      	bx	lr

08037388 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8037388:	b580      	push	{r7, lr}
 803738a:	b084      	sub	sp, #16
 803738c:	af00      	add	r7, sp, #0
 803738e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8037390:	687b      	ldr	r3, [r7, #4]
 8037392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037394:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8037396:	68fb      	ldr	r3, [r7, #12]
 8037398:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803739c:	b2db      	uxtb	r3, r3
 803739e:	2b07      	cmp	r3, #7
 80373a0:	d011      	beq.n	80373c6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80373a2:	68fb      	ldr	r3, [r7, #12]
 80373a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80373a6:	69db      	ldr	r3, [r3, #28]
 80373a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80373ac:	d103      	bne.n	80373b6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80373ae:	68f8      	ldr	r0, [r7, #12]
 80373b0:	f7ff ff96 	bl	80372e0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80373b4:	e007      	b.n	80373c6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80373b6:	68fb      	ldr	r3, [r7, #12]
 80373b8:	681b      	ldr	r3, [r3, #0]
 80373ba:	691a      	ldr	r2, [r3, #16]
 80373bc:	68fb      	ldr	r3, [r7, #12]
 80373be:	681b      	ldr	r3, [r3, #0]
 80373c0:	f042 0208 	orr.w	r2, r2, #8
 80373c4:	611a      	str	r2, [r3, #16]
}
 80373c6:	bf00      	nop
 80373c8:	3710      	adds	r7, #16
 80373ca:	46bd      	mov	sp, r7
 80373cc:	bd80      	pop	{r7, pc}

080373ce <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80373ce:	b580      	push	{r7, lr}
 80373d0:	b084      	sub	sp, #16
 80373d2:	af00      	add	r7, sp, #0
 80373d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80373d6:	687b      	ldr	r3, [r7, #4]
 80373d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80373da:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80373dc:	68fb      	ldr	r3, [r7, #12]
 80373de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80373e2:	b2db      	uxtb	r3, r3
 80373e4:	2b07      	cmp	r3, #7
 80373e6:	d011      	beq.n	803740c <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80373e8:	68fb      	ldr	r3, [r7, #12]
 80373ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80373ec:	69db      	ldr	r3, [r3, #28]
 80373ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80373f2:	d103      	bne.n	80373fc <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80373f4:	68f8      	ldr	r0, [r7, #12]
 80373f6:	f7ff ff7d 	bl	80372f4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80373fa:	e007      	b.n	803740c <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80373fc:	68fb      	ldr	r3, [r7, #12]
 80373fe:	681b      	ldr	r3, [r3, #0]
 8037400:	691a      	ldr	r2, [r3, #16]
 8037402:	68fb      	ldr	r3, [r7, #12]
 8037404:	681b      	ldr	r3, [r3, #0]
 8037406:	f042 0208 	orr.w	r2, r2, #8
 803740a:	611a      	str	r2, [r3, #16]
}
 803740c:	bf00      	nop
 803740e:	3710      	adds	r7, #16
 8037410:	46bd      	mov	sp, r7
 8037412:	bd80      	pop	{r7, pc}

08037414 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8037414:	b580      	push	{r7, lr}
 8037416:	b084      	sub	sp, #16
 8037418:	af00      	add	r7, sp, #0
 803741a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803741c:	687b      	ldr	r3, [r7, #4]
 803741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037420:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8037422:	68fb      	ldr	r3, [r7, #12]
 8037424:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037428:	b2db      	uxtb	r3, r3
 803742a:	2b07      	cmp	r3, #7
 803742c:	d011      	beq.n	8037452 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 803742e:	68fb      	ldr	r3, [r7, #12]
 8037430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037432:	69db      	ldr	r3, [r3, #28]
 8037434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8037438:	d103      	bne.n	8037442 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 803743a:	68f8      	ldr	r0, [r7, #12]
 803743c:	f7ff ff64 	bl	8037308 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8037440:	e007      	b.n	8037452 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8037442:	68fb      	ldr	r3, [r7, #12]
 8037444:	681b      	ldr	r3, [r3, #0]
 8037446:	691a      	ldr	r2, [r3, #16]
 8037448:	68fb      	ldr	r3, [r7, #12]
 803744a:	681b      	ldr	r3, [r3, #0]
 803744c:	f042 0208 	orr.w	r2, r2, #8
 8037450:	611a      	str	r2, [r3, #16]
}
 8037452:	bf00      	nop
 8037454:	3710      	adds	r7, #16
 8037456:	46bd      	mov	sp, r7
 8037458:	bd80      	pop	{r7, pc}

0803745a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 803745a:	b580      	push	{r7, lr}
 803745c:	b084      	sub	sp, #16
 803745e:	af00      	add	r7, sp, #0
 8037460:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8037462:	687b      	ldr	r3, [r7, #4]
 8037464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037466:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8037468:	68f8      	ldr	r0, [r7, #12]
 803746a:	f7ff ff57 	bl	803731c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803746e:	bf00      	nop
 8037470:	3710      	adds	r7, #16
 8037472:	46bd      	mov	sp, r7
 8037474:	bd80      	pop	{r7, pc}

08037476 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8037476:	b580      	push	{r7, lr}
 8037478:	b084      	sub	sp, #16
 803747a:	af00      	add	r7, sp, #0
 803747c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803747e:	687b      	ldr	r3, [r7, #4]
 8037480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037482:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8037484:	68f8      	ldr	r0, [r7, #12]
 8037486:	f7ff ff53 	bl	8037330 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803748a:	bf00      	nop
 803748c:	3710      	adds	r7, #16
 803748e:	46bd      	mov	sp, r7
 8037490:	bd80      	pop	{r7, pc}

08037492 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8037492:	b580      	push	{r7, lr}
 8037494:	b084      	sub	sp, #16
 8037496:	af00      	add	r7, sp, #0
 8037498:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803749a:	687b      	ldr	r3, [r7, #4]
 803749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803749e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80374a0:	68f8      	ldr	r0, [r7, #12]
 80374a2:	f7ff ff4f 	bl	8037344 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80374a6:	bf00      	nop
 80374a8:	3710      	adds	r7, #16
 80374aa:	46bd      	mov	sp, r7
 80374ac:	bd80      	pop	{r7, pc}

080374ae <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80374ae:	b580      	push	{r7, lr}
 80374b0:	b084      	sub	sp, #16
 80374b2:	af00      	add	r7, sp, #0
 80374b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80374b6:	687b      	ldr	r3, [r7, #4]
 80374b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80374ba:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80374bc:	6878      	ldr	r0, [r7, #4]
 80374be:	f7f9 fc15 	bl	8030cec <HAL_DMA_GetError>
 80374c2:	4603      	mov	r3, r0
 80374c4:	2b02      	cmp	r3, #2
 80374c6:	d011      	beq.n	80374ec <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80374c8:	68f8      	ldr	r0, [r7, #12]
 80374ca:	f000 f82d 	bl	8037528 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80374ce:	68fb      	ldr	r3, [r7, #12]
 80374d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80374d4:	f043 0210 	orr.w	r2, r3, #16
 80374d8:	68fb      	ldr	r3, [r7, #12]
 80374da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80374de:	68fb      	ldr	r3, [r7, #12]
 80374e0:	2201      	movs	r2, #1
 80374e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80374e6:	68f8      	ldr	r0, [r7, #12]
 80374e8:	f7ff ff36 	bl	8037358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80374ec:	bf00      	nop
 80374ee:	3710      	adds	r7, #16
 80374f0:	46bd      	mov	sp, r7
 80374f2:	bd80      	pop	{r7, pc}

080374f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80374f4:	b580      	push	{r7, lr}
 80374f6:	b084      	sub	sp, #16
 80374f8:	af00      	add	r7, sp, #0
 80374fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80374fc:	687b      	ldr	r3, [r7, #4]
 80374fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037500:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8037502:	68fb      	ldr	r3, [r7, #12]
 8037504:	2200      	movs	r2, #0
 8037506:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 803750a:	68fb      	ldr	r3, [r7, #12]
 803750c:	2200      	movs	r2, #0
 803750e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8037512:	68fb      	ldr	r3, [r7, #12]
 8037514:	2201      	movs	r2, #1
 8037516:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 803751a:	68f8      	ldr	r0, [r7, #12]
 803751c:	f7ff ff1c 	bl	8037358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8037520:	bf00      	nop
 8037522:	3710      	adds	r7, #16
 8037524:	46bd      	mov	sp, r7
 8037526:	bd80      	pop	{r7, pc}

08037528 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8037528:	b480      	push	{r7}
 803752a:	b085      	sub	sp, #20
 803752c:	af00      	add	r7, sp, #0
 803752e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8037530:	687b      	ldr	r3, [r7, #4]
 8037532:	681b      	ldr	r3, [r3, #0]
 8037534:	695b      	ldr	r3, [r3, #20]
 8037536:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8037538:	687b      	ldr	r3, [r7, #4]
 803753a:	681b      	ldr	r3, [r3, #0]
 803753c:	699a      	ldr	r2, [r3, #24]
 803753e:	687b      	ldr	r3, [r7, #4]
 8037540:	681b      	ldr	r3, [r3, #0]
 8037542:	f042 0208 	orr.w	r2, r2, #8
 8037546:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8037548:	687b      	ldr	r3, [r7, #4]
 803754a:	681b      	ldr	r3, [r3, #0]
 803754c:	699a      	ldr	r2, [r3, #24]
 803754e:	687b      	ldr	r3, [r7, #4]
 8037550:	681b      	ldr	r3, [r3, #0]
 8037552:	f042 0210 	orr.w	r2, r2, #16
 8037556:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8037558:	687b      	ldr	r3, [r7, #4]
 803755a:	681b      	ldr	r3, [r3, #0]
 803755c:	681a      	ldr	r2, [r3, #0]
 803755e:	687b      	ldr	r3, [r7, #4]
 8037560:	681b      	ldr	r3, [r3, #0]
 8037562:	f022 0201 	bic.w	r2, r2, #1
 8037566:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8037568:	687b      	ldr	r3, [r7, #4]
 803756a:	681b      	ldr	r3, [r3, #0]
 803756c:	6919      	ldr	r1, [r3, #16]
 803756e:	687b      	ldr	r3, [r7, #4]
 8037570:	681a      	ldr	r2, [r3, #0]
 8037572:	4b3c      	ldr	r3, [pc, #240]	; (8037664 <SPI_CloseTransfer+0x13c>)
 8037574:	400b      	ands	r3, r1
 8037576:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8037578:	687b      	ldr	r3, [r7, #4]
 803757a:	681b      	ldr	r3, [r3, #0]
 803757c:	689a      	ldr	r2, [r3, #8]
 803757e:	687b      	ldr	r3, [r7, #4]
 8037580:	681b      	ldr	r3, [r3, #0]
 8037582:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8037586:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8037588:	687b      	ldr	r3, [r7, #4]
 803758a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803758e:	b2db      	uxtb	r3, r3
 8037590:	2b04      	cmp	r3, #4
 8037592:	d014      	beq.n	80375be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8037594:	68fb      	ldr	r3, [r7, #12]
 8037596:	f003 0320 	and.w	r3, r3, #32
 803759a:	2b00      	cmp	r3, #0
 803759c:	d00f      	beq.n	80375be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 803759e:	687b      	ldr	r3, [r7, #4]
 80375a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80375a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80375a8:	687b      	ldr	r3, [r7, #4]
 80375aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80375ae:	687b      	ldr	r3, [r7, #4]
 80375b0:	681b      	ldr	r3, [r3, #0]
 80375b2:	699a      	ldr	r2, [r3, #24]
 80375b4:	687b      	ldr	r3, [r7, #4]
 80375b6:	681b      	ldr	r3, [r3, #0]
 80375b8:	f042 0220 	orr.w	r2, r2, #32
 80375bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80375be:	687b      	ldr	r3, [r7, #4]
 80375c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80375c4:	b2db      	uxtb	r3, r3
 80375c6:	2b03      	cmp	r3, #3
 80375c8:	d014      	beq.n	80375f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80375ca:	68fb      	ldr	r3, [r7, #12]
 80375cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80375d0:	2b00      	cmp	r3, #0
 80375d2:	d00f      	beq.n	80375f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80375d4:	687b      	ldr	r3, [r7, #4]
 80375d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80375da:	f043 0204 	orr.w	r2, r3, #4
 80375de:	687b      	ldr	r3, [r7, #4]
 80375e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80375e4:	687b      	ldr	r3, [r7, #4]
 80375e6:	681b      	ldr	r3, [r3, #0]
 80375e8:	699a      	ldr	r2, [r3, #24]
 80375ea:	687b      	ldr	r3, [r7, #4]
 80375ec:	681b      	ldr	r3, [r3, #0]
 80375ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80375f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80375f4:	68fb      	ldr	r3, [r7, #12]
 80375f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80375fa:	2b00      	cmp	r3, #0
 80375fc:	d00f      	beq.n	803761e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80375fe:	687b      	ldr	r3, [r7, #4]
 8037600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037604:	f043 0201 	orr.w	r2, r3, #1
 8037608:	687b      	ldr	r3, [r7, #4]
 803760a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 803760e:	687b      	ldr	r3, [r7, #4]
 8037610:	681b      	ldr	r3, [r3, #0]
 8037612:	699a      	ldr	r2, [r3, #24]
 8037614:	687b      	ldr	r3, [r7, #4]
 8037616:	681b      	ldr	r3, [r3, #0]
 8037618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803761c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 803761e:	68fb      	ldr	r3, [r7, #12]
 8037620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037624:	2b00      	cmp	r3, #0
 8037626:	d00f      	beq.n	8037648 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8037628:	687b      	ldr	r3, [r7, #4]
 803762a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803762e:	f043 0208 	orr.w	r2, r3, #8
 8037632:	687b      	ldr	r3, [r7, #4]
 8037634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8037638:	687b      	ldr	r3, [r7, #4]
 803763a:	681b      	ldr	r3, [r3, #0]
 803763c:	699a      	ldr	r2, [r3, #24]
 803763e:	687b      	ldr	r3, [r7, #4]
 8037640:	681b      	ldr	r3, [r3, #0]
 8037642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8037646:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8037648:	687b      	ldr	r3, [r7, #4]
 803764a:	2200      	movs	r2, #0
 803764c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8037650:	687b      	ldr	r3, [r7, #4]
 8037652:	2200      	movs	r2, #0
 8037654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8037658:	bf00      	nop
 803765a:	3714      	adds	r7, #20
 803765c:	46bd      	mov	sp, r7
 803765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037662:	4770      	bx	lr
 8037664:	fffffc90 	.word	0xfffffc90

08037668 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8037668:	b480      	push	{r7}
 803766a:	b085      	sub	sp, #20
 803766c:	af00      	add	r7, sp, #0
 803766e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8037670:	687b      	ldr	r3, [r7, #4]
 8037672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8037674:	095b      	lsrs	r3, r3, #5
 8037676:	3301      	adds	r3, #1
 8037678:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 803767a:	687b      	ldr	r3, [r7, #4]
 803767c:	68db      	ldr	r3, [r3, #12]
 803767e:	3301      	adds	r3, #1
 8037680:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8037682:	68bb      	ldr	r3, [r7, #8]
 8037684:	3307      	adds	r3, #7
 8037686:	08db      	lsrs	r3, r3, #3
 8037688:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 803768a:	68bb      	ldr	r3, [r7, #8]
 803768c:	68fa      	ldr	r2, [r7, #12]
 803768e:	fb02 f303 	mul.w	r3, r2, r3
}
 8037692:	4618      	mov	r0, r3
 8037694:	3714      	adds	r7, #20
 8037696:	46bd      	mov	sp, r7
 8037698:	f85d 7b04 	ldr.w	r7, [sp], #4
 803769c:	4770      	bx	lr

0803769e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 803769e:	b580      	push	{r7, lr}
 80376a0:	b082      	sub	sp, #8
 80376a2:	af00      	add	r7, sp, #0
 80376a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80376a6:	687b      	ldr	r3, [r7, #4]
 80376a8:	2b00      	cmp	r3, #0
 80376aa:	d101      	bne.n	80376b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80376ac:	2301      	movs	r3, #1
 80376ae:	e049      	b.n	8037744 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80376b0:	687b      	ldr	r3, [r7, #4]
 80376b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80376b6:	b2db      	uxtb	r3, r3
 80376b8:	2b00      	cmp	r3, #0
 80376ba:	d106      	bne.n	80376ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80376bc:	687b      	ldr	r3, [r7, #4]
 80376be:	2200      	movs	r2, #0
 80376c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80376c4:	6878      	ldr	r0, [r7, #4]
 80376c6:	f7f5 ff5b 	bl	802d580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80376ca:	687b      	ldr	r3, [r7, #4]
 80376cc:	2202      	movs	r2, #2
 80376ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80376d2:	687b      	ldr	r3, [r7, #4]
 80376d4:	681a      	ldr	r2, [r3, #0]
 80376d6:	687b      	ldr	r3, [r7, #4]
 80376d8:	3304      	adds	r3, #4
 80376da:	4619      	mov	r1, r3
 80376dc:	4610      	mov	r0, r2
 80376de:	f000 faed 	bl	8037cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80376e2:	687b      	ldr	r3, [r7, #4]
 80376e4:	2201      	movs	r2, #1
 80376e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80376ea:	687b      	ldr	r3, [r7, #4]
 80376ec:	2201      	movs	r2, #1
 80376ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80376f2:	687b      	ldr	r3, [r7, #4]
 80376f4:	2201      	movs	r2, #1
 80376f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80376fa:	687b      	ldr	r3, [r7, #4]
 80376fc:	2201      	movs	r2, #1
 80376fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8037702:	687b      	ldr	r3, [r7, #4]
 8037704:	2201      	movs	r2, #1
 8037706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 803770a:	687b      	ldr	r3, [r7, #4]
 803770c:	2201      	movs	r2, #1
 803770e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8037712:	687b      	ldr	r3, [r7, #4]
 8037714:	2201      	movs	r2, #1
 8037716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 803771a:	687b      	ldr	r3, [r7, #4]
 803771c:	2201      	movs	r2, #1
 803771e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8037722:	687b      	ldr	r3, [r7, #4]
 8037724:	2201      	movs	r2, #1
 8037726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 803772a:	687b      	ldr	r3, [r7, #4]
 803772c:	2201      	movs	r2, #1
 803772e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8037732:	687b      	ldr	r3, [r7, #4]
 8037734:	2201      	movs	r2, #1
 8037736:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 803773a:	687b      	ldr	r3, [r7, #4]
 803773c:	2201      	movs	r2, #1
 803773e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8037742:	2300      	movs	r3, #0
}
 8037744:	4618      	mov	r0, r3
 8037746:	3708      	adds	r7, #8
 8037748:	46bd      	mov	sp, r7
 803774a:	bd80      	pop	{r7, pc}

0803774c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 803774c:	b480      	push	{r7}
 803774e:	b085      	sub	sp, #20
 8037750:	af00      	add	r7, sp, #0
 8037752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8037754:	687b      	ldr	r3, [r7, #4]
 8037756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803775a:	b2db      	uxtb	r3, r3
 803775c:	2b01      	cmp	r3, #1
 803775e:	d001      	beq.n	8037764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8037760:	2301      	movs	r3, #1
 8037762:	e054      	b.n	803780e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8037764:	687b      	ldr	r3, [r7, #4]
 8037766:	2202      	movs	r2, #2
 8037768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 803776c:	687b      	ldr	r3, [r7, #4]
 803776e:	681b      	ldr	r3, [r3, #0]
 8037770:	68da      	ldr	r2, [r3, #12]
 8037772:	687b      	ldr	r3, [r7, #4]
 8037774:	681b      	ldr	r3, [r3, #0]
 8037776:	f042 0201 	orr.w	r2, r2, #1
 803777a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 803777c:	687b      	ldr	r3, [r7, #4]
 803777e:	681b      	ldr	r3, [r3, #0]
 8037780:	4a26      	ldr	r2, [pc, #152]	; (803781c <HAL_TIM_Base_Start_IT+0xd0>)
 8037782:	4293      	cmp	r3, r2
 8037784:	d022      	beq.n	80377cc <HAL_TIM_Base_Start_IT+0x80>
 8037786:	687b      	ldr	r3, [r7, #4]
 8037788:	681b      	ldr	r3, [r3, #0]
 803778a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803778e:	d01d      	beq.n	80377cc <HAL_TIM_Base_Start_IT+0x80>
 8037790:	687b      	ldr	r3, [r7, #4]
 8037792:	681b      	ldr	r3, [r3, #0]
 8037794:	4a22      	ldr	r2, [pc, #136]	; (8037820 <HAL_TIM_Base_Start_IT+0xd4>)
 8037796:	4293      	cmp	r3, r2
 8037798:	d018      	beq.n	80377cc <HAL_TIM_Base_Start_IT+0x80>
 803779a:	687b      	ldr	r3, [r7, #4]
 803779c:	681b      	ldr	r3, [r3, #0]
 803779e:	4a21      	ldr	r2, [pc, #132]	; (8037824 <HAL_TIM_Base_Start_IT+0xd8>)
 80377a0:	4293      	cmp	r3, r2
 80377a2:	d013      	beq.n	80377cc <HAL_TIM_Base_Start_IT+0x80>
 80377a4:	687b      	ldr	r3, [r7, #4]
 80377a6:	681b      	ldr	r3, [r3, #0]
 80377a8:	4a1f      	ldr	r2, [pc, #124]	; (8037828 <HAL_TIM_Base_Start_IT+0xdc>)
 80377aa:	4293      	cmp	r3, r2
 80377ac:	d00e      	beq.n	80377cc <HAL_TIM_Base_Start_IT+0x80>
 80377ae:	687b      	ldr	r3, [r7, #4]
 80377b0:	681b      	ldr	r3, [r3, #0]
 80377b2:	4a1e      	ldr	r2, [pc, #120]	; (803782c <HAL_TIM_Base_Start_IT+0xe0>)
 80377b4:	4293      	cmp	r3, r2
 80377b6:	d009      	beq.n	80377cc <HAL_TIM_Base_Start_IT+0x80>
 80377b8:	687b      	ldr	r3, [r7, #4]
 80377ba:	681b      	ldr	r3, [r3, #0]
 80377bc:	4a1c      	ldr	r2, [pc, #112]	; (8037830 <HAL_TIM_Base_Start_IT+0xe4>)
 80377be:	4293      	cmp	r3, r2
 80377c0:	d004      	beq.n	80377cc <HAL_TIM_Base_Start_IT+0x80>
 80377c2:	687b      	ldr	r3, [r7, #4]
 80377c4:	681b      	ldr	r3, [r3, #0]
 80377c6:	4a1b      	ldr	r2, [pc, #108]	; (8037834 <HAL_TIM_Base_Start_IT+0xe8>)
 80377c8:	4293      	cmp	r3, r2
 80377ca:	d115      	bne.n	80377f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80377cc:	687b      	ldr	r3, [r7, #4]
 80377ce:	681b      	ldr	r3, [r3, #0]
 80377d0:	689a      	ldr	r2, [r3, #8]
 80377d2:	4b19      	ldr	r3, [pc, #100]	; (8037838 <HAL_TIM_Base_Start_IT+0xec>)
 80377d4:	4013      	ands	r3, r2
 80377d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80377d8:	68fb      	ldr	r3, [r7, #12]
 80377da:	2b06      	cmp	r3, #6
 80377dc:	d015      	beq.n	803780a <HAL_TIM_Base_Start_IT+0xbe>
 80377de:	68fb      	ldr	r3, [r7, #12]
 80377e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80377e4:	d011      	beq.n	803780a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80377e6:	687b      	ldr	r3, [r7, #4]
 80377e8:	681b      	ldr	r3, [r3, #0]
 80377ea:	681a      	ldr	r2, [r3, #0]
 80377ec:	687b      	ldr	r3, [r7, #4]
 80377ee:	681b      	ldr	r3, [r3, #0]
 80377f0:	f042 0201 	orr.w	r2, r2, #1
 80377f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80377f6:	e008      	b.n	803780a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80377f8:	687b      	ldr	r3, [r7, #4]
 80377fa:	681b      	ldr	r3, [r3, #0]
 80377fc:	681a      	ldr	r2, [r3, #0]
 80377fe:	687b      	ldr	r3, [r7, #4]
 8037800:	681b      	ldr	r3, [r3, #0]
 8037802:	f042 0201 	orr.w	r2, r2, #1
 8037806:	601a      	str	r2, [r3, #0]
 8037808:	e000      	b.n	803780c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803780a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 803780c:	2300      	movs	r3, #0
}
 803780e:	4618      	mov	r0, r3
 8037810:	3714      	adds	r7, #20
 8037812:	46bd      	mov	sp, r7
 8037814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037818:	4770      	bx	lr
 803781a:	bf00      	nop
 803781c:	40010000 	.word	0x40010000
 8037820:	40000400 	.word	0x40000400
 8037824:	40000800 	.word	0x40000800
 8037828:	40000c00 	.word	0x40000c00
 803782c:	40010400 	.word	0x40010400
 8037830:	40001800 	.word	0x40001800
 8037834:	40014000 	.word	0x40014000
 8037838:	00010007 	.word	0x00010007

0803783c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 803783c:	b580      	push	{r7, lr}
 803783e:	b082      	sub	sp, #8
 8037840:	af00      	add	r7, sp, #0
 8037842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8037844:	687b      	ldr	r3, [r7, #4]
 8037846:	681b      	ldr	r3, [r3, #0]
 8037848:	691b      	ldr	r3, [r3, #16]
 803784a:	f003 0302 	and.w	r3, r3, #2
 803784e:	2b02      	cmp	r3, #2
 8037850:	d122      	bne.n	8037898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8037852:	687b      	ldr	r3, [r7, #4]
 8037854:	681b      	ldr	r3, [r3, #0]
 8037856:	68db      	ldr	r3, [r3, #12]
 8037858:	f003 0302 	and.w	r3, r3, #2
 803785c:	2b02      	cmp	r3, #2
 803785e:	d11b      	bne.n	8037898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8037860:	687b      	ldr	r3, [r7, #4]
 8037862:	681b      	ldr	r3, [r3, #0]
 8037864:	f06f 0202 	mvn.w	r2, #2
 8037868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 803786a:	687b      	ldr	r3, [r7, #4]
 803786c:	2201      	movs	r2, #1
 803786e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8037870:	687b      	ldr	r3, [r7, #4]
 8037872:	681b      	ldr	r3, [r3, #0]
 8037874:	699b      	ldr	r3, [r3, #24]
 8037876:	f003 0303 	and.w	r3, r3, #3
 803787a:	2b00      	cmp	r3, #0
 803787c:	d003      	beq.n	8037886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 803787e:	6878      	ldr	r0, [r7, #4]
 8037880:	f000 f9fe 	bl	8037c80 <HAL_TIM_IC_CaptureCallback>
 8037884:	e005      	b.n	8037892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8037886:	6878      	ldr	r0, [r7, #4]
 8037888:	f000 f9f0 	bl	8037c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 803788c:	6878      	ldr	r0, [r7, #4]
 803788e:	f000 fa01 	bl	8037c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8037892:	687b      	ldr	r3, [r7, #4]
 8037894:	2200      	movs	r2, #0
 8037896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8037898:	687b      	ldr	r3, [r7, #4]
 803789a:	681b      	ldr	r3, [r3, #0]
 803789c:	691b      	ldr	r3, [r3, #16]
 803789e:	f003 0304 	and.w	r3, r3, #4
 80378a2:	2b04      	cmp	r3, #4
 80378a4:	d122      	bne.n	80378ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80378a6:	687b      	ldr	r3, [r7, #4]
 80378a8:	681b      	ldr	r3, [r3, #0]
 80378aa:	68db      	ldr	r3, [r3, #12]
 80378ac:	f003 0304 	and.w	r3, r3, #4
 80378b0:	2b04      	cmp	r3, #4
 80378b2:	d11b      	bne.n	80378ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80378b4:	687b      	ldr	r3, [r7, #4]
 80378b6:	681b      	ldr	r3, [r3, #0]
 80378b8:	f06f 0204 	mvn.w	r2, #4
 80378bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80378be:	687b      	ldr	r3, [r7, #4]
 80378c0:	2202      	movs	r2, #2
 80378c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80378c4:	687b      	ldr	r3, [r7, #4]
 80378c6:	681b      	ldr	r3, [r3, #0]
 80378c8:	699b      	ldr	r3, [r3, #24]
 80378ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80378ce:	2b00      	cmp	r3, #0
 80378d0:	d003      	beq.n	80378da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80378d2:	6878      	ldr	r0, [r7, #4]
 80378d4:	f000 f9d4 	bl	8037c80 <HAL_TIM_IC_CaptureCallback>
 80378d8:	e005      	b.n	80378e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80378da:	6878      	ldr	r0, [r7, #4]
 80378dc:	f000 f9c6 	bl	8037c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80378e0:	6878      	ldr	r0, [r7, #4]
 80378e2:	f000 f9d7 	bl	8037c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80378e6:	687b      	ldr	r3, [r7, #4]
 80378e8:	2200      	movs	r2, #0
 80378ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80378ec:	687b      	ldr	r3, [r7, #4]
 80378ee:	681b      	ldr	r3, [r3, #0]
 80378f0:	691b      	ldr	r3, [r3, #16]
 80378f2:	f003 0308 	and.w	r3, r3, #8
 80378f6:	2b08      	cmp	r3, #8
 80378f8:	d122      	bne.n	8037940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80378fa:	687b      	ldr	r3, [r7, #4]
 80378fc:	681b      	ldr	r3, [r3, #0]
 80378fe:	68db      	ldr	r3, [r3, #12]
 8037900:	f003 0308 	and.w	r3, r3, #8
 8037904:	2b08      	cmp	r3, #8
 8037906:	d11b      	bne.n	8037940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8037908:	687b      	ldr	r3, [r7, #4]
 803790a:	681b      	ldr	r3, [r3, #0]
 803790c:	f06f 0208 	mvn.w	r2, #8
 8037910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8037912:	687b      	ldr	r3, [r7, #4]
 8037914:	2204      	movs	r2, #4
 8037916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8037918:	687b      	ldr	r3, [r7, #4]
 803791a:	681b      	ldr	r3, [r3, #0]
 803791c:	69db      	ldr	r3, [r3, #28]
 803791e:	f003 0303 	and.w	r3, r3, #3
 8037922:	2b00      	cmp	r3, #0
 8037924:	d003      	beq.n	803792e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8037926:	6878      	ldr	r0, [r7, #4]
 8037928:	f000 f9aa 	bl	8037c80 <HAL_TIM_IC_CaptureCallback>
 803792c:	e005      	b.n	803793a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 803792e:	6878      	ldr	r0, [r7, #4]
 8037930:	f000 f99c 	bl	8037c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037934:	6878      	ldr	r0, [r7, #4]
 8037936:	f000 f9ad 	bl	8037c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803793a:	687b      	ldr	r3, [r7, #4]
 803793c:	2200      	movs	r2, #0
 803793e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8037940:	687b      	ldr	r3, [r7, #4]
 8037942:	681b      	ldr	r3, [r3, #0]
 8037944:	691b      	ldr	r3, [r3, #16]
 8037946:	f003 0310 	and.w	r3, r3, #16
 803794a:	2b10      	cmp	r3, #16
 803794c:	d122      	bne.n	8037994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 803794e:	687b      	ldr	r3, [r7, #4]
 8037950:	681b      	ldr	r3, [r3, #0]
 8037952:	68db      	ldr	r3, [r3, #12]
 8037954:	f003 0310 	and.w	r3, r3, #16
 8037958:	2b10      	cmp	r3, #16
 803795a:	d11b      	bne.n	8037994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 803795c:	687b      	ldr	r3, [r7, #4]
 803795e:	681b      	ldr	r3, [r3, #0]
 8037960:	f06f 0210 	mvn.w	r2, #16
 8037964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8037966:	687b      	ldr	r3, [r7, #4]
 8037968:	2208      	movs	r2, #8
 803796a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 803796c:	687b      	ldr	r3, [r7, #4]
 803796e:	681b      	ldr	r3, [r3, #0]
 8037970:	69db      	ldr	r3, [r3, #28]
 8037972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8037976:	2b00      	cmp	r3, #0
 8037978:	d003      	beq.n	8037982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803797a:	6878      	ldr	r0, [r7, #4]
 803797c:	f000 f980 	bl	8037c80 <HAL_TIM_IC_CaptureCallback>
 8037980:	e005      	b.n	803798e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8037982:	6878      	ldr	r0, [r7, #4]
 8037984:	f000 f972 	bl	8037c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037988:	6878      	ldr	r0, [r7, #4]
 803798a:	f000 f983 	bl	8037c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803798e:	687b      	ldr	r3, [r7, #4]
 8037990:	2200      	movs	r2, #0
 8037992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8037994:	687b      	ldr	r3, [r7, #4]
 8037996:	681b      	ldr	r3, [r3, #0]
 8037998:	691b      	ldr	r3, [r3, #16]
 803799a:	f003 0301 	and.w	r3, r3, #1
 803799e:	2b01      	cmp	r3, #1
 80379a0:	d10e      	bne.n	80379c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80379a2:	687b      	ldr	r3, [r7, #4]
 80379a4:	681b      	ldr	r3, [r3, #0]
 80379a6:	68db      	ldr	r3, [r3, #12]
 80379a8:	f003 0301 	and.w	r3, r3, #1
 80379ac:	2b01      	cmp	r3, #1
 80379ae:	d107      	bne.n	80379c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80379b0:	687b      	ldr	r3, [r7, #4]
 80379b2:	681b      	ldr	r3, [r3, #0]
 80379b4:	f06f 0201 	mvn.w	r2, #1
 80379b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80379ba:	6878      	ldr	r0, [r7, #4]
 80379bc:	f7f5 f96a 	bl	802cc94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80379c0:	687b      	ldr	r3, [r7, #4]
 80379c2:	681b      	ldr	r3, [r3, #0]
 80379c4:	691b      	ldr	r3, [r3, #16]
 80379c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80379ca:	2b80      	cmp	r3, #128	; 0x80
 80379cc:	d10e      	bne.n	80379ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80379ce:	687b      	ldr	r3, [r7, #4]
 80379d0:	681b      	ldr	r3, [r3, #0]
 80379d2:	68db      	ldr	r3, [r3, #12]
 80379d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80379d8:	2b80      	cmp	r3, #128	; 0x80
 80379da:	d107      	bne.n	80379ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80379dc:	687b      	ldr	r3, [r7, #4]
 80379de:	681b      	ldr	r3, [r3, #0]
 80379e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80379e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80379e6:	6878      	ldr	r0, [r7, #4]
 80379e8:	f000 fb38 	bl	803805c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80379ec:	687b      	ldr	r3, [r7, #4]
 80379ee:	681b      	ldr	r3, [r3, #0]
 80379f0:	691b      	ldr	r3, [r3, #16]
 80379f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80379f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80379fa:	d10e      	bne.n	8037a1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80379fc:	687b      	ldr	r3, [r7, #4]
 80379fe:	681b      	ldr	r3, [r3, #0]
 8037a00:	68db      	ldr	r3, [r3, #12]
 8037a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8037a06:	2b80      	cmp	r3, #128	; 0x80
 8037a08:	d107      	bne.n	8037a1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8037a0a:	687b      	ldr	r3, [r7, #4]
 8037a0c:	681b      	ldr	r3, [r3, #0]
 8037a0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8037a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8037a14:	6878      	ldr	r0, [r7, #4]
 8037a16:	f000 fb2b 	bl	8038070 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8037a1a:	687b      	ldr	r3, [r7, #4]
 8037a1c:	681b      	ldr	r3, [r3, #0]
 8037a1e:	691b      	ldr	r3, [r3, #16]
 8037a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037a24:	2b40      	cmp	r3, #64	; 0x40
 8037a26:	d10e      	bne.n	8037a46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8037a28:	687b      	ldr	r3, [r7, #4]
 8037a2a:	681b      	ldr	r3, [r3, #0]
 8037a2c:	68db      	ldr	r3, [r3, #12]
 8037a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037a32:	2b40      	cmp	r3, #64	; 0x40
 8037a34:	d107      	bne.n	8037a46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8037a36:	687b      	ldr	r3, [r7, #4]
 8037a38:	681b      	ldr	r3, [r3, #0]
 8037a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8037a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8037a40:	6878      	ldr	r0, [r7, #4]
 8037a42:	f000 f931 	bl	8037ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8037a46:	687b      	ldr	r3, [r7, #4]
 8037a48:	681b      	ldr	r3, [r3, #0]
 8037a4a:	691b      	ldr	r3, [r3, #16]
 8037a4c:	f003 0320 	and.w	r3, r3, #32
 8037a50:	2b20      	cmp	r3, #32
 8037a52:	d10e      	bne.n	8037a72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8037a54:	687b      	ldr	r3, [r7, #4]
 8037a56:	681b      	ldr	r3, [r3, #0]
 8037a58:	68db      	ldr	r3, [r3, #12]
 8037a5a:	f003 0320 	and.w	r3, r3, #32
 8037a5e:	2b20      	cmp	r3, #32
 8037a60:	d107      	bne.n	8037a72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8037a62:	687b      	ldr	r3, [r7, #4]
 8037a64:	681b      	ldr	r3, [r3, #0]
 8037a66:	f06f 0220 	mvn.w	r2, #32
 8037a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8037a6c:	6878      	ldr	r0, [r7, #4]
 8037a6e:	f000 faeb 	bl	8038048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8037a72:	bf00      	nop
 8037a74:	3708      	adds	r7, #8
 8037a76:	46bd      	mov	sp, r7
 8037a78:	bd80      	pop	{r7, pc}
	...

08037a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8037a7c:	b580      	push	{r7, lr}
 8037a7e:	b084      	sub	sp, #16
 8037a80:	af00      	add	r7, sp, #0
 8037a82:	6078      	str	r0, [r7, #4]
 8037a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8037a86:	2300      	movs	r3, #0
 8037a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8037a8a:	687b      	ldr	r3, [r7, #4]
 8037a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8037a90:	2b01      	cmp	r3, #1
 8037a92:	d101      	bne.n	8037a98 <HAL_TIM_ConfigClockSource+0x1c>
 8037a94:	2302      	movs	r3, #2
 8037a96:	e0dc      	b.n	8037c52 <HAL_TIM_ConfigClockSource+0x1d6>
 8037a98:	687b      	ldr	r3, [r7, #4]
 8037a9a:	2201      	movs	r2, #1
 8037a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8037aa0:	687b      	ldr	r3, [r7, #4]
 8037aa2:	2202      	movs	r2, #2
 8037aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8037aa8:	687b      	ldr	r3, [r7, #4]
 8037aaa:	681b      	ldr	r3, [r3, #0]
 8037aac:	689b      	ldr	r3, [r3, #8]
 8037aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8037ab0:	68ba      	ldr	r2, [r7, #8]
 8037ab2:	4b6a      	ldr	r3, [pc, #424]	; (8037c5c <HAL_TIM_ConfigClockSource+0x1e0>)
 8037ab4:	4013      	ands	r3, r2
 8037ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8037ab8:	68bb      	ldr	r3, [r7, #8]
 8037aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8037abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8037ac0:	687b      	ldr	r3, [r7, #4]
 8037ac2:	681b      	ldr	r3, [r3, #0]
 8037ac4:	68ba      	ldr	r2, [r7, #8]
 8037ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8037ac8:	683b      	ldr	r3, [r7, #0]
 8037aca:	681b      	ldr	r3, [r3, #0]
 8037acc:	4a64      	ldr	r2, [pc, #400]	; (8037c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8037ace:	4293      	cmp	r3, r2
 8037ad0:	f000 80a9 	beq.w	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037ad4:	4a62      	ldr	r2, [pc, #392]	; (8037c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8037ad6:	4293      	cmp	r3, r2
 8037ad8:	f200 80ae 	bhi.w	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037adc:	4a61      	ldr	r2, [pc, #388]	; (8037c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8037ade:	4293      	cmp	r3, r2
 8037ae0:	f000 80a1 	beq.w	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037ae4:	4a5f      	ldr	r2, [pc, #380]	; (8037c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8037ae6:	4293      	cmp	r3, r2
 8037ae8:	f200 80a6 	bhi.w	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037aec:	4a5e      	ldr	r2, [pc, #376]	; (8037c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8037aee:	4293      	cmp	r3, r2
 8037af0:	f000 8099 	beq.w	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037af4:	4a5c      	ldr	r2, [pc, #368]	; (8037c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8037af6:	4293      	cmp	r3, r2
 8037af8:	f200 809e 	bhi.w	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037afc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8037b00:	f000 8091 	beq.w	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037b04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8037b08:	f200 8096 	bhi.w	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8037b10:	f000 8089 	beq.w	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8037b18:	f200 808e 	bhi.w	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037b20:	d03e      	beq.n	8037ba0 <HAL_TIM_ConfigClockSource+0x124>
 8037b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037b26:	f200 8087 	bhi.w	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8037b2e:	f000 8086 	beq.w	8037c3e <HAL_TIM_ConfigClockSource+0x1c2>
 8037b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8037b36:	d87f      	bhi.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b38:	2b70      	cmp	r3, #112	; 0x70
 8037b3a:	d01a      	beq.n	8037b72 <HAL_TIM_ConfigClockSource+0xf6>
 8037b3c:	2b70      	cmp	r3, #112	; 0x70
 8037b3e:	d87b      	bhi.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b40:	2b60      	cmp	r3, #96	; 0x60
 8037b42:	d050      	beq.n	8037be6 <HAL_TIM_ConfigClockSource+0x16a>
 8037b44:	2b60      	cmp	r3, #96	; 0x60
 8037b46:	d877      	bhi.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b48:	2b50      	cmp	r3, #80	; 0x50
 8037b4a:	d03c      	beq.n	8037bc6 <HAL_TIM_ConfigClockSource+0x14a>
 8037b4c:	2b50      	cmp	r3, #80	; 0x50
 8037b4e:	d873      	bhi.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b50:	2b40      	cmp	r3, #64	; 0x40
 8037b52:	d058      	beq.n	8037c06 <HAL_TIM_ConfigClockSource+0x18a>
 8037b54:	2b40      	cmp	r3, #64	; 0x40
 8037b56:	d86f      	bhi.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b58:	2b30      	cmp	r3, #48	; 0x30
 8037b5a:	d064      	beq.n	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037b5c:	2b30      	cmp	r3, #48	; 0x30
 8037b5e:	d86b      	bhi.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b60:	2b20      	cmp	r3, #32
 8037b62:	d060      	beq.n	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037b64:	2b20      	cmp	r3, #32
 8037b66:	d867      	bhi.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8037b68:	2b00      	cmp	r3, #0
 8037b6a:	d05c      	beq.n	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037b6c:	2b10      	cmp	r3, #16
 8037b6e:	d05a      	beq.n	8037c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8037b70:	e062      	b.n	8037c38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8037b72:	687b      	ldr	r3, [r7, #4]
 8037b74:	6818      	ldr	r0, [r3, #0]
 8037b76:	683b      	ldr	r3, [r7, #0]
 8037b78:	6899      	ldr	r1, [r3, #8]
 8037b7a:	683b      	ldr	r3, [r7, #0]
 8037b7c:	685a      	ldr	r2, [r3, #4]
 8037b7e:	683b      	ldr	r3, [r7, #0]
 8037b80:	68db      	ldr	r3, [r3, #12]
 8037b82:	f000 f9b3 	bl	8037eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8037b86:	687b      	ldr	r3, [r7, #4]
 8037b88:	681b      	ldr	r3, [r3, #0]
 8037b8a:	689b      	ldr	r3, [r3, #8]
 8037b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8037b8e:	68bb      	ldr	r3, [r7, #8]
 8037b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8037b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8037b96:	687b      	ldr	r3, [r7, #4]
 8037b98:	681b      	ldr	r3, [r3, #0]
 8037b9a:	68ba      	ldr	r2, [r7, #8]
 8037b9c:	609a      	str	r2, [r3, #8]
      break;
 8037b9e:	e04f      	b.n	8037c40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8037ba0:	687b      	ldr	r3, [r7, #4]
 8037ba2:	6818      	ldr	r0, [r3, #0]
 8037ba4:	683b      	ldr	r3, [r7, #0]
 8037ba6:	6899      	ldr	r1, [r3, #8]
 8037ba8:	683b      	ldr	r3, [r7, #0]
 8037baa:	685a      	ldr	r2, [r3, #4]
 8037bac:	683b      	ldr	r3, [r7, #0]
 8037bae:	68db      	ldr	r3, [r3, #12]
 8037bb0:	f000 f99c 	bl	8037eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8037bb4:	687b      	ldr	r3, [r7, #4]
 8037bb6:	681b      	ldr	r3, [r3, #0]
 8037bb8:	689a      	ldr	r2, [r3, #8]
 8037bba:	687b      	ldr	r3, [r7, #4]
 8037bbc:	681b      	ldr	r3, [r3, #0]
 8037bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8037bc2:	609a      	str	r2, [r3, #8]
      break;
 8037bc4:	e03c      	b.n	8037c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8037bc6:	687b      	ldr	r3, [r7, #4]
 8037bc8:	6818      	ldr	r0, [r3, #0]
 8037bca:	683b      	ldr	r3, [r7, #0]
 8037bcc:	6859      	ldr	r1, [r3, #4]
 8037bce:	683b      	ldr	r3, [r7, #0]
 8037bd0:	68db      	ldr	r3, [r3, #12]
 8037bd2:	461a      	mov	r2, r3
 8037bd4:	f000 f90c 	bl	8037df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8037bd8:	687b      	ldr	r3, [r7, #4]
 8037bda:	681b      	ldr	r3, [r3, #0]
 8037bdc:	2150      	movs	r1, #80	; 0x50
 8037bde:	4618      	mov	r0, r3
 8037be0:	f000 f966 	bl	8037eb0 <TIM_ITRx_SetConfig>
      break;
 8037be4:	e02c      	b.n	8037c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8037be6:	687b      	ldr	r3, [r7, #4]
 8037be8:	6818      	ldr	r0, [r3, #0]
 8037bea:	683b      	ldr	r3, [r7, #0]
 8037bec:	6859      	ldr	r1, [r3, #4]
 8037bee:	683b      	ldr	r3, [r7, #0]
 8037bf0:	68db      	ldr	r3, [r3, #12]
 8037bf2:	461a      	mov	r2, r3
 8037bf4:	f000 f92b 	bl	8037e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8037bf8:	687b      	ldr	r3, [r7, #4]
 8037bfa:	681b      	ldr	r3, [r3, #0]
 8037bfc:	2160      	movs	r1, #96	; 0x60
 8037bfe:	4618      	mov	r0, r3
 8037c00:	f000 f956 	bl	8037eb0 <TIM_ITRx_SetConfig>
      break;
 8037c04:	e01c      	b.n	8037c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8037c06:	687b      	ldr	r3, [r7, #4]
 8037c08:	6818      	ldr	r0, [r3, #0]
 8037c0a:	683b      	ldr	r3, [r7, #0]
 8037c0c:	6859      	ldr	r1, [r3, #4]
 8037c0e:	683b      	ldr	r3, [r7, #0]
 8037c10:	68db      	ldr	r3, [r3, #12]
 8037c12:	461a      	mov	r2, r3
 8037c14:	f000 f8ec 	bl	8037df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8037c18:	687b      	ldr	r3, [r7, #4]
 8037c1a:	681b      	ldr	r3, [r3, #0]
 8037c1c:	2140      	movs	r1, #64	; 0x40
 8037c1e:	4618      	mov	r0, r3
 8037c20:	f000 f946 	bl	8037eb0 <TIM_ITRx_SetConfig>
      break;
 8037c24:	e00c      	b.n	8037c40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8037c26:	687b      	ldr	r3, [r7, #4]
 8037c28:	681a      	ldr	r2, [r3, #0]
 8037c2a:	683b      	ldr	r3, [r7, #0]
 8037c2c:	681b      	ldr	r3, [r3, #0]
 8037c2e:	4619      	mov	r1, r3
 8037c30:	4610      	mov	r0, r2
 8037c32:	f000 f93d 	bl	8037eb0 <TIM_ITRx_SetConfig>
      break;
 8037c36:	e003      	b.n	8037c40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8037c38:	2301      	movs	r3, #1
 8037c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8037c3c:	e000      	b.n	8037c40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8037c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8037c40:	687b      	ldr	r3, [r7, #4]
 8037c42:	2201      	movs	r2, #1
 8037c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8037c48:	687b      	ldr	r3, [r7, #4]
 8037c4a:	2200      	movs	r2, #0
 8037c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8037c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8037c52:	4618      	mov	r0, r3
 8037c54:	3710      	adds	r7, #16
 8037c56:	46bd      	mov	sp, r7
 8037c58:	bd80      	pop	{r7, pc}
 8037c5a:	bf00      	nop
 8037c5c:	ffceff88 	.word	0xffceff88
 8037c60:	00100040 	.word	0x00100040
 8037c64:	00100030 	.word	0x00100030
 8037c68:	00100020 	.word	0x00100020

08037c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8037c6c:	b480      	push	{r7}
 8037c6e:	b083      	sub	sp, #12
 8037c70:	af00      	add	r7, sp, #0
 8037c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8037c74:	bf00      	nop
 8037c76:	370c      	adds	r7, #12
 8037c78:	46bd      	mov	sp, r7
 8037c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c7e:	4770      	bx	lr

08037c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8037c80:	b480      	push	{r7}
 8037c82:	b083      	sub	sp, #12
 8037c84:	af00      	add	r7, sp, #0
 8037c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8037c88:	bf00      	nop
 8037c8a:	370c      	adds	r7, #12
 8037c8c:	46bd      	mov	sp, r7
 8037c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c92:	4770      	bx	lr

08037c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8037c94:	b480      	push	{r7}
 8037c96:	b083      	sub	sp, #12
 8037c98:	af00      	add	r7, sp, #0
 8037c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8037c9c:	bf00      	nop
 8037c9e:	370c      	adds	r7, #12
 8037ca0:	46bd      	mov	sp, r7
 8037ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037ca6:	4770      	bx	lr

08037ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8037ca8:	b480      	push	{r7}
 8037caa:	b083      	sub	sp, #12
 8037cac:	af00      	add	r7, sp, #0
 8037cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8037cb0:	bf00      	nop
 8037cb2:	370c      	adds	r7, #12
 8037cb4:	46bd      	mov	sp, r7
 8037cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037cba:	4770      	bx	lr

08037cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8037cbc:	b480      	push	{r7}
 8037cbe:	b085      	sub	sp, #20
 8037cc0:	af00      	add	r7, sp, #0
 8037cc2:	6078      	str	r0, [r7, #4]
 8037cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8037cc6:	687b      	ldr	r3, [r7, #4]
 8037cc8:	681b      	ldr	r3, [r3, #0]
 8037cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8037ccc:	687b      	ldr	r3, [r7, #4]
 8037cce:	4a40      	ldr	r2, [pc, #256]	; (8037dd0 <TIM_Base_SetConfig+0x114>)
 8037cd0:	4293      	cmp	r3, r2
 8037cd2:	d013      	beq.n	8037cfc <TIM_Base_SetConfig+0x40>
 8037cd4:	687b      	ldr	r3, [r7, #4]
 8037cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8037cda:	d00f      	beq.n	8037cfc <TIM_Base_SetConfig+0x40>
 8037cdc:	687b      	ldr	r3, [r7, #4]
 8037cde:	4a3d      	ldr	r2, [pc, #244]	; (8037dd4 <TIM_Base_SetConfig+0x118>)
 8037ce0:	4293      	cmp	r3, r2
 8037ce2:	d00b      	beq.n	8037cfc <TIM_Base_SetConfig+0x40>
 8037ce4:	687b      	ldr	r3, [r7, #4]
 8037ce6:	4a3c      	ldr	r2, [pc, #240]	; (8037dd8 <TIM_Base_SetConfig+0x11c>)
 8037ce8:	4293      	cmp	r3, r2
 8037cea:	d007      	beq.n	8037cfc <TIM_Base_SetConfig+0x40>
 8037cec:	687b      	ldr	r3, [r7, #4]
 8037cee:	4a3b      	ldr	r2, [pc, #236]	; (8037ddc <TIM_Base_SetConfig+0x120>)
 8037cf0:	4293      	cmp	r3, r2
 8037cf2:	d003      	beq.n	8037cfc <TIM_Base_SetConfig+0x40>
 8037cf4:	687b      	ldr	r3, [r7, #4]
 8037cf6:	4a3a      	ldr	r2, [pc, #232]	; (8037de0 <TIM_Base_SetConfig+0x124>)
 8037cf8:	4293      	cmp	r3, r2
 8037cfa:	d108      	bne.n	8037d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8037cfc:	68fb      	ldr	r3, [r7, #12]
 8037cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8037d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8037d04:	683b      	ldr	r3, [r7, #0]
 8037d06:	685b      	ldr	r3, [r3, #4]
 8037d08:	68fa      	ldr	r2, [r7, #12]
 8037d0a:	4313      	orrs	r3, r2
 8037d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8037d0e:	687b      	ldr	r3, [r7, #4]
 8037d10:	4a2f      	ldr	r2, [pc, #188]	; (8037dd0 <TIM_Base_SetConfig+0x114>)
 8037d12:	4293      	cmp	r3, r2
 8037d14:	d01f      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d16:	687b      	ldr	r3, [r7, #4]
 8037d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8037d1c:	d01b      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d1e:	687b      	ldr	r3, [r7, #4]
 8037d20:	4a2c      	ldr	r2, [pc, #176]	; (8037dd4 <TIM_Base_SetConfig+0x118>)
 8037d22:	4293      	cmp	r3, r2
 8037d24:	d017      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d26:	687b      	ldr	r3, [r7, #4]
 8037d28:	4a2b      	ldr	r2, [pc, #172]	; (8037dd8 <TIM_Base_SetConfig+0x11c>)
 8037d2a:	4293      	cmp	r3, r2
 8037d2c:	d013      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d2e:	687b      	ldr	r3, [r7, #4]
 8037d30:	4a2a      	ldr	r2, [pc, #168]	; (8037ddc <TIM_Base_SetConfig+0x120>)
 8037d32:	4293      	cmp	r3, r2
 8037d34:	d00f      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d36:	687b      	ldr	r3, [r7, #4]
 8037d38:	4a29      	ldr	r2, [pc, #164]	; (8037de0 <TIM_Base_SetConfig+0x124>)
 8037d3a:	4293      	cmp	r3, r2
 8037d3c:	d00b      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d3e:	687b      	ldr	r3, [r7, #4]
 8037d40:	4a28      	ldr	r2, [pc, #160]	; (8037de4 <TIM_Base_SetConfig+0x128>)
 8037d42:	4293      	cmp	r3, r2
 8037d44:	d007      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d46:	687b      	ldr	r3, [r7, #4]
 8037d48:	4a27      	ldr	r2, [pc, #156]	; (8037de8 <TIM_Base_SetConfig+0x12c>)
 8037d4a:	4293      	cmp	r3, r2
 8037d4c:	d003      	beq.n	8037d56 <TIM_Base_SetConfig+0x9a>
 8037d4e:	687b      	ldr	r3, [r7, #4]
 8037d50:	4a26      	ldr	r2, [pc, #152]	; (8037dec <TIM_Base_SetConfig+0x130>)
 8037d52:	4293      	cmp	r3, r2
 8037d54:	d108      	bne.n	8037d68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8037d56:	68fb      	ldr	r3, [r7, #12]
 8037d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8037d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8037d5e:	683b      	ldr	r3, [r7, #0]
 8037d60:	68db      	ldr	r3, [r3, #12]
 8037d62:	68fa      	ldr	r2, [r7, #12]
 8037d64:	4313      	orrs	r3, r2
 8037d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8037d68:	68fb      	ldr	r3, [r7, #12]
 8037d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8037d6e:	683b      	ldr	r3, [r7, #0]
 8037d70:	695b      	ldr	r3, [r3, #20]
 8037d72:	4313      	orrs	r3, r2
 8037d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8037d76:	687b      	ldr	r3, [r7, #4]
 8037d78:	68fa      	ldr	r2, [r7, #12]
 8037d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8037d7c:	683b      	ldr	r3, [r7, #0]
 8037d7e:	689a      	ldr	r2, [r3, #8]
 8037d80:	687b      	ldr	r3, [r7, #4]
 8037d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8037d84:	683b      	ldr	r3, [r7, #0]
 8037d86:	681a      	ldr	r2, [r3, #0]
 8037d88:	687b      	ldr	r3, [r7, #4]
 8037d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8037d8c:	687b      	ldr	r3, [r7, #4]
 8037d8e:	4a10      	ldr	r2, [pc, #64]	; (8037dd0 <TIM_Base_SetConfig+0x114>)
 8037d90:	4293      	cmp	r3, r2
 8037d92:	d00f      	beq.n	8037db4 <TIM_Base_SetConfig+0xf8>
 8037d94:	687b      	ldr	r3, [r7, #4]
 8037d96:	4a12      	ldr	r2, [pc, #72]	; (8037de0 <TIM_Base_SetConfig+0x124>)
 8037d98:	4293      	cmp	r3, r2
 8037d9a:	d00b      	beq.n	8037db4 <TIM_Base_SetConfig+0xf8>
 8037d9c:	687b      	ldr	r3, [r7, #4]
 8037d9e:	4a11      	ldr	r2, [pc, #68]	; (8037de4 <TIM_Base_SetConfig+0x128>)
 8037da0:	4293      	cmp	r3, r2
 8037da2:	d007      	beq.n	8037db4 <TIM_Base_SetConfig+0xf8>
 8037da4:	687b      	ldr	r3, [r7, #4]
 8037da6:	4a10      	ldr	r2, [pc, #64]	; (8037de8 <TIM_Base_SetConfig+0x12c>)
 8037da8:	4293      	cmp	r3, r2
 8037daa:	d003      	beq.n	8037db4 <TIM_Base_SetConfig+0xf8>
 8037dac:	687b      	ldr	r3, [r7, #4]
 8037dae:	4a0f      	ldr	r2, [pc, #60]	; (8037dec <TIM_Base_SetConfig+0x130>)
 8037db0:	4293      	cmp	r3, r2
 8037db2:	d103      	bne.n	8037dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8037db4:	683b      	ldr	r3, [r7, #0]
 8037db6:	691a      	ldr	r2, [r3, #16]
 8037db8:	687b      	ldr	r3, [r7, #4]
 8037dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8037dbc:	687b      	ldr	r3, [r7, #4]
 8037dbe:	2201      	movs	r2, #1
 8037dc0:	615a      	str	r2, [r3, #20]
}
 8037dc2:	bf00      	nop
 8037dc4:	3714      	adds	r7, #20
 8037dc6:	46bd      	mov	sp, r7
 8037dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037dcc:	4770      	bx	lr
 8037dce:	bf00      	nop
 8037dd0:	40010000 	.word	0x40010000
 8037dd4:	40000400 	.word	0x40000400
 8037dd8:	40000800 	.word	0x40000800
 8037ddc:	40000c00 	.word	0x40000c00
 8037de0:	40010400 	.word	0x40010400
 8037de4:	40014000 	.word	0x40014000
 8037de8:	40014400 	.word	0x40014400
 8037dec:	40014800 	.word	0x40014800

08037df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8037df0:	b480      	push	{r7}
 8037df2:	b087      	sub	sp, #28
 8037df4:	af00      	add	r7, sp, #0
 8037df6:	60f8      	str	r0, [r7, #12]
 8037df8:	60b9      	str	r1, [r7, #8]
 8037dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8037dfc:	68fb      	ldr	r3, [r7, #12]
 8037dfe:	6a1b      	ldr	r3, [r3, #32]
 8037e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8037e02:	68fb      	ldr	r3, [r7, #12]
 8037e04:	6a1b      	ldr	r3, [r3, #32]
 8037e06:	f023 0201 	bic.w	r2, r3, #1
 8037e0a:	68fb      	ldr	r3, [r7, #12]
 8037e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8037e0e:	68fb      	ldr	r3, [r7, #12]
 8037e10:	699b      	ldr	r3, [r3, #24]
 8037e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8037e14:	693b      	ldr	r3, [r7, #16]
 8037e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8037e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8037e1c:	687b      	ldr	r3, [r7, #4]
 8037e1e:	011b      	lsls	r3, r3, #4
 8037e20:	693a      	ldr	r2, [r7, #16]
 8037e22:	4313      	orrs	r3, r2
 8037e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8037e26:	697b      	ldr	r3, [r7, #20]
 8037e28:	f023 030a 	bic.w	r3, r3, #10
 8037e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8037e2e:	697a      	ldr	r2, [r7, #20]
 8037e30:	68bb      	ldr	r3, [r7, #8]
 8037e32:	4313      	orrs	r3, r2
 8037e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8037e36:	68fb      	ldr	r3, [r7, #12]
 8037e38:	693a      	ldr	r2, [r7, #16]
 8037e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8037e3c:	68fb      	ldr	r3, [r7, #12]
 8037e3e:	697a      	ldr	r2, [r7, #20]
 8037e40:	621a      	str	r2, [r3, #32]
}
 8037e42:	bf00      	nop
 8037e44:	371c      	adds	r7, #28
 8037e46:	46bd      	mov	sp, r7
 8037e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037e4c:	4770      	bx	lr

08037e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8037e4e:	b480      	push	{r7}
 8037e50:	b087      	sub	sp, #28
 8037e52:	af00      	add	r7, sp, #0
 8037e54:	60f8      	str	r0, [r7, #12]
 8037e56:	60b9      	str	r1, [r7, #8]
 8037e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8037e5a:	68fb      	ldr	r3, [r7, #12]
 8037e5c:	6a1b      	ldr	r3, [r3, #32]
 8037e5e:	f023 0210 	bic.w	r2, r3, #16
 8037e62:	68fb      	ldr	r3, [r7, #12]
 8037e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8037e66:	68fb      	ldr	r3, [r7, #12]
 8037e68:	699b      	ldr	r3, [r3, #24]
 8037e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8037e6c:	68fb      	ldr	r3, [r7, #12]
 8037e6e:	6a1b      	ldr	r3, [r3, #32]
 8037e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8037e72:	697b      	ldr	r3, [r7, #20]
 8037e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8037e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8037e7a:	687b      	ldr	r3, [r7, #4]
 8037e7c:	031b      	lsls	r3, r3, #12
 8037e7e:	697a      	ldr	r2, [r7, #20]
 8037e80:	4313      	orrs	r3, r2
 8037e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8037e84:	693b      	ldr	r3, [r7, #16]
 8037e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8037e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8037e8c:	68bb      	ldr	r3, [r7, #8]
 8037e8e:	011b      	lsls	r3, r3, #4
 8037e90:	693a      	ldr	r2, [r7, #16]
 8037e92:	4313      	orrs	r3, r2
 8037e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8037e96:	68fb      	ldr	r3, [r7, #12]
 8037e98:	697a      	ldr	r2, [r7, #20]
 8037e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8037e9c:	68fb      	ldr	r3, [r7, #12]
 8037e9e:	693a      	ldr	r2, [r7, #16]
 8037ea0:	621a      	str	r2, [r3, #32]
}
 8037ea2:	bf00      	nop
 8037ea4:	371c      	adds	r7, #28
 8037ea6:	46bd      	mov	sp, r7
 8037ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037eac:	4770      	bx	lr
	...

08037eb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8037eb0:	b480      	push	{r7}
 8037eb2:	b085      	sub	sp, #20
 8037eb4:	af00      	add	r7, sp, #0
 8037eb6:	6078      	str	r0, [r7, #4]
 8037eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8037eba:	687b      	ldr	r3, [r7, #4]
 8037ebc:	689b      	ldr	r3, [r3, #8]
 8037ebe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8037ec0:	68fa      	ldr	r2, [r7, #12]
 8037ec2:	4b09      	ldr	r3, [pc, #36]	; (8037ee8 <TIM_ITRx_SetConfig+0x38>)
 8037ec4:	4013      	ands	r3, r2
 8037ec6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8037ec8:	683a      	ldr	r2, [r7, #0]
 8037eca:	68fb      	ldr	r3, [r7, #12]
 8037ecc:	4313      	orrs	r3, r2
 8037ece:	f043 0307 	orr.w	r3, r3, #7
 8037ed2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8037ed4:	687b      	ldr	r3, [r7, #4]
 8037ed6:	68fa      	ldr	r2, [r7, #12]
 8037ed8:	609a      	str	r2, [r3, #8]
}
 8037eda:	bf00      	nop
 8037edc:	3714      	adds	r7, #20
 8037ede:	46bd      	mov	sp, r7
 8037ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037ee4:	4770      	bx	lr
 8037ee6:	bf00      	nop
 8037ee8:	ffcfff8f 	.word	0xffcfff8f

08037eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8037eec:	b480      	push	{r7}
 8037eee:	b087      	sub	sp, #28
 8037ef0:	af00      	add	r7, sp, #0
 8037ef2:	60f8      	str	r0, [r7, #12]
 8037ef4:	60b9      	str	r1, [r7, #8]
 8037ef6:	607a      	str	r2, [r7, #4]
 8037ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8037efa:	68fb      	ldr	r3, [r7, #12]
 8037efc:	689b      	ldr	r3, [r3, #8]
 8037efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8037f00:	697b      	ldr	r3, [r7, #20]
 8037f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8037f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8037f08:	683b      	ldr	r3, [r7, #0]
 8037f0a:	021a      	lsls	r2, r3, #8
 8037f0c:	687b      	ldr	r3, [r7, #4]
 8037f0e:	431a      	orrs	r2, r3
 8037f10:	68bb      	ldr	r3, [r7, #8]
 8037f12:	4313      	orrs	r3, r2
 8037f14:	697a      	ldr	r2, [r7, #20]
 8037f16:	4313      	orrs	r3, r2
 8037f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8037f1a:	68fb      	ldr	r3, [r7, #12]
 8037f1c:	697a      	ldr	r2, [r7, #20]
 8037f1e:	609a      	str	r2, [r3, #8]
}
 8037f20:	bf00      	nop
 8037f22:	371c      	adds	r7, #28
 8037f24:	46bd      	mov	sp, r7
 8037f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037f2a:	4770      	bx	lr

08037f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8037f2c:	b480      	push	{r7}
 8037f2e:	b085      	sub	sp, #20
 8037f30:	af00      	add	r7, sp, #0
 8037f32:	6078      	str	r0, [r7, #4]
 8037f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8037f36:	687b      	ldr	r3, [r7, #4]
 8037f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8037f3c:	2b01      	cmp	r3, #1
 8037f3e:	d101      	bne.n	8037f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8037f40:	2302      	movs	r3, #2
 8037f42:	e06d      	b.n	8038020 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8037f44:	687b      	ldr	r3, [r7, #4]
 8037f46:	2201      	movs	r2, #1
 8037f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8037f4c:	687b      	ldr	r3, [r7, #4]
 8037f4e:	2202      	movs	r2, #2
 8037f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8037f54:	687b      	ldr	r3, [r7, #4]
 8037f56:	681b      	ldr	r3, [r3, #0]
 8037f58:	685b      	ldr	r3, [r3, #4]
 8037f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8037f5c:	687b      	ldr	r3, [r7, #4]
 8037f5e:	681b      	ldr	r3, [r3, #0]
 8037f60:	689b      	ldr	r3, [r3, #8]
 8037f62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8037f64:	687b      	ldr	r3, [r7, #4]
 8037f66:	681b      	ldr	r3, [r3, #0]
 8037f68:	4a30      	ldr	r2, [pc, #192]	; (803802c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8037f6a:	4293      	cmp	r3, r2
 8037f6c:	d004      	beq.n	8037f78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8037f6e:	687b      	ldr	r3, [r7, #4]
 8037f70:	681b      	ldr	r3, [r3, #0]
 8037f72:	4a2f      	ldr	r2, [pc, #188]	; (8038030 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8037f74:	4293      	cmp	r3, r2
 8037f76:	d108      	bne.n	8037f8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8037f78:	68fb      	ldr	r3, [r7, #12]
 8037f7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8037f7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8037f80:	683b      	ldr	r3, [r7, #0]
 8037f82:	685b      	ldr	r3, [r3, #4]
 8037f84:	68fa      	ldr	r2, [r7, #12]
 8037f86:	4313      	orrs	r3, r2
 8037f88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8037f8a:	68fb      	ldr	r3, [r7, #12]
 8037f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8037f90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8037f92:	683b      	ldr	r3, [r7, #0]
 8037f94:	681b      	ldr	r3, [r3, #0]
 8037f96:	68fa      	ldr	r2, [r7, #12]
 8037f98:	4313      	orrs	r3, r2
 8037f9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8037f9c:	687b      	ldr	r3, [r7, #4]
 8037f9e:	681b      	ldr	r3, [r3, #0]
 8037fa0:	68fa      	ldr	r2, [r7, #12]
 8037fa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8037fa4:	687b      	ldr	r3, [r7, #4]
 8037fa6:	681b      	ldr	r3, [r3, #0]
 8037fa8:	4a20      	ldr	r2, [pc, #128]	; (803802c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8037faa:	4293      	cmp	r3, r2
 8037fac:	d022      	beq.n	8037ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8037fae:	687b      	ldr	r3, [r7, #4]
 8037fb0:	681b      	ldr	r3, [r3, #0]
 8037fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8037fb6:	d01d      	beq.n	8037ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8037fb8:	687b      	ldr	r3, [r7, #4]
 8037fba:	681b      	ldr	r3, [r3, #0]
 8037fbc:	4a1d      	ldr	r2, [pc, #116]	; (8038034 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8037fbe:	4293      	cmp	r3, r2
 8037fc0:	d018      	beq.n	8037ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8037fc2:	687b      	ldr	r3, [r7, #4]
 8037fc4:	681b      	ldr	r3, [r3, #0]
 8037fc6:	4a1c      	ldr	r2, [pc, #112]	; (8038038 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8037fc8:	4293      	cmp	r3, r2
 8037fca:	d013      	beq.n	8037ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8037fcc:	687b      	ldr	r3, [r7, #4]
 8037fce:	681b      	ldr	r3, [r3, #0]
 8037fd0:	4a1a      	ldr	r2, [pc, #104]	; (803803c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8037fd2:	4293      	cmp	r3, r2
 8037fd4:	d00e      	beq.n	8037ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8037fd6:	687b      	ldr	r3, [r7, #4]
 8037fd8:	681b      	ldr	r3, [r3, #0]
 8037fda:	4a15      	ldr	r2, [pc, #84]	; (8038030 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8037fdc:	4293      	cmp	r3, r2
 8037fde:	d009      	beq.n	8037ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8037fe0:	687b      	ldr	r3, [r7, #4]
 8037fe2:	681b      	ldr	r3, [r3, #0]
 8037fe4:	4a16      	ldr	r2, [pc, #88]	; (8038040 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8037fe6:	4293      	cmp	r3, r2
 8037fe8:	d004      	beq.n	8037ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8037fea:	687b      	ldr	r3, [r7, #4]
 8037fec:	681b      	ldr	r3, [r3, #0]
 8037fee:	4a15      	ldr	r2, [pc, #84]	; (8038044 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8037ff0:	4293      	cmp	r3, r2
 8037ff2:	d10c      	bne.n	803800e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8037ff4:	68bb      	ldr	r3, [r7, #8]
 8037ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8037ffa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8037ffc:	683b      	ldr	r3, [r7, #0]
 8037ffe:	689b      	ldr	r3, [r3, #8]
 8038000:	68ba      	ldr	r2, [r7, #8]
 8038002:	4313      	orrs	r3, r2
 8038004:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8038006:	687b      	ldr	r3, [r7, #4]
 8038008:	681b      	ldr	r3, [r3, #0]
 803800a:	68ba      	ldr	r2, [r7, #8]
 803800c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 803800e:	687b      	ldr	r3, [r7, #4]
 8038010:	2201      	movs	r2, #1
 8038012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8038016:	687b      	ldr	r3, [r7, #4]
 8038018:	2200      	movs	r2, #0
 803801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 803801e:	2300      	movs	r3, #0
}
 8038020:	4618      	mov	r0, r3
 8038022:	3714      	adds	r7, #20
 8038024:	46bd      	mov	sp, r7
 8038026:	f85d 7b04 	ldr.w	r7, [sp], #4
 803802a:	4770      	bx	lr
 803802c:	40010000 	.word	0x40010000
 8038030:	40010400 	.word	0x40010400
 8038034:	40000400 	.word	0x40000400
 8038038:	40000800 	.word	0x40000800
 803803c:	40000c00 	.word	0x40000c00
 8038040:	40001800 	.word	0x40001800
 8038044:	40014000 	.word	0x40014000

08038048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8038048:	b480      	push	{r7}
 803804a:	b083      	sub	sp, #12
 803804c:	af00      	add	r7, sp, #0
 803804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8038050:	bf00      	nop
 8038052:	370c      	adds	r7, #12
 8038054:	46bd      	mov	sp, r7
 8038056:	f85d 7b04 	ldr.w	r7, [sp], #4
 803805a:	4770      	bx	lr

0803805c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 803805c:	b480      	push	{r7}
 803805e:	b083      	sub	sp, #12
 8038060:	af00      	add	r7, sp, #0
 8038062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8038064:	bf00      	nop
 8038066:	370c      	adds	r7, #12
 8038068:	46bd      	mov	sp, r7
 803806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803806e:	4770      	bx	lr

08038070 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8038070:	b480      	push	{r7}
 8038072:	b083      	sub	sp, #12
 8038074:	af00      	add	r7, sp, #0
 8038076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8038078:	bf00      	nop
 803807a:	370c      	adds	r7, #12
 803807c:	46bd      	mov	sp, r7
 803807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038082:	4770      	bx	lr

08038084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8038084:	b580      	push	{r7, lr}
 8038086:	b082      	sub	sp, #8
 8038088:	af00      	add	r7, sp, #0
 803808a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 803808c:	687b      	ldr	r3, [r7, #4]
 803808e:	2b00      	cmp	r3, #0
 8038090:	d101      	bne.n	8038096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8038092:	2301      	movs	r3, #1
 8038094:	e042      	b.n	803811c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8038096:	687b      	ldr	r3, [r7, #4]
 8038098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803809c:	2b00      	cmp	r3, #0
 803809e:	d106      	bne.n	80380ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80380a0:	687b      	ldr	r3, [r7, #4]
 80380a2:	2200      	movs	r2, #0
 80380a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80380a8:	6878      	ldr	r0, [r7, #4]
 80380aa:	f7f5 fc65 	bl	802d978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80380ae:	687b      	ldr	r3, [r7, #4]
 80380b0:	2224      	movs	r2, #36	; 0x24
 80380b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80380b6:	687b      	ldr	r3, [r7, #4]
 80380b8:	681b      	ldr	r3, [r3, #0]
 80380ba:	681a      	ldr	r2, [r3, #0]
 80380bc:	687b      	ldr	r3, [r7, #4]
 80380be:	681b      	ldr	r3, [r3, #0]
 80380c0:	f022 0201 	bic.w	r2, r2, #1
 80380c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80380c6:	6878      	ldr	r0, [r7, #4]
 80380c8:	f000 fdb2 	bl	8038c30 <UART_SetConfig>
 80380cc:	4603      	mov	r3, r0
 80380ce:	2b01      	cmp	r3, #1
 80380d0:	d101      	bne.n	80380d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80380d2:	2301      	movs	r3, #1
 80380d4:	e022      	b.n	803811c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80380d6:	687b      	ldr	r3, [r7, #4]
 80380d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80380da:	2b00      	cmp	r3, #0
 80380dc:	d002      	beq.n	80380e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80380de:	6878      	ldr	r0, [r7, #4]
 80380e0:	f001 fb0e 	bl	8039700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80380e4:	687b      	ldr	r3, [r7, #4]
 80380e6:	681b      	ldr	r3, [r3, #0]
 80380e8:	685a      	ldr	r2, [r3, #4]
 80380ea:	687b      	ldr	r3, [r7, #4]
 80380ec:	681b      	ldr	r3, [r3, #0]
 80380ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80380f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80380f4:	687b      	ldr	r3, [r7, #4]
 80380f6:	681b      	ldr	r3, [r3, #0]
 80380f8:	689a      	ldr	r2, [r3, #8]
 80380fa:	687b      	ldr	r3, [r7, #4]
 80380fc:	681b      	ldr	r3, [r3, #0]
 80380fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8038102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8038104:	687b      	ldr	r3, [r7, #4]
 8038106:	681b      	ldr	r3, [r3, #0]
 8038108:	681a      	ldr	r2, [r3, #0]
 803810a:	687b      	ldr	r3, [r7, #4]
 803810c:	681b      	ldr	r3, [r3, #0]
 803810e:	f042 0201 	orr.w	r2, r2, #1
 8038112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8038114:	6878      	ldr	r0, [r7, #4]
 8038116:	f001 fb95 	bl	8039844 <UART_CheckIdleState>
 803811a:	4603      	mov	r3, r0
}
 803811c:	4618      	mov	r0, r3
 803811e:	3708      	adds	r7, #8
 8038120:	46bd      	mov	sp, r7
 8038122:	bd80      	pop	{r7, pc}

08038124 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8038124:	b580      	push	{r7, lr}
 8038126:	b08a      	sub	sp, #40	; 0x28
 8038128:	af02      	add	r7, sp, #8
 803812a:	60f8      	str	r0, [r7, #12]
 803812c:	60b9      	str	r1, [r7, #8]
 803812e:	603b      	str	r3, [r7, #0]
 8038130:	4613      	mov	r3, r2
 8038132:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8038134:	68fb      	ldr	r3, [r7, #12]
 8038136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803813a:	2b20      	cmp	r3, #32
 803813c:	f040 80c0 	bne.w	80382c0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8038140:	68bb      	ldr	r3, [r7, #8]
 8038142:	2b00      	cmp	r3, #0
 8038144:	d002      	beq.n	803814c <HAL_UART_Receive+0x28>
 8038146:	88fb      	ldrh	r3, [r7, #6]
 8038148:	2b00      	cmp	r3, #0
 803814a:	d101      	bne.n	8038150 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 803814c:	2301      	movs	r3, #1
 803814e:	e0b8      	b.n	80382c2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8038150:	68fb      	ldr	r3, [r7, #12]
 8038152:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8038156:	2b01      	cmp	r3, #1
 8038158:	d101      	bne.n	803815e <HAL_UART_Receive+0x3a>
 803815a:	2302      	movs	r3, #2
 803815c:	e0b1      	b.n	80382c2 <HAL_UART_Receive+0x19e>
 803815e:	68fb      	ldr	r3, [r7, #12]
 8038160:	2201      	movs	r2, #1
 8038162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038166:	68fb      	ldr	r3, [r7, #12]
 8038168:	2200      	movs	r2, #0
 803816a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 803816e:	68fb      	ldr	r3, [r7, #12]
 8038170:	2222      	movs	r2, #34	; 0x22
 8038172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038176:	68fb      	ldr	r3, [r7, #12]
 8038178:	2200      	movs	r2, #0
 803817a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 803817c:	f7f5 fe58 	bl	802de30 <HAL_GetTick>
 8038180:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8038182:	68fb      	ldr	r3, [r7, #12]
 8038184:	88fa      	ldrh	r2, [r7, #6]
 8038186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 803818a:	68fb      	ldr	r3, [r7, #12]
 803818c:	88fa      	ldrh	r2, [r7, #6]
 803818e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8038192:	68fb      	ldr	r3, [r7, #12]
 8038194:	689b      	ldr	r3, [r3, #8]
 8038196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803819a:	d10e      	bne.n	80381ba <HAL_UART_Receive+0x96>
 803819c:	68fb      	ldr	r3, [r7, #12]
 803819e:	691b      	ldr	r3, [r3, #16]
 80381a0:	2b00      	cmp	r3, #0
 80381a2:	d105      	bne.n	80381b0 <HAL_UART_Receive+0x8c>
 80381a4:	68fb      	ldr	r3, [r7, #12]
 80381a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80381aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80381ae:	e02d      	b.n	803820c <HAL_UART_Receive+0xe8>
 80381b0:	68fb      	ldr	r3, [r7, #12]
 80381b2:	22ff      	movs	r2, #255	; 0xff
 80381b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80381b8:	e028      	b.n	803820c <HAL_UART_Receive+0xe8>
 80381ba:	68fb      	ldr	r3, [r7, #12]
 80381bc:	689b      	ldr	r3, [r3, #8]
 80381be:	2b00      	cmp	r3, #0
 80381c0:	d10d      	bne.n	80381de <HAL_UART_Receive+0xba>
 80381c2:	68fb      	ldr	r3, [r7, #12]
 80381c4:	691b      	ldr	r3, [r3, #16]
 80381c6:	2b00      	cmp	r3, #0
 80381c8:	d104      	bne.n	80381d4 <HAL_UART_Receive+0xb0>
 80381ca:	68fb      	ldr	r3, [r7, #12]
 80381cc:	22ff      	movs	r2, #255	; 0xff
 80381ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80381d2:	e01b      	b.n	803820c <HAL_UART_Receive+0xe8>
 80381d4:	68fb      	ldr	r3, [r7, #12]
 80381d6:	227f      	movs	r2, #127	; 0x7f
 80381d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80381dc:	e016      	b.n	803820c <HAL_UART_Receive+0xe8>
 80381de:	68fb      	ldr	r3, [r7, #12]
 80381e0:	689b      	ldr	r3, [r3, #8]
 80381e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80381e6:	d10d      	bne.n	8038204 <HAL_UART_Receive+0xe0>
 80381e8:	68fb      	ldr	r3, [r7, #12]
 80381ea:	691b      	ldr	r3, [r3, #16]
 80381ec:	2b00      	cmp	r3, #0
 80381ee:	d104      	bne.n	80381fa <HAL_UART_Receive+0xd6>
 80381f0:	68fb      	ldr	r3, [r7, #12]
 80381f2:	227f      	movs	r2, #127	; 0x7f
 80381f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80381f8:	e008      	b.n	803820c <HAL_UART_Receive+0xe8>
 80381fa:	68fb      	ldr	r3, [r7, #12]
 80381fc:	223f      	movs	r2, #63	; 0x3f
 80381fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8038202:	e003      	b.n	803820c <HAL_UART_Receive+0xe8>
 8038204:	68fb      	ldr	r3, [r7, #12]
 8038206:	2200      	movs	r2, #0
 8038208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 803820c:	68fb      	ldr	r3, [r7, #12]
 803820e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8038212:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8038214:	68fb      	ldr	r3, [r7, #12]
 8038216:	689b      	ldr	r3, [r3, #8]
 8038218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803821c:	d108      	bne.n	8038230 <HAL_UART_Receive+0x10c>
 803821e:	68fb      	ldr	r3, [r7, #12]
 8038220:	691b      	ldr	r3, [r3, #16]
 8038222:	2b00      	cmp	r3, #0
 8038224:	d104      	bne.n	8038230 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8038226:	2300      	movs	r3, #0
 8038228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 803822a:	68bb      	ldr	r3, [r7, #8]
 803822c:	61bb      	str	r3, [r7, #24]
 803822e:	e003      	b.n	8038238 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8038230:	68bb      	ldr	r3, [r7, #8]
 8038232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8038234:	2300      	movs	r3, #0
 8038236:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8038238:	68fb      	ldr	r3, [r7, #12]
 803823a:	2200      	movs	r2, #0
 803823c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8038240:	e032      	b.n	80382a8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8038242:	683b      	ldr	r3, [r7, #0]
 8038244:	9300      	str	r3, [sp, #0]
 8038246:	697b      	ldr	r3, [r7, #20]
 8038248:	2200      	movs	r2, #0
 803824a:	2120      	movs	r1, #32
 803824c:	68f8      	ldr	r0, [r7, #12]
 803824e:	f001 fb44 	bl	80398da <UART_WaitOnFlagUntilTimeout>
 8038252:	4603      	mov	r3, r0
 8038254:	2b00      	cmp	r3, #0
 8038256:	d001      	beq.n	803825c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8038258:	2303      	movs	r3, #3
 803825a:	e032      	b.n	80382c2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 803825c:	69fb      	ldr	r3, [r7, #28]
 803825e:	2b00      	cmp	r3, #0
 8038260:	d10c      	bne.n	803827c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8038262:	68fb      	ldr	r3, [r7, #12]
 8038264:	681b      	ldr	r3, [r3, #0]
 8038266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038268:	b29a      	uxth	r2, r3
 803826a:	8a7b      	ldrh	r3, [r7, #18]
 803826c:	4013      	ands	r3, r2
 803826e:	b29a      	uxth	r2, r3
 8038270:	69bb      	ldr	r3, [r7, #24]
 8038272:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8038274:	69bb      	ldr	r3, [r7, #24]
 8038276:	3302      	adds	r3, #2
 8038278:	61bb      	str	r3, [r7, #24]
 803827a:	e00c      	b.n	8038296 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 803827c:	68fb      	ldr	r3, [r7, #12]
 803827e:	681b      	ldr	r3, [r3, #0]
 8038280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038282:	b2da      	uxtb	r2, r3
 8038284:	8a7b      	ldrh	r3, [r7, #18]
 8038286:	b2db      	uxtb	r3, r3
 8038288:	4013      	ands	r3, r2
 803828a:	b2da      	uxtb	r2, r3
 803828c:	69fb      	ldr	r3, [r7, #28]
 803828e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8038290:	69fb      	ldr	r3, [r7, #28]
 8038292:	3301      	adds	r3, #1
 8038294:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8038296:	68fb      	ldr	r3, [r7, #12]
 8038298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803829c:	b29b      	uxth	r3, r3
 803829e:	3b01      	subs	r3, #1
 80382a0:	b29a      	uxth	r2, r3
 80382a2:	68fb      	ldr	r3, [r7, #12]
 80382a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80382a8:	68fb      	ldr	r3, [r7, #12]
 80382aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80382ae:	b29b      	uxth	r3, r3
 80382b0:	2b00      	cmp	r3, #0
 80382b2:	d1c6      	bne.n	8038242 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80382b4:	68fb      	ldr	r3, [r7, #12]
 80382b6:	2220      	movs	r2, #32
 80382b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80382bc:	2300      	movs	r3, #0
 80382be:	e000      	b.n	80382c2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80382c0:	2302      	movs	r3, #2
  }
}
 80382c2:	4618      	mov	r0, r3
 80382c4:	3720      	adds	r7, #32
 80382c6:	46bd      	mov	sp, r7
 80382c8:	bd80      	pop	{r7, pc}
	...

080382cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80382cc:	b480      	push	{r7}
 80382ce:	b091      	sub	sp, #68	; 0x44
 80382d0:	af00      	add	r7, sp, #0
 80382d2:	60f8      	str	r0, [r7, #12]
 80382d4:	60b9      	str	r1, [r7, #8]
 80382d6:	4613      	mov	r3, r2
 80382d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80382da:	68fb      	ldr	r3, [r7, #12]
 80382dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80382e0:	2b20      	cmp	r3, #32
 80382e2:	f040 808c 	bne.w	80383fe <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80382e6:	68bb      	ldr	r3, [r7, #8]
 80382e8:	2b00      	cmp	r3, #0
 80382ea:	d002      	beq.n	80382f2 <HAL_UART_Transmit_IT+0x26>
 80382ec:	88fb      	ldrh	r3, [r7, #6]
 80382ee:	2b00      	cmp	r3, #0
 80382f0:	d101      	bne.n	80382f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80382f2:	2301      	movs	r3, #1
 80382f4:	e084      	b.n	8038400 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80382f6:	68fb      	ldr	r3, [r7, #12]
 80382f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80382fc:	2b01      	cmp	r3, #1
 80382fe:	d101      	bne.n	8038304 <HAL_UART_Transmit_IT+0x38>
 8038300:	2302      	movs	r3, #2
 8038302:	e07d      	b.n	8038400 <HAL_UART_Transmit_IT+0x134>
 8038304:	68fb      	ldr	r3, [r7, #12]
 8038306:	2201      	movs	r2, #1
 8038308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 803830c:	68fb      	ldr	r3, [r7, #12]
 803830e:	68ba      	ldr	r2, [r7, #8]
 8038310:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8038312:	68fb      	ldr	r3, [r7, #12]
 8038314:	88fa      	ldrh	r2, [r7, #6]
 8038316:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 803831a:	68fb      	ldr	r3, [r7, #12]
 803831c:	88fa      	ldrh	r2, [r7, #6]
 803831e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8038322:	68fb      	ldr	r3, [r7, #12]
 8038324:	2200      	movs	r2, #0
 8038326:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038328:	68fb      	ldr	r3, [r7, #12]
 803832a:	2200      	movs	r2, #0
 803832c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8038330:	68fb      	ldr	r3, [r7, #12]
 8038332:	2221      	movs	r2, #33	; 0x21
 8038334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8038338:	68fb      	ldr	r3, [r7, #12]
 803833a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803833c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8038340:	d12e      	bne.n	80383a0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8038342:	68fb      	ldr	r3, [r7, #12]
 8038344:	689b      	ldr	r3, [r3, #8]
 8038346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803834a:	d107      	bne.n	803835c <HAL_UART_Transmit_IT+0x90>
 803834c:	68fb      	ldr	r3, [r7, #12]
 803834e:	691b      	ldr	r3, [r3, #16]
 8038350:	2b00      	cmp	r3, #0
 8038352:	d103      	bne.n	803835c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8038354:	68fb      	ldr	r3, [r7, #12]
 8038356:	4a2d      	ldr	r2, [pc, #180]	; (803840c <HAL_UART_Transmit_IT+0x140>)
 8038358:	675a      	str	r2, [r3, #116]	; 0x74
 803835a:	e002      	b.n	8038362 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 803835c:	68fb      	ldr	r3, [r7, #12]
 803835e:	4a2c      	ldr	r2, [pc, #176]	; (8038410 <HAL_UART_Transmit_IT+0x144>)
 8038360:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8038362:	68fb      	ldr	r3, [r7, #12]
 8038364:	2200      	movs	r2, #0
 8038366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803836a:	68fb      	ldr	r3, [r7, #12]
 803836c:	681b      	ldr	r3, [r3, #0]
 803836e:	3308      	adds	r3, #8
 8038370:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038374:	e853 3f00 	ldrex	r3, [r3]
 8038378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803837c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8038380:	63bb      	str	r3, [r7, #56]	; 0x38
 8038382:	68fb      	ldr	r3, [r7, #12]
 8038384:	681b      	ldr	r3, [r3, #0]
 8038386:	3308      	adds	r3, #8
 8038388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803838a:	637a      	str	r2, [r7, #52]	; 0x34
 803838c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803838e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8038390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8038392:	e841 2300 	strex	r3, r2, [r1]
 8038396:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8038398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803839a:	2b00      	cmp	r3, #0
 803839c:	d1e5      	bne.n	803836a <HAL_UART_Transmit_IT+0x9e>
 803839e:	e02c      	b.n	80383fa <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80383a0:	68fb      	ldr	r3, [r7, #12]
 80383a2:	689b      	ldr	r3, [r3, #8]
 80383a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80383a8:	d107      	bne.n	80383ba <HAL_UART_Transmit_IT+0xee>
 80383aa:	68fb      	ldr	r3, [r7, #12]
 80383ac:	691b      	ldr	r3, [r3, #16]
 80383ae:	2b00      	cmp	r3, #0
 80383b0:	d103      	bne.n	80383ba <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80383b2:	68fb      	ldr	r3, [r7, #12]
 80383b4:	4a17      	ldr	r2, [pc, #92]	; (8038414 <HAL_UART_Transmit_IT+0x148>)
 80383b6:	675a      	str	r2, [r3, #116]	; 0x74
 80383b8:	e002      	b.n	80383c0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80383ba:	68fb      	ldr	r3, [r7, #12]
 80383bc:	4a16      	ldr	r2, [pc, #88]	; (8038418 <HAL_UART_Transmit_IT+0x14c>)
 80383be:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80383c0:	68fb      	ldr	r3, [r7, #12]
 80383c2:	2200      	movs	r2, #0
 80383c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80383c8:	68fb      	ldr	r3, [r7, #12]
 80383ca:	681b      	ldr	r3, [r3, #0]
 80383cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80383ce:	697b      	ldr	r3, [r7, #20]
 80383d0:	e853 3f00 	ldrex	r3, [r3]
 80383d4:	613b      	str	r3, [r7, #16]
   return(result);
 80383d6:	693b      	ldr	r3, [r7, #16]
 80383d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80383dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80383de:	68fb      	ldr	r3, [r7, #12]
 80383e0:	681b      	ldr	r3, [r3, #0]
 80383e2:	461a      	mov	r2, r3
 80383e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80383e6:	623b      	str	r3, [r7, #32]
 80383e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80383ea:	69f9      	ldr	r1, [r7, #28]
 80383ec:	6a3a      	ldr	r2, [r7, #32]
 80383ee:	e841 2300 	strex	r3, r2, [r1]
 80383f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80383f4:	69bb      	ldr	r3, [r7, #24]
 80383f6:	2b00      	cmp	r3, #0
 80383f8:	d1e6      	bne.n	80383c8 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80383fa:	2300      	movs	r3, #0
 80383fc:	e000      	b.n	8038400 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80383fe:	2302      	movs	r3, #2
  }
}
 8038400:	4618      	mov	r0, r3
 8038402:	3744      	adds	r7, #68	; 0x44
 8038404:	46bd      	mov	sp, r7
 8038406:	f85d 7b04 	ldr.w	r7, [sp], #4
 803840a:	4770      	bx	lr
 803840c:	0803a013 	.word	0x0803a013
 8038410:	08039f33 	.word	0x08039f33
 8038414:	08039e71 	.word	0x08039e71
 8038418:	08039db9 	.word	0x08039db9

0803841c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 803841c:	b580      	push	{r7, lr}
 803841e:	b08a      	sub	sp, #40	; 0x28
 8038420:	af00      	add	r7, sp, #0
 8038422:	60f8      	str	r0, [r7, #12]
 8038424:	60b9      	str	r1, [r7, #8]
 8038426:	4613      	mov	r3, r2
 8038428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 803842a:	68fb      	ldr	r3, [r7, #12]
 803842c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8038430:	2b20      	cmp	r3, #32
 8038432:	d142      	bne.n	80384ba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8038434:	68bb      	ldr	r3, [r7, #8]
 8038436:	2b00      	cmp	r3, #0
 8038438:	d002      	beq.n	8038440 <HAL_UART_Receive_IT+0x24>
 803843a:	88fb      	ldrh	r3, [r7, #6]
 803843c:	2b00      	cmp	r3, #0
 803843e:	d101      	bne.n	8038444 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8038440:	2301      	movs	r3, #1
 8038442:	e03b      	b.n	80384bc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8038444:	68fb      	ldr	r3, [r7, #12]
 8038446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803844a:	2b01      	cmp	r3, #1
 803844c:	d101      	bne.n	8038452 <HAL_UART_Receive_IT+0x36>
 803844e:	2302      	movs	r3, #2
 8038450:	e034      	b.n	80384bc <HAL_UART_Receive_IT+0xa0>
 8038452:	68fb      	ldr	r3, [r7, #12]
 8038454:	2201      	movs	r2, #1
 8038456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803845a:	68fb      	ldr	r3, [r7, #12]
 803845c:	2200      	movs	r2, #0
 803845e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8038460:	68fb      	ldr	r3, [r7, #12]
 8038462:	681b      	ldr	r3, [r3, #0]
 8038464:	4a17      	ldr	r2, [pc, #92]	; (80384c4 <HAL_UART_Receive_IT+0xa8>)
 8038466:	4293      	cmp	r3, r2
 8038468:	d01f      	beq.n	80384aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 803846a:	68fb      	ldr	r3, [r7, #12]
 803846c:	681b      	ldr	r3, [r3, #0]
 803846e:	685b      	ldr	r3, [r3, #4]
 8038470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8038474:	2b00      	cmp	r3, #0
 8038476:	d018      	beq.n	80384aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8038478:	68fb      	ldr	r3, [r7, #12]
 803847a:	681b      	ldr	r3, [r3, #0]
 803847c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803847e:	697b      	ldr	r3, [r7, #20]
 8038480:	e853 3f00 	ldrex	r3, [r3]
 8038484:	613b      	str	r3, [r7, #16]
   return(result);
 8038486:	693b      	ldr	r3, [r7, #16]
 8038488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 803848c:	627b      	str	r3, [r7, #36]	; 0x24
 803848e:	68fb      	ldr	r3, [r7, #12]
 8038490:	681b      	ldr	r3, [r3, #0]
 8038492:	461a      	mov	r2, r3
 8038494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038496:	623b      	str	r3, [r7, #32]
 8038498:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803849a:	69f9      	ldr	r1, [r7, #28]
 803849c:	6a3a      	ldr	r2, [r7, #32]
 803849e:	e841 2300 	strex	r3, r2, [r1]
 80384a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80384a4:	69bb      	ldr	r3, [r7, #24]
 80384a6:	2b00      	cmp	r3, #0
 80384a8:	d1e6      	bne.n	8038478 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80384aa:	88fb      	ldrh	r3, [r7, #6]
 80384ac:	461a      	mov	r2, r3
 80384ae:	68b9      	ldr	r1, [r7, #8]
 80384b0:	68f8      	ldr	r0, [r7, #12]
 80384b2:	f001 fadb 	bl	8039a6c <UART_Start_Receive_IT>
 80384b6:	4603      	mov	r3, r0
 80384b8:	e000      	b.n	80384bc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80384ba:	2302      	movs	r3, #2
  }
}
 80384bc:	4618      	mov	r0, r3
 80384be:	3728      	adds	r7, #40	; 0x28
 80384c0:	46bd      	mov	sp, r7
 80384c2:	bd80      	pop	{r7, pc}
 80384c4:	58000c00 	.word	0x58000c00

080384c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80384c8:	b580      	push	{r7, lr}
 80384ca:	b0ba      	sub	sp, #232	; 0xe8
 80384cc:	af00      	add	r7, sp, #0
 80384ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80384d0:	687b      	ldr	r3, [r7, #4]
 80384d2:	681b      	ldr	r3, [r3, #0]
 80384d4:	69db      	ldr	r3, [r3, #28]
 80384d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80384da:	687b      	ldr	r3, [r7, #4]
 80384dc:	681b      	ldr	r3, [r3, #0]
 80384de:	681b      	ldr	r3, [r3, #0]
 80384e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80384e4:	687b      	ldr	r3, [r7, #4]
 80384e6:	681b      	ldr	r3, [r3, #0]
 80384e8:	689b      	ldr	r3, [r3, #8]
 80384ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80384ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80384f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80384f6:	4013      	ands	r3, r2
 80384f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80384fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8038500:	2b00      	cmp	r3, #0
 8038502:	d11b      	bne.n	803853c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8038504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038508:	f003 0320 	and.w	r3, r3, #32
 803850c:	2b00      	cmp	r3, #0
 803850e:	d015      	beq.n	803853c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8038510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038514:	f003 0320 	and.w	r3, r3, #32
 8038518:	2b00      	cmp	r3, #0
 803851a:	d105      	bne.n	8038528 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 803851c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8038524:	2b00      	cmp	r3, #0
 8038526:	d009      	beq.n	803853c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8038528:	687b      	ldr	r3, [r7, #4]
 803852a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803852c:	2b00      	cmp	r3, #0
 803852e:	f000 835a 	beq.w	8038be6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8038532:	687b      	ldr	r3, [r7, #4]
 8038534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8038536:	6878      	ldr	r0, [r7, #4]
 8038538:	4798      	blx	r3
      }
      return;
 803853a:	e354      	b.n	8038be6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 803853c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8038540:	2b00      	cmp	r3, #0
 8038542:	f000 811f 	beq.w	8038784 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8038546:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 803854a:	4b8b      	ldr	r3, [pc, #556]	; (8038778 <HAL_UART_IRQHandler+0x2b0>)
 803854c:	4013      	ands	r3, r2
 803854e:	2b00      	cmp	r3, #0
 8038550:	d106      	bne.n	8038560 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8038552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8038556:	4b89      	ldr	r3, [pc, #548]	; (803877c <HAL_UART_IRQHandler+0x2b4>)
 8038558:	4013      	ands	r3, r2
 803855a:	2b00      	cmp	r3, #0
 803855c:	f000 8112 	beq.w	8038784 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8038560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038564:	f003 0301 	and.w	r3, r3, #1
 8038568:	2b00      	cmp	r3, #0
 803856a:	d011      	beq.n	8038590 <HAL_UART_IRQHandler+0xc8>
 803856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038574:	2b00      	cmp	r3, #0
 8038576:	d00b      	beq.n	8038590 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8038578:	687b      	ldr	r3, [r7, #4]
 803857a:	681b      	ldr	r3, [r3, #0]
 803857c:	2201      	movs	r2, #1
 803857e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8038580:	687b      	ldr	r3, [r7, #4]
 8038582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038586:	f043 0201 	orr.w	r2, r3, #1
 803858a:	687b      	ldr	r3, [r7, #4]
 803858c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038594:	f003 0302 	and.w	r3, r3, #2
 8038598:	2b00      	cmp	r3, #0
 803859a:	d011      	beq.n	80385c0 <HAL_UART_IRQHandler+0xf8>
 803859c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80385a0:	f003 0301 	and.w	r3, r3, #1
 80385a4:	2b00      	cmp	r3, #0
 80385a6:	d00b      	beq.n	80385c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80385a8:	687b      	ldr	r3, [r7, #4]
 80385aa:	681b      	ldr	r3, [r3, #0]
 80385ac:	2202      	movs	r2, #2
 80385ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80385b0:	687b      	ldr	r3, [r7, #4]
 80385b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80385b6:	f043 0204 	orr.w	r2, r3, #4
 80385ba:	687b      	ldr	r3, [r7, #4]
 80385bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80385c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80385c4:	f003 0304 	and.w	r3, r3, #4
 80385c8:	2b00      	cmp	r3, #0
 80385ca:	d011      	beq.n	80385f0 <HAL_UART_IRQHandler+0x128>
 80385cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80385d0:	f003 0301 	and.w	r3, r3, #1
 80385d4:	2b00      	cmp	r3, #0
 80385d6:	d00b      	beq.n	80385f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80385d8:	687b      	ldr	r3, [r7, #4]
 80385da:	681b      	ldr	r3, [r3, #0]
 80385dc:	2204      	movs	r2, #4
 80385de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80385e0:	687b      	ldr	r3, [r7, #4]
 80385e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80385e6:	f043 0202 	orr.w	r2, r3, #2
 80385ea:	687b      	ldr	r3, [r7, #4]
 80385ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80385f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80385f4:	f003 0308 	and.w	r3, r3, #8
 80385f8:	2b00      	cmp	r3, #0
 80385fa:	d017      	beq.n	803862c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80385fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038600:	f003 0320 	and.w	r3, r3, #32
 8038604:	2b00      	cmp	r3, #0
 8038606:	d105      	bne.n	8038614 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8038608:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 803860c:	4b5a      	ldr	r3, [pc, #360]	; (8038778 <HAL_UART_IRQHandler+0x2b0>)
 803860e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8038610:	2b00      	cmp	r3, #0
 8038612:	d00b      	beq.n	803862c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8038614:	687b      	ldr	r3, [r7, #4]
 8038616:	681b      	ldr	r3, [r3, #0]
 8038618:	2208      	movs	r2, #8
 803861a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 803861c:	687b      	ldr	r3, [r7, #4]
 803861e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038622:	f043 0208 	orr.w	r2, r3, #8
 8038626:	687b      	ldr	r3, [r7, #4]
 8038628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 803862c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8038634:	2b00      	cmp	r3, #0
 8038636:	d012      	beq.n	803865e <HAL_UART_IRQHandler+0x196>
 8038638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803863c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8038640:	2b00      	cmp	r3, #0
 8038642:	d00c      	beq.n	803865e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8038644:	687b      	ldr	r3, [r7, #4]
 8038646:	681b      	ldr	r3, [r3, #0]
 8038648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 803864c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 803864e:	687b      	ldr	r3, [r7, #4]
 8038650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038654:	f043 0220 	orr.w	r2, r3, #32
 8038658:	687b      	ldr	r3, [r7, #4]
 803865a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803865e:	687b      	ldr	r3, [r7, #4]
 8038660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038664:	2b00      	cmp	r3, #0
 8038666:	f000 82c0 	beq.w	8038bea <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 803866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803866e:	f003 0320 	and.w	r3, r3, #32
 8038672:	2b00      	cmp	r3, #0
 8038674:	d013      	beq.n	803869e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8038676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803867a:	f003 0320 	and.w	r3, r3, #32
 803867e:	2b00      	cmp	r3, #0
 8038680:	d105      	bne.n	803868e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8038682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803868a:	2b00      	cmp	r3, #0
 803868c:	d007      	beq.n	803869e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 803868e:	687b      	ldr	r3, [r7, #4]
 8038690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8038692:	2b00      	cmp	r3, #0
 8038694:	d003      	beq.n	803869e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8038696:	687b      	ldr	r3, [r7, #4]
 8038698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803869a:	6878      	ldr	r0, [r7, #4]
 803869c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 803869e:	687b      	ldr	r3, [r7, #4]
 80386a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80386a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80386a8:	687b      	ldr	r3, [r7, #4]
 80386aa:	681b      	ldr	r3, [r3, #0]
 80386ac:	689b      	ldr	r3, [r3, #8]
 80386ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80386b2:	2b40      	cmp	r3, #64	; 0x40
 80386b4:	d005      	beq.n	80386c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80386b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80386ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80386be:	2b00      	cmp	r3, #0
 80386c0:	d04f      	beq.n	8038762 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80386c2:	6878      	ldr	r0, [r7, #4]
 80386c4:	f001 fafc 	bl	8039cc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80386c8:	687b      	ldr	r3, [r7, #4]
 80386ca:	681b      	ldr	r3, [r3, #0]
 80386cc:	689b      	ldr	r3, [r3, #8]
 80386ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80386d2:	2b40      	cmp	r3, #64	; 0x40
 80386d4:	d141      	bne.n	803875a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80386d6:	687b      	ldr	r3, [r7, #4]
 80386d8:	681b      	ldr	r3, [r3, #0]
 80386da:	3308      	adds	r3, #8
 80386dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80386e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80386e4:	e853 3f00 	ldrex	r3, [r3]
 80386e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80386ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80386f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80386f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80386f8:	687b      	ldr	r3, [r7, #4]
 80386fa:	681b      	ldr	r3, [r3, #0]
 80386fc:	3308      	adds	r3, #8
 80386fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8038702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8038706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803870a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 803870e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8038712:	e841 2300 	strex	r3, r2, [r1]
 8038716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 803871a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 803871e:	2b00      	cmp	r3, #0
 8038720:	d1d9      	bne.n	80386d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8038722:	687b      	ldr	r3, [r7, #4]
 8038724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038726:	2b00      	cmp	r3, #0
 8038728:	d013      	beq.n	8038752 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 803872a:	687b      	ldr	r3, [r7, #4]
 803872c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803872e:	4a14      	ldr	r2, [pc, #80]	; (8038780 <HAL_UART_IRQHandler+0x2b8>)
 8038730:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8038732:	687b      	ldr	r3, [r7, #4]
 8038734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038736:	4618      	mov	r0, r3
 8038738:	f7f7 f95a 	bl	802f9f0 <HAL_DMA_Abort_IT>
 803873c:	4603      	mov	r3, r0
 803873e:	2b00      	cmp	r3, #0
 8038740:	d017      	beq.n	8038772 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8038742:	687b      	ldr	r3, [r7, #4]
 8038744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8038748:	687a      	ldr	r2, [r7, #4]
 803874a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 803874c:	4610      	mov	r0, r2
 803874e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038750:	e00f      	b.n	8038772 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8038752:	6878      	ldr	r0, [r7, #4]
 8038754:	f000 fa56 	bl	8038c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038758:	e00b      	b.n	8038772 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803875a:	6878      	ldr	r0, [r7, #4]
 803875c:	f000 fa52 	bl	8038c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038760:	e007      	b.n	8038772 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8038762:	6878      	ldr	r0, [r7, #4]
 8038764:	f000 fa4e 	bl	8038c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038768:	687b      	ldr	r3, [r7, #4]
 803876a:	2200      	movs	r2, #0
 803876c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8038770:	e23b      	b.n	8038bea <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038772:	bf00      	nop
    return;
 8038774:	e239      	b.n	8038bea <HAL_UART_IRQHandler+0x722>
 8038776:	bf00      	nop
 8038778:	10000001 	.word	0x10000001
 803877c:	04000120 	.word	0x04000120
 8038780:	08039d8d 	.word	0x08039d8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038784:	687b      	ldr	r3, [r7, #4]
 8038786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038788:	2b01      	cmp	r3, #1
 803878a:	f040 81ce 	bne.w	8038b2a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 803878e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038792:	f003 0310 	and.w	r3, r3, #16
 8038796:	2b00      	cmp	r3, #0
 8038798:	f000 81c7 	beq.w	8038b2a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 803879c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80387a0:	f003 0310 	and.w	r3, r3, #16
 80387a4:	2b00      	cmp	r3, #0
 80387a6:	f000 81c0 	beq.w	8038b2a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80387aa:	687b      	ldr	r3, [r7, #4]
 80387ac:	681b      	ldr	r3, [r3, #0]
 80387ae:	2210      	movs	r2, #16
 80387b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80387b2:	687b      	ldr	r3, [r7, #4]
 80387b4:	681b      	ldr	r3, [r3, #0]
 80387b6:	689b      	ldr	r3, [r3, #8]
 80387b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80387bc:	2b40      	cmp	r3, #64	; 0x40
 80387be:	f040 813b 	bne.w	8038a38 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80387c2:	687b      	ldr	r3, [r7, #4]
 80387c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80387c6:	681b      	ldr	r3, [r3, #0]
 80387c8:	4a8b      	ldr	r2, [pc, #556]	; (80389f8 <HAL_UART_IRQHandler+0x530>)
 80387ca:	4293      	cmp	r3, r2
 80387cc:	d059      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 80387ce:	687b      	ldr	r3, [r7, #4]
 80387d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80387d2:	681b      	ldr	r3, [r3, #0]
 80387d4:	4a89      	ldr	r2, [pc, #548]	; (80389fc <HAL_UART_IRQHandler+0x534>)
 80387d6:	4293      	cmp	r3, r2
 80387d8:	d053      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 80387da:	687b      	ldr	r3, [r7, #4]
 80387dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80387de:	681b      	ldr	r3, [r3, #0]
 80387e0:	4a87      	ldr	r2, [pc, #540]	; (8038a00 <HAL_UART_IRQHandler+0x538>)
 80387e2:	4293      	cmp	r3, r2
 80387e4:	d04d      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 80387e6:	687b      	ldr	r3, [r7, #4]
 80387e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80387ea:	681b      	ldr	r3, [r3, #0]
 80387ec:	4a85      	ldr	r2, [pc, #532]	; (8038a04 <HAL_UART_IRQHandler+0x53c>)
 80387ee:	4293      	cmp	r3, r2
 80387f0:	d047      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 80387f2:	687b      	ldr	r3, [r7, #4]
 80387f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80387f6:	681b      	ldr	r3, [r3, #0]
 80387f8:	4a83      	ldr	r2, [pc, #524]	; (8038a08 <HAL_UART_IRQHandler+0x540>)
 80387fa:	4293      	cmp	r3, r2
 80387fc:	d041      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 80387fe:	687b      	ldr	r3, [r7, #4]
 8038800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038802:	681b      	ldr	r3, [r3, #0]
 8038804:	4a81      	ldr	r2, [pc, #516]	; (8038a0c <HAL_UART_IRQHandler+0x544>)
 8038806:	4293      	cmp	r3, r2
 8038808:	d03b      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 803880a:	687b      	ldr	r3, [r7, #4]
 803880c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803880e:	681b      	ldr	r3, [r3, #0]
 8038810:	4a7f      	ldr	r2, [pc, #508]	; (8038a10 <HAL_UART_IRQHandler+0x548>)
 8038812:	4293      	cmp	r3, r2
 8038814:	d035      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 8038816:	687b      	ldr	r3, [r7, #4]
 8038818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803881a:	681b      	ldr	r3, [r3, #0]
 803881c:	4a7d      	ldr	r2, [pc, #500]	; (8038a14 <HAL_UART_IRQHandler+0x54c>)
 803881e:	4293      	cmp	r3, r2
 8038820:	d02f      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 8038822:	687b      	ldr	r3, [r7, #4]
 8038824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038826:	681b      	ldr	r3, [r3, #0]
 8038828:	4a7b      	ldr	r2, [pc, #492]	; (8038a18 <HAL_UART_IRQHandler+0x550>)
 803882a:	4293      	cmp	r3, r2
 803882c:	d029      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 803882e:	687b      	ldr	r3, [r7, #4]
 8038830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038832:	681b      	ldr	r3, [r3, #0]
 8038834:	4a79      	ldr	r2, [pc, #484]	; (8038a1c <HAL_UART_IRQHandler+0x554>)
 8038836:	4293      	cmp	r3, r2
 8038838:	d023      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 803883a:	687b      	ldr	r3, [r7, #4]
 803883c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803883e:	681b      	ldr	r3, [r3, #0]
 8038840:	4a77      	ldr	r2, [pc, #476]	; (8038a20 <HAL_UART_IRQHandler+0x558>)
 8038842:	4293      	cmp	r3, r2
 8038844:	d01d      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 8038846:	687b      	ldr	r3, [r7, #4]
 8038848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803884a:	681b      	ldr	r3, [r3, #0]
 803884c:	4a75      	ldr	r2, [pc, #468]	; (8038a24 <HAL_UART_IRQHandler+0x55c>)
 803884e:	4293      	cmp	r3, r2
 8038850:	d017      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 8038852:	687b      	ldr	r3, [r7, #4]
 8038854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038856:	681b      	ldr	r3, [r3, #0]
 8038858:	4a73      	ldr	r2, [pc, #460]	; (8038a28 <HAL_UART_IRQHandler+0x560>)
 803885a:	4293      	cmp	r3, r2
 803885c:	d011      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 803885e:	687b      	ldr	r3, [r7, #4]
 8038860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038862:	681b      	ldr	r3, [r3, #0]
 8038864:	4a71      	ldr	r2, [pc, #452]	; (8038a2c <HAL_UART_IRQHandler+0x564>)
 8038866:	4293      	cmp	r3, r2
 8038868:	d00b      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 803886a:	687b      	ldr	r3, [r7, #4]
 803886c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803886e:	681b      	ldr	r3, [r3, #0]
 8038870:	4a6f      	ldr	r2, [pc, #444]	; (8038a30 <HAL_UART_IRQHandler+0x568>)
 8038872:	4293      	cmp	r3, r2
 8038874:	d005      	beq.n	8038882 <HAL_UART_IRQHandler+0x3ba>
 8038876:	687b      	ldr	r3, [r7, #4]
 8038878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803887a:	681b      	ldr	r3, [r3, #0]
 803887c:	4a6d      	ldr	r2, [pc, #436]	; (8038a34 <HAL_UART_IRQHandler+0x56c>)
 803887e:	4293      	cmp	r3, r2
 8038880:	d105      	bne.n	803888e <HAL_UART_IRQHandler+0x3c6>
 8038882:	687b      	ldr	r3, [r7, #4]
 8038884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038886:	681b      	ldr	r3, [r3, #0]
 8038888:	685b      	ldr	r3, [r3, #4]
 803888a:	b29b      	uxth	r3, r3
 803888c:	e004      	b.n	8038898 <HAL_UART_IRQHandler+0x3d0>
 803888e:	687b      	ldr	r3, [r7, #4]
 8038890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038892:	681b      	ldr	r3, [r3, #0]
 8038894:	685b      	ldr	r3, [r3, #4]
 8038896:	b29b      	uxth	r3, r3
 8038898:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 803889c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80388a0:	2b00      	cmp	r3, #0
 80388a2:	f000 81a4 	beq.w	8038bee <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80388a6:	687b      	ldr	r3, [r7, #4]
 80388a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80388ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80388b0:	429a      	cmp	r2, r3
 80388b2:	f080 819c 	bcs.w	8038bee <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80388b6:	687b      	ldr	r3, [r7, #4]
 80388b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80388bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80388c0:	687b      	ldr	r3, [r7, #4]
 80388c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80388c4:	69db      	ldr	r3, [r3, #28]
 80388c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80388ca:	f000 8086 	beq.w	80389da <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80388ce:	687b      	ldr	r3, [r7, #4]
 80388d0:	681b      	ldr	r3, [r3, #0]
 80388d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80388d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80388da:	e853 3f00 	ldrex	r3, [r3]
 80388de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80388e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80388e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80388ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80388ee:	687b      	ldr	r3, [r7, #4]
 80388f0:	681b      	ldr	r3, [r3, #0]
 80388f2:	461a      	mov	r2, r3
 80388f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80388f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80388fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038900:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8038904:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8038908:	e841 2300 	strex	r3, r2, [r1]
 803890c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8038910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8038914:	2b00      	cmp	r3, #0
 8038916:	d1da      	bne.n	80388ce <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8038918:	687b      	ldr	r3, [r7, #4]
 803891a:	681b      	ldr	r3, [r3, #0]
 803891c:	3308      	adds	r3, #8
 803891e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8038922:	e853 3f00 	ldrex	r3, [r3]
 8038926:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8038928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803892a:	f023 0301 	bic.w	r3, r3, #1
 803892e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8038932:	687b      	ldr	r3, [r7, #4]
 8038934:	681b      	ldr	r3, [r3, #0]
 8038936:	3308      	adds	r3, #8
 8038938:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 803893c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8038940:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038942:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8038944:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8038948:	e841 2300 	strex	r3, r2, [r1]
 803894c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 803894e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8038950:	2b00      	cmp	r3, #0
 8038952:	d1e1      	bne.n	8038918 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8038954:	687b      	ldr	r3, [r7, #4]
 8038956:	681b      	ldr	r3, [r3, #0]
 8038958:	3308      	adds	r3, #8
 803895a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803895c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803895e:	e853 3f00 	ldrex	r3, [r3]
 8038962:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8038964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8038966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803896a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 803896e:	687b      	ldr	r3, [r7, #4]
 8038970:	681b      	ldr	r3, [r3, #0]
 8038972:	3308      	adds	r3, #8
 8038974:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8038978:	66fa      	str	r2, [r7, #108]	; 0x6c
 803897a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803897c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803897e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8038980:	e841 2300 	strex	r3, r2, [r1]
 8038984:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8038986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8038988:	2b00      	cmp	r3, #0
 803898a:	d1e3      	bne.n	8038954 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 803898c:	687b      	ldr	r3, [r7, #4]
 803898e:	2220      	movs	r2, #32
 8038990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038994:	687b      	ldr	r3, [r7, #4]
 8038996:	2200      	movs	r2, #0
 8038998:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803899a:	687b      	ldr	r3, [r7, #4]
 803899c:	681b      	ldr	r3, [r3, #0]
 803899e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80389a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80389a2:	e853 3f00 	ldrex	r3, [r3]
 80389a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80389a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80389aa:	f023 0310 	bic.w	r3, r3, #16
 80389ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80389b2:	687b      	ldr	r3, [r7, #4]
 80389b4:	681b      	ldr	r3, [r3, #0]
 80389b6:	461a      	mov	r2, r3
 80389b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80389bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80389be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80389c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80389c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80389c4:	e841 2300 	strex	r3, r2, [r1]
 80389c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80389ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80389cc:	2b00      	cmp	r3, #0
 80389ce:	d1e4      	bne.n	803899a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80389d0:	687b      	ldr	r3, [r7, #4]
 80389d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80389d4:	4618      	mov	r0, r3
 80389d6:	f7f6 fced 	bl	802f3b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80389da:	687b      	ldr	r3, [r7, #4]
 80389dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80389e0:	687b      	ldr	r3, [r7, #4]
 80389e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80389e6:	b29b      	uxth	r3, r3
 80389e8:	1ad3      	subs	r3, r2, r3
 80389ea:	b29b      	uxth	r3, r3
 80389ec:	4619      	mov	r1, r3
 80389ee:	6878      	ldr	r0, [r7, #4]
 80389f0:	f000 f912 	bl	8038c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80389f4:	e0fb      	b.n	8038bee <HAL_UART_IRQHandler+0x726>
 80389f6:	bf00      	nop
 80389f8:	40020010 	.word	0x40020010
 80389fc:	40020028 	.word	0x40020028
 8038a00:	40020040 	.word	0x40020040
 8038a04:	40020058 	.word	0x40020058
 8038a08:	40020070 	.word	0x40020070
 8038a0c:	40020088 	.word	0x40020088
 8038a10:	400200a0 	.word	0x400200a0
 8038a14:	400200b8 	.word	0x400200b8
 8038a18:	40020410 	.word	0x40020410
 8038a1c:	40020428 	.word	0x40020428
 8038a20:	40020440 	.word	0x40020440
 8038a24:	40020458 	.word	0x40020458
 8038a28:	40020470 	.word	0x40020470
 8038a2c:	40020488 	.word	0x40020488
 8038a30:	400204a0 	.word	0x400204a0
 8038a34:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8038a38:	687b      	ldr	r3, [r7, #4]
 8038a3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8038a3e:	687b      	ldr	r3, [r7, #4]
 8038a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038a44:	b29b      	uxth	r3, r3
 8038a46:	1ad3      	subs	r3, r2, r3
 8038a48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8038a4c:	687b      	ldr	r3, [r7, #4]
 8038a4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038a52:	b29b      	uxth	r3, r3
 8038a54:	2b00      	cmp	r3, #0
 8038a56:	f000 80cc 	beq.w	8038bf2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8038a5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8038a5e:	2b00      	cmp	r3, #0
 8038a60:	f000 80c7 	beq.w	8038bf2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8038a64:	687b      	ldr	r3, [r7, #4]
 8038a66:	681b      	ldr	r3, [r3, #0]
 8038a68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038a6c:	e853 3f00 	ldrex	r3, [r3]
 8038a70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8038a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8038a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8038a7c:	687b      	ldr	r3, [r7, #4]
 8038a7e:	681b      	ldr	r3, [r3, #0]
 8038a80:	461a      	mov	r2, r3
 8038a82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8038a86:	647b      	str	r3, [r7, #68]	; 0x44
 8038a88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038a8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8038a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038a8e:	e841 2300 	strex	r3, r2, [r1]
 8038a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8038a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038a96:	2b00      	cmp	r3, #0
 8038a98:	d1e4      	bne.n	8038a64 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8038a9a:	687b      	ldr	r3, [r7, #4]
 8038a9c:	681b      	ldr	r3, [r3, #0]
 8038a9e:	3308      	adds	r3, #8
 8038aa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038aa4:	e853 3f00 	ldrex	r3, [r3]
 8038aa8:	623b      	str	r3, [r7, #32]
   return(result);
 8038aaa:	6a3a      	ldr	r2, [r7, #32]
 8038aac:	4b54      	ldr	r3, [pc, #336]	; (8038c00 <HAL_UART_IRQHandler+0x738>)
 8038aae:	4013      	ands	r3, r2
 8038ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8038ab4:	687b      	ldr	r3, [r7, #4]
 8038ab6:	681b      	ldr	r3, [r3, #0]
 8038ab8:	3308      	adds	r3, #8
 8038aba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8038abe:	633a      	str	r2, [r7, #48]	; 0x30
 8038ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8038ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8038ac6:	e841 2300 	strex	r3, r2, [r1]
 8038aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8038acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038ace:	2b00      	cmp	r3, #0
 8038ad0:	d1e3      	bne.n	8038a9a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8038ad2:	687b      	ldr	r3, [r7, #4]
 8038ad4:	2220      	movs	r2, #32
 8038ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038ada:	687b      	ldr	r3, [r7, #4]
 8038adc:	2200      	movs	r2, #0
 8038ade:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8038ae0:	687b      	ldr	r3, [r7, #4]
 8038ae2:	2200      	movs	r2, #0
 8038ae4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038ae6:	687b      	ldr	r3, [r7, #4]
 8038ae8:	681b      	ldr	r3, [r3, #0]
 8038aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038aec:	693b      	ldr	r3, [r7, #16]
 8038aee:	e853 3f00 	ldrex	r3, [r3]
 8038af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8038af4:	68fb      	ldr	r3, [r7, #12]
 8038af6:	f023 0310 	bic.w	r3, r3, #16
 8038afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8038afe:	687b      	ldr	r3, [r7, #4]
 8038b00:	681b      	ldr	r3, [r3, #0]
 8038b02:	461a      	mov	r2, r3
 8038b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8038b08:	61fb      	str	r3, [r7, #28]
 8038b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038b0c:	69b9      	ldr	r1, [r7, #24]
 8038b0e:	69fa      	ldr	r2, [r7, #28]
 8038b10:	e841 2300 	strex	r3, r2, [r1]
 8038b14:	617b      	str	r3, [r7, #20]
   return(result);
 8038b16:	697b      	ldr	r3, [r7, #20]
 8038b18:	2b00      	cmp	r3, #0
 8038b1a:	d1e4      	bne.n	8038ae6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8038b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8038b20:	4619      	mov	r1, r3
 8038b22:	6878      	ldr	r0, [r7, #4]
 8038b24:	f000 f878 	bl	8038c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8038b28:	e063      	b.n	8038bf2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8038b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8038b32:	2b00      	cmp	r3, #0
 8038b34:	d00e      	beq.n	8038b54 <HAL_UART_IRQHandler+0x68c>
 8038b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8038b3e:	2b00      	cmp	r3, #0
 8038b40:	d008      	beq.n	8038b54 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8038b42:	687b      	ldr	r3, [r7, #4]
 8038b44:	681b      	ldr	r3, [r3, #0]
 8038b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8038b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8038b4c:	6878      	ldr	r0, [r7, #4]
 8038b4e:	f001 ff5d 	bl	803aa0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8038b52:	e051      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8038b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8038b5c:	2b00      	cmp	r3, #0
 8038b5e:	d014      	beq.n	8038b8a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8038b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8038b68:	2b00      	cmp	r3, #0
 8038b6a:	d105      	bne.n	8038b78 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8038b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8038b74:	2b00      	cmp	r3, #0
 8038b76:	d008      	beq.n	8038b8a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8038b78:	687b      	ldr	r3, [r7, #4]
 8038b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8038b7c:	2b00      	cmp	r3, #0
 8038b7e:	d03a      	beq.n	8038bf6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8038b80:	687b      	ldr	r3, [r7, #4]
 8038b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8038b84:	6878      	ldr	r0, [r7, #4]
 8038b86:	4798      	blx	r3
    }
    return;
 8038b88:	e035      	b.n	8038bf6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8038b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038b92:	2b00      	cmp	r3, #0
 8038b94:	d009      	beq.n	8038baa <HAL_UART_IRQHandler+0x6e2>
 8038b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038b9e:	2b00      	cmp	r3, #0
 8038ba0:	d003      	beq.n	8038baa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8038ba2:	6878      	ldr	r0, [r7, #4]
 8038ba4:	f001 faaa 	bl	803a0fc <UART_EndTransmit_IT>
    return;
 8038ba8:	e026      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8038baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8038bb2:	2b00      	cmp	r3, #0
 8038bb4:	d009      	beq.n	8038bca <HAL_UART_IRQHandler+0x702>
 8038bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038bba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8038bbe:	2b00      	cmp	r3, #0
 8038bc0:	d003      	beq.n	8038bca <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8038bc2:	6878      	ldr	r0, [r7, #4]
 8038bc4:	f001 ff36 	bl	803aa34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8038bc8:	e016      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8038bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8038bd2:	2b00      	cmp	r3, #0
 8038bd4:	d010      	beq.n	8038bf8 <HAL_UART_IRQHandler+0x730>
 8038bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038bda:	2b00      	cmp	r3, #0
 8038bdc:	da0c      	bge.n	8038bf8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8038bde:	6878      	ldr	r0, [r7, #4]
 8038be0:	f001 ff1e 	bl	803aa20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8038be4:	e008      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
      return;
 8038be6:	bf00      	nop
 8038be8:	e006      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
    return;
 8038bea:	bf00      	nop
 8038bec:	e004      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
      return;
 8038bee:	bf00      	nop
 8038bf0:	e002      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
      return;
 8038bf2:	bf00      	nop
 8038bf4:	e000      	b.n	8038bf8 <HAL_UART_IRQHandler+0x730>
    return;
 8038bf6:	bf00      	nop
  }
}
 8038bf8:	37e8      	adds	r7, #232	; 0xe8
 8038bfa:	46bd      	mov	sp, r7
 8038bfc:	bd80      	pop	{r7, pc}
 8038bfe:	bf00      	nop
 8038c00:	effffffe 	.word	0xeffffffe

08038c04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8038c04:	b480      	push	{r7}
 8038c06:	b083      	sub	sp, #12
 8038c08:	af00      	add	r7, sp, #0
 8038c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8038c0c:	bf00      	nop
 8038c0e:	370c      	adds	r7, #12
 8038c10:	46bd      	mov	sp, r7
 8038c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038c16:	4770      	bx	lr

08038c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8038c18:	b480      	push	{r7}
 8038c1a:	b083      	sub	sp, #12
 8038c1c:	af00      	add	r7, sp, #0
 8038c1e:	6078      	str	r0, [r7, #4]
 8038c20:	460b      	mov	r3, r1
 8038c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8038c24:	bf00      	nop
 8038c26:	370c      	adds	r7, #12
 8038c28:	46bd      	mov	sp, r7
 8038c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038c2e:	4770      	bx	lr

08038c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8038c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8038c34:	b092      	sub	sp, #72	; 0x48
 8038c36:	af00      	add	r7, sp, #0
 8038c38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8038c3a:	2300      	movs	r3, #0
 8038c3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8038c40:	697b      	ldr	r3, [r7, #20]
 8038c42:	689a      	ldr	r2, [r3, #8]
 8038c44:	697b      	ldr	r3, [r7, #20]
 8038c46:	691b      	ldr	r3, [r3, #16]
 8038c48:	431a      	orrs	r2, r3
 8038c4a:	697b      	ldr	r3, [r7, #20]
 8038c4c:	695b      	ldr	r3, [r3, #20]
 8038c4e:	431a      	orrs	r2, r3
 8038c50:	697b      	ldr	r3, [r7, #20]
 8038c52:	69db      	ldr	r3, [r3, #28]
 8038c54:	4313      	orrs	r3, r2
 8038c56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8038c58:	697b      	ldr	r3, [r7, #20]
 8038c5a:	681b      	ldr	r3, [r3, #0]
 8038c5c:	681a      	ldr	r2, [r3, #0]
 8038c5e:	4bbe      	ldr	r3, [pc, #760]	; (8038f58 <UART_SetConfig+0x328>)
 8038c60:	4013      	ands	r3, r2
 8038c62:	697a      	ldr	r2, [r7, #20]
 8038c64:	6812      	ldr	r2, [r2, #0]
 8038c66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8038c68:	430b      	orrs	r3, r1
 8038c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8038c6c:	697b      	ldr	r3, [r7, #20]
 8038c6e:	681b      	ldr	r3, [r3, #0]
 8038c70:	685b      	ldr	r3, [r3, #4]
 8038c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8038c76:	697b      	ldr	r3, [r7, #20]
 8038c78:	68da      	ldr	r2, [r3, #12]
 8038c7a:	697b      	ldr	r3, [r7, #20]
 8038c7c:	681b      	ldr	r3, [r3, #0]
 8038c7e:	430a      	orrs	r2, r1
 8038c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8038c82:	697b      	ldr	r3, [r7, #20]
 8038c84:	699b      	ldr	r3, [r3, #24]
 8038c86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8038c88:	697b      	ldr	r3, [r7, #20]
 8038c8a:	681b      	ldr	r3, [r3, #0]
 8038c8c:	4ab3      	ldr	r2, [pc, #716]	; (8038f5c <UART_SetConfig+0x32c>)
 8038c8e:	4293      	cmp	r3, r2
 8038c90:	d004      	beq.n	8038c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8038c92:	697b      	ldr	r3, [r7, #20]
 8038c94:	6a1b      	ldr	r3, [r3, #32]
 8038c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038c98:	4313      	orrs	r3, r2
 8038c9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8038c9c:	697b      	ldr	r3, [r7, #20]
 8038c9e:	681b      	ldr	r3, [r3, #0]
 8038ca0:	689a      	ldr	r2, [r3, #8]
 8038ca2:	4baf      	ldr	r3, [pc, #700]	; (8038f60 <UART_SetConfig+0x330>)
 8038ca4:	4013      	ands	r3, r2
 8038ca6:	697a      	ldr	r2, [r7, #20]
 8038ca8:	6812      	ldr	r2, [r2, #0]
 8038caa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8038cac:	430b      	orrs	r3, r1
 8038cae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8038cb0:	697b      	ldr	r3, [r7, #20]
 8038cb2:	681b      	ldr	r3, [r3, #0]
 8038cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038cb6:	f023 010f 	bic.w	r1, r3, #15
 8038cba:	697b      	ldr	r3, [r7, #20]
 8038cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8038cbe:	697b      	ldr	r3, [r7, #20]
 8038cc0:	681b      	ldr	r3, [r3, #0]
 8038cc2:	430a      	orrs	r2, r1
 8038cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8038cc6:	697b      	ldr	r3, [r7, #20]
 8038cc8:	681b      	ldr	r3, [r3, #0]
 8038cca:	4aa6      	ldr	r2, [pc, #664]	; (8038f64 <UART_SetConfig+0x334>)
 8038ccc:	4293      	cmp	r3, r2
 8038cce:	d177      	bne.n	8038dc0 <UART_SetConfig+0x190>
 8038cd0:	4ba5      	ldr	r3, [pc, #660]	; (8038f68 <UART_SetConfig+0x338>)
 8038cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8038cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8038cd8:	2b28      	cmp	r3, #40	; 0x28
 8038cda:	d86d      	bhi.n	8038db8 <UART_SetConfig+0x188>
 8038cdc:	a201      	add	r2, pc, #4	; (adr r2, 8038ce4 <UART_SetConfig+0xb4>)
 8038cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038ce2:	bf00      	nop
 8038ce4:	08038d89 	.word	0x08038d89
 8038ce8:	08038db9 	.word	0x08038db9
 8038cec:	08038db9 	.word	0x08038db9
 8038cf0:	08038db9 	.word	0x08038db9
 8038cf4:	08038db9 	.word	0x08038db9
 8038cf8:	08038db9 	.word	0x08038db9
 8038cfc:	08038db9 	.word	0x08038db9
 8038d00:	08038db9 	.word	0x08038db9
 8038d04:	08038d91 	.word	0x08038d91
 8038d08:	08038db9 	.word	0x08038db9
 8038d0c:	08038db9 	.word	0x08038db9
 8038d10:	08038db9 	.word	0x08038db9
 8038d14:	08038db9 	.word	0x08038db9
 8038d18:	08038db9 	.word	0x08038db9
 8038d1c:	08038db9 	.word	0x08038db9
 8038d20:	08038db9 	.word	0x08038db9
 8038d24:	08038d99 	.word	0x08038d99
 8038d28:	08038db9 	.word	0x08038db9
 8038d2c:	08038db9 	.word	0x08038db9
 8038d30:	08038db9 	.word	0x08038db9
 8038d34:	08038db9 	.word	0x08038db9
 8038d38:	08038db9 	.word	0x08038db9
 8038d3c:	08038db9 	.word	0x08038db9
 8038d40:	08038db9 	.word	0x08038db9
 8038d44:	08038da1 	.word	0x08038da1
 8038d48:	08038db9 	.word	0x08038db9
 8038d4c:	08038db9 	.word	0x08038db9
 8038d50:	08038db9 	.word	0x08038db9
 8038d54:	08038db9 	.word	0x08038db9
 8038d58:	08038db9 	.word	0x08038db9
 8038d5c:	08038db9 	.word	0x08038db9
 8038d60:	08038db9 	.word	0x08038db9
 8038d64:	08038da9 	.word	0x08038da9
 8038d68:	08038db9 	.word	0x08038db9
 8038d6c:	08038db9 	.word	0x08038db9
 8038d70:	08038db9 	.word	0x08038db9
 8038d74:	08038db9 	.word	0x08038db9
 8038d78:	08038db9 	.word	0x08038db9
 8038d7c:	08038db9 	.word	0x08038db9
 8038d80:	08038db9 	.word	0x08038db9
 8038d84:	08038db1 	.word	0x08038db1
 8038d88:	2301      	movs	r3, #1
 8038d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038d8e:	e222      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038d90:	2304      	movs	r3, #4
 8038d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038d96:	e21e      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038d98:	2308      	movs	r3, #8
 8038d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038d9e:	e21a      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038da0:	2310      	movs	r3, #16
 8038da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038da6:	e216      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038da8:	2320      	movs	r3, #32
 8038daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038dae:	e212      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038db0:	2340      	movs	r3, #64	; 0x40
 8038db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038db6:	e20e      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038db8:	2380      	movs	r3, #128	; 0x80
 8038dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038dbe:	e20a      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038dc0:	697b      	ldr	r3, [r7, #20]
 8038dc2:	681b      	ldr	r3, [r3, #0]
 8038dc4:	4a69      	ldr	r2, [pc, #420]	; (8038f6c <UART_SetConfig+0x33c>)
 8038dc6:	4293      	cmp	r3, r2
 8038dc8:	d130      	bne.n	8038e2c <UART_SetConfig+0x1fc>
 8038dca:	4b67      	ldr	r3, [pc, #412]	; (8038f68 <UART_SetConfig+0x338>)
 8038dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8038dce:	f003 0307 	and.w	r3, r3, #7
 8038dd2:	2b05      	cmp	r3, #5
 8038dd4:	d826      	bhi.n	8038e24 <UART_SetConfig+0x1f4>
 8038dd6:	a201      	add	r2, pc, #4	; (adr r2, 8038ddc <UART_SetConfig+0x1ac>)
 8038dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038ddc:	08038df5 	.word	0x08038df5
 8038de0:	08038dfd 	.word	0x08038dfd
 8038de4:	08038e05 	.word	0x08038e05
 8038de8:	08038e0d 	.word	0x08038e0d
 8038dec:	08038e15 	.word	0x08038e15
 8038df0:	08038e1d 	.word	0x08038e1d
 8038df4:	2300      	movs	r3, #0
 8038df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038dfa:	e1ec      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038dfc:	2304      	movs	r3, #4
 8038dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e02:	e1e8      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e04:	2308      	movs	r3, #8
 8038e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e0a:	e1e4      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e0c:	2310      	movs	r3, #16
 8038e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e12:	e1e0      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e14:	2320      	movs	r3, #32
 8038e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e1a:	e1dc      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e1c:	2340      	movs	r3, #64	; 0x40
 8038e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e22:	e1d8      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e24:	2380      	movs	r3, #128	; 0x80
 8038e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e2a:	e1d4      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e2c:	697b      	ldr	r3, [r7, #20]
 8038e2e:	681b      	ldr	r3, [r3, #0]
 8038e30:	4a4f      	ldr	r2, [pc, #316]	; (8038f70 <UART_SetConfig+0x340>)
 8038e32:	4293      	cmp	r3, r2
 8038e34:	d130      	bne.n	8038e98 <UART_SetConfig+0x268>
 8038e36:	4b4c      	ldr	r3, [pc, #304]	; (8038f68 <UART_SetConfig+0x338>)
 8038e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8038e3a:	f003 0307 	and.w	r3, r3, #7
 8038e3e:	2b05      	cmp	r3, #5
 8038e40:	d826      	bhi.n	8038e90 <UART_SetConfig+0x260>
 8038e42:	a201      	add	r2, pc, #4	; (adr r2, 8038e48 <UART_SetConfig+0x218>)
 8038e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038e48:	08038e61 	.word	0x08038e61
 8038e4c:	08038e69 	.word	0x08038e69
 8038e50:	08038e71 	.word	0x08038e71
 8038e54:	08038e79 	.word	0x08038e79
 8038e58:	08038e81 	.word	0x08038e81
 8038e5c:	08038e89 	.word	0x08038e89
 8038e60:	2300      	movs	r3, #0
 8038e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e66:	e1b6      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e68:	2304      	movs	r3, #4
 8038e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e6e:	e1b2      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e70:	2308      	movs	r3, #8
 8038e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e76:	e1ae      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e78:	2310      	movs	r3, #16
 8038e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e7e:	e1aa      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e80:	2320      	movs	r3, #32
 8038e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e86:	e1a6      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e88:	2340      	movs	r3, #64	; 0x40
 8038e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e8e:	e1a2      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e90:	2380      	movs	r3, #128	; 0x80
 8038e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038e96:	e19e      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038e98:	697b      	ldr	r3, [r7, #20]
 8038e9a:	681b      	ldr	r3, [r3, #0]
 8038e9c:	4a35      	ldr	r2, [pc, #212]	; (8038f74 <UART_SetConfig+0x344>)
 8038e9e:	4293      	cmp	r3, r2
 8038ea0:	d130      	bne.n	8038f04 <UART_SetConfig+0x2d4>
 8038ea2:	4b31      	ldr	r3, [pc, #196]	; (8038f68 <UART_SetConfig+0x338>)
 8038ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8038ea6:	f003 0307 	and.w	r3, r3, #7
 8038eaa:	2b05      	cmp	r3, #5
 8038eac:	d826      	bhi.n	8038efc <UART_SetConfig+0x2cc>
 8038eae:	a201      	add	r2, pc, #4	; (adr r2, 8038eb4 <UART_SetConfig+0x284>)
 8038eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038eb4:	08038ecd 	.word	0x08038ecd
 8038eb8:	08038ed5 	.word	0x08038ed5
 8038ebc:	08038edd 	.word	0x08038edd
 8038ec0:	08038ee5 	.word	0x08038ee5
 8038ec4:	08038eed 	.word	0x08038eed
 8038ec8:	08038ef5 	.word	0x08038ef5
 8038ecc:	2300      	movs	r3, #0
 8038ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038ed2:	e180      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038ed4:	2304      	movs	r3, #4
 8038ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038eda:	e17c      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038edc:	2308      	movs	r3, #8
 8038ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038ee2:	e178      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038ee4:	2310      	movs	r3, #16
 8038ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038eea:	e174      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038eec:	2320      	movs	r3, #32
 8038eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038ef2:	e170      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038ef4:	2340      	movs	r3, #64	; 0x40
 8038ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038efa:	e16c      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038efc:	2380      	movs	r3, #128	; 0x80
 8038efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f02:	e168      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f04:	697b      	ldr	r3, [r7, #20]
 8038f06:	681b      	ldr	r3, [r3, #0]
 8038f08:	4a1b      	ldr	r2, [pc, #108]	; (8038f78 <UART_SetConfig+0x348>)
 8038f0a:	4293      	cmp	r3, r2
 8038f0c:	d142      	bne.n	8038f94 <UART_SetConfig+0x364>
 8038f0e:	4b16      	ldr	r3, [pc, #88]	; (8038f68 <UART_SetConfig+0x338>)
 8038f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8038f12:	f003 0307 	and.w	r3, r3, #7
 8038f16:	2b05      	cmp	r3, #5
 8038f18:	d838      	bhi.n	8038f8c <UART_SetConfig+0x35c>
 8038f1a:	a201      	add	r2, pc, #4	; (adr r2, 8038f20 <UART_SetConfig+0x2f0>)
 8038f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038f20:	08038f39 	.word	0x08038f39
 8038f24:	08038f41 	.word	0x08038f41
 8038f28:	08038f49 	.word	0x08038f49
 8038f2c:	08038f51 	.word	0x08038f51
 8038f30:	08038f7d 	.word	0x08038f7d
 8038f34:	08038f85 	.word	0x08038f85
 8038f38:	2300      	movs	r3, #0
 8038f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f3e:	e14a      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f40:	2304      	movs	r3, #4
 8038f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f46:	e146      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f48:	2308      	movs	r3, #8
 8038f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f4e:	e142      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f50:	2310      	movs	r3, #16
 8038f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f56:	e13e      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f58:	cfff69f3 	.word	0xcfff69f3
 8038f5c:	58000c00 	.word	0x58000c00
 8038f60:	11fff4ff 	.word	0x11fff4ff
 8038f64:	40011000 	.word	0x40011000
 8038f68:	58024400 	.word	0x58024400
 8038f6c:	40004400 	.word	0x40004400
 8038f70:	40004800 	.word	0x40004800
 8038f74:	40004c00 	.word	0x40004c00
 8038f78:	40005000 	.word	0x40005000
 8038f7c:	2320      	movs	r3, #32
 8038f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f82:	e128      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f84:	2340      	movs	r3, #64	; 0x40
 8038f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f8a:	e124      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f8c:	2380      	movs	r3, #128	; 0x80
 8038f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8038f92:	e120      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8038f94:	697b      	ldr	r3, [r7, #20]
 8038f96:	681b      	ldr	r3, [r3, #0]
 8038f98:	4acb      	ldr	r2, [pc, #812]	; (80392c8 <UART_SetConfig+0x698>)
 8038f9a:	4293      	cmp	r3, r2
 8038f9c:	d176      	bne.n	803908c <UART_SetConfig+0x45c>
 8038f9e:	4bcb      	ldr	r3, [pc, #812]	; (80392cc <UART_SetConfig+0x69c>)
 8038fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8038fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8038fa6:	2b28      	cmp	r3, #40	; 0x28
 8038fa8:	d86c      	bhi.n	8039084 <UART_SetConfig+0x454>
 8038faa:	a201      	add	r2, pc, #4	; (adr r2, 8038fb0 <UART_SetConfig+0x380>)
 8038fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038fb0:	08039055 	.word	0x08039055
 8038fb4:	08039085 	.word	0x08039085
 8038fb8:	08039085 	.word	0x08039085
 8038fbc:	08039085 	.word	0x08039085
 8038fc0:	08039085 	.word	0x08039085
 8038fc4:	08039085 	.word	0x08039085
 8038fc8:	08039085 	.word	0x08039085
 8038fcc:	08039085 	.word	0x08039085
 8038fd0:	0803905d 	.word	0x0803905d
 8038fd4:	08039085 	.word	0x08039085
 8038fd8:	08039085 	.word	0x08039085
 8038fdc:	08039085 	.word	0x08039085
 8038fe0:	08039085 	.word	0x08039085
 8038fe4:	08039085 	.word	0x08039085
 8038fe8:	08039085 	.word	0x08039085
 8038fec:	08039085 	.word	0x08039085
 8038ff0:	08039065 	.word	0x08039065
 8038ff4:	08039085 	.word	0x08039085
 8038ff8:	08039085 	.word	0x08039085
 8038ffc:	08039085 	.word	0x08039085
 8039000:	08039085 	.word	0x08039085
 8039004:	08039085 	.word	0x08039085
 8039008:	08039085 	.word	0x08039085
 803900c:	08039085 	.word	0x08039085
 8039010:	0803906d 	.word	0x0803906d
 8039014:	08039085 	.word	0x08039085
 8039018:	08039085 	.word	0x08039085
 803901c:	08039085 	.word	0x08039085
 8039020:	08039085 	.word	0x08039085
 8039024:	08039085 	.word	0x08039085
 8039028:	08039085 	.word	0x08039085
 803902c:	08039085 	.word	0x08039085
 8039030:	08039075 	.word	0x08039075
 8039034:	08039085 	.word	0x08039085
 8039038:	08039085 	.word	0x08039085
 803903c:	08039085 	.word	0x08039085
 8039040:	08039085 	.word	0x08039085
 8039044:	08039085 	.word	0x08039085
 8039048:	08039085 	.word	0x08039085
 803904c:	08039085 	.word	0x08039085
 8039050:	0803907d 	.word	0x0803907d
 8039054:	2301      	movs	r3, #1
 8039056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803905a:	e0bc      	b.n	80391d6 <UART_SetConfig+0x5a6>
 803905c:	2304      	movs	r3, #4
 803905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039062:	e0b8      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8039064:	2308      	movs	r3, #8
 8039066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803906a:	e0b4      	b.n	80391d6 <UART_SetConfig+0x5a6>
 803906c:	2310      	movs	r3, #16
 803906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039072:	e0b0      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8039074:	2320      	movs	r3, #32
 8039076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803907a:	e0ac      	b.n	80391d6 <UART_SetConfig+0x5a6>
 803907c:	2340      	movs	r3, #64	; 0x40
 803907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039082:	e0a8      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8039084:	2380      	movs	r3, #128	; 0x80
 8039086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803908a:	e0a4      	b.n	80391d6 <UART_SetConfig+0x5a6>
 803908c:	697b      	ldr	r3, [r7, #20]
 803908e:	681b      	ldr	r3, [r3, #0]
 8039090:	4a8f      	ldr	r2, [pc, #572]	; (80392d0 <UART_SetConfig+0x6a0>)
 8039092:	4293      	cmp	r3, r2
 8039094:	d130      	bne.n	80390f8 <UART_SetConfig+0x4c8>
 8039096:	4b8d      	ldr	r3, [pc, #564]	; (80392cc <UART_SetConfig+0x69c>)
 8039098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803909a:	f003 0307 	and.w	r3, r3, #7
 803909e:	2b05      	cmp	r3, #5
 80390a0:	d826      	bhi.n	80390f0 <UART_SetConfig+0x4c0>
 80390a2:	a201      	add	r2, pc, #4	; (adr r2, 80390a8 <UART_SetConfig+0x478>)
 80390a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80390a8:	080390c1 	.word	0x080390c1
 80390ac:	080390c9 	.word	0x080390c9
 80390b0:	080390d1 	.word	0x080390d1
 80390b4:	080390d9 	.word	0x080390d9
 80390b8:	080390e1 	.word	0x080390e1
 80390bc:	080390e9 	.word	0x080390e9
 80390c0:	2300      	movs	r3, #0
 80390c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80390c6:	e086      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80390c8:	2304      	movs	r3, #4
 80390ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80390ce:	e082      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80390d0:	2308      	movs	r3, #8
 80390d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80390d6:	e07e      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80390d8:	2310      	movs	r3, #16
 80390da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80390de:	e07a      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80390e0:	2320      	movs	r3, #32
 80390e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80390e6:	e076      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80390e8:	2340      	movs	r3, #64	; 0x40
 80390ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80390ee:	e072      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80390f0:	2380      	movs	r3, #128	; 0x80
 80390f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80390f6:	e06e      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80390f8:	697b      	ldr	r3, [r7, #20]
 80390fa:	681b      	ldr	r3, [r3, #0]
 80390fc:	4a75      	ldr	r2, [pc, #468]	; (80392d4 <UART_SetConfig+0x6a4>)
 80390fe:	4293      	cmp	r3, r2
 8039100:	d130      	bne.n	8039164 <UART_SetConfig+0x534>
 8039102:	4b72      	ldr	r3, [pc, #456]	; (80392cc <UART_SetConfig+0x69c>)
 8039104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8039106:	f003 0307 	and.w	r3, r3, #7
 803910a:	2b05      	cmp	r3, #5
 803910c:	d826      	bhi.n	803915c <UART_SetConfig+0x52c>
 803910e:	a201      	add	r2, pc, #4	; (adr r2, 8039114 <UART_SetConfig+0x4e4>)
 8039110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039114:	0803912d 	.word	0x0803912d
 8039118:	08039135 	.word	0x08039135
 803911c:	0803913d 	.word	0x0803913d
 8039120:	08039145 	.word	0x08039145
 8039124:	0803914d 	.word	0x0803914d
 8039128:	08039155 	.word	0x08039155
 803912c:	2300      	movs	r3, #0
 803912e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039132:	e050      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8039134:	2304      	movs	r3, #4
 8039136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803913a:	e04c      	b.n	80391d6 <UART_SetConfig+0x5a6>
 803913c:	2308      	movs	r3, #8
 803913e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039142:	e048      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8039144:	2310      	movs	r3, #16
 8039146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803914a:	e044      	b.n	80391d6 <UART_SetConfig+0x5a6>
 803914c:	2320      	movs	r3, #32
 803914e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039152:	e040      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8039154:	2340      	movs	r3, #64	; 0x40
 8039156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803915a:	e03c      	b.n	80391d6 <UART_SetConfig+0x5a6>
 803915c:	2380      	movs	r3, #128	; 0x80
 803915e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039162:	e038      	b.n	80391d6 <UART_SetConfig+0x5a6>
 8039164:	697b      	ldr	r3, [r7, #20]
 8039166:	681b      	ldr	r3, [r3, #0]
 8039168:	4a5b      	ldr	r2, [pc, #364]	; (80392d8 <UART_SetConfig+0x6a8>)
 803916a:	4293      	cmp	r3, r2
 803916c:	d130      	bne.n	80391d0 <UART_SetConfig+0x5a0>
 803916e:	4b57      	ldr	r3, [pc, #348]	; (80392cc <UART_SetConfig+0x69c>)
 8039170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8039172:	f003 0307 	and.w	r3, r3, #7
 8039176:	2b05      	cmp	r3, #5
 8039178:	d826      	bhi.n	80391c8 <UART_SetConfig+0x598>
 803917a:	a201      	add	r2, pc, #4	; (adr r2, 8039180 <UART_SetConfig+0x550>)
 803917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039180:	08039199 	.word	0x08039199
 8039184:	080391a1 	.word	0x080391a1
 8039188:	080391a9 	.word	0x080391a9
 803918c:	080391b1 	.word	0x080391b1
 8039190:	080391b9 	.word	0x080391b9
 8039194:	080391c1 	.word	0x080391c1
 8039198:	2302      	movs	r3, #2
 803919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803919e:	e01a      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80391a0:	2304      	movs	r3, #4
 80391a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80391a6:	e016      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80391a8:	2308      	movs	r3, #8
 80391aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80391ae:	e012      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80391b0:	2310      	movs	r3, #16
 80391b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80391b6:	e00e      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80391b8:	2320      	movs	r3, #32
 80391ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80391be:	e00a      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80391c0:	2340      	movs	r3, #64	; 0x40
 80391c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80391c6:	e006      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80391c8:	2380      	movs	r3, #128	; 0x80
 80391ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80391ce:	e002      	b.n	80391d6 <UART_SetConfig+0x5a6>
 80391d0:	2380      	movs	r3, #128	; 0x80
 80391d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80391d6:	697b      	ldr	r3, [r7, #20]
 80391d8:	681b      	ldr	r3, [r3, #0]
 80391da:	4a3f      	ldr	r2, [pc, #252]	; (80392d8 <UART_SetConfig+0x6a8>)
 80391dc:	4293      	cmp	r3, r2
 80391de:	f040 80f8 	bne.w	80393d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80391e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80391e6:	2b20      	cmp	r3, #32
 80391e8:	dc46      	bgt.n	8039278 <UART_SetConfig+0x648>
 80391ea:	2b02      	cmp	r3, #2
 80391ec:	f2c0 8082 	blt.w	80392f4 <UART_SetConfig+0x6c4>
 80391f0:	3b02      	subs	r3, #2
 80391f2:	2b1e      	cmp	r3, #30
 80391f4:	d87e      	bhi.n	80392f4 <UART_SetConfig+0x6c4>
 80391f6:	a201      	add	r2, pc, #4	; (adr r2, 80391fc <UART_SetConfig+0x5cc>)
 80391f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80391fc:	0803927f 	.word	0x0803927f
 8039200:	080392f5 	.word	0x080392f5
 8039204:	08039287 	.word	0x08039287
 8039208:	080392f5 	.word	0x080392f5
 803920c:	080392f5 	.word	0x080392f5
 8039210:	080392f5 	.word	0x080392f5
 8039214:	08039297 	.word	0x08039297
 8039218:	080392f5 	.word	0x080392f5
 803921c:	080392f5 	.word	0x080392f5
 8039220:	080392f5 	.word	0x080392f5
 8039224:	080392f5 	.word	0x080392f5
 8039228:	080392f5 	.word	0x080392f5
 803922c:	080392f5 	.word	0x080392f5
 8039230:	080392f5 	.word	0x080392f5
 8039234:	080392a7 	.word	0x080392a7
 8039238:	080392f5 	.word	0x080392f5
 803923c:	080392f5 	.word	0x080392f5
 8039240:	080392f5 	.word	0x080392f5
 8039244:	080392f5 	.word	0x080392f5
 8039248:	080392f5 	.word	0x080392f5
 803924c:	080392f5 	.word	0x080392f5
 8039250:	080392f5 	.word	0x080392f5
 8039254:	080392f5 	.word	0x080392f5
 8039258:	080392f5 	.word	0x080392f5
 803925c:	080392f5 	.word	0x080392f5
 8039260:	080392f5 	.word	0x080392f5
 8039264:	080392f5 	.word	0x080392f5
 8039268:	080392f5 	.word	0x080392f5
 803926c:	080392f5 	.word	0x080392f5
 8039270:	080392f5 	.word	0x080392f5
 8039274:	080392e7 	.word	0x080392e7
 8039278:	2b40      	cmp	r3, #64	; 0x40
 803927a:	d037      	beq.n	80392ec <UART_SetConfig+0x6bc>
 803927c:	e03a      	b.n	80392f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 803927e:	f7fc fcbf 	bl	8035c00 <HAL_RCCEx_GetD3PCLK1Freq>
 8039282:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039284:	e03c      	b.n	8039300 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8039286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803928a:	4618      	mov	r0, r3
 803928c:	f7fc fcce 	bl	8035c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8039290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039294:	e034      	b.n	8039300 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8039296:	f107 0318 	add.w	r3, r7, #24
 803929a:	4618      	mov	r0, r3
 803929c:	f7fc fe1a 	bl	8035ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80392a0:	69fb      	ldr	r3, [r7, #28]
 80392a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80392a4:	e02c      	b.n	8039300 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80392a6:	4b09      	ldr	r3, [pc, #36]	; (80392cc <UART_SetConfig+0x69c>)
 80392a8:	681b      	ldr	r3, [r3, #0]
 80392aa:	f003 0320 	and.w	r3, r3, #32
 80392ae:	2b00      	cmp	r3, #0
 80392b0:	d016      	beq.n	80392e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80392b2:	4b06      	ldr	r3, [pc, #24]	; (80392cc <UART_SetConfig+0x69c>)
 80392b4:	681b      	ldr	r3, [r3, #0]
 80392b6:	08db      	lsrs	r3, r3, #3
 80392b8:	f003 0303 	and.w	r3, r3, #3
 80392bc:	4a07      	ldr	r2, [pc, #28]	; (80392dc <UART_SetConfig+0x6ac>)
 80392be:	fa22 f303 	lsr.w	r3, r2, r3
 80392c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80392c4:	e01c      	b.n	8039300 <UART_SetConfig+0x6d0>
 80392c6:	bf00      	nop
 80392c8:	40011400 	.word	0x40011400
 80392cc:	58024400 	.word	0x58024400
 80392d0:	40007800 	.word	0x40007800
 80392d4:	40007c00 	.word	0x40007c00
 80392d8:	58000c00 	.word	0x58000c00
 80392dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80392e0:	4b9d      	ldr	r3, [pc, #628]	; (8039558 <UART_SetConfig+0x928>)
 80392e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80392e4:	e00c      	b.n	8039300 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80392e6:	4b9d      	ldr	r3, [pc, #628]	; (803955c <UART_SetConfig+0x92c>)
 80392e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80392ea:	e009      	b.n	8039300 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80392ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80392f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80392f2:	e005      	b.n	8039300 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80392f4:	2300      	movs	r3, #0
 80392f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80392f8:	2301      	movs	r3, #1
 80392fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80392fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8039300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039302:	2b00      	cmp	r3, #0
 8039304:	f000 81de 	beq.w	80396c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8039308:	697b      	ldr	r3, [r7, #20]
 803930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803930c:	4a94      	ldr	r2, [pc, #592]	; (8039560 <UART_SetConfig+0x930>)
 803930e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8039312:	461a      	mov	r2, r3
 8039314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039316:	fbb3 f3f2 	udiv	r3, r3, r2
 803931a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 803931c:	697b      	ldr	r3, [r7, #20]
 803931e:	685a      	ldr	r2, [r3, #4]
 8039320:	4613      	mov	r3, r2
 8039322:	005b      	lsls	r3, r3, #1
 8039324:	4413      	add	r3, r2
 8039326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039328:	429a      	cmp	r2, r3
 803932a:	d305      	bcc.n	8039338 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 803932c:	697b      	ldr	r3, [r7, #20]
 803932e:	685b      	ldr	r3, [r3, #4]
 8039330:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8039332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039334:	429a      	cmp	r2, r3
 8039336:	d903      	bls.n	8039340 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8039338:	2301      	movs	r3, #1
 803933a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 803933e:	e1c1      	b.n	80396c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8039340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039342:	2200      	movs	r2, #0
 8039344:	60bb      	str	r3, [r7, #8]
 8039346:	60fa      	str	r2, [r7, #12]
 8039348:	697b      	ldr	r3, [r7, #20]
 803934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803934c:	4a84      	ldr	r2, [pc, #528]	; (8039560 <UART_SetConfig+0x930>)
 803934e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8039352:	b29b      	uxth	r3, r3
 8039354:	2200      	movs	r2, #0
 8039356:	603b      	str	r3, [r7, #0]
 8039358:	607a      	str	r2, [r7, #4]
 803935a:	e9d7 2300 	ldrd	r2, r3, [r7]
 803935e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8039362:	f7e7 f80d 	bl	8020380 <__aeabi_uldivmod>
 8039366:	4602      	mov	r2, r0
 8039368:	460b      	mov	r3, r1
 803936a:	4610      	mov	r0, r2
 803936c:	4619      	mov	r1, r3
 803936e:	f04f 0200 	mov.w	r2, #0
 8039372:	f04f 0300 	mov.w	r3, #0
 8039376:	020b      	lsls	r3, r1, #8
 8039378:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 803937c:	0202      	lsls	r2, r0, #8
 803937e:	6979      	ldr	r1, [r7, #20]
 8039380:	6849      	ldr	r1, [r1, #4]
 8039382:	0849      	lsrs	r1, r1, #1
 8039384:	2000      	movs	r0, #0
 8039386:	460c      	mov	r4, r1
 8039388:	4605      	mov	r5, r0
 803938a:	eb12 0804 	adds.w	r8, r2, r4
 803938e:	eb43 0905 	adc.w	r9, r3, r5
 8039392:	697b      	ldr	r3, [r7, #20]
 8039394:	685b      	ldr	r3, [r3, #4]
 8039396:	2200      	movs	r2, #0
 8039398:	469a      	mov	sl, r3
 803939a:	4693      	mov	fp, r2
 803939c:	4652      	mov	r2, sl
 803939e:	465b      	mov	r3, fp
 80393a0:	4640      	mov	r0, r8
 80393a2:	4649      	mov	r1, r9
 80393a4:	f7e6 ffec 	bl	8020380 <__aeabi_uldivmod>
 80393a8:	4602      	mov	r2, r0
 80393aa:	460b      	mov	r3, r1
 80393ac:	4613      	mov	r3, r2
 80393ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80393b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80393b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80393b6:	d308      	bcc.n	80393ca <UART_SetConfig+0x79a>
 80393b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80393ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80393be:	d204      	bcs.n	80393ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80393c0:	697b      	ldr	r3, [r7, #20]
 80393c2:	681b      	ldr	r3, [r3, #0]
 80393c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80393c6:	60da      	str	r2, [r3, #12]
 80393c8:	e17c      	b.n	80396c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80393ca:	2301      	movs	r3, #1
 80393cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80393d0:	e178      	b.n	80396c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80393d2:	697b      	ldr	r3, [r7, #20]
 80393d4:	69db      	ldr	r3, [r3, #28]
 80393d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80393da:	f040 80c5 	bne.w	8039568 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80393de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80393e2:	2b20      	cmp	r3, #32
 80393e4:	dc48      	bgt.n	8039478 <UART_SetConfig+0x848>
 80393e6:	2b00      	cmp	r3, #0
 80393e8:	db7b      	blt.n	80394e2 <UART_SetConfig+0x8b2>
 80393ea:	2b20      	cmp	r3, #32
 80393ec:	d879      	bhi.n	80394e2 <UART_SetConfig+0x8b2>
 80393ee:	a201      	add	r2, pc, #4	; (adr r2, 80393f4 <UART_SetConfig+0x7c4>)
 80393f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80393f4:	0803947f 	.word	0x0803947f
 80393f8:	08039487 	.word	0x08039487
 80393fc:	080394e3 	.word	0x080394e3
 8039400:	080394e3 	.word	0x080394e3
 8039404:	0803948f 	.word	0x0803948f
 8039408:	080394e3 	.word	0x080394e3
 803940c:	080394e3 	.word	0x080394e3
 8039410:	080394e3 	.word	0x080394e3
 8039414:	0803949f 	.word	0x0803949f
 8039418:	080394e3 	.word	0x080394e3
 803941c:	080394e3 	.word	0x080394e3
 8039420:	080394e3 	.word	0x080394e3
 8039424:	080394e3 	.word	0x080394e3
 8039428:	080394e3 	.word	0x080394e3
 803942c:	080394e3 	.word	0x080394e3
 8039430:	080394e3 	.word	0x080394e3
 8039434:	080394af 	.word	0x080394af
 8039438:	080394e3 	.word	0x080394e3
 803943c:	080394e3 	.word	0x080394e3
 8039440:	080394e3 	.word	0x080394e3
 8039444:	080394e3 	.word	0x080394e3
 8039448:	080394e3 	.word	0x080394e3
 803944c:	080394e3 	.word	0x080394e3
 8039450:	080394e3 	.word	0x080394e3
 8039454:	080394e3 	.word	0x080394e3
 8039458:	080394e3 	.word	0x080394e3
 803945c:	080394e3 	.word	0x080394e3
 8039460:	080394e3 	.word	0x080394e3
 8039464:	080394e3 	.word	0x080394e3
 8039468:	080394e3 	.word	0x080394e3
 803946c:	080394e3 	.word	0x080394e3
 8039470:	080394e3 	.word	0x080394e3
 8039474:	080394d5 	.word	0x080394d5
 8039478:	2b40      	cmp	r3, #64	; 0x40
 803947a:	d02e      	beq.n	80394da <UART_SetConfig+0x8aa>
 803947c:	e031      	b.n	80394e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803947e:	f7fb fc4d 	bl	8034d1c <HAL_RCC_GetPCLK1Freq>
 8039482:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039484:	e033      	b.n	80394ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8039486:	f7fb fc5f 	bl	8034d48 <HAL_RCC_GetPCLK2Freq>
 803948a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803948c:	e02f      	b.n	80394ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803948e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8039492:	4618      	mov	r0, r3
 8039494:	f7fc fbca 	bl	8035c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8039498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803949a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803949c:	e027      	b.n	80394ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803949e:	f107 0318 	add.w	r3, r7, #24
 80394a2:	4618      	mov	r0, r3
 80394a4:	f7fc fd16 	bl	8035ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80394a8:	69fb      	ldr	r3, [r7, #28]
 80394aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80394ac:	e01f      	b.n	80394ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80394ae:	4b2d      	ldr	r3, [pc, #180]	; (8039564 <UART_SetConfig+0x934>)
 80394b0:	681b      	ldr	r3, [r3, #0]
 80394b2:	f003 0320 	and.w	r3, r3, #32
 80394b6:	2b00      	cmp	r3, #0
 80394b8:	d009      	beq.n	80394ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80394ba:	4b2a      	ldr	r3, [pc, #168]	; (8039564 <UART_SetConfig+0x934>)
 80394bc:	681b      	ldr	r3, [r3, #0]
 80394be:	08db      	lsrs	r3, r3, #3
 80394c0:	f003 0303 	and.w	r3, r3, #3
 80394c4:	4a24      	ldr	r2, [pc, #144]	; (8039558 <UART_SetConfig+0x928>)
 80394c6:	fa22 f303 	lsr.w	r3, r2, r3
 80394ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80394cc:	e00f      	b.n	80394ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80394ce:	4b22      	ldr	r3, [pc, #136]	; (8039558 <UART_SetConfig+0x928>)
 80394d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80394d2:	e00c      	b.n	80394ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80394d4:	4b21      	ldr	r3, [pc, #132]	; (803955c <UART_SetConfig+0x92c>)
 80394d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80394d8:	e009      	b.n	80394ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80394da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80394de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80394e0:	e005      	b.n	80394ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80394e2:	2300      	movs	r3, #0
 80394e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80394e6:	2301      	movs	r3, #1
 80394e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80394ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80394ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80394f0:	2b00      	cmp	r3, #0
 80394f2:	f000 80e7 	beq.w	80396c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80394f6:	697b      	ldr	r3, [r7, #20]
 80394f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80394fa:	4a19      	ldr	r2, [pc, #100]	; (8039560 <UART_SetConfig+0x930>)
 80394fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8039500:	461a      	mov	r2, r3
 8039502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039504:	fbb3 f3f2 	udiv	r3, r3, r2
 8039508:	005a      	lsls	r2, r3, #1
 803950a:	697b      	ldr	r3, [r7, #20]
 803950c:	685b      	ldr	r3, [r3, #4]
 803950e:	085b      	lsrs	r3, r3, #1
 8039510:	441a      	add	r2, r3
 8039512:	697b      	ldr	r3, [r7, #20]
 8039514:	685b      	ldr	r3, [r3, #4]
 8039516:	fbb2 f3f3 	udiv	r3, r2, r3
 803951a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 803951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803951e:	2b0f      	cmp	r3, #15
 8039520:	d916      	bls.n	8039550 <UART_SetConfig+0x920>
 8039522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8039528:	d212      	bcs.n	8039550 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 803952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803952c:	b29b      	uxth	r3, r3
 803952e:	f023 030f 	bic.w	r3, r3, #15
 8039532:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8039534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039536:	085b      	lsrs	r3, r3, #1
 8039538:	b29b      	uxth	r3, r3
 803953a:	f003 0307 	and.w	r3, r3, #7
 803953e:	b29a      	uxth	r2, r3
 8039540:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8039542:	4313      	orrs	r3, r2
 8039544:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8039546:	697b      	ldr	r3, [r7, #20]
 8039548:	681b      	ldr	r3, [r3, #0]
 803954a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 803954c:	60da      	str	r2, [r3, #12]
 803954e:	e0b9      	b.n	80396c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8039550:	2301      	movs	r3, #1
 8039552:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8039556:	e0b5      	b.n	80396c4 <UART_SetConfig+0xa94>
 8039558:	03d09000 	.word	0x03d09000
 803955c:	003d0900 	.word	0x003d0900
 8039560:	0805b288 	.word	0x0805b288
 8039564:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8039568:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803956c:	2b20      	cmp	r3, #32
 803956e:	dc49      	bgt.n	8039604 <UART_SetConfig+0x9d4>
 8039570:	2b00      	cmp	r3, #0
 8039572:	db7c      	blt.n	803966e <UART_SetConfig+0xa3e>
 8039574:	2b20      	cmp	r3, #32
 8039576:	d87a      	bhi.n	803966e <UART_SetConfig+0xa3e>
 8039578:	a201      	add	r2, pc, #4	; (adr r2, 8039580 <UART_SetConfig+0x950>)
 803957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803957e:	bf00      	nop
 8039580:	0803960b 	.word	0x0803960b
 8039584:	08039613 	.word	0x08039613
 8039588:	0803966f 	.word	0x0803966f
 803958c:	0803966f 	.word	0x0803966f
 8039590:	0803961b 	.word	0x0803961b
 8039594:	0803966f 	.word	0x0803966f
 8039598:	0803966f 	.word	0x0803966f
 803959c:	0803966f 	.word	0x0803966f
 80395a0:	0803962b 	.word	0x0803962b
 80395a4:	0803966f 	.word	0x0803966f
 80395a8:	0803966f 	.word	0x0803966f
 80395ac:	0803966f 	.word	0x0803966f
 80395b0:	0803966f 	.word	0x0803966f
 80395b4:	0803966f 	.word	0x0803966f
 80395b8:	0803966f 	.word	0x0803966f
 80395bc:	0803966f 	.word	0x0803966f
 80395c0:	0803963b 	.word	0x0803963b
 80395c4:	0803966f 	.word	0x0803966f
 80395c8:	0803966f 	.word	0x0803966f
 80395cc:	0803966f 	.word	0x0803966f
 80395d0:	0803966f 	.word	0x0803966f
 80395d4:	0803966f 	.word	0x0803966f
 80395d8:	0803966f 	.word	0x0803966f
 80395dc:	0803966f 	.word	0x0803966f
 80395e0:	0803966f 	.word	0x0803966f
 80395e4:	0803966f 	.word	0x0803966f
 80395e8:	0803966f 	.word	0x0803966f
 80395ec:	0803966f 	.word	0x0803966f
 80395f0:	0803966f 	.word	0x0803966f
 80395f4:	0803966f 	.word	0x0803966f
 80395f8:	0803966f 	.word	0x0803966f
 80395fc:	0803966f 	.word	0x0803966f
 8039600:	08039661 	.word	0x08039661
 8039604:	2b40      	cmp	r3, #64	; 0x40
 8039606:	d02e      	beq.n	8039666 <UART_SetConfig+0xa36>
 8039608:	e031      	b.n	803966e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803960a:	f7fb fb87 	bl	8034d1c <HAL_RCC_GetPCLK1Freq>
 803960e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039610:	e033      	b.n	803967a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8039612:	f7fb fb99 	bl	8034d48 <HAL_RCC_GetPCLK2Freq>
 8039616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039618:	e02f      	b.n	803967a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803961a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803961e:	4618      	mov	r0, r3
 8039620:	f7fc fb04 	bl	8035c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8039624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039628:	e027      	b.n	803967a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803962a:	f107 0318 	add.w	r3, r7, #24
 803962e:	4618      	mov	r0, r3
 8039630:	f7fc fc50 	bl	8035ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8039634:	69fb      	ldr	r3, [r7, #28]
 8039636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039638:	e01f      	b.n	803967a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803963a:	4b2d      	ldr	r3, [pc, #180]	; (80396f0 <UART_SetConfig+0xac0>)
 803963c:	681b      	ldr	r3, [r3, #0]
 803963e:	f003 0320 	and.w	r3, r3, #32
 8039642:	2b00      	cmp	r3, #0
 8039644:	d009      	beq.n	803965a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8039646:	4b2a      	ldr	r3, [pc, #168]	; (80396f0 <UART_SetConfig+0xac0>)
 8039648:	681b      	ldr	r3, [r3, #0]
 803964a:	08db      	lsrs	r3, r3, #3
 803964c:	f003 0303 	and.w	r3, r3, #3
 8039650:	4a28      	ldr	r2, [pc, #160]	; (80396f4 <UART_SetConfig+0xac4>)
 8039652:	fa22 f303 	lsr.w	r3, r2, r3
 8039656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8039658:	e00f      	b.n	803967a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 803965a:	4b26      	ldr	r3, [pc, #152]	; (80396f4 <UART_SetConfig+0xac4>)
 803965c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803965e:	e00c      	b.n	803967a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8039660:	4b25      	ldr	r3, [pc, #148]	; (80396f8 <UART_SetConfig+0xac8>)
 8039662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039664:	e009      	b.n	803967a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8039666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803966a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803966c:	e005      	b.n	803967a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 803966e:	2300      	movs	r3, #0
 8039670:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8039672:	2301      	movs	r3, #1
 8039674:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8039678:	bf00      	nop
    }

    if (pclk != 0U)
 803967a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803967c:	2b00      	cmp	r3, #0
 803967e:	d021      	beq.n	80396c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8039680:	697b      	ldr	r3, [r7, #20]
 8039682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8039684:	4a1d      	ldr	r2, [pc, #116]	; (80396fc <UART_SetConfig+0xacc>)
 8039686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803968a:	461a      	mov	r2, r3
 803968c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803968e:	fbb3 f2f2 	udiv	r2, r3, r2
 8039692:	697b      	ldr	r3, [r7, #20]
 8039694:	685b      	ldr	r3, [r3, #4]
 8039696:	085b      	lsrs	r3, r3, #1
 8039698:	441a      	add	r2, r3
 803969a:	697b      	ldr	r3, [r7, #20]
 803969c:	685b      	ldr	r3, [r3, #4]
 803969e:	fbb2 f3f3 	udiv	r3, r2, r3
 80396a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80396a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80396a6:	2b0f      	cmp	r3, #15
 80396a8:	d909      	bls.n	80396be <UART_SetConfig+0xa8e>
 80396aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80396ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80396b0:	d205      	bcs.n	80396be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80396b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80396b4:	b29a      	uxth	r2, r3
 80396b6:	697b      	ldr	r3, [r7, #20]
 80396b8:	681b      	ldr	r3, [r3, #0]
 80396ba:	60da      	str	r2, [r3, #12]
 80396bc:	e002      	b.n	80396c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80396be:	2301      	movs	r3, #1
 80396c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80396c4:	697b      	ldr	r3, [r7, #20]
 80396c6:	2201      	movs	r2, #1
 80396c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80396cc:	697b      	ldr	r3, [r7, #20]
 80396ce:	2201      	movs	r2, #1
 80396d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80396d4:	697b      	ldr	r3, [r7, #20]
 80396d6:	2200      	movs	r2, #0
 80396d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80396da:	697b      	ldr	r3, [r7, #20]
 80396dc:	2200      	movs	r2, #0
 80396de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80396e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80396e4:	4618      	mov	r0, r3
 80396e6:	3748      	adds	r7, #72	; 0x48
 80396e8:	46bd      	mov	sp, r7
 80396ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80396ee:	bf00      	nop
 80396f0:	58024400 	.word	0x58024400
 80396f4:	03d09000 	.word	0x03d09000
 80396f8:	003d0900 	.word	0x003d0900
 80396fc:	0805b288 	.word	0x0805b288

08039700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8039700:	b480      	push	{r7}
 8039702:	b083      	sub	sp, #12
 8039704:	af00      	add	r7, sp, #0
 8039706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8039708:	687b      	ldr	r3, [r7, #4]
 803970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803970c:	f003 0301 	and.w	r3, r3, #1
 8039710:	2b00      	cmp	r3, #0
 8039712:	d00a      	beq.n	803972a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8039714:	687b      	ldr	r3, [r7, #4]
 8039716:	681b      	ldr	r3, [r3, #0]
 8039718:	685b      	ldr	r3, [r3, #4]
 803971a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 803971e:	687b      	ldr	r3, [r7, #4]
 8039720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039722:	687b      	ldr	r3, [r7, #4]
 8039724:	681b      	ldr	r3, [r3, #0]
 8039726:	430a      	orrs	r2, r1
 8039728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 803972a:	687b      	ldr	r3, [r7, #4]
 803972c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803972e:	f003 0302 	and.w	r3, r3, #2
 8039732:	2b00      	cmp	r3, #0
 8039734:	d00a      	beq.n	803974c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8039736:	687b      	ldr	r3, [r7, #4]
 8039738:	681b      	ldr	r3, [r3, #0]
 803973a:	685b      	ldr	r3, [r3, #4]
 803973c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8039740:	687b      	ldr	r3, [r7, #4]
 8039742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8039744:	687b      	ldr	r3, [r7, #4]
 8039746:	681b      	ldr	r3, [r3, #0]
 8039748:	430a      	orrs	r2, r1
 803974a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 803974c:	687b      	ldr	r3, [r7, #4]
 803974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039750:	f003 0304 	and.w	r3, r3, #4
 8039754:	2b00      	cmp	r3, #0
 8039756:	d00a      	beq.n	803976e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8039758:	687b      	ldr	r3, [r7, #4]
 803975a:	681b      	ldr	r3, [r3, #0]
 803975c:	685b      	ldr	r3, [r3, #4]
 803975e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8039762:	687b      	ldr	r3, [r7, #4]
 8039764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8039766:	687b      	ldr	r3, [r7, #4]
 8039768:	681b      	ldr	r3, [r3, #0]
 803976a:	430a      	orrs	r2, r1
 803976c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 803976e:	687b      	ldr	r3, [r7, #4]
 8039770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039772:	f003 0308 	and.w	r3, r3, #8
 8039776:	2b00      	cmp	r3, #0
 8039778:	d00a      	beq.n	8039790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 803977a:	687b      	ldr	r3, [r7, #4]
 803977c:	681b      	ldr	r3, [r3, #0]
 803977e:	685b      	ldr	r3, [r3, #4]
 8039780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8039784:	687b      	ldr	r3, [r7, #4]
 8039786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8039788:	687b      	ldr	r3, [r7, #4]
 803978a:	681b      	ldr	r3, [r3, #0]
 803978c:	430a      	orrs	r2, r1
 803978e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8039790:	687b      	ldr	r3, [r7, #4]
 8039792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039794:	f003 0310 	and.w	r3, r3, #16
 8039798:	2b00      	cmp	r3, #0
 803979a:	d00a      	beq.n	80397b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 803979c:	687b      	ldr	r3, [r7, #4]
 803979e:	681b      	ldr	r3, [r3, #0]
 80397a0:	689b      	ldr	r3, [r3, #8]
 80397a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80397a6:	687b      	ldr	r3, [r7, #4]
 80397a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80397aa:	687b      	ldr	r3, [r7, #4]
 80397ac:	681b      	ldr	r3, [r3, #0]
 80397ae:	430a      	orrs	r2, r1
 80397b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80397b2:	687b      	ldr	r3, [r7, #4]
 80397b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80397b6:	f003 0320 	and.w	r3, r3, #32
 80397ba:	2b00      	cmp	r3, #0
 80397bc:	d00a      	beq.n	80397d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80397be:	687b      	ldr	r3, [r7, #4]
 80397c0:	681b      	ldr	r3, [r3, #0]
 80397c2:	689b      	ldr	r3, [r3, #8]
 80397c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80397c8:	687b      	ldr	r3, [r7, #4]
 80397ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80397cc:	687b      	ldr	r3, [r7, #4]
 80397ce:	681b      	ldr	r3, [r3, #0]
 80397d0:	430a      	orrs	r2, r1
 80397d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80397d4:	687b      	ldr	r3, [r7, #4]
 80397d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80397d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80397dc:	2b00      	cmp	r3, #0
 80397de:	d01a      	beq.n	8039816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80397e0:	687b      	ldr	r3, [r7, #4]
 80397e2:	681b      	ldr	r3, [r3, #0]
 80397e4:	685b      	ldr	r3, [r3, #4]
 80397e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80397ea:	687b      	ldr	r3, [r7, #4]
 80397ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80397ee:	687b      	ldr	r3, [r7, #4]
 80397f0:	681b      	ldr	r3, [r3, #0]
 80397f2:	430a      	orrs	r2, r1
 80397f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80397f6:	687b      	ldr	r3, [r7, #4]
 80397f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80397fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80397fe:	d10a      	bne.n	8039816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8039800:	687b      	ldr	r3, [r7, #4]
 8039802:	681b      	ldr	r3, [r3, #0]
 8039804:	685b      	ldr	r3, [r3, #4]
 8039806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 803980a:	687b      	ldr	r3, [r7, #4]
 803980c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803980e:	687b      	ldr	r3, [r7, #4]
 8039810:	681b      	ldr	r3, [r3, #0]
 8039812:	430a      	orrs	r2, r1
 8039814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8039816:	687b      	ldr	r3, [r7, #4]
 8039818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803981a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803981e:	2b00      	cmp	r3, #0
 8039820:	d00a      	beq.n	8039838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8039822:	687b      	ldr	r3, [r7, #4]
 8039824:	681b      	ldr	r3, [r3, #0]
 8039826:	685b      	ldr	r3, [r3, #4]
 8039828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 803982c:	687b      	ldr	r3, [r7, #4]
 803982e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8039830:	687b      	ldr	r3, [r7, #4]
 8039832:	681b      	ldr	r3, [r3, #0]
 8039834:	430a      	orrs	r2, r1
 8039836:	605a      	str	r2, [r3, #4]
  }
}
 8039838:	bf00      	nop
 803983a:	370c      	adds	r7, #12
 803983c:	46bd      	mov	sp, r7
 803983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039842:	4770      	bx	lr

08039844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8039844:	b580      	push	{r7, lr}
 8039846:	b086      	sub	sp, #24
 8039848:	af02      	add	r7, sp, #8
 803984a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 803984c:	687b      	ldr	r3, [r7, #4]
 803984e:	2200      	movs	r2, #0
 8039850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8039854:	f7f4 faec 	bl	802de30 <HAL_GetTick>
 8039858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 803985a:	687b      	ldr	r3, [r7, #4]
 803985c:	681b      	ldr	r3, [r3, #0]
 803985e:	681b      	ldr	r3, [r3, #0]
 8039860:	f003 0308 	and.w	r3, r3, #8
 8039864:	2b08      	cmp	r3, #8
 8039866:	d10e      	bne.n	8039886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8039868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 803986c:	9300      	str	r3, [sp, #0]
 803986e:	68fb      	ldr	r3, [r7, #12]
 8039870:	2200      	movs	r2, #0
 8039872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8039876:	6878      	ldr	r0, [r7, #4]
 8039878:	f000 f82f 	bl	80398da <UART_WaitOnFlagUntilTimeout>
 803987c:	4603      	mov	r3, r0
 803987e:	2b00      	cmp	r3, #0
 8039880:	d001      	beq.n	8039886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8039882:	2303      	movs	r3, #3
 8039884:	e025      	b.n	80398d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8039886:	687b      	ldr	r3, [r7, #4]
 8039888:	681b      	ldr	r3, [r3, #0]
 803988a:	681b      	ldr	r3, [r3, #0]
 803988c:	f003 0304 	and.w	r3, r3, #4
 8039890:	2b04      	cmp	r3, #4
 8039892:	d10e      	bne.n	80398b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8039894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8039898:	9300      	str	r3, [sp, #0]
 803989a:	68fb      	ldr	r3, [r7, #12]
 803989c:	2200      	movs	r2, #0
 803989e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80398a2:	6878      	ldr	r0, [r7, #4]
 80398a4:	f000 f819 	bl	80398da <UART_WaitOnFlagUntilTimeout>
 80398a8:	4603      	mov	r3, r0
 80398aa:	2b00      	cmp	r3, #0
 80398ac:	d001      	beq.n	80398b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80398ae:	2303      	movs	r3, #3
 80398b0:	e00f      	b.n	80398d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80398b2:	687b      	ldr	r3, [r7, #4]
 80398b4:	2220      	movs	r2, #32
 80398b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80398ba:	687b      	ldr	r3, [r7, #4]
 80398bc:	2220      	movs	r2, #32
 80398be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80398c2:	687b      	ldr	r3, [r7, #4]
 80398c4:	2200      	movs	r2, #0
 80398c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80398c8:	687b      	ldr	r3, [r7, #4]
 80398ca:	2200      	movs	r2, #0
 80398cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80398d0:	2300      	movs	r3, #0
}
 80398d2:	4618      	mov	r0, r3
 80398d4:	3710      	adds	r7, #16
 80398d6:	46bd      	mov	sp, r7
 80398d8:	bd80      	pop	{r7, pc}

080398da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80398da:	b580      	push	{r7, lr}
 80398dc:	b09c      	sub	sp, #112	; 0x70
 80398de:	af00      	add	r7, sp, #0
 80398e0:	60f8      	str	r0, [r7, #12]
 80398e2:	60b9      	str	r1, [r7, #8]
 80398e4:	603b      	str	r3, [r7, #0]
 80398e6:	4613      	mov	r3, r2
 80398e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80398ea:	e0a9      	b.n	8039a40 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80398ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80398ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80398f2:	f000 80a5 	beq.w	8039a40 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80398f6:	f7f4 fa9b 	bl	802de30 <HAL_GetTick>
 80398fa:	4602      	mov	r2, r0
 80398fc:	683b      	ldr	r3, [r7, #0]
 80398fe:	1ad3      	subs	r3, r2, r3
 8039900:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8039902:	429a      	cmp	r2, r3
 8039904:	d302      	bcc.n	803990c <UART_WaitOnFlagUntilTimeout+0x32>
 8039906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8039908:	2b00      	cmp	r3, #0
 803990a:	d140      	bne.n	803998e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 803990c:	68fb      	ldr	r3, [r7, #12]
 803990e:	681b      	ldr	r3, [r3, #0]
 8039910:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8039914:	e853 3f00 	ldrex	r3, [r3]
 8039918:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803991a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803991c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8039920:	667b      	str	r3, [r7, #100]	; 0x64
 8039922:	68fb      	ldr	r3, [r7, #12]
 8039924:	681b      	ldr	r3, [r3, #0]
 8039926:	461a      	mov	r2, r3
 8039928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803992a:	65fb      	str	r3, [r7, #92]	; 0x5c
 803992c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803992e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8039930:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8039932:	e841 2300 	strex	r3, r2, [r1]
 8039936:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8039938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803993a:	2b00      	cmp	r3, #0
 803993c:	d1e6      	bne.n	803990c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803993e:	68fb      	ldr	r3, [r7, #12]
 8039940:	681b      	ldr	r3, [r3, #0]
 8039942:	3308      	adds	r3, #8
 8039944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039948:	e853 3f00 	ldrex	r3, [r3]
 803994c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039950:	f023 0301 	bic.w	r3, r3, #1
 8039954:	663b      	str	r3, [r7, #96]	; 0x60
 8039956:	68fb      	ldr	r3, [r7, #12]
 8039958:	681b      	ldr	r3, [r3, #0]
 803995a:	3308      	adds	r3, #8
 803995c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 803995e:	64ba      	str	r2, [r7, #72]	; 0x48
 8039960:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8039964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8039966:	e841 2300 	strex	r3, r2, [r1]
 803996a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 803996c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803996e:	2b00      	cmp	r3, #0
 8039970:	d1e5      	bne.n	803993e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8039972:	68fb      	ldr	r3, [r7, #12]
 8039974:	2220      	movs	r2, #32
 8039976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 803997a:	68fb      	ldr	r3, [r7, #12]
 803997c:	2220      	movs	r2, #32
 803997e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8039982:	68fb      	ldr	r3, [r7, #12]
 8039984:	2200      	movs	r2, #0
 8039986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 803998a:	2303      	movs	r3, #3
 803998c:	e069      	b.n	8039a62 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 803998e:	68fb      	ldr	r3, [r7, #12]
 8039990:	681b      	ldr	r3, [r3, #0]
 8039992:	681b      	ldr	r3, [r3, #0]
 8039994:	f003 0304 	and.w	r3, r3, #4
 8039998:	2b00      	cmp	r3, #0
 803999a:	d051      	beq.n	8039a40 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 803999c:	68fb      	ldr	r3, [r7, #12]
 803999e:	681b      	ldr	r3, [r3, #0]
 80399a0:	69db      	ldr	r3, [r3, #28]
 80399a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80399a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80399aa:	d149      	bne.n	8039a40 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80399ac:	68fb      	ldr	r3, [r7, #12]
 80399ae:	681b      	ldr	r3, [r3, #0]
 80399b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80399b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80399b6:	68fb      	ldr	r3, [r7, #12]
 80399b8:	681b      	ldr	r3, [r3, #0]
 80399ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80399bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80399be:	e853 3f00 	ldrex	r3, [r3]
 80399c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80399c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80399c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80399ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80399cc:	68fb      	ldr	r3, [r7, #12]
 80399ce:	681b      	ldr	r3, [r3, #0]
 80399d0:	461a      	mov	r2, r3
 80399d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80399d4:	637b      	str	r3, [r7, #52]	; 0x34
 80399d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80399d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80399da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80399dc:	e841 2300 	strex	r3, r2, [r1]
 80399e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80399e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80399e4:	2b00      	cmp	r3, #0
 80399e6:	d1e6      	bne.n	80399b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80399e8:	68fb      	ldr	r3, [r7, #12]
 80399ea:	681b      	ldr	r3, [r3, #0]
 80399ec:	3308      	adds	r3, #8
 80399ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80399f0:	697b      	ldr	r3, [r7, #20]
 80399f2:	e853 3f00 	ldrex	r3, [r3]
 80399f6:	613b      	str	r3, [r7, #16]
   return(result);
 80399f8:	693b      	ldr	r3, [r7, #16]
 80399fa:	f023 0301 	bic.w	r3, r3, #1
 80399fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8039a00:	68fb      	ldr	r3, [r7, #12]
 8039a02:	681b      	ldr	r3, [r3, #0]
 8039a04:	3308      	adds	r3, #8
 8039a06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8039a08:	623a      	str	r2, [r7, #32]
 8039a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039a0c:	69f9      	ldr	r1, [r7, #28]
 8039a0e:	6a3a      	ldr	r2, [r7, #32]
 8039a10:	e841 2300 	strex	r3, r2, [r1]
 8039a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8039a16:	69bb      	ldr	r3, [r7, #24]
 8039a18:	2b00      	cmp	r3, #0
 8039a1a:	d1e5      	bne.n	80399e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8039a1c:	68fb      	ldr	r3, [r7, #12]
 8039a1e:	2220      	movs	r2, #32
 8039a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8039a24:	68fb      	ldr	r3, [r7, #12]
 8039a26:	2220      	movs	r2, #32
 8039a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8039a2c:	68fb      	ldr	r3, [r7, #12]
 8039a2e:	2220      	movs	r2, #32
 8039a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8039a34:	68fb      	ldr	r3, [r7, #12]
 8039a36:	2200      	movs	r2, #0
 8039a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8039a3c:	2303      	movs	r3, #3
 8039a3e:	e010      	b.n	8039a62 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8039a40:	68fb      	ldr	r3, [r7, #12]
 8039a42:	681b      	ldr	r3, [r3, #0]
 8039a44:	69da      	ldr	r2, [r3, #28]
 8039a46:	68bb      	ldr	r3, [r7, #8]
 8039a48:	4013      	ands	r3, r2
 8039a4a:	68ba      	ldr	r2, [r7, #8]
 8039a4c:	429a      	cmp	r2, r3
 8039a4e:	bf0c      	ite	eq
 8039a50:	2301      	moveq	r3, #1
 8039a52:	2300      	movne	r3, #0
 8039a54:	b2db      	uxtb	r3, r3
 8039a56:	461a      	mov	r2, r3
 8039a58:	79fb      	ldrb	r3, [r7, #7]
 8039a5a:	429a      	cmp	r2, r3
 8039a5c:	f43f af46 	beq.w	80398ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8039a60:	2300      	movs	r3, #0
}
 8039a62:	4618      	mov	r0, r3
 8039a64:	3770      	adds	r7, #112	; 0x70
 8039a66:	46bd      	mov	sp, r7
 8039a68:	bd80      	pop	{r7, pc}
	...

08039a6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8039a6c:	b480      	push	{r7}
 8039a6e:	b0a3      	sub	sp, #140	; 0x8c
 8039a70:	af00      	add	r7, sp, #0
 8039a72:	60f8      	str	r0, [r7, #12]
 8039a74:	60b9      	str	r1, [r7, #8]
 8039a76:	4613      	mov	r3, r2
 8039a78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8039a7a:	68fb      	ldr	r3, [r7, #12]
 8039a7c:	68ba      	ldr	r2, [r7, #8]
 8039a7e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8039a80:	68fb      	ldr	r3, [r7, #12]
 8039a82:	88fa      	ldrh	r2, [r7, #6]
 8039a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8039a88:	68fb      	ldr	r3, [r7, #12]
 8039a8a:	88fa      	ldrh	r2, [r7, #6]
 8039a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8039a90:	68fb      	ldr	r3, [r7, #12]
 8039a92:	2200      	movs	r2, #0
 8039a94:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8039a96:	68fb      	ldr	r3, [r7, #12]
 8039a98:	689b      	ldr	r3, [r3, #8]
 8039a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8039a9e:	d10e      	bne.n	8039abe <UART_Start_Receive_IT+0x52>
 8039aa0:	68fb      	ldr	r3, [r7, #12]
 8039aa2:	691b      	ldr	r3, [r3, #16]
 8039aa4:	2b00      	cmp	r3, #0
 8039aa6:	d105      	bne.n	8039ab4 <UART_Start_Receive_IT+0x48>
 8039aa8:	68fb      	ldr	r3, [r7, #12]
 8039aaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8039aae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039ab2:	e02d      	b.n	8039b10 <UART_Start_Receive_IT+0xa4>
 8039ab4:	68fb      	ldr	r3, [r7, #12]
 8039ab6:	22ff      	movs	r2, #255	; 0xff
 8039ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039abc:	e028      	b.n	8039b10 <UART_Start_Receive_IT+0xa4>
 8039abe:	68fb      	ldr	r3, [r7, #12]
 8039ac0:	689b      	ldr	r3, [r3, #8]
 8039ac2:	2b00      	cmp	r3, #0
 8039ac4:	d10d      	bne.n	8039ae2 <UART_Start_Receive_IT+0x76>
 8039ac6:	68fb      	ldr	r3, [r7, #12]
 8039ac8:	691b      	ldr	r3, [r3, #16]
 8039aca:	2b00      	cmp	r3, #0
 8039acc:	d104      	bne.n	8039ad8 <UART_Start_Receive_IT+0x6c>
 8039ace:	68fb      	ldr	r3, [r7, #12]
 8039ad0:	22ff      	movs	r2, #255	; 0xff
 8039ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039ad6:	e01b      	b.n	8039b10 <UART_Start_Receive_IT+0xa4>
 8039ad8:	68fb      	ldr	r3, [r7, #12]
 8039ada:	227f      	movs	r2, #127	; 0x7f
 8039adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039ae0:	e016      	b.n	8039b10 <UART_Start_Receive_IT+0xa4>
 8039ae2:	68fb      	ldr	r3, [r7, #12]
 8039ae4:	689b      	ldr	r3, [r3, #8]
 8039ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8039aea:	d10d      	bne.n	8039b08 <UART_Start_Receive_IT+0x9c>
 8039aec:	68fb      	ldr	r3, [r7, #12]
 8039aee:	691b      	ldr	r3, [r3, #16]
 8039af0:	2b00      	cmp	r3, #0
 8039af2:	d104      	bne.n	8039afe <UART_Start_Receive_IT+0x92>
 8039af4:	68fb      	ldr	r3, [r7, #12]
 8039af6:	227f      	movs	r2, #127	; 0x7f
 8039af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039afc:	e008      	b.n	8039b10 <UART_Start_Receive_IT+0xa4>
 8039afe:	68fb      	ldr	r3, [r7, #12]
 8039b00:	223f      	movs	r2, #63	; 0x3f
 8039b02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039b06:	e003      	b.n	8039b10 <UART_Start_Receive_IT+0xa4>
 8039b08:	68fb      	ldr	r3, [r7, #12]
 8039b0a:	2200      	movs	r2, #0
 8039b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8039b10:	68fb      	ldr	r3, [r7, #12]
 8039b12:	2200      	movs	r2, #0
 8039b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8039b18:	68fb      	ldr	r3, [r7, #12]
 8039b1a:	2222      	movs	r2, #34	; 0x22
 8039b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8039b20:	68fb      	ldr	r3, [r7, #12]
 8039b22:	681b      	ldr	r3, [r3, #0]
 8039b24:	3308      	adds	r3, #8
 8039b26:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8039b2a:	e853 3f00 	ldrex	r3, [r3]
 8039b2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8039b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8039b32:	f043 0301 	orr.w	r3, r3, #1
 8039b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8039b3a:	68fb      	ldr	r3, [r7, #12]
 8039b3c:	681b      	ldr	r3, [r3, #0]
 8039b3e:	3308      	adds	r3, #8
 8039b40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8039b44:	673a      	str	r2, [r7, #112]	; 0x70
 8039b46:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039b48:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8039b4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8039b4c:	e841 2300 	strex	r3, r2, [r1]
 8039b50:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8039b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8039b54:	2b00      	cmp	r3, #0
 8039b56:	d1e3      	bne.n	8039b20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8039b58:	68fb      	ldr	r3, [r7, #12]
 8039b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8039b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8039b60:	d153      	bne.n	8039c0a <UART_Start_Receive_IT+0x19e>
 8039b62:	68fb      	ldr	r3, [r7, #12]
 8039b64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8039b68:	88fa      	ldrh	r2, [r7, #6]
 8039b6a:	429a      	cmp	r2, r3
 8039b6c:	d34d      	bcc.n	8039c0a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8039b6e:	68fb      	ldr	r3, [r7, #12]
 8039b70:	689b      	ldr	r3, [r3, #8]
 8039b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8039b76:	d107      	bne.n	8039b88 <UART_Start_Receive_IT+0x11c>
 8039b78:	68fb      	ldr	r3, [r7, #12]
 8039b7a:	691b      	ldr	r3, [r3, #16]
 8039b7c:	2b00      	cmp	r3, #0
 8039b7e:	d103      	bne.n	8039b88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8039b80:	68fb      	ldr	r3, [r7, #12]
 8039b82:	4a4b      	ldr	r2, [pc, #300]	; (8039cb0 <UART_Start_Receive_IT+0x244>)
 8039b84:	671a      	str	r2, [r3, #112]	; 0x70
 8039b86:	e002      	b.n	8039b8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8039b88:	68fb      	ldr	r3, [r7, #12]
 8039b8a:	4a4a      	ldr	r2, [pc, #296]	; (8039cb4 <UART_Start_Receive_IT+0x248>)
 8039b8c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8039b8e:	68fb      	ldr	r3, [r7, #12]
 8039b90:	2200      	movs	r2, #0
 8039b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8039b96:	68fb      	ldr	r3, [r7, #12]
 8039b98:	691b      	ldr	r3, [r3, #16]
 8039b9a:	2b00      	cmp	r3, #0
 8039b9c:	d01a      	beq.n	8039bd4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8039b9e:	68fb      	ldr	r3, [r7, #12]
 8039ba0:	681b      	ldr	r3, [r3, #0]
 8039ba2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8039ba6:	e853 3f00 	ldrex	r3, [r3]
 8039baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8039bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8039bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8039bb6:	68fb      	ldr	r3, [r7, #12]
 8039bb8:	681b      	ldr	r3, [r3, #0]
 8039bba:	461a      	mov	r2, r3
 8039bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8039bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8039bc2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039bc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8039bc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8039bc8:	e841 2300 	strex	r3, r2, [r1]
 8039bcc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8039bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8039bd0:	2b00      	cmp	r3, #0
 8039bd2:	d1e4      	bne.n	8039b9e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8039bd4:	68fb      	ldr	r3, [r7, #12]
 8039bd6:	681b      	ldr	r3, [r3, #0]
 8039bd8:	3308      	adds	r3, #8
 8039bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039bde:	e853 3f00 	ldrex	r3, [r3]
 8039be2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8039be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039bea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8039bec:	68fb      	ldr	r3, [r7, #12]
 8039bee:	681b      	ldr	r3, [r3, #0]
 8039bf0:	3308      	adds	r3, #8
 8039bf2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8039bf4:	64ba      	str	r2, [r7, #72]	; 0x48
 8039bf6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039bf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8039bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8039bfc:	e841 2300 	strex	r3, r2, [r1]
 8039c00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8039c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8039c04:	2b00      	cmp	r3, #0
 8039c06:	d1e5      	bne.n	8039bd4 <UART_Start_Receive_IT+0x168>
 8039c08:	e04a      	b.n	8039ca0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8039c0a:	68fb      	ldr	r3, [r7, #12]
 8039c0c:	689b      	ldr	r3, [r3, #8]
 8039c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8039c12:	d107      	bne.n	8039c24 <UART_Start_Receive_IT+0x1b8>
 8039c14:	68fb      	ldr	r3, [r7, #12]
 8039c16:	691b      	ldr	r3, [r3, #16]
 8039c18:	2b00      	cmp	r3, #0
 8039c1a:	d103      	bne.n	8039c24 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8039c1c:	68fb      	ldr	r3, [r7, #12]
 8039c1e:	4a26      	ldr	r2, [pc, #152]	; (8039cb8 <UART_Start_Receive_IT+0x24c>)
 8039c20:	671a      	str	r2, [r3, #112]	; 0x70
 8039c22:	e002      	b.n	8039c2a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8039c24:	68fb      	ldr	r3, [r7, #12]
 8039c26:	4a25      	ldr	r2, [pc, #148]	; (8039cbc <UART_Start_Receive_IT+0x250>)
 8039c28:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8039c2a:	68fb      	ldr	r3, [r7, #12]
 8039c2c:	2200      	movs	r2, #0
 8039c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8039c32:	68fb      	ldr	r3, [r7, #12]
 8039c34:	691b      	ldr	r3, [r3, #16]
 8039c36:	2b00      	cmp	r3, #0
 8039c38:	d019      	beq.n	8039c6e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8039c3a:	68fb      	ldr	r3, [r7, #12]
 8039c3c:	681b      	ldr	r3, [r3, #0]
 8039c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039c42:	e853 3f00 	ldrex	r3, [r3]
 8039c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8039c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039c4a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8039c4e:	677b      	str	r3, [r7, #116]	; 0x74
 8039c50:	68fb      	ldr	r3, [r7, #12]
 8039c52:	681b      	ldr	r3, [r3, #0]
 8039c54:	461a      	mov	r2, r3
 8039c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8039c58:	637b      	str	r3, [r7, #52]	; 0x34
 8039c5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8039c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8039c60:	e841 2300 	strex	r3, r2, [r1]
 8039c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8039c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039c68:	2b00      	cmp	r3, #0
 8039c6a:	d1e6      	bne.n	8039c3a <UART_Start_Receive_IT+0x1ce>
 8039c6c:	e018      	b.n	8039ca0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8039c6e:	68fb      	ldr	r3, [r7, #12]
 8039c70:	681b      	ldr	r3, [r3, #0]
 8039c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039c74:	697b      	ldr	r3, [r7, #20]
 8039c76:	e853 3f00 	ldrex	r3, [r3]
 8039c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8039c7c:	693b      	ldr	r3, [r7, #16]
 8039c7e:	f043 0320 	orr.w	r3, r3, #32
 8039c82:	67bb      	str	r3, [r7, #120]	; 0x78
 8039c84:	68fb      	ldr	r3, [r7, #12]
 8039c86:	681b      	ldr	r3, [r3, #0]
 8039c88:	461a      	mov	r2, r3
 8039c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8039c8c:	623b      	str	r3, [r7, #32]
 8039c8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039c90:	69f9      	ldr	r1, [r7, #28]
 8039c92:	6a3a      	ldr	r2, [r7, #32]
 8039c94:	e841 2300 	strex	r3, r2, [r1]
 8039c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8039c9a:	69bb      	ldr	r3, [r7, #24]
 8039c9c:	2b00      	cmp	r3, #0
 8039c9e:	d1e6      	bne.n	8039c6e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8039ca0:	2300      	movs	r3, #0
}
 8039ca2:	4618      	mov	r0, r3
 8039ca4:	378c      	adds	r7, #140	; 0x8c
 8039ca6:	46bd      	mov	sp, r7
 8039ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039cac:	4770      	bx	lr
 8039cae:	bf00      	nop
 8039cb0:	0803a70d 	.word	0x0803a70d
 8039cb4:	0803a415 	.word	0x0803a415
 8039cb8:	0803a2b3 	.word	0x0803a2b3
 8039cbc:	0803a153 	.word	0x0803a153

08039cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8039cc0:	b480      	push	{r7}
 8039cc2:	b095      	sub	sp, #84	; 0x54
 8039cc4:	af00      	add	r7, sp, #0
 8039cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8039cc8:	687b      	ldr	r3, [r7, #4]
 8039cca:	681b      	ldr	r3, [r3, #0]
 8039ccc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039cd0:	e853 3f00 	ldrex	r3, [r3]
 8039cd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8039cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8039cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8039cde:	687b      	ldr	r3, [r7, #4]
 8039ce0:	681b      	ldr	r3, [r3, #0]
 8039ce2:	461a      	mov	r2, r3
 8039ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8039ce8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039cea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8039cec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8039cee:	e841 2300 	strex	r3, r2, [r1]
 8039cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8039cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039cf6:	2b00      	cmp	r3, #0
 8039cf8:	d1e6      	bne.n	8039cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8039cfa:	687b      	ldr	r3, [r7, #4]
 8039cfc:	681b      	ldr	r3, [r3, #0]
 8039cfe:	3308      	adds	r3, #8
 8039d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039d02:	6a3b      	ldr	r3, [r7, #32]
 8039d04:	e853 3f00 	ldrex	r3, [r3]
 8039d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8039d0a:	69fa      	ldr	r2, [r7, #28]
 8039d0c:	4b1e      	ldr	r3, [pc, #120]	; (8039d88 <UART_EndRxTransfer+0xc8>)
 8039d0e:	4013      	ands	r3, r2
 8039d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8039d12:	687b      	ldr	r3, [r7, #4]
 8039d14:	681b      	ldr	r3, [r3, #0]
 8039d16:	3308      	adds	r3, #8
 8039d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8039d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8039d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8039d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8039d22:	e841 2300 	strex	r3, r2, [r1]
 8039d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8039d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039d2a:	2b00      	cmp	r3, #0
 8039d2c:	d1e5      	bne.n	8039cfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8039d2e:	687b      	ldr	r3, [r7, #4]
 8039d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8039d32:	2b01      	cmp	r3, #1
 8039d34:	d118      	bne.n	8039d68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8039d36:	687b      	ldr	r3, [r7, #4]
 8039d38:	681b      	ldr	r3, [r3, #0]
 8039d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039d3c:	68fb      	ldr	r3, [r7, #12]
 8039d3e:	e853 3f00 	ldrex	r3, [r3]
 8039d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8039d44:	68bb      	ldr	r3, [r7, #8]
 8039d46:	f023 0310 	bic.w	r3, r3, #16
 8039d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8039d4c:	687b      	ldr	r3, [r7, #4]
 8039d4e:	681b      	ldr	r3, [r3, #0]
 8039d50:	461a      	mov	r2, r3
 8039d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8039d54:	61bb      	str	r3, [r7, #24]
 8039d56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039d58:	6979      	ldr	r1, [r7, #20]
 8039d5a:	69ba      	ldr	r2, [r7, #24]
 8039d5c:	e841 2300 	strex	r3, r2, [r1]
 8039d60:	613b      	str	r3, [r7, #16]
   return(result);
 8039d62:	693b      	ldr	r3, [r7, #16]
 8039d64:	2b00      	cmp	r3, #0
 8039d66:	d1e6      	bne.n	8039d36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8039d68:	687b      	ldr	r3, [r7, #4]
 8039d6a:	2220      	movs	r2, #32
 8039d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8039d70:	687b      	ldr	r3, [r7, #4]
 8039d72:	2200      	movs	r2, #0
 8039d74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8039d76:	687b      	ldr	r3, [r7, #4]
 8039d78:	2200      	movs	r2, #0
 8039d7a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8039d7c:	bf00      	nop
 8039d7e:	3754      	adds	r7, #84	; 0x54
 8039d80:	46bd      	mov	sp, r7
 8039d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039d86:	4770      	bx	lr
 8039d88:	effffffe 	.word	0xeffffffe

08039d8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8039d8c:	b580      	push	{r7, lr}
 8039d8e:	b084      	sub	sp, #16
 8039d90:	af00      	add	r7, sp, #0
 8039d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8039d94:	687b      	ldr	r3, [r7, #4]
 8039d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8039d98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8039d9a:	68fb      	ldr	r3, [r7, #12]
 8039d9c:	2200      	movs	r2, #0
 8039d9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8039da2:	68fb      	ldr	r3, [r7, #12]
 8039da4:	2200      	movs	r2, #0
 8039da6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8039daa:	68f8      	ldr	r0, [r7, #12]
 8039dac:	f7fe ff2a 	bl	8038c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8039db0:	bf00      	nop
 8039db2:	3710      	adds	r7, #16
 8039db4:	46bd      	mov	sp, r7
 8039db6:	bd80      	pop	{r7, pc}

08039db8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8039db8:	b480      	push	{r7}
 8039dba:	b08f      	sub	sp, #60	; 0x3c
 8039dbc:	af00      	add	r7, sp, #0
 8039dbe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8039dc0:	687b      	ldr	r3, [r7, #4]
 8039dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8039dc6:	2b21      	cmp	r3, #33	; 0x21
 8039dc8:	d14c      	bne.n	8039e64 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8039dca:	687b      	ldr	r3, [r7, #4]
 8039dcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8039dd0:	b29b      	uxth	r3, r3
 8039dd2:	2b00      	cmp	r3, #0
 8039dd4:	d132      	bne.n	8039e3c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8039dd6:	687b      	ldr	r3, [r7, #4]
 8039dd8:	681b      	ldr	r3, [r3, #0]
 8039dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039ddc:	6a3b      	ldr	r3, [r7, #32]
 8039dde:	e853 3f00 	ldrex	r3, [r3]
 8039de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8039de4:	69fb      	ldr	r3, [r7, #28]
 8039de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8039dea:	637b      	str	r3, [r7, #52]	; 0x34
 8039dec:	687b      	ldr	r3, [r7, #4]
 8039dee:	681b      	ldr	r3, [r3, #0]
 8039df0:	461a      	mov	r2, r3
 8039df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8039df6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8039dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8039dfc:	e841 2300 	strex	r3, r2, [r1]
 8039e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8039e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039e04:	2b00      	cmp	r3, #0
 8039e06:	d1e6      	bne.n	8039dd6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8039e08:	687b      	ldr	r3, [r7, #4]
 8039e0a:	681b      	ldr	r3, [r3, #0]
 8039e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039e0e:	68fb      	ldr	r3, [r7, #12]
 8039e10:	e853 3f00 	ldrex	r3, [r3]
 8039e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8039e16:	68bb      	ldr	r3, [r7, #8]
 8039e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8039e1e:	687b      	ldr	r3, [r7, #4]
 8039e20:	681b      	ldr	r3, [r3, #0]
 8039e22:	461a      	mov	r2, r3
 8039e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039e26:	61bb      	str	r3, [r7, #24]
 8039e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039e2a:	6979      	ldr	r1, [r7, #20]
 8039e2c:	69ba      	ldr	r2, [r7, #24]
 8039e2e:	e841 2300 	strex	r3, r2, [r1]
 8039e32:	613b      	str	r3, [r7, #16]
   return(result);
 8039e34:	693b      	ldr	r3, [r7, #16]
 8039e36:	2b00      	cmp	r3, #0
 8039e38:	d1e6      	bne.n	8039e08 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8039e3a:	e013      	b.n	8039e64 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8039e3c:	687b      	ldr	r3, [r7, #4]
 8039e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8039e40:	781a      	ldrb	r2, [r3, #0]
 8039e42:	687b      	ldr	r3, [r7, #4]
 8039e44:	681b      	ldr	r3, [r3, #0]
 8039e46:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8039e48:	687b      	ldr	r3, [r7, #4]
 8039e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8039e4c:	1c5a      	adds	r2, r3, #1
 8039e4e:	687b      	ldr	r3, [r7, #4]
 8039e50:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8039e52:	687b      	ldr	r3, [r7, #4]
 8039e54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8039e58:	b29b      	uxth	r3, r3
 8039e5a:	3b01      	subs	r3, #1
 8039e5c:	b29a      	uxth	r2, r3
 8039e5e:	687b      	ldr	r3, [r7, #4]
 8039e60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8039e64:	bf00      	nop
 8039e66:	373c      	adds	r7, #60	; 0x3c
 8039e68:	46bd      	mov	sp, r7
 8039e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039e6e:	4770      	bx	lr

08039e70 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8039e70:	b480      	push	{r7}
 8039e72:	b091      	sub	sp, #68	; 0x44
 8039e74:	af00      	add	r7, sp, #0
 8039e76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8039e78:	687b      	ldr	r3, [r7, #4]
 8039e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8039e7e:	2b21      	cmp	r3, #33	; 0x21
 8039e80:	d151      	bne.n	8039f26 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8039e82:	687b      	ldr	r3, [r7, #4]
 8039e84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8039e88:	b29b      	uxth	r3, r3
 8039e8a:	2b00      	cmp	r3, #0
 8039e8c:	d132      	bne.n	8039ef4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8039e8e:	687b      	ldr	r3, [r7, #4]
 8039e90:	681b      	ldr	r3, [r3, #0]
 8039e92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039e96:	e853 3f00 	ldrex	r3, [r3]
 8039e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8039e9c:	6a3b      	ldr	r3, [r7, #32]
 8039e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8039ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8039ea4:	687b      	ldr	r3, [r7, #4]
 8039ea6:	681b      	ldr	r3, [r3, #0]
 8039ea8:	461a      	mov	r2, r3
 8039eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039eac:	633b      	str	r3, [r7, #48]	; 0x30
 8039eae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8039eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039eb4:	e841 2300 	strex	r3, r2, [r1]
 8039eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8039eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039ebc:	2b00      	cmp	r3, #0
 8039ebe:	d1e6      	bne.n	8039e8e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8039ec0:	687b      	ldr	r3, [r7, #4]
 8039ec2:	681b      	ldr	r3, [r3, #0]
 8039ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039ec6:	693b      	ldr	r3, [r7, #16]
 8039ec8:	e853 3f00 	ldrex	r3, [r3]
 8039ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8039ece:	68fb      	ldr	r3, [r7, #12]
 8039ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8039ed6:	687b      	ldr	r3, [r7, #4]
 8039ed8:	681b      	ldr	r3, [r3, #0]
 8039eda:	461a      	mov	r2, r3
 8039edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039ede:	61fb      	str	r3, [r7, #28]
 8039ee0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039ee2:	69b9      	ldr	r1, [r7, #24]
 8039ee4:	69fa      	ldr	r2, [r7, #28]
 8039ee6:	e841 2300 	strex	r3, r2, [r1]
 8039eea:	617b      	str	r3, [r7, #20]
   return(result);
 8039eec:	697b      	ldr	r3, [r7, #20]
 8039eee:	2b00      	cmp	r3, #0
 8039ef0:	d1e6      	bne.n	8039ec0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8039ef2:	e018      	b.n	8039f26 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8039ef4:	687b      	ldr	r3, [r7, #4]
 8039ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8039ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8039efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039efc:	881b      	ldrh	r3, [r3, #0]
 8039efe:	461a      	mov	r2, r3
 8039f00:	687b      	ldr	r3, [r7, #4]
 8039f02:	681b      	ldr	r3, [r3, #0]
 8039f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8039f08:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8039f0a:	687b      	ldr	r3, [r7, #4]
 8039f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8039f0e:	1c9a      	adds	r2, r3, #2
 8039f10:	687b      	ldr	r3, [r7, #4]
 8039f12:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8039f14:	687b      	ldr	r3, [r7, #4]
 8039f16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8039f1a:	b29b      	uxth	r3, r3
 8039f1c:	3b01      	subs	r3, #1
 8039f1e:	b29a      	uxth	r2, r3
 8039f20:	687b      	ldr	r3, [r7, #4]
 8039f22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8039f26:	bf00      	nop
 8039f28:	3744      	adds	r7, #68	; 0x44
 8039f2a:	46bd      	mov	sp, r7
 8039f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039f30:	4770      	bx	lr

08039f32 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8039f32:	b480      	push	{r7}
 8039f34:	b091      	sub	sp, #68	; 0x44
 8039f36:	af00      	add	r7, sp, #0
 8039f38:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8039f3a:	687b      	ldr	r3, [r7, #4]
 8039f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8039f40:	2b21      	cmp	r3, #33	; 0x21
 8039f42:	d160      	bne.n	803a006 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8039f44:	687b      	ldr	r3, [r7, #4]
 8039f46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8039f4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8039f4c:	e057      	b.n	8039ffe <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8039f4e:	687b      	ldr	r3, [r7, #4]
 8039f50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8039f54:	b29b      	uxth	r3, r3
 8039f56:	2b00      	cmp	r3, #0
 8039f58:	d133      	bne.n	8039fc2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8039f5a:	687b      	ldr	r3, [r7, #4]
 8039f5c:	681b      	ldr	r3, [r3, #0]
 8039f5e:	3308      	adds	r3, #8
 8039f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039f64:	e853 3f00 	ldrex	r3, [r3]
 8039f68:	623b      	str	r3, [r7, #32]
   return(result);
 8039f6a:	6a3b      	ldr	r3, [r7, #32]
 8039f6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8039f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8039f72:	687b      	ldr	r3, [r7, #4]
 8039f74:	681b      	ldr	r3, [r3, #0]
 8039f76:	3308      	adds	r3, #8
 8039f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8039f7a:	633a      	str	r2, [r7, #48]	; 0x30
 8039f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8039f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039f82:	e841 2300 	strex	r3, r2, [r1]
 8039f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8039f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039f8a:	2b00      	cmp	r3, #0
 8039f8c:	d1e5      	bne.n	8039f5a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8039f8e:	687b      	ldr	r3, [r7, #4]
 8039f90:	681b      	ldr	r3, [r3, #0]
 8039f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039f94:	693b      	ldr	r3, [r7, #16]
 8039f96:	e853 3f00 	ldrex	r3, [r3]
 8039f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8039f9c:	68fb      	ldr	r3, [r7, #12]
 8039f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8039fa4:	687b      	ldr	r3, [r7, #4]
 8039fa6:	681b      	ldr	r3, [r3, #0]
 8039fa8:	461a      	mov	r2, r3
 8039faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039fac:	61fb      	str	r3, [r7, #28]
 8039fae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039fb0:	69b9      	ldr	r1, [r7, #24]
 8039fb2:	69fa      	ldr	r2, [r7, #28]
 8039fb4:	e841 2300 	strex	r3, r2, [r1]
 8039fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8039fba:	697b      	ldr	r3, [r7, #20]
 8039fbc:	2b00      	cmp	r3, #0
 8039fbe:	d1e6      	bne.n	8039f8e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8039fc0:	e021      	b.n	803a006 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8039fc2:	687b      	ldr	r3, [r7, #4]
 8039fc4:	681b      	ldr	r3, [r3, #0]
 8039fc6:	69db      	ldr	r3, [r3, #28]
 8039fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8039fcc:	2b00      	cmp	r3, #0
 8039fce:	d013      	beq.n	8039ff8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8039fd0:	687b      	ldr	r3, [r7, #4]
 8039fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8039fd4:	781a      	ldrb	r2, [r3, #0]
 8039fd6:	687b      	ldr	r3, [r7, #4]
 8039fd8:	681b      	ldr	r3, [r3, #0]
 8039fda:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8039fdc:	687b      	ldr	r3, [r7, #4]
 8039fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8039fe0:	1c5a      	adds	r2, r3, #1
 8039fe2:	687b      	ldr	r3, [r7, #4]
 8039fe4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8039fe6:	687b      	ldr	r3, [r7, #4]
 8039fe8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8039fec:	b29b      	uxth	r3, r3
 8039fee:	3b01      	subs	r3, #1
 8039ff0:	b29a      	uxth	r2, r3
 8039ff2:	687b      	ldr	r3, [r7, #4]
 8039ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8039ff8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8039ffa:	3b01      	subs	r3, #1
 8039ffc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8039ffe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803a000:	2b00      	cmp	r3, #0
 803a002:	d1a4      	bne.n	8039f4e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 803a004:	e7ff      	b.n	803a006 <UART_TxISR_8BIT_FIFOEN+0xd4>
 803a006:	bf00      	nop
 803a008:	3744      	adds	r7, #68	; 0x44
 803a00a:	46bd      	mov	sp, r7
 803a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a010:	4770      	bx	lr

0803a012 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803a012:	b480      	push	{r7}
 803a014:	b091      	sub	sp, #68	; 0x44
 803a016:	af00      	add	r7, sp, #0
 803a018:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803a01a:	687b      	ldr	r3, [r7, #4]
 803a01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803a020:	2b21      	cmp	r3, #33	; 0x21
 803a022:	d165      	bne.n	803a0f0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803a024:	687b      	ldr	r3, [r7, #4]
 803a026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803a02a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803a02c:	e05c      	b.n	803a0e8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 803a02e:	687b      	ldr	r3, [r7, #4]
 803a030:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a034:	b29b      	uxth	r3, r3
 803a036:	2b00      	cmp	r3, #0
 803a038:	d133      	bne.n	803a0a2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803a03a:	687b      	ldr	r3, [r7, #4]
 803a03c:	681b      	ldr	r3, [r3, #0]
 803a03e:	3308      	adds	r3, #8
 803a040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a042:	6a3b      	ldr	r3, [r7, #32]
 803a044:	e853 3f00 	ldrex	r3, [r3]
 803a048:	61fb      	str	r3, [r7, #28]
   return(result);
 803a04a:	69fb      	ldr	r3, [r7, #28]
 803a04c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 803a050:	637b      	str	r3, [r7, #52]	; 0x34
 803a052:	687b      	ldr	r3, [r7, #4]
 803a054:	681b      	ldr	r3, [r3, #0]
 803a056:	3308      	adds	r3, #8
 803a058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803a05a:	62fa      	str	r2, [r7, #44]	; 0x2c
 803a05c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a05e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803a060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a062:	e841 2300 	strex	r3, r2, [r1]
 803a066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a06a:	2b00      	cmp	r3, #0
 803a06c:	d1e5      	bne.n	803a03a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803a06e:	687b      	ldr	r3, [r7, #4]
 803a070:	681b      	ldr	r3, [r3, #0]
 803a072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a074:	68fb      	ldr	r3, [r7, #12]
 803a076:	e853 3f00 	ldrex	r3, [r3]
 803a07a:	60bb      	str	r3, [r7, #8]
   return(result);
 803a07c:	68bb      	ldr	r3, [r7, #8]
 803a07e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a082:	633b      	str	r3, [r7, #48]	; 0x30
 803a084:	687b      	ldr	r3, [r7, #4]
 803a086:	681b      	ldr	r3, [r3, #0]
 803a088:	461a      	mov	r2, r3
 803a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a08c:	61bb      	str	r3, [r7, #24]
 803a08e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a090:	6979      	ldr	r1, [r7, #20]
 803a092:	69ba      	ldr	r2, [r7, #24]
 803a094:	e841 2300 	strex	r3, r2, [r1]
 803a098:	613b      	str	r3, [r7, #16]
   return(result);
 803a09a:	693b      	ldr	r3, [r7, #16]
 803a09c:	2b00      	cmp	r3, #0
 803a09e:	d1e6      	bne.n	803a06e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 803a0a0:	e026      	b.n	803a0f0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 803a0a2:	687b      	ldr	r3, [r7, #4]
 803a0a4:	681b      	ldr	r3, [r3, #0]
 803a0a6:	69db      	ldr	r3, [r3, #28]
 803a0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803a0ac:	2b00      	cmp	r3, #0
 803a0ae:	d018      	beq.n	803a0e2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 803a0b0:	687b      	ldr	r3, [r7, #4]
 803a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a0b4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 803a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a0b8:	881b      	ldrh	r3, [r3, #0]
 803a0ba:	461a      	mov	r2, r3
 803a0bc:	687b      	ldr	r3, [r7, #4]
 803a0be:	681b      	ldr	r3, [r3, #0]
 803a0c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 803a0c4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 803a0c6:	687b      	ldr	r3, [r7, #4]
 803a0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a0ca:	1c9a      	adds	r2, r3, #2
 803a0cc:	687b      	ldr	r3, [r7, #4]
 803a0ce:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 803a0d0:	687b      	ldr	r3, [r7, #4]
 803a0d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a0d6:	b29b      	uxth	r3, r3
 803a0d8:	3b01      	subs	r3, #1
 803a0da:	b29a      	uxth	r2, r3
 803a0dc:	687b      	ldr	r3, [r7, #4]
 803a0de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803a0e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803a0e4:	3b01      	subs	r3, #1
 803a0e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803a0e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803a0ea:	2b00      	cmp	r3, #0
 803a0ec:	d19f      	bne.n	803a02e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 803a0ee:	e7ff      	b.n	803a0f0 <UART_TxISR_16BIT_FIFOEN+0xde>
 803a0f0:	bf00      	nop
 803a0f2:	3744      	adds	r7, #68	; 0x44
 803a0f4:	46bd      	mov	sp, r7
 803a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a0fa:	4770      	bx	lr

0803a0fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 803a0fc:	b580      	push	{r7, lr}
 803a0fe:	b088      	sub	sp, #32
 803a100:	af00      	add	r7, sp, #0
 803a102:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803a104:	687b      	ldr	r3, [r7, #4]
 803a106:	681b      	ldr	r3, [r3, #0]
 803a108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a10a:	68fb      	ldr	r3, [r7, #12]
 803a10c:	e853 3f00 	ldrex	r3, [r3]
 803a110:	60bb      	str	r3, [r7, #8]
   return(result);
 803a112:	68bb      	ldr	r3, [r7, #8]
 803a114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803a118:	61fb      	str	r3, [r7, #28]
 803a11a:	687b      	ldr	r3, [r7, #4]
 803a11c:	681b      	ldr	r3, [r3, #0]
 803a11e:	461a      	mov	r2, r3
 803a120:	69fb      	ldr	r3, [r7, #28]
 803a122:	61bb      	str	r3, [r7, #24]
 803a124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a126:	6979      	ldr	r1, [r7, #20]
 803a128:	69ba      	ldr	r2, [r7, #24]
 803a12a:	e841 2300 	strex	r3, r2, [r1]
 803a12e:	613b      	str	r3, [r7, #16]
   return(result);
 803a130:	693b      	ldr	r3, [r7, #16]
 803a132:	2b00      	cmp	r3, #0
 803a134:	d1e6      	bne.n	803a104 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 803a136:	687b      	ldr	r3, [r7, #4]
 803a138:	2220      	movs	r2, #32
 803a13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 803a13e:	687b      	ldr	r3, [r7, #4]
 803a140:	2200      	movs	r2, #0
 803a142:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 803a144:	6878      	ldr	r0, [r7, #4]
 803a146:	f7f2 fd81 	bl	802cc4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803a14a:	bf00      	nop
 803a14c:	3720      	adds	r7, #32
 803a14e:	46bd      	mov	sp, r7
 803a150:	bd80      	pop	{r7, pc}

0803a152 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 803a152:	b580      	push	{r7, lr}
 803a154:	b096      	sub	sp, #88	; 0x58
 803a156:	af00      	add	r7, sp, #0
 803a158:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 803a15a:	687b      	ldr	r3, [r7, #4]
 803a15c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803a160:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803a164:	687b      	ldr	r3, [r7, #4]
 803a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803a16a:	2b22      	cmp	r3, #34	; 0x22
 803a16c:	f040 8095 	bne.w	803a29a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803a170:	687b      	ldr	r3, [r7, #4]
 803a172:	681b      	ldr	r3, [r3, #0]
 803a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a176:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 803a17a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 803a17e:	b2d9      	uxtb	r1, r3
 803a180:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803a184:	b2da      	uxtb	r2, r3
 803a186:	687b      	ldr	r3, [r7, #4]
 803a188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a18a:	400a      	ands	r2, r1
 803a18c:	b2d2      	uxtb	r2, r2
 803a18e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 803a190:	687b      	ldr	r3, [r7, #4]
 803a192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a194:	1c5a      	adds	r2, r3, #1
 803a196:	687b      	ldr	r3, [r7, #4]
 803a198:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803a19a:	687b      	ldr	r3, [r7, #4]
 803a19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a1a0:	b29b      	uxth	r3, r3
 803a1a2:	3b01      	subs	r3, #1
 803a1a4:	b29a      	uxth	r2, r3
 803a1a6:	687b      	ldr	r3, [r7, #4]
 803a1a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 803a1ac:	687b      	ldr	r3, [r7, #4]
 803a1ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a1b2:	b29b      	uxth	r3, r3
 803a1b4:	2b00      	cmp	r3, #0
 803a1b6:	d178      	bne.n	803a2aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803a1b8:	687b      	ldr	r3, [r7, #4]
 803a1ba:	681b      	ldr	r3, [r3, #0]
 803a1bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a1c0:	e853 3f00 	ldrex	r3, [r3]
 803a1c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a1c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803a1cc:	653b      	str	r3, [r7, #80]	; 0x50
 803a1ce:	687b      	ldr	r3, [r7, #4]
 803a1d0:	681b      	ldr	r3, [r3, #0]
 803a1d2:	461a      	mov	r2, r3
 803a1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803a1d6:	647b      	str	r3, [r7, #68]	; 0x44
 803a1d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a1da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 803a1dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803a1de:	e841 2300 	strex	r3, r2, [r1]
 803a1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803a1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a1e6:	2b00      	cmp	r3, #0
 803a1e8:	d1e6      	bne.n	803a1b8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803a1ea:	687b      	ldr	r3, [r7, #4]
 803a1ec:	681b      	ldr	r3, [r3, #0]
 803a1ee:	3308      	adds	r3, #8
 803a1f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a1f4:	e853 3f00 	ldrex	r3, [r3]
 803a1f8:	623b      	str	r3, [r7, #32]
   return(result);
 803a1fa:	6a3b      	ldr	r3, [r7, #32]
 803a1fc:	f023 0301 	bic.w	r3, r3, #1
 803a200:	64fb      	str	r3, [r7, #76]	; 0x4c
 803a202:	687b      	ldr	r3, [r7, #4]
 803a204:	681b      	ldr	r3, [r3, #0]
 803a206:	3308      	adds	r3, #8
 803a208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803a20a:	633a      	str	r2, [r7, #48]	; 0x30
 803a20c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a20e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803a210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a212:	e841 2300 	strex	r3, r2, [r1]
 803a216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a21a:	2b00      	cmp	r3, #0
 803a21c:	d1e5      	bne.n	803a1ea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 803a21e:	687b      	ldr	r3, [r7, #4]
 803a220:	2220      	movs	r2, #32
 803a222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803a226:	687b      	ldr	r3, [r7, #4]
 803a228:	2200      	movs	r2, #0
 803a22a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803a22c:	687b      	ldr	r3, [r7, #4]
 803a22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803a230:	2b01      	cmp	r3, #1
 803a232:	d12e      	bne.n	803a292 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803a234:	687b      	ldr	r3, [r7, #4]
 803a236:	2200      	movs	r2, #0
 803a238:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803a23a:	687b      	ldr	r3, [r7, #4]
 803a23c:	681b      	ldr	r3, [r3, #0]
 803a23e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a240:	693b      	ldr	r3, [r7, #16]
 803a242:	e853 3f00 	ldrex	r3, [r3]
 803a246:	60fb      	str	r3, [r7, #12]
   return(result);
 803a248:	68fb      	ldr	r3, [r7, #12]
 803a24a:	f023 0310 	bic.w	r3, r3, #16
 803a24e:	64bb      	str	r3, [r7, #72]	; 0x48
 803a250:	687b      	ldr	r3, [r7, #4]
 803a252:	681b      	ldr	r3, [r3, #0]
 803a254:	461a      	mov	r2, r3
 803a256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803a258:	61fb      	str	r3, [r7, #28]
 803a25a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a25c:	69b9      	ldr	r1, [r7, #24]
 803a25e:	69fa      	ldr	r2, [r7, #28]
 803a260:	e841 2300 	strex	r3, r2, [r1]
 803a264:	617b      	str	r3, [r7, #20]
   return(result);
 803a266:	697b      	ldr	r3, [r7, #20]
 803a268:	2b00      	cmp	r3, #0
 803a26a:	d1e6      	bne.n	803a23a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803a26c:	687b      	ldr	r3, [r7, #4]
 803a26e:	681b      	ldr	r3, [r3, #0]
 803a270:	69db      	ldr	r3, [r3, #28]
 803a272:	f003 0310 	and.w	r3, r3, #16
 803a276:	2b10      	cmp	r3, #16
 803a278:	d103      	bne.n	803a282 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803a27a:	687b      	ldr	r3, [r7, #4]
 803a27c:	681b      	ldr	r3, [r3, #0]
 803a27e:	2210      	movs	r2, #16
 803a280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803a282:	687b      	ldr	r3, [r7, #4]
 803a284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803a288:	4619      	mov	r1, r3
 803a28a:	6878      	ldr	r0, [r7, #4]
 803a28c:	f7fe fcc4 	bl	8038c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803a290:	e00b      	b.n	803a2aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803a292:	6878      	ldr	r0, [r7, #4]
 803a294:	f7f2 fcb6 	bl	802cc04 <HAL_UART_RxCpltCallback>
}
 803a298:	e007      	b.n	803a2aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803a29a:	687b      	ldr	r3, [r7, #4]
 803a29c:	681b      	ldr	r3, [r3, #0]
 803a29e:	699a      	ldr	r2, [r3, #24]
 803a2a0:	687b      	ldr	r3, [r7, #4]
 803a2a2:	681b      	ldr	r3, [r3, #0]
 803a2a4:	f042 0208 	orr.w	r2, r2, #8
 803a2a8:	619a      	str	r2, [r3, #24]
}
 803a2aa:	bf00      	nop
 803a2ac:	3758      	adds	r7, #88	; 0x58
 803a2ae:	46bd      	mov	sp, r7
 803a2b0:	bd80      	pop	{r7, pc}

0803a2b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 803a2b2:	b580      	push	{r7, lr}
 803a2b4:	b096      	sub	sp, #88	; 0x58
 803a2b6:	af00      	add	r7, sp, #0
 803a2b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 803a2ba:	687b      	ldr	r3, [r7, #4]
 803a2bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803a2c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803a2c4:	687b      	ldr	r3, [r7, #4]
 803a2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803a2ca:	2b22      	cmp	r3, #34	; 0x22
 803a2cc:	f040 8095 	bne.w	803a3fa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803a2d0:	687b      	ldr	r3, [r7, #4]
 803a2d2:	681b      	ldr	r3, [r3, #0]
 803a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a2d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 803a2da:	687b      	ldr	r3, [r7, #4]
 803a2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a2de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 803a2e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 803a2e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803a2e8:	4013      	ands	r3, r2
 803a2ea:	b29a      	uxth	r2, r3
 803a2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803a2ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 803a2f0:	687b      	ldr	r3, [r7, #4]
 803a2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a2f4:	1c9a      	adds	r2, r3, #2
 803a2f6:	687b      	ldr	r3, [r7, #4]
 803a2f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803a2fa:	687b      	ldr	r3, [r7, #4]
 803a2fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a300:	b29b      	uxth	r3, r3
 803a302:	3b01      	subs	r3, #1
 803a304:	b29a      	uxth	r2, r3
 803a306:	687b      	ldr	r3, [r7, #4]
 803a308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 803a30c:	687b      	ldr	r3, [r7, #4]
 803a30e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a312:	b29b      	uxth	r3, r3
 803a314:	2b00      	cmp	r3, #0
 803a316:	d178      	bne.n	803a40a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803a318:	687b      	ldr	r3, [r7, #4]
 803a31a:	681b      	ldr	r3, [r3, #0]
 803a31c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a320:	e853 3f00 	ldrex	r3, [r3]
 803a324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803a32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 803a32e:	687b      	ldr	r3, [r7, #4]
 803a330:	681b      	ldr	r3, [r3, #0]
 803a332:	461a      	mov	r2, r3
 803a334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803a336:	643b      	str	r3, [r7, #64]	; 0x40
 803a338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a33a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803a33c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803a33e:	e841 2300 	strex	r3, r2, [r1]
 803a342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a346:	2b00      	cmp	r3, #0
 803a348:	d1e6      	bne.n	803a318 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803a34a:	687b      	ldr	r3, [r7, #4]
 803a34c:	681b      	ldr	r3, [r3, #0]
 803a34e:	3308      	adds	r3, #8
 803a350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a352:	6a3b      	ldr	r3, [r7, #32]
 803a354:	e853 3f00 	ldrex	r3, [r3]
 803a358:	61fb      	str	r3, [r7, #28]
   return(result);
 803a35a:	69fb      	ldr	r3, [r7, #28]
 803a35c:	f023 0301 	bic.w	r3, r3, #1
 803a360:	64bb      	str	r3, [r7, #72]	; 0x48
 803a362:	687b      	ldr	r3, [r7, #4]
 803a364:	681b      	ldr	r3, [r3, #0]
 803a366:	3308      	adds	r3, #8
 803a368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803a36a:	62fa      	str	r2, [r7, #44]	; 0x2c
 803a36c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a36e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803a370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a372:	e841 2300 	strex	r3, r2, [r1]
 803a376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a37a:	2b00      	cmp	r3, #0
 803a37c:	d1e5      	bne.n	803a34a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 803a37e:	687b      	ldr	r3, [r7, #4]
 803a380:	2220      	movs	r2, #32
 803a382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803a386:	687b      	ldr	r3, [r7, #4]
 803a388:	2200      	movs	r2, #0
 803a38a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803a38c:	687b      	ldr	r3, [r7, #4]
 803a38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803a390:	2b01      	cmp	r3, #1
 803a392:	d12e      	bne.n	803a3f2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803a394:	687b      	ldr	r3, [r7, #4]
 803a396:	2200      	movs	r2, #0
 803a398:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803a39a:	687b      	ldr	r3, [r7, #4]
 803a39c:	681b      	ldr	r3, [r3, #0]
 803a39e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a3a0:	68fb      	ldr	r3, [r7, #12]
 803a3a2:	e853 3f00 	ldrex	r3, [r3]
 803a3a6:	60bb      	str	r3, [r7, #8]
   return(result);
 803a3a8:	68bb      	ldr	r3, [r7, #8]
 803a3aa:	f023 0310 	bic.w	r3, r3, #16
 803a3ae:	647b      	str	r3, [r7, #68]	; 0x44
 803a3b0:	687b      	ldr	r3, [r7, #4]
 803a3b2:	681b      	ldr	r3, [r3, #0]
 803a3b4:	461a      	mov	r2, r3
 803a3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803a3b8:	61bb      	str	r3, [r7, #24]
 803a3ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a3bc:	6979      	ldr	r1, [r7, #20]
 803a3be:	69ba      	ldr	r2, [r7, #24]
 803a3c0:	e841 2300 	strex	r3, r2, [r1]
 803a3c4:	613b      	str	r3, [r7, #16]
   return(result);
 803a3c6:	693b      	ldr	r3, [r7, #16]
 803a3c8:	2b00      	cmp	r3, #0
 803a3ca:	d1e6      	bne.n	803a39a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803a3cc:	687b      	ldr	r3, [r7, #4]
 803a3ce:	681b      	ldr	r3, [r3, #0]
 803a3d0:	69db      	ldr	r3, [r3, #28]
 803a3d2:	f003 0310 	and.w	r3, r3, #16
 803a3d6:	2b10      	cmp	r3, #16
 803a3d8:	d103      	bne.n	803a3e2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803a3da:	687b      	ldr	r3, [r7, #4]
 803a3dc:	681b      	ldr	r3, [r3, #0]
 803a3de:	2210      	movs	r2, #16
 803a3e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803a3e2:	687b      	ldr	r3, [r7, #4]
 803a3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803a3e8:	4619      	mov	r1, r3
 803a3ea:	6878      	ldr	r0, [r7, #4]
 803a3ec:	f7fe fc14 	bl	8038c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803a3f0:	e00b      	b.n	803a40a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803a3f2:	6878      	ldr	r0, [r7, #4]
 803a3f4:	f7f2 fc06 	bl	802cc04 <HAL_UART_RxCpltCallback>
}
 803a3f8:	e007      	b.n	803a40a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803a3fa:	687b      	ldr	r3, [r7, #4]
 803a3fc:	681b      	ldr	r3, [r3, #0]
 803a3fe:	699a      	ldr	r2, [r3, #24]
 803a400:	687b      	ldr	r3, [r7, #4]
 803a402:	681b      	ldr	r3, [r3, #0]
 803a404:	f042 0208 	orr.w	r2, r2, #8
 803a408:	619a      	str	r2, [r3, #24]
}
 803a40a:	bf00      	nop
 803a40c:	3758      	adds	r7, #88	; 0x58
 803a40e:	46bd      	mov	sp, r7
 803a410:	bd80      	pop	{r7, pc}
	...

0803a414 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803a414:	b580      	push	{r7, lr}
 803a416:	b0a6      	sub	sp, #152	; 0x98
 803a418:	af00      	add	r7, sp, #0
 803a41a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 803a41c:	687b      	ldr	r3, [r7, #4]
 803a41e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803a422:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803a426:	687b      	ldr	r3, [r7, #4]
 803a428:	681b      	ldr	r3, [r3, #0]
 803a42a:	69db      	ldr	r3, [r3, #28]
 803a42c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 803a430:	687b      	ldr	r3, [r7, #4]
 803a432:	681b      	ldr	r3, [r3, #0]
 803a434:	681b      	ldr	r3, [r3, #0]
 803a436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803a43a:	687b      	ldr	r3, [r7, #4]
 803a43c:	681b      	ldr	r3, [r3, #0]
 803a43e:	689b      	ldr	r3, [r3, #8]
 803a440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803a444:	687b      	ldr	r3, [r7, #4]
 803a446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803a44a:	2b22      	cmp	r3, #34	; 0x22
 803a44c:	f040 814d 	bne.w	803a6ea <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 803a450:	687b      	ldr	r3, [r7, #4]
 803a452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803a456:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803a45a:	e0f4      	b.n	803a646 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803a45c:	687b      	ldr	r3, [r7, #4]
 803a45e:	681b      	ldr	r3, [r3, #0]
 803a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a462:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 803a466:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 803a46a:	b2d9      	uxtb	r1, r3
 803a46c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 803a470:	b2da      	uxtb	r2, r3
 803a472:	687b      	ldr	r3, [r7, #4]
 803a474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a476:	400a      	ands	r2, r1
 803a478:	b2d2      	uxtb	r2, r2
 803a47a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 803a47c:	687b      	ldr	r3, [r7, #4]
 803a47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a480:	1c5a      	adds	r2, r3, #1
 803a482:	687b      	ldr	r3, [r7, #4]
 803a484:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803a486:	687b      	ldr	r3, [r7, #4]
 803a488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a48c:	b29b      	uxth	r3, r3
 803a48e:	3b01      	subs	r3, #1
 803a490:	b29a      	uxth	r2, r3
 803a492:	687b      	ldr	r3, [r7, #4]
 803a494:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803a498:	687b      	ldr	r3, [r7, #4]
 803a49a:	681b      	ldr	r3, [r3, #0]
 803a49c:	69db      	ldr	r3, [r3, #28]
 803a49e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803a4a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a4a6:	f003 0307 	and.w	r3, r3, #7
 803a4aa:	2b00      	cmp	r3, #0
 803a4ac:	d053      	beq.n	803a556 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803a4ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a4b2:	f003 0301 	and.w	r3, r3, #1
 803a4b6:	2b00      	cmp	r3, #0
 803a4b8:	d011      	beq.n	803a4de <UART_RxISR_8BIT_FIFOEN+0xca>
 803a4ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803a4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803a4c2:	2b00      	cmp	r3, #0
 803a4c4:	d00b      	beq.n	803a4de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803a4c6:	687b      	ldr	r3, [r7, #4]
 803a4c8:	681b      	ldr	r3, [r3, #0]
 803a4ca:	2201      	movs	r2, #1
 803a4cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 803a4ce:	687b      	ldr	r3, [r7, #4]
 803a4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a4d4:	f043 0201 	orr.w	r2, r3, #1
 803a4d8:	687b      	ldr	r3, [r7, #4]
 803a4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803a4de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a4e2:	f003 0302 	and.w	r3, r3, #2
 803a4e6:	2b00      	cmp	r3, #0
 803a4e8:	d011      	beq.n	803a50e <UART_RxISR_8BIT_FIFOEN+0xfa>
 803a4ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803a4ee:	f003 0301 	and.w	r3, r3, #1
 803a4f2:	2b00      	cmp	r3, #0
 803a4f4:	d00b      	beq.n	803a50e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803a4f6:	687b      	ldr	r3, [r7, #4]
 803a4f8:	681b      	ldr	r3, [r3, #0]
 803a4fa:	2202      	movs	r2, #2
 803a4fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803a4fe:	687b      	ldr	r3, [r7, #4]
 803a500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a504:	f043 0204 	orr.w	r2, r3, #4
 803a508:	687b      	ldr	r3, [r7, #4]
 803a50a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803a50e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a512:	f003 0304 	and.w	r3, r3, #4
 803a516:	2b00      	cmp	r3, #0
 803a518:	d011      	beq.n	803a53e <UART_RxISR_8BIT_FIFOEN+0x12a>
 803a51a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803a51e:	f003 0301 	and.w	r3, r3, #1
 803a522:	2b00      	cmp	r3, #0
 803a524:	d00b      	beq.n	803a53e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803a526:	687b      	ldr	r3, [r7, #4]
 803a528:	681b      	ldr	r3, [r3, #0]
 803a52a:	2204      	movs	r2, #4
 803a52c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 803a52e:	687b      	ldr	r3, [r7, #4]
 803a530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a534:	f043 0202 	orr.w	r2, r3, #2
 803a538:	687b      	ldr	r3, [r7, #4]
 803a53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803a53e:	687b      	ldr	r3, [r7, #4]
 803a540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a544:	2b00      	cmp	r3, #0
 803a546:	d006      	beq.n	803a556 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803a548:	6878      	ldr	r0, [r7, #4]
 803a54a:	f7fe fb5b 	bl	8038c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 803a54e:	687b      	ldr	r3, [r7, #4]
 803a550:	2200      	movs	r2, #0
 803a552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 803a556:	687b      	ldr	r3, [r7, #4]
 803a558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a55c:	b29b      	uxth	r3, r3
 803a55e:	2b00      	cmp	r3, #0
 803a560:	d171      	bne.n	803a646 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803a562:	687b      	ldr	r3, [r7, #4]
 803a564:	681b      	ldr	r3, [r3, #0]
 803a566:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803a56a:	e853 3f00 	ldrex	r3, [r3]
 803a56e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 803a570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803a572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803a576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803a57a:	687b      	ldr	r3, [r7, #4]
 803a57c:	681b      	ldr	r3, [r3, #0]
 803a57e:	461a      	mov	r2, r3
 803a580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 803a584:	66bb      	str	r3, [r7, #104]	; 0x68
 803a586:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a588:	6e79      	ldr	r1, [r7, #100]	; 0x64
 803a58a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 803a58c:	e841 2300 	strex	r3, r2, [r1]
 803a590:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 803a592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803a594:	2b00      	cmp	r3, #0
 803a596:	d1e4      	bne.n	803a562 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803a598:	687b      	ldr	r3, [r7, #4]
 803a59a:	681b      	ldr	r3, [r3, #0]
 803a59c:	3308      	adds	r3, #8
 803a59e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a5a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803a5a2:	e853 3f00 	ldrex	r3, [r3]
 803a5a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 803a5a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803a5aa:	4b56      	ldr	r3, [pc, #344]	; (803a704 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 803a5ac:	4013      	ands	r3, r2
 803a5ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 803a5b0:	687b      	ldr	r3, [r7, #4]
 803a5b2:	681b      	ldr	r3, [r3, #0]
 803a5b4:	3308      	adds	r3, #8
 803a5b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803a5b8:	657a      	str	r2, [r7, #84]	; 0x54
 803a5ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a5bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803a5be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 803a5c0:	e841 2300 	strex	r3, r2, [r1]
 803a5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803a5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803a5c8:	2b00      	cmp	r3, #0
 803a5ca:	d1e5      	bne.n	803a598 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803a5cc:	687b      	ldr	r3, [r7, #4]
 803a5ce:	2220      	movs	r2, #32
 803a5d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803a5d4:	687b      	ldr	r3, [r7, #4]
 803a5d6:	2200      	movs	r2, #0
 803a5d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803a5da:	687b      	ldr	r3, [r7, #4]
 803a5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803a5de:	2b01      	cmp	r3, #1
 803a5e0:	d12e      	bne.n	803a640 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803a5e2:	687b      	ldr	r3, [r7, #4]
 803a5e4:	2200      	movs	r2, #0
 803a5e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803a5e8:	687b      	ldr	r3, [r7, #4]
 803a5ea:	681b      	ldr	r3, [r3, #0]
 803a5ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a5f0:	e853 3f00 	ldrex	r3, [r3]
 803a5f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a5f8:	f023 0310 	bic.w	r3, r3, #16
 803a5fc:	67bb      	str	r3, [r7, #120]	; 0x78
 803a5fe:	687b      	ldr	r3, [r7, #4]
 803a600:	681b      	ldr	r3, [r3, #0]
 803a602:	461a      	mov	r2, r3
 803a604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803a606:	643b      	str	r3, [r7, #64]	; 0x40
 803a608:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a60a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803a60c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803a60e:	e841 2300 	strex	r3, r2, [r1]
 803a612:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a616:	2b00      	cmp	r3, #0
 803a618:	d1e6      	bne.n	803a5e8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803a61a:	687b      	ldr	r3, [r7, #4]
 803a61c:	681b      	ldr	r3, [r3, #0]
 803a61e:	69db      	ldr	r3, [r3, #28]
 803a620:	f003 0310 	and.w	r3, r3, #16
 803a624:	2b10      	cmp	r3, #16
 803a626:	d103      	bne.n	803a630 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803a628:	687b      	ldr	r3, [r7, #4]
 803a62a:	681b      	ldr	r3, [r3, #0]
 803a62c:	2210      	movs	r2, #16
 803a62e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803a630:	687b      	ldr	r3, [r7, #4]
 803a632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803a636:	4619      	mov	r1, r3
 803a638:	6878      	ldr	r0, [r7, #4]
 803a63a:	f7fe faed 	bl	8038c18 <HAL_UARTEx_RxEventCallback>
 803a63e:	e002      	b.n	803a646 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 803a640:	6878      	ldr	r0, [r7, #4]
 803a642:	f7f2 fadf 	bl	802cc04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803a646:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 803a64a:	2b00      	cmp	r3, #0
 803a64c:	d006      	beq.n	803a65c <UART_RxISR_8BIT_FIFOEN+0x248>
 803a64e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a652:	f003 0320 	and.w	r3, r3, #32
 803a656:	2b00      	cmp	r3, #0
 803a658:	f47f af00 	bne.w	803a45c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 803a65c:	687b      	ldr	r3, [r7, #4]
 803a65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a662:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803a666:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 803a66a:	2b00      	cmp	r3, #0
 803a66c:	d045      	beq.n	803a6fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
 803a66e:	687b      	ldr	r3, [r7, #4]
 803a670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803a674:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 803a678:	429a      	cmp	r2, r3
 803a67a:	d23e      	bcs.n	803a6fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803a67c:	687b      	ldr	r3, [r7, #4]
 803a67e:	681b      	ldr	r3, [r3, #0]
 803a680:	3308      	adds	r3, #8
 803a682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a684:	6a3b      	ldr	r3, [r7, #32]
 803a686:	e853 3f00 	ldrex	r3, [r3]
 803a68a:	61fb      	str	r3, [r7, #28]
   return(result);
 803a68c:	69fb      	ldr	r3, [r7, #28]
 803a68e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803a692:	673b      	str	r3, [r7, #112]	; 0x70
 803a694:	687b      	ldr	r3, [r7, #4]
 803a696:	681b      	ldr	r3, [r3, #0]
 803a698:	3308      	adds	r3, #8
 803a69a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 803a69c:	62fa      	str	r2, [r7, #44]	; 0x2c
 803a69e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a6a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803a6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a6a4:	e841 2300 	strex	r3, r2, [r1]
 803a6a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a6ac:	2b00      	cmp	r3, #0
 803a6ae:	d1e5      	bne.n	803a67c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 803a6b0:	687b      	ldr	r3, [r7, #4]
 803a6b2:	4a15      	ldr	r2, [pc, #84]	; (803a708 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 803a6b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803a6b6:	687b      	ldr	r3, [r7, #4]
 803a6b8:	681b      	ldr	r3, [r3, #0]
 803a6ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a6bc:	68fb      	ldr	r3, [r7, #12]
 803a6be:	e853 3f00 	ldrex	r3, [r3]
 803a6c2:	60bb      	str	r3, [r7, #8]
   return(result);
 803a6c4:	68bb      	ldr	r3, [r7, #8]
 803a6c6:	f043 0320 	orr.w	r3, r3, #32
 803a6ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 803a6cc:	687b      	ldr	r3, [r7, #4]
 803a6ce:	681b      	ldr	r3, [r3, #0]
 803a6d0:	461a      	mov	r2, r3
 803a6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803a6d4:	61bb      	str	r3, [r7, #24]
 803a6d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a6d8:	6979      	ldr	r1, [r7, #20]
 803a6da:	69ba      	ldr	r2, [r7, #24]
 803a6dc:	e841 2300 	strex	r3, r2, [r1]
 803a6e0:	613b      	str	r3, [r7, #16]
   return(result);
 803a6e2:	693b      	ldr	r3, [r7, #16]
 803a6e4:	2b00      	cmp	r3, #0
 803a6e6:	d1e6      	bne.n	803a6b6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803a6e8:	e007      	b.n	803a6fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803a6ea:	687b      	ldr	r3, [r7, #4]
 803a6ec:	681b      	ldr	r3, [r3, #0]
 803a6ee:	699a      	ldr	r2, [r3, #24]
 803a6f0:	687b      	ldr	r3, [r7, #4]
 803a6f2:	681b      	ldr	r3, [r3, #0]
 803a6f4:	f042 0208 	orr.w	r2, r2, #8
 803a6f8:	619a      	str	r2, [r3, #24]
}
 803a6fa:	bf00      	nop
 803a6fc:	3798      	adds	r7, #152	; 0x98
 803a6fe:	46bd      	mov	sp, r7
 803a700:	bd80      	pop	{r7, pc}
 803a702:	bf00      	nop
 803a704:	effffffe 	.word	0xeffffffe
 803a708:	0803a153 	.word	0x0803a153

0803a70c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803a70c:	b580      	push	{r7, lr}
 803a70e:	b0a8      	sub	sp, #160	; 0xa0
 803a710:	af00      	add	r7, sp, #0
 803a712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 803a714:	687b      	ldr	r3, [r7, #4]
 803a716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803a71a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803a71e:	687b      	ldr	r3, [r7, #4]
 803a720:	681b      	ldr	r3, [r3, #0]
 803a722:	69db      	ldr	r3, [r3, #28]
 803a724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 803a728:	687b      	ldr	r3, [r7, #4]
 803a72a:	681b      	ldr	r3, [r3, #0]
 803a72c:	681b      	ldr	r3, [r3, #0]
 803a72e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803a732:	687b      	ldr	r3, [r7, #4]
 803a734:	681b      	ldr	r3, [r3, #0]
 803a736:	689b      	ldr	r3, [r3, #8]
 803a738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803a73c:	687b      	ldr	r3, [r7, #4]
 803a73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803a742:	2b22      	cmp	r3, #34	; 0x22
 803a744:	f040 8151 	bne.w	803a9ea <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 803a748:	687b      	ldr	r3, [r7, #4]
 803a74a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803a74e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803a752:	e0f8      	b.n	803a946 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803a754:	687b      	ldr	r3, [r7, #4]
 803a756:	681b      	ldr	r3, [r3, #0]
 803a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a75a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 803a75e:	687b      	ldr	r3, [r7, #4]
 803a760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 803a766:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 803a76a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 803a76e:	4013      	ands	r3, r2
 803a770:	b29a      	uxth	r2, r3
 803a772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803a776:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 803a778:	687b      	ldr	r3, [r7, #4]
 803a77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a77c:	1c9a      	adds	r2, r3, #2
 803a77e:	687b      	ldr	r3, [r7, #4]
 803a780:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803a782:	687b      	ldr	r3, [r7, #4]
 803a784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a788:	b29b      	uxth	r3, r3
 803a78a:	3b01      	subs	r3, #1
 803a78c:	b29a      	uxth	r2, r3
 803a78e:	687b      	ldr	r3, [r7, #4]
 803a790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803a794:	687b      	ldr	r3, [r7, #4]
 803a796:	681b      	ldr	r3, [r3, #0]
 803a798:	69db      	ldr	r3, [r3, #28]
 803a79a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803a79e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803a7a2:	f003 0307 	and.w	r3, r3, #7
 803a7a6:	2b00      	cmp	r3, #0
 803a7a8:	d053      	beq.n	803a852 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803a7aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803a7ae:	f003 0301 	and.w	r3, r3, #1
 803a7b2:	2b00      	cmp	r3, #0
 803a7b4:	d011      	beq.n	803a7da <UART_RxISR_16BIT_FIFOEN+0xce>
 803a7b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803a7be:	2b00      	cmp	r3, #0
 803a7c0:	d00b      	beq.n	803a7da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803a7c2:	687b      	ldr	r3, [r7, #4]
 803a7c4:	681b      	ldr	r3, [r3, #0]
 803a7c6:	2201      	movs	r2, #1
 803a7c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 803a7ca:	687b      	ldr	r3, [r7, #4]
 803a7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a7d0:	f043 0201 	orr.w	r2, r3, #1
 803a7d4:	687b      	ldr	r3, [r7, #4]
 803a7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803a7da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803a7de:	f003 0302 	and.w	r3, r3, #2
 803a7e2:	2b00      	cmp	r3, #0
 803a7e4:	d011      	beq.n	803a80a <UART_RxISR_16BIT_FIFOEN+0xfe>
 803a7e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803a7ea:	f003 0301 	and.w	r3, r3, #1
 803a7ee:	2b00      	cmp	r3, #0
 803a7f0:	d00b      	beq.n	803a80a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803a7f2:	687b      	ldr	r3, [r7, #4]
 803a7f4:	681b      	ldr	r3, [r3, #0]
 803a7f6:	2202      	movs	r2, #2
 803a7f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803a7fa:	687b      	ldr	r3, [r7, #4]
 803a7fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a800:	f043 0204 	orr.w	r2, r3, #4
 803a804:	687b      	ldr	r3, [r7, #4]
 803a806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803a80a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803a80e:	f003 0304 	and.w	r3, r3, #4
 803a812:	2b00      	cmp	r3, #0
 803a814:	d011      	beq.n	803a83a <UART_RxISR_16BIT_FIFOEN+0x12e>
 803a816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803a81a:	f003 0301 	and.w	r3, r3, #1
 803a81e:	2b00      	cmp	r3, #0
 803a820:	d00b      	beq.n	803a83a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803a822:	687b      	ldr	r3, [r7, #4]
 803a824:	681b      	ldr	r3, [r3, #0]
 803a826:	2204      	movs	r2, #4
 803a828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 803a82a:	687b      	ldr	r3, [r7, #4]
 803a82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a830:	f043 0202 	orr.w	r2, r3, #2
 803a834:	687b      	ldr	r3, [r7, #4]
 803a836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803a83a:	687b      	ldr	r3, [r7, #4]
 803a83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a840:	2b00      	cmp	r3, #0
 803a842:	d006      	beq.n	803a852 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803a844:	6878      	ldr	r0, [r7, #4]
 803a846:	f7fe f9dd 	bl	8038c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 803a84a:	687b      	ldr	r3, [r7, #4]
 803a84c:	2200      	movs	r2, #0
 803a84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 803a852:	687b      	ldr	r3, [r7, #4]
 803a854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a858:	b29b      	uxth	r3, r3
 803a85a:	2b00      	cmp	r3, #0
 803a85c:	d173      	bne.n	803a946 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803a85e:	687b      	ldr	r3, [r7, #4]
 803a860:	681b      	ldr	r3, [r3, #0]
 803a862:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803a866:	e853 3f00 	ldrex	r3, [r3]
 803a86a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 803a86c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803a86e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803a872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803a876:	687b      	ldr	r3, [r7, #4]
 803a878:	681b      	ldr	r3, [r3, #0]
 803a87a:	461a      	mov	r2, r3
 803a87c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803a880:	66fb      	str	r3, [r7, #108]	; 0x6c
 803a882:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a884:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803a886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 803a888:	e841 2300 	strex	r3, r2, [r1]
 803a88c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 803a88e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803a890:	2b00      	cmp	r3, #0
 803a892:	d1e4      	bne.n	803a85e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803a894:	687b      	ldr	r3, [r7, #4]
 803a896:	681b      	ldr	r3, [r3, #0]
 803a898:	3308      	adds	r3, #8
 803a89a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803a89e:	e853 3f00 	ldrex	r3, [r3]
 803a8a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803a8a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803a8a6:	4b57      	ldr	r3, [pc, #348]	; (803aa04 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 803a8a8:	4013      	ands	r3, r2
 803a8aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803a8ae:	687b      	ldr	r3, [r7, #4]
 803a8b0:	681b      	ldr	r3, [r3, #0]
 803a8b2:	3308      	adds	r3, #8
 803a8b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 803a8b8:	65ba      	str	r2, [r7, #88]	; 0x58
 803a8ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a8bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803a8be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803a8c0:	e841 2300 	strex	r3, r2, [r1]
 803a8c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803a8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803a8c8:	2b00      	cmp	r3, #0
 803a8ca:	d1e3      	bne.n	803a894 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803a8cc:	687b      	ldr	r3, [r7, #4]
 803a8ce:	2220      	movs	r2, #32
 803a8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803a8d4:	687b      	ldr	r3, [r7, #4]
 803a8d6:	2200      	movs	r2, #0
 803a8d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803a8da:	687b      	ldr	r3, [r7, #4]
 803a8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803a8de:	2b01      	cmp	r3, #1
 803a8e0:	d12e      	bne.n	803a940 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803a8e2:	687b      	ldr	r3, [r7, #4]
 803a8e4:	2200      	movs	r2, #0
 803a8e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803a8e8:	687b      	ldr	r3, [r7, #4]
 803a8ea:	681b      	ldr	r3, [r3, #0]
 803a8ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a8f0:	e853 3f00 	ldrex	r3, [r3]
 803a8f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803a8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a8f8:	f023 0310 	bic.w	r3, r3, #16
 803a8fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 803a8fe:	687b      	ldr	r3, [r7, #4]
 803a900:	681b      	ldr	r3, [r3, #0]
 803a902:	461a      	mov	r2, r3
 803a904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803a906:	647b      	str	r3, [r7, #68]	; 0x44
 803a908:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a90a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 803a90c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803a90e:	e841 2300 	strex	r3, r2, [r1]
 803a912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803a914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a916:	2b00      	cmp	r3, #0
 803a918:	d1e6      	bne.n	803a8e8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803a91a:	687b      	ldr	r3, [r7, #4]
 803a91c:	681b      	ldr	r3, [r3, #0]
 803a91e:	69db      	ldr	r3, [r3, #28]
 803a920:	f003 0310 	and.w	r3, r3, #16
 803a924:	2b10      	cmp	r3, #16
 803a926:	d103      	bne.n	803a930 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803a928:	687b      	ldr	r3, [r7, #4]
 803a92a:	681b      	ldr	r3, [r3, #0]
 803a92c:	2210      	movs	r2, #16
 803a92e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803a930:	687b      	ldr	r3, [r7, #4]
 803a932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803a936:	4619      	mov	r1, r3
 803a938:	6878      	ldr	r0, [r7, #4]
 803a93a:	f7fe f96d 	bl	8038c18 <HAL_UARTEx_RxEventCallback>
 803a93e:	e002      	b.n	803a946 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 803a940:	6878      	ldr	r0, [r7, #4]
 803a942:	f7f2 f95f 	bl	802cc04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803a946:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 803a94a:	2b00      	cmp	r3, #0
 803a94c:	d006      	beq.n	803a95c <UART_RxISR_16BIT_FIFOEN+0x250>
 803a94e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803a952:	f003 0320 	and.w	r3, r3, #32
 803a956:	2b00      	cmp	r3, #0
 803a958:	f47f aefc 	bne.w	803a754 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 803a95c:	687b      	ldr	r3, [r7, #4]
 803a95e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803a966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 803a96a:	2b00      	cmp	r3, #0
 803a96c:	d045      	beq.n	803a9fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
 803a96e:	687b      	ldr	r3, [r7, #4]
 803a970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803a974:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 803a978:	429a      	cmp	r2, r3
 803a97a:	d23e      	bcs.n	803a9fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803a97c:	687b      	ldr	r3, [r7, #4]
 803a97e:	681b      	ldr	r3, [r3, #0]
 803a980:	3308      	adds	r3, #8
 803a982:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a986:	e853 3f00 	ldrex	r3, [r3]
 803a98a:	623b      	str	r3, [r7, #32]
   return(result);
 803a98c:	6a3b      	ldr	r3, [r7, #32]
 803a98e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803a992:	677b      	str	r3, [r7, #116]	; 0x74
 803a994:	687b      	ldr	r3, [r7, #4]
 803a996:	681b      	ldr	r3, [r3, #0]
 803a998:	3308      	adds	r3, #8
 803a99a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 803a99c:	633a      	str	r2, [r7, #48]	; 0x30
 803a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a9a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803a9a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a9a4:	e841 2300 	strex	r3, r2, [r1]
 803a9a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a9ac:	2b00      	cmp	r3, #0
 803a9ae:	d1e5      	bne.n	803a97c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 803a9b0:	687b      	ldr	r3, [r7, #4]
 803a9b2:	4a15      	ldr	r2, [pc, #84]	; (803aa08 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 803a9b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803a9b6:	687b      	ldr	r3, [r7, #4]
 803a9b8:	681b      	ldr	r3, [r3, #0]
 803a9ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a9bc:	693b      	ldr	r3, [r7, #16]
 803a9be:	e853 3f00 	ldrex	r3, [r3]
 803a9c2:	60fb      	str	r3, [r7, #12]
   return(result);
 803a9c4:	68fb      	ldr	r3, [r7, #12]
 803a9c6:	f043 0320 	orr.w	r3, r3, #32
 803a9ca:	673b      	str	r3, [r7, #112]	; 0x70
 803a9cc:	687b      	ldr	r3, [r7, #4]
 803a9ce:	681b      	ldr	r3, [r3, #0]
 803a9d0:	461a      	mov	r2, r3
 803a9d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803a9d4:	61fb      	str	r3, [r7, #28]
 803a9d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a9d8:	69b9      	ldr	r1, [r7, #24]
 803a9da:	69fa      	ldr	r2, [r7, #28]
 803a9dc:	e841 2300 	strex	r3, r2, [r1]
 803a9e0:	617b      	str	r3, [r7, #20]
   return(result);
 803a9e2:	697b      	ldr	r3, [r7, #20]
 803a9e4:	2b00      	cmp	r3, #0
 803a9e6:	d1e6      	bne.n	803a9b6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803a9e8:	e007      	b.n	803a9fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803a9ea:	687b      	ldr	r3, [r7, #4]
 803a9ec:	681b      	ldr	r3, [r3, #0]
 803a9ee:	699a      	ldr	r2, [r3, #24]
 803a9f0:	687b      	ldr	r3, [r7, #4]
 803a9f2:	681b      	ldr	r3, [r3, #0]
 803a9f4:	f042 0208 	orr.w	r2, r2, #8
 803a9f8:	619a      	str	r2, [r3, #24]
}
 803a9fa:	bf00      	nop
 803a9fc:	37a0      	adds	r7, #160	; 0xa0
 803a9fe:	46bd      	mov	sp, r7
 803aa00:	bd80      	pop	{r7, pc}
 803aa02:	bf00      	nop
 803aa04:	effffffe 	.word	0xeffffffe
 803aa08:	0803a2b3 	.word	0x0803a2b3

0803aa0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 803aa0c:	b480      	push	{r7}
 803aa0e:	b083      	sub	sp, #12
 803aa10:	af00      	add	r7, sp, #0
 803aa12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 803aa14:	bf00      	nop
 803aa16:	370c      	adds	r7, #12
 803aa18:	46bd      	mov	sp, r7
 803aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aa1e:	4770      	bx	lr

0803aa20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 803aa20:	b480      	push	{r7}
 803aa22:	b083      	sub	sp, #12
 803aa24:	af00      	add	r7, sp, #0
 803aa26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 803aa28:	bf00      	nop
 803aa2a:	370c      	adds	r7, #12
 803aa2c:	46bd      	mov	sp, r7
 803aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aa32:	4770      	bx	lr

0803aa34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 803aa34:	b480      	push	{r7}
 803aa36:	b083      	sub	sp, #12
 803aa38:	af00      	add	r7, sp, #0
 803aa3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 803aa3c:	bf00      	nop
 803aa3e:	370c      	adds	r7, #12
 803aa40:	46bd      	mov	sp, r7
 803aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aa46:	4770      	bx	lr

0803aa48 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 803aa48:	b580      	push	{r7, lr}
 803aa4a:	b084      	sub	sp, #16
 803aa4c:	af00      	add	r7, sp, #0
 803aa4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803aa50:	687b      	ldr	r3, [r7, #4]
 803aa52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803aa56:	2b01      	cmp	r3, #1
 803aa58:	d101      	bne.n	803aa5e <HAL_UARTEx_EnableFifoMode+0x16>
 803aa5a:	2302      	movs	r3, #2
 803aa5c:	e02b      	b.n	803aab6 <HAL_UARTEx_EnableFifoMode+0x6e>
 803aa5e:	687b      	ldr	r3, [r7, #4]
 803aa60:	2201      	movs	r2, #1
 803aa62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803aa66:	687b      	ldr	r3, [r7, #4]
 803aa68:	2224      	movs	r2, #36	; 0x24
 803aa6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803aa6e:	687b      	ldr	r3, [r7, #4]
 803aa70:	681b      	ldr	r3, [r3, #0]
 803aa72:	681b      	ldr	r3, [r3, #0]
 803aa74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803aa76:	687b      	ldr	r3, [r7, #4]
 803aa78:	681b      	ldr	r3, [r3, #0]
 803aa7a:	681a      	ldr	r2, [r3, #0]
 803aa7c:	687b      	ldr	r3, [r7, #4]
 803aa7e:	681b      	ldr	r3, [r3, #0]
 803aa80:	f022 0201 	bic.w	r2, r2, #1
 803aa84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 803aa86:	68fb      	ldr	r3, [r7, #12]
 803aa88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803aa8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 803aa8e:	687b      	ldr	r3, [r7, #4]
 803aa90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 803aa94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803aa96:	687b      	ldr	r3, [r7, #4]
 803aa98:	681b      	ldr	r3, [r3, #0]
 803aa9a:	68fa      	ldr	r2, [r7, #12]
 803aa9c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803aa9e:	6878      	ldr	r0, [r7, #4]
 803aaa0:	f000 f8c2 	bl	803ac28 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 803aaa4:	687b      	ldr	r3, [r7, #4]
 803aaa6:	2220      	movs	r2, #32
 803aaa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803aaac:	687b      	ldr	r3, [r7, #4]
 803aaae:	2200      	movs	r2, #0
 803aab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803aab4:	2300      	movs	r3, #0
}
 803aab6:	4618      	mov	r0, r3
 803aab8:	3710      	adds	r7, #16
 803aaba:	46bd      	mov	sp, r7
 803aabc:	bd80      	pop	{r7, pc}

0803aabe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 803aabe:	b480      	push	{r7}
 803aac0:	b085      	sub	sp, #20
 803aac2:	af00      	add	r7, sp, #0
 803aac4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803aac6:	687b      	ldr	r3, [r7, #4]
 803aac8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803aacc:	2b01      	cmp	r3, #1
 803aace:	d101      	bne.n	803aad4 <HAL_UARTEx_DisableFifoMode+0x16>
 803aad0:	2302      	movs	r3, #2
 803aad2:	e027      	b.n	803ab24 <HAL_UARTEx_DisableFifoMode+0x66>
 803aad4:	687b      	ldr	r3, [r7, #4]
 803aad6:	2201      	movs	r2, #1
 803aad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803aadc:	687b      	ldr	r3, [r7, #4]
 803aade:	2224      	movs	r2, #36	; 0x24
 803aae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803aae4:	687b      	ldr	r3, [r7, #4]
 803aae6:	681b      	ldr	r3, [r3, #0]
 803aae8:	681b      	ldr	r3, [r3, #0]
 803aaea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803aaec:	687b      	ldr	r3, [r7, #4]
 803aaee:	681b      	ldr	r3, [r3, #0]
 803aaf0:	681a      	ldr	r2, [r3, #0]
 803aaf2:	687b      	ldr	r3, [r7, #4]
 803aaf4:	681b      	ldr	r3, [r3, #0]
 803aaf6:	f022 0201 	bic.w	r2, r2, #1
 803aafa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 803aafc:	68fb      	ldr	r3, [r7, #12]
 803aafe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 803ab02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 803ab04:	687b      	ldr	r3, [r7, #4]
 803ab06:	2200      	movs	r2, #0
 803ab08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803ab0a:	687b      	ldr	r3, [r7, #4]
 803ab0c:	681b      	ldr	r3, [r3, #0]
 803ab0e:	68fa      	ldr	r2, [r7, #12]
 803ab10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803ab12:	687b      	ldr	r3, [r7, #4]
 803ab14:	2220      	movs	r2, #32
 803ab16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803ab1a:	687b      	ldr	r3, [r7, #4]
 803ab1c:	2200      	movs	r2, #0
 803ab1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803ab22:	2300      	movs	r3, #0
}
 803ab24:	4618      	mov	r0, r3
 803ab26:	3714      	adds	r7, #20
 803ab28:	46bd      	mov	sp, r7
 803ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ab2e:	4770      	bx	lr

0803ab30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 803ab30:	b580      	push	{r7, lr}
 803ab32:	b084      	sub	sp, #16
 803ab34:	af00      	add	r7, sp, #0
 803ab36:	6078      	str	r0, [r7, #4]
 803ab38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803ab3a:	687b      	ldr	r3, [r7, #4]
 803ab3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803ab40:	2b01      	cmp	r3, #1
 803ab42:	d101      	bne.n	803ab48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 803ab44:	2302      	movs	r3, #2
 803ab46:	e02d      	b.n	803aba4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 803ab48:	687b      	ldr	r3, [r7, #4]
 803ab4a:	2201      	movs	r2, #1
 803ab4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803ab50:	687b      	ldr	r3, [r7, #4]
 803ab52:	2224      	movs	r2, #36	; 0x24
 803ab54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803ab58:	687b      	ldr	r3, [r7, #4]
 803ab5a:	681b      	ldr	r3, [r3, #0]
 803ab5c:	681b      	ldr	r3, [r3, #0]
 803ab5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803ab60:	687b      	ldr	r3, [r7, #4]
 803ab62:	681b      	ldr	r3, [r3, #0]
 803ab64:	681a      	ldr	r2, [r3, #0]
 803ab66:	687b      	ldr	r3, [r7, #4]
 803ab68:	681b      	ldr	r3, [r3, #0]
 803ab6a:	f022 0201 	bic.w	r2, r2, #1
 803ab6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 803ab70:	687b      	ldr	r3, [r7, #4]
 803ab72:	681b      	ldr	r3, [r3, #0]
 803ab74:	689b      	ldr	r3, [r3, #8]
 803ab76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 803ab7a:	687b      	ldr	r3, [r7, #4]
 803ab7c:	681b      	ldr	r3, [r3, #0]
 803ab7e:	683a      	ldr	r2, [r7, #0]
 803ab80:	430a      	orrs	r2, r1
 803ab82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803ab84:	6878      	ldr	r0, [r7, #4]
 803ab86:	f000 f84f 	bl	803ac28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803ab8a:	687b      	ldr	r3, [r7, #4]
 803ab8c:	681b      	ldr	r3, [r3, #0]
 803ab8e:	68fa      	ldr	r2, [r7, #12]
 803ab90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803ab92:	687b      	ldr	r3, [r7, #4]
 803ab94:	2220      	movs	r2, #32
 803ab96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803ab9a:	687b      	ldr	r3, [r7, #4]
 803ab9c:	2200      	movs	r2, #0
 803ab9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803aba2:	2300      	movs	r3, #0
}
 803aba4:	4618      	mov	r0, r3
 803aba6:	3710      	adds	r7, #16
 803aba8:	46bd      	mov	sp, r7
 803abaa:	bd80      	pop	{r7, pc}

0803abac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 803abac:	b580      	push	{r7, lr}
 803abae:	b084      	sub	sp, #16
 803abb0:	af00      	add	r7, sp, #0
 803abb2:	6078      	str	r0, [r7, #4]
 803abb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803abb6:	687b      	ldr	r3, [r7, #4]
 803abb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803abbc:	2b01      	cmp	r3, #1
 803abbe:	d101      	bne.n	803abc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 803abc0:	2302      	movs	r3, #2
 803abc2:	e02d      	b.n	803ac20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 803abc4:	687b      	ldr	r3, [r7, #4]
 803abc6:	2201      	movs	r2, #1
 803abc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803abcc:	687b      	ldr	r3, [r7, #4]
 803abce:	2224      	movs	r2, #36	; 0x24
 803abd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803abd4:	687b      	ldr	r3, [r7, #4]
 803abd6:	681b      	ldr	r3, [r3, #0]
 803abd8:	681b      	ldr	r3, [r3, #0]
 803abda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803abdc:	687b      	ldr	r3, [r7, #4]
 803abde:	681b      	ldr	r3, [r3, #0]
 803abe0:	681a      	ldr	r2, [r3, #0]
 803abe2:	687b      	ldr	r3, [r7, #4]
 803abe4:	681b      	ldr	r3, [r3, #0]
 803abe6:	f022 0201 	bic.w	r2, r2, #1
 803abea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 803abec:	687b      	ldr	r3, [r7, #4]
 803abee:	681b      	ldr	r3, [r3, #0]
 803abf0:	689b      	ldr	r3, [r3, #8]
 803abf2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 803abf6:	687b      	ldr	r3, [r7, #4]
 803abf8:	681b      	ldr	r3, [r3, #0]
 803abfa:	683a      	ldr	r2, [r7, #0]
 803abfc:	430a      	orrs	r2, r1
 803abfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803ac00:	6878      	ldr	r0, [r7, #4]
 803ac02:	f000 f811 	bl	803ac28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803ac06:	687b      	ldr	r3, [r7, #4]
 803ac08:	681b      	ldr	r3, [r3, #0]
 803ac0a:	68fa      	ldr	r2, [r7, #12]
 803ac0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803ac0e:	687b      	ldr	r3, [r7, #4]
 803ac10:	2220      	movs	r2, #32
 803ac12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803ac16:	687b      	ldr	r3, [r7, #4]
 803ac18:	2200      	movs	r2, #0
 803ac1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803ac1e:	2300      	movs	r3, #0
}
 803ac20:	4618      	mov	r0, r3
 803ac22:	3710      	adds	r7, #16
 803ac24:	46bd      	mov	sp, r7
 803ac26:	bd80      	pop	{r7, pc}

0803ac28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 803ac28:	b480      	push	{r7}
 803ac2a:	b085      	sub	sp, #20
 803ac2c:	af00      	add	r7, sp, #0
 803ac2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 803ac30:	687b      	ldr	r3, [r7, #4]
 803ac32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803ac34:	2b00      	cmp	r3, #0
 803ac36:	d108      	bne.n	803ac4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 803ac38:	687b      	ldr	r3, [r7, #4]
 803ac3a:	2201      	movs	r2, #1
 803ac3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 803ac40:	687b      	ldr	r3, [r7, #4]
 803ac42:	2201      	movs	r2, #1
 803ac44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 803ac48:	e031      	b.n	803acae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 803ac4a:	2310      	movs	r3, #16
 803ac4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 803ac4e:	2310      	movs	r3, #16
 803ac50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 803ac52:	687b      	ldr	r3, [r7, #4]
 803ac54:	681b      	ldr	r3, [r3, #0]
 803ac56:	689b      	ldr	r3, [r3, #8]
 803ac58:	0e5b      	lsrs	r3, r3, #25
 803ac5a:	b2db      	uxtb	r3, r3
 803ac5c:	f003 0307 	and.w	r3, r3, #7
 803ac60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 803ac62:	687b      	ldr	r3, [r7, #4]
 803ac64:	681b      	ldr	r3, [r3, #0]
 803ac66:	689b      	ldr	r3, [r3, #8]
 803ac68:	0f5b      	lsrs	r3, r3, #29
 803ac6a:	b2db      	uxtb	r3, r3
 803ac6c:	f003 0307 	and.w	r3, r3, #7
 803ac70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803ac72:	7bbb      	ldrb	r3, [r7, #14]
 803ac74:	7b3a      	ldrb	r2, [r7, #12]
 803ac76:	4911      	ldr	r1, [pc, #68]	; (803acbc <UARTEx_SetNbDataToProcess+0x94>)
 803ac78:	5c8a      	ldrb	r2, [r1, r2]
 803ac7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 803ac7e:	7b3a      	ldrb	r2, [r7, #12]
 803ac80:	490f      	ldr	r1, [pc, #60]	; (803acc0 <UARTEx_SetNbDataToProcess+0x98>)
 803ac82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803ac84:	fb93 f3f2 	sdiv	r3, r3, r2
 803ac88:	b29a      	uxth	r2, r3
 803ac8a:	687b      	ldr	r3, [r7, #4]
 803ac8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 803ac90:	7bfb      	ldrb	r3, [r7, #15]
 803ac92:	7b7a      	ldrb	r2, [r7, #13]
 803ac94:	4909      	ldr	r1, [pc, #36]	; (803acbc <UARTEx_SetNbDataToProcess+0x94>)
 803ac96:	5c8a      	ldrb	r2, [r1, r2]
 803ac98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 803ac9c:	7b7a      	ldrb	r2, [r7, #13]
 803ac9e:	4908      	ldr	r1, [pc, #32]	; (803acc0 <UARTEx_SetNbDataToProcess+0x98>)
 803aca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 803aca2:	fb93 f3f2 	sdiv	r3, r3, r2
 803aca6:	b29a      	uxth	r2, r3
 803aca8:	687b      	ldr	r3, [r7, #4]
 803acaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 803acae:	bf00      	nop
 803acb0:	3714      	adds	r7, #20
 803acb2:	46bd      	mov	sp, r7
 803acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803acb8:	4770      	bx	lr
 803acba:	bf00      	nop
 803acbc:	0805b2a0 	.word	0x0805b2a0
 803acc0:	0805b2a8 	.word	0x0805b2a8

0803acc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 803acc4:	b084      	sub	sp, #16
 803acc6:	b580      	push	{r7, lr}
 803acc8:	b084      	sub	sp, #16
 803acca:	af00      	add	r7, sp, #0
 803accc:	6078      	str	r0, [r7, #4]
 803acce:	f107 001c 	add.w	r0, r7, #28
 803acd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803acd8:	2b01      	cmp	r3, #1
 803acda:	d120      	bne.n	803ad1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 803acdc:	687b      	ldr	r3, [r7, #4]
 803acde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803ace0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803ace4:	687b      	ldr	r3, [r7, #4]
 803ace6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 803ace8:	687b      	ldr	r3, [r7, #4]
 803acea:	68da      	ldr	r2, [r3, #12]
 803acec:	4b2a      	ldr	r3, [pc, #168]	; (803ad98 <USB_CoreInit+0xd4>)
 803acee:	4013      	ands	r3, r2
 803acf0:	687a      	ldr	r2, [r7, #4]
 803acf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 803acf4:	687b      	ldr	r3, [r7, #4]
 803acf6:	68db      	ldr	r3, [r3, #12]
 803acf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 803acfc:	687b      	ldr	r3, [r7, #4]
 803acfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 803ad00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803ad02:	2b01      	cmp	r3, #1
 803ad04:	d105      	bne.n	803ad12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 803ad06:	687b      	ldr	r3, [r7, #4]
 803ad08:	68db      	ldr	r3, [r3, #12]
 803ad0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 803ad0e:	687b      	ldr	r3, [r7, #4]
 803ad10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803ad12:	6878      	ldr	r0, [r7, #4]
 803ad14:	f001 fc04 	bl	803c520 <USB_CoreReset>
 803ad18:	4603      	mov	r3, r0
 803ad1a:	73fb      	strb	r3, [r7, #15]
 803ad1c:	e01a      	b.n	803ad54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 803ad1e:	687b      	ldr	r3, [r7, #4]
 803ad20:	68db      	ldr	r3, [r3, #12]
 803ad22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803ad26:	687b      	ldr	r3, [r7, #4]
 803ad28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803ad2a:	6878      	ldr	r0, [r7, #4]
 803ad2c:	f001 fbf8 	bl	803c520 <USB_CoreReset>
 803ad30:	4603      	mov	r3, r0
 803ad32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 803ad34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803ad36:	2b00      	cmp	r3, #0
 803ad38:	d106      	bne.n	803ad48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 803ad3a:	687b      	ldr	r3, [r7, #4]
 803ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803ad3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 803ad42:	687b      	ldr	r3, [r7, #4]
 803ad44:	639a      	str	r2, [r3, #56]	; 0x38
 803ad46:	e005      	b.n	803ad54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 803ad48:	687b      	ldr	r3, [r7, #4]
 803ad4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803ad4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803ad50:	687b      	ldr	r3, [r7, #4]
 803ad52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 803ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803ad56:	2b01      	cmp	r3, #1
 803ad58:	d116      	bne.n	803ad88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 803ad5a:	687b      	ldr	r3, [r7, #4]
 803ad5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803ad5e:	b29a      	uxth	r2, r3
 803ad60:	687b      	ldr	r3, [r7, #4]
 803ad62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 803ad64:	687b      	ldr	r3, [r7, #4]
 803ad66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 803ad68:	4b0c      	ldr	r3, [pc, #48]	; (803ad9c <USB_CoreInit+0xd8>)
 803ad6a:	4313      	orrs	r3, r2
 803ad6c:	687a      	ldr	r2, [r7, #4]
 803ad6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 803ad70:	687b      	ldr	r3, [r7, #4]
 803ad72:	689b      	ldr	r3, [r3, #8]
 803ad74:	f043 0206 	orr.w	r2, r3, #6
 803ad78:	687b      	ldr	r3, [r7, #4]
 803ad7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 803ad7c:	687b      	ldr	r3, [r7, #4]
 803ad7e:	689b      	ldr	r3, [r3, #8]
 803ad80:	f043 0220 	orr.w	r2, r3, #32
 803ad84:	687b      	ldr	r3, [r7, #4]
 803ad86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 803ad88:	7bfb      	ldrb	r3, [r7, #15]
}
 803ad8a:	4618      	mov	r0, r3
 803ad8c:	3710      	adds	r7, #16
 803ad8e:	46bd      	mov	sp, r7
 803ad90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803ad94:	b004      	add	sp, #16
 803ad96:	4770      	bx	lr
 803ad98:	ffbdffbf 	.word	0xffbdffbf
 803ad9c:	03ee0000 	.word	0x03ee0000

0803ada0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 803ada0:	b480      	push	{r7}
 803ada2:	b087      	sub	sp, #28
 803ada4:	af00      	add	r7, sp, #0
 803ada6:	60f8      	str	r0, [r7, #12]
 803ada8:	60b9      	str	r1, [r7, #8]
 803adaa:	4613      	mov	r3, r2
 803adac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 803adae:	79fb      	ldrb	r3, [r7, #7]
 803adb0:	2b02      	cmp	r3, #2
 803adb2:	d165      	bne.n	803ae80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 803adb4:	68bb      	ldr	r3, [r7, #8]
 803adb6:	4a41      	ldr	r2, [pc, #260]	; (803aebc <USB_SetTurnaroundTime+0x11c>)
 803adb8:	4293      	cmp	r3, r2
 803adba:	d906      	bls.n	803adca <USB_SetTurnaroundTime+0x2a>
 803adbc:	68bb      	ldr	r3, [r7, #8]
 803adbe:	4a40      	ldr	r2, [pc, #256]	; (803aec0 <USB_SetTurnaroundTime+0x120>)
 803adc0:	4293      	cmp	r3, r2
 803adc2:	d202      	bcs.n	803adca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 803adc4:	230f      	movs	r3, #15
 803adc6:	617b      	str	r3, [r7, #20]
 803adc8:	e062      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 803adca:	68bb      	ldr	r3, [r7, #8]
 803adcc:	4a3c      	ldr	r2, [pc, #240]	; (803aec0 <USB_SetTurnaroundTime+0x120>)
 803adce:	4293      	cmp	r3, r2
 803add0:	d306      	bcc.n	803ade0 <USB_SetTurnaroundTime+0x40>
 803add2:	68bb      	ldr	r3, [r7, #8]
 803add4:	4a3b      	ldr	r2, [pc, #236]	; (803aec4 <USB_SetTurnaroundTime+0x124>)
 803add6:	4293      	cmp	r3, r2
 803add8:	d202      	bcs.n	803ade0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 803adda:	230e      	movs	r3, #14
 803addc:	617b      	str	r3, [r7, #20]
 803adde:	e057      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 803ade0:	68bb      	ldr	r3, [r7, #8]
 803ade2:	4a38      	ldr	r2, [pc, #224]	; (803aec4 <USB_SetTurnaroundTime+0x124>)
 803ade4:	4293      	cmp	r3, r2
 803ade6:	d306      	bcc.n	803adf6 <USB_SetTurnaroundTime+0x56>
 803ade8:	68bb      	ldr	r3, [r7, #8]
 803adea:	4a37      	ldr	r2, [pc, #220]	; (803aec8 <USB_SetTurnaroundTime+0x128>)
 803adec:	4293      	cmp	r3, r2
 803adee:	d202      	bcs.n	803adf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 803adf0:	230d      	movs	r3, #13
 803adf2:	617b      	str	r3, [r7, #20]
 803adf4:	e04c      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 803adf6:	68bb      	ldr	r3, [r7, #8]
 803adf8:	4a33      	ldr	r2, [pc, #204]	; (803aec8 <USB_SetTurnaroundTime+0x128>)
 803adfa:	4293      	cmp	r3, r2
 803adfc:	d306      	bcc.n	803ae0c <USB_SetTurnaroundTime+0x6c>
 803adfe:	68bb      	ldr	r3, [r7, #8]
 803ae00:	4a32      	ldr	r2, [pc, #200]	; (803aecc <USB_SetTurnaroundTime+0x12c>)
 803ae02:	4293      	cmp	r3, r2
 803ae04:	d802      	bhi.n	803ae0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 803ae06:	230c      	movs	r3, #12
 803ae08:	617b      	str	r3, [r7, #20]
 803ae0a:	e041      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 803ae0c:	68bb      	ldr	r3, [r7, #8]
 803ae0e:	4a2f      	ldr	r2, [pc, #188]	; (803aecc <USB_SetTurnaroundTime+0x12c>)
 803ae10:	4293      	cmp	r3, r2
 803ae12:	d906      	bls.n	803ae22 <USB_SetTurnaroundTime+0x82>
 803ae14:	68bb      	ldr	r3, [r7, #8]
 803ae16:	4a2e      	ldr	r2, [pc, #184]	; (803aed0 <USB_SetTurnaroundTime+0x130>)
 803ae18:	4293      	cmp	r3, r2
 803ae1a:	d802      	bhi.n	803ae22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 803ae1c:	230b      	movs	r3, #11
 803ae1e:	617b      	str	r3, [r7, #20]
 803ae20:	e036      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 803ae22:	68bb      	ldr	r3, [r7, #8]
 803ae24:	4a2a      	ldr	r2, [pc, #168]	; (803aed0 <USB_SetTurnaroundTime+0x130>)
 803ae26:	4293      	cmp	r3, r2
 803ae28:	d906      	bls.n	803ae38 <USB_SetTurnaroundTime+0x98>
 803ae2a:	68bb      	ldr	r3, [r7, #8]
 803ae2c:	4a29      	ldr	r2, [pc, #164]	; (803aed4 <USB_SetTurnaroundTime+0x134>)
 803ae2e:	4293      	cmp	r3, r2
 803ae30:	d802      	bhi.n	803ae38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 803ae32:	230a      	movs	r3, #10
 803ae34:	617b      	str	r3, [r7, #20]
 803ae36:	e02b      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 803ae38:	68bb      	ldr	r3, [r7, #8]
 803ae3a:	4a26      	ldr	r2, [pc, #152]	; (803aed4 <USB_SetTurnaroundTime+0x134>)
 803ae3c:	4293      	cmp	r3, r2
 803ae3e:	d906      	bls.n	803ae4e <USB_SetTurnaroundTime+0xae>
 803ae40:	68bb      	ldr	r3, [r7, #8]
 803ae42:	4a25      	ldr	r2, [pc, #148]	; (803aed8 <USB_SetTurnaroundTime+0x138>)
 803ae44:	4293      	cmp	r3, r2
 803ae46:	d202      	bcs.n	803ae4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 803ae48:	2309      	movs	r3, #9
 803ae4a:	617b      	str	r3, [r7, #20]
 803ae4c:	e020      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 803ae4e:	68bb      	ldr	r3, [r7, #8]
 803ae50:	4a21      	ldr	r2, [pc, #132]	; (803aed8 <USB_SetTurnaroundTime+0x138>)
 803ae52:	4293      	cmp	r3, r2
 803ae54:	d306      	bcc.n	803ae64 <USB_SetTurnaroundTime+0xc4>
 803ae56:	68bb      	ldr	r3, [r7, #8]
 803ae58:	4a20      	ldr	r2, [pc, #128]	; (803aedc <USB_SetTurnaroundTime+0x13c>)
 803ae5a:	4293      	cmp	r3, r2
 803ae5c:	d802      	bhi.n	803ae64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 803ae5e:	2308      	movs	r3, #8
 803ae60:	617b      	str	r3, [r7, #20]
 803ae62:	e015      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 803ae64:	68bb      	ldr	r3, [r7, #8]
 803ae66:	4a1d      	ldr	r2, [pc, #116]	; (803aedc <USB_SetTurnaroundTime+0x13c>)
 803ae68:	4293      	cmp	r3, r2
 803ae6a:	d906      	bls.n	803ae7a <USB_SetTurnaroundTime+0xda>
 803ae6c:	68bb      	ldr	r3, [r7, #8]
 803ae6e:	4a1c      	ldr	r2, [pc, #112]	; (803aee0 <USB_SetTurnaroundTime+0x140>)
 803ae70:	4293      	cmp	r3, r2
 803ae72:	d202      	bcs.n	803ae7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 803ae74:	2307      	movs	r3, #7
 803ae76:	617b      	str	r3, [r7, #20]
 803ae78:	e00a      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 803ae7a:	2306      	movs	r3, #6
 803ae7c:	617b      	str	r3, [r7, #20]
 803ae7e:	e007      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 803ae80:	79fb      	ldrb	r3, [r7, #7]
 803ae82:	2b00      	cmp	r3, #0
 803ae84:	d102      	bne.n	803ae8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 803ae86:	2309      	movs	r3, #9
 803ae88:	617b      	str	r3, [r7, #20]
 803ae8a:	e001      	b.n	803ae90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 803ae8c:	2309      	movs	r3, #9
 803ae8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 803ae90:	68fb      	ldr	r3, [r7, #12]
 803ae92:	68db      	ldr	r3, [r3, #12]
 803ae94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 803ae98:	68fb      	ldr	r3, [r7, #12]
 803ae9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 803ae9c:	68fb      	ldr	r3, [r7, #12]
 803ae9e:	68da      	ldr	r2, [r3, #12]
 803aea0:	697b      	ldr	r3, [r7, #20]
 803aea2:	029b      	lsls	r3, r3, #10
 803aea4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 803aea8:	431a      	orrs	r2, r3
 803aeaa:	68fb      	ldr	r3, [r7, #12]
 803aeac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 803aeae:	2300      	movs	r3, #0
}
 803aeb0:	4618      	mov	r0, r3
 803aeb2:	371c      	adds	r7, #28
 803aeb4:	46bd      	mov	sp, r7
 803aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aeba:	4770      	bx	lr
 803aebc:	00d8acbf 	.word	0x00d8acbf
 803aec0:	00e4e1c0 	.word	0x00e4e1c0
 803aec4:	00f42400 	.word	0x00f42400
 803aec8:	01067380 	.word	0x01067380
 803aecc:	011a499f 	.word	0x011a499f
 803aed0:	01312cff 	.word	0x01312cff
 803aed4:	014ca43f 	.word	0x014ca43f
 803aed8:	016e3600 	.word	0x016e3600
 803aedc:	01a6ab1f 	.word	0x01a6ab1f
 803aee0:	01e84800 	.word	0x01e84800

0803aee4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 803aee4:	b480      	push	{r7}
 803aee6:	b083      	sub	sp, #12
 803aee8:	af00      	add	r7, sp, #0
 803aeea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 803aeec:	687b      	ldr	r3, [r7, #4]
 803aeee:	689b      	ldr	r3, [r3, #8]
 803aef0:	f043 0201 	orr.w	r2, r3, #1
 803aef4:	687b      	ldr	r3, [r7, #4]
 803aef6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803aef8:	2300      	movs	r3, #0
}
 803aefa:	4618      	mov	r0, r3
 803aefc:	370c      	adds	r7, #12
 803aefe:	46bd      	mov	sp, r7
 803af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 803af04:	4770      	bx	lr

0803af06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 803af06:	b480      	push	{r7}
 803af08:	b083      	sub	sp, #12
 803af0a:	af00      	add	r7, sp, #0
 803af0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 803af0e:	687b      	ldr	r3, [r7, #4]
 803af10:	689b      	ldr	r3, [r3, #8]
 803af12:	f023 0201 	bic.w	r2, r3, #1
 803af16:	687b      	ldr	r3, [r7, #4]
 803af18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803af1a:	2300      	movs	r3, #0
}
 803af1c:	4618      	mov	r0, r3
 803af1e:	370c      	adds	r7, #12
 803af20:	46bd      	mov	sp, r7
 803af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 803af26:	4770      	bx	lr

0803af28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 803af28:	b580      	push	{r7, lr}
 803af2a:	b084      	sub	sp, #16
 803af2c:	af00      	add	r7, sp, #0
 803af2e:	6078      	str	r0, [r7, #4]
 803af30:	460b      	mov	r3, r1
 803af32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 803af34:	2300      	movs	r3, #0
 803af36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 803af38:	687b      	ldr	r3, [r7, #4]
 803af3a:	68db      	ldr	r3, [r3, #12]
 803af3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 803af40:	687b      	ldr	r3, [r7, #4]
 803af42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 803af44:	78fb      	ldrb	r3, [r7, #3]
 803af46:	2b01      	cmp	r3, #1
 803af48:	d115      	bne.n	803af76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 803af4a:	687b      	ldr	r3, [r7, #4]
 803af4c:	68db      	ldr	r3, [r3, #12]
 803af4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 803af52:	687b      	ldr	r3, [r7, #4]
 803af54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 803af56:	2001      	movs	r0, #1
 803af58:	f7f2 ff76 	bl	802de48 <HAL_Delay>
      ms++;
 803af5c:	68fb      	ldr	r3, [r7, #12]
 803af5e:	3301      	adds	r3, #1
 803af60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 803af62:	6878      	ldr	r0, [r7, #4]
 803af64:	f001 fa4b 	bl	803c3fe <USB_GetMode>
 803af68:	4603      	mov	r3, r0
 803af6a:	2b01      	cmp	r3, #1
 803af6c:	d01e      	beq.n	803afac <USB_SetCurrentMode+0x84>
 803af6e:	68fb      	ldr	r3, [r7, #12]
 803af70:	2b31      	cmp	r3, #49	; 0x31
 803af72:	d9f0      	bls.n	803af56 <USB_SetCurrentMode+0x2e>
 803af74:	e01a      	b.n	803afac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 803af76:	78fb      	ldrb	r3, [r7, #3]
 803af78:	2b00      	cmp	r3, #0
 803af7a:	d115      	bne.n	803afa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 803af7c:	687b      	ldr	r3, [r7, #4]
 803af7e:	68db      	ldr	r3, [r3, #12]
 803af80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 803af84:	687b      	ldr	r3, [r7, #4]
 803af86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 803af88:	2001      	movs	r0, #1
 803af8a:	f7f2 ff5d 	bl	802de48 <HAL_Delay>
      ms++;
 803af8e:	68fb      	ldr	r3, [r7, #12]
 803af90:	3301      	adds	r3, #1
 803af92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 803af94:	6878      	ldr	r0, [r7, #4]
 803af96:	f001 fa32 	bl	803c3fe <USB_GetMode>
 803af9a:	4603      	mov	r3, r0
 803af9c:	2b00      	cmp	r3, #0
 803af9e:	d005      	beq.n	803afac <USB_SetCurrentMode+0x84>
 803afa0:	68fb      	ldr	r3, [r7, #12]
 803afa2:	2b31      	cmp	r3, #49	; 0x31
 803afa4:	d9f0      	bls.n	803af88 <USB_SetCurrentMode+0x60>
 803afa6:	e001      	b.n	803afac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 803afa8:	2301      	movs	r3, #1
 803afaa:	e005      	b.n	803afb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 803afac:	68fb      	ldr	r3, [r7, #12]
 803afae:	2b32      	cmp	r3, #50	; 0x32
 803afb0:	d101      	bne.n	803afb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 803afb2:	2301      	movs	r3, #1
 803afb4:	e000      	b.n	803afb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 803afb6:	2300      	movs	r3, #0
}
 803afb8:	4618      	mov	r0, r3
 803afba:	3710      	adds	r7, #16
 803afbc:	46bd      	mov	sp, r7
 803afbe:	bd80      	pop	{r7, pc}

0803afc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 803afc0:	b084      	sub	sp, #16
 803afc2:	b580      	push	{r7, lr}
 803afc4:	b086      	sub	sp, #24
 803afc6:	af00      	add	r7, sp, #0
 803afc8:	6078      	str	r0, [r7, #4]
 803afca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 803afce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 803afd2:	2300      	movs	r3, #0
 803afd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803afd6:	687b      	ldr	r3, [r7, #4]
 803afd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 803afda:	2300      	movs	r3, #0
 803afdc:	613b      	str	r3, [r7, #16]
 803afde:	e009      	b.n	803aff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 803afe0:	687a      	ldr	r2, [r7, #4]
 803afe2:	693b      	ldr	r3, [r7, #16]
 803afe4:	3340      	adds	r3, #64	; 0x40
 803afe6:	009b      	lsls	r3, r3, #2
 803afe8:	4413      	add	r3, r2
 803afea:	2200      	movs	r2, #0
 803afec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 803afee:	693b      	ldr	r3, [r7, #16]
 803aff0:	3301      	adds	r3, #1
 803aff2:	613b      	str	r3, [r7, #16]
 803aff4:	693b      	ldr	r3, [r7, #16]
 803aff6:	2b0e      	cmp	r3, #14
 803aff8:	d9f2      	bls.n	803afe0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 803affa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803affc:	2b00      	cmp	r3, #0
 803affe:	d11c      	bne.n	803b03a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803b000:	68fb      	ldr	r3, [r7, #12]
 803b002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b006:	685b      	ldr	r3, [r3, #4]
 803b008:	68fa      	ldr	r2, [r7, #12]
 803b00a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803b00e:	f043 0302 	orr.w	r3, r3, #2
 803b012:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 803b014:	687b      	ldr	r3, [r7, #4]
 803b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b018:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 803b01c:	687b      	ldr	r3, [r7, #4]
 803b01e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 803b020:	687b      	ldr	r3, [r7, #4]
 803b022:	681b      	ldr	r3, [r3, #0]
 803b024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803b028:	687b      	ldr	r3, [r7, #4]
 803b02a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 803b02c:	687b      	ldr	r3, [r7, #4]
 803b02e:	681b      	ldr	r3, [r3, #0]
 803b030:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803b034:	687b      	ldr	r3, [r7, #4]
 803b036:	601a      	str	r2, [r3, #0]
 803b038:	e005      	b.n	803b046 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 803b03a:	687b      	ldr	r3, [r7, #4]
 803b03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b03e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 803b042:	687b      	ldr	r3, [r7, #4]
 803b044:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 803b046:	68fb      	ldr	r3, [r7, #12]
 803b048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803b04c:	461a      	mov	r2, r3
 803b04e:	2300      	movs	r3, #0
 803b050:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 803b052:	68fb      	ldr	r3, [r7, #12]
 803b054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b058:	4619      	mov	r1, r3
 803b05a:	68fb      	ldr	r3, [r7, #12]
 803b05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b060:	461a      	mov	r2, r3
 803b062:	680b      	ldr	r3, [r1, #0]
 803b064:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803b068:	2b01      	cmp	r3, #1
 803b06a:	d10c      	bne.n	803b086 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 803b06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803b06e:	2b00      	cmp	r3, #0
 803b070:	d104      	bne.n	803b07c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 803b072:	2100      	movs	r1, #0
 803b074:	6878      	ldr	r0, [r7, #4]
 803b076:	f000 f965 	bl	803b344 <USB_SetDevSpeed>
 803b07a:	e008      	b.n	803b08e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 803b07c:	2101      	movs	r1, #1
 803b07e:	6878      	ldr	r0, [r7, #4]
 803b080:	f000 f960 	bl	803b344 <USB_SetDevSpeed>
 803b084:	e003      	b.n	803b08e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 803b086:	2103      	movs	r1, #3
 803b088:	6878      	ldr	r0, [r7, #4]
 803b08a:	f000 f95b 	bl	803b344 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 803b08e:	2110      	movs	r1, #16
 803b090:	6878      	ldr	r0, [r7, #4]
 803b092:	f000 f8f3 	bl	803b27c <USB_FlushTxFifo>
 803b096:	4603      	mov	r3, r0
 803b098:	2b00      	cmp	r3, #0
 803b09a:	d001      	beq.n	803b0a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 803b09c:	2301      	movs	r3, #1
 803b09e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 803b0a0:	6878      	ldr	r0, [r7, #4]
 803b0a2:	f000 f91f 	bl	803b2e4 <USB_FlushRxFifo>
 803b0a6:	4603      	mov	r3, r0
 803b0a8:	2b00      	cmp	r3, #0
 803b0aa:	d001      	beq.n	803b0b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 803b0ac:	2301      	movs	r3, #1
 803b0ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 803b0b0:	68fb      	ldr	r3, [r7, #12]
 803b0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b0b6:	461a      	mov	r2, r3
 803b0b8:	2300      	movs	r3, #0
 803b0ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 803b0bc:	68fb      	ldr	r3, [r7, #12]
 803b0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b0c2:	461a      	mov	r2, r3
 803b0c4:	2300      	movs	r3, #0
 803b0c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 803b0c8:	68fb      	ldr	r3, [r7, #12]
 803b0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b0ce:	461a      	mov	r2, r3
 803b0d0:	2300      	movs	r3, #0
 803b0d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b0d4:	2300      	movs	r3, #0
 803b0d6:	613b      	str	r3, [r7, #16]
 803b0d8:	e043      	b.n	803b162 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803b0da:	693b      	ldr	r3, [r7, #16]
 803b0dc:	015a      	lsls	r2, r3, #5
 803b0de:	68fb      	ldr	r3, [r7, #12]
 803b0e0:	4413      	add	r3, r2
 803b0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b0e6:	681b      	ldr	r3, [r3, #0]
 803b0e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803b0ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803b0f0:	d118      	bne.n	803b124 <USB_DevInit+0x164>
    {
      if (i == 0U)
 803b0f2:	693b      	ldr	r3, [r7, #16]
 803b0f4:	2b00      	cmp	r3, #0
 803b0f6:	d10a      	bne.n	803b10e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 803b0f8:	693b      	ldr	r3, [r7, #16]
 803b0fa:	015a      	lsls	r2, r3, #5
 803b0fc:	68fb      	ldr	r3, [r7, #12]
 803b0fe:	4413      	add	r3, r2
 803b100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b104:	461a      	mov	r2, r3
 803b106:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803b10a:	6013      	str	r3, [r2, #0]
 803b10c:	e013      	b.n	803b136 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 803b10e:	693b      	ldr	r3, [r7, #16]
 803b110:	015a      	lsls	r2, r3, #5
 803b112:	68fb      	ldr	r3, [r7, #12]
 803b114:	4413      	add	r3, r2
 803b116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b11a:	461a      	mov	r2, r3
 803b11c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803b120:	6013      	str	r3, [r2, #0]
 803b122:	e008      	b.n	803b136 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 803b124:	693b      	ldr	r3, [r7, #16]
 803b126:	015a      	lsls	r2, r3, #5
 803b128:	68fb      	ldr	r3, [r7, #12]
 803b12a:	4413      	add	r3, r2
 803b12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b130:	461a      	mov	r2, r3
 803b132:	2300      	movs	r3, #0
 803b134:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 803b136:	693b      	ldr	r3, [r7, #16]
 803b138:	015a      	lsls	r2, r3, #5
 803b13a:	68fb      	ldr	r3, [r7, #12]
 803b13c:	4413      	add	r3, r2
 803b13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b142:	461a      	mov	r2, r3
 803b144:	2300      	movs	r3, #0
 803b146:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 803b148:	693b      	ldr	r3, [r7, #16]
 803b14a:	015a      	lsls	r2, r3, #5
 803b14c:	68fb      	ldr	r3, [r7, #12]
 803b14e:	4413      	add	r3, r2
 803b150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b154:	461a      	mov	r2, r3
 803b156:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803b15a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b15c:	693b      	ldr	r3, [r7, #16]
 803b15e:	3301      	adds	r3, #1
 803b160:	613b      	str	r3, [r7, #16]
 803b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b164:	693a      	ldr	r2, [r7, #16]
 803b166:	429a      	cmp	r2, r3
 803b168:	d3b7      	bcc.n	803b0da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b16a:	2300      	movs	r3, #0
 803b16c:	613b      	str	r3, [r7, #16]
 803b16e:	e043      	b.n	803b1f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803b170:	693b      	ldr	r3, [r7, #16]
 803b172:	015a      	lsls	r2, r3, #5
 803b174:	68fb      	ldr	r3, [r7, #12]
 803b176:	4413      	add	r3, r2
 803b178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b17c:	681b      	ldr	r3, [r3, #0]
 803b17e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803b182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803b186:	d118      	bne.n	803b1ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 803b188:	693b      	ldr	r3, [r7, #16]
 803b18a:	2b00      	cmp	r3, #0
 803b18c:	d10a      	bne.n	803b1a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 803b18e:	693b      	ldr	r3, [r7, #16]
 803b190:	015a      	lsls	r2, r3, #5
 803b192:	68fb      	ldr	r3, [r7, #12]
 803b194:	4413      	add	r3, r2
 803b196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b19a:	461a      	mov	r2, r3
 803b19c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803b1a0:	6013      	str	r3, [r2, #0]
 803b1a2:	e013      	b.n	803b1cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 803b1a4:	693b      	ldr	r3, [r7, #16]
 803b1a6:	015a      	lsls	r2, r3, #5
 803b1a8:	68fb      	ldr	r3, [r7, #12]
 803b1aa:	4413      	add	r3, r2
 803b1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b1b0:	461a      	mov	r2, r3
 803b1b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803b1b6:	6013      	str	r3, [r2, #0]
 803b1b8:	e008      	b.n	803b1cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 803b1ba:	693b      	ldr	r3, [r7, #16]
 803b1bc:	015a      	lsls	r2, r3, #5
 803b1be:	68fb      	ldr	r3, [r7, #12]
 803b1c0:	4413      	add	r3, r2
 803b1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b1c6:	461a      	mov	r2, r3
 803b1c8:	2300      	movs	r3, #0
 803b1ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 803b1cc:	693b      	ldr	r3, [r7, #16]
 803b1ce:	015a      	lsls	r2, r3, #5
 803b1d0:	68fb      	ldr	r3, [r7, #12]
 803b1d2:	4413      	add	r3, r2
 803b1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b1d8:	461a      	mov	r2, r3
 803b1da:	2300      	movs	r3, #0
 803b1dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 803b1de:	693b      	ldr	r3, [r7, #16]
 803b1e0:	015a      	lsls	r2, r3, #5
 803b1e2:	68fb      	ldr	r3, [r7, #12]
 803b1e4:	4413      	add	r3, r2
 803b1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b1ea:	461a      	mov	r2, r3
 803b1ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803b1f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b1f2:	693b      	ldr	r3, [r7, #16]
 803b1f4:	3301      	adds	r3, #1
 803b1f6:	613b      	str	r3, [r7, #16]
 803b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b1fa:	693a      	ldr	r2, [r7, #16]
 803b1fc:	429a      	cmp	r2, r3
 803b1fe:	d3b7      	bcc.n	803b170 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 803b200:	68fb      	ldr	r3, [r7, #12]
 803b202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b206:	691b      	ldr	r3, [r3, #16]
 803b208:	68fa      	ldr	r2, [r7, #12]
 803b20a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803b20e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803b212:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 803b214:	687b      	ldr	r3, [r7, #4]
 803b216:	2200      	movs	r2, #0
 803b218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 803b21a:	687b      	ldr	r3, [r7, #4]
 803b21c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 803b220:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 803b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803b224:	2b00      	cmp	r3, #0
 803b226:	d105      	bne.n	803b234 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 803b228:	687b      	ldr	r3, [r7, #4]
 803b22a:	699b      	ldr	r3, [r3, #24]
 803b22c:	f043 0210 	orr.w	r2, r3, #16
 803b230:	687b      	ldr	r3, [r7, #4]
 803b232:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 803b234:	687b      	ldr	r3, [r7, #4]
 803b236:	699a      	ldr	r2, [r3, #24]
 803b238:	4b0e      	ldr	r3, [pc, #56]	; (803b274 <USB_DevInit+0x2b4>)
 803b23a:	4313      	orrs	r3, r2
 803b23c:	687a      	ldr	r2, [r7, #4]
 803b23e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 803b240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803b242:	2b00      	cmp	r3, #0
 803b244:	d005      	beq.n	803b252 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 803b246:	687b      	ldr	r3, [r7, #4]
 803b248:	699b      	ldr	r3, [r3, #24]
 803b24a:	f043 0208 	orr.w	r2, r3, #8
 803b24e:	687b      	ldr	r3, [r7, #4]
 803b250:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 803b252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803b254:	2b01      	cmp	r3, #1
 803b256:	d105      	bne.n	803b264 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 803b258:	687b      	ldr	r3, [r7, #4]
 803b25a:	699a      	ldr	r2, [r3, #24]
 803b25c:	4b06      	ldr	r3, [pc, #24]	; (803b278 <USB_DevInit+0x2b8>)
 803b25e:	4313      	orrs	r3, r2
 803b260:	687a      	ldr	r2, [r7, #4]
 803b262:	6193      	str	r3, [r2, #24]
  }

  return ret;
 803b264:	7dfb      	ldrb	r3, [r7, #23]
}
 803b266:	4618      	mov	r0, r3
 803b268:	3718      	adds	r7, #24
 803b26a:	46bd      	mov	sp, r7
 803b26c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803b270:	b004      	add	sp, #16
 803b272:	4770      	bx	lr
 803b274:	803c3800 	.word	0x803c3800
 803b278:	40000004 	.word	0x40000004

0803b27c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 803b27c:	b480      	push	{r7}
 803b27e:	b085      	sub	sp, #20
 803b280:	af00      	add	r7, sp, #0
 803b282:	6078      	str	r0, [r7, #4]
 803b284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803b286:	2300      	movs	r3, #0
 803b288:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803b28a:	68fb      	ldr	r3, [r7, #12]
 803b28c:	3301      	adds	r3, #1
 803b28e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b290:	68fb      	ldr	r3, [r7, #12]
 803b292:	4a13      	ldr	r2, [pc, #76]	; (803b2e0 <USB_FlushTxFifo+0x64>)
 803b294:	4293      	cmp	r3, r2
 803b296:	d901      	bls.n	803b29c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 803b298:	2303      	movs	r3, #3
 803b29a:	e01b      	b.n	803b2d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803b29c:	687b      	ldr	r3, [r7, #4]
 803b29e:	691b      	ldr	r3, [r3, #16]
 803b2a0:	2b00      	cmp	r3, #0
 803b2a2:	daf2      	bge.n	803b28a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 803b2a4:	2300      	movs	r3, #0
 803b2a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 803b2a8:	683b      	ldr	r3, [r7, #0]
 803b2aa:	019b      	lsls	r3, r3, #6
 803b2ac:	f043 0220 	orr.w	r2, r3, #32
 803b2b0:	687b      	ldr	r3, [r7, #4]
 803b2b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803b2b4:	68fb      	ldr	r3, [r7, #12]
 803b2b6:	3301      	adds	r3, #1
 803b2b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b2ba:	68fb      	ldr	r3, [r7, #12]
 803b2bc:	4a08      	ldr	r2, [pc, #32]	; (803b2e0 <USB_FlushTxFifo+0x64>)
 803b2be:	4293      	cmp	r3, r2
 803b2c0:	d901      	bls.n	803b2c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 803b2c2:	2303      	movs	r3, #3
 803b2c4:	e006      	b.n	803b2d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 803b2c6:	687b      	ldr	r3, [r7, #4]
 803b2c8:	691b      	ldr	r3, [r3, #16]
 803b2ca:	f003 0320 	and.w	r3, r3, #32
 803b2ce:	2b20      	cmp	r3, #32
 803b2d0:	d0f0      	beq.n	803b2b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 803b2d2:	2300      	movs	r3, #0
}
 803b2d4:	4618      	mov	r0, r3
 803b2d6:	3714      	adds	r7, #20
 803b2d8:	46bd      	mov	sp, r7
 803b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b2de:	4770      	bx	lr
 803b2e0:	00030d40 	.word	0x00030d40

0803b2e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 803b2e4:	b480      	push	{r7}
 803b2e6:	b085      	sub	sp, #20
 803b2e8:	af00      	add	r7, sp, #0
 803b2ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803b2ec:	2300      	movs	r3, #0
 803b2ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803b2f0:	68fb      	ldr	r3, [r7, #12]
 803b2f2:	3301      	adds	r3, #1
 803b2f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b2f6:	68fb      	ldr	r3, [r7, #12]
 803b2f8:	4a11      	ldr	r2, [pc, #68]	; (803b340 <USB_FlushRxFifo+0x5c>)
 803b2fa:	4293      	cmp	r3, r2
 803b2fc:	d901      	bls.n	803b302 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 803b2fe:	2303      	movs	r3, #3
 803b300:	e018      	b.n	803b334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803b302:	687b      	ldr	r3, [r7, #4]
 803b304:	691b      	ldr	r3, [r3, #16]
 803b306:	2b00      	cmp	r3, #0
 803b308:	daf2      	bge.n	803b2f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 803b30a:	2300      	movs	r3, #0
 803b30c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 803b30e:	687b      	ldr	r3, [r7, #4]
 803b310:	2210      	movs	r2, #16
 803b312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803b314:	68fb      	ldr	r3, [r7, #12]
 803b316:	3301      	adds	r3, #1
 803b318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b31a:	68fb      	ldr	r3, [r7, #12]
 803b31c:	4a08      	ldr	r2, [pc, #32]	; (803b340 <USB_FlushRxFifo+0x5c>)
 803b31e:	4293      	cmp	r3, r2
 803b320:	d901      	bls.n	803b326 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 803b322:	2303      	movs	r3, #3
 803b324:	e006      	b.n	803b334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 803b326:	687b      	ldr	r3, [r7, #4]
 803b328:	691b      	ldr	r3, [r3, #16]
 803b32a:	f003 0310 	and.w	r3, r3, #16
 803b32e:	2b10      	cmp	r3, #16
 803b330:	d0f0      	beq.n	803b314 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 803b332:	2300      	movs	r3, #0
}
 803b334:	4618      	mov	r0, r3
 803b336:	3714      	adds	r7, #20
 803b338:	46bd      	mov	sp, r7
 803b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b33e:	4770      	bx	lr
 803b340:	00030d40 	.word	0x00030d40

0803b344 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 803b344:	b480      	push	{r7}
 803b346:	b085      	sub	sp, #20
 803b348:	af00      	add	r7, sp, #0
 803b34a:	6078      	str	r0, [r7, #4]
 803b34c:	460b      	mov	r3, r1
 803b34e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b350:	687b      	ldr	r3, [r7, #4]
 803b352:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 803b354:	68fb      	ldr	r3, [r7, #12]
 803b356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b35a:	681a      	ldr	r2, [r3, #0]
 803b35c:	78fb      	ldrb	r3, [r7, #3]
 803b35e:	68f9      	ldr	r1, [r7, #12]
 803b360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b364:	4313      	orrs	r3, r2
 803b366:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 803b368:	2300      	movs	r3, #0
}
 803b36a:	4618      	mov	r0, r3
 803b36c:	3714      	adds	r7, #20
 803b36e:	46bd      	mov	sp, r7
 803b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b374:	4770      	bx	lr

0803b376 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 803b376:	b480      	push	{r7}
 803b378:	b087      	sub	sp, #28
 803b37a:	af00      	add	r7, sp, #0
 803b37c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b37e:	687b      	ldr	r3, [r7, #4]
 803b380:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 803b382:	693b      	ldr	r3, [r7, #16]
 803b384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b388:	689b      	ldr	r3, [r3, #8]
 803b38a:	f003 0306 	and.w	r3, r3, #6
 803b38e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 803b390:	68fb      	ldr	r3, [r7, #12]
 803b392:	2b00      	cmp	r3, #0
 803b394:	d102      	bne.n	803b39c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 803b396:	2300      	movs	r3, #0
 803b398:	75fb      	strb	r3, [r7, #23]
 803b39a:	e00a      	b.n	803b3b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 803b39c:	68fb      	ldr	r3, [r7, #12]
 803b39e:	2b02      	cmp	r3, #2
 803b3a0:	d002      	beq.n	803b3a8 <USB_GetDevSpeed+0x32>
 803b3a2:	68fb      	ldr	r3, [r7, #12]
 803b3a4:	2b06      	cmp	r3, #6
 803b3a6:	d102      	bne.n	803b3ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 803b3a8:	2302      	movs	r3, #2
 803b3aa:	75fb      	strb	r3, [r7, #23]
 803b3ac:	e001      	b.n	803b3b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 803b3ae:	230f      	movs	r3, #15
 803b3b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803b3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 803b3b4:	4618      	mov	r0, r3
 803b3b6:	371c      	adds	r7, #28
 803b3b8:	46bd      	mov	sp, r7
 803b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3be:	4770      	bx	lr

0803b3c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803b3c0:	b480      	push	{r7}
 803b3c2:	b085      	sub	sp, #20
 803b3c4:	af00      	add	r7, sp, #0
 803b3c6:	6078      	str	r0, [r7, #4]
 803b3c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b3ca:	687b      	ldr	r3, [r7, #4]
 803b3cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803b3ce:	683b      	ldr	r3, [r7, #0]
 803b3d0:	781b      	ldrb	r3, [r3, #0]
 803b3d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803b3d4:	683b      	ldr	r3, [r7, #0]
 803b3d6:	785b      	ldrb	r3, [r3, #1]
 803b3d8:	2b01      	cmp	r3, #1
 803b3da:	d139      	bne.n	803b450 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 803b3dc:	68fb      	ldr	r3, [r7, #12]
 803b3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b3e2:	69da      	ldr	r2, [r3, #28]
 803b3e4:	683b      	ldr	r3, [r7, #0]
 803b3e6:	781b      	ldrb	r3, [r3, #0]
 803b3e8:	f003 030f 	and.w	r3, r3, #15
 803b3ec:	2101      	movs	r1, #1
 803b3ee:	fa01 f303 	lsl.w	r3, r1, r3
 803b3f2:	b29b      	uxth	r3, r3
 803b3f4:	68f9      	ldr	r1, [r7, #12]
 803b3f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b3fa:	4313      	orrs	r3, r2
 803b3fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 803b3fe:	68bb      	ldr	r3, [r7, #8]
 803b400:	015a      	lsls	r2, r3, #5
 803b402:	68fb      	ldr	r3, [r7, #12]
 803b404:	4413      	add	r3, r2
 803b406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b40a:	681b      	ldr	r3, [r3, #0]
 803b40c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803b410:	2b00      	cmp	r3, #0
 803b412:	d153      	bne.n	803b4bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803b414:	68bb      	ldr	r3, [r7, #8]
 803b416:	015a      	lsls	r2, r3, #5
 803b418:	68fb      	ldr	r3, [r7, #12]
 803b41a:	4413      	add	r3, r2
 803b41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b420:	681a      	ldr	r2, [r3, #0]
 803b422:	683b      	ldr	r3, [r7, #0]
 803b424:	68db      	ldr	r3, [r3, #12]
 803b426:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803b42a:	683b      	ldr	r3, [r7, #0]
 803b42c:	791b      	ldrb	r3, [r3, #4]
 803b42e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803b430:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803b432:	68bb      	ldr	r3, [r7, #8]
 803b434:	059b      	lsls	r3, r3, #22
 803b436:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803b438:	431a      	orrs	r2, r3
 803b43a:	68bb      	ldr	r3, [r7, #8]
 803b43c:	0159      	lsls	r1, r3, #5
 803b43e:	68fb      	ldr	r3, [r7, #12]
 803b440:	440b      	add	r3, r1
 803b442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b446:	4619      	mov	r1, r3
 803b448:	4b20      	ldr	r3, [pc, #128]	; (803b4cc <USB_ActivateEndpoint+0x10c>)
 803b44a:	4313      	orrs	r3, r2
 803b44c:	600b      	str	r3, [r1, #0]
 803b44e:	e035      	b.n	803b4bc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 803b450:	68fb      	ldr	r3, [r7, #12]
 803b452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b456:	69da      	ldr	r2, [r3, #28]
 803b458:	683b      	ldr	r3, [r7, #0]
 803b45a:	781b      	ldrb	r3, [r3, #0]
 803b45c:	f003 030f 	and.w	r3, r3, #15
 803b460:	2101      	movs	r1, #1
 803b462:	fa01 f303 	lsl.w	r3, r1, r3
 803b466:	041b      	lsls	r3, r3, #16
 803b468:	68f9      	ldr	r1, [r7, #12]
 803b46a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b46e:	4313      	orrs	r3, r2
 803b470:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 803b472:	68bb      	ldr	r3, [r7, #8]
 803b474:	015a      	lsls	r2, r3, #5
 803b476:	68fb      	ldr	r3, [r7, #12]
 803b478:	4413      	add	r3, r2
 803b47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b47e:	681b      	ldr	r3, [r3, #0]
 803b480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803b484:	2b00      	cmp	r3, #0
 803b486:	d119      	bne.n	803b4bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803b488:	68bb      	ldr	r3, [r7, #8]
 803b48a:	015a      	lsls	r2, r3, #5
 803b48c:	68fb      	ldr	r3, [r7, #12]
 803b48e:	4413      	add	r3, r2
 803b490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b494:	681a      	ldr	r2, [r3, #0]
 803b496:	683b      	ldr	r3, [r7, #0]
 803b498:	68db      	ldr	r3, [r3, #12]
 803b49a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 803b49e:	683b      	ldr	r3, [r7, #0]
 803b4a0:	791b      	ldrb	r3, [r3, #4]
 803b4a2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803b4a4:	430b      	orrs	r3, r1
 803b4a6:	431a      	orrs	r2, r3
 803b4a8:	68bb      	ldr	r3, [r7, #8]
 803b4aa:	0159      	lsls	r1, r3, #5
 803b4ac:	68fb      	ldr	r3, [r7, #12]
 803b4ae:	440b      	add	r3, r1
 803b4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b4b4:	4619      	mov	r1, r3
 803b4b6:	4b05      	ldr	r3, [pc, #20]	; (803b4cc <USB_ActivateEndpoint+0x10c>)
 803b4b8:	4313      	orrs	r3, r2
 803b4ba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 803b4bc:	2300      	movs	r3, #0
}
 803b4be:	4618      	mov	r0, r3
 803b4c0:	3714      	adds	r7, #20
 803b4c2:	46bd      	mov	sp, r7
 803b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4c8:	4770      	bx	lr
 803b4ca:	bf00      	nop
 803b4cc:	10008000 	.word	0x10008000

0803b4d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803b4d0:	b480      	push	{r7}
 803b4d2:	b085      	sub	sp, #20
 803b4d4:	af00      	add	r7, sp, #0
 803b4d6:	6078      	str	r0, [r7, #4]
 803b4d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b4da:	687b      	ldr	r3, [r7, #4]
 803b4dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803b4de:	683b      	ldr	r3, [r7, #0]
 803b4e0:	781b      	ldrb	r3, [r3, #0]
 803b4e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 803b4e4:	683b      	ldr	r3, [r7, #0]
 803b4e6:	785b      	ldrb	r3, [r3, #1]
 803b4e8:	2b01      	cmp	r3, #1
 803b4ea:	d161      	bne.n	803b5b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803b4ec:	68bb      	ldr	r3, [r7, #8]
 803b4ee:	015a      	lsls	r2, r3, #5
 803b4f0:	68fb      	ldr	r3, [r7, #12]
 803b4f2:	4413      	add	r3, r2
 803b4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b4f8:	681b      	ldr	r3, [r3, #0]
 803b4fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803b4fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803b502:	d11f      	bne.n	803b544 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 803b504:	68bb      	ldr	r3, [r7, #8]
 803b506:	015a      	lsls	r2, r3, #5
 803b508:	68fb      	ldr	r3, [r7, #12]
 803b50a:	4413      	add	r3, r2
 803b50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b510:	681b      	ldr	r3, [r3, #0]
 803b512:	68ba      	ldr	r2, [r7, #8]
 803b514:	0151      	lsls	r1, r2, #5
 803b516:	68fa      	ldr	r2, [r7, #12]
 803b518:	440a      	add	r2, r1
 803b51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b51e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b522:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 803b524:	68bb      	ldr	r3, [r7, #8]
 803b526:	015a      	lsls	r2, r3, #5
 803b528:	68fb      	ldr	r3, [r7, #12]
 803b52a:	4413      	add	r3, r2
 803b52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b530:	681b      	ldr	r3, [r3, #0]
 803b532:	68ba      	ldr	r2, [r7, #8]
 803b534:	0151      	lsls	r1, r2, #5
 803b536:	68fa      	ldr	r2, [r7, #12]
 803b538:	440a      	add	r2, r1
 803b53a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b53e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803b542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803b544:	68fb      	ldr	r3, [r7, #12]
 803b546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b54a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803b54c:	683b      	ldr	r3, [r7, #0]
 803b54e:	781b      	ldrb	r3, [r3, #0]
 803b550:	f003 030f 	and.w	r3, r3, #15
 803b554:	2101      	movs	r1, #1
 803b556:	fa01 f303 	lsl.w	r3, r1, r3
 803b55a:	b29b      	uxth	r3, r3
 803b55c:	43db      	mvns	r3, r3
 803b55e:	68f9      	ldr	r1, [r7, #12]
 803b560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b564:	4013      	ands	r3, r2
 803b566:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803b568:	68fb      	ldr	r3, [r7, #12]
 803b56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b56e:	69da      	ldr	r2, [r3, #28]
 803b570:	683b      	ldr	r3, [r7, #0]
 803b572:	781b      	ldrb	r3, [r3, #0]
 803b574:	f003 030f 	and.w	r3, r3, #15
 803b578:	2101      	movs	r1, #1
 803b57a:	fa01 f303 	lsl.w	r3, r1, r3
 803b57e:	b29b      	uxth	r3, r3
 803b580:	43db      	mvns	r3, r3
 803b582:	68f9      	ldr	r1, [r7, #12]
 803b584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b588:	4013      	ands	r3, r2
 803b58a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 803b58c:	68bb      	ldr	r3, [r7, #8]
 803b58e:	015a      	lsls	r2, r3, #5
 803b590:	68fb      	ldr	r3, [r7, #12]
 803b592:	4413      	add	r3, r2
 803b594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b598:	681a      	ldr	r2, [r3, #0]
 803b59a:	68bb      	ldr	r3, [r7, #8]
 803b59c:	0159      	lsls	r1, r3, #5
 803b59e:	68fb      	ldr	r3, [r7, #12]
 803b5a0:	440b      	add	r3, r1
 803b5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b5a6:	4619      	mov	r1, r3
 803b5a8:	4b35      	ldr	r3, [pc, #212]	; (803b680 <USB_DeactivateEndpoint+0x1b0>)
 803b5aa:	4013      	ands	r3, r2
 803b5ac:	600b      	str	r3, [r1, #0]
 803b5ae:	e060      	b.n	803b672 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803b5b0:	68bb      	ldr	r3, [r7, #8]
 803b5b2:	015a      	lsls	r2, r3, #5
 803b5b4:	68fb      	ldr	r3, [r7, #12]
 803b5b6:	4413      	add	r3, r2
 803b5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b5bc:	681b      	ldr	r3, [r3, #0]
 803b5be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803b5c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803b5c6:	d11f      	bne.n	803b608 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 803b5c8:	68bb      	ldr	r3, [r7, #8]
 803b5ca:	015a      	lsls	r2, r3, #5
 803b5cc:	68fb      	ldr	r3, [r7, #12]
 803b5ce:	4413      	add	r3, r2
 803b5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b5d4:	681b      	ldr	r3, [r3, #0]
 803b5d6:	68ba      	ldr	r2, [r7, #8]
 803b5d8:	0151      	lsls	r1, r2, #5
 803b5da:	68fa      	ldr	r2, [r7, #12]
 803b5dc:	440a      	add	r2, r1
 803b5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803b5e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b5e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 803b5e8:	68bb      	ldr	r3, [r7, #8]
 803b5ea:	015a      	lsls	r2, r3, #5
 803b5ec:	68fb      	ldr	r3, [r7, #12]
 803b5ee:	4413      	add	r3, r2
 803b5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b5f4:	681b      	ldr	r3, [r3, #0]
 803b5f6:	68ba      	ldr	r2, [r7, #8]
 803b5f8:	0151      	lsls	r1, r2, #5
 803b5fa:	68fa      	ldr	r2, [r7, #12]
 803b5fc:	440a      	add	r2, r1
 803b5fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803b602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803b606:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 803b608:	68fb      	ldr	r3, [r7, #12]
 803b60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b60e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803b610:	683b      	ldr	r3, [r7, #0]
 803b612:	781b      	ldrb	r3, [r3, #0]
 803b614:	f003 030f 	and.w	r3, r3, #15
 803b618:	2101      	movs	r1, #1
 803b61a:	fa01 f303 	lsl.w	r3, r1, r3
 803b61e:	041b      	lsls	r3, r3, #16
 803b620:	43db      	mvns	r3, r3
 803b622:	68f9      	ldr	r1, [r7, #12]
 803b624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b628:	4013      	ands	r3, r2
 803b62a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 803b62c:	68fb      	ldr	r3, [r7, #12]
 803b62e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b632:	69da      	ldr	r2, [r3, #28]
 803b634:	683b      	ldr	r3, [r7, #0]
 803b636:	781b      	ldrb	r3, [r3, #0]
 803b638:	f003 030f 	and.w	r3, r3, #15
 803b63c:	2101      	movs	r1, #1
 803b63e:	fa01 f303 	lsl.w	r3, r1, r3
 803b642:	041b      	lsls	r3, r3, #16
 803b644:	43db      	mvns	r3, r3
 803b646:	68f9      	ldr	r1, [r7, #12]
 803b648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b64c:	4013      	ands	r3, r2
 803b64e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 803b650:	68bb      	ldr	r3, [r7, #8]
 803b652:	015a      	lsls	r2, r3, #5
 803b654:	68fb      	ldr	r3, [r7, #12]
 803b656:	4413      	add	r3, r2
 803b658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b65c:	681a      	ldr	r2, [r3, #0]
 803b65e:	68bb      	ldr	r3, [r7, #8]
 803b660:	0159      	lsls	r1, r3, #5
 803b662:	68fb      	ldr	r3, [r7, #12]
 803b664:	440b      	add	r3, r1
 803b666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b66a:	4619      	mov	r1, r3
 803b66c:	4b05      	ldr	r3, [pc, #20]	; (803b684 <USB_DeactivateEndpoint+0x1b4>)
 803b66e:	4013      	ands	r3, r2
 803b670:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 803b672:	2300      	movs	r3, #0
}
 803b674:	4618      	mov	r0, r3
 803b676:	3714      	adds	r7, #20
 803b678:	46bd      	mov	sp, r7
 803b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b67e:	4770      	bx	lr
 803b680:	ec337800 	.word	0xec337800
 803b684:	eff37800 	.word	0xeff37800

0803b688 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803b688:	b580      	push	{r7, lr}
 803b68a:	b08a      	sub	sp, #40	; 0x28
 803b68c:	af02      	add	r7, sp, #8
 803b68e:	60f8      	str	r0, [r7, #12]
 803b690:	60b9      	str	r1, [r7, #8]
 803b692:	4613      	mov	r3, r2
 803b694:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b696:	68fb      	ldr	r3, [r7, #12]
 803b698:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 803b69a:	68bb      	ldr	r3, [r7, #8]
 803b69c:	781b      	ldrb	r3, [r3, #0]
 803b69e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 803b6a0:	68bb      	ldr	r3, [r7, #8]
 803b6a2:	785b      	ldrb	r3, [r3, #1]
 803b6a4:	2b01      	cmp	r3, #1
 803b6a6:	f040 8163 	bne.w	803b970 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803b6aa:	68bb      	ldr	r3, [r7, #8]
 803b6ac:	699b      	ldr	r3, [r3, #24]
 803b6ae:	2b00      	cmp	r3, #0
 803b6b0:	d132      	bne.n	803b718 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803b6b2:	69bb      	ldr	r3, [r7, #24]
 803b6b4:	015a      	lsls	r2, r3, #5
 803b6b6:	69fb      	ldr	r3, [r7, #28]
 803b6b8:	4413      	add	r3, r2
 803b6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b6be:	691a      	ldr	r2, [r3, #16]
 803b6c0:	69bb      	ldr	r3, [r7, #24]
 803b6c2:	0159      	lsls	r1, r3, #5
 803b6c4:	69fb      	ldr	r3, [r7, #28]
 803b6c6:	440b      	add	r3, r1
 803b6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b6cc:	4619      	mov	r1, r3
 803b6ce:	4ba5      	ldr	r3, [pc, #660]	; (803b964 <USB_EPStartXfer+0x2dc>)
 803b6d0:	4013      	ands	r3, r2
 803b6d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803b6d4:	69bb      	ldr	r3, [r7, #24]
 803b6d6:	015a      	lsls	r2, r3, #5
 803b6d8:	69fb      	ldr	r3, [r7, #28]
 803b6da:	4413      	add	r3, r2
 803b6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b6e0:	691b      	ldr	r3, [r3, #16]
 803b6e2:	69ba      	ldr	r2, [r7, #24]
 803b6e4:	0151      	lsls	r1, r2, #5
 803b6e6:	69fa      	ldr	r2, [r7, #28]
 803b6e8:	440a      	add	r2, r1
 803b6ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b6ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803b6f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803b6f4:	69bb      	ldr	r3, [r7, #24]
 803b6f6:	015a      	lsls	r2, r3, #5
 803b6f8:	69fb      	ldr	r3, [r7, #28]
 803b6fa:	4413      	add	r3, r2
 803b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b700:	691a      	ldr	r2, [r3, #16]
 803b702:	69bb      	ldr	r3, [r7, #24]
 803b704:	0159      	lsls	r1, r3, #5
 803b706:	69fb      	ldr	r3, [r7, #28]
 803b708:	440b      	add	r3, r1
 803b70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b70e:	4619      	mov	r1, r3
 803b710:	4b95      	ldr	r3, [pc, #596]	; (803b968 <USB_EPStartXfer+0x2e0>)
 803b712:	4013      	ands	r3, r2
 803b714:	610b      	str	r3, [r1, #16]
 803b716:	e074      	b.n	803b802 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803b718:	69bb      	ldr	r3, [r7, #24]
 803b71a:	015a      	lsls	r2, r3, #5
 803b71c:	69fb      	ldr	r3, [r7, #28]
 803b71e:	4413      	add	r3, r2
 803b720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b724:	691a      	ldr	r2, [r3, #16]
 803b726:	69bb      	ldr	r3, [r7, #24]
 803b728:	0159      	lsls	r1, r3, #5
 803b72a:	69fb      	ldr	r3, [r7, #28]
 803b72c:	440b      	add	r3, r1
 803b72e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b732:	4619      	mov	r1, r3
 803b734:	4b8c      	ldr	r3, [pc, #560]	; (803b968 <USB_EPStartXfer+0x2e0>)
 803b736:	4013      	ands	r3, r2
 803b738:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803b73a:	69bb      	ldr	r3, [r7, #24]
 803b73c:	015a      	lsls	r2, r3, #5
 803b73e:	69fb      	ldr	r3, [r7, #28]
 803b740:	4413      	add	r3, r2
 803b742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b746:	691a      	ldr	r2, [r3, #16]
 803b748:	69bb      	ldr	r3, [r7, #24]
 803b74a:	0159      	lsls	r1, r3, #5
 803b74c:	69fb      	ldr	r3, [r7, #28]
 803b74e:	440b      	add	r3, r1
 803b750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b754:	4619      	mov	r1, r3
 803b756:	4b83      	ldr	r3, [pc, #524]	; (803b964 <USB_EPStartXfer+0x2dc>)
 803b758:	4013      	ands	r3, r2
 803b75a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 803b75c:	69bb      	ldr	r3, [r7, #24]
 803b75e:	015a      	lsls	r2, r3, #5
 803b760:	69fb      	ldr	r3, [r7, #28]
 803b762:	4413      	add	r3, r2
 803b764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b768:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 803b76a:	68bb      	ldr	r3, [r7, #8]
 803b76c:	6999      	ldr	r1, [r3, #24]
 803b76e:	68bb      	ldr	r3, [r7, #8]
 803b770:	68db      	ldr	r3, [r3, #12]
 803b772:	440b      	add	r3, r1
 803b774:	1e59      	subs	r1, r3, #1
 803b776:	68bb      	ldr	r3, [r7, #8]
 803b778:	68db      	ldr	r3, [r3, #12]
 803b77a:	fbb1 f3f3 	udiv	r3, r1, r3
 803b77e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 803b780:	4b7a      	ldr	r3, [pc, #488]	; (803b96c <USB_EPStartXfer+0x2e4>)
 803b782:	400b      	ands	r3, r1
 803b784:	69b9      	ldr	r1, [r7, #24]
 803b786:	0148      	lsls	r0, r1, #5
 803b788:	69f9      	ldr	r1, [r7, #28]
 803b78a:	4401      	add	r1, r0
 803b78c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803b790:	4313      	orrs	r3, r2
 803b792:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803b794:	69bb      	ldr	r3, [r7, #24]
 803b796:	015a      	lsls	r2, r3, #5
 803b798:	69fb      	ldr	r3, [r7, #28]
 803b79a:	4413      	add	r3, r2
 803b79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b7a0:	691a      	ldr	r2, [r3, #16]
 803b7a2:	68bb      	ldr	r3, [r7, #8]
 803b7a4:	699b      	ldr	r3, [r3, #24]
 803b7a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803b7aa:	69b9      	ldr	r1, [r7, #24]
 803b7ac:	0148      	lsls	r0, r1, #5
 803b7ae:	69f9      	ldr	r1, [r7, #28]
 803b7b0:	4401      	add	r1, r0
 803b7b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803b7b6:	4313      	orrs	r3, r2
 803b7b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 803b7ba:	68bb      	ldr	r3, [r7, #8]
 803b7bc:	791b      	ldrb	r3, [r3, #4]
 803b7be:	2b01      	cmp	r3, #1
 803b7c0:	d11f      	bne.n	803b802 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803b7c2:	69bb      	ldr	r3, [r7, #24]
 803b7c4:	015a      	lsls	r2, r3, #5
 803b7c6:	69fb      	ldr	r3, [r7, #28]
 803b7c8:	4413      	add	r3, r2
 803b7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b7ce:	691b      	ldr	r3, [r3, #16]
 803b7d0:	69ba      	ldr	r2, [r7, #24]
 803b7d2:	0151      	lsls	r1, r2, #5
 803b7d4:	69fa      	ldr	r2, [r7, #28]
 803b7d6:	440a      	add	r2, r1
 803b7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b7dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 803b7e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803b7e2:	69bb      	ldr	r3, [r7, #24]
 803b7e4:	015a      	lsls	r2, r3, #5
 803b7e6:	69fb      	ldr	r3, [r7, #28]
 803b7e8:	4413      	add	r3, r2
 803b7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b7ee:	691b      	ldr	r3, [r3, #16]
 803b7f0:	69ba      	ldr	r2, [r7, #24]
 803b7f2:	0151      	lsls	r1, r2, #5
 803b7f4:	69fa      	ldr	r2, [r7, #28]
 803b7f6:	440a      	add	r2, r1
 803b7f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b7fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803b800:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803b802:	79fb      	ldrb	r3, [r7, #7]
 803b804:	2b01      	cmp	r3, #1
 803b806:	d14b      	bne.n	803b8a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803b808:	68bb      	ldr	r3, [r7, #8]
 803b80a:	695b      	ldr	r3, [r3, #20]
 803b80c:	2b00      	cmp	r3, #0
 803b80e:	d009      	beq.n	803b824 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803b810:	69bb      	ldr	r3, [r7, #24]
 803b812:	015a      	lsls	r2, r3, #5
 803b814:	69fb      	ldr	r3, [r7, #28]
 803b816:	4413      	add	r3, r2
 803b818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b81c:	461a      	mov	r2, r3
 803b81e:	68bb      	ldr	r3, [r7, #8]
 803b820:	695b      	ldr	r3, [r3, #20]
 803b822:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 803b824:	68bb      	ldr	r3, [r7, #8]
 803b826:	791b      	ldrb	r3, [r3, #4]
 803b828:	2b01      	cmp	r3, #1
 803b82a:	d128      	bne.n	803b87e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803b82c:	69fb      	ldr	r3, [r7, #28]
 803b82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b832:	689b      	ldr	r3, [r3, #8]
 803b834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803b838:	2b00      	cmp	r3, #0
 803b83a:	d110      	bne.n	803b85e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803b83c:	69bb      	ldr	r3, [r7, #24]
 803b83e:	015a      	lsls	r2, r3, #5
 803b840:	69fb      	ldr	r3, [r7, #28]
 803b842:	4413      	add	r3, r2
 803b844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b848:	681b      	ldr	r3, [r3, #0]
 803b84a:	69ba      	ldr	r2, [r7, #24]
 803b84c:	0151      	lsls	r1, r2, #5
 803b84e:	69fa      	ldr	r2, [r7, #28]
 803b850:	440a      	add	r2, r1
 803b852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b856:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803b85a:	6013      	str	r3, [r2, #0]
 803b85c:	e00f      	b.n	803b87e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803b85e:	69bb      	ldr	r3, [r7, #24]
 803b860:	015a      	lsls	r2, r3, #5
 803b862:	69fb      	ldr	r3, [r7, #28]
 803b864:	4413      	add	r3, r2
 803b866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b86a:	681b      	ldr	r3, [r3, #0]
 803b86c:	69ba      	ldr	r2, [r7, #24]
 803b86e:	0151      	lsls	r1, r2, #5
 803b870:	69fa      	ldr	r2, [r7, #28]
 803b872:	440a      	add	r2, r1
 803b874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803b87c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803b87e:	69bb      	ldr	r3, [r7, #24]
 803b880:	015a      	lsls	r2, r3, #5
 803b882:	69fb      	ldr	r3, [r7, #28]
 803b884:	4413      	add	r3, r2
 803b886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b88a:	681b      	ldr	r3, [r3, #0]
 803b88c:	69ba      	ldr	r2, [r7, #24]
 803b88e:	0151      	lsls	r1, r2, #5
 803b890:	69fa      	ldr	r2, [r7, #28]
 803b892:	440a      	add	r2, r1
 803b894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b898:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803b89c:	6013      	str	r3, [r2, #0]
 803b89e:	e137      	b.n	803bb10 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803b8a0:	69bb      	ldr	r3, [r7, #24]
 803b8a2:	015a      	lsls	r2, r3, #5
 803b8a4:	69fb      	ldr	r3, [r7, #28]
 803b8a6:	4413      	add	r3, r2
 803b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b8ac:	681b      	ldr	r3, [r3, #0]
 803b8ae:	69ba      	ldr	r2, [r7, #24]
 803b8b0:	0151      	lsls	r1, r2, #5
 803b8b2:	69fa      	ldr	r2, [r7, #28]
 803b8b4:	440a      	add	r2, r1
 803b8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b8ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803b8be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 803b8c0:	68bb      	ldr	r3, [r7, #8]
 803b8c2:	791b      	ldrb	r3, [r3, #4]
 803b8c4:	2b01      	cmp	r3, #1
 803b8c6:	d015      	beq.n	803b8f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 803b8c8:	68bb      	ldr	r3, [r7, #8]
 803b8ca:	699b      	ldr	r3, [r3, #24]
 803b8cc:	2b00      	cmp	r3, #0
 803b8ce:	f000 811f 	beq.w	803bb10 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803b8d2:	69fb      	ldr	r3, [r7, #28]
 803b8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b8d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803b8da:	68bb      	ldr	r3, [r7, #8]
 803b8dc:	781b      	ldrb	r3, [r3, #0]
 803b8de:	f003 030f 	and.w	r3, r3, #15
 803b8e2:	2101      	movs	r1, #1
 803b8e4:	fa01 f303 	lsl.w	r3, r1, r3
 803b8e8:	69f9      	ldr	r1, [r7, #28]
 803b8ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b8ee:	4313      	orrs	r3, r2
 803b8f0:	634b      	str	r3, [r1, #52]	; 0x34
 803b8f2:	e10d      	b.n	803bb10 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803b8f4:	69fb      	ldr	r3, [r7, #28]
 803b8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b8fa:	689b      	ldr	r3, [r3, #8]
 803b8fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803b900:	2b00      	cmp	r3, #0
 803b902:	d110      	bne.n	803b926 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803b904:	69bb      	ldr	r3, [r7, #24]
 803b906:	015a      	lsls	r2, r3, #5
 803b908:	69fb      	ldr	r3, [r7, #28]
 803b90a:	4413      	add	r3, r2
 803b90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b910:	681b      	ldr	r3, [r3, #0]
 803b912:	69ba      	ldr	r2, [r7, #24]
 803b914:	0151      	lsls	r1, r2, #5
 803b916:	69fa      	ldr	r2, [r7, #28]
 803b918:	440a      	add	r2, r1
 803b91a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b91e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803b922:	6013      	str	r3, [r2, #0]
 803b924:	e00f      	b.n	803b946 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803b926:	69bb      	ldr	r3, [r7, #24]
 803b928:	015a      	lsls	r2, r3, #5
 803b92a:	69fb      	ldr	r3, [r7, #28]
 803b92c:	4413      	add	r3, r2
 803b92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b932:	681b      	ldr	r3, [r3, #0]
 803b934:	69ba      	ldr	r2, [r7, #24]
 803b936:	0151      	lsls	r1, r2, #5
 803b938:	69fa      	ldr	r2, [r7, #28]
 803b93a:	440a      	add	r2, r1
 803b93c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803b944:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 803b946:	68bb      	ldr	r3, [r7, #8]
 803b948:	6919      	ldr	r1, [r3, #16]
 803b94a:	68bb      	ldr	r3, [r7, #8]
 803b94c:	781a      	ldrb	r2, [r3, #0]
 803b94e:	68bb      	ldr	r3, [r7, #8]
 803b950:	699b      	ldr	r3, [r3, #24]
 803b952:	b298      	uxth	r0, r3
 803b954:	79fb      	ldrb	r3, [r7, #7]
 803b956:	9300      	str	r3, [sp, #0]
 803b958:	4603      	mov	r3, r0
 803b95a:	68f8      	ldr	r0, [r7, #12]
 803b95c:	f000 faea 	bl	803bf34 <USB_WritePacket>
 803b960:	e0d6      	b.n	803bb10 <USB_EPStartXfer+0x488>
 803b962:	bf00      	nop
 803b964:	e007ffff 	.word	0xe007ffff
 803b968:	fff80000 	.word	0xfff80000
 803b96c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803b970:	69bb      	ldr	r3, [r7, #24]
 803b972:	015a      	lsls	r2, r3, #5
 803b974:	69fb      	ldr	r3, [r7, #28]
 803b976:	4413      	add	r3, r2
 803b978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b97c:	691a      	ldr	r2, [r3, #16]
 803b97e:	69bb      	ldr	r3, [r7, #24]
 803b980:	0159      	lsls	r1, r3, #5
 803b982:	69fb      	ldr	r3, [r7, #28]
 803b984:	440b      	add	r3, r1
 803b986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b98a:	4619      	mov	r1, r3
 803b98c:	4b63      	ldr	r3, [pc, #396]	; (803bb1c <USB_EPStartXfer+0x494>)
 803b98e:	4013      	ands	r3, r2
 803b990:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803b992:	69bb      	ldr	r3, [r7, #24]
 803b994:	015a      	lsls	r2, r3, #5
 803b996:	69fb      	ldr	r3, [r7, #28]
 803b998:	4413      	add	r3, r2
 803b99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b99e:	691a      	ldr	r2, [r3, #16]
 803b9a0:	69bb      	ldr	r3, [r7, #24]
 803b9a2:	0159      	lsls	r1, r3, #5
 803b9a4:	69fb      	ldr	r3, [r7, #28]
 803b9a6:	440b      	add	r3, r1
 803b9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b9ac:	4619      	mov	r1, r3
 803b9ae:	4b5c      	ldr	r3, [pc, #368]	; (803bb20 <USB_EPStartXfer+0x498>)
 803b9b0:	4013      	ands	r3, r2
 803b9b2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 803b9b4:	68bb      	ldr	r3, [r7, #8]
 803b9b6:	699b      	ldr	r3, [r3, #24]
 803b9b8:	2b00      	cmp	r3, #0
 803b9ba:	d123      	bne.n	803ba04 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 803b9bc:	69bb      	ldr	r3, [r7, #24]
 803b9be:	015a      	lsls	r2, r3, #5
 803b9c0:	69fb      	ldr	r3, [r7, #28]
 803b9c2:	4413      	add	r3, r2
 803b9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b9c8:	691a      	ldr	r2, [r3, #16]
 803b9ca:	68bb      	ldr	r3, [r7, #8]
 803b9cc:	68db      	ldr	r3, [r3, #12]
 803b9ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803b9d2:	69b9      	ldr	r1, [r7, #24]
 803b9d4:	0148      	lsls	r0, r1, #5
 803b9d6:	69f9      	ldr	r1, [r7, #28]
 803b9d8:	4401      	add	r1, r0
 803b9da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803b9de:	4313      	orrs	r3, r2
 803b9e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803b9e2:	69bb      	ldr	r3, [r7, #24]
 803b9e4:	015a      	lsls	r2, r3, #5
 803b9e6:	69fb      	ldr	r3, [r7, #28]
 803b9e8:	4413      	add	r3, r2
 803b9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b9ee:	691b      	ldr	r3, [r3, #16]
 803b9f0:	69ba      	ldr	r2, [r7, #24]
 803b9f2:	0151      	lsls	r1, r2, #5
 803b9f4:	69fa      	ldr	r2, [r7, #28]
 803b9f6:	440a      	add	r2, r1
 803b9f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803b9fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803ba00:	6113      	str	r3, [r2, #16]
 803ba02:	e037      	b.n	803ba74 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 803ba04:	68bb      	ldr	r3, [r7, #8]
 803ba06:	699a      	ldr	r2, [r3, #24]
 803ba08:	68bb      	ldr	r3, [r7, #8]
 803ba0a:	68db      	ldr	r3, [r3, #12]
 803ba0c:	4413      	add	r3, r2
 803ba0e:	1e5a      	subs	r2, r3, #1
 803ba10:	68bb      	ldr	r3, [r7, #8]
 803ba12:	68db      	ldr	r3, [r3, #12]
 803ba14:	fbb2 f3f3 	udiv	r3, r2, r3
 803ba18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 803ba1a:	68bb      	ldr	r3, [r7, #8]
 803ba1c:	68db      	ldr	r3, [r3, #12]
 803ba1e:	8afa      	ldrh	r2, [r7, #22]
 803ba20:	fb03 f202 	mul.w	r2, r3, r2
 803ba24:	68bb      	ldr	r3, [r7, #8]
 803ba26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 803ba28:	69bb      	ldr	r3, [r7, #24]
 803ba2a:	015a      	lsls	r2, r3, #5
 803ba2c:	69fb      	ldr	r3, [r7, #28]
 803ba2e:	4413      	add	r3, r2
 803ba30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803ba34:	691a      	ldr	r2, [r3, #16]
 803ba36:	8afb      	ldrh	r3, [r7, #22]
 803ba38:	04d9      	lsls	r1, r3, #19
 803ba3a:	4b3a      	ldr	r3, [pc, #232]	; (803bb24 <USB_EPStartXfer+0x49c>)
 803ba3c:	400b      	ands	r3, r1
 803ba3e:	69b9      	ldr	r1, [r7, #24]
 803ba40:	0148      	lsls	r0, r1, #5
 803ba42:	69f9      	ldr	r1, [r7, #28]
 803ba44:	4401      	add	r1, r0
 803ba46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803ba4a:	4313      	orrs	r3, r2
 803ba4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 803ba4e:	69bb      	ldr	r3, [r7, #24]
 803ba50:	015a      	lsls	r2, r3, #5
 803ba52:	69fb      	ldr	r3, [r7, #28]
 803ba54:	4413      	add	r3, r2
 803ba56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803ba5a:	691a      	ldr	r2, [r3, #16]
 803ba5c:	68bb      	ldr	r3, [r7, #8]
 803ba5e:	69db      	ldr	r3, [r3, #28]
 803ba60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803ba64:	69b9      	ldr	r1, [r7, #24]
 803ba66:	0148      	lsls	r0, r1, #5
 803ba68:	69f9      	ldr	r1, [r7, #28]
 803ba6a:	4401      	add	r1, r0
 803ba6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803ba70:	4313      	orrs	r3, r2
 803ba72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 803ba74:	79fb      	ldrb	r3, [r7, #7]
 803ba76:	2b01      	cmp	r3, #1
 803ba78:	d10d      	bne.n	803ba96 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803ba7a:	68bb      	ldr	r3, [r7, #8]
 803ba7c:	691b      	ldr	r3, [r3, #16]
 803ba7e:	2b00      	cmp	r3, #0
 803ba80:	d009      	beq.n	803ba96 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803ba82:	68bb      	ldr	r3, [r7, #8]
 803ba84:	6919      	ldr	r1, [r3, #16]
 803ba86:	69bb      	ldr	r3, [r7, #24]
 803ba88:	015a      	lsls	r2, r3, #5
 803ba8a:	69fb      	ldr	r3, [r7, #28]
 803ba8c:	4413      	add	r3, r2
 803ba8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803ba92:	460a      	mov	r2, r1
 803ba94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 803ba96:	68bb      	ldr	r3, [r7, #8]
 803ba98:	791b      	ldrb	r3, [r3, #4]
 803ba9a:	2b01      	cmp	r3, #1
 803ba9c:	d128      	bne.n	803baf0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803ba9e:	69fb      	ldr	r3, [r7, #28]
 803baa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803baa4:	689b      	ldr	r3, [r3, #8]
 803baa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803baaa:	2b00      	cmp	r3, #0
 803baac:	d110      	bne.n	803bad0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 803baae:	69bb      	ldr	r3, [r7, #24]
 803bab0:	015a      	lsls	r2, r3, #5
 803bab2:	69fb      	ldr	r3, [r7, #28]
 803bab4:	4413      	add	r3, r2
 803bab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803baba:	681b      	ldr	r3, [r3, #0]
 803babc:	69ba      	ldr	r2, [r7, #24]
 803babe:	0151      	lsls	r1, r2, #5
 803bac0:	69fa      	ldr	r2, [r7, #28]
 803bac2:	440a      	add	r2, r1
 803bac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803bacc:	6013      	str	r3, [r2, #0]
 803bace:	e00f      	b.n	803baf0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 803bad0:	69bb      	ldr	r3, [r7, #24]
 803bad2:	015a      	lsls	r2, r3, #5
 803bad4:	69fb      	ldr	r3, [r7, #28]
 803bad6:	4413      	add	r3, r2
 803bad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803badc:	681b      	ldr	r3, [r3, #0]
 803bade:	69ba      	ldr	r2, [r7, #24]
 803bae0:	0151      	lsls	r1, r2, #5
 803bae2:	69fa      	ldr	r2, [r7, #28]
 803bae4:	440a      	add	r2, r1
 803bae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803baea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803baee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803baf0:	69bb      	ldr	r3, [r7, #24]
 803baf2:	015a      	lsls	r2, r3, #5
 803baf4:	69fb      	ldr	r3, [r7, #28]
 803baf6:	4413      	add	r3, r2
 803baf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bafc:	681b      	ldr	r3, [r3, #0]
 803bafe:	69ba      	ldr	r2, [r7, #24]
 803bb00:	0151      	lsls	r1, r2, #5
 803bb02:	69fa      	ldr	r2, [r7, #28]
 803bb04:	440a      	add	r2, r1
 803bb06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bb0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803bb0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803bb10:	2300      	movs	r3, #0
}
 803bb12:	4618      	mov	r0, r3
 803bb14:	3720      	adds	r7, #32
 803bb16:	46bd      	mov	sp, r7
 803bb18:	bd80      	pop	{r7, pc}
 803bb1a:	bf00      	nop
 803bb1c:	fff80000 	.word	0xfff80000
 803bb20:	e007ffff 	.word	0xe007ffff
 803bb24:	1ff80000 	.word	0x1ff80000

0803bb28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803bb28:	b480      	push	{r7}
 803bb2a:	b087      	sub	sp, #28
 803bb2c:	af00      	add	r7, sp, #0
 803bb2e:	60f8      	str	r0, [r7, #12]
 803bb30:	60b9      	str	r1, [r7, #8]
 803bb32:	4613      	mov	r3, r2
 803bb34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803bb36:	68fb      	ldr	r3, [r7, #12]
 803bb38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 803bb3a:	68bb      	ldr	r3, [r7, #8]
 803bb3c:	781b      	ldrb	r3, [r3, #0]
 803bb3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803bb40:	68bb      	ldr	r3, [r7, #8]
 803bb42:	785b      	ldrb	r3, [r3, #1]
 803bb44:	2b01      	cmp	r3, #1
 803bb46:	f040 80ce 	bne.w	803bce6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803bb4a:	68bb      	ldr	r3, [r7, #8]
 803bb4c:	699b      	ldr	r3, [r3, #24]
 803bb4e:	2b00      	cmp	r3, #0
 803bb50:	d132      	bne.n	803bbb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803bb52:	693b      	ldr	r3, [r7, #16]
 803bb54:	015a      	lsls	r2, r3, #5
 803bb56:	697b      	ldr	r3, [r7, #20]
 803bb58:	4413      	add	r3, r2
 803bb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bb5e:	691a      	ldr	r2, [r3, #16]
 803bb60:	693b      	ldr	r3, [r7, #16]
 803bb62:	0159      	lsls	r1, r3, #5
 803bb64:	697b      	ldr	r3, [r7, #20]
 803bb66:	440b      	add	r3, r1
 803bb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bb6c:	4619      	mov	r1, r3
 803bb6e:	4b9a      	ldr	r3, [pc, #616]	; (803bdd8 <USB_EP0StartXfer+0x2b0>)
 803bb70:	4013      	ands	r3, r2
 803bb72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803bb74:	693b      	ldr	r3, [r7, #16]
 803bb76:	015a      	lsls	r2, r3, #5
 803bb78:	697b      	ldr	r3, [r7, #20]
 803bb7a:	4413      	add	r3, r2
 803bb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bb80:	691b      	ldr	r3, [r3, #16]
 803bb82:	693a      	ldr	r2, [r7, #16]
 803bb84:	0151      	lsls	r1, r2, #5
 803bb86:	697a      	ldr	r2, [r7, #20]
 803bb88:	440a      	add	r2, r1
 803bb8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bb8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803bb92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803bb94:	693b      	ldr	r3, [r7, #16]
 803bb96:	015a      	lsls	r2, r3, #5
 803bb98:	697b      	ldr	r3, [r7, #20]
 803bb9a:	4413      	add	r3, r2
 803bb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bba0:	691a      	ldr	r2, [r3, #16]
 803bba2:	693b      	ldr	r3, [r7, #16]
 803bba4:	0159      	lsls	r1, r3, #5
 803bba6:	697b      	ldr	r3, [r7, #20]
 803bba8:	440b      	add	r3, r1
 803bbaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbae:	4619      	mov	r1, r3
 803bbb0:	4b8a      	ldr	r3, [pc, #552]	; (803bddc <USB_EP0StartXfer+0x2b4>)
 803bbb2:	4013      	ands	r3, r2
 803bbb4:	610b      	str	r3, [r1, #16]
 803bbb6:	e04e      	b.n	803bc56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803bbb8:	693b      	ldr	r3, [r7, #16]
 803bbba:	015a      	lsls	r2, r3, #5
 803bbbc:	697b      	ldr	r3, [r7, #20]
 803bbbe:	4413      	add	r3, r2
 803bbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbc4:	691a      	ldr	r2, [r3, #16]
 803bbc6:	693b      	ldr	r3, [r7, #16]
 803bbc8:	0159      	lsls	r1, r3, #5
 803bbca:	697b      	ldr	r3, [r7, #20]
 803bbcc:	440b      	add	r3, r1
 803bbce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbd2:	4619      	mov	r1, r3
 803bbd4:	4b81      	ldr	r3, [pc, #516]	; (803bddc <USB_EP0StartXfer+0x2b4>)
 803bbd6:	4013      	ands	r3, r2
 803bbd8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803bbda:	693b      	ldr	r3, [r7, #16]
 803bbdc:	015a      	lsls	r2, r3, #5
 803bbde:	697b      	ldr	r3, [r7, #20]
 803bbe0:	4413      	add	r3, r2
 803bbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbe6:	691a      	ldr	r2, [r3, #16]
 803bbe8:	693b      	ldr	r3, [r7, #16]
 803bbea:	0159      	lsls	r1, r3, #5
 803bbec:	697b      	ldr	r3, [r7, #20]
 803bbee:	440b      	add	r3, r1
 803bbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbf4:	4619      	mov	r1, r3
 803bbf6:	4b78      	ldr	r3, [pc, #480]	; (803bdd8 <USB_EP0StartXfer+0x2b0>)
 803bbf8:	4013      	ands	r3, r2
 803bbfa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 803bbfc:	68bb      	ldr	r3, [r7, #8]
 803bbfe:	699a      	ldr	r2, [r3, #24]
 803bc00:	68bb      	ldr	r3, [r7, #8]
 803bc02:	68db      	ldr	r3, [r3, #12]
 803bc04:	429a      	cmp	r2, r3
 803bc06:	d903      	bls.n	803bc10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 803bc08:	68bb      	ldr	r3, [r7, #8]
 803bc0a:	68da      	ldr	r2, [r3, #12]
 803bc0c:	68bb      	ldr	r3, [r7, #8]
 803bc0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803bc10:	693b      	ldr	r3, [r7, #16]
 803bc12:	015a      	lsls	r2, r3, #5
 803bc14:	697b      	ldr	r3, [r7, #20]
 803bc16:	4413      	add	r3, r2
 803bc18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc1c:	691b      	ldr	r3, [r3, #16]
 803bc1e:	693a      	ldr	r2, [r7, #16]
 803bc20:	0151      	lsls	r1, r2, #5
 803bc22:	697a      	ldr	r2, [r7, #20]
 803bc24:	440a      	add	r2, r1
 803bc26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bc2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803bc2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803bc30:	693b      	ldr	r3, [r7, #16]
 803bc32:	015a      	lsls	r2, r3, #5
 803bc34:	697b      	ldr	r3, [r7, #20]
 803bc36:	4413      	add	r3, r2
 803bc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc3c:	691a      	ldr	r2, [r3, #16]
 803bc3e:	68bb      	ldr	r3, [r7, #8]
 803bc40:	699b      	ldr	r3, [r3, #24]
 803bc42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803bc46:	6939      	ldr	r1, [r7, #16]
 803bc48:	0148      	lsls	r0, r1, #5
 803bc4a:	6979      	ldr	r1, [r7, #20]
 803bc4c:	4401      	add	r1, r0
 803bc4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803bc52:	4313      	orrs	r3, r2
 803bc54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 803bc56:	79fb      	ldrb	r3, [r7, #7]
 803bc58:	2b01      	cmp	r3, #1
 803bc5a:	d11e      	bne.n	803bc9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803bc5c:	68bb      	ldr	r3, [r7, #8]
 803bc5e:	695b      	ldr	r3, [r3, #20]
 803bc60:	2b00      	cmp	r3, #0
 803bc62:	d009      	beq.n	803bc78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803bc64:	693b      	ldr	r3, [r7, #16]
 803bc66:	015a      	lsls	r2, r3, #5
 803bc68:	697b      	ldr	r3, [r7, #20]
 803bc6a:	4413      	add	r3, r2
 803bc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc70:	461a      	mov	r2, r3
 803bc72:	68bb      	ldr	r3, [r7, #8]
 803bc74:	695b      	ldr	r3, [r3, #20]
 803bc76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803bc78:	693b      	ldr	r3, [r7, #16]
 803bc7a:	015a      	lsls	r2, r3, #5
 803bc7c:	697b      	ldr	r3, [r7, #20]
 803bc7e:	4413      	add	r3, r2
 803bc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc84:	681b      	ldr	r3, [r3, #0]
 803bc86:	693a      	ldr	r2, [r7, #16]
 803bc88:	0151      	lsls	r1, r2, #5
 803bc8a:	697a      	ldr	r2, [r7, #20]
 803bc8c:	440a      	add	r2, r1
 803bc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bc92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803bc96:	6013      	str	r3, [r2, #0]
 803bc98:	e097      	b.n	803bdca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803bc9a:	693b      	ldr	r3, [r7, #16]
 803bc9c:	015a      	lsls	r2, r3, #5
 803bc9e:	697b      	ldr	r3, [r7, #20]
 803bca0:	4413      	add	r3, r2
 803bca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bca6:	681b      	ldr	r3, [r3, #0]
 803bca8:	693a      	ldr	r2, [r7, #16]
 803bcaa:	0151      	lsls	r1, r2, #5
 803bcac:	697a      	ldr	r2, [r7, #20]
 803bcae:	440a      	add	r2, r1
 803bcb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bcb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803bcb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 803bcba:	68bb      	ldr	r3, [r7, #8]
 803bcbc:	699b      	ldr	r3, [r3, #24]
 803bcbe:	2b00      	cmp	r3, #0
 803bcc0:	f000 8083 	beq.w	803bdca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803bcc4:	697b      	ldr	r3, [r7, #20]
 803bcc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803bcca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803bccc:	68bb      	ldr	r3, [r7, #8]
 803bcce:	781b      	ldrb	r3, [r3, #0]
 803bcd0:	f003 030f 	and.w	r3, r3, #15
 803bcd4:	2101      	movs	r1, #1
 803bcd6:	fa01 f303 	lsl.w	r3, r1, r3
 803bcda:	6979      	ldr	r1, [r7, #20]
 803bcdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803bce0:	4313      	orrs	r3, r2
 803bce2:	634b      	str	r3, [r1, #52]	; 0x34
 803bce4:	e071      	b.n	803bdca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803bce6:	693b      	ldr	r3, [r7, #16]
 803bce8:	015a      	lsls	r2, r3, #5
 803bcea:	697b      	ldr	r3, [r7, #20]
 803bcec:	4413      	add	r3, r2
 803bcee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bcf2:	691a      	ldr	r2, [r3, #16]
 803bcf4:	693b      	ldr	r3, [r7, #16]
 803bcf6:	0159      	lsls	r1, r3, #5
 803bcf8:	697b      	ldr	r3, [r7, #20]
 803bcfa:	440b      	add	r3, r1
 803bcfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bd00:	4619      	mov	r1, r3
 803bd02:	4b36      	ldr	r3, [pc, #216]	; (803bddc <USB_EP0StartXfer+0x2b4>)
 803bd04:	4013      	ands	r3, r2
 803bd06:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803bd08:	693b      	ldr	r3, [r7, #16]
 803bd0a:	015a      	lsls	r2, r3, #5
 803bd0c:	697b      	ldr	r3, [r7, #20]
 803bd0e:	4413      	add	r3, r2
 803bd10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bd14:	691a      	ldr	r2, [r3, #16]
 803bd16:	693b      	ldr	r3, [r7, #16]
 803bd18:	0159      	lsls	r1, r3, #5
 803bd1a:	697b      	ldr	r3, [r7, #20]
 803bd1c:	440b      	add	r3, r1
 803bd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bd22:	4619      	mov	r1, r3
 803bd24:	4b2c      	ldr	r3, [pc, #176]	; (803bdd8 <USB_EP0StartXfer+0x2b0>)
 803bd26:	4013      	ands	r3, r2
 803bd28:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 803bd2a:	68bb      	ldr	r3, [r7, #8]
 803bd2c:	699b      	ldr	r3, [r3, #24]
 803bd2e:	2b00      	cmp	r3, #0
 803bd30:	d003      	beq.n	803bd3a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 803bd32:	68bb      	ldr	r3, [r7, #8]
 803bd34:	68da      	ldr	r2, [r3, #12]
 803bd36:	68bb      	ldr	r3, [r7, #8]
 803bd38:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 803bd3a:	68bb      	ldr	r3, [r7, #8]
 803bd3c:	68da      	ldr	r2, [r3, #12]
 803bd3e:	68bb      	ldr	r3, [r7, #8]
 803bd40:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803bd42:	693b      	ldr	r3, [r7, #16]
 803bd44:	015a      	lsls	r2, r3, #5
 803bd46:	697b      	ldr	r3, [r7, #20]
 803bd48:	4413      	add	r3, r2
 803bd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bd4e:	691b      	ldr	r3, [r3, #16]
 803bd50:	693a      	ldr	r2, [r7, #16]
 803bd52:	0151      	lsls	r1, r2, #5
 803bd54:	697a      	ldr	r2, [r7, #20]
 803bd56:	440a      	add	r2, r1
 803bd58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bd5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803bd60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 803bd62:	693b      	ldr	r3, [r7, #16]
 803bd64:	015a      	lsls	r2, r3, #5
 803bd66:	697b      	ldr	r3, [r7, #20]
 803bd68:	4413      	add	r3, r2
 803bd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bd6e:	691a      	ldr	r2, [r3, #16]
 803bd70:	68bb      	ldr	r3, [r7, #8]
 803bd72:	69db      	ldr	r3, [r3, #28]
 803bd74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803bd78:	6939      	ldr	r1, [r7, #16]
 803bd7a:	0148      	lsls	r0, r1, #5
 803bd7c:	6979      	ldr	r1, [r7, #20]
 803bd7e:	4401      	add	r1, r0
 803bd80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803bd84:	4313      	orrs	r3, r2
 803bd86:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 803bd88:	79fb      	ldrb	r3, [r7, #7]
 803bd8a:	2b01      	cmp	r3, #1
 803bd8c:	d10d      	bne.n	803bdaa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803bd8e:	68bb      	ldr	r3, [r7, #8]
 803bd90:	691b      	ldr	r3, [r3, #16]
 803bd92:	2b00      	cmp	r3, #0
 803bd94:	d009      	beq.n	803bdaa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803bd96:	68bb      	ldr	r3, [r7, #8]
 803bd98:	6919      	ldr	r1, [r3, #16]
 803bd9a:	693b      	ldr	r3, [r7, #16]
 803bd9c:	015a      	lsls	r2, r3, #5
 803bd9e:	697b      	ldr	r3, [r7, #20]
 803bda0:	4413      	add	r3, r2
 803bda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bda6:	460a      	mov	r2, r1
 803bda8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803bdaa:	693b      	ldr	r3, [r7, #16]
 803bdac:	015a      	lsls	r2, r3, #5
 803bdae:	697b      	ldr	r3, [r7, #20]
 803bdb0:	4413      	add	r3, r2
 803bdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bdb6:	681b      	ldr	r3, [r3, #0]
 803bdb8:	693a      	ldr	r2, [r7, #16]
 803bdba:	0151      	lsls	r1, r2, #5
 803bdbc:	697a      	ldr	r2, [r7, #20]
 803bdbe:	440a      	add	r2, r1
 803bdc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bdc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803bdc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803bdca:	2300      	movs	r3, #0
}
 803bdcc:	4618      	mov	r0, r3
 803bdce:	371c      	adds	r7, #28
 803bdd0:	46bd      	mov	sp, r7
 803bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bdd6:	4770      	bx	lr
 803bdd8:	e007ffff 	.word	0xe007ffff
 803bddc:	fff80000 	.word	0xfff80000

0803bde0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803bde0:	b480      	push	{r7}
 803bde2:	b087      	sub	sp, #28
 803bde4:	af00      	add	r7, sp, #0
 803bde6:	6078      	str	r0, [r7, #4]
 803bde8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803bdea:	2300      	movs	r3, #0
 803bdec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 803bdee:	2300      	movs	r3, #0
 803bdf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803bdf2:	687b      	ldr	r3, [r7, #4]
 803bdf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803bdf6:	683b      	ldr	r3, [r7, #0]
 803bdf8:	785b      	ldrb	r3, [r3, #1]
 803bdfa:	2b01      	cmp	r3, #1
 803bdfc:	d14a      	bne.n	803be94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803bdfe:	683b      	ldr	r3, [r7, #0]
 803be00:	781b      	ldrb	r3, [r3, #0]
 803be02:	015a      	lsls	r2, r3, #5
 803be04:	693b      	ldr	r3, [r7, #16]
 803be06:	4413      	add	r3, r2
 803be08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803be0c:	681b      	ldr	r3, [r3, #0]
 803be0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803be12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803be16:	f040 8086 	bne.w	803bf26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 803be1a:	683b      	ldr	r3, [r7, #0]
 803be1c:	781b      	ldrb	r3, [r3, #0]
 803be1e:	015a      	lsls	r2, r3, #5
 803be20:	693b      	ldr	r3, [r7, #16]
 803be22:	4413      	add	r3, r2
 803be24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803be28:	681b      	ldr	r3, [r3, #0]
 803be2a:	683a      	ldr	r2, [r7, #0]
 803be2c:	7812      	ldrb	r2, [r2, #0]
 803be2e:	0151      	lsls	r1, r2, #5
 803be30:	693a      	ldr	r2, [r7, #16]
 803be32:	440a      	add	r2, r1
 803be34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803be38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803be3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 803be3e:	683b      	ldr	r3, [r7, #0]
 803be40:	781b      	ldrb	r3, [r3, #0]
 803be42:	015a      	lsls	r2, r3, #5
 803be44:	693b      	ldr	r3, [r7, #16]
 803be46:	4413      	add	r3, r2
 803be48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803be4c:	681b      	ldr	r3, [r3, #0]
 803be4e:	683a      	ldr	r2, [r7, #0]
 803be50:	7812      	ldrb	r2, [r2, #0]
 803be52:	0151      	lsls	r1, r2, #5
 803be54:	693a      	ldr	r2, [r7, #16]
 803be56:	440a      	add	r2, r1
 803be58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803be5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803be60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803be62:	68fb      	ldr	r3, [r7, #12]
 803be64:	3301      	adds	r3, #1
 803be66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803be68:	68fb      	ldr	r3, [r7, #12]
 803be6a:	f242 7210 	movw	r2, #10000	; 0x2710
 803be6e:	4293      	cmp	r3, r2
 803be70:	d902      	bls.n	803be78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 803be72:	2301      	movs	r3, #1
 803be74:	75fb      	strb	r3, [r7, #23]
          break;
 803be76:	e056      	b.n	803bf26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 803be78:	683b      	ldr	r3, [r7, #0]
 803be7a:	781b      	ldrb	r3, [r3, #0]
 803be7c:	015a      	lsls	r2, r3, #5
 803be7e:	693b      	ldr	r3, [r7, #16]
 803be80:	4413      	add	r3, r2
 803be82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803be86:	681b      	ldr	r3, [r3, #0]
 803be88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803be8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803be90:	d0e7      	beq.n	803be62 <USB_EPStopXfer+0x82>
 803be92:	e048      	b.n	803bf26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803be94:	683b      	ldr	r3, [r7, #0]
 803be96:	781b      	ldrb	r3, [r3, #0]
 803be98:	015a      	lsls	r2, r3, #5
 803be9a:	693b      	ldr	r3, [r7, #16]
 803be9c:	4413      	add	r3, r2
 803be9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bea2:	681b      	ldr	r3, [r3, #0]
 803bea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803bea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803beac:	d13b      	bne.n	803bf26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 803beae:	683b      	ldr	r3, [r7, #0]
 803beb0:	781b      	ldrb	r3, [r3, #0]
 803beb2:	015a      	lsls	r2, r3, #5
 803beb4:	693b      	ldr	r3, [r7, #16]
 803beb6:	4413      	add	r3, r2
 803beb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bebc:	681b      	ldr	r3, [r3, #0]
 803bebe:	683a      	ldr	r2, [r7, #0]
 803bec0:	7812      	ldrb	r2, [r2, #0]
 803bec2:	0151      	lsls	r1, r2, #5
 803bec4:	693a      	ldr	r2, [r7, #16]
 803bec6:	440a      	add	r2, r1
 803bec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803becc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803bed0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 803bed2:	683b      	ldr	r3, [r7, #0]
 803bed4:	781b      	ldrb	r3, [r3, #0]
 803bed6:	015a      	lsls	r2, r3, #5
 803bed8:	693b      	ldr	r3, [r7, #16]
 803beda:	4413      	add	r3, r2
 803bedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bee0:	681b      	ldr	r3, [r3, #0]
 803bee2:	683a      	ldr	r2, [r7, #0]
 803bee4:	7812      	ldrb	r2, [r2, #0]
 803bee6:	0151      	lsls	r1, r2, #5
 803bee8:	693a      	ldr	r2, [r7, #16]
 803beea:	440a      	add	r2, r1
 803beec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803bef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803bef6:	68fb      	ldr	r3, [r7, #12]
 803bef8:	3301      	adds	r3, #1
 803befa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803befc:	68fb      	ldr	r3, [r7, #12]
 803befe:	f242 7210 	movw	r2, #10000	; 0x2710
 803bf02:	4293      	cmp	r3, r2
 803bf04:	d902      	bls.n	803bf0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 803bf06:	2301      	movs	r3, #1
 803bf08:	75fb      	strb	r3, [r7, #23]
          break;
 803bf0a:	e00c      	b.n	803bf26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 803bf0c:	683b      	ldr	r3, [r7, #0]
 803bf0e:	781b      	ldrb	r3, [r3, #0]
 803bf10:	015a      	lsls	r2, r3, #5
 803bf12:	693b      	ldr	r3, [r7, #16]
 803bf14:	4413      	add	r3, r2
 803bf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bf1a:	681b      	ldr	r3, [r3, #0]
 803bf1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803bf20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803bf24:	d0e7      	beq.n	803bef6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 803bf26:	7dfb      	ldrb	r3, [r7, #23]
}
 803bf28:	4618      	mov	r0, r3
 803bf2a:	371c      	adds	r7, #28
 803bf2c:	46bd      	mov	sp, r7
 803bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bf32:	4770      	bx	lr

0803bf34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 803bf34:	b480      	push	{r7}
 803bf36:	b089      	sub	sp, #36	; 0x24
 803bf38:	af00      	add	r7, sp, #0
 803bf3a:	60f8      	str	r0, [r7, #12]
 803bf3c:	60b9      	str	r1, [r7, #8]
 803bf3e:	4611      	mov	r1, r2
 803bf40:	461a      	mov	r2, r3
 803bf42:	460b      	mov	r3, r1
 803bf44:	71fb      	strb	r3, [r7, #7]
 803bf46:	4613      	mov	r3, r2
 803bf48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803bf4a:	68fb      	ldr	r3, [r7, #12]
 803bf4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 803bf4e:	68bb      	ldr	r3, [r7, #8]
 803bf50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 803bf52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 803bf56:	2b00      	cmp	r3, #0
 803bf58:	d123      	bne.n	803bfa2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 803bf5a:	88bb      	ldrh	r3, [r7, #4]
 803bf5c:	3303      	adds	r3, #3
 803bf5e:	089b      	lsrs	r3, r3, #2
 803bf60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 803bf62:	2300      	movs	r3, #0
 803bf64:	61bb      	str	r3, [r7, #24]
 803bf66:	e018      	b.n	803bf9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 803bf68:	79fb      	ldrb	r3, [r7, #7]
 803bf6a:	031a      	lsls	r2, r3, #12
 803bf6c:	697b      	ldr	r3, [r7, #20]
 803bf6e:	4413      	add	r3, r2
 803bf70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803bf74:	461a      	mov	r2, r3
 803bf76:	69fb      	ldr	r3, [r7, #28]
 803bf78:	681b      	ldr	r3, [r3, #0]
 803bf7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 803bf7c:	69fb      	ldr	r3, [r7, #28]
 803bf7e:	3301      	adds	r3, #1
 803bf80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803bf82:	69fb      	ldr	r3, [r7, #28]
 803bf84:	3301      	adds	r3, #1
 803bf86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803bf88:	69fb      	ldr	r3, [r7, #28]
 803bf8a:	3301      	adds	r3, #1
 803bf8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803bf8e:	69fb      	ldr	r3, [r7, #28]
 803bf90:	3301      	adds	r3, #1
 803bf92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 803bf94:	69bb      	ldr	r3, [r7, #24]
 803bf96:	3301      	adds	r3, #1
 803bf98:	61bb      	str	r3, [r7, #24]
 803bf9a:	69ba      	ldr	r2, [r7, #24]
 803bf9c:	693b      	ldr	r3, [r7, #16]
 803bf9e:	429a      	cmp	r2, r3
 803bfa0:	d3e2      	bcc.n	803bf68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 803bfa2:	2300      	movs	r3, #0
}
 803bfa4:	4618      	mov	r0, r3
 803bfa6:	3724      	adds	r7, #36	; 0x24
 803bfa8:	46bd      	mov	sp, r7
 803bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bfae:	4770      	bx	lr

0803bfb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 803bfb0:	b480      	push	{r7}
 803bfb2:	b08b      	sub	sp, #44	; 0x2c
 803bfb4:	af00      	add	r7, sp, #0
 803bfb6:	60f8      	str	r0, [r7, #12]
 803bfb8:	60b9      	str	r1, [r7, #8]
 803bfba:	4613      	mov	r3, r2
 803bfbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803bfbe:	68fb      	ldr	r3, [r7, #12]
 803bfc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 803bfc2:	68bb      	ldr	r3, [r7, #8]
 803bfc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 803bfc6:	88fb      	ldrh	r3, [r7, #6]
 803bfc8:	089b      	lsrs	r3, r3, #2
 803bfca:	b29b      	uxth	r3, r3
 803bfcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 803bfce:	88fb      	ldrh	r3, [r7, #6]
 803bfd0:	f003 0303 	and.w	r3, r3, #3
 803bfd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 803bfd6:	2300      	movs	r3, #0
 803bfd8:	623b      	str	r3, [r7, #32]
 803bfda:	e014      	b.n	803c006 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 803bfdc:	69bb      	ldr	r3, [r7, #24]
 803bfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803bfe2:	681a      	ldr	r2, [r3, #0]
 803bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803bfe6:	601a      	str	r2, [r3, #0]
    pDest++;
 803bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803bfea:	3301      	adds	r3, #1
 803bfec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803bff0:	3301      	adds	r3, #1
 803bff2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803bff6:	3301      	adds	r3, #1
 803bff8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803bffc:	3301      	adds	r3, #1
 803bffe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 803c000:	6a3b      	ldr	r3, [r7, #32]
 803c002:	3301      	adds	r3, #1
 803c004:	623b      	str	r3, [r7, #32]
 803c006:	6a3a      	ldr	r2, [r7, #32]
 803c008:	697b      	ldr	r3, [r7, #20]
 803c00a:	429a      	cmp	r2, r3
 803c00c:	d3e6      	bcc.n	803bfdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 803c00e:	8bfb      	ldrh	r3, [r7, #30]
 803c010:	2b00      	cmp	r3, #0
 803c012:	d01e      	beq.n	803c052 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 803c014:	2300      	movs	r3, #0
 803c016:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 803c018:	69bb      	ldr	r3, [r7, #24]
 803c01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803c01e:	461a      	mov	r2, r3
 803c020:	f107 0310 	add.w	r3, r7, #16
 803c024:	6812      	ldr	r2, [r2, #0]
 803c026:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 803c028:	693a      	ldr	r2, [r7, #16]
 803c02a:	6a3b      	ldr	r3, [r7, #32]
 803c02c:	b2db      	uxtb	r3, r3
 803c02e:	00db      	lsls	r3, r3, #3
 803c030:	fa22 f303 	lsr.w	r3, r2, r3
 803c034:	b2da      	uxtb	r2, r3
 803c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c038:	701a      	strb	r2, [r3, #0]
      i++;
 803c03a:	6a3b      	ldr	r3, [r7, #32]
 803c03c:	3301      	adds	r3, #1
 803c03e:	623b      	str	r3, [r7, #32]
      pDest++;
 803c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c042:	3301      	adds	r3, #1
 803c044:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 803c046:	8bfb      	ldrh	r3, [r7, #30]
 803c048:	3b01      	subs	r3, #1
 803c04a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 803c04c:	8bfb      	ldrh	r3, [r7, #30]
 803c04e:	2b00      	cmp	r3, #0
 803c050:	d1ea      	bne.n	803c028 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 803c052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803c054:	4618      	mov	r0, r3
 803c056:	372c      	adds	r7, #44	; 0x2c
 803c058:	46bd      	mov	sp, r7
 803c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c05e:	4770      	bx	lr

0803c060 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803c060:	b480      	push	{r7}
 803c062:	b085      	sub	sp, #20
 803c064:	af00      	add	r7, sp, #0
 803c066:	6078      	str	r0, [r7, #4]
 803c068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c06a:	687b      	ldr	r3, [r7, #4]
 803c06c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803c06e:	683b      	ldr	r3, [r7, #0]
 803c070:	781b      	ldrb	r3, [r3, #0]
 803c072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803c074:	683b      	ldr	r3, [r7, #0]
 803c076:	785b      	ldrb	r3, [r3, #1]
 803c078:	2b01      	cmp	r3, #1
 803c07a:	d12c      	bne.n	803c0d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 803c07c:	68bb      	ldr	r3, [r7, #8]
 803c07e:	015a      	lsls	r2, r3, #5
 803c080:	68fb      	ldr	r3, [r7, #12]
 803c082:	4413      	add	r3, r2
 803c084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c088:	681b      	ldr	r3, [r3, #0]
 803c08a:	2b00      	cmp	r3, #0
 803c08c:	db12      	blt.n	803c0b4 <USB_EPSetStall+0x54>
 803c08e:	68bb      	ldr	r3, [r7, #8]
 803c090:	2b00      	cmp	r3, #0
 803c092:	d00f      	beq.n	803c0b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 803c094:	68bb      	ldr	r3, [r7, #8]
 803c096:	015a      	lsls	r2, r3, #5
 803c098:	68fb      	ldr	r3, [r7, #12]
 803c09a:	4413      	add	r3, r2
 803c09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c0a0:	681b      	ldr	r3, [r3, #0]
 803c0a2:	68ba      	ldr	r2, [r7, #8]
 803c0a4:	0151      	lsls	r1, r2, #5
 803c0a6:	68fa      	ldr	r2, [r7, #12]
 803c0a8:	440a      	add	r2, r1
 803c0aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c0ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803c0b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 803c0b4:	68bb      	ldr	r3, [r7, #8]
 803c0b6:	015a      	lsls	r2, r3, #5
 803c0b8:	68fb      	ldr	r3, [r7, #12]
 803c0ba:	4413      	add	r3, r2
 803c0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c0c0:	681b      	ldr	r3, [r3, #0]
 803c0c2:	68ba      	ldr	r2, [r7, #8]
 803c0c4:	0151      	lsls	r1, r2, #5
 803c0c6:	68fa      	ldr	r2, [r7, #12]
 803c0c8:	440a      	add	r2, r1
 803c0ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c0ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803c0d2:	6013      	str	r3, [r2, #0]
 803c0d4:	e02b      	b.n	803c12e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 803c0d6:	68bb      	ldr	r3, [r7, #8]
 803c0d8:	015a      	lsls	r2, r3, #5
 803c0da:	68fb      	ldr	r3, [r7, #12]
 803c0dc:	4413      	add	r3, r2
 803c0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c0e2:	681b      	ldr	r3, [r3, #0]
 803c0e4:	2b00      	cmp	r3, #0
 803c0e6:	db12      	blt.n	803c10e <USB_EPSetStall+0xae>
 803c0e8:	68bb      	ldr	r3, [r7, #8]
 803c0ea:	2b00      	cmp	r3, #0
 803c0ec:	d00f      	beq.n	803c10e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 803c0ee:	68bb      	ldr	r3, [r7, #8]
 803c0f0:	015a      	lsls	r2, r3, #5
 803c0f2:	68fb      	ldr	r3, [r7, #12]
 803c0f4:	4413      	add	r3, r2
 803c0f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c0fa:	681b      	ldr	r3, [r3, #0]
 803c0fc:	68ba      	ldr	r2, [r7, #8]
 803c0fe:	0151      	lsls	r1, r2, #5
 803c100:	68fa      	ldr	r2, [r7, #12]
 803c102:	440a      	add	r2, r1
 803c104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803c10c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 803c10e:	68bb      	ldr	r3, [r7, #8]
 803c110:	015a      	lsls	r2, r3, #5
 803c112:	68fb      	ldr	r3, [r7, #12]
 803c114:	4413      	add	r3, r2
 803c116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c11a:	681b      	ldr	r3, [r3, #0]
 803c11c:	68ba      	ldr	r2, [r7, #8]
 803c11e:	0151      	lsls	r1, r2, #5
 803c120:	68fa      	ldr	r2, [r7, #12]
 803c122:	440a      	add	r2, r1
 803c124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803c12c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803c12e:	2300      	movs	r3, #0
}
 803c130:	4618      	mov	r0, r3
 803c132:	3714      	adds	r7, #20
 803c134:	46bd      	mov	sp, r7
 803c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c13a:	4770      	bx	lr

0803c13c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803c13c:	b480      	push	{r7}
 803c13e:	b085      	sub	sp, #20
 803c140:	af00      	add	r7, sp, #0
 803c142:	6078      	str	r0, [r7, #4]
 803c144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c146:	687b      	ldr	r3, [r7, #4]
 803c148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803c14a:	683b      	ldr	r3, [r7, #0]
 803c14c:	781b      	ldrb	r3, [r3, #0]
 803c14e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803c150:	683b      	ldr	r3, [r7, #0]
 803c152:	785b      	ldrb	r3, [r3, #1]
 803c154:	2b01      	cmp	r3, #1
 803c156:	d128      	bne.n	803c1aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 803c158:	68bb      	ldr	r3, [r7, #8]
 803c15a:	015a      	lsls	r2, r3, #5
 803c15c:	68fb      	ldr	r3, [r7, #12]
 803c15e:	4413      	add	r3, r2
 803c160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c164:	681b      	ldr	r3, [r3, #0]
 803c166:	68ba      	ldr	r2, [r7, #8]
 803c168:	0151      	lsls	r1, r2, #5
 803c16a:	68fa      	ldr	r2, [r7, #12]
 803c16c:	440a      	add	r2, r1
 803c16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803c176:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803c178:	683b      	ldr	r3, [r7, #0]
 803c17a:	791b      	ldrb	r3, [r3, #4]
 803c17c:	2b03      	cmp	r3, #3
 803c17e:	d003      	beq.n	803c188 <USB_EPClearStall+0x4c>
 803c180:	683b      	ldr	r3, [r7, #0]
 803c182:	791b      	ldrb	r3, [r3, #4]
 803c184:	2b02      	cmp	r3, #2
 803c186:	d138      	bne.n	803c1fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803c188:	68bb      	ldr	r3, [r7, #8]
 803c18a:	015a      	lsls	r2, r3, #5
 803c18c:	68fb      	ldr	r3, [r7, #12]
 803c18e:	4413      	add	r3, r2
 803c190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c194:	681b      	ldr	r3, [r3, #0]
 803c196:	68ba      	ldr	r2, [r7, #8]
 803c198:	0151      	lsls	r1, r2, #5
 803c19a:	68fa      	ldr	r2, [r7, #12]
 803c19c:	440a      	add	r2, r1
 803c19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c1a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803c1a6:	6013      	str	r3, [r2, #0]
 803c1a8:	e027      	b.n	803c1fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 803c1aa:	68bb      	ldr	r3, [r7, #8]
 803c1ac:	015a      	lsls	r2, r3, #5
 803c1ae:	68fb      	ldr	r3, [r7, #12]
 803c1b0:	4413      	add	r3, r2
 803c1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c1b6:	681b      	ldr	r3, [r3, #0]
 803c1b8:	68ba      	ldr	r2, [r7, #8]
 803c1ba:	0151      	lsls	r1, r2, #5
 803c1bc:	68fa      	ldr	r2, [r7, #12]
 803c1be:	440a      	add	r2, r1
 803c1c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c1c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803c1c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803c1ca:	683b      	ldr	r3, [r7, #0]
 803c1cc:	791b      	ldrb	r3, [r3, #4]
 803c1ce:	2b03      	cmp	r3, #3
 803c1d0:	d003      	beq.n	803c1da <USB_EPClearStall+0x9e>
 803c1d2:	683b      	ldr	r3, [r7, #0]
 803c1d4:	791b      	ldrb	r3, [r3, #4]
 803c1d6:	2b02      	cmp	r3, #2
 803c1d8:	d10f      	bne.n	803c1fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803c1da:	68bb      	ldr	r3, [r7, #8]
 803c1dc:	015a      	lsls	r2, r3, #5
 803c1de:	68fb      	ldr	r3, [r7, #12]
 803c1e0:	4413      	add	r3, r2
 803c1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c1e6:	681b      	ldr	r3, [r3, #0]
 803c1e8:	68ba      	ldr	r2, [r7, #8]
 803c1ea:	0151      	lsls	r1, r2, #5
 803c1ec:	68fa      	ldr	r2, [r7, #12]
 803c1ee:	440a      	add	r2, r1
 803c1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c1f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803c1f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 803c1fa:	2300      	movs	r3, #0
}
 803c1fc:	4618      	mov	r0, r3
 803c1fe:	3714      	adds	r7, #20
 803c200:	46bd      	mov	sp, r7
 803c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c206:	4770      	bx	lr

0803c208 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 803c208:	b480      	push	{r7}
 803c20a:	b085      	sub	sp, #20
 803c20c:	af00      	add	r7, sp, #0
 803c20e:	6078      	str	r0, [r7, #4]
 803c210:	460b      	mov	r3, r1
 803c212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c214:	687b      	ldr	r3, [r7, #4]
 803c216:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 803c218:	68fb      	ldr	r3, [r7, #12]
 803c21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c21e:	681b      	ldr	r3, [r3, #0]
 803c220:	68fa      	ldr	r2, [r7, #12]
 803c222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c226:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 803c22a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 803c22c:	68fb      	ldr	r3, [r7, #12]
 803c22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c232:	681a      	ldr	r2, [r3, #0]
 803c234:	78fb      	ldrb	r3, [r7, #3]
 803c236:	011b      	lsls	r3, r3, #4
 803c238:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 803c23c:	68f9      	ldr	r1, [r7, #12]
 803c23e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c242:	4313      	orrs	r3, r2
 803c244:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 803c246:	2300      	movs	r3, #0
}
 803c248:	4618      	mov	r0, r3
 803c24a:	3714      	adds	r7, #20
 803c24c:	46bd      	mov	sp, r7
 803c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c252:	4770      	bx	lr

0803c254 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 803c254:	b480      	push	{r7}
 803c256:	b085      	sub	sp, #20
 803c258:	af00      	add	r7, sp, #0
 803c25a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c25c:	687b      	ldr	r3, [r7, #4]
 803c25e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803c260:	68fb      	ldr	r3, [r7, #12]
 803c262:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803c266:	681b      	ldr	r3, [r3, #0]
 803c268:	68fa      	ldr	r2, [r7, #12]
 803c26a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803c26e:	f023 0303 	bic.w	r3, r3, #3
 803c272:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 803c274:	68fb      	ldr	r3, [r7, #12]
 803c276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c27a:	685b      	ldr	r3, [r3, #4]
 803c27c:	68fa      	ldr	r2, [r7, #12]
 803c27e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c282:	f023 0302 	bic.w	r3, r3, #2
 803c286:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803c288:	2300      	movs	r3, #0
}
 803c28a:	4618      	mov	r0, r3
 803c28c:	3714      	adds	r7, #20
 803c28e:	46bd      	mov	sp, r7
 803c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c294:	4770      	bx	lr

0803c296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 803c296:	b480      	push	{r7}
 803c298:	b085      	sub	sp, #20
 803c29a:	af00      	add	r7, sp, #0
 803c29c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c29e:	687b      	ldr	r3, [r7, #4]
 803c2a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803c2a2:	68fb      	ldr	r3, [r7, #12]
 803c2a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803c2a8:	681b      	ldr	r3, [r3, #0]
 803c2aa:	68fa      	ldr	r2, [r7, #12]
 803c2ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803c2b0:	f023 0303 	bic.w	r3, r3, #3
 803c2b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803c2b6:	68fb      	ldr	r3, [r7, #12]
 803c2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c2bc:	685b      	ldr	r3, [r3, #4]
 803c2be:	68fa      	ldr	r2, [r7, #12]
 803c2c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c2c4:	f043 0302 	orr.w	r3, r3, #2
 803c2c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803c2ca:	2300      	movs	r3, #0
}
 803c2cc:	4618      	mov	r0, r3
 803c2ce:	3714      	adds	r7, #20
 803c2d0:	46bd      	mov	sp, r7
 803c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c2d6:	4770      	bx	lr

0803c2d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 803c2d8:	b480      	push	{r7}
 803c2da:	b085      	sub	sp, #20
 803c2dc:	af00      	add	r7, sp, #0
 803c2de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 803c2e0:	687b      	ldr	r3, [r7, #4]
 803c2e2:	695b      	ldr	r3, [r3, #20]
 803c2e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803c2e6:	687b      	ldr	r3, [r7, #4]
 803c2e8:	699b      	ldr	r3, [r3, #24]
 803c2ea:	68fa      	ldr	r2, [r7, #12]
 803c2ec:	4013      	ands	r3, r2
 803c2ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 803c2f0:	68fb      	ldr	r3, [r7, #12]
}
 803c2f2:	4618      	mov	r0, r3
 803c2f4:	3714      	adds	r7, #20
 803c2f6:	46bd      	mov	sp, r7
 803c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c2fc:	4770      	bx	lr

0803c2fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803c2fe:	b480      	push	{r7}
 803c300:	b085      	sub	sp, #20
 803c302:	af00      	add	r7, sp, #0
 803c304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c306:	687b      	ldr	r3, [r7, #4]
 803c308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803c30a:	68fb      	ldr	r3, [r7, #12]
 803c30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c310:	699b      	ldr	r3, [r3, #24]
 803c312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803c314:	68fb      	ldr	r3, [r7, #12]
 803c316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c31a:	69db      	ldr	r3, [r3, #28]
 803c31c:	68ba      	ldr	r2, [r7, #8]
 803c31e:	4013      	ands	r3, r2
 803c320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803c322:	68bb      	ldr	r3, [r7, #8]
 803c324:	0c1b      	lsrs	r3, r3, #16
}
 803c326:	4618      	mov	r0, r3
 803c328:	3714      	adds	r7, #20
 803c32a:	46bd      	mov	sp, r7
 803c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c330:	4770      	bx	lr

0803c332 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803c332:	b480      	push	{r7}
 803c334:	b085      	sub	sp, #20
 803c336:	af00      	add	r7, sp, #0
 803c338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c33a:	687b      	ldr	r3, [r7, #4]
 803c33c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803c33e:	68fb      	ldr	r3, [r7, #12]
 803c340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c344:	699b      	ldr	r3, [r3, #24]
 803c346:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803c348:	68fb      	ldr	r3, [r7, #12]
 803c34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c34e:	69db      	ldr	r3, [r3, #28]
 803c350:	68ba      	ldr	r2, [r7, #8]
 803c352:	4013      	ands	r3, r2
 803c354:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 803c356:	68bb      	ldr	r3, [r7, #8]
 803c358:	b29b      	uxth	r3, r3
}
 803c35a:	4618      	mov	r0, r3
 803c35c:	3714      	adds	r7, #20
 803c35e:	46bd      	mov	sp, r7
 803c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c364:	4770      	bx	lr

0803c366 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803c366:	b480      	push	{r7}
 803c368:	b085      	sub	sp, #20
 803c36a:	af00      	add	r7, sp, #0
 803c36c:	6078      	str	r0, [r7, #4]
 803c36e:	460b      	mov	r3, r1
 803c370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c372:	687b      	ldr	r3, [r7, #4]
 803c374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 803c376:	78fb      	ldrb	r3, [r7, #3]
 803c378:	015a      	lsls	r2, r3, #5
 803c37a:	68fb      	ldr	r3, [r7, #12]
 803c37c:	4413      	add	r3, r2
 803c37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c382:	689b      	ldr	r3, [r3, #8]
 803c384:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 803c386:	68fb      	ldr	r3, [r7, #12]
 803c388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c38c:	695b      	ldr	r3, [r3, #20]
 803c38e:	68ba      	ldr	r2, [r7, #8]
 803c390:	4013      	ands	r3, r2
 803c392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803c394:	68bb      	ldr	r3, [r7, #8]
}
 803c396:	4618      	mov	r0, r3
 803c398:	3714      	adds	r7, #20
 803c39a:	46bd      	mov	sp, r7
 803c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c3a0:	4770      	bx	lr

0803c3a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803c3a2:	b480      	push	{r7}
 803c3a4:	b087      	sub	sp, #28
 803c3a6:	af00      	add	r7, sp, #0
 803c3a8:	6078      	str	r0, [r7, #4]
 803c3aa:	460b      	mov	r3, r1
 803c3ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c3ae:	687b      	ldr	r3, [r7, #4]
 803c3b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803c3b2:	697b      	ldr	r3, [r7, #20]
 803c3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c3b8:	691b      	ldr	r3, [r3, #16]
 803c3ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 803c3bc:	697b      	ldr	r3, [r7, #20]
 803c3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803c3c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803c3c6:	78fb      	ldrb	r3, [r7, #3]
 803c3c8:	f003 030f 	and.w	r3, r3, #15
 803c3cc:	68fa      	ldr	r2, [r7, #12]
 803c3ce:	fa22 f303 	lsr.w	r3, r2, r3
 803c3d2:	01db      	lsls	r3, r3, #7
 803c3d4:	b2db      	uxtb	r3, r3
 803c3d6:	693a      	ldr	r2, [r7, #16]
 803c3d8:	4313      	orrs	r3, r2
 803c3da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 803c3dc:	78fb      	ldrb	r3, [r7, #3]
 803c3de:	015a      	lsls	r2, r3, #5
 803c3e0:	697b      	ldr	r3, [r7, #20]
 803c3e2:	4413      	add	r3, r2
 803c3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c3e8:	689b      	ldr	r3, [r3, #8]
 803c3ea:	693a      	ldr	r2, [r7, #16]
 803c3ec:	4013      	ands	r3, r2
 803c3ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803c3f0:	68bb      	ldr	r3, [r7, #8]
}
 803c3f2:	4618      	mov	r0, r3
 803c3f4:	371c      	adds	r7, #28
 803c3f6:	46bd      	mov	sp, r7
 803c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c3fc:	4770      	bx	lr

0803c3fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 803c3fe:	b480      	push	{r7}
 803c400:	b083      	sub	sp, #12
 803c402:	af00      	add	r7, sp, #0
 803c404:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803c406:	687b      	ldr	r3, [r7, #4]
 803c408:	695b      	ldr	r3, [r3, #20]
 803c40a:	f003 0301 	and.w	r3, r3, #1
}
 803c40e:	4618      	mov	r0, r3
 803c410:	370c      	adds	r7, #12
 803c412:	46bd      	mov	sp, r7
 803c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c418:	4770      	bx	lr
	...

0803c41c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 803c41c:	b480      	push	{r7}
 803c41e:	b085      	sub	sp, #20
 803c420:	af00      	add	r7, sp, #0
 803c422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c424:	687b      	ldr	r3, [r7, #4]
 803c426:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 803c428:	68fb      	ldr	r3, [r7, #12]
 803c42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c42e:	681a      	ldr	r2, [r3, #0]
 803c430:	68fb      	ldr	r3, [r7, #12]
 803c432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c436:	4619      	mov	r1, r3
 803c438:	4b09      	ldr	r3, [pc, #36]	; (803c460 <USB_ActivateSetup+0x44>)
 803c43a:	4013      	ands	r3, r2
 803c43c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 803c43e:	68fb      	ldr	r3, [r7, #12]
 803c440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c444:	685b      	ldr	r3, [r3, #4]
 803c446:	68fa      	ldr	r2, [r7, #12]
 803c448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c44c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803c450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803c452:	2300      	movs	r3, #0
}
 803c454:	4618      	mov	r0, r3
 803c456:	3714      	adds	r7, #20
 803c458:	46bd      	mov	sp, r7
 803c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c45e:	4770      	bx	lr
 803c460:	fffff800 	.word	0xfffff800

0803c464 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 803c464:	b480      	push	{r7}
 803c466:	b087      	sub	sp, #28
 803c468:	af00      	add	r7, sp, #0
 803c46a:	60f8      	str	r0, [r7, #12]
 803c46c:	460b      	mov	r3, r1
 803c46e:	607a      	str	r2, [r7, #4]
 803c470:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c472:	68fb      	ldr	r3, [r7, #12]
 803c474:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803c476:	68fb      	ldr	r3, [r7, #12]
 803c478:	333c      	adds	r3, #60	; 0x3c
 803c47a:	3304      	adds	r3, #4
 803c47c:	681b      	ldr	r3, [r3, #0]
 803c47e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 803c480:	693b      	ldr	r3, [r7, #16]
 803c482:	4a26      	ldr	r2, [pc, #152]	; (803c51c <USB_EP0_OutStart+0xb8>)
 803c484:	4293      	cmp	r3, r2
 803c486:	d90a      	bls.n	803c49e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803c488:	697b      	ldr	r3, [r7, #20]
 803c48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c48e:	681b      	ldr	r3, [r3, #0]
 803c490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c498:	d101      	bne.n	803c49e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 803c49a:	2300      	movs	r3, #0
 803c49c:	e037      	b.n	803c50e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 803c49e:	697b      	ldr	r3, [r7, #20]
 803c4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c4a4:	461a      	mov	r2, r3
 803c4a6:	2300      	movs	r3, #0
 803c4a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803c4aa:	697b      	ldr	r3, [r7, #20]
 803c4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c4b0:	691b      	ldr	r3, [r3, #16]
 803c4b2:	697a      	ldr	r2, [r7, #20]
 803c4b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c4b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803c4bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 803c4be:	697b      	ldr	r3, [r7, #20]
 803c4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c4c4:	691b      	ldr	r3, [r3, #16]
 803c4c6:	697a      	ldr	r2, [r7, #20]
 803c4c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c4cc:	f043 0318 	orr.w	r3, r3, #24
 803c4d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803c4d2:	697b      	ldr	r3, [r7, #20]
 803c4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c4d8:	691b      	ldr	r3, [r3, #16]
 803c4da:	697a      	ldr	r2, [r7, #20]
 803c4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c4e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803c4e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803c4e6:	7afb      	ldrb	r3, [r7, #11]
 803c4e8:	2b01      	cmp	r3, #1
 803c4ea:	d10f      	bne.n	803c50c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 803c4ec:	697b      	ldr	r3, [r7, #20]
 803c4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c4f2:	461a      	mov	r2, r3
 803c4f4:	687b      	ldr	r3, [r7, #4]
 803c4f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 803c4f8:	697b      	ldr	r3, [r7, #20]
 803c4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c4fe:	681b      	ldr	r3, [r3, #0]
 803c500:	697a      	ldr	r2, [r7, #20]
 803c502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c506:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 803c50a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803c50c:	2300      	movs	r3, #0
}
 803c50e:	4618      	mov	r0, r3
 803c510:	371c      	adds	r7, #28
 803c512:	46bd      	mov	sp, r7
 803c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c518:	4770      	bx	lr
 803c51a:	bf00      	nop
 803c51c:	4f54300a 	.word	0x4f54300a

0803c520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 803c520:	b480      	push	{r7}
 803c522:	b085      	sub	sp, #20
 803c524:	af00      	add	r7, sp, #0
 803c526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803c528:	2300      	movs	r3, #0
 803c52a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803c52c:	68fb      	ldr	r3, [r7, #12]
 803c52e:	3301      	adds	r3, #1
 803c530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803c532:	68fb      	ldr	r3, [r7, #12]
 803c534:	4a13      	ldr	r2, [pc, #76]	; (803c584 <USB_CoreReset+0x64>)
 803c536:	4293      	cmp	r3, r2
 803c538:	d901      	bls.n	803c53e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 803c53a:	2303      	movs	r3, #3
 803c53c:	e01b      	b.n	803c576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803c53e:	687b      	ldr	r3, [r7, #4]
 803c540:	691b      	ldr	r3, [r3, #16]
 803c542:	2b00      	cmp	r3, #0
 803c544:	daf2      	bge.n	803c52c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803c546:	2300      	movs	r3, #0
 803c548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 803c54a:	687b      	ldr	r3, [r7, #4]
 803c54c:	691b      	ldr	r3, [r3, #16]
 803c54e:	f043 0201 	orr.w	r2, r3, #1
 803c552:	687b      	ldr	r3, [r7, #4]
 803c554:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803c556:	68fb      	ldr	r3, [r7, #12]
 803c558:	3301      	adds	r3, #1
 803c55a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803c55c:	68fb      	ldr	r3, [r7, #12]
 803c55e:	4a09      	ldr	r2, [pc, #36]	; (803c584 <USB_CoreReset+0x64>)
 803c560:	4293      	cmp	r3, r2
 803c562:	d901      	bls.n	803c568 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 803c564:	2303      	movs	r3, #3
 803c566:	e006      	b.n	803c576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 803c568:	687b      	ldr	r3, [r7, #4]
 803c56a:	691b      	ldr	r3, [r3, #16]
 803c56c:	f003 0301 	and.w	r3, r3, #1
 803c570:	2b01      	cmp	r3, #1
 803c572:	d0f0      	beq.n	803c556 <USB_CoreReset+0x36>

  return HAL_OK;
 803c574:	2300      	movs	r3, #0
}
 803c576:	4618      	mov	r0, r3
 803c578:	3714      	adds	r7, #20
 803c57a:	46bd      	mov	sp, r7
 803c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c580:	4770      	bx	lr
 803c582:	bf00      	nop
 803c584:	00030d40 	.word	0x00030d40

0803c588 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803c588:	b580      	push	{r7, lr}
 803c58a:	b084      	sub	sp, #16
 803c58c:	af00      	add	r7, sp, #0
 803c58e:	6078      	str	r0, [r7, #4]
 803c590:	460b      	mov	r3, r1
 803c592:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 803c594:	f44f 7007 	mov.w	r0, #540	; 0x21c
 803c598:	f002 fc54 	bl	803ee44 <USBD_static_malloc>
 803c59c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 803c59e:	68fb      	ldr	r3, [r7, #12]
 803c5a0:	2b00      	cmp	r3, #0
 803c5a2:	d109      	bne.n	803c5b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803c5a4:	687b      	ldr	r3, [r7, #4]
 803c5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803c5aa:	687b      	ldr	r3, [r7, #4]
 803c5ac:	32b0      	adds	r2, #176	; 0xb0
 803c5ae:	2100      	movs	r1, #0
 803c5b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803c5b4:	2302      	movs	r3, #2
 803c5b6:	e0d4      	b.n	803c762 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 803c5b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 803c5bc:	2100      	movs	r1, #0
 803c5be:	68f8      	ldr	r0, [r7, #12]
 803c5c0:	f002 fd42 	bl	803f048 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803c5c4:	687b      	ldr	r3, [r7, #4]
 803c5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803c5ca:	687b      	ldr	r3, [r7, #4]
 803c5cc:	32b0      	adds	r2, #176	; 0xb0
 803c5ce:	68f9      	ldr	r1, [r7, #12]
 803c5d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803c5d4:	687b      	ldr	r3, [r7, #4]
 803c5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803c5da:	687b      	ldr	r3, [r7, #4]
 803c5dc:	32b0      	adds	r2, #176	; 0xb0
 803c5de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803c5e2:	687b      	ldr	r3, [r7, #4]
 803c5e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803c5e8:	687b      	ldr	r3, [r7, #4]
 803c5ea:	7c1b      	ldrb	r3, [r3, #16]
 803c5ec:	2b00      	cmp	r3, #0
 803c5ee:	d138      	bne.n	803c662 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803c5f0:	4b5e      	ldr	r3, [pc, #376]	; (803c76c <USBD_CDC_Init+0x1e4>)
 803c5f2:	7819      	ldrb	r1, [r3, #0]
 803c5f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c5f8:	2202      	movs	r2, #2
 803c5fa:	6878      	ldr	r0, [r7, #4]
 803c5fc:	f002 faff 	bl	803ebfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803c600:	4b5a      	ldr	r3, [pc, #360]	; (803c76c <USBD_CDC_Init+0x1e4>)
 803c602:	781b      	ldrb	r3, [r3, #0]
 803c604:	f003 020f 	and.w	r2, r3, #15
 803c608:	6879      	ldr	r1, [r7, #4]
 803c60a:	4613      	mov	r3, r2
 803c60c:	009b      	lsls	r3, r3, #2
 803c60e:	4413      	add	r3, r2
 803c610:	009b      	lsls	r3, r3, #2
 803c612:	440b      	add	r3, r1
 803c614:	3324      	adds	r3, #36	; 0x24
 803c616:	2201      	movs	r2, #1
 803c618:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803c61a:	4b55      	ldr	r3, [pc, #340]	; (803c770 <USBD_CDC_Init+0x1e8>)
 803c61c:	7819      	ldrb	r1, [r3, #0]
 803c61e:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c622:	2202      	movs	r2, #2
 803c624:	6878      	ldr	r0, [r7, #4]
 803c626:	f002 faea 	bl	803ebfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803c62a:	4b51      	ldr	r3, [pc, #324]	; (803c770 <USBD_CDC_Init+0x1e8>)
 803c62c:	781b      	ldrb	r3, [r3, #0]
 803c62e:	f003 020f 	and.w	r2, r3, #15
 803c632:	6879      	ldr	r1, [r7, #4]
 803c634:	4613      	mov	r3, r2
 803c636:	009b      	lsls	r3, r3, #2
 803c638:	4413      	add	r3, r2
 803c63a:	009b      	lsls	r3, r3, #2
 803c63c:	440b      	add	r3, r1
 803c63e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803c642:	2201      	movs	r2, #1
 803c644:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803c646:	4b4b      	ldr	r3, [pc, #300]	; (803c774 <USBD_CDC_Init+0x1ec>)
 803c648:	781b      	ldrb	r3, [r3, #0]
 803c64a:	f003 020f 	and.w	r2, r3, #15
 803c64e:	6879      	ldr	r1, [r7, #4]
 803c650:	4613      	mov	r3, r2
 803c652:	009b      	lsls	r3, r3, #2
 803c654:	4413      	add	r3, r2
 803c656:	009b      	lsls	r3, r3, #2
 803c658:	440b      	add	r3, r1
 803c65a:	3326      	adds	r3, #38	; 0x26
 803c65c:	2210      	movs	r2, #16
 803c65e:	801a      	strh	r2, [r3, #0]
 803c660:	e035      	b.n	803c6ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803c662:	4b42      	ldr	r3, [pc, #264]	; (803c76c <USBD_CDC_Init+0x1e4>)
 803c664:	7819      	ldrb	r1, [r3, #0]
 803c666:	2340      	movs	r3, #64	; 0x40
 803c668:	2202      	movs	r2, #2
 803c66a:	6878      	ldr	r0, [r7, #4]
 803c66c:	f002 fac7 	bl	803ebfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803c670:	4b3e      	ldr	r3, [pc, #248]	; (803c76c <USBD_CDC_Init+0x1e4>)
 803c672:	781b      	ldrb	r3, [r3, #0]
 803c674:	f003 020f 	and.w	r2, r3, #15
 803c678:	6879      	ldr	r1, [r7, #4]
 803c67a:	4613      	mov	r3, r2
 803c67c:	009b      	lsls	r3, r3, #2
 803c67e:	4413      	add	r3, r2
 803c680:	009b      	lsls	r3, r3, #2
 803c682:	440b      	add	r3, r1
 803c684:	3324      	adds	r3, #36	; 0x24
 803c686:	2201      	movs	r2, #1
 803c688:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803c68a:	4b39      	ldr	r3, [pc, #228]	; (803c770 <USBD_CDC_Init+0x1e8>)
 803c68c:	7819      	ldrb	r1, [r3, #0]
 803c68e:	2340      	movs	r3, #64	; 0x40
 803c690:	2202      	movs	r2, #2
 803c692:	6878      	ldr	r0, [r7, #4]
 803c694:	f002 fab3 	bl	803ebfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803c698:	4b35      	ldr	r3, [pc, #212]	; (803c770 <USBD_CDC_Init+0x1e8>)
 803c69a:	781b      	ldrb	r3, [r3, #0]
 803c69c:	f003 020f 	and.w	r2, r3, #15
 803c6a0:	6879      	ldr	r1, [r7, #4]
 803c6a2:	4613      	mov	r3, r2
 803c6a4:	009b      	lsls	r3, r3, #2
 803c6a6:	4413      	add	r3, r2
 803c6a8:	009b      	lsls	r3, r3, #2
 803c6aa:	440b      	add	r3, r1
 803c6ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803c6b0:	2201      	movs	r2, #1
 803c6b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803c6b4:	4b2f      	ldr	r3, [pc, #188]	; (803c774 <USBD_CDC_Init+0x1ec>)
 803c6b6:	781b      	ldrb	r3, [r3, #0]
 803c6b8:	f003 020f 	and.w	r2, r3, #15
 803c6bc:	6879      	ldr	r1, [r7, #4]
 803c6be:	4613      	mov	r3, r2
 803c6c0:	009b      	lsls	r3, r3, #2
 803c6c2:	4413      	add	r3, r2
 803c6c4:	009b      	lsls	r3, r3, #2
 803c6c6:	440b      	add	r3, r1
 803c6c8:	3326      	adds	r3, #38	; 0x26
 803c6ca:	2210      	movs	r2, #16
 803c6cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 803c6ce:	4b29      	ldr	r3, [pc, #164]	; (803c774 <USBD_CDC_Init+0x1ec>)
 803c6d0:	7819      	ldrb	r1, [r3, #0]
 803c6d2:	2308      	movs	r3, #8
 803c6d4:	2203      	movs	r2, #3
 803c6d6:	6878      	ldr	r0, [r7, #4]
 803c6d8:	f002 fa91 	bl	803ebfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 803c6dc:	4b25      	ldr	r3, [pc, #148]	; (803c774 <USBD_CDC_Init+0x1ec>)
 803c6de:	781b      	ldrb	r3, [r3, #0]
 803c6e0:	f003 020f 	and.w	r2, r3, #15
 803c6e4:	6879      	ldr	r1, [r7, #4]
 803c6e6:	4613      	mov	r3, r2
 803c6e8:	009b      	lsls	r3, r3, #2
 803c6ea:	4413      	add	r3, r2
 803c6ec:	009b      	lsls	r3, r3, #2
 803c6ee:	440b      	add	r3, r1
 803c6f0:	3324      	adds	r3, #36	; 0x24
 803c6f2:	2201      	movs	r2, #1
 803c6f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803c6f6:	68fb      	ldr	r3, [r7, #12]
 803c6f8:	2200      	movs	r2, #0
 803c6fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 803c6fe:	687b      	ldr	r3, [r7, #4]
 803c700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803c704:	687a      	ldr	r2, [r7, #4]
 803c706:	33b0      	adds	r3, #176	; 0xb0
 803c708:	009b      	lsls	r3, r3, #2
 803c70a:	4413      	add	r3, r2
 803c70c:	685b      	ldr	r3, [r3, #4]
 803c70e:	681b      	ldr	r3, [r3, #0]
 803c710:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803c712:	68fb      	ldr	r3, [r7, #12]
 803c714:	2200      	movs	r2, #0
 803c716:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 803c71a:	68fb      	ldr	r3, [r7, #12]
 803c71c:	2200      	movs	r2, #0
 803c71e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803c722:	68fb      	ldr	r3, [r7, #12]
 803c724:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 803c728:	2b00      	cmp	r3, #0
 803c72a:	d101      	bne.n	803c730 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 803c72c:	2302      	movs	r3, #2
 803c72e:	e018      	b.n	803c762 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803c730:	687b      	ldr	r3, [r7, #4]
 803c732:	7c1b      	ldrb	r3, [r3, #16]
 803c734:	2b00      	cmp	r3, #0
 803c736:	d10a      	bne.n	803c74e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803c738:	4b0d      	ldr	r3, [pc, #52]	; (803c770 <USBD_CDC_Init+0x1e8>)
 803c73a:	7819      	ldrb	r1, [r3, #0]
 803c73c:	68fb      	ldr	r3, [r7, #12]
 803c73e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803c742:	f44f 7300 	mov.w	r3, #512	; 0x200
 803c746:	6878      	ldr	r0, [r7, #4]
 803c748:	f002 fb48 	bl	803eddc <USBD_LL_PrepareReceive>
 803c74c:	e008      	b.n	803c760 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803c74e:	4b08      	ldr	r3, [pc, #32]	; (803c770 <USBD_CDC_Init+0x1e8>)
 803c750:	7819      	ldrb	r1, [r3, #0]
 803c752:	68fb      	ldr	r3, [r7, #12]
 803c754:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803c758:	2340      	movs	r3, #64	; 0x40
 803c75a:	6878      	ldr	r0, [r7, #4]
 803c75c:	f002 fb3e 	bl	803eddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803c760:	2300      	movs	r3, #0
}
 803c762:	4618      	mov	r0, r3
 803c764:	3710      	adds	r7, #16
 803c766:	46bd      	mov	sp, r7
 803c768:	bd80      	pop	{r7, pc}
 803c76a:	bf00      	nop
 803c76c:	2400009b 	.word	0x2400009b
 803c770:	2400009c 	.word	0x2400009c
 803c774:	2400009d 	.word	0x2400009d

0803c778 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803c778:	b580      	push	{r7, lr}
 803c77a:	b082      	sub	sp, #8
 803c77c:	af00      	add	r7, sp, #0
 803c77e:	6078      	str	r0, [r7, #4]
 803c780:	460b      	mov	r3, r1
 803c782:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 803c784:	4b3a      	ldr	r3, [pc, #232]	; (803c870 <USBD_CDC_DeInit+0xf8>)
 803c786:	781b      	ldrb	r3, [r3, #0]
 803c788:	4619      	mov	r1, r3
 803c78a:	6878      	ldr	r0, [r7, #4]
 803c78c:	f002 fa5d 	bl	803ec4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 803c790:	4b37      	ldr	r3, [pc, #220]	; (803c870 <USBD_CDC_DeInit+0xf8>)
 803c792:	781b      	ldrb	r3, [r3, #0]
 803c794:	f003 020f 	and.w	r2, r3, #15
 803c798:	6879      	ldr	r1, [r7, #4]
 803c79a:	4613      	mov	r3, r2
 803c79c:	009b      	lsls	r3, r3, #2
 803c79e:	4413      	add	r3, r2
 803c7a0:	009b      	lsls	r3, r3, #2
 803c7a2:	440b      	add	r3, r1
 803c7a4:	3324      	adds	r3, #36	; 0x24
 803c7a6:	2200      	movs	r2, #0
 803c7a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 803c7aa:	4b32      	ldr	r3, [pc, #200]	; (803c874 <USBD_CDC_DeInit+0xfc>)
 803c7ac:	781b      	ldrb	r3, [r3, #0]
 803c7ae:	4619      	mov	r1, r3
 803c7b0:	6878      	ldr	r0, [r7, #4]
 803c7b2:	f002 fa4a 	bl	803ec4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803c7b6:	4b2f      	ldr	r3, [pc, #188]	; (803c874 <USBD_CDC_DeInit+0xfc>)
 803c7b8:	781b      	ldrb	r3, [r3, #0]
 803c7ba:	f003 020f 	and.w	r2, r3, #15
 803c7be:	6879      	ldr	r1, [r7, #4]
 803c7c0:	4613      	mov	r3, r2
 803c7c2:	009b      	lsls	r3, r3, #2
 803c7c4:	4413      	add	r3, r2
 803c7c6:	009b      	lsls	r3, r3, #2
 803c7c8:	440b      	add	r3, r1
 803c7ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803c7ce:	2200      	movs	r2, #0
 803c7d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803c7d2:	4b29      	ldr	r3, [pc, #164]	; (803c878 <USBD_CDC_DeInit+0x100>)
 803c7d4:	781b      	ldrb	r3, [r3, #0]
 803c7d6:	4619      	mov	r1, r3
 803c7d8:	6878      	ldr	r0, [r7, #4]
 803c7da:	f002 fa36 	bl	803ec4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 803c7de:	4b26      	ldr	r3, [pc, #152]	; (803c878 <USBD_CDC_DeInit+0x100>)
 803c7e0:	781b      	ldrb	r3, [r3, #0]
 803c7e2:	f003 020f 	and.w	r2, r3, #15
 803c7e6:	6879      	ldr	r1, [r7, #4]
 803c7e8:	4613      	mov	r3, r2
 803c7ea:	009b      	lsls	r3, r3, #2
 803c7ec:	4413      	add	r3, r2
 803c7ee:	009b      	lsls	r3, r3, #2
 803c7f0:	440b      	add	r3, r1
 803c7f2:	3324      	adds	r3, #36	; 0x24
 803c7f4:	2200      	movs	r2, #0
 803c7f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 803c7f8:	4b1f      	ldr	r3, [pc, #124]	; (803c878 <USBD_CDC_DeInit+0x100>)
 803c7fa:	781b      	ldrb	r3, [r3, #0]
 803c7fc:	f003 020f 	and.w	r2, r3, #15
 803c800:	6879      	ldr	r1, [r7, #4]
 803c802:	4613      	mov	r3, r2
 803c804:	009b      	lsls	r3, r3, #2
 803c806:	4413      	add	r3, r2
 803c808:	009b      	lsls	r3, r3, #2
 803c80a:	440b      	add	r3, r1
 803c80c:	3326      	adds	r3, #38	; 0x26
 803c80e:	2200      	movs	r2, #0
 803c810:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803c812:	687b      	ldr	r3, [r7, #4]
 803c814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803c818:	687b      	ldr	r3, [r7, #4]
 803c81a:	32b0      	adds	r2, #176	; 0xb0
 803c81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803c820:	2b00      	cmp	r3, #0
 803c822:	d01f      	beq.n	803c864 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 803c824:	687b      	ldr	r3, [r7, #4]
 803c826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803c82a:	687a      	ldr	r2, [r7, #4]
 803c82c:	33b0      	adds	r3, #176	; 0xb0
 803c82e:	009b      	lsls	r3, r3, #2
 803c830:	4413      	add	r3, r2
 803c832:	685b      	ldr	r3, [r3, #4]
 803c834:	685b      	ldr	r3, [r3, #4]
 803c836:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 803c838:	687b      	ldr	r3, [r7, #4]
 803c83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803c83e:	687b      	ldr	r3, [r7, #4]
 803c840:	32b0      	adds	r2, #176	; 0xb0
 803c842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803c846:	4618      	mov	r0, r3
 803c848:	f002 fb0a 	bl	803ee60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803c84c:	687b      	ldr	r3, [r7, #4]
 803c84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803c852:	687b      	ldr	r3, [r7, #4]
 803c854:	32b0      	adds	r2, #176	; 0xb0
 803c856:	2100      	movs	r1, #0
 803c858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 803c85c:	687b      	ldr	r3, [r7, #4]
 803c85e:	2200      	movs	r2, #0
 803c860:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 803c864:	2300      	movs	r3, #0
}
 803c866:	4618      	mov	r0, r3
 803c868:	3708      	adds	r7, #8
 803c86a:	46bd      	mov	sp, r7
 803c86c:	bd80      	pop	{r7, pc}
 803c86e:	bf00      	nop
 803c870:	2400009b 	.word	0x2400009b
 803c874:	2400009c 	.word	0x2400009c
 803c878:	2400009d 	.word	0x2400009d

0803c87c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 803c87c:	b580      	push	{r7, lr}
 803c87e:	b086      	sub	sp, #24
 803c880:	af00      	add	r7, sp, #0
 803c882:	6078      	str	r0, [r7, #4]
 803c884:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803c886:	687b      	ldr	r3, [r7, #4]
 803c888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803c88c:	687b      	ldr	r3, [r7, #4]
 803c88e:	32b0      	adds	r2, #176	; 0xb0
 803c890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803c894:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 803c896:	2300      	movs	r3, #0
 803c898:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 803c89a:	2300      	movs	r3, #0
 803c89c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 803c89e:	2300      	movs	r3, #0
 803c8a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803c8a2:	693b      	ldr	r3, [r7, #16]
 803c8a4:	2b00      	cmp	r3, #0
 803c8a6:	d101      	bne.n	803c8ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 803c8a8:	2303      	movs	r3, #3
 803c8aa:	e0bf      	b.n	803ca2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803c8ac:	683b      	ldr	r3, [r7, #0]
 803c8ae:	781b      	ldrb	r3, [r3, #0]
 803c8b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803c8b4:	2b00      	cmp	r3, #0
 803c8b6:	d050      	beq.n	803c95a <USBD_CDC_Setup+0xde>
 803c8b8:	2b20      	cmp	r3, #32
 803c8ba:	f040 80af 	bne.w	803ca1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 803c8be:	683b      	ldr	r3, [r7, #0]
 803c8c0:	88db      	ldrh	r3, [r3, #6]
 803c8c2:	2b00      	cmp	r3, #0
 803c8c4:	d03a      	beq.n	803c93c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803c8c6:	683b      	ldr	r3, [r7, #0]
 803c8c8:	781b      	ldrb	r3, [r3, #0]
 803c8ca:	b25b      	sxtb	r3, r3
 803c8cc:	2b00      	cmp	r3, #0
 803c8ce:	da1b      	bge.n	803c908 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803c8d0:	687b      	ldr	r3, [r7, #4]
 803c8d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803c8d6:	687a      	ldr	r2, [r7, #4]
 803c8d8:	33b0      	adds	r3, #176	; 0xb0
 803c8da:	009b      	lsls	r3, r3, #2
 803c8dc:	4413      	add	r3, r2
 803c8de:	685b      	ldr	r3, [r3, #4]
 803c8e0:	689b      	ldr	r3, [r3, #8]
 803c8e2:	683a      	ldr	r2, [r7, #0]
 803c8e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803c8e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803c8e8:	683a      	ldr	r2, [r7, #0]
 803c8ea:	88d2      	ldrh	r2, [r2, #6]
 803c8ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 803c8ee:	683b      	ldr	r3, [r7, #0]
 803c8f0:	88db      	ldrh	r3, [r3, #6]
 803c8f2:	2b07      	cmp	r3, #7
 803c8f4:	bf28      	it	cs
 803c8f6:	2307      	movcs	r3, #7
 803c8f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 803c8fa:	693b      	ldr	r3, [r7, #16]
 803c8fc:	89fa      	ldrh	r2, [r7, #14]
 803c8fe:	4619      	mov	r1, r3
 803c900:	6878      	ldr	r0, [r7, #4]
 803c902:	f001 fd43 	bl	803e38c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803c906:	e090      	b.n	803ca2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 803c908:	683b      	ldr	r3, [r7, #0]
 803c90a:	785a      	ldrb	r2, [r3, #1]
 803c90c:	693b      	ldr	r3, [r7, #16]
 803c90e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803c912:	683b      	ldr	r3, [r7, #0]
 803c914:	88db      	ldrh	r3, [r3, #6]
 803c916:	2b3f      	cmp	r3, #63	; 0x3f
 803c918:	d803      	bhi.n	803c922 <USBD_CDC_Setup+0xa6>
 803c91a:	683b      	ldr	r3, [r7, #0]
 803c91c:	88db      	ldrh	r3, [r3, #6]
 803c91e:	b2da      	uxtb	r2, r3
 803c920:	e000      	b.n	803c924 <USBD_CDC_Setup+0xa8>
 803c922:	2240      	movs	r2, #64	; 0x40
 803c924:	693b      	ldr	r3, [r7, #16]
 803c926:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 803c92a:	6939      	ldr	r1, [r7, #16]
 803c92c:	693b      	ldr	r3, [r7, #16]
 803c92e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 803c932:	461a      	mov	r2, r3
 803c934:	6878      	ldr	r0, [r7, #4]
 803c936:	f001 fd55 	bl	803e3e4 <USBD_CtlPrepareRx>
      break;
 803c93a:	e076      	b.n	803ca2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803c93c:	687b      	ldr	r3, [r7, #4]
 803c93e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803c942:	687a      	ldr	r2, [r7, #4]
 803c944:	33b0      	adds	r3, #176	; 0xb0
 803c946:	009b      	lsls	r3, r3, #2
 803c948:	4413      	add	r3, r2
 803c94a:	685b      	ldr	r3, [r3, #4]
 803c94c:	689b      	ldr	r3, [r3, #8]
 803c94e:	683a      	ldr	r2, [r7, #0]
 803c950:	7850      	ldrb	r0, [r2, #1]
 803c952:	2200      	movs	r2, #0
 803c954:	6839      	ldr	r1, [r7, #0]
 803c956:	4798      	blx	r3
      break;
 803c958:	e067      	b.n	803ca2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803c95a:	683b      	ldr	r3, [r7, #0]
 803c95c:	785b      	ldrb	r3, [r3, #1]
 803c95e:	2b0b      	cmp	r3, #11
 803c960:	d851      	bhi.n	803ca06 <USBD_CDC_Setup+0x18a>
 803c962:	a201      	add	r2, pc, #4	; (adr r2, 803c968 <USBD_CDC_Setup+0xec>)
 803c964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803c968:	0803c999 	.word	0x0803c999
 803c96c:	0803ca15 	.word	0x0803ca15
 803c970:	0803ca07 	.word	0x0803ca07
 803c974:	0803ca07 	.word	0x0803ca07
 803c978:	0803ca07 	.word	0x0803ca07
 803c97c:	0803ca07 	.word	0x0803ca07
 803c980:	0803ca07 	.word	0x0803ca07
 803c984:	0803ca07 	.word	0x0803ca07
 803c988:	0803ca07 	.word	0x0803ca07
 803c98c:	0803ca07 	.word	0x0803ca07
 803c990:	0803c9c3 	.word	0x0803c9c3
 803c994:	0803c9ed 	.word	0x0803c9ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803c998:	687b      	ldr	r3, [r7, #4]
 803c99a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c99e:	b2db      	uxtb	r3, r3
 803c9a0:	2b03      	cmp	r3, #3
 803c9a2:	d107      	bne.n	803c9b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 803c9a4:	f107 030a 	add.w	r3, r7, #10
 803c9a8:	2202      	movs	r2, #2
 803c9aa:	4619      	mov	r1, r3
 803c9ac:	6878      	ldr	r0, [r7, #4]
 803c9ae:	f001 fced 	bl	803e38c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803c9b2:	e032      	b.n	803ca1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803c9b4:	6839      	ldr	r1, [r7, #0]
 803c9b6:	6878      	ldr	r0, [r7, #4]
 803c9b8:	f001 fc77 	bl	803e2aa <USBD_CtlError>
            ret = USBD_FAIL;
 803c9bc:	2303      	movs	r3, #3
 803c9be:	75fb      	strb	r3, [r7, #23]
          break;
 803c9c0:	e02b      	b.n	803ca1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803c9c2:	687b      	ldr	r3, [r7, #4]
 803c9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c9c8:	b2db      	uxtb	r3, r3
 803c9ca:	2b03      	cmp	r3, #3
 803c9cc:	d107      	bne.n	803c9de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 803c9ce:	f107 030d 	add.w	r3, r7, #13
 803c9d2:	2201      	movs	r2, #1
 803c9d4:	4619      	mov	r1, r3
 803c9d6:	6878      	ldr	r0, [r7, #4]
 803c9d8:	f001 fcd8 	bl	803e38c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803c9dc:	e01d      	b.n	803ca1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803c9de:	6839      	ldr	r1, [r7, #0]
 803c9e0:	6878      	ldr	r0, [r7, #4]
 803c9e2:	f001 fc62 	bl	803e2aa <USBD_CtlError>
            ret = USBD_FAIL;
 803c9e6:	2303      	movs	r3, #3
 803c9e8:	75fb      	strb	r3, [r7, #23]
          break;
 803c9ea:	e016      	b.n	803ca1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 803c9ec:	687b      	ldr	r3, [r7, #4]
 803c9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c9f2:	b2db      	uxtb	r3, r3
 803c9f4:	2b03      	cmp	r3, #3
 803c9f6:	d00f      	beq.n	803ca18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 803c9f8:	6839      	ldr	r1, [r7, #0]
 803c9fa:	6878      	ldr	r0, [r7, #4]
 803c9fc:	f001 fc55 	bl	803e2aa <USBD_CtlError>
            ret = USBD_FAIL;
 803ca00:	2303      	movs	r3, #3
 803ca02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803ca04:	e008      	b.n	803ca18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803ca06:	6839      	ldr	r1, [r7, #0]
 803ca08:	6878      	ldr	r0, [r7, #4]
 803ca0a:	f001 fc4e 	bl	803e2aa <USBD_CtlError>
          ret = USBD_FAIL;
 803ca0e:	2303      	movs	r3, #3
 803ca10:	75fb      	strb	r3, [r7, #23]
          break;
 803ca12:	e002      	b.n	803ca1a <USBD_CDC_Setup+0x19e>
          break;
 803ca14:	bf00      	nop
 803ca16:	e008      	b.n	803ca2a <USBD_CDC_Setup+0x1ae>
          break;
 803ca18:	bf00      	nop
      }
      break;
 803ca1a:	e006      	b.n	803ca2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 803ca1c:	6839      	ldr	r1, [r7, #0]
 803ca1e:	6878      	ldr	r0, [r7, #4]
 803ca20:	f001 fc43 	bl	803e2aa <USBD_CtlError>
      ret = USBD_FAIL;
 803ca24:	2303      	movs	r3, #3
 803ca26:	75fb      	strb	r3, [r7, #23]
      break;
 803ca28:	bf00      	nop
  }

  return (uint8_t)ret;
 803ca2a:	7dfb      	ldrb	r3, [r7, #23]
}
 803ca2c:	4618      	mov	r0, r3
 803ca2e:	3718      	adds	r7, #24
 803ca30:	46bd      	mov	sp, r7
 803ca32:	bd80      	pop	{r7, pc}

0803ca34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803ca34:	b580      	push	{r7, lr}
 803ca36:	b084      	sub	sp, #16
 803ca38:	af00      	add	r7, sp, #0
 803ca3a:	6078      	str	r0, [r7, #4]
 803ca3c:	460b      	mov	r3, r1
 803ca3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 803ca40:	687b      	ldr	r3, [r7, #4]
 803ca42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ca46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803ca48:	687b      	ldr	r3, [r7, #4]
 803ca4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ca4e:	687b      	ldr	r3, [r7, #4]
 803ca50:	32b0      	adds	r2, #176	; 0xb0
 803ca52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ca56:	2b00      	cmp	r3, #0
 803ca58:	d101      	bne.n	803ca5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 803ca5a:	2303      	movs	r3, #3
 803ca5c:	e065      	b.n	803cb2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803ca5e:	687b      	ldr	r3, [r7, #4]
 803ca60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ca64:	687b      	ldr	r3, [r7, #4]
 803ca66:	32b0      	adds	r2, #176	; 0xb0
 803ca68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ca6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803ca6e:	78fb      	ldrb	r3, [r7, #3]
 803ca70:	f003 020f 	and.w	r2, r3, #15
 803ca74:	6879      	ldr	r1, [r7, #4]
 803ca76:	4613      	mov	r3, r2
 803ca78:	009b      	lsls	r3, r3, #2
 803ca7a:	4413      	add	r3, r2
 803ca7c:	009b      	lsls	r3, r3, #2
 803ca7e:	440b      	add	r3, r1
 803ca80:	3318      	adds	r3, #24
 803ca82:	681b      	ldr	r3, [r3, #0]
 803ca84:	2b00      	cmp	r3, #0
 803ca86:	d02f      	beq.n	803cae8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 803ca88:	78fb      	ldrb	r3, [r7, #3]
 803ca8a:	f003 020f 	and.w	r2, r3, #15
 803ca8e:	6879      	ldr	r1, [r7, #4]
 803ca90:	4613      	mov	r3, r2
 803ca92:	009b      	lsls	r3, r3, #2
 803ca94:	4413      	add	r3, r2
 803ca96:	009b      	lsls	r3, r3, #2
 803ca98:	440b      	add	r3, r1
 803ca9a:	3318      	adds	r3, #24
 803ca9c:	681a      	ldr	r2, [r3, #0]
 803ca9e:	78fb      	ldrb	r3, [r7, #3]
 803caa0:	f003 010f 	and.w	r1, r3, #15
 803caa4:	68f8      	ldr	r0, [r7, #12]
 803caa6:	460b      	mov	r3, r1
 803caa8:	00db      	lsls	r3, r3, #3
 803caaa:	440b      	add	r3, r1
 803caac:	009b      	lsls	r3, r3, #2
 803caae:	4403      	add	r3, r0
 803cab0:	3348      	adds	r3, #72	; 0x48
 803cab2:	681b      	ldr	r3, [r3, #0]
 803cab4:	fbb2 f1f3 	udiv	r1, r2, r3
 803cab8:	fb01 f303 	mul.w	r3, r1, r3
 803cabc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803cabe:	2b00      	cmp	r3, #0
 803cac0:	d112      	bne.n	803cae8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803cac2:	78fb      	ldrb	r3, [r7, #3]
 803cac4:	f003 020f 	and.w	r2, r3, #15
 803cac8:	6879      	ldr	r1, [r7, #4]
 803caca:	4613      	mov	r3, r2
 803cacc:	009b      	lsls	r3, r3, #2
 803cace:	4413      	add	r3, r2
 803cad0:	009b      	lsls	r3, r3, #2
 803cad2:	440b      	add	r3, r1
 803cad4:	3318      	adds	r3, #24
 803cad6:	2200      	movs	r2, #0
 803cad8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 803cada:	78f9      	ldrb	r1, [r7, #3]
 803cadc:	2300      	movs	r3, #0
 803cade:	2200      	movs	r2, #0
 803cae0:	6878      	ldr	r0, [r7, #4]
 803cae2:	f002 f95a 	bl	803ed9a <USBD_LL_Transmit>
 803cae6:	e01f      	b.n	803cb28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 803cae8:	68bb      	ldr	r3, [r7, #8]
 803caea:	2200      	movs	r2, #0
 803caec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 803caf0:	687b      	ldr	r3, [r7, #4]
 803caf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803caf6:	687a      	ldr	r2, [r7, #4]
 803caf8:	33b0      	adds	r3, #176	; 0xb0
 803cafa:	009b      	lsls	r3, r3, #2
 803cafc:	4413      	add	r3, r2
 803cafe:	685b      	ldr	r3, [r3, #4]
 803cb00:	691b      	ldr	r3, [r3, #16]
 803cb02:	2b00      	cmp	r3, #0
 803cb04:	d010      	beq.n	803cb28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803cb06:	687b      	ldr	r3, [r7, #4]
 803cb08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cb0c:	687a      	ldr	r2, [r7, #4]
 803cb0e:	33b0      	adds	r3, #176	; 0xb0
 803cb10:	009b      	lsls	r3, r3, #2
 803cb12:	4413      	add	r3, r2
 803cb14:	685b      	ldr	r3, [r3, #4]
 803cb16:	691b      	ldr	r3, [r3, #16]
 803cb18:	68ba      	ldr	r2, [r7, #8]
 803cb1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 803cb1e:	68ba      	ldr	r2, [r7, #8]
 803cb20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 803cb24:	78fa      	ldrb	r2, [r7, #3]
 803cb26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 803cb28:	2300      	movs	r3, #0
}
 803cb2a:	4618      	mov	r0, r3
 803cb2c:	3710      	adds	r7, #16
 803cb2e:	46bd      	mov	sp, r7
 803cb30:	bd80      	pop	{r7, pc}

0803cb32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803cb32:	b580      	push	{r7, lr}
 803cb34:	b084      	sub	sp, #16
 803cb36:	af00      	add	r7, sp, #0
 803cb38:	6078      	str	r0, [r7, #4]
 803cb3a:	460b      	mov	r3, r1
 803cb3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803cb3e:	687b      	ldr	r3, [r7, #4]
 803cb40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cb44:	687b      	ldr	r3, [r7, #4]
 803cb46:	32b0      	adds	r2, #176	; 0xb0
 803cb48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cb4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803cb4e:	687b      	ldr	r3, [r7, #4]
 803cb50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cb54:	687b      	ldr	r3, [r7, #4]
 803cb56:	32b0      	adds	r2, #176	; 0xb0
 803cb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cb5c:	2b00      	cmp	r3, #0
 803cb5e:	d101      	bne.n	803cb64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 803cb60:	2303      	movs	r3, #3
 803cb62:	e01a      	b.n	803cb9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 803cb64:	78fb      	ldrb	r3, [r7, #3]
 803cb66:	4619      	mov	r1, r3
 803cb68:	6878      	ldr	r0, [r7, #4]
 803cb6a:	f002 f958 	bl	803ee1e <USBD_LL_GetRxDataSize>
 803cb6e:	4602      	mov	r2, r0
 803cb70:	68fb      	ldr	r3, [r7, #12]
 803cb72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 803cb76:	687b      	ldr	r3, [r7, #4]
 803cb78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cb7c:	687a      	ldr	r2, [r7, #4]
 803cb7e:	33b0      	adds	r3, #176	; 0xb0
 803cb80:	009b      	lsls	r3, r3, #2
 803cb82:	4413      	add	r3, r2
 803cb84:	685b      	ldr	r3, [r3, #4]
 803cb86:	68db      	ldr	r3, [r3, #12]
 803cb88:	68fa      	ldr	r2, [r7, #12]
 803cb8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 803cb8e:	68fa      	ldr	r2, [r7, #12]
 803cb90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 803cb94:	4611      	mov	r1, r2
 803cb96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 803cb98:	2300      	movs	r3, #0
}
 803cb9a:	4618      	mov	r0, r3
 803cb9c:	3710      	adds	r7, #16
 803cb9e:	46bd      	mov	sp, r7
 803cba0:	bd80      	pop	{r7, pc}

0803cba2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 803cba2:	b580      	push	{r7, lr}
 803cba4:	b084      	sub	sp, #16
 803cba6:	af00      	add	r7, sp, #0
 803cba8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803cbaa:	687b      	ldr	r3, [r7, #4]
 803cbac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cbb0:	687b      	ldr	r3, [r7, #4]
 803cbb2:	32b0      	adds	r2, #176	; 0xb0
 803cbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cbb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803cbba:	68fb      	ldr	r3, [r7, #12]
 803cbbc:	2b00      	cmp	r3, #0
 803cbbe:	d101      	bne.n	803cbc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803cbc0:	2303      	movs	r3, #3
 803cbc2:	e025      	b.n	803cc10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 803cbc4:	687b      	ldr	r3, [r7, #4]
 803cbc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cbca:	687a      	ldr	r2, [r7, #4]
 803cbcc:	33b0      	adds	r3, #176	; 0xb0
 803cbce:	009b      	lsls	r3, r3, #2
 803cbd0:	4413      	add	r3, r2
 803cbd2:	685b      	ldr	r3, [r3, #4]
 803cbd4:	2b00      	cmp	r3, #0
 803cbd6:	d01a      	beq.n	803cc0e <USBD_CDC_EP0_RxReady+0x6c>
 803cbd8:	68fb      	ldr	r3, [r7, #12]
 803cbda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 803cbde:	2bff      	cmp	r3, #255	; 0xff
 803cbe0:	d015      	beq.n	803cc0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803cbe2:	687b      	ldr	r3, [r7, #4]
 803cbe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cbe8:	687a      	ldr	r2, [r7, #4]
 803cbea:	33b0      	adds	r3, #176	; 0xb0
 803cbec:	009b      	lsls	r3, r3, #2
 803cbee:	4413      	add	r3, r2
 803cbf0:	685b      	ldr	r3, [r3, #4]
 803cbf2:	689b      	ldr	r3, [r3, #8]
 803cbf4:	68fa      	ldr	r2, [r7, #12]
 803cbf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 803cbfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 803cbfc:	68fa      	ldr	r2, [r7, #12]
 803cbfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803cc02:	b292      	uxth	r2, r2
 803cc04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803cc06:	68fb      	ldr	r3, [r7, #12]
 803cc08:	22ff      	movs	r2, #255	; 0xff
 803cc0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 803cc0e:	2300      	movs	r3, #0
}
 803cc10:	4618      	mov	r0, r3
 803cc12:	3710      	adds	r7, #16
 803cc14:	46bd      	mov	sp, r7
 803cc16:	bd80      	pop	{r7, pc}

0803cc18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 803cc18:	b580      	push	{r7, lr}
 803cc1a:	b086      	sub	sp, #24
 803cc1c:	af00      	add	r7, sp, #0
 803cc1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803cc20:	2182      	movs	r1, #130	; 0x82
 803cc22:	4818      	ldr	r0, [pc, #96]	; (803cc84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803cc24:	f000 fd09 	bl	803d63a <USBD_GetEpDesc>
 803cc28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803cc2a:	2101      	movs	r1, #1
 803cc2c:	4815      	ldr	r0, [pc, #84]	; (803cc84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803cc2e:	f000 fd04 	bl	803d63a <USBD_GetEpDesc>
 803cc32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803cc34:	2181      	movs	r1, #129	; 0x81
 803cc36:	4813      	ldr	r0, [pc, #76]	; (803cc84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803cc38:	f000 fcff 	bl	803d63a <USBD_GetEpDesc>
 803cc3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803cc3e:	697b      	ldr	r3, [r7, #20]
 803cc40:	2b00      	cmp	r3, #0
 803cc42:	d002      	beq.n	803cc4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803cc44:	697b      	ldr	r3, [r7, #20]
 803cc46:	2210      	movs	r2, #16
 803cc48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803cc4a:	693b      	ldr	r3, [r7, #16]
 803cc4c:	2b00      	cmp	r3, #0
 803cc4e:	d006      	beq.n	803cc5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803cc50:	693b      	ldr	r3, [r7, #16]
 803cc52:	2200      	movs	r2, #0
 803cc54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803cc58:	711a      	strb	r2, [r3, #4]
 803cc5a:	2200      	movs	r2, #0
 803cc5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803cc5e:	68fb      	ldr	r3, [r7, #12]
 803cc60:	2b00      	cmp	r3, #0
 803cc62:	d006      	beq.n	803cc72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803cc64:	68fb      	ldr	r3, [r7, #12]
 803cc66:	2200      	movs	r2, #0
 803cc68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803cc6c:	711a      	strb	r2, [r3, #4]
 803cc6e:	2200      	movs	r2, #0
 803cc70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803cc72:	687b      	ldr	r3, [r7, #4]
 803cc74:	2243      	movs	r2, #67	; 0x43
 803cc76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803cc78:	4b02      	ldr	r3, [pc, #8]	; (803cc84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 803cc7a:	4618      	mov	r0, r3
 803cc7c:	3718      	adds	r7, #24
 803cc7e:	46bd      	mov	sp, r7
 803cc80:	bd80      	pop	{r7, pc}
 803cc82:	bf00      	nop
 803cc84:	24000058 	.word	0x24000058

0803cc88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 803cc88:	b580      	push	{r7, lr}
 803cc8a:	b086      	sub	sp, #24
 803cc8c:	af00      	add	r7, sp, #0
 803cc8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803cc90:	2182      	movs	r1, #130	; 0x82
 803cc92:	4818      	ldr	r0, [pc, #96]	; (803ccf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803cc94:	f000 fcd1 	bl	803d63a <USBD_GetEpDesc>
 803cc98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803cc9a:	2101      	movs	r1, #1
 803cc9c:	4815      	ldr	r0, [pc, #84]	; (803ccf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803cc9e:	f000 fccc 	bl	803d63a <USBD_GetEpDesc>
 803cca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803cca4:	2181      	movs	r1, #129	; 0x81
 803cca6:	4813      	ldr	r0, [pc, #76]	; (803ccf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803cca8:	f000 fcc7 	bl	803d63a <USBD_GetEpDesc>
 803ccac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803ccae:	697b      	ldr	r3, [r7, #20]
 803ccb0:	2b00      	cmp	r3, #0
 803ccb2:	d002      	beq.n	803ccba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 803ccb4:	697b      	ldr	r3, [r7, #20]
 803ccb6:	2210      	movs	r2, #16
 803ccb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803ccba:	693b      	ldr	r3, [r7, #16]
 803ccbc:	2b00      	cmp	r3, #0
 803ccbe:	d006      	beq.n	803ccce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803ccc0:	693b      	ldr	r3, [r7, #16]
 803ccc2:	2200      	movs	r2, #0
 803ccc4:	711a      	strb	r2, [r3, #4]
 803ccc6:	2200      	movs	r2, #0
 803ccc8:	f042 0202 	orr.w	r2, r2, #2
 803cccc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803ccce:	68fb      	ldr	r3, [r7, #12]
 803ccd0:	2b00      	cmp	r3, #0
 803ccd2:	d006      	beq.n	803cce2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803ccd4:	68fb      	ldr	r3, [r7, #12]
 803ccd6:	2200      	movs	r2, #0
 803ccd8:	711a      	strb	r2, [r3, #4]
 803ccda:	2200      	movs	r2, #0
 803ccdc:	f042 0202 	orr.w	r2, r2, #2
 803cce0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803cce2:	687b      	ldr	r3, [r7, #4]
 803cce4:	2243      	movs	r2, #67	; 0x43
 803cce6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803cce8:	4b02      	ldr	r3, [pc, #8]	; (803ccf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 803ccea:	4618      	mov	r0, r3
 803ccec:	3718      	adds	r7, #24
 803ccee:	46bd      	mov	sp, r7
 803ccf0:	bd80      	pop	{r7, pc}
 803ccf2:	bf00      	nop
 803ccf4:	24000058 	.word	0x24000058

0803ccf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 803ccf8:	b580      	push	{r7, lr}
 803ccfa:	b086      	sub	sp, #24
 803ccfc:	af00      	add	r7, sp, #0
 803ccfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803cd00:	2182      	movs	r1, #130	; 0x82
 803cd02:	4818      	ldr	r0, [pc, #96]	; (803cd64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803cd04:	f000 fc99 	bl	803d63a <USBD_GetEpDesc>
 803cd08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803cd0a:	2101      	movs	r1, #1
 803cd0c:	4815      	ldr	r0, [pc, #84]	; (803cd64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803cd0e:	f000 fc94 	bl	803d63a <USBD_GetEpDesc>
 803cd12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803cd14:	2181      	movs	r1, #129	; 0x81
 803cd16:	4813      	ldr	r0, [pc, #76]	; (803cd64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803cd18:	f000 fc8f 	bl	803d63a <USBD_GetEpDesc>
 803cd1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803cd1e:	697b      	ldr	r3, [r7, #20]
 803cd20:	2b00      	cmp	r3, #0
 803cd22:	d002      	beq.n	803cd2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803cd24:	697b      	ldr	r3, [r7, #20]
 803cd26:	2210      	movs	r2, #16
 803cd28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803cd2a:	693b      	ldr	r3, [r7, #16]
 803cd2c:	2b00      	cmp	r3, #0
 803cd2e:	d006      	beq.n	803cd3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803cd30:	693b      	ldr	r3, [r7, #16]
 803cd32:	2200      	movs	r2, #0
 803cd34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803cd38:	711a      	strb	r2, [r3, #4]
 803cd3a:	2200      	movs	r2, #0
 803cd3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803cd3e:	68fb      	ldr	r3, [r7, #12]
 803cd40:	2b00      	cmp	r3, #0
 803cd42:	d006      	beq.n	803cd52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803cd44:	68fb      	ldr	r3, [r7, #12]
 803cd46:	2200      	movs	r2, #0
 803cd48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803cd4c:	711a      	strb	r2, [r3, #4]
 803cd4e:	2200      	movs	r2, #0
 803cd50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803cd52:	687b      	ldr	r3, [r7, #4]
 803cd54:	2243      	movs	r2, #67	; 0x43
 803cd56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803cd58:	4b02      	ldr	r3, [pc, #8]	; (803cd64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 803cd5a:	4618      	mov	r0, r3
 803cd5c:	3718      	adds	r7, #24
 803cd5e:	46bd      	mov	sp, r7
 803cd60:	bd80      	pop	{r7, pc}
 803cd62:	bf00      	nop
 803cd64:	24000058 	.word	0x24000058

0803cd68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 803cd68:	b480      	push	{r7}
 803cd6a:	b083      	sub	sp, #12
 803cd6c:	af00      	add	r7, sp, #0
 803cd6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 803cd70:	687b      	ldr	r3, [r7, #4]
 803cd72:	220a      	movs	r2, #10
 803cd74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 803cd76:	4b03      	ldr	r3, [pc, #12]	; (803cd84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 803cd78:	4618      	mov	r0, r3
 803cd7a:	370c      	adds	r7, #12
 803cd7c:	46bd      	mov	sp, r7
 803cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cd82:	4770      	bx	lr
 803cd84:	24000014 	.word	0x24000014

0803cd88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 803cd88:	b480      	push	{r7}
 803cd8a:	b083      	sub	sp, #12
 803cd8c:	af00      	add	r7, sp, #0
 803cd8e:	6078      	str	r0, [r7, #4]
 803cd90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 803cd92:	683b      	ldr	r3, [r7, #0]
 803cd94:	2b00      	cmp	r3, #0
 803cd96:	d101      	bne.n	803cd9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 803cd98:	2303      	movs	r3, #3
 803cd9a:	e009      	b.n	803cdb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 803cd9c:	687b      	ldr	r3, [r7, #4]
 803cd9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cda2:	687a      	ldr	r2, [r7, #4]
 803cda4:	33b0      	adds	r3, #176	; 0xb0
 803cda6:	009b      	lsls	r3, r3, #2
 803cda8:	4413      	add	r3, r2
 803cdaa:	683a      	ldr	r2, [r7, #0]
 803cdac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 803cdae:	2300      	movs	r3, #0
}
 803cdb0:	4618      	mov	r0, r3
 803cdb2:	370c      	adds	r7, #12
 803cdb4:	46bd      	mov	sp, r7
 803cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cdba:	4770      	bx	lr

0803cdbc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 803cdbc:	b480      	push	{r7}
 803cdbe:	b087      	sub	sp, #28
 803cdc0:	af00      	add	r7, sp, #0
 803cdc2:	60f8      	str	r0, [r7, #12]
 803cdc4:	60b9      	str	r1, [r7, #8]
 803cdc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803cdc8:	68fb      	ldr	r3, [r7, #12]
 803cdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cdce:	68fb      	ldr	r3, [r7, #12]
 803cdd0:	32b0      	adds	r2, #176	; 0xb0
 803cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cdd6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 803cdd8:	697b      	ldr	r3, [r7, #20]
 803cdda:	2b00      	cmp	r3, #0
 803cddc:	d101      	bne.n	803cde2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 803cdde:	2303      	movs	r3, #3
 803cde0:	e008      	b.n	803cdf4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 803cde2:	697b      	ldr	r3, [r7, #20]
 803cde4:	68ba      	ldr	r2, [r7, #8]
 803cde6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 803cdea:	697b      	ldr	r3, [r7, #20]
 803cdec:	687a      	ldr	r2, [r7, #4]
 803cdee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 803cdf2:	2300      	movs	r3, #0
}
 803cdf4:	4618      	mov	r0, r3
 803cdf6:	371c      	adds	r7, #28
 803cdf8:	46bd      	mov	sp, r7
 803cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cdfe:	4770      	bx	lr

0803ce00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 803ce00:	b480      	push	{r7}
 803ce02:	b085      	sub	sp, #20
 803ce04:	af00      	add	r7, sp, #0
 803ce06:	6078      	str	r0, [r7, #4]
 803ce08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803ce0a:	687b      	ldr	r3, [r7, #4]
 803ce0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ce10:	687b      	ldr	r3, [r7, #4]
 803ce12:	32b0      	adds	r2, #176	; 0xb0
 803ce14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ce18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803ce1a:	68fb      	ldr	r3, [r7, #12]
 803ce1c:	2b00      	cmp	r3, #0
 803ce1e:	d101      	bne.n	803ce24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 803ce20:	2303      	movs	r3, #3
 803ce22:	e004      	b.n	803ce2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 803ce24:	68fb      	ldr	r3, [r7, #12]
 803ce26:	683a      	ldr	r2, [r7, #0]
 803ce28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 803ce2c:	2300      	movs	r3, #0
}
 803ce2e:	4618      	mov	r0, r3
 803ce30:	3714      	adds	r7, #20
 803ce32:	46bd      	mov	sp, r7
 803ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ce38:	4770      	bx	lr
	...

0803ce3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 803ce3c:	b580      	push	{r7, lr}
 803ce3e:	b084      	sub	sp, #16
 803ce40:	af00      	add	r7, sp, #0
 803ce42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803ce44:	687b      	ldr	r3, [r7, #4]
 803ce46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ce4a:	687b      	ldr	r3, [r7, #4]
 803ce4c:	32b0      	adds	r2, #176	; 0xb0
 803ce4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ce52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803ce54:	687b      	ldr	r3, [r7, #4]
 803ce56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ce5a:	687b      	ldr	r3, [r7, #4]
 803ce5c:	32b0      	adds	r2, #176	; 0xb0
 803ce5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ce62:	2b00      	cmp	r3, #0
 803ce64:	d101      	bne.n	803ce6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 803ce66:	2303      	movs	r3, #3
 803ce68:	e018      	b.n	803ce9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ce6a:	687b      	ldr	r3, [r7, #4]
 803ce6c:	7c1b      	ldrb	r3, [r3, #16]
 803ce6e:	2b00      	cmp	r3, #0
 803ce70:	d10a      	bne.n	803ce88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803ce72:	4b0c      	ldr	r3, [pc, #48]	; (803cea4 <USBD_CDC_ReceivePacket+0x68>)
 803ce74:	7819      	ldrb	r1, [r3, #0]
 803ce76:	68fb      	ldr	r3, [r7, #12]
 803ce78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803ce7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 803ce80:	6878      	ldr	r0, [r7, #4]
 803ce82:	f001 ffab 	bl	803eddc <USBD_LL_PrepareReceive>
 803ce86:	e008      	b.n	803ce9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803ce88:	4b06      	ldr	r3, [pc, #24]	; (803cea4 <USBD_CDC_ReceivePacket+0x68>)
 803ce8a:	7819      	ldrb	r1, [r3, #0]
 803ce8c:	68fb      	ldr	r3, [r7, #12]
 803ce8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803ce92:	2340      	movs	r3, #64	; 0x40
 803ce94:	6878      	ldr	r0, [r7, #4]
 803ce96:	f001 ffa1 	bl	803eddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803ce9a:	2300      	movs	r3, #0
}
 803ce9c:	4618      	mov	r0, r3
 803ce9e:	3710      	adds	r7, #16
 803cea0:	46bd      	mov	sp, r7
 803cea2:	bd80      	pop	{r7, pc}
 803cea4:	2400009c 	.word	0x2400009c

0803cea8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 803cea8:	b580      	push	{r7, lr}
 803ceaa:	b086      	sub	sp, #24
 803ceac:	af00      	add	r7, sp, #0
 803ceae:	60f8      	str	r0, [r7, #12]
 803ceb0:	60b9      	str	r1, [r7, #8]
 803ceb2:	4613      	mov	r3, r2
 803ceb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 803ceb6:	68fb      	ldr	r3, [r7, #12]
 803ceb8:	2b00      	cmp	r3, #0
 803ceba:	d101      	bne.n	803cec0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803cebc:	2303      	movs	r3, #3
 803cebe:	e01f      	b.n	803cf00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 803cec0:	68fb      	ldr	r3, [r7, #12]
 803cec2:	2200      	movs	r2, #0
 803cec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 803cec8:	68fb      	ldr	r3, [r7, #12]
 803ceca:	2200      	movs	r2, #0
 803cecc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 803ced0:	68fb      	ldr	r3, [r7, #12]
 803ced2:	2200      	movs	r2, #0
 803ced4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 803ced8:	68bb      	ldr	r3, [r7, #8]
 803ceda:	2b00      	cmp	r3, #0
 803cedc:	d003      	beq.n	803cee6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 803cede:	68fb      	ldr	r3, [r7, #12]
 803cee0:	68ba      	ldr	r2, [r7, #8]
 803cee2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803cee6:	68fb      	ldr	r3, [r7, #12]
 803cee8:	2201      	movs	r2, #1
 803ceea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 803ceee:	68fb      	ldr	r3, [r7, #12]
 803cef0:	79fa      	ldrb	r2, [r7, #7]
 803cef2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 803cef4:	68f8      	ldr	r0, [r7, #12]
 803cef6:	f001 fe17 	bl	803eb28 <USBD_LL_Init>
 803cefa:	4603      	mov	r3, r0
 803cefc:	75fb      	strb	r3, [r7, #23]

  return ret;
 803cefe:	7dfb      	ldrb	r3, [r7, #23]
}
 803cf00:	4618      	mov	r0, r3
 803cf02:	3718      	adds	r7, #24
 803cf04:	46bd      	mov	sp, r7
 803cf06:	bd80      	pop	{r7, pc}

0803cf08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 803cf08:	b580      	push	{r7, lr}
 803cf0a:	b084      	sub	sp, #16
 803cf0c:	af00      	add	r7, sp, #0
 803cf0e:	6078      	str	r0, [r7, #4]
 803cf10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803cf12:	2300      	movs	r3, #0
 803cf14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 803cf16:	683b      	ldr	r3, [r7, #0]
 803cf18:	2b00      	cmp	r3, #0
 803cf1a:	d101      	bne.n	803cf20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803cf1c:	2303      	movs	r3, #3
 803cf1e:	e025      	b.n	803cf6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 803cf20:	687b      	ldr	r3, [r7, #4]
 803cf22:	683a      	ldr	r2, [r7, #0]
 803cf24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 803cf28:	687b      	ldr	r3, [r7, #4]
 803cf2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cf2e:	687b      	ldr	r3, [r7, #4]
 803cf30:	32ae      	adds	r2, #174	; 0xae
 803cf32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803cf38:	2b00      	cmp	r3, #0
 803cf3a:	d00f      	beq.n	803cf5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 803cf3c:	687b      	ldr	r3, [r7, #4]
 803cf3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cf42:	687b      	ldr	r3, [r7, #4]
 803cf44:	32ae      	adds	r2, #174	; 0xae
 803cf46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803cf4c:	f107 020e 	add.w	r2, r7, #14
 803cf50:	4610      	mov	r0, r2
 803cf52:	4798      	blx	r3
 803cf54:	4602      	mov	r2, r0
 803cf56:	687b      	ldr	r3, [r7, #4]
 803cf58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 803cf5c:	687b      	ldr	r3, [r7, #4]
 803cf5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 803cf62:	1c5a      	adds	r2, r3, #1
 803cf64:	687b      	ldr	r3, [r7, #4]
 803cf66:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 803cf6a:	2300      	movs	r3, #0
}
 803cf6c:	4618      	mov	r0, r3
 803cf6e:	3710      	adds	r7, #16
 803cf70:	46bd      	mov	sp, r7
 803cf72:	bd80      	pop	{r7, pc}

0803cf74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 803cf74:	b580      	push	{r7, lr}
 803cf76:	b082      	sub	sp, #8
 803cf78:	af00      	add	r7, sp, #0
 803cf7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 803cf7c:	6878      	ldr	r0, [r7, #4]
 803cf7e:	f001 fe23 	bl	803ebc8 <USBD_LL_Start>
 803cf82:	4603      	mov	r3, r0
}
 803cf84:	4618      	mov	r0, r3
 803cf86:	3708      	adds	r7, #8
 803cf88:	46bd      	mov	sp, r7
 803cf8a:	bd80      	pop	{r7, pc}

0803cf8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 803cf8c:	b480      	push	{r7}
 803cf8e:	b083      	sub	sp, #12
 803cf90:	af00      	add	r7, sp, #0
 803cf92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803cf94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 803cf96:	4618      	mov	r0, r3
 803cf98:	370c      	adds	r7, #12
 803cf9a:	46bd      	mov	sp, r7
 803cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cfa0:	4770      	bx	lr

0803cfa2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803cfa2:	b580      	push	{r7, lr}
 803cfa4:	b084      	sub	sp, #16
 803cfa6:	af00      	add	r7, sp, #0
 803cfa8:	6078      	str	r0, [r7, #4]
 803cfaa:	460b      	mov	r3, r1
 803cfac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803cfae:	2300      	movs	r3, #0
 803cfb0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803cfb2:	687b      	ldr	r3, [r7, #4]
 803cfb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803cfb8:	2b00      	cmp	r3, #0
 803cfba:	d009      	beq.n	803cfd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 803cfbc:	687b      	ldr	r3, [r7, #4]
 803cfbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803cfc2:	681b      	ldr	r3, [r3, #0]
 803cfc4:	78fa      	ldrb	r2, [r7, #3]
 803cfc6:	4611      	mov	r1, r2
 803cfc8:	6878      	ldr	r0, [r7, #4]
 803cfca:	4798      	blx	r3
 803cfcc:	4603      	mov	r3, r0
 803cfce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803cfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 803cfd2:	4618      	mov	r0, r3
 803cfd4:	3710      	adds	r7, #16
 803cfd6:	46bd      	mov	sp, r7
 803cfd8:	bd80      	pop	{r7, pc}

0803cfda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803cfda:	b580      	push	{r7, lr}
 803cfdc:	b084      	sub	sp, #16
 803cfde:	af00      	add	r7, sp, #0
 803cfe0:	6078      	str	r0, [r7, #4]
 803cfe2:	460b      	mov	r3, r1
 803cfe4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803cfe6:	2300      	movs	r3, #0
 803cfe8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 803cfea:	687b      	ldr	r3, [r7, #4]
 803cfec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803cff0:	685b      	ldr	r3, [r3, #4]
 803cff2:	78fa      	ldrb	r2, [r7, #3]
 803cff4:	4611      	mov	r1, r2
 803cff6:	6878      	ldr	r0, [r7, #4]
 803cff8:	4798      	blx	r3
 803cffa:	4603      	mov	r3, r0
 803cffc:	2b00      	cmp	r3, #0
 803cffe:	d001      	beq.n	803d004 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 803d000:	2303      	movs	r3, #3
 803d002:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803d004:	7bfb      	ldrb	r3, [r7, #15]
}
 803d006:	4618      	mov	r0, r3
 803d008:	3710      	adds	r7, #16
 803d00a:	46bd      	mov	sp, r7
 803d00c:	bd80      	pop	{r7, pc}

0803d00e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 803d00e:	b580      	push	{r7, lr}
 803d010:	b084      	sub	sp, #16
 803d012:	af00      	add	r7, sp, #0
 803d014:	6078      	str	r0, [r7, #4]
 803d016:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 803d018:	687b      	ldr	r3, [r7, #4]
 803d01a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d01e:	6839      	ldr	r1, [r7, #0]
 803d020:	4618      	mov	r0, r3
 803d022:	f001 f908 	bl	803e236 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 803d026:	687b      	ldr	r3, [r7, #4]
 803d028:	2201      	movs	r2, #1
 803d02a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 803d02e:	687b      	ldr	r3, [r7, #4]
 803d030:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 803d034:	461a      	mov	r2, r3
 803d036:	687b      	ldr	r3, [r7, #4]
 803d038:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 803d03c:	687b      	ldr	r3, [r7, #4]
 803d03e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803d042:	f003 031f 	and.w	r3, r3, #31
 803d046:	2b02      	cmp	r3, #2
 803d048:	d01a      	beq.n	803d080 <USBD_LL_SetupStage+0x72>
 803d04a:	2b02      	cmp	r3, #2
 803d04c:	d822      	bhi.n	803d094 <USBD_LL_SetupStage+0x86>
 803d04e:	2b00      	cmp	r3, #0
 803d050:	d002      	beq.n	803d058 <USBD_LL_SetupStage+0x4a>
 803d052:	2b01      	cmp	r3, #1
 803d054:	d00a      	beq.n	803d06c <USBD_LL_SetupStage+0x5e>
 803d056:	e01d      	b.n	803d094 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 803d058:	687b      	ldr	r3, [r7, #4]
 803d05a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d05e:	4619      	mov	r1, r3
 803d060:	6878      	ldr	r0, [r7, #4]
 803d062:	f000 fb5f 	bl	803d724 <USBD_StdDevReq>
 803d066:	4603      	mov	r3, r0
 803d068:	73fb      	strb	r3, [r7, #15]
      break;
 803d06a:	e020      	b.n	803d0ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 803d06c:	687b      	ldr	r3, [r7, #4]
 803d06e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d072:	4619      	mov	r1, r3
 803d074:	6878      	ldr	r0, [r7, #4]
 803d076:	f000 fbc7 	bl	803d808 <USBD_StdItfReq>
 803d07a:	4603      	mov	r3, r0
 803d07c:	73fb      	strb	r3, [r7, #15]
      break;
 803d07e:	e016      	b.n	803d0ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 803d080:	687b      	ldr	r3, [r7, #4]
 803d082:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d086:	4619      	mov	r1, r3
 803d088:	6878      	ldr	r0, [r7, #4]
 803d08a:	f000 fc29 	bl	803d8e0 <USBD_StdEPReq>
 803d08e:	4603      	mov	r3, r0
 803d090:	73fb      	strb	r3, [r7, #15]
      break;
 803d092:	e00c      	b.n	803d0ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 803d094:	687b      	ldr	r3, [r7, #4]
 803d096:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803d09a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 803d09e:	b2db      	uxtb	r3, r3
 803d0a0:	4619      	mov	r1, r3
 803d0a2:	6878      	ldr	r0, [r7, #4]
 803d0a4:	f001 fdf0 	bl	803ec88 <USBD_LL_StallEP>
 803d0a8:	4603      	mov	r3, r0
 803d0aa:	73fb      	strb	r3, [r7, #15]
      break;
 803d0ac:	bf00      	nop
  }

  return ret;
 803d0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 803d0b0:	4618      	mov	r0, r3
 803d0b2:	3710      	adds	r7, #16
 803d0b4:	46bd      	mov	sp, r7
 803d0b6:	bd80      	pop	{r7, pc}

0803d0b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 803d0b8:	b580      	push	{r7, lr}
 803d0ba:	b086      	sub	sp, #24
 803d0bc:	af00      	add	r7, sp, #0
 803d0be:	60f8      	str	r0, [r7, #12]
 803d0c0:	460b      	mov	r3, r1
 803d0c2:	607a      	str	r2, [r7, #4]
 803d0c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 803d0c6:	2300      	movs	r3, #0
 803d0c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 803d0ca:	7afb      	ldrb	r3, [r7, #11]
 803d0cc:	2b00      	cmp	r3, #0
 803d0ce:	d16e      	bne.n	803d1ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 803d0d0:	68fb      	ldr	r3, [r7, #12]
 803d0d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 803d0d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 803d0d8:	68fb      	ldr	r3, [r7, #12]
 803d0da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803d0de:	2b03      	cmp	r3, #3
 803d0e0:	f040 8098 	bne.w	803d214 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 803d0e4:	693b      	ldr	r3, [r7, #16]
 803d0e6:	689a      	ldr	r2, [r3, #8]
 803d0e8:	693b      	ldr	r3, [r7, #16]
 803d0ea:	68db      	ldr	r3, [r3, #12]
 803d0ec:	429a      	cmp	r2, r3
 803d0ee:	d913      	bls.n	803d118 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 803d0f0:	693b      	ldr	r3, [r7, #16]
 803d0f2:	689a      	ldr	r2, [r3, #8]
 803d0f4:	693b      	ldr	r3, [r7, #16]
 803d0f6:	68db      	ldr	r3, [r3, #12]
 803d0f8:	1ad2      	subs	r2, r2, r3
 803d0fa:	693b      	ldr	r3, [r7, #16]
 803d0fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 803d0fe:	693b      	ldr	r3, [r7, #16]
 803d100:	68da      	ldr	r2, [r3, #12]
 803d102:	693b      	ldr	r3, [r7, #16]
 803d104:	689b      	ldr	r3, [r3, #8]
 803d106:	4293      	cmp	r3, r2
 803d108:	bf28      	it	cs
 803d10a:	4613      	movcs	r3, r2
 803d10c:	461a      	mov	r2, r3
 803d10e:	6879      	ldr	r1, [r7, #4]
 803d110:	68f8      	ldr	r0, [r7, #12]
 803d112:	f001 f984 	bl	803e41e <USBD_CtlContinueRx>
 803d116:	e07d      	b.n	803d214 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 803d118:	68fb      	ldr	r3, [r7, #12]
 803d11a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803d11e:	f003 031f 	and.w	r3, r3, #31
 803d122:	2b02      	cmp	r3, #2
 803d124:	d014      	beq.n	803d150 <USBD_LL_DataOutStage+0x98>
 803d126:	2b02      	cmp	r3, #2
 803d128:	d81d      	bhi.n	803d166 <USBD_LL_DataOutStage+0xae>
 803d12a:	2b00      	cmp	r3, #0
 803d12c:	d002      	beq.n	803d134 <USBD_LL_DataOutStage+0x7c>
 803d12e:	2b01      	cmp	r3, #1
 803d130:	d003      	beq.n	803d13a <USBD_LL_DataOutStage+0x82>
 803d132:	e018      	b.n	803d166 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 803d134:	2300      	movs	r3, #0
 803d136:	75bb      	strb	r3, [r7, #22]
            break;
 803d138:	e018      	b.n	803d16c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 803d13a:	68fb      	ldr	r3, [r7, #12]
 803d13c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803d140:	b2db      	uxtb	r3, r3
 803d142:	4619      	mov	r1, r3
 803d144:	68f8      	ldr	r0, [r7, #12]
 803d146:	f000 fa5e 	bl	803d606 <USBD_CoreFindIF>
 803d14a:	4603      	mov	r3, r0
 803d14c:	75bb      	strb	r3, [r7, #22]
            break;
 803d14e:	e00d      	b.n	803d16c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 803d150:	68fb      	ldr	r3, [r7, #12]
 803d152:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803d156:	b2db      	uxtb	r3, r3
 803d158:	4619      	mov	r1, r3
 803d15a:	68f8      	ldr	r0, [r7, #12]
 803d15c:	f000 fa60 	bl	803d620 <USBD_CoreFindEP>
 803d160:	4603      	mov	r3, r0
 803d162:	75bb      	strb	r3, [r7, #22]
            break;
 803d164:	e002      	b.n	803d16c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 803d166:	2300      	movs	r3, #0
 803d168:	75bb      	strb	r3, [r7, #22]
            break;
 803d16a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 803d16c:	7dbb      	ldrb	r3, [r7, #22]
 803d16e:	2b00      	cmp	r3, #0
 803d170:	d119      	bne.n	803d1a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d172:	68fb      	ldr	r3, [r7, #12]
 803d174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d178:	b2db      	uxtb	r3, r3
 803d17a:	2b03      	cmp	r3, #3
 803d17c:	d113      	bne.n	803d1a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 803d17e:	7dba      	ldrb	r2, [r7, #22]
 803d180:	68fb      	ldr	r3, [r7, #12]
 803d182:	32ae      	adds	r2, #174	; 0xae
 803d184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d188:	691b      	ldr	r3, [r3, #16]
 803d18a:	2b00      	cmp	r3, #0
 803d18c:	d00b      	beq.n	803d1a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 803d18e:	7dba      	ldrb	r2, [r7, #22]
 803d190:	68fb      	ldr	r3, [r7, #12]
 803d192:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 803d196:	7dba      	ldrb	r2, [r7, #22]
 803d198:	68fb      	ldr	r3, [r7, #12]
 803d19a:	32ae      	adds	r2, #174	; 0xae
 803d19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d1a0:	691b      	ldr	r3, [r3, #16]
 803d1a2:	68f8      	ldr	r0, [r7, #12]
 803d1a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 803d1a6:	68f8      	ldr	r0, [r7, #12]
 803d1a8:	f001 f94a 	bl	803e440 <USBD_CtlSendStatus>
 803d1ac:	e032      	b.n	803d214 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 803d1ae:	7afb      	ldrb	r3, [r7, #11]
 803d1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803d1b4:	b2db      	uxtb	r3, r3
 803d1b6:	4619      	mov	r1, r3
 803d1b8:	68f8      	ldr	r0, [r7, #12]
 803d1ba:	f000 fa31 	bl	803d620 <USBD_CoreFindEP>
 803d1be:	4603      	mov	r3, r0
 803d1c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803d1c2:	7dbb      	ldrb	r3, [r7, #22]
 803d1c4:	2bff      	cmp	r3, #255	; 0xff
 803d1c6:	d025      	beq.n	803d214 <USBD_LL_DataOutStage+0x15c>
 803d1c8:	7dbb      	ldrb	r3, [r7, #22]
 803d1ca:	2b00      	cmp	r3, #0
 803d1cc:	d122      	bne.n	803d214 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d1ce:	68fb      	ldr	r3, [r7, #12]
 803d1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d1d4:	b2db      	uxtb	r3, r3
 803d1d6:	2b03      	cmp	r3, #3
 803d1d8:	d117      	bne.n	803d20a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 803d1da:	7dba      	ldrb	r2, [r7, #22]
 803d1dc:	68fb      	ldr	r3, [r7, #12]
 803d1de:	32ae      	adds	r2, #174	; 0xae
 803d1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d1e4:	699b      	ldr	r3, [r3, #24]
 803d1e6:	2b00      	cmp	r3, #0
 803d1e8:	d00f      	beq.n	803d20a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803d1ea:	7dba      	ldrb	r2, [r7, #22]
 803d1ec:	68fb      	ldr	r3, [r7, #12]
 803d1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803d1f2:	7dba      	ldrb	r2, [r7, #22]
 803d1f4:	68fb      	ldr	r3, [r7, #12]
 803d1f6:	32ae      	adds	r2, #174	; 0xae
 803d1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d1fc:	699b      	ldr	r3, [r3, #24]
 803d1fe:	7afa      	ldrb	r2, [r7, #11]
 803d200:	4611      	mov	r1, r2
 803d202:	68f8      	ldr	r0, [r7, #12]
 803d204:	4798      	blx	r3
 803d206:	4603      	mov	r3, r0
 803d208:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803d20a:	7dfb      	ldrb	r3, [r7, #23]
 803d20c:	2b00      	cmp	r3, #0
 803d20e:	d001      	beq.n	803d214 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803d210:	7dfb      	ldrb	r3, [r7, #23]
 803d212:	e000      	b.n	803d216 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803d214:	2300      	movs	r3, #0
}
 803d216:	4618      	mov	r0, r3
 803d218:	3718      	adds	r7, #24
 803d21a:	46bd      	mov	sp, r7
 803d21c:	bd80      	pop	{r7, pc}

0803d21e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803d21e:	b580      	push	{r7, lr}
 803d220:	b086      	sub	sp, #24
 803d222:	af00      	add	r7, sp, #0
 803d224:	60f8      	str	r0, [r7, #12]
 803d226:	460b      	mov	r3, r1
 803d228:	607a      	str	r2, [r7, #4]
 803d22a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803d22c:	7afb      	ldrb	r3, [r7, #11]
 803d22e:	2b00      	cmp	r3, #0
 803d230:	d16f      	bne.n	803d312 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803d232:	68fb      	ldr	r3, [r7, #12]
 803d234:	3314      	adds	r3, #20
 803d236:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803d238:	68fb      	ldr	r3, [r7, #12]
 803d23a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803d23e:	2b02      	cmp	r3, #2
 803d240:	d15a      	bne.n	803d2f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803d242:	693b      	ldr	r3, [r7, #16]
 803d244:	689a      	ldr	r2, [r3, #8]
 803d246:	693b      	ldr	r3, [r7, #16]
 803d248:	68db      	ldr	r3, [r3, #12]
 803d24a:	429a      	cmp	r2, r3
 803d24c:	d914      	bls.n	803d278 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803d24e:	693b      	ldr	r3, [r7, #16]
 803d250:	689a      	ldr	r2, [r3, #8]
 803d252:	693b      	ldr	r3, [r7, #16]
 803d254:	68db      	ldr	r3, [r3, #12]
 803d256:	1ad2      	subs	r2, r2, r3
 803d258:	693b      	ldr	r3, [r7, #16]
 803d25a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803d25c:	693b      	ldr	r3, [r7, #16]
 803d25e:	689b      	ldr	r3, [r3, #8]
 803d260:	461a      	mov	r2, r3
 803d262:	6879      	ldr	r1, [r7, #4]
 803d264:	68f8      	ldr	r0, [r7, #12]
 803d266:	f001 f8ac 	bl	803e3c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803d26a:	2300      	movs	r3, #0
 803d26c:	2200      	movs	r2, #0
 803d26e:	2100      	movs	r1, #0
 803d270:	68f8      	ldr	r0, [r7, #12]
 803d272:	f001 fdb3 	bl	803eddc <USBD_LL_PrepareReceive>
 803d276:	e03f      	b.n	803d2f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803d278:	693b      	ldr	r3, [r7, #16]
 803d27a:	68da      	ldr	r2, [r3, #12]
 803d27c:	693b      	ldr	r3, [r7, #16]
 803d27e:	689b      	ldr	r3, [r3, #8]
 803d280:	429a      	cmp	r2, r3
 803d282:	d11c      	bne.n	803d2be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803d284:	693b      	ldr	r3, [r7, #16]
 803d286:	685a      	ldr	r2, [r3, #4]
 803d288:	693b      	ldr	r3, [r7, #16]
 803d28a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803d28c:	429a      	cmp	r2, r3
 803d28e:	d316      	bcc.n	803d2be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803d290:	693b      	ldr	r3, [r7, #16]
 803d292:	685a      	ldr	r2, [r3, #4]
 803d294:	68fb      	ldr	r3, [r7, #12]
 803d296:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803d29a:	429a      	cmp	r2, r3
 803d29c:	d20f      	bcs.n	803d2be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803d29e:	2200      	movs	r2, #0
 803d2a0:	2100      	movs	r1, #0
 803d2a2:	68f8      	ldr	r0, [r7, #12]
 803d2a4:	f001 f88d 	bl	803e3c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803d2a8:	68fb      	ldr	r3, [r7, #12]
 803d2aa:	2200      	movs	r2, #0
 803d2ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803d2b0:	2300      	movs	r3, #0
 803d2b2:	2200      	movs	r2, #0
 803d2b4:	2100      	movs	r1, #0
 803d2b6:	68f8      	ldr	r0, [r7, #12]
 803d2b8:	f001 fd90 	bl	803eddc <USBD_LL_PrepareReceive>
 803d2bc:	e01c      	b.n	803d2f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d2be:	68fb      	ldr	r3, [r7, #12]
 803d2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d2c4:	b2db      	uxtb	r3, r3
 803d2c6:	2b03      	cmp	r3, #3
 803d2c8:	d10f      	bne.n	803d2ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803d2ca:	68fb      	ldr	r3, [r7, #12]
 803d2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d2d0:	68db      	ldr	r3, [r3, #12]
 803d2d2:	2b00      	cmp	r3, #0
 803d2d4:	d009      	beq.n	803d2ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803d2d6:	68fb      	ldr	r3, [r7, #12]
 803d2d8:	2200      	movs	r2, #0
 803d2da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803d2de:	68fb      	ldr	r3, [r7, #12]
 803d2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d2e4:	68db      	ldr	r3, [r3, #12]
 803d2e6:	68f8      	ldr	r0, [r7, #12]
 803d2e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803d2ea:	2180      	movs	r1, #128	; 0x80
 803d2ec:	68f8      	ldr	r0, [r7, #12]
 803d2ee:	f001 fccb 	bl	803ec88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803d2f2:	68f8      	ldr	r0, [r7, #12]
 803d2f4:	f001 f8b7 	bl	803e466 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803d2f8:	68fb      	ldr	r3, [r7, #12]
 803d2fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803d2fe:	2b00      	cmp	r3, #0
 803d300:	d03a      	beq.n	803d378 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803d302:	68f8      	ldr	r0, [r7, #12]
 803d304:	f7ff fe42 	bl	803cf8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803d308:	68fb      	ldr	r3, [r7, #12]
 803d30a:	2200      	movs	r2, #0
 803d30c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803d310:	e032      	b.n	803d378 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803d312:	7afb      	ldrb	r3, [r7, #11]
 803d314:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803d318:	b2db      	uxtb	r3, r3
 803d31a:	4619      	mov	r1, r3
 803d31c:	68f8      	ldr	r0, [r7, #12]
 803d31e:	f000 f97f 	bl	803d620 <USBD_CoreFindEP>
 803d322:	4603      	mov	r3, r0
 803d324:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803d326:	7dfb      	ldrb	r3, [r7, #23]
 803d328:	2bff      	cmp	r3, #255	; 0xff
 803d32a:	d025      	beq.n	803d378 <USBD_LL_DataInStage+0x15a>
 803d32c:	7dfb      	ldrb	r3, [r7, #23]
 803d32e:	2b00      	cmp	r3, #0
 803d330:	d122      	bne.n	803d378 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d332:	68fb      	ldr	r3, [r7, #12]
 803d334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d338:	b2db      	uxtb	r3, r3
 803d33a:	2b03      	cmp	r3, #3
 803d33c:	d11c      	bne.n	803d378 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803d33e:	7dfa      	ldrb	r2, [r7, #23]
 803d340:	68fb      	ldr	r3, [r7, #12]
 803d342:	32ae      	adds	r2, #174	; 0xae
 803d344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d348:	695b      	ldr	r3, [r3, #20]
 803d34a:	2b00      	cmp	r3, #0
 803d34c:	d014      	beq.n	803d378 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803d34e:	7dfa      	ldrb	r2, [r7, #23]
 803d350:	68fb      	ldr	r3, [r7, #12]
 803d352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803d356:	7dfa      	ldrb	r2, [r7, #23]
 803d358:	68fb      	ldr	r3, [r7, #12]
 803d35a:	32ae      	adds	r2, #174	; 0xae
 803d35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d360:	695b      	ldr	r3, [r3, #20]
 803d362:	7afa      	ldrb	r2, [r7, #11]
 803d364:	4611      	mov	r1, r2
 803d366:	68f8      	ldr	r0, [r7, #12]
 803d368:	4798      	blx	r3
 803d36a:	4603      	mov	r3, r0
 803d36c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803d36e:	7dbb      	ldrb	r3, [r7, #22]
 803d370:	2b00      	cmp	r3, #0
 803d372:	d001      	beq.n	803d378 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803d374:	7dbb      	ldrb	r3, [r7, #22]
 803d376:	e000      	b.n	803d37a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803d378:	2300      	movs	r3, #0
}
 803d37a:	4618      	mov	r0, r3
 803d37c:	3718      	adds	r7, #24
 803d37e:	46bd      	mov	sp, r7
 803d380:	bd80      	pop	{r7, pc}

0803d382 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803d382:	b580      	push	{r7, lr}
 803d384:	b084      	sub	sp, #16
 803d386:	af00      	add	r7, sp, #0
 803d388:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803d38a:	2300      	movs	r3, #0
 803d38c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803d38e:	687b      	ldr	r3, [r7, #4]
 803d390:	2201      	movs	r2, #1
 803d392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803d396:	687b      	ldr	r3, [r7, #4]
 803d398:	2200      	movs	r2, #0
 803d39a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803d39e:	687b      	ldr	r3, [r7, #4]
 803d3a0:	2200      	movs	r2, #0
 803d3a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803d3a4:	687b      	ldr	r3, [r7, #4]
 803d3a6:	2200      	movs	r2, #0
 803d3a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803d3ac:	687b      	ldr	r3, [r7, #4]
 803d3ae:	2200      	movs	r2, #0
 803d3b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803d3b4:	687b      	ldr	r3, [r7, #4]
 803d3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d3ba:	2b00      	cmp	r3, #0
 803d3bc:	d014      	beq.n	803d3e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803d3be:	687b      	ldr	r3, [r7, #4]
 803d3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d3c4:	685b      	ldr	r3, [r3, #4]
 803d3c6:	2b00      	cmp	r3, #0
 803d3c8:	d00e      	beq.n	803d3e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803d3ca:	687b      	ldr	r3, [r7, #4]
 803d3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d3d0:	685b      	ldr	r3, [r3, #4]
 803d3d2:	687a      	ldr	r2, [r7, #4]
 803d3d4:	6852      	ldr	r2, [r2, #4]
 803d3d6:	b2d2      	uxtb	r2, r2
 803d3d8:	4611      	mov	r1, r2
 803d3da:	6878      	ldr	r0, [r7, #4]
 803d3dc:	4798      	blx	r3
 803d3de:	4603      	mov	r3, r0
 803d3e0:	2b00      	cmp	r3, #0
 803d3e2:	d001      	beq.n	803d3e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803d3e4:	2303      	movs	r3, #3
 803d3e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803d3e8:	2340      	movs	r3, #64	; 0x40
 803d3ea:	2200      	movs	r2, #0
 803d3ec:	2100      	movs	r1, #0
 803d3ee:	6878      	ldr	r0, [r7, #4]
 803d3f0:	f001 fc05 	bl	803ebfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803d3f4:	687b      	ldr	r3, [r7, #4]
 803d3f6:	2201      	movs	r2, #1
 803d3f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803d3fc:	687b      	ldr	r3, [r7, #4]
 803d3fe:	2240      	movs	r2, #64	; 0x40
 803d400:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803d404:	2340      	movs	r3, #64	; 0x40
 803d406:	2200      	movs	r2, #0
 803d408:	2180      	movs	r1, #128	; 0x80
 803d40a:	6878      	ldr	r0, [r7, #4]
 803d40c:	f001 fbf7 	bl	803ebfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803d410:	687b      	ldr	r3, [r7, #4]
 803d412:	2201      	movs	r2, #1
 803d414:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803d416:	687b      	ldr	r3, [r7, #4]
 803d418:	2240      	movs	r2, #64	; 0x40
 803d41a:	621a      	str	r2, [r3, #32]

  return ret;
 803d41c:	7bfb      	ldrb	r3, [r7, #15]
}
 803d41e:	4618      	mov	r0, r3
 803d420:	3710      	adds	r7, #16
 803d422:	46bd      	mov	sp, r7
 803d424:	bd80      	pop	{r7, pc}

0803d426 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803d426:	b480      	push	{r7}
 803d428:	b083      	sub	sp, #12
 803d42a:	af00      	add	r7, sp, #0
 803d42c:	6078      	str	r0, [r7, #4]
 803d42e:	460b      	mov	r3, r1
 803d430:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803d432:	687b      	ldr	r3, [r7, #4]
 803d434:	78fa      	ldrb	r2, [r7, #3]
 803d436:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803d438:	2300      	movs	r3, #0
}
 803d43a:	4618      	mov	r0, r3
 803d43c:	370c      	adds	r7, #12
 803d43e:	46bd      	mov	sp, r7
 803d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d444:	4770      	bx	lr

0803d446 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803d446:	b480      	push	{r7}
 803d448:	b083      	sub	sp, #12
 803d44a:	af00      	add	r7, sp, #0
 803d44c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803d44e:	687b      	ldr	r3, [r7, #4]
 803d450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d454:	b2da      	uxtb	r2, r3
 803d456:	687b      	ldr	r3, [r7, #4]
 803d458:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803d45c:	687b      	ldr	r3, [r7, #4]
 803d45e:	2204      	movs	r2, #4
 803d460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803d464:	2300      	movs	r3, #0
}
 803d466:	4618      	mov	r0, r3
 803d468:	370c      	adds	r7, #12
 803d46a:	46bd      	mov	sp, r7
 803d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d470:	4770      	bx	lr

0803d472 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803d472:	b480      	push	{r7}
 803d474:	b083      	sub	sp, #12
 803d476:	af00      	add	r7, sp, #0
 803d478:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803d47a:	687b      	ldr	r3, [r7, #4]
 803d47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d480:	b2db      	uxtb	r3, r3
 803d482:	2b04      	cmp	r3, #4
 803d484:	d106      	bne.n	803d494 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803d486:	687b      	ldr	r3, [r7, #4]
 803d488:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803d48c:	b2da      	uxtb	r2, r3
 803d48e:	687b      	ldr	r3, [r7, #4]
 803d490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803d494:	2300      	movs	r3, #0
}
 803d496:	4618      	mov	r0, r3
 803d498:	370c      	adds	r7, #12
 803d49a:	46bd      	mov	sp, r7
 803d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d4a0:	4770      	bx	lr

0803d4a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803d4a2:	b580      	push	{r7, lr}
 803d4a4:	b082      	sub	sp, #8
 803d4a6:	af00      	add	r7, sp, #0
 803d4a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d4aa:	687b      	ldr	r3, [r7, #4]
 803d4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d4b0:	b2db      	uxtb	r3, r3
 803d4b2:	2b03      	cmp	r3, #3
 803d4b4:	d110      	bne.n	803d4d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803d4b6:	687b      	ldr	r3, [r7, #4]
 803d4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d4bc:	2b00      	cmp	r3, #0
 803d4be:	d00b      	beq.n	803d4d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803d4c0:	687b      	ldr	r3, [r7, #4]
 803d4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d4c6:	69db      	ldr	r3, [r3, #28]
 803d4c8:	2b00      	cmp	r3, #0
 803d4ca:	d005      	beq.n	803d4d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803d4cc:	687b      	ldr	r3, [r7, #4]
 803d4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d4d2:	69db      	ldr	r3, [r3, #28]
 803d4d4:	6878      	ldr	r0, [r7, #4]
 803d4d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803d4d8:	2300      	movs	r3, #0
}
 803d4da:	4618      	mov	r0, r3
 803d4dc:	3708      	adds	r7, #8
 803d4de:	46bd      	mov	sp, r7
 803d4e0:	bd80      	pop	{r7, pc}

0803d4e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803d4e2:	b580      	push	{r7, lr}
 803d4e4:	b082      	sub	sp, #8
 803d4e6:	af00      	add	r7, sp, #0
 803d4e8:	6078      	str	r0, [r7, #4]
 803d4ea:	460b      	mov	r3, r1
 803d4ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803d4ee:	687b      	ldr	r3, [r7, #4]
 803d4f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d4f4:	687b      	ldr	r3, [r7, #4]
 803d4f6:	32ae      	adds	r2, #174	; 0xae
 803d4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d4fc:	2b00      	cmp	r3, #0
 803d4fe:	d101      	bne.n	803d504 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803d500:	2303      	movs	r3, #3
 803d502:	e01c      	b.n	803d53e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d504:	687b      	ldr	r3, [r7, #4]
 803d506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d50a:	b2db      	uxtb	r3, r3
 803d50c:	2b03      	cmp	r3, #3
 803d50e:	d115      	bne.n	803d53c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803d510:	687b      	ldr	r3, [r7, #4]
 803d512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d516:	687b      	ldr	r3, [r7, #4]
 803d518:	32ae      	adds	r2, #174	; 0xae
 803d51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d51e:	6a1b      	ldr	r3, [r3, #32]
 803d520:	2b00      	cmp	r3, #0
 803d522:	d00b      	beq.n	803d53c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803d524:	687b      	ldr	r3, [r7, #4]
 803d526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d52a:	687b      	ldr	r3, [r7, #4]
 803d52c:	32ae      	adds	r2, #174	; 0xae
 803d52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d532:	6a1b      	ldr	r3, [r3, #32]
 803d534:	78fa      	ldrb	r2, [r7, #3]
 803d536:	4611      	mov	r1, r2
 803d538:	6878      	ldr	r0, [r7, #4]
 803d53a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803d53c:	2300      	movs	r3, #0
}
 803d53e:	4618      	mov	r0, r3
 803d540:	3708      	adds	r7, #8
 803d542:	46bd      	mov	sp, r7
 803d544:	bd80      	pop	{r7, pc}

0803d546 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803d546:	b580      	push	{r7, lr}
 803d548:	b082      	sub	sp, #8
 803d54a:	af00      	add	r7, sp, #0
 803d54c:	6078      	str	r0, [r7, #4]
 803d54e:	460b      	mov	r3, r1
 803d550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803d552:	687b      	ldr	r3, [r7, #4]
 803d554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d558:	687b      	ldr	r3, [r7, #4]
 803d55a:	32ae      	adds	r2, #174	; 0xae
 803d55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d560:	2b00      	cmp	r3, #0
 803d562:	d101      	bne.n	803d568 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803d564:	2303      	movs	r3, #3
 803d566:	e01c      	b.n	803d5a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d568:	687b      	ldr	r3, [r7, #4]
 803d56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d56e:	b2db      	uxtb	r3, r3
 803d570:	2b03      	cmp	r3, #3
 803d572:	d115      	bne.n	803d5a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803d574:	687b      	ldr	r3, [r7, #4]
 803d576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d57a:	687b      	ldr	r3, [r7, #4]
 803d57c:	32ae      	adds	r2, #174	; 0xae
 803d57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803d584:	2b00      	cmp	r3, #0
 803d586:	d00b      	beq.n	803d5a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803d588:	687b      	ldr	r3, [r7, #4]
 803d58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d58e:	687b      	ldr	r3, [r7, #4]
 803d590:	32ae      	adds	r2, #174	; 0xae
 803d592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803d598:	78fa      	ldrb	r2, [r7, #3]
 803d59a:	4611      	mov	r1, r2
 803d59c:	6878      	ldr	r0, [r7, #4]
 803d59e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803d5a0:	2300      	movs	r3, #0
}
 803d5a2:	4618      	mov	r0, r3
 803d5a4:	3708      	adds	r7, #8
 803d5a6:	46bd      	mov	sp, r7
 803d5a8:	bd80      	pop	{r7, pc}

0803d5aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803d5aa:	b480      	push	{r7}
 803d5ac:	b083      	sub	sp, #12
 803d5ae:	af00      	add	r7, sp, #0
 803d5b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803d5b2:	2300      	movs	r3, #0
}
 803d5b4:	4618      	mov	r0, r3
 803d5b6:	370c      	adds	r7, #12
 803d5b8:	46bd      	mov	sp, r7
 803d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d5be:	4770      	bx	lr

0803d5c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803d5c0:	b580      	push	{r7, lr}
 803d5c2:	b084      	sub	sp, #16
 803d5c4:	af00      	add	r7, sp, #0
 803d5c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803d5c8:	2300      	movs	r3, #0
 803d5ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803d5cc:	687b      	ldr	r3, [r7, #4]
 803d5ce:	2201      	movs	r2, #1
 803d5d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803d5d4:	687b      	ldr	r3, [r7, #4]
 803d5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d5da:	2b00      	cmp	r3, #0
 803d5dc:	d00e      	beq.n	803d5fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803d5de:	687b      	ldr	r3, [r7, #4]
 803d5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d5e4:	685b      	ldr	r3, [r3, #4]
 803d5e6:	687a      	ldr	r2, [r7, #4]
 803d5e8:	6852      	ldr	r2, [r2, #4]
 803d5ea:	b2d2      	uxtb	r2, r2
 803d5ec:	4611      	mov	r1, r2
 803d5ee:	6878      	ldr	r0, [r7, #4]
 803d5f0:	4798      	blx	r3
 803d5f2:	4603      	mov	r3, r0
 803d5f4:	2b00      	cmp	r3, #0
 803d5f6:	d001      	beq.n	803d5fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803d5f8:	2303      	movs	r3, #3
 803d5fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803d5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 803d5fe:	4618      	mov	r0, r3
 803d600:	3710      	adds	r7, #16
 803d602:	46bd      	mov	sp, r7
 803d604:	bd80      	pop	{r7, pc}

0803d606 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803d606:	b480      	push	{r7}
 803d608:	b083      	sub	sp, #12
 803d60a:	af00      	add	r7, sp, #0
 803d60c:	6078      	str	r0, [r7, #4]
 803d60e:	460b      	mov	r3, r1
 803d610:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803d612:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803d614:	4618      	mov	r0, r3
 803d616:	370c      	adds	r7, #12
 803d618:	46bd      	mov	sp, r7
 803d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d61e:	4770      	bx	lr

0803d620 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803d620:	b480      	push	{r7}
 803d622:	b083      	sub	sp, #12
 803d624:	af00      	add	r7, sp, #0
 803d626:	6078      	str	r0, [r7, #4]
 803d628:	460b      	mov	r3, r1
 803d62a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803d62c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803d62e:	4618      	mov	r0, r3
 803d630:	370c      	adds	r7, #12
 803d632:	46bd      	mov	sp, r7
 803d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d638:	4770      	bx	lr

0803d63a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803d63a:	b580      	push	{r7, lr}
 803d63c:	b086      	sub	sp, #24
 803d63e:	af00      	add	r7, sp, #0
 803d640:	6078      	str	r0, [r7, #4]
 803d642:	460b      	mov	r3, r1
 803d644:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803d646:	687b      	ldr	r3, [r7, #4]
 803d648:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803d64a:	687b      	ldr	r3, [r7, #4]
 803d64c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803d64e:	2300      	movs	r3, #0
 803d650:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803d652:	68fb      	ldr	r3, [r7, #12]
 803d654:	885b      	ldrh	r3, [r3, #2]
 803d656:	b29a      	uxth	r2, r3
 803d658:	68fb      	ldr	r3, [r7, #12]
 803d65a:	781b      	ldrb	r3, [r3, #0]
 803d65c:	b29b      	uxth	r3, r3
 803d65e:	429a      	cmp	r2, r3
 803d660:	d920      	bls.n	803d6a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803d662:	68fb      	ldr	r3, [r7, #12]
 803d664:	781b      	ldrb	r3, [r3, #0]
 803d666:	b29b      	uxth	r3, r3
 803d668:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803d66a:	e013      	b.n	803d694 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803d66c:	f107 030a 	add.w	r3, r7, #10
 803d670:	4619      	mov	r1, r3
 803d672:	6978      	ldr	r0, [r7, #20]
 803d674:	f000 f81b 	bl	803d6ae <USBD_GetNextDesc>
 803d678:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803d67a:	697b      	ldr	r3, [r7, #20]
 803d67c:	785b      	ldrb	r3, [r3, #1]
 803d67e:	2b05      	cmp	r3, #5
 803d680:	d108      	bne.n	803d694 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803d682:	697b      	ldr	r3, [r7, #20]
 803d684:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803d686:	693b      	ldr	r3, [r7, #16]
 803d688:	789b      	ldrb	r3, [r3, #2]
 803d68a:	78fa      	ldrb	r2, [r7, #3]
 803d68c:	429a      	cmp	r2, r3
 803d68e:	d008      	beq.n	803d6a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803d690:	2300      	movs	r3, #0
 803d692:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803d694:	68fb      	ldr	r3, [r7, #12]
 803d696:	885b      	ldrh	r3, [r3, #2]
 803d698:	b29a      	uxth	r2, r3
 803d69a:	897b      	ldrh	r3, [r7, #10]
 803d69c:	429a      	cmp	r2, r3
 803d69e:	d8e5      	bhi.n	803d66c <USBD_GetEpDesc+0x32>
 803d6a0:	e000      	b.n	803d6a4 <USBD_GetEpDesc+0x6a>
          break;
 803d6a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803d6a4:	693b      	ldr	r3, [r7, #16]
}
 803d6a6:	4618      	mov	r0, r3
 803d6a8:	3718      	adds	r7, #24
 803d6aa:	46bd      	mov	sp, r7
 803d6ac:	bd80      	pop	{r7, pc}

0803d6ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803d6ae:	b480      	push	{r7}
 803d6b0:	b085      	sub	sp, #20
 803d6b2:	af00      	add	r7, sp, #0
 803d6b4:	6078      	str	r0, [r7, #4]
 803d6b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803d6b8:	687b      	ldr	r3, [r7, #4]
 803d6ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803d6bc:	683b      	ldr	r3, [r7, #0]
 803d6be:	881a      	ldrh	r2, [r3, #0]
 803d6c0:	68fb      	ldr	r3, [r7, #12]
 803d6c2:	781b      	ldrb	r3, [r3, #0]
 803d6c4:	b29b      	uxth	r3, r3
 803d6c6:	4413      	add	r3, r2
 803d6c8:	b29a      	uxth	r2, r3
 803d6ca:	683b      	ldr	r3, [r7, #0]
 803d6cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803d6ce:	68fb      	ldr	r3, [r7, #12]
 803d6d0:	781b      	ldrb	r3, [r3, #0]
 803d6d2:	461a      	mov	r2, r3
 803d6d4:	687b      	ldr	r3, [r7, #4]
 803d6d6:	4413      	add	r3, r2
 803d6d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803d6da:	68fb      	ldr	r3, [r7, #12]
}
 803d6dc:	4618      	mov	r0, r3
 803d6de:	3714      	adds	r7, #20
 803d6e0:	46bd      	mov	sp, r7
 803d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d6e6:	4770      	bx	lr

0803d6e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803d6e8:	b480      	push	{r7}
 803d6ea:	b087      	sub	sp, #28
 803d6ec:	af00      	add	r7, sp, #0
 803d6ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803d6f0:	687b      	ldr	r3, [r7, #4]
 803d6f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803d6f4:	697b      	ldr	r3, [r7, #20]
 803d6f6:	781b      	ldrb	r3, [r3, #0]
 803d6f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803d6fa:	697b      	ldr	r3, [r7, #20]
 803d6fc:	3301      	adds	r3, #1
 803d6fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803d700:	697b      	ldr	r3, [r7, #20]
 803d702:	781b      	ldrb	r3, [r3, #0]
 803d704:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803d706:	8a3b      	ldrh	r3, [r7, #16]
 803d708:	021b      	lsls	r3, r3, #8
 803d70a:	b21a      	sxth	r2, r3
 803d70c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803d710:	4313      	orrs	r3, r2
 803d712:	b21b      	sxth	r3, r3
 803d714:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803d716:	89fb      	ldrh	r3, [r7, #14]
}
 803d718:	4618      	mov	r0, r3
 803d71a:	371c      	adds	r7, #28
 803d71c:	46bd      	mov	sp, r7
 803d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d722:	4770      	bx	lr

0803d724 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803d724:	b580      	push	{r7, lr}
 803d726:	b084      	sub	sp, #16
 803d728:	af00      	add	r7, sp, #0
 803d72a:	6078      	str	r0, [r7, #4]
 803d72c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803d72e:	2300      	movs	r3, #0
 803d730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803d732:	683b      	ldr	r3, [r7, #0]
 803d734:	781b      	ldrb	r3, [r3, #0]
 803d736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803d73a:	2b40      	cmp	r3, #64	; 0x40
 803d73c:	d005      	beq.n	803d74a <USBD_StdDevReq+0x26>
 803d73e:	2b40      	cmp	r3, #64	; 0x40
 803d740:	d857      	bhi.n	803d7f2 <USBD_StdDevReq+0xce>
 803d742:	2b00      	cmp	r3, #0
 803d744:	d00f      	beq.n	803d766 <USBD_StdDevReq+0x42>
 803d746:	2b20      	cmp	r3, #32
 803d748:	d153      	bne.n	803d7f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803d74a:	687b      	ldr	r3, [r7, #4]
 803d74c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d750:	687b      	ldr	r3, [r7, #4]
 803d752:	32ae      	adds	r2, #174	; 0xae
 803d754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d758:	689b      	ldr	r3, [r3, #8]
 803d75a:	6839      	ldr	r1, [r7, #0]
 803d75c:	6878      	ldr	r0, [r7, #4]
 803d75e:	4798      	blx	r3
 803d760:	4603      	mov	r3, r0
 803d762:	73fb      	strb	r3, [r7, #15]
      break;
 803d764:	e04a      	b.n	803d7fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803d766:	683b      	ldr	r3, [r7, #0]
 803d768:	785b      	ldrb	r3, [r3, #1]
 803d76a:	2b09      	cmp	r3, #9
 803d76c:	d83b      	bhi.n	803d7e6 <USBD_StdDevReq+0xc2>
 803d76e:	a201      	add	r2, pc, #4	; (adr r2, 803d774 <USBD_StdDevReq+0x50>)
 803d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803d774:	0803d7c9 	.word	0x0803d7c9
 803d778:	0803d7dd 	.word	0x0803d7dd
 803d77c:	0803d7e7 	.word	0x0803d7e7
 803d780:	0803d7d3 	.word	0x0803d7d3
 803d784:	0803d7e7 	.word	0x0803d7e7
 803d788:	0803d7a7 	.word	0x0803d7a7
 803d78c:	0803d79d 	.word	0x0803d79d
 803d790:	0803d7e7 	.word	0x0803d7e7
 803d794:	0803d7bf 	.word	0x0803d7bf
 803d798:	0803d7b1 	.word	0x0803d7b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803d79c:	6839      	ldr	r1, [r7, #0]
 803d79e:	6878      	ldr	r0, [r7, #4]
 803d7a0:	f000 fa3c 	bl	803dc1c <USBD_GetDescriptor>
          break;
 803d7a4:	e024      	b.n	803d7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803d7a6:	6839      	ldr	r1, [r7, #0]
 803d7a8:	6878      	ldr	r0, [r7, #4]
 803d7aa:	f000 fba1 	bl	803def0 <USBD_SetAddress>
          break;
 803d7ae:	e01f      	b.n	803d7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803d7b0:	6839      	ldr	r1, [r7, #0]
 803d7b2:	6878      	ldr	r0, [r7, #4]
 803d7b4:	f000 fbe0 	bl	803df78 <USBD_SetConfig>
 803d7b8:	4603      	mov	r3, r0
 803d7ba:	73fb      	strb	r3, [r7, #15]
          break;
 803d7bc:	e018      	b.n	803d7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803d7be:	6839      	ldr	r1, [r7, #0]
 803d7c0:	6878      	ldr	r0, [r7, #4]
 803d7c2:	f000 fc83 	bl	803e0cc <USBD_GetConfig>
          break;
 803d7c6:	e013      	b.n	803d7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803d7c8:	6839      	ldr	r1, [r7, #0]
 803d7ca:	6878      	ldr	r0, [r7, #4]
 803d7cc:	f000 fcb4 	bl	803e138 <USBD_GetStatus>
          break;
 803d7d0:	e00e      	b.n	803d7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803d7d2:	6839      	ldr	r1, [r7, #0]
 803d7d4:	6878      	ldr	r0, [r7, #4]
 803d7d6:	f000 fce3 	bl	803e1a0 <USBD_SetFeature>
          break;
 803d7da:	e009      	b.n	803d7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803d7dc:	6839      	ldr	r1, [r7, #0]
 803d7de:	6878      	ldr	r0, [r7, #4]
 803d7e0:	f000 fd07 	bl	803e1f2 <USBD_ClrFeature>
          break;
 803d7e4:	e004      	b.n	803d7f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803d7e6:	6839      	ldr	r1, [r7, #0]
 803d7e8:	6878      	ldr	r0, [r7, #4]
 803d7ea:	f000 fd5e 	bl	803e2aa <USBD_CtlError>
          break;
 803d7ee:	bf00      	nop
      }
      break;
 803d7f0:	e004      	b.n	803d7fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803d7f2:	6839      	ldr	r1, [r7, #0]
 803d7f4:	6878      	ldr	r0, [r7, #4]
 803d7f6:	f000 fd58 	bl	803e2aa <USBD_CtlError>
      break;
 803d7fa:	bf00      	nop
  }

  return ret;
 803d7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 803d7fe:	4618      	mov	r0, r3
 803d800:	3710      	adds	r7, #16
 803d802:	46bd      	mov	sp, r7
 803d804:	bd80      	pop	{r7, pc}
 803d806:	bf00      	nop

0803d808 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803d808:	b580      	push	{r7, lr}
 803d80a:	b084      	sub	sp, #16
 803d80c:	af00      	add	r7, sp, #0
 803d80e:	6078      	str	r0, [r7, #4]
 803d810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803d812:	2300      	movs	r3, #0
 803d814:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803d816:	683b      	ldr	r3, [r7, #0]
 803d818:	781b      	ldrb	r3, [r3, #0]
 803d81a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803d81e:	2b40      	cmp	r3, #64	; 0x40
 803d820:	d005      	beq.n	803d82e <USBD_StdItfReq+0x26>
 803d822:	2b40      	cmp	r3, #64	; 0x40
 803d824:	d852      	bhi.n	803d8cc <USBD_StdItfReq+0xc4>
 803d826:	2b00      	cmp	r3, #0
 803d828:	d001      	beq.n	803d82e <USBD_StdItfReq+0x26>
 803d82a:	2b20      	cmp	r3, #32
 803d82c:	d14e      	bne.n	803d8cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803d82e:	687b      	ldr	r3, [r7, #4]
 803d830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d834:	b2db      	uxtb	r3, r3
 803d836:	3b01      	subs	r3, #1
 803d838:	2b02      	cmp	r3, #2
 803d83a:	d840      	bhi.n	803d8be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803d83c:	683b      	ldr	r3, [r7, #0]
 803d83e:	889b      	ldrh	r3, [r3, #4]
 803d840:	b2db      	uxtb	r3, r3
 803d842:	2b01      	cmp	r3, #1
 803d844:	d836      	bhi.n	803d8b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803d846:	683b      	ldr	r3, [r7, #0]
 803d848:	889b      	ldrh	r3, [r3, #4]
 803d84a:	b2db      	uxtb	r3, r3
 803d84c:	4619      	mov	r1, r3
 803d84e:	6878      	ldr	r0, [r7, #4]
 803d850:	f7ff fed9 	bl	803d606 <USBD_CoreFindIF>
 803d854:	4603      	mov	r3, r0
 803d856:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803d858:	7bbb      	ldrb	r3, [r7, #14]
 803d85a:	2bff      	cmp	r3, #255	; 0xff
 803d85c:	d01d      	beq.n	803d89a <USBD_StdItfReq+0x92>
 803d85e:	7bbb      	ldrb	r3, [r7, #14]
 803d860:	2b00      	cmp	r3, #0
 803d862:	d11a      	bne.n	803d89a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803d864:	7bba      	ldrb	r2, [r7, #14]
 803d866:	687b      	ldr	r3, [r7, #4]
 803d868:	32ae      	adds	r2, #174	; 0xae
 803d86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d86e:	689b      	ldr	r3, [r3, #8]
 803d870:	2b00      	cmp	r3, #0
 803d872:	d00f      	beq.n	803d894 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803d874:	7bba      	ldrb	r2, [r7, #14]
 803d876:	687b      	ldr	r3, [r7, #4]
 803d878:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803d87c:	7bba      	ldrb	r2, [r7, #14]
 803d87e:	687b      	ldr	r3, [r7, #4]
 803d880:	32ae      	adds	r2, #174	; 0xae
 803d882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d886:	689b      	ldr	r3, [r3, #8]
 803d888:	6839      	ldr	r1, [r7, #0]
 803d88a:	6878      	ldr	r0, [r7, #4]
 803d88c:	4798      	blx	r3
 803d88e:	4603      	mov	r3, r0
 803d890:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803d892:	e004      	b.n	803d89e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803d894:	2303      	movs	r3, #3
 803d896:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803d898:	e001      	b.n	803d89e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803d89a:	2303      	movs	r3, #3
 803d89c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803d89e:	683b      	ldr	r3, [r7, #0]
 803d8a0:	88db      	ldrh	r3, [r3, #6]
 803d8a2:	2b00      	cmp	r3, #0
 803d8a4:	d110      	bne.n	803d8c8 <USBD_StdItfReq+0xc0>
 803d8a6:	7bfb      	ldrb	r3, [r7, #15]
 803d8a8:	2b00      	cmp	r3, #0
 803d8aa:	d10d      	bne.n	803d8c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803d8ac:	6878      	ldr	r0, [r7, #4]
 803d8ae:	f000 fdc7 	bl	803e440 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803d8b2:	e009      	b.n	803d8c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803d8b4:	6839      	ldr	r1, [r7, #0]
 803d8b6:	6878      	ldr	r0, [r7, #4]
 803d8b8:	f000 fcf7 	bl	803e2aa <USBD_CtlError>
          break;
 803d8bc:	e004      	b.n	803d8c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803d8be:	6839      	ldr	r1, [r7, #0]
 803d8c0:	6878      	ldr	r0, [r7, #4]
 803d8c2:	f000 fcf2 	bl	803e2aa <USBD_CtlError>
          break;
 803d8c6:	e000      	b.n	803d8ca <USBD_StdItfReq+0xc2>
          break;
 803d8c8:	bf00      	nop
      }
      break;
 803d8ca:	e004      	b.n	803d8d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803d8cc:	6839      	ldr	r1, [r7, #0]
 803d8ce:	6878      	ldr	r0, [r7, #4]
 803d8d0:	f000 fceb 	bl	803e2aa <USBD_CtlError>
      break;
 803d8d4:	bf00      	nop
  }

  return ret;
 803d8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 803d8d8:	4618      	mov	r0, r3
 803d8da:	3710      	adds	r7, #16
 803d8dc:	46bd      	mov	sp, r7
 803d8de:	bd80      	pop	{r7, pc}

0803d8e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803d8e0:	b580      	push	{r7, lr}
 803d8e2:	b084      	sub	sp, #16
 803d8e4:	af00      	add	r7, sp, #0
 803d8e6:	6078      	str	r0, [r7, #4]
 803d8e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803d8ea:	2300      	movs	r3, #0
 803d8ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803d8ee:	683b      	ldr	r3, [r7, #0]
 803d8f0:	889b      	ldrh	r3, [r3, #4]
 803d8f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803d8f4:	683b      	ldr	r3, [r7, #0]
 803d8f6:	781b      	ldrb	r3, [r3, #0]
 803d8f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803d8fc:	2b40      	cmp	r3, #64	; 0x40
 803d8fe:	d007      	beq.n	803d910 <USBD_StdEPReq+0x30>
 803d900:	2b40      	cmp	r3, #64	; 0x40
 803d902:	f200 817f 	bhi.w	803dc04 <USBD_StdEPReq+0x324>
 803d906:	2b00      	cmp	r3, #0
 803d908:	d02a      	beq.n	803d960 <USBD_StdEPReq+0x80>
 803d90a:	2b20      	cmp	r3, #32
 803d90c:	f040 817a 	bne.w	803dc04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803d910:	7bbb      	ldrb	r3, [r7, #14]
 803d912:	4619      	mov	r1, r3
 803d914:	6878      	ldr	r0, [r7, #4]
 803d916:	f7ff fe83 	bl	803d620 <USBD_CoreFindEP>
 803d91a:	4603      	mov	r3, r0
 803d91c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803d91e:	7b7b      	ldrb	r3, [r7, #13]
 803d920:	2bff      	cmp	r3, #255	; 0xff
 803d922:	f000 8174 	beq.w	803dc0e <USBD_StdEPReq+0x32e>
 803d926:	7b7b      	ldrb	r3, [r7, #13]
 803d928:	2b00      	cmp	r3, #0
 803d92a:	f040 8170 	bne.w	803dc0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803d92e:	7b7a      	ldrb	r2, [r7, #13]
 803d930:	687b      	ldr	r3, [r7, #4]
 803d932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803d936:	7b7a      	ldrb	r2, [r7, #13]
 803d938:	687b      	ldr	r3, [r7, #4]
 803d93a:	32ae      	adds	r2, #174	; 0xae
 803d93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d940:	689b      	ldr	r3, [r3, #8]
 803d942:	2b00      	cmp	r3, #0
 803d944:	f000 8163 	beq.w	803dc0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803d948:	7b7a      	ldrb	r2, [r7, #13]
 803d94a:	687b      	ldr	r3, [r7, #4]
 803d94c:	32ae      	adds	r2, #174	; 0xae
 803d94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d952:	689b      	ldr	r3, [r3, #8]
 803d954:	6839      	ldr	r1, [r7, #0]
 803d956:	6878      	ldr	r0, [r7, #4]
 803d958:	4798      	blx	r3
 803d95a:	4603      	mov	r3, r0
 803d95c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803d95e:	e156      	b.n	803dc0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803d960:	683b      	ldr	r3, [r7, #0]
 803d962:	785b      	ldrb	r3, [r3, #1]
 803d964:	2b03      	cmp	r3, #3
 803d966:	d008      	beq.n	803d97a <USBD_StdEPReq+0x9a>
 803d968:	2b03      	cmp	r3, #3
 803d96a:	f300 8145 	bgt.w	803dbf8 <USBD_StdEPReq+0x318>
 803d96e:	2b00      	cmp	r3, #0
 803d970:	f000 809b 	beq.w	803daaa <USBD_StdEPReq+0x1ca>
 803d974:	2b01      	cmp	r3, #1
 803d976:	d03c      	beq.n	803d9f2 <USBD_StdEPReq+0x112>
 803d978:	e13e      	b.n	803dbf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803d97a:	687b      	ldr	r3, [r7, #4]
 803d97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d980:	b2db      	uxtb	r3, r3
 803d982:	2b02      	cmp	r3, #2
 803d984:	d002      	beq.n	803d98c <USBD_StdEPReq+0xac>
 803d986:	2b03      	cmp	r3, #3
 803d988:	d016      	beq.n	803d9b8 <USBD_StdEPReq+0xd8>
 803d98a:	e02c      	b.n	803d9e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803d98c:	7bbb      	ldrb	r3, [r7, #14]
 803d98e:	2b00      	cmp	r3, #0
 803d990:	d00d      	beq.n	803d9ae <USBD_StdEPReq+0xce>
 803d992:	7bbb      	ldrb	r3, [r7, #14]
 803d994:	2b80      	cmp	r3, #128	; 0x80
 803d996:	d00a      	beq.n	803d9ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803d998:	7bbb      	ldrb	r3, [r7, #14]
 803d99a:	4619      	mov	r1, r3
 803d99c:	6878      	ldr	r0, [r7, #4]
 803d99e:	f001 f973 	bl	803ec88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803d9a2:	2180      	movs	r1, #128	; 0x80
 803d9a4:	6878      	ldr	r0, [r7, #4]
 803d9a6:	f001 f96f 	bl	803ec88 <USBD_LL_StallEP>
 803d9aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803d9ac:	e020      	b.n	803d9f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803d9ae:	6839      	ldr	r1, [r7, #0]
 803d9b0:	6878      	ldr	r0, [r7, #4]
 803d9b2:	f000 fc7a 	bl	803e2aa <USBD_CtlError>
              break;
 803d9b6:	e01b      	b.n	803d9f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803d9b8:	683b      	ldr	r3, [r7, #0]
 803d9ba:	885b      	ldrh	r3, [r3, #2]
 803d9bc:	2b00      	cmp	r3, #0
 803d9be:	d10e      	bne.n	803d9de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803d9c0:	7bbb      	ldrb	r3, [r7, #14]
 803d9c2:	2b00      	cmp	r3, #0
 803d9c4:	d00b      	beq.n	803d9de <USBD_StdEPReq+0xfe>
 803d9c6:	7bbb      	ldrb	r3, [r7, #14]
 803d9c8:	2b80      	cmp	r3, #128	; 0x80
 803d9ca:	d008      	beq.n	803d9de <USBD_StdEPReq+0xfe>
 803d9cc:	683b      	ldr	r3, [r7, #0]
 803d9ce:	88db      	ldrh	r3, [r3, #6]
 803d9d0:	2b00      	cmp	r3, #0
 803d9d2:	d104      	bne.n	803d9de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803d9d4:	7bbb      	ldrb	r3, [r7, #14]
 803d9d6:	4619      	mov	r1, r3
 803d9d8:	6878      	ldr	r0, [r7, #4]
 803d9da:	f001 f955 	bl	803ec88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803d9de:	6878      	ldr	r0, [r7, #4]
 803d9e0:	f000 fd2e 	bl	803e440 <USBD_CtlSendStatus>

              break;
 803d9e4:	e004      	b.n	803d9f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803d9e6:	6839      	ldr	r1, [r7, #0]
 803d9e8:	6878      	ldr	r0, [r7, #4]
 803d9ea:	f000 fc5e 	bl	803e2aa <USBD_CtlError>
              break;
 803d9ee:	bf00      	nop
          }
          break;
 803d9f0:	e107      	b.n	803dc02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803d9f2:	687b      	ldr	r3, [r7, #4]
 803d9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d9f8:	b2db      	uxtb	r3, r3
 803d9fa:	2b02      	cmp	r3, #2
 803d9fc:	d002      	beq.n	803da04 <USBD_StdEPReq+0x124>
 803d9fe:	2b03      	cmp	r3, #3
 803da00:	d016      	beq.n	803da30 <USBD_StdEPReq+0x150>
 803da02:	e04b      	b.n	803da9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803da04:	7bbb      	ldrb	r3, [r7, #14]
 803da06:	2b00      	cmp	r3, #0
 803da08:	d00d      	beq.n	803da26 <USBD_StdEPReq+0x146>
 803da0a:	7bbb      	ldrb	r3, [r7, #14]
 803da0c:	2b80      	cmp	r3, #128	; 0x80
 803da0e:	d00a      	beq.n	803da26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803da10:	7bbb      	ldrb	r3, [r7, #14]
 803da12:	4619      	mov	r1, r3
 803da14:	6878      	ldr	r0, [r7, #4]
 803da16:	f001 f937 	bl	803ec88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803da1a:	2180      	movs	r1, #128	; 0x80
 803da1c:	6878      	ldr	r0, [r7, #4]
 803da1e:	f001 f933 	bl	803ec88 <USBD_LL_StallEP>
 803da22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803da24:	e040      	b.n	803daa8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803da26:	6839      	ldr	r1, [r7, #0]
 803da28:	6878      	ldr	r0, [r7, #4]
 803da2a:	f000 fc3e 	bl	803e2aa <USBD_CtlError>
              break;
 803da2e:	e03b      	b.n	803daa8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803da30:	683b      	ldr	r3, [r7, #0]
 803da32:	885b      	ldrh	r3, [r3, #2]
 803da34:	2b00      	cmp	r3, #0
 803da36:	d136      	bne.n	803daa6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803da38:	7bbb      	ldrb	r3, [r7, #14]
 803da3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803da3e:	2b00      	cmp	r3, #0
 803da40:	d004      	beq.n	803da4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803da42:	7bbb      	ldrb	r3, [r7, #14]
 803da44:	4619      	mov	r1, r3
 803da46:	6878      	ldr	r0, [r7, #4]
 803da48:	f001 f93d 	bl	803ecc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803da4c:	6878      	ldr	r0, [r7, #4]
 803da4e:	f000 fcf7 	bl	803e440 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803da52:	7bbb      	ldrb	r3, [r7, #14]
 803da54:	4619      	mov	r1, r3
 803da56:	6878      	ldr	r0, [r7, #4]
 803da58:	f7ff fde2 	bl	803d620 <USBD_CoreFindEP>
 803da5c:	4603      	mov	r3, r0
 803da5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803da60:	7b7b      	ldrb	r3, [r7, #13]
 803da62:	2bff      	cmp	r3, #255	; 0xff
 803da64:	d01f      	beq.n	803daa6 <USBD_StdEPReq+0x1c6>
 803da66:	7b7b      	ldrb	r3, [r7, #13]
 803da68:	2b00      	cmp	r3, #0
 803da6a:	d11c      	bne.n	803daa6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803da6c:	7b7a      	ldrb	r2, [r7, #13]
 803da6e:	687b      	ldr	r3, [r7, #4]
 803da70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803da74:	7b7a      	ldrb	r2, [r7, #13]
 803da76:	687b      	ldr	r3, [r7, #4]
 803da78:	32ae      	adds	r2, #174	; 0xae
 803da7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803da7e:	689b      	ldr	r3, [r3, #8]
 803da80:	2b00      	cmp	r3, #0
 803da82:	d010      	beq.n	803daa6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803da84:	7b7a      	ldrb	r2, [r7, #13]
 803da86:	687b      	ldr	r3, [r7, #4]
 803da88:	32ae      	adds	r2, #174	; 0xae
 803da8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803da8e:	689b      	ldr	r3, [r3, #8]
 803da90:	6839      	ldr	r1, [r7, #0]
 803da92:	6878      	ldr	r0, [r7, #4]
 803da94:	4798      	blx	r3
 803da96:	4603      	mov	r3, r0
 803da98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803da9a:	e004      	b.n	803daa6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803da9c:	6839      	ldr	r1, [r7, #0]
 803da9e:	6878      	ldr	r0, [r7, #4]
 803daa0:	f000 fc03 	bl	803e2aa <USBD_CtlError>
              break;
 803daa4:	e000      	b.n	803daa8 <USBD_StdEPReq+0x1c8>
              break;
 803daa6:	bf00      	nop
          }
          break;
 803daa8:	e0ab      	b.n	803dc02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803daaa:	687b      	ldr	r3, [r7, #4]
 803daac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803dab0:	b2db      	uxtb	r3, r3
 803dab2:	2b02      	cmp	r3, #2
 803dab4:	d002      	beq.n	803dabc <USBD_StdEPReq+0x1dc>
 803dab6:	2b03      	cmp	r3, #3
 803dab8:	d032      	beq.n	803db20 <USBD_StdEPReq+0x240>
 803daba:	e097      	b.n	803dbec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803dabc:	7bbb      	ldrb	r3, [r7, #14]
 803dabe:	2b00      	cmp	r3, #0
 803dac0:	d007      	beq.n	803dad2 <USBD_StdEPReq+0x1f2>
 803dac2:	7bbb      	ldrb	r3, [r7, #14]
 803dac4:	2b80      	cmp	r3, #128	; 0x80
 803dac6:	d004      	beq.n	803dad2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803dac8:	6839      	ldr	r1, [r7, #0]
 803daca:	6878      	ldr	r0, [r7, #4]
 803dacc:	f000 fbed 	bl	803e2aa <USBD_CtlError>
                break;
 803dad0:	e091      	b.n	803dbf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803dad2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803dad6:	2b00      	cmp	r3, #0
 803dad8:	da0b      	bge.n	803daf2 <USBD_StdEPReq+0x212>
 803dada:	7bbb      	ldrb	r3, [r7, #14]
 803dadc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803dae0:	4613      	mov	r3, r2
 803dae2:	009b      	lsls	r3, r3, #2
 803dae4:	4413      	add	r3, r2
 803dae6:	009b      	lsls	r3, r3, #2
 803dae8:	3310      	adds	r3, #16
 803daea:	687a      	ldr	r2, [r7, #4]
 803daec:	4413      	add	r3, r2
 803daee:	3304      	adds	r3, #4
 803daf0:	e00b      	b.n	803db0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803daf2:	7bbb      	ldrb	r3, [r7, #14]
 803daf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803daf8:	4613      	mov	r3, r2
 803dafa:	009b      	lsls	r3, r3, #2
 803dafc:	4413      	add	r3, r2
 803dafe:	009b      	lsls	r3, r3, #2
 803db00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803db04:	687a      	ldr	r2, [r7, #4]
 803db06:	4413      	add	r3, r2
 803db08:	3304      	adds	r3, #4
 803db0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803db0c:	68bb      	ldr	r3, [r7, #8]
 803db0e:	2200      	movs	r2, #0
 803db10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803db12:	68bb      	ldr	r3, [r7, #8]
 803db14:	2202      	movs	r2, #2
 803db16:	4619      	mov	r1, r3
 803db18:	6878      	ldr	r0, [r7, #4]
 803db1a:	f000 fc37 	bl	803e38c <USBD_CtlSendData>
              break;
 803db1e:	e06a      	b.n	803dbf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803db20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803db24:	2b00      	cmp	r3, #0
 803db26:	da11      	bge.n	803db4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803db28:	7bbb      	ldrb	r3, [r7, #14]
 803db2a:	f003 020f 	and.w	r2, r3, #15
 803db2e:	6879      	ldr	r1, [r7, #4]
 803db30:	4613      	mov	r3, r2
 803db32:	009b      	lsls	r3, r3, #2
 803db34:	4413      	add	r3, r2
 803db36:	009b      	lsls	r3, r3, #2
 803db38:	440b      	add	r3, r1
 803db3a:	3324      	adds	r3, #36	; 0x24
 803db3c:	881b      	ldrh	r3, [r3, #0]
 803db3e:	2b00      	cmp	r3, #0
 803db40:	d117      	bne.n	803db72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803db42:	6839      	ldr	r1, [r7, #0]
 803db44:	6878      	ldr	r0, [r7, #4]
 803db46:	f000 fbb0 	bl	803e2aa <USBD_CtlError>
                  break;
 803db4a:	e054      	b.n	803dbf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803db4c:	7bbb      	ldrb	r3, [r7, #14]
 803db4e:	f003 020f 	and.w	r2, r3, #15
 803db52:	6879      	ldr	r1, [r7, #4]
 803db54:	4613      	mov	r3, r2
 803db56:	009b      	lsls	r3, r3, #2
 803db58:	4413      	add	r3, r2
 803db5a:	009b      	lsls	r3, r3, #2
 803db5c:	440b      	add	r3, r1
 803db5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803db62:	881b      	ldrh	r3, [r3, #0]
 803db64:	2b00      	cmp	r3, #0
 803db66:	d104      	bne.n	803db72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803db68:	6839      	ldr	r1, [r7, #0]
 803db6a:	6878      	ldr	r0, [r7, #4]
 803db6c:	f000 fb9d 	bl	803e2aa <USBD_CtlError>
                  break;
 803db70:	e041      	b.n	803dbf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803db72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803db76:	2b00      	cmp	r3, #0
 803db78:	da0b      	bge.n	803db92 <USBD_StdEPReq+0x2b2>
 803db7a:	7bbb      	ldrb	r3, [r7, #14]
 803db7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803db80:	4613      	mov	r3, r2
 803db82:	009b      	lsls	r3, r3, #2
 803db84:	4413      	add	r3, r2
 803db86:	009b      	lsls	r3, r3, #2
 803db88:	3310      	adds	r3, #16
 803db8a:	687a      	ldr	r2, [r7, #4]
 803db8c:	4413      	add	r3, r2
 803db8e:	3304      	adds	r3, #4
 803db90:	e00b      	b.n	803dbaa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803db92:	7bbb      	ldrb	r3, [r7, #14]
 803db94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803db98:	4613      	mov	r3, r2
 803db9a:	009b      	lsls	r3, r3, #2
 803db9c:	4413      	add	r3, r2
 803db9e:	009b      	lsls	r3, r3, #2
 803dba0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803dba4:	687a      	ldr	r2, [r7, #4]
 803dba6:	4413      	add	r3, r2
 803dba8:	3304      	adds	r3, #4
 803dbaa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803dbac:	7bbb      	ldrb	r3, [r7, #14]
 803dbae:	2b00      	cmp	r3, #0
 803dbb0:	d002      	beq.n	803dbb8 <USBD_StdEPReq+0x2d8>
 803dbb2:	7bbb      	ldrb	r3, [r7, #14]
 803dbb4:	2b80      	cmp	r3, #128	; 0x80
 803dbb6:	d103      	bne.n	803dbc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803dbb8:	68bb      	ldr	r3, [r7, #8]
 803dbba:	2200      	movs	r2, #0
 803dbbc:	601a      	str	r2, [r3, #0]
 803dbbe:	e00e      	b.n	803dbde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803dbc0:	7bbb      	ldrb	r3, [r7, #14]
 803dbc2:	4619      	mov	r1, r3
 803dbc4:	6878      	ldr	r0, [r7, #4]
 803dbc6:	f001 f89d 	bl	803ed04 <USBD_LL_IsStallEP>
 803dbca:	4603      	mov	r3, r0
 803dbcc:	2b00      	cmp	r3, #0
 803dbce:	d003      	beq.n	803dbd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803dbd0:	68bb      	ldr	r3, [r7, #8]
 803dbd2:	2201      	movs	r2, #1
 803dbd4:	601a      	str	r2, [r3, #0]
 803dbd6:	e002      	b.n	803dbde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803dbd8:	68bb      	ldr	r3, [r7, #8]
 803dbda:	2200      	movs	r2, #0
 803dbdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803dbde:	68bb      	ldr	r3, [r7, #8]
 803dbe0:	2202      	movs	r2, #2
 803dbe2:	4619      	mov	r1, r3
 803dbe4:	6878      	ldr	r0, [r7, #4]
 803dbe6:	f000 fbd1 	bl	803e38c <USBD_CtlSendData>
              break;
 803dbea:	e004      	b.n	803dbf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803dbec:	6839      	ldr	r1, [r7, #0]
 803dbee:	6878      	ldr	r0, [r7, #4]
 803dbf0:	f000 fb5b 	bl	803e2aa <USBD_CtlError>
              break;
 803dbf4:	bf00      	nop
          }
          break;
 803dbf6:	e004      	b.n	803dc02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803dbf8:	6839      	ldr	r1, [r7, #0]
 803dbfa:	6878      	ldr	r0, [r7, #4]
 803dbfc:	f000 fb55 	bl	803e2aa <USBD_CtlError>
          break;
 803dc00:	bf00      	nop
      }
      break;
 803dc02:	e005      	b.n	803dc10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803dc04:	6839      	ldr	r1, [r7, #0]
 803dc06:	6878      	ldr	r0, [r7, #4]
 803dc08:	f000 fb4f 	bl	803e2aa <USBD_CtlError>
      break;
 803dc0c:	e000      	b.n	803dc10 <USBD_StdEPReq+0x330>
      break;
 803dc0e:	bf00      	nop
  }

  return ret;
 803dc10:	7bfb      	ldrb	r3, [r7, #15]
}
 803dc12:	4618      	mov	r0, r3
 803dc14:	3710      	adds	r7, #16
 803dc16:	46bd      	mov	sp, r7
 803dc18:	bd80      	pop	{r7, pc}
	...

0803dc1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803dc1c:	b580      	push	{r7, lr}
 803dc1e:	b084      	sub	sp, #16
 803dc20:	af00      	add	r7, sp, #0
 803dc22:	6078      	str	r0, [r7, #4]
 803dc24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803dc26:	2300      	movs	r3, #0
 803dc28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803dc2a:	2300      	movs	r3, #0
 803dc2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803dc2e:	2300      	movs	r3, #0
 803dc30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803dc32:	683b      	ldr	r3, [r7, #0]
 803dc34:	885b      	ldrh	r3, [r3, #2]
 803dc36:	0a1b      	lsrs	r3, r3, #8
 803dc38:	b29b      	uxth	r3, r3
 803dc3a:	3b01      	subs	r3, #1
 803dc3c:	2b06      	cmp	r3, #6
 803dc3e:	f200 8128 	bhi.w	803de92 <USBD_GetDescriptor+0x276>
 803dc42:	a201      	add	r2, pc, #4	; (adr r2, 803dc48 <USBD_GetDescriptor+0x2c>)
 803dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803dc48:	0803dc65 	.word	0x0803dc65
 803dc4c:	0803dc7d 	.word	0x0803dc7d
 803dc50:	0803dcbd 	.word	0x0803dcbd
 803dc54:	0803de93 	.word	0x0803de93
 803dc58:	0803de93 	.word	0x0803de93
 803dc5c:	0803de33 	.word	0x0803de33
 803dc60:	0803de5f 	.word	0x0803de5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803dc64:	687b      	ldr	r3, [r7, #4]
 803dc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dc6a:	681b      	ldr	r3, [r3, #0]
 803dc6c:	687a      	ldr	r2, [r7, #4]
 803dc6e:	7c12      	ldrb	r2, [r2, #16]
 803dc70:	f107 0108 	add.w	r1, r7, #8
 803dc74:	4610      	mov	r0, r2
 803dc76:	4798      	blx	r3
 803dc78:	60f8      	str	r0, [r7, #12]
      break;
 803dc7a:	e112      	b.n	803dea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803dc7c:	687b      	ldr	r3, [r7, #4]
 803dc7e:	7c1b      	ldrb	r3, [r3, #16]
 803dc80:	2b00      	cmp	r3, #0
 803dc82:	d10d      	bne.n	803dca0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803dc84:	687b      	ldr	r3, [r7, #4]
 803dc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803dc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803dc8c:	f107 0208 	add.w	r2, r7, #8
 803dc90:	4610      	mov	r0, r2
 803dc92:	4798      	blx	r3
 803dc94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803dc96:	68fb      	ldr	r3, [r7, #12]
 803dc98:	3301      	adds	r3, #1
 803dc9a:	2202      	movs	r2, #2
 803dc9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803dc9e:	e100      	b.n	803dea2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803dca0:	687b      	ldr	r3, [r7, #4]
 803dca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803dca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803dca8:	f107 0208 	add.w	r2, r7, #8
 803dcac:	4610      	mov	r0, r2
 803dcae:	4798      	blx	r3
 803dcb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803dcb2:	68fb      	ldr	r3, [r7, #12]
 803dcb4:	3301      	adds	r3, #1
 803dcb6:	2202      	movs	r2, #2
 803dcb8:	701a      	strb	r2, [r3, #0]
      break;
 803dcba:	e0f2      	b.n	803dea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803dcbc:	683b      	ldr	r3, [r7, #0]
 803dcbe:	885b      	ldrh	r3, [r3, #2]
 803dcc0:	b2db      	uxtb	r3, r3
 803dcc2:	2b05      	cmp	r3, #5
 803dcc4:	f200 80ac 	bhi.w	803de20 <USBD_GetDescriptor+0x204>
 803dcc8:	a201      	add	r2, pc, #4	; (adr r2, 803dcd0 <USBD_GetDescriptor+0xb4>)
 803dcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803dcce:	bf00      	nop
 803dcd0:	0803dce9 	.word	0x0803dce9
 803dcd4:	0803dd1d 	.word	0x0803dd1d
 803dcd8:	0803dd51 	.word	0x0803dd51
 803dcdc:	0803dd85 	.word	0x0803dd85
 803dce0:	0803ddb9 	.word	0x0803ddb9
 803dce4:	0803dded 	.word	0x0803dded
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803dce8:	687b      	ldr	r3, [r7, #4]
 803dcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dcee:	685b      	ldr	r3, [r3, #4]
 803dcf0:	2b00      	cmp	r3, #0
 803dcf2:	d00b      	beq.n	803dd0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803dcf4:	687b      	ldr	r3, [r7, #4]
 803dcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dcfa:	685b      	ldr	r3, [r3, #4]
 803dcfc:	687a      	ldr	r2, [r7, #4]
 803dcfe:	7c12      	ldrb	r2, [r2, #16]
 803dd00:	f107 0108 	add.w	r1, r7, #8
 803dd04:	4610      	mov	r0, r2
 803dd06:	4798      	blx	r3
 803dd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803dd0a:	e091      	b.n	803de30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803dd0c:	6839      	ldr	r1, [r7, #0]
 803dd0e:	6878      	ldr	r0, [r7, #4]
 803dd10:	f000 facb 	bl	803e2aa <USBD_CtlError>
            err++;
 803dd14:	7afb      	ldrb	r3, [r7, #11]
 803dd16:	3301      	adds	r3, #1
 803dd18:	72fb      	strb	r3, [r7, #11]
          break;
 803dd1a:	e089      	b.n	803de30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803dd1c:	687b      	ldr	r3, [r7, #4]
 803dd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dd22:	689b      	ldr	r3, [r3, #8]
 803dd24:	2b00      	cmp	r3, #0
 803dd26:	d00b      	beq.n	803dd40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803dd28:	687b      	ldr	r3, [r7, #4]
 803dd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dd2e:	689b      	ldr	r3, [r3, #8]
 803dd30:	687a      	ldr	r2, [r7, #4]
 803dd32:	7c12      	ldrb	r2, [r2, #16]
 803dd34:	f107 0108 	add.w	r1, r7, #8
 803dd38:	4610      	mov	r0, r2
 803dd3a:	4798      	blx	r3
 803dd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803dd3e:	e077      	b.n	803de30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803dd40:	6839      	ldr	r1, [r7, #0]
 803dd42:	6878      	ldr	r0, [r7, #4]
 803dd44:	f000 fab1 	bl	803e2aa <USBD_CtlError>
            err++;
 803dd48:	7afb      	ldrb	r3, [r7, #11]
 803dd4a:	3301      	adds	r3, #1
 803dd4c:	72fb      	strb	r3, [r7, #11]
          break;
 803dd4e:	e06f      	b.n	803de30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803dd50:	687b      	ldr	r3, [r7, #4]
 803dd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dd56:	68db      	ldr	r3, [r3, #12]
 803dd58:	2b00      	cmp	r3, #0
 803dd5a:	d00b      	beq.n	803dd74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803dd5c:	687b      	ldr	r3, [r7, #4]
 803dd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dd62:	68db      	ldr	r3, [r3, #12]
 803dd64:	687a      	ldr	r2, [r7, #4]
 803dd66:	7c12      	ldrb	r2, [r2, #16]
 803dd68:	f107 0108 	add.w	r1, r7, #8
 803dd6c:	4610      	mov	r0, r2
 803dd6e:	4798      	blx	r3
 803dd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803dd72:	e05d      	b.n	803de30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803dd74:	6839      	ldr	r1, [r7, #0]
 803dd76:	6878      	ldr	r0, [r7, #4]
 803dd78:	f000 fa97 	bl	803e2aa <USBD_CtlError>
            err++;
 803dd7c:	7afb      	ldrb	r3, [r7, #11]
 803dd7e:	3301      	adds	r3, #1
 803dd80:	72fb      	strb	r3, [r7, #11]
          break;
 803dd82:	e055      	b.n	803de30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803dd84:	687b      	ldr	r3, [r7, #4]
 803dd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dd8a:	691b      	ldr	r3, [r3, #16]
 803dd8c:	2b00      	cmp	r3, #0
 803dd8e:	d00b      	beq.n	803dda8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803dd90:	687b      	ldr	r3, [r7, #4]
 803dd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803dd96:	691b      	ldr	r3, [r3, #16]
 803dd98:	687a      	ldr	r2, [r7, #4]
 803dd9a:	7c12      	ldrb	r2, [r2, #16]
 803dd9c:	f107 0108 	add.w	r1, r7, #8
 803dda0:	4610      	mov	r0, r2
 803dda2:	4798      	blx	r3
 803dda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803dda6:	e043      	b.n	803de30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803dda8:	6839      	ldr	r1, [r7, #0]
 803ddaa:	6878      	ldr	r0, [r7, #4]
 803ddac:	f000 fa7d 	bl	803e2aa <USBD_CtlError>
            err++;
 803ddb0:	7afb      	ldrb	r3, [r7, #11]
 803ddb2:	3301      	adds	r3, #1
 803ddb4:	72fb      	strb	r3, [r7, #11]
          break;
 803ddb6:	e03b      	b.n	803de30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803ddb8:	687b      	ldr	r3, [r7, #4]
 803ddba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ddbe:	695b      	ldr	r3, [r3, #20]
 803ddc0:	2b00      	cmp	r3, #0
 803ddc2:	d00b      	beq.n	803dddc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803ddc4:	687b      	ldr	r3, [r7, #4]
 803ddc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ddca:	695b      	ldr	r3, [r3, #20]
 803ddcc:	687a      	ldr	r2, [r7, #4]
 803ddce:	7c12      	ldrb	r2, [r2, #16]
 803ddd0:	f107 0108 	add.w	r1, r7, #8
 803ddd4:	4610      	mov	r0, r2
 803ddd6:	4798      	blx	r3
 803ddd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ddda:	e029      	b.n	803de30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803dddc:	6839      	ldr	r1, [r7, #0]
 803ddde:	6878      	ldr	r0, [r7, #4]
 803dde0:	f000 fa63 	bl	803e2aa <USBD_CtlError>
            err++;
 803dde4:	7afb      	ldrb	r3, [r7, #11]
 803dde6:	3301      	adds	r3, #1
 803dde8:	72fb      	strb	r3, [r7, #11]
          break;
 803ddea:	e021      	b.n	803de30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803ddec:	687b      	ldr	r3, [r7, #4]
 803ddee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ddf2:	699b      	ldr	r3, [r3, #24]
 803ddf4:	2b00      	cmp	r3, #0
 803ddf6:	d00b      	beq.n	803de10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803ddf8:	687b      	ldr	r3, [r7, #4]
 803ddfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ddfe:	699b      	ldr	r3, [r3, #24]
 803de00:	687a      	ldr	r2, [r7, #4]
 803de02:	7c12      	ldrb	r2, [r2, #16]
 803de04:	f107 0108 	add.w	r1, r7, #8
 803de08:	4610      	mov	r0, r2
 803de0a:	4798      	blx	r3
 803de0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803de0e:	e00f      	b.n	803de30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803de10:	6839      	ldr	r1, [r7, #0]
 803de12:	6878      	ldr	r0, [r7, #4]
 803de14:	f000 fa49 	bl	803e2aa <USBD_CtlError>
            err++;
 803de18:	7afb      	ldrb	r3, [r7, #11]
 803de1a:	3301      	adds	r3, #1
 803de1c:	72fb      	strb	r3, [r7, #11]
          break;
 803de1e:	e007      	b.n	803de30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803de20:	6839      	ldr	r1, [r7, #0]
 803de22:	6878      	ldr	r0, [r7, #4]
 803de24:	f000 fa41 	bl	803e2aa <USBD_CtlError>
          err++;
 803de28:	7afb      	ldrb	r3, [r7, #11]
 803de2a:	3301      	adds	r3, #1
 803de2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803de2e:	bf00      	nop
      }
      break;
 803de30:	e037      	b.n	803dea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803de32:	687b      	ldr	r3, [r7, #4]
 803de34:	7c1b      	ldrb	r3, [r3, #16]
 803de36:	2b00      	cmp	r3, #0
 803de38:	d109      	bne.n	803de4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803de3a:	687b      	ldr	r3, [r7, #4]
 803de3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803de40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803de42:	f107 0208 	add.w	r2, r7, #8
 803de46:	4610      	mov	r0, r2
 803de48:	4798      	blx	r3
 803de4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803de4c:	e029      	b.n	803dea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803de4e:	6839      	ldr	r1, [r7, #0]
 803de50:	6878      	ldr	r0, [r7, #4]
 803de52:	f000 fa2a 	bl	803e2aa <USBD_CtlError>
        err++;
 803de56:	7afb      	ldrb	r3, [r7, #11]
 803de58:	3301      	adds	r3, #1
 803de5a:	72fb      	strb	r3, [r7, #11]
      break;
 803de5c:	e021      	b.n	803dea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803de5e:	687b      	ldr	r3, [r7, #4]
 803de60:	7c1b      	ldrb	r3, [r3, #16]
 803de62:	2b00      	cmp	r3, #0
 803de64:	d10d      	bne.n	803de82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803de66:	687b      	ldr	r3, [r7, #4]
 803de68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803de6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803de6e:	f107 0208 	add.w	r2, r7, #8
 803de72:	4610      	mov	r0, r2
 803de74:	4798      	blx	r3
 803de76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803de78:	68fb      	ldr	r3, [r7, #12]
 803de7a:	3301      	adds	r3, #1
 803de7c:	2207      	movs	r2, #7
 803de7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803de80:	e00f      	b.n	803dea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803de82:	6839      	ldr	r1, [r7, #0]
 803de84:	6878      	ldr	r0, [r7, #4]
 803de86:	f000 fa10 	bl	803e2aa <USBD_CtlError>
        err++;
 803de8a:	7afb      	ldrb	r3, [r7, #11]
 803de8c:	3301      	adds	r3, #1
 803de8e:	72fb      	strb	r3, [r7, #11]
      break;
 803de90:	e007      	b.n	803dea2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803de92:	6839      	ldr	r1, [r7, #0]
 803de94:	6878      	ldr	r0, [r7, #4]
 803de96:	f000 fa08 	bl	803e2aa <USBD_CtlError>
      err++;
 803de9a:	7afb      	ldrb	r3, [r7, #11]
 803de9c:	3301      	adds	r3, #1
 803de9e:	72fb      	strb	r3, [r7, #11]
      break;
 803dea0:	bf00      	nop
  }

  if (err != 0U)
 803dea2:	7afb      	ldrb	r3, [r7, #11]
 803dea4:	2b00      	cmp	r3, #0
 803dea6:	d11e      	bne.n	803dee6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803dea8:	683b      	ldr	r3, [r7, #0]
 803deaa:	88db      	ldrh	r3, [r3, #6]
 803deac:	2b00      	cmp	r3, #0
 803deae:	d016      	beq.n	803dede <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803deb0:	893b      	ldrh	r3, [r7, #8]
 803deb2:	2b00      	cmp	r3, #0
 803deb4:	d00e      	beq.n	803ded4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803deb6:	683b      	ldr	r3, [r7, #0]
 803deb8:	88da      	ldrh	r2, [r3, #6]
 803deba:	893b      	ldrh	r3, [r7, #8]
 803debc:	4293      	cmp	r3, r2
 803debe:	bf28      	it	cs
 803dec0:	4613      	movcs	r3, r2
 803dec2:	b29b      	uxth	r3, r3
 803dec4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803dec6:	893b      	ldrh	r3, [r7, #8]
 803dec8:	461a      	mov	r2, r3
 803deca:	68f9      	ldr	r1, [r7, #12]
 803decc:	6878      	ldr	r0, [r7, #4]
 803dece:	f000 fa5d 	bl	803e38c <USBD_CtlSendData>
 803ded2:	e009      	b.n	803dee8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803ded4:	6839      	ldr	r1, [r7, #0]
 803ded6:	6878      	ldr	r0, [r7, #4]
 803ded8:	f000 f9e7 	bl	803e2aa <USBD_CtlError>
 803dedc:	e004      	b.n	803dee8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803dede:	6878      	ldr	r0, [r7, #4]
 803dee0:	f000 faae 	bl	803e440 <USBD_CtlSendStatus>
 803dee4:	e000      	b.n	803dee8 <USBD_GetDescriptor+0x2cc>
    return;
 803dee6:	bf00      	nop
  }
}
 803dee8:	3710      	adds	r7, #16
 803deea:	46bd      	mov	sp, r7
 803deec:	bd80      	pop	{r7, pc}
 803deee:	bf00      	nop

0803def0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803def0:	b580      	push	{r7, lr}
 803def2:	b084      	sub	sp, #16
 803def4:	af00      	add	r7, sp, #0
 803def6:	6078      	str	r0, [r7, #4]
 803def8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803defa:	683b      	ldr	r3, [r7, #0]
 803defc:	889b      	ldrh	r3, [r3, #4]
 803defe:	2b00      	cmp	r3, #0
 803df00:	d131      	bne.n	803df66 <USBD_SetAddress+0x76>
 803df02:	683b      	ldr	r3, [r7, #0]
 803df04:	88db      	ldrh	r3, [r3, #6]
 803df06:	2b00      	cmp	r3, #0
 803df08:	d12d      	bne.n	803df66 <USBD_SetAddress+0x76>
 803df0a:	683b      	ldr	r3, [r7, #0]
 803df0c:	885b      	ldrh	r3, [r3, #2]
 803df0e:	2b7f      	cmp	r3, #127	; 0x7f
 803df10:	d829      	bhi.n	803df66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803df12:	683b      	ldr	r3, [r7, #0]
 803df14:	885b      	ldrh	r3, [r3, #2]
 803df16:	b2db      	uxtb	r3, r3
 803df18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803df1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803df1e:	687b      	ldr	r3, [r7, #4]
 803df20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803df24:	b2db      	uxtb	r3, r3
 803df26:	2b03      	cmp	r3, #3
 803df28:	d104      	bne.n	803df34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803df2a:	6839      	ldr	r1, [r7, #0]
 803df2c:	6878      	ldr	r0, [r7, #4]
 803df2e:	f000 f9bc 	bl	803e2aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803df32:	e01d      	b.n	803df70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803df34:	687b      	ldr	r3, [r7, #4]
 803df36:	7bfa      	ldrb	r2, [r7, #15]
 803df38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803df3c:	7bfb      	ldrb	r3, [r7, #15]
 803df3e:	4619      	mov	r1, r3
 803df40:	6878      	ldr	r0, [r7, #4]
 803df42:	f000 ff0b 	bl	803ed5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803df46:	6878      	ldr	r0, [r7, #4]
 803df48:	f000 fa7a 	bl	803e440 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803df4c:	7bfb      	ldrb	r3, [r7, #15]
 803df4e:	2b00      	cmp	r3, #0
 803df50:	d004      	beq.n	803df5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803df52:	687b      	ldr	r3, [r7, #4]
 803df54:	2202      	movs	r2, #2
 803df56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803df5a:	e009      	b.n	803df70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803df5c:	687b      	ldr	r3, [r7, #4]
 803df5e:	2201      	movs	r2, #1
 803df60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803df64:	e004      	b.n	803df70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803df66:	6839      	ldr	r1, [r7, #0]
 803df68:	6878      	ldr	r0, [r7, #4]
 803df6a:	f000 f99e 	bl	803e2aa <USBD_CtlError>
  }
}
 803df6e:	bf00      	nop
 803df70:	bf00      	nop
 803df72:	3710      	adds	r7, #16
 803df74:	46bd      	mov	sp, r7
 803df76:	bd80      	pop	{r7, pc}

0803df78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803df78:	b580      	push	{r7, lr}
 803df7a:	b084      	sub	sp, #16
 803df7c:	af00      	add	r7, sp, #0
 803df7e:	6078      	str	r0, [r7, #4]
 803df80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803df82:	2300      	movs	r3, #0
 803df84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803df86:	683b      	ldr	r3, [r7, #0]
 803df88:	885b      	ldrh	r3, [r3, #2]
 803df8a:	b2da      	uxtb	r2, r3
 803df8c:	4b4e      	ldr	r3, [pc, #312]	; (803e0c8 <USBD_SetConfig+0x150>)
 803df8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803df90:	4b4d      	ldr	r3, [pc, #308]	; (803e0c8 <USBD_SetConfig+0x150>)
 803df92:	781b      	ldrb	r3, [r3, #0]
 803df94:	2b01      	cmp	r3, #1
 803df96:	d905      	bls.n	803dfa4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803df98:	6839      	ldr	r1, [r7, #0]
 803df9a:	6878      	ldr	r0, [r7, #4]
 803df9c:	f000 f985 	bl	803e2aa <USBD_CtlError>
    return USBD_FAIL;
 803dfa0:	2303      	movs	r3, #3
 803dfa2:	e08c      	b.n	803e0be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803dfa4:	687b      	ldr	r3, [r7, #4]
 803dfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803dfaa:	b2db      	uxtb	r3, r3
 803dfac:	2b02      	cmp	r3, #2
 803dfae:	d002      	beq.n	803dfb6 <USBD_SetConfig+0x3e>
 803dfb0:	2b03      	cmp	r3, #3
 803dfb2:	d029      	beq.n	803e008 <USBD_SetConfig+0x90>
 803dfb4:	e075      	b.n	803e0a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803dfb6:	4b44      	ldr	r3, [pc, #272]	; (803e0c8 <USBD_SetConfig+0x150>)
 803dfb8:	781b      	ldrb	r3, [r3, #0]
 803dfba:	2b00      	cmp	r3, #0
 803dfbc:	d020      	beq.n	803e000 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803dfbe:	4b42      	ldr	r3, [pc, #264]	; (803e0c8 <USBD_SetConfig+0x150>)
 803dfc0:	781b      	ldrb	r3, [r3, #0]
 803dfc2:	461a      	mov	r2, r3
 803dfc4:	687b      	ldr	r3, [r7, #4]
 803dfc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803dfc8:	4b3f      	ldr	r3, [pc, #252]	; (803e0c8 <USBD_SetConfig+0x150>)
 803dfca:	781b      	ldrb	r3, [r3, #0]
 803dfcc:	4619      	mov	r1, r3
 803dfce:	6878      	ldr	r0, [r7, #4]
 803dfd0:	f7fe ffe7 	bl	803cfa2 <USBD_SetClassConfig>
 803dfd4:	4603      	mov	r3, r0
 803dfd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803dfd8:	7bfb      	ldrb	r3, [r7, #15]
 803dfda:	2b00      	cmp	r3, #0
 803dfdc:	d008      	beq.n	803dff0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803dfde:	6839      	ldr	r1, [r7, #0]
 803dfe0:	6878      	ldr	r0, [r7, #4]
 803dfe2:	f000 f962 	bl	803e2aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803dfe6:	687b      	ldr	r3, [r7, #4]
 803dfe8:	2202      	movs	r2, #2
 803dfea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803dfee:	e065      	b.n	803e0bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803dff0:	6878      	ldr	r0, [r7, #4]
 803dff2:	f000 fa25 	bl	803e440 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803dff6:	687b      	ldr	r3, [r7, #4]
 803dff8:	2203      	movs	r2, #3
 803dffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803dffe:	e05d      	b.n	803e0bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803e000:	6878      	ldr	r0, [r7, #4]
 803e002:	f000 fa1d 	bl	803e440 <USBD_CtlSendStatus>
      break;
 803e006:	e059      	b.n	803e0bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803e008:	4b2f      	ldr	r3, [pc, #188]	; (803e0c8 <USBD_SetConfig+0x150>)
 803e00a:	781b      	ldrb	r3, [r3, #0]
 803e00c:	2b00      	cmp	r3, #0
 803e00e:	d112      	bne.n	803e036 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803e010:	687b      	ldr	r3, [r7, #4]
 803e012:	2202      	movs	r2, #2
 803e014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803e018:	4b2b      	ldr	r3, [pc, #172]	; (803e0c8 <USBD_SetConfig+0x150>)
 803e01a:	781b      	ldrb	r3, [r3, #0]
 803e01c:	461a      	mov	r2, r3
 803e01e:	687b      	ldr	r3, [r7, #4]
 803e020:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803e022:	4b29      	ldr	r3, [pc, #164]	; (803e0c8 <USBD_SetConfig+0x150>)
 803e024:	781b      	ldrb	r3, [r3, #0]
 803e026:	4619      	mov	r1, r3
 803e028:	6878      	ldr	r0, [r7, #4]
 803e02a:	f7fe ffd6 	bl	803cfda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803e02e:	6878      	ldr	r0, [r7, #4]
 803e030:	f000 fa06 	bl	803e440 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803e034:	e042      	b.n	803e0bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803e036:	4b24      	ldr	r3, [pc, #144]	; (803e0c8 <USBD_SetConfig+0x150>)
 803e038:	781b      	ldrb	r3, [r3, #0]
 803e03a:	461a      	mov	r2, r3
 803e03c:	687b      	ldr	r3, [r7, #4]
 803e03e:	685b      	ldr	r3, [r3, #4]
 803e040:	429a      	cmp	r2, r3
 803e042:	d02a      	beq.n	803e09a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803e044:	687b      	ldr	r3, [r7, #4]
 803e046:	685b      	ldr	r3, [r3, #4]
 803e048:	b2db      	uxtb	r3, r3
 803e04a:	4619      	mov	r1, r3
 803e04c:	6878      	ldr	r0, [r7, #4]
 803e04e:	f7fe ffc4 	bl	803cfda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803e052:	4b1d      	ldr	r3, [pc, #116]	; (803e0c8 <USBD_SetConfig+0x150>)
 803e054:	781b      	ldrb	r3, [r3, #0]
 803e056:	461a      	mov	r2, r3
 803e058:	687b      	ldr	r3, [r7, #4]
 803e05a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803e05c:	4b1a      	ldr	r3, [pc, #104]	; (803e0c8 <USBD_SetConfig+0x150>)
 803e05e:	781b      	ldrb	r3, [r3, #0]
 803e060:	4619      	mov	r1, r3
 803e062:	6878      	ldr	r0, [r7, #4]
 803e064:	f7fe ff9d 	bl	803cfa2 <USBD_SetClassConfig>
 803e068:	4603      	mov	r3, r0
 803e06a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803e06c:	7bfb      	ldrb	r3, [r7, #15]
 803e06e:	2b00      	cmp	r3, #0
 803e070:	d00f      	beq.n	803e092 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803e072:	6839      	ldr	r1, [r7, #0]
 803e074:	6878      	ldr	r0, [r7, #4]
 803e076:	f000 f918 	bl	803e2aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803e07a:	687b      	ldr	r3, [r7, #4]
 803e07c:	685b      	ldr	r3, [r3, #4]
 803e07e:	b2db      	uxtb	r3, r3
 803e080:	4619      	mov	r1, r3
 803e082:	6878      	ldr	r0, [r7, #4]
 803e084:	f7fe ffa9 	bl	803cfda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803e088:	687b      	ldr	r3, [r7, #4]
 803e08a:	2202      	movs	r2, #2
 803e08c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803e090:	e014      	b.n	803e0bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803e092:	6878      	ldr	r0, [r7, #4]
 803e094:	f000 f9d4 	bl	803e440 <USBD_CtlSendStatus>
      break;
 803e098:	e010      	b.n	803e0bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803e09a:	6878      	ldr	r0, [r7, #4]
 803e09c:	f000 f9d0 	bl	803e440 <USBD_CtlSendStatus>
      break;
 803e0a0:	e00c      	b.n	803e0bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803e0a2:	6839      	ldr	r1, [r7, #0]
 803e0a4:	6878      	ldr	r0, [r7, #4]
 803e0a6:	f000 f900 	bl	803e2aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803e0aa:	4b07      	ldr	r3, [pc, #28]	; (803e0c8 <USBD_SetConfig+0x150>)
 803e0ac:	781b      	ldrb	r3, [r3, #0]
 803e0ae:	4619      	mov	r1, r3
 803e0b0:	6878      	ldr	r0, [r7, #4]
 803e0b2:	f7fe ff92 	bl	803cfda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803e0b6:	2303      	movs	r3, #3
 803e0b8:	73fb      	strb	r3, [r7, #15]
      break;
 803e0ba:	bf00      	nop
  }

  return ret;
 803e0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 803e0be:	4618      	mov	r0, r3
 803e0c0:	3710      	adds	r7, #16
 803e0c2:	46bd      	mov	sp, r7
 803e0c4:	bd80      	pop	{r7, pc}
 803e0c6:	bf00      	nop
 803e0c8:	24001bd0 	.word	0x24001bd0

0803e0cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e0cc:	b580      	push	{r7, lr}
 803e0ce:	b082      	sub	sp, #8
 803e0d0:	af00      	add	r7, sp, #0
 803e0d2:	6078      	str	r0, [r7, #4]
 803e0d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803e0d6:	683b      	ldr	r3, [r7, #0]
 803e0d8:	88db      	ldrh	r3, [r3, #6]
 803e0da:	2b01      	cmp	r3, #1
 803e0dc:	d004      	beq.n	803e0e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803e0de:	6839      	ldr	r1, [r7, #0]
 803e0e0:	6878      	ldr	r0, [r7, #4]
 803e0e2:	f000 f8e2 	bl	803e2aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803e0e6:	e023      	b.n	803e130 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803e0e8:	687b      	ldr	r3, [r7, #4]
 803e0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e0ee:	b2db      	uxtb	r3, r3
 803e0f0:	2b02      	cmp	r3, #2
 803e0f2:	dc02      	bgt.n	803e0fa <USBD_GetConfig+0x2e>
 803e0f4:	2b00      	cmp	r3, #0
 803e0f6:	dc03      	bgt.n	803e100 <USBD_GetConfig+0x34>
 803e0f8:	e015      	b.n	803e126 <USBD_GetConfig+0x5a>
 803e0fa:	2b03      	cmp	r3, #3
 803e0fc:	d00b      	beq.n	803e116 <USBD_GetConfig+0x4a>
 803e0fe:	e012      	b.n	803e126 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803e100:	687b      	ldr	r3, [r7, #4]
 803e102:	2200      	movs	r2, #0
 803e104:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803e106:	687b      	ldr	r3, [r7, #4]
 803e108:	3308      	adds	r3, #8
 803e10a:	2201      	movs	r2, #1
 803e10c:	4619      	mov	r1, r3
 803e10e:	6878      	ldr	r0, [r7, #4]
 803e110:	f000 f93c 	bl	803e38c <USBD_CtlSendData>
        break;
 803e114:	e00c      	b.n	803e130 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803e116:	687b      	ldr	r3, [r7, #4]
 803e118:	3304      	adds	r3, #4
 803e11a:	2201      	movs	r2, #1
 803e11c:	4619      	mov	r1, r3
 803e11e:	6878      	ldr	r0, [r7, #4]
 803e120:	f000 f934 	bl	803e38c <USBD_CtlSendData>
        break;
 803e124:	e004      	b.n	803e130 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803e126:	6839      	ldr	r1, [r7, #0]
 803e128:	6878      	ldr	r0, [r7, #4]
 803e12a:	f000 f8be 	bl	803e2aa <USBD_CtlError>
        break;
 803e12e:	bf00      	nop
}
 803e130:	bf00      	nop
 803e132:	3708      	adds	r7, #8
 803e134:	46bd      	mov	sp, r7
 803e136:	bd80      	pop	{r7, pc}

0803e138 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e138:	b580      	push	{r7, lr}
 803e13a:	b082      	sub	sp, #8
 803e13c:	af00      	add	r7, sp, #0
 803e13e:	6078      	str	r0, [r7, #4]
 803e140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803e142:	687b      	ldr	r3, [r7, #4]
 803e144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e148:	b2db      	uxtb	r3, r3
 803e14a:	3b01      	subs	r3, #1
 803e14c:	2b02      	cmp	r3, #2
 803e14e:	d81e      	bhi.n	803e18e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803e150:	683b      	ldr	r3, [r7, #0]
 803e152:	88db      	ldrh	r3, [r3, #6]
 803e154:	2b02      	cmp	r3, #2
 803e156:	d004      	beq.n	803e162 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803e158:	6839      	ldr	r1, [r7, #0]
 803e15a:	6878      	ldr	r0, [r7, #4]
 803e15c:	f000 f8a5 	bl	803e2aa <USBD_CtlError>
        break;
 803e160:	e01a      	b.n	803e198 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803e162:	687b      	ldr	r3, [r7, #4]
 803e164:	2201      	movs	r2, #1
 803e166:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803e168:	687b      	ldr	r3, [r7, #4]
 803e16a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803e16e:	2b00      	cmp	r3, #0
 803e170:	d005      	beq.n	803e17e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803e172:	687b      	ldr	r3, [r7, #4]
 803e174:	68db      	ldr	r3, [r3, #12]
 803e176:	f043 0202 	orr.w	r2, r3, #2
 803e17a:	687b      	ldr	r3, [r7, #4]
 803e17c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803e17e:	687b      	ldr	r3, [r7, #4]
 803e180:	330c      	adds	r3, #12
 803e182:	2202      	movs	r2, #2
 803e184:	4619      	mov	r1, r3
 803e186:	6878      	ldr	r0, [r7, #4]
 803e188:	f000 f900 	bl	803e38c <USBD_CtlSendData>
      break;
 803e18c:	e004      	b.n	803e198 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803e18e:	6839      	ldr	r1, [r7, #0]
 803e190:	6878      	ldr	r0, [r7, #4]
 803e192:	f000 f88a 	bl	803e2aa <USBD_CtlError>
      break;
 803e196:	bf00      	nop
  }
}
 803e198:	bf00      	nop
 803e19a:	3708      	adds	r7, #8
 803e19c:	46bd      	mov	sp, r7
 803e19e:	bd80      	pop	{r7, pc}

0803e1a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e1a0:	b580      	push	{r7, lr}
 803e1a2:	b082      	sub	sp, #8
 803e1a4:	af00      	add	r7, sp, #0
 803e1a6:	6078      	str	r0, [r7, #4]
 803e1a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803e1aa:	683b      	ldr	r3, [r7, #0]
 803e1ac:	885b      	ldrh	r3, [r3, #2]
 803e1ae:	2b01      	cmp	r3, #1
 803e1b0:	d107      	bne.n	803e1c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803e1b2:	687b      	ldr	r3, [r7, #4]
 803e1b4:	2201      	movs	r2, #1
 803e1b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803e1ba:	6878      	ldr	r0, [r7, #4]
 803e1bc:	f000 f940 	bl	803e440 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803e1c0:	e013      	b.n	803e1ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803e1c2:	683b      	ldr	r3, [r7, #0]
 803e1c4:	885b      	ldrh	r3, [r3, #2]
 803e1c6:	2b02      	cmp	r3, #2
 803e1c8:	d10b      	bne.n	803e1e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803e1ca:	683b      	ldr	r3, [r7, #0]
 803e1cc:	889b      	ldrh	r3, [r3, #4]
 803e1ce:	0a1b      	lsrs	r3, r3, #8
 803e1d0:	b29b      	uxth	r3, r3
 803e1d2:	b2da      	uxtb	r2, r3
 803e1d4:	687b      	ldr	r3, [r7, #4]
 803e1d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803e1da:	6878      	ldr	r0, [r7, #4]
 803e1dc:	f000 f930 	bl	803e440 <USBD_CtlSendStatus>
}
 803e1e0:	e003      	b.n	803e1ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803e1e2:	6839      	ldr	r1, [r7, #0]
 803e1e4:	6878      	ldr	r0, [r7, #4]
 803e1e6:	f000 f860 	bl	803e2aa <USBD_CtlError>
}
 803e1ea:	bf00      	nop
 803e1ec:	3708      	adds	r7, #8
 803e1ee:	46bd      	mov	sp, r7
 803e1f0:	bd80      	pop	{r7, pc}

0803e1f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e1f2:	b580      	push	{r7, lr}
 803e1f4:	b082      	sub	sp, #8
 803e1f6:	af00      	add	r7, sp, #0
 803e1f8:	6078      	str	r0, [r7, #4]
 803e1fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803e1fc:	687b      	ldr	r3, [r7, #4]
 803e1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e202:	b2db      	uxtb	r3, r3
 803e204:	3b01      	subs	r3, #1
 803e206:	2b02      	cmp	r3, #2
 803e208:	d80b      	bhi.n	803e222 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803e20a:	683b      	ldr	r3, [r7, #0]
 803e20c:	885b      	ldrh	r3, [r3, #2]
 803e20e:	2b01      	cmp	r3, #1
 803e210:	d10c      	bne.n	803e22c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803e212:	687b      	ldr	r3, [r7, #4]
 803e214:	2200      	movs	r2, #0
 803e216:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803e21a:	6878      	ldr	r0, [r7, #4]
 803e21c:	f000 f910 	bl	803e440 <USBD_CtlSendStatus>
      }
      break;
 803e220:	e004      	b.n	803e22c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803e222:	6839      	ldr	r1, [r7, #0]
 803e224:	6878      	ldr	r0, [r7, #4]
 803e226:	f000 f840 	bl	803e2aa <USBD_CtlError>
      break;
 803e22a:	e000      	b.n	803e22e <USBD_ClrFeature+0x3c>
      break;
 803e22c:	bf00      	nop
  }
}
 803e22e:	bf00      	nop
 803e230:	3708      	adds	r7, #8
 803e232:	46bd      	mov	sp, r7
 803e234:	bd80      	pop	{r7, pc}

0803e236 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803e236:	b580      	push	{r7, lr}
 803e238:	b084      	sub	sp, #16
 803e23a:	af00      	add	r7, sp, #0
 803e23c:	6078      	str	r0, [r7, #4]
 803e23e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803e240:	683b      	ldr	r3, [r7, #0]
 803e242:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803e244:	68fb      	ldr	r3, [r7, #12]
 803e246:	781a      	ldrb	r2, [r3, #0]
 803e248:	687b      	ldr	r3, [r7, #4]
 803e24a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803e24c:	68fb      	ldr	r3, [r7, #12]
 803e24e:	3301      	adds	r3, #1
 803e250:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803e252:	68fb      	ldr	r3, [r7, #12]
 803e254:	781a      	ldrb	r2, [r3, #0]
 803e256:	687b      	ldr	r3, [r7, #4]
 803e258:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803e25a:	68fb      	ldr	r3, [r7, #12]
 803e25c:	3301      	adds	r3, #1
 803e25e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803e260:	68f8      	ldr	r0, [r7, #12]
 803e262:	f7ff fa41 	bl	803d6e8 <SWAPBYTE>
 803e266:	4603      	mov	r3, r0
 803e268:	461a      	mov	r2, r3
 803e26a:	687b      	ldr	r3, [r7, #4]
 803e26c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803e26e:	68fb      	ldr	r3, [r7, #12]
 803e270:	3301      	adds	r3, #1
 803e272:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803e274:	68fb      	ldr	r3, [r7, #12]
 803e276:	3301      	adds	r3, #1
 803e278:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803e27a:	68f8      	ldr	r0, [r7, #12]
 803e27c:	f7ff fa34 	bl	803d6e8 <SWAPBYTE>
 803e280:	4603      	mov	r3, r0
 803e282:	461a      	mov	r2, r3
 803e284:	687b      	ldr	r3, [r7, #4]
 803e286:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803e288:	68fb      	ldr	r3, [r7, #12]
 803e28a:	3301      	adds	r3, #1
 803e28c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803e28e:	68fb      	ldr	r3, [r7, #12]
 803e290:	3301      	adds	r3, #1
 803e292:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803e294:	68f8      	ldr	r0, [r7, #12]
 803e296:	f7ff fa27 	bl	803d6e8 <SWAPBYTE>
 803e29a:	4603      	mov	r3, r0
 803e29c:	461a      	mov	r2, r3
 803e29e:	687b      	ldr	r3, [r7, #4]
 803e2a0:	80da      	strh	r2, [r3, #6]
}
 803e2a2:	bf00      	nop
 803e2a4:	3710      	adds	r7, #16
 803e2a6:	46bd      	mov	sp, r7
 803e2a8:	bd80      	pop	{r7, pc}

0803e2aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e2aa:	b580      	push	{r7, lr}
 803e2ac:	b082      	sub	sp, #8
 803e2ae:	af00      	add	r7, sp, #0
 803e2b0:	6078      	str	r0, [r7, #4]
 803e2b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803e2b4:	2180      	movs	r1, #128	; 0x80
 803e2b6:	6878      	ldr	r0, [r7, #4]
 803e2b8:	f000 fce6 	bl	803ec88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803e2bc:	2100      	movs	r1, #0
 803e2be:	6878      	ldr	r0, [r7, #4]
 803e2c0:	f000 fce2 	bl	803ec88 <USBD_LL_StallEP>
}
 803e2c4:	bf00      	nop
 803e2c6:	3708      	adds	r7, #8
 803e2c8:	46bd      	mov	sp, r7
 803e2ca:	bd80      	pop	{r7, pc}

0803e2cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803e2cc:	b580      	push	{r7, lr}
 803e2ce:	b086      	sub	sp, #24
 803e2d0:	af00      	add	r7, sp, #0
 803e2d2:	60f8      	str	r0, [r7, #12]
 803e2d4:	60b9      	str	r1, [r7, #8]
 803e2d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803e2d8:	2300      	movs	r3, #0
 803e2da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803e2dc:	68fb      	ldr	r3, [r7, #12]
 803e2de:	2b00      	cmp	r3, #0
 803e2e0:	d036      	beq.n	803e350 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803e2e2:	68fb      	ldr	r3, [r7, #12]
 803e2e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803e2e6:	6938      	ldr	r0, [r7, #16]
 803e2e8:	f000 f836 	bl	803e358 <USBD_GetLen>
 803e2ec:	4603      	mov	r3, r0
 803e2ee:	3301      	adds	r3, #1
 803e2f0:	b29b      	uxth	r3, r3
 803e2f2:	005b      	lsls	r3, r3, #1
 803e2f4:	b29a      	uxth	r2, r3
 803e2f6:	687b      	ldr	r3, [r7, #4]
 803e2f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803e2fa:	7dfb      	ldrb	r3, [r7, #23]
 803e2fc:	68ba      	ldr	r2, [r7, #8]
 803e2fe:	4413      	add	r3, r2
 803e300:	687a      	ldr	r2, [r7, #4]
 803e302:	7812      	ldrb	r2, [r2, #0]
 803e304:	701a      	strb	r2, [r3, #0]
  idx++;
 803e306:	7dfb      	ldrb	r3, [r7, #23]
 803e308:	3301      	adds	r3, #1
 803e30a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803e30c:	7dfb      	ldrb	r3, [r7, #23]
 803e30e:	68ba      	ldr	r2, [r7, #8]
 803e310:	4413      	add	r3, r2
 803e312:	2203      	movs	r2, #3
 803e314:	701a      	strb	r2, [r3, #0]
  idx++;
 803e316:	7dfb      	ldrb	r3, [r7, #23]
 803e318:	3301      	adds	r3, #1
 803e31a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803e31c:	e013      	b.n	803e346 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803e31e:	7dfb      	ldrb	r3, [r7, #23]
 803e320:	68ba      	ldr	r2, [r7, #8]
 803e322:	4413      	add	r3, r2
 803e324:	693a      	ldr	r2, [r7, #16]
 803e326:	7812      	ldrb	r2, [r2, #0]
 803e328:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803e32a:	693b      	ldr	r3, [r7, #16]
 803e32c:	3301      	adds	r3, #1
 803e32e:	613b      	str	r3, [r7, #16]
    idx++;
 803e330:	7dfb      	ldrb	r3, [r7, #23]
 803e332:	3301      	adds	r3, #1
 803e334:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803e336:	7dfb      	ldrb	r3, [r7, #23]
 803e338:	68ba      	ldr	r2, [r7, #8]
 803e33a:	4413      	add	r3, r2
 803e33c:	2200      	movs	r2, #0
 803e33e:	701a      	strb	r2, [r3, #0]
    idx++;
 803e340:	7dfb      	ldrb	r3, [r7, #23]
 803e342:	3301      	adds	r3, #1
 803e344:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803e346:	693b      	ldr	r3, [r7, #16]
 803e348:	781b      	ldrb	r3, [r3, #0]
 803e34a:	2b00      	cmp	r3, #0
 803e34c:	d1e7      	bne.n	803e31e <USBD_GetString+0x52>
 803e34e:	e000      	b.n	803e352 <USBD_GetString+0x86>
    return;
 803e350:	bf00      	nop
  }
}
 803e352:	3718      	adds	r7, #24
 803e354:	46bd      	mov	sp, r7
 803e356:	bd80      	pop	{r7, pc}

0803e358 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803e358:	b480      	push	{r7}
 803e35a:	b085      	sub	sp, #20
 803e35c:	af00      	add	r7, sp, #0
 803e35e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803e360:	2300      	movs	r3, #0
 803e362:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803e364:	687b      	ldr	r3, [r7, #4]
 803e366:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803e368:	e005      	b.n	803e376 <USBD_GetLen+0x1e>
  {
    len++;
 803e36a:	7bfb      	ldrb	r3, [r7, #15]
 803e36c:	3301      	adds	r3, #1
 803e36e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803e370:	68bb      	ldr	r3, [r7, #8]
 803e372:	3301      	adds	r3, #1
 803e374:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803e376:	68bb      	ldr	r3, [r7, #8]
 803e378:	781b      	ldrb	r3, [r3, #0]
 803e37a:	2b00      	cmp	r3, #0
 803e37c:	d1f5      	bne.n	803e36a <USBD_GetLen+0x12>
  }

  return len;
 803e37e:	7bfb      	ldrb	r3, [r7, #15]
}
 803e380:	4618      	mov	r0, r3
 803e382:	3714      	adds	r7, #20
 803e384:	46bd      	mov	sp, r7
 803e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e38a:	4770      	bx	lr

0803e38c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803e38c:	b580      	push	{r7, lr}
 803e38e:	b084      	sub	sp, #16
 803e390:	af00      	add	r7, sp, #0
 803e392:	60f8      	str	r0, [r7, #12]
 803e394:	60b9      	str	r1, [r7, #8]
 803e396:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803e398:	68fb      	ldr	r3, [r7, #12]
 803e39a:	2202      	movs	r2, #2
 803e39c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803e3a0:	68fb      	ldr	r3, [r7, #12]
 803e3a2:	687a      	ldr	r2, [r7, #4]
 803e3a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803e3a6:	68fb      	ldr	r3, [r7, #12]
 803e3a8:	687a      	ldr	r2, [r7, #4]
 803e3aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803e3ac:	687b      	ldr	r3, [r7, #4]
 803e3ae:	68ba      	ldr	r2, [r7, #8]
 803e3b0:	2100      	movs	r1, #0
 803e3b2:	68f8      	ldr	r0, [r7, #12]
 803e3b4:	f000 fcf1 	bl	803ed9a <USBD_LL_Transmit>

  return USBD_OK;
 803e3b8:	2300      	movs	r3, #0
}
 803e3ba:	4618      	mov	r0, r3
 803e3bc:	3710      	adds	r7, #16
 803e3be:	46bd      	mov	sp, r7
 803e3c0:	bd80      	pop	{r7, pc}

0803e3c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803e3c2:	b580      	push	{r7, lr}
 803e3c4:	b084      	sub	sp, #16
 803e3c6:	af00      	add	r7, sp, #0
 803e3c8:	60f8      	str	r0, [r7, #12]
 803e3ca:	60b9      	str	r1, [r7, #8]
 803e3cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803e3ce:	687b      	ldr	r3, [r7, #4]
 803e3d0:	68ba      	ldr	r2, [r7, #8]
 803e3d2:	2100      	movs	r1, #0
 803e3d4:	68f8      	ldr	r0, [r7, #12]
 803e3d6:	f000 fce0 	bl	803ed9a <USBD_LL_Transmit>

  return USBD_OK;
 803e3da:	2300      	movs	r3, #0
}
 803e3dc:	4618      	mov	r0, r3
 803e3de:	3710      	adds	r7, #16
 803e3e0:	46bd      	mov	sp, r7
 803e3e2:	bd80      	pop	{r7, pc}

0803e3e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803e3e4:	b580      	push	{r7, lr}
 803e3e6:	b084      	sub	sp, #16
 803e3e8:	af00      	add	r7, sp, #0
 803e3ea:	60f8      	str	r0, [r7, #12]
 803e3ec:	60b9      	str	r1, [r7, #8]
 803e3ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803e3f0:	68fb      	ldr	r3, [r7, #12]
 803e3f2:	2203      	movs	r2, #3
 803e3f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803e3f8:	68fb      	ldr	r3, [r7, #12]
 803e3fa:	687a      	ldr	r2, [r7, #4]
 803e3fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803e400:	68fb      	ldr	r3, [r7, #12]
 803e402:	687a      	ldr	r2, [r7, #4]
 803e404:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803e408:	687b      	ldr	r3, [r7, #4]
 803e40a:	68ba      	ldr	r2, [r7, #8]
 803e40c:	2100      	movs	r1, #0
 803e40e:	68f8      	ldr	r0, [r7, #12]
 803e410:	f000 fce4 	bl	803eddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 803e414:	2300      	movs	r3, #0
}
 803e416:	4618      	mov	r0, r3
 803e418:	3710      	adds	r7, #16
 803e41a:	46bd      	mov	sp, r7
 803e41c:	bd80      	pop	{r7, pc}

0803e41e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803e41e:	b580      	push	{r7, lr}
 803e420:	b084      	sub	sp, #16
 803e422:	af00      	add	r7, sp, #0
 803e424:	60f8      	str	r0, [r7, #12]
 803e426:	60b9      	str	r1, [r7, #8]
 803e428:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803e42a:	687b      	ldr	r3, [r7, #4]
 803e42c:	68ba      	ldr	r2, [r7, #8]
 803e42e:	2100      	movs	r1, #0
 803e430:	68f8      	ldr	r0, [r7, #12]
 803e432:	f000 fcd3 	bl	803eddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 803e436:	2300      	movs	r3, #0
}
 803e438:	4618      	mov	r0, r3
 803e43a:	3710      	adds	r7, #16
 803e43c:	46bd      	mov	sp, r7
 803e43e:	bd80      	pop	{r7, pc}

0803e440 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803e440:	b580      	push	{r7, lr}
 803e442:	b082      	sub	sp, #8
 803e444:	af00      	add	r7, sp, #0
 803e446:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803e448:	687b      	ldr	r3, [r7, #4]
 803e44a:	2204      	movs	r2, #4
 803e44c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803e450:	2300      	movs	r3, #0
 803e452:	2200      	movs	r2, #0
 803e454:	2100      	movs	r1, #0
 803e456:	6878      	ldr	r0, [r7, #4]
 803e458:	f000 fc9f 	bl	803ed9a <USBD_LL_Transmit>

  return USBD_OK;
 803e45c:	2300      	movs	r3, #0
}
 803e45e:	4618      	mov	r0, r3
 803e460:	3708      	adds	r7, #8
 803e462:	46bd      	mov	sp, r7
 803e464:	bd80      	pop	{r7, pc}

0803e466 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803e466:	b580      	push	{r7, lr}
 803e468:	b082      	sub	sp, #8
 803e46a:	af00      	add	r7, sp, #0
 803e46c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803e46e:	687b      	ldr	r3, [r7, #4]
 803e470:	2205      	movs	r2, #5
 803e472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803e476:	2300      	movs	r3, #0
 803e478:	2200      	movs	r2, #0
 803e47a:	2100      	movs	r1, #0
 803e47c:	6878      	ldr	r0, [r7, #4]
 803e47e:	f000 fcad 	bl	803eddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 803e482:	2300      	movs	r3, #0
}
 803e484:	4618      	mov	r0, r3
 803e486:	3708      	adds	r7, #8
 803e488:	46bd      	mov	sp, r7
 803e48a:	bd80      	pop	{r7, pc}

0803e48c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803e48c:	b580      	push	{r7, lr}
 803e48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803e490:	2200      	movs	r2, #0
 803e492:	4913      	ldr	r1, [pc, #76]	; (803e4e0 <MX_USB_DEVICE_Init+0x54>)
 803e494:	4813      	ldr	r0, [pc, #76]	; (803e4e4 <MX_USB_DEVICE_Init+0x58>)
 803e496:	f7fe fd07 	bl	803cea8 <USBD_Init>
 803e49a:	4603      	mov	r3, r0
 803e49c:	2b00      	cmp	r3, #0
 803e49e:	d001      	beq.n	803e4a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803e4a0:	f7ee fc10 	bl	802ccc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803e4a4:	4910      	ldr	r1, [pc, #64]	; (803e4e8 <MX_USB_DEVICE_Init+0x5c>)
 803e4a6:	480f      	ldr	r0, [pc, #60]	; (803e4e4 <MX_USB_DEVICE_Init+0x58>)
 803e4a8:	f7fe fd2e 	bl	803cf08 <USBD_RegisterClass>
 803e4ac:	4603      	mov	r3, r0
 803e4ae:	2b00      	cmp	r3, #0
 803e4b0:	d001      	beq.n	803e4b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803e4b2:	f7ee fc07 	bl	802ccc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803e4b6:	490d      	ldr	r1, [pc, #52]	; (803e4ec <MX_USB_DEVICE_Init+0x60>)
 803e4b8:	480a      	ldr	r0, [pc, #40]	; (803e4e4 <MX_USB_DEVICE_Init+0x58>)
 803e4ba:	f7fe fc65 	bl	803cd88 <USBD_CDC_RegisterInterface>
 803e4be:	4603      	mov	r3, r0
 803e4c0:	2b00      	cmp	r3, #0
 803e4c2:	d001      	beq.n	803e4c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803e4c4:	f7ee fbfe 	bl	802ccc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803e4c8:	4806      	ldr	r0, [pc, #24]	; (803e4e4 <MX_USB_DEVICE_Init+0x58>)
 803e4ca:	f7fe fd53 	bl	803cf74 <USBD_Start>
 803e4ce:	4603      	mov	r3, r0
 803e4d0:	2b00      	cmp	r3, #0
 803e4d2:	d001      	beq.n	803e4d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803e4d4:	f7ee fbf6 	bl	802ccc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803e4d8:	f7f5 fc82 	bl	8033de0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803e4dc:	bf00      	nop
 803e4de:	bd80      	pop	{r7, pc}
 803e4e0:	240000b4 	.word	0x240000b4
 803e4e4:	24001bd4 	.word	0x24001bd4
 803e4e8:	24000020 	.word	0x24000020
 803e4ec:	240000a0 	.word	0x240000a0

0803e4f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803e4f0:	b580      	push	{r7, lr}
 803e4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803e4f4:	2200      	movs	r2, #0
 803e4f6:	4905      	ldr	r1, [pc, #20]	; (803e50c <CDC_Init_FS+0x1c>)
 803e4f8:	4805      	ldr	r0, [pc, #20]	; (803e510 <CDC_Init_FS+0x20>)
 803e4fa:	f7fe fc5f 	bl	803cdbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803e4fe:	4905      	ldr	r1, [pc, #20]	; (803e514 <CDC_Init_FS+0x24>)
 803e500:	4803      	ldr	r0, [pc, #12]	; (803e510 <CDC_Init_FS+0x20>)
 803e502:	f7fe fc7d 	bl	803ce00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803e506:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803e508:	4618      	mov	r0, r3
 803e50a:	bd80      	pop	{r7, pc}
 803e50c:	240026b0 	.word	0x240026b0
 803e510:	24001bd4 	.word	0x24001bd4
 803e514:	24001eb0 	.word	0x24001eb0

0803e518 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803e518:	b480      	push	{r7}
 803e51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803e51c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803e51e:	4618      	mov	r0, r3
 803e520:	46bd      	mov	sp, r7
 803e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e526:	4770      	bx	lr

0803e528 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803e528:	b480      	push	{r7}
 803e52a:	b083      	sub	sp, #12
 803e52c:	af00      	add	r7, sp, #0
 803e52e:	4603      	mov	r3, r0
 803e530:	6039      	str	r1, [r7, #0]
 803e532:	71fb      	strb	r3, [r7, #7]
 803e534:	4613      	mov	r3, r2
 803e536:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803e538:	79fb      	ldrb	r3, [r7, #7]
 803e53a:	2b23      	cmp	r3, #35	; 0x23
 803e53c:	d84a      	bhi.n	803e5d4 <CDC_Control_FS+0xac>
 803e53e:	a201      	add	r2, pc, #4	; (adr r2, 803e544 <CDC_Control_FS+0x1c>)
 803e540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803e544:	0803e5d5 	.word	0x0803e5d5
 803e548:	0803e5d5 	.word	0x0803e5d5
 803e54c:	0803e5d5 	.word	0x0803e5d5
 803e550:	0803e5d5 	.word	0x0803e5d5
 803e554:	0803e5d5 	.word	0x0803e5d5
 803e558:	0803e5d5 	.word	0x0803e5d5
 803e55c:	0803e5d5 	.word	0x0803e5d5
 803e560:	0803e5d5 	.word	0x0803e5d5
 803e564:	0803e5d5 	.word	0x0803e5d5
 803e568:	0803e5d5 	.word	0x0803e5d5
 803e56c:	0803e5d5 	.word	0x0803e5d5
 803e570:	0803e5d5 	.word	0x0803e5d5
 803e574:	0803e5d5 	.word	0x0803e5d5
 803e578:	0803e5d5 	.word	0x0803e5d5
 803e57c:	0803e5d5 	.word	0x0803e5d5
 803e580:	0803e5d5 	.word	0x0803e5d5
 803e584:	0803e5d5 	.word	0x0803e5d5
 803e588:	0803e5d5 	.word	0x0803e5d5
 803e58c:	0803e5d5 	.word	0x0803e5d5
 803e590:	0803e5d5 	.word	0x0803e5d5
 803e594:	0803e5d5 	.word	0x0803e5d5
 803e598:	0803e5d5 	.word	0x0803e5d5
 803e59c:	0803e5d5 	.word	0x0803e5d5
 803e5a0:	0803e5d5 	.word	0x0803e5d5
 803e5a4:	0803e5d5 	.word	0x0803e5d5
 803e5a8:	0803e5d5 	.word	0x0803e5d5
 803e5ac:	0803e5d5 	.word	0x0803e5d5
 803e5b0:	0803e5d5 	.word	0x0803e5d5
 803e5b4:	0803e5d5 	.word	0x0803e5d5
 803e5b8:	0803e5d5 	.word	0x0803e5d5
 803e5bc:	0803e5d5 	.word	0x0803e5d5
 803e5c0:	0803e5d5 	.word	0x0803e5d5
 803e5c4:	0803e5d5 	.word	0x0803e5d5
 803e5c8:	0803e5d5 	.word	0x0803e5d5
 803e5cc:	0803e5d5 	.word	0x0803e5d5
 803e5d0:	0803e5d5 	.word	0x0803e5d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803e5d4:	bf00      	nop
  }

  return (USBD_OK);
 803e5d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803e5d8:	4618      	mov	r0, r3
 803e5da:	370c      	adds	r7, #12
 803e5dc:	46bd      	mov	sp, r7
 803e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e5e2:	4770      	bx	lr

0803e5e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803e5e4:	b580      	push	{r7, lr}
 803e5e6:	b082      	sub	sp, #8
 803e5e8:	af00      	add	r7, sp, #0
 803e5ea:	6078      	str	r0, [r7, #4]
 803e5ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803e5ee:	6879      	ldr	r1, [r7, #4]
 803e5f0:	4805      	ldr	r0, [pc, #20]	; (803e608 <CDC_Receive_FS+0x24>)
 803e5f2:	f7fe fc05 	bl	803ce00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803e5f6:	4804      	ldr	r0, [pc, #16]	; (803e608 <CDC_Receive_FS+0x24>)
 803e5f8:	f7fe fc20 	bl	803ce3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803e5fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803e5fe:	4618      	mov	r0, r3
 803e600:	3708      	adds	r7, #8
 803e602:	46bd      	mov	sp, r7
 803e604:	bd80      	pop	{r7, pc}
 803e606:	bf00      	nop
 803e608:	24001bd4 	.word	0x24001bd4

0803e60c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803e60c:	b480      	push	{r7}
 803e60e:	b087      	sub	sp, #28
 803e610:	af00      	add	r7, sp, #0
 803e612:	60f8      	str	r0, [r7, #12]
 803e614:	60b9      	str	r1, [r7, #8]
 803e616:	4613      	mov	r3, r2
 803e618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803e61a:	2300      	movs	r3, #0
 803e61c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803e61e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803e622:	4618      	mov	r0, r3
 803e624:	371c      	adds	r7, #28
 803e626:	46bd      	mov	sp, r7
 803e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e62c:	4770      	bx	lr
	...

0803e630 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803e630:	b480      	push	{r7}
 803e632:	b083      	sub	sp, #12
 803e634:	af00      	add	r7, sp, #0
 803e636:	4603      	mov	r3, r0
 803e638:	6039      	str	r1, [r7, #0]
 803e63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803e63c:	683b      	ldr	r3, [r7, #0]
 803e63e:	2212      	movs	r2, #18
 803e640:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803e642:	4b03      	ldr	r3, [pc, #12]	; (803e650 <USBD_FS_DeviceDescriptor+0x20>)
}
 803e644:	4618      	mov	r0, r3
 803e646:	370c      	adds	r7, #12
 803e648:	46bd      	mov	sp, r7
 803e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e64e:	4770      	bx	lr
 803e650:	240000d0 	.word	0x240000d0

0803e654 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803e654:	b480      	push	{r7}
 803e656:	b083      	sub	sp, #12
 803e658:	af00      	add	r7, sp, #0
 803e65a:	4603      	mov	r3, r0
 803e65c:	6039      	str	r1, [r7, #0]
 803e65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803e660:	683b      	ldr	r3, [r7, #0]
 803e662:	2204      	movs	r2, #4
 803e664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803e666:	4b03      	ldr	r3, [pc, #12]	; (803e674 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803e668:	4618      	mov	r0, r3
 803e66a:	370c      	adds	r7, #12
 803e66c:	46bd      	mov	sp, r7
 803e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e672:	4770      	bx	lr
 803e674:	240000e4 	.word	0x240000e4

0803e678 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803e678:	b580      	push	{r7, lr}
 803e67a:	b082      	sub	sp, #8
 803e67c:	af00      	add	r7, sp, #0
 803e67e:	4603      	mov	r3, r0
 803e680:	6039      	str	r1, [r7, #0]
 803e682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803e684:	79fb      	ldrb	r3, [r7, #7]
 803e686:	2b00      	cmp	r3, #0
 803e688:	d105      	bne.n	803e696 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803e68a:	683a      	ldr	r2, [r7, #0]
 803e68c:	4907      	ldr	r1, [pc, #28]	; (803e6ac <USBD_FS_ProductStrDescriptor+0x34>)
 803e68e:	4808      	ldr	r0, [pc, #32]	; (803e6b0 <USBD_FS_ProductStrDescriptor+0x38>)
 803e690:	f7ff fe1c 	bl	803e2cc <USBD_GetString>
 803e694:	e004      	b.n	803e6a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803e696:	683a      	ldr	r2, [r7, #0]
 803e698:	4904      	ldr	r1, [pc, #16]	; (803e6ac <USBD_FS_ProductStrDescriptor+0x34>)
 803e69a:	4805      	ldr	r0, [pc, #20]	; (803e6b0 <USBD_FS_ProductStrDescriptor+0x38>)
 803e69c:	f7ff fe16 	bl	803e2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 803e6a0:	4b02      	ldr	r3, [pc, #8]	; (803e6ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 803e6a2:	4618      	mov	r0, r3
 803e6a4:	3708      	adds	r7, #8
 803e6a6:	46bd      	mov	sp, r7
 803e6a8:	bd80      	pop	{r7, pc}
 803e6aa:	bf00      	nop
 803e6ac:	24002eb0 	.word	0x24002eb0
 803e6b0:	08040bb0 	.word	0x08040bb0

0803e6b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803e6b4:	b580      	push	{r7, lr}
 803e6b6:	b082      	sub	sp, #8
 803e6b8:	af00      	add	r7, sp, #0
 803e6ba:	4603      	mov	r3, r0
 803e6bc:	6039      	str	r1, [r7, #0]
 803e6be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803e6c0:	683a      	ldr	r2, [r7, #0]
 803e6c2:	4904      	ldr	r1, [pc, #16]	; (803e6d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803e6c4:	4804      	ldr	r0, [pc, #16]	; (803e6d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803e6c6:	f7ff fe01 	bl	803e2cc <USBD_GetString>
  return USBD_StrDesc;
 803e6ca:	4b02      	ldr	r3, [pc, #8]	; (803e6d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803e6cc:	4618      	mov	r0, r3
 803e6ce:	3708      	adds	r7, #8
 803e6d0:	46bd      	mov	sp, r7
 803e6d2:	bd80      	pop	{r7, pc}
 803e6d4:	24002eb0 	.word	0x24002eb0
 803e6d8:	08040bc8 	.word	0x08040bc8

0803e6dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803e6dc:	b580      	push	{r7, lr}
 803e6de:	b082      	sub	sp, #8
 803e6e0:	af00      	add	r7, sp, #0
 803e6e2:	4603      	mov	r3, r0
 803e6e4:	6039      	str	r1, [r7, #0]
 803e6e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803e6e8:	683b      	ldr	r3, [r7, #0]
 803e6ea:	221a      	movs	r2, #26
 803e6ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803e6ee:	f000 f843 	bl	803e778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803e6f2:	4b02      	ldr	r3, [pc, #8]	; (803e6fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 803e6f4:	4618      	mov	r0, r3
 803e6f6:	3708      	adds	r7, #8
 803e6f8:	46bd      	mov	sp, r7
 803e6fa:	bd80      	pop	{r7, pc}
 803e6fc:	240000e8 	.word	0x240000e8

0803e700 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803e700:	b580      	push	{r7, lr}
 803e702:	b082      	sub	sp, #8
 803e704:	af00      	add	r7, sp, #0
 803e706:	4603      	mov	r3, r0
 803e708:	6039      	str	r1, [r7, #0]
 803e70a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803e70c:	79fb      	ldrb	r3, [r7, #7]
 803e70e:	2b00      	cmp	r3, #0
 803e710:	d105      	bne.n	803e71e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803e712:	683a      	ldr	r2, [r7, #0]
 803e714:	4907      	ldr	r1, [pc, #28]	; (803e734 <USBD_FS_ConfigStrDescriptor+0x34>)
 803e716:	4808      	ldr	r0, [pc, #32]	; (803e738 <USBD_FS_ConfigStrDescriptor+0x38>)
 803e718:	f7ff fdd8 	bl	803e2cc <USBD_GetString>
 803e71c:	e004      	b.n	803e728 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803e71e:	683a      	ldr	r2, [r7, #0]
 803e720:	4904      	ldr	r1, [pc, #16]	; (803e734 <USBD_FS_ConfigStrDescriptor+0x34>)
 803e722:	4805      	ldr	r0, [pc, #20]	; (803e738 <USBD_FS_ConfigStrDescriptor+0x38>)
 803e724:	f7ff fdd2 	bl	803e2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 803e728:	4b02      	ldr	r3, [pc, #8]	; (803e734 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803e72a:	4618      	mov	r0, r3
 803e72c:	3708      	adds	r7, #8
 803e72e:	46bd      	mov	sp, r7
 803e730:	bd80      	pop	{r7, pc}
 803e732:	bf00      	nop
 803e734:	24002eb0 	.word	0x24002eb0
 803e738:	08040bdc 	.word	0x08040bdc

0803e73c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803e73c:	b580      	push	{r7, lr}
 803e73e:	b082      	sub	sp, #8
 803e740:	af00      	add	r7, sp, #0
 803e742:	4603      	mov	r3, r0
 803e744:	6039      	str	r1, [r7, #0]
 803e746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803e748:	79fb      	ldrb	r3, [r7, #7]
 803e74a:	2b00      	cmp	r3, #0
 803e74c:	d105      	bne.n	803e75a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803e74e:	683a      	ldr	r2, [r7, #0]
 803e750:	4907      	ldr	r1, [pc, #28]	; (803e770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803e752:	4808      	ldr	r0, [pc, #32]	; (803e774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803e754:	f7ff fdba 	bl	803e2cc <USBD_GetString>
 803e758:	e004      	b.n	803e764 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803e75a:	683a      	ldr	r2, [r7, #0]
 803e75c:	4904      	ldr	r1, [pc, #16]	; (803e770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803e75e:	4805      	ldr	r0, [pc, #20]	; (803e774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803e760:	f7ff fdb4 	bl	803e2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 803e764:	4b02      	ldr	r3, [pc, #8]	; (803e770 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803e766:	4618      	mov	r0, r3
 803e768:	3708      	adds	r7, #8
 803e76a:	46bd      	mov	sp, r7
 803e76c:	bd80      	pop	{r7, pc}
 803e76e:	bf00      	nop
 803e770:	24002eb0 	.word	0x24002eb0
 803e774:	08040be8 	.word	0x08040be8

0803e778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803e778:	b580      	push	{r7, lr}
 803e77a:	b084      	sub	sp, #16
 803e77c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803e77e:	4b0f      	ldr	r3, [pc, #60]	; (803e7bc <Get_SerialNum+0x44>)
 803e780:	681b      	ldr	r3, [r3, #0]
 803e782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803e784:	4b0e      	ldr	r3, [pc, #56]	; (803e7c0 <Get_SerialNum+0x48>)
 803e786:	681b      	ldr	r3, [r3, #0]
 803e788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803e78a:	4b0e      	ldr	r3, [pc, #56]	; (803e7c4 <Get_SerialNum+0x4c>)
 803e78c:	681b      	ldr	r3, [r3, #0]
 803e78e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803e790:	68fa      	ldr	r2, [r7, #12]
 803e792:	687b      	ldr	r3, [r7, #4]
 803e794:	4413      	add	r3, r2
 803e796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803e798:	68fb      	ldr	r3, [r7, #12]
 803e79a:	2b00      	cmp	r3, #0
 803e79c:	d009      	beq.n	803e7b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803e79e:	2208      	movs	r2, #8
 803e7a0:	4909      	ldr	r1, [pc, #36]	; (803e7c8 <Get_SerialNum+0x50>)
 803e7a2:	68f8      	ldr	r0, [r7, #12]
 803e7a4:	f000 f814 	bl	803e7d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803e7a8:	2204      	movs	r2, #4
 803e7aa:	4908      	ldr	r1, [pc, #32]	; (803e7cc <Get_SerialNum+0x54>)
 803e7ac:	68b8      	ldr	r0, [r7, #8]
 803e7ae:	f000 f80f 	bl	803e7d0 <IntToUnicode>
  }
}
 803e7b2:	bf00      	nop
 803e7b4:	3710      	adds	r7, #16
 803e7b6:	46bd      	mov	sp, r7
 803e7b8:	bd80      	pop	{r7, pc}
 803e7ba:	bf00      	nop
 803e7bc:	1ff1e800 	.word	0x1ff1e800
 803e7c0:	1ff1e804 	.word	0x1ff1e804
 803e7c4:	1ff1e808 	.word	0x1ff1e808
 803e7c8:	240000ea 	.word	0x240000ea
 803e7cc:	240000fa 	.word	0x240000fa

0803e7d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803e7d0:	b480      	push	{r7}
 803e7d2:	b087      	sub	sp, #28
 803e7d4:	af00      	add	r7, sp, #0
 803e7d6:	60f8      	str	r0, [r7, #12]
 803e7d8:	60b9      	str	r1, [r7, #8]
 803e7da:	4613      	mov	r3, r2
 803e7dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803e7de:	2300      	movs	r3, #0
 803e7e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803e7e2:	2300      	movs	r3, #0
 803e7e4:	75fb      	strb	r3, [r7, #23]
 803e7e6:	e027      	b.n	803e838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803e7e8:	68fb      	ldr	r3, [r7, #12]
 803e7ea:	0f1b      	lsrs	r3, r3, #28
 803e7ec:	2b09      	cmp	r3, #9
 803e7ee:	d80b      	bhi.n	803e808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803e7f0:	68fb      	ldr	r3, [r7, #12]
 803e7f2:	0f1b      	lsrs	r3, r3, #28
 803e7f4:	b2da      	uxtb	r2, r3
 803e7f6:	7dfb      	ldrb	r3, [r7, #23]
 803e7f8:	005b      	lsls	r3, r3, #1
 803e7fa:	4619      	mov	r1, r3
 803e7fc:	68bb      	ldr	r3, [r7, #8]
 803e7fe:	440b      	add	r3, r1
 803e800:	3230      	adds	r2, #48	; 0x30
 803e802:	b2d2      	uxtb	r2, r2
 803e804:	701a      	strb	r2, [r3, #0]
 803e806:	e00a      	b.n	803e81e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803e808:	68fb      	ldr	r3, [r7, #12]
 803e80a:	0f1b      	lsrs	r3, r3, #28
 803e80c:	b2da      	uxtb	r2, r3
 803e80e:	7dfb      	ldrb	r3, [r7, #23]
 803e810:	005b      	lsls	r3, r3, #1
 803e812:	4619      	mov	r1, r3
 803e814:	68bb      	ldr	r3, [r7, #8]
 803e816:	440b      	add	r3, r1
 803e818:	3237      	adds	r2, #55	; 0x37
 803e81a:	b2d2      	uxtb	r2, r2
 803e81c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803e81e:	68fb      	ldr	r3, [r7, #12]
 803e820:	011b      	lsls	r3, r3, #4
 803e822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803e824:	7dfb      	ldrb	r3, [r7, #23]
 803e826:	005b      	lsls	r3, r3, #1
 803e828:	3301      	adds	r3, #1
 803e82a:	68ba      	ldr	r2, [r7, #8]
 803e82c:	4413      	add	r3, r2
 803e82e:	2200      	movs	r2, #0
 803e830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803e832:	7dfb      	ldrb	r3, [r7, #23]
 803e834:	3301      	adds	r3, #1
 803e836:	75fb      	strb	r3, [r7, #23]
 803e838:	7dfa      	ldrb	r2, [r7, #23]
 803e83a:	79fb      	ldrb	r3, [r7, #7]
 803e83c:	429a      	cmp	r2, r3
 803e83e:	d3d3      	bcc.n	803e7e8 <IntToUnicode+0x18>
  }
}
 803e840:	bf00      	nop
 803e842:	bf00      	nop
 803e844:	371c      	adds	r7, #28
 803e846:	46bd      	mov	sp, r7
 803e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e84c:	4770      	bx	lr
	...

0803e850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803e850:	b580      	push	{r7, lr}
 803e852:	b0b8      	sub	sp, #224	; 0xe0
 803e854:	af00      	add	r7, sp, #0
 803e856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803e858:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803e85c:	2200      	movs	r2, #0
 803e85e:	601a      	str	r2, [r3, #0]
 803e860:	605a      	str	r2, [r3, #4]
 803e862:	609a      	str	r2, [r3, #8]
 803e864:	60da      	str	r2, [r3, #12]
 803e866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803e868:	f107 0310 	add.w	r3, r7, #16
 803e86c:	22bc      	movs	r2, #188	; 0xbc
 803e86e:	2100      	movs	r1, #0
 803e870:	4618      	mov	r0, r3
 803e872:	f000 fbe9 	bl	803f048 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803e876:	687b      	ldr	r3, [r7, #4]
 803e878:	681b      	ldr	r3, [r3, #0]
 803e87a:	4a2f      	ldr	r2, [pc, #188]	; (803e938 <HAL_PCD_MspInit+0xe8>)
 803e87c:	4293      	cmp	r3, r2
 803e87e:	d156      	bne.n	803e92e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803e880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803e884:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803e886:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803e88a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803e88e:	f107 0310 	add.w	r3, r7, #16
 803e892:	4618      	mov	r0, r3
 803e894:	f7f6 fa6e 	bl	8034d74 <HAL_RCCEx_PeriphCLKConfig>
 803e898:	4603      	mov	r3, r0
 803e89a:	2b00      	cmp	r3, #0
 803e89c:	d001      	beq.n	803e8a2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803e89e:	f7ee fa11 	bl	802ccc4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803e8a2:	f7f5 fa9d 	bl	8033de0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803e8a6:	4b25      	ldr	r3, [pc, #148]	; (803e93c <HAL_PCD_MspInit+0xec>)
 803e8a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803e8ac:	4a23      	ldr	r2, [pc, #140]	; (803e93c <HAL_PCD_MspInit+0xec>)
 803e8ae:	f043 0301 	orr.w	r3, r3, #1
 803e8b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803e8b6:	4b21      	ldr	r3, [pc, #132]	; (803e93c <HAL_PCD_MspInit+0xec>)
 803e8b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803e8bc:	f003 0301 	and.w	r3, r3, #1
 803e8c0:	60fb      	str	r3, [r7, #12]
 803e8c2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803e8c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803e8c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803e8cc:	2302      	movs	r3, #2
 803e8ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803e8d2:	2300      	movs	r3, #0
 803e8d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803e8d8:	2300      	movs	r3, #0
 803e8da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803e8de:	230a      	movs	r3, #10
 803e8e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803e8e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803e8e8:	4619      	mov	r1, r3
 803e8ea:	4815      	ldr	r0, [pc, #84]	; (803e940 <HAL_PCD_MspInit+0xf0>)
 803e8ec:	f7f2 fdf2 	bl	80314d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803e8f0:	4b12      	ldr	r3, [pc, #72]	; (803e93c <HAL_PCD_MspInit+0xec>)
 803e8f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803e8f6:	4a11      	ldr	r2, [pc, #68]	; (803e93c <HAL_PCD_MspInit+0xec>)
 803e8f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803e8fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803e900:	4b0e      	ldr	r3, [pc, #56]	; (803e93c <HAL_PCD_MspInit+0xec>)
 803e902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803e906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803e90a:	60bb      	str	r3, [r7, #8]
 803e90c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803e90e:	2200      	movs	r2, #0
 803e910:	2100      	movs	r1, #0
 803e912:	2062      	movs	r0, #98	; 0x62
 803e914:	f7ef fd8b 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803e918:	2062      	movs	r0, #98	; 0x62
 803e91a:	f7ef fda2 	bl	802e462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803e91e:	2200      	movs	r2, #0
 803e920:	2100      	movs	r1, #0
 803e922:	2065      	movs	r0, #101	; 0x65
 803e924:	f7ef fd83 	bl	802e42e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803e928:	2065      	movs	r0, #101	; 0x65
 803e92a:	f7ef fd9a 	bl	802e462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803e92e:	bf00      	nop
 803e930:	37e0      	adds	r7, #224	; 0xe0
 803e932:	46bd      	mov	sp, r7
 803e934:	bd80      	pop	{r7, pc}
 803e936:	bf00      	nop
 803e938:	40080000 	.word	0x40080000
 803e93c:	58024400 	.word	0x58024400
 803e940:	58020000 	.word	0x58020000

0803e944 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803e944:	b580      	push	{r7, lr}
 803e946:	b082      	sub	sp, #8
 803e948:	af00      	add	r7, sp, #0
 803e94a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803e94c:	687b      	ldr	r3, [r7, #4]
 803e94e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803e952:	687b      	ldr	r3, [r7, #4]
 803e954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803e958:	4619      	mov	r1, r3
 803e95a:	4610      	mov	r0, r2
 803e95c:	f7fe fb57 	bl	803d00e <USBD_LL_SetupStage>
}
 803e960:	bf00      	nop
 803e962:	3708      	adds	r7, #8
 803e964:	46bd      	mov	sp, r7
 803e966:	bd80      	pop	{r7, pc}

0803e968 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803e968:	b580      	push	{r7, lr}
 803e96a:	b082      	sub	sp, #8
 803e96c:	af00      	add	r7, sp, #0
 803e96e:	6078      	str	r0, [r7, #4]
 803e970:	460b      	mov	r3, r1
 803e972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803e974:	687b      	ldr	r3, [r7, #4]
 803e976:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803e97a:	78fa      	ldrb	r2, [r7, #3]
 803e97c:	6879      	ldr	r1, [r7, #4]
 803e97e:	4613      	mov	r3, r2
 803e980:	00db      	lsls	r3, r3, #3
 803e982:	4413      	add	r3, r2
 803e984:	009b      	lsls	r3, r3, #2
 803e986:	440b      	add	r3, r1
 803e988:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803e98c:	681a      	ldr	r2, [r3, #0]
 803e98e:	78fb      	ldrb	r3, [r7, #3]
 803e990:	4619      	mov	r1, r3
 803e992:	f7fe fb91 	bl	803d0b8 <USBD_LL_DataOutStage>
}
 803e996:	bf00      	nop
 803e998:	3708      	adds	r7, #8
 803e99a:	46bd      	mov	sp, r7
 803e99c:	bd80      	pop	{r7, pc}

0803e99e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803e99e:	b580      	push	{r7, lr}
 803e9a0:	b082      	sub	sp, #8
 803e9a2:	af00      	add	r7, sp, #0
 803e9a4:	6078      	str	r0, [r7, #4]
 803e9a6:	460b      	mov	r3, r1
 803e9a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803e9aa:	687b      	ldr	r3, [r7, #4]
 803e9ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803e9b0:	78fa      	ldrb	r2, [r7, #3]
 803e9b2:	6879      	ldr	r1, [r7, #4]
 803e9b4:	4613      	mov	r3, r2
 803e9b6:	00db      	lsls	r3, r3, #3
 803e9b8:	4413      	add	r3, r2
 803e9ba:	009b      	lsls	r3, r3, #2
 803e9bc:	440b      	add	r3, r1
 803e9be:	334c      	adds	r3, #76	; 0x4c
 803e9c0:	681a      	ldr	r2, [r3, #0]
 803e9c2:	78fb      	ldrb	r3, [r7, #3]
 803e9c4:	4619      	mov	r1, r3
 803e9c6:	f7fe fc2a 	bl	803d21e <USBD_LL_DataInStage>
}
 803e9ca:	bf00      	nop
 803e9cc:	3708      	adds	r7, #8
 803e9ce:	46bd      	mov	sp, r7
 803e9d0:	bd80      	pop	{r7, pc}

0803e9d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803e9d2:	b580      	push	{r7, lr}
 803e9d4:	b082      	sub	sp, #8
 803e9d6:	af00      	add	r7, sp, #0
 803e9d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803e9da:	687b      	ldr	r3, [r7, #4]
 803e9dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803e9e0:	4618      	mov	r0, r3
 803e9e2:	f7fe fd5e 	bl	803d4a2 <USBD_LL_SOF>
}
 803e9e6:	bf00      	nop
 803e9e8:	3708      	adds	r7, #8
 803e9ea:	46bd      	mov	sp, r7
 803e9ec:	bd80      	pop	{r7, pc}

0803e9ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803e9ee:	b580      	push	{r7, lr}
 803e9f0:	b084      	sub	sp, #16
 803e9f2:	af00      	add	r7, sp, #0
 803e9f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803e9f6:	2301      	movs	r3, #1
 803e9f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803e9fa:	687b      	ldr	r3, [r7, #4]
 803e9fc:	68db      	ldr	r3, [r3, #12]
 803e9fe:	2b00      	cmp	r3, #0
 803ea00:	d102      	bne.n	803ea08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803ea02:	2300      	movs	r3, #0
 803ea04:	73fb      	strb	r3, [r7, #15]
 803ea06:	e008      	b.n	803ea1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803ea08:	687b      	ldr	r3, [r7, #4]
 803ea0a:	68db      	ldr	r3, [r3, #12]
 803ea0c:	2b02      	cmp	r3, #2
 803ea0e:	d102      	bne.n	803ea16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803ea10:	2301      	movs	r3, #1
 803ea12:	73fb      	strb	r3, [r7, #15]
 803ea14:	e001      	b.n	803ea1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803ea16:	f7ee f955 	bl	802ccc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803ea1a:	687b      	ldr	r3, [r7, #4]
 803ea1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ea20:	7bfa      	ldrb	r2, [r7, #15]
 803ea22:	4611      	mov	r1, r2
 803ea24:	4618      	mov	r0, r3
 803ea26:	f7fe fcfe 	bl	803d426 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803ea2a:	687b      	ldr	r3, [r7, #4]
 803ea2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ea30:	4618      	mov	r0, r3
 803ea32:	f7fe fca6 	bl	803d382 <USBD_LL_Reset>
}
 803ea36:	bf00      	nop
 803ea38:	3710      	adds	r7, #16
 803ea3a:	46bd      	mov	sp, r7
 803ea3c:	bd80      	pop	{r7, pc}
	...

0803ea40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ea40:	b580      	push	{r7, lr}
 803ea42:	b082      	sub	sp, #8
 803ea44:	af00      	add	r7, sp, #0
 803ea46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803ea48:	687b      	ldr	r3, [r7, #4]
 803ea4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ea4e:	4618      	mov	r0, r3
 803ea50:	f7fe fcf9 	bl	803d446 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803ea54:	687b      	ldr	r3, [r7, #4]
 803ea56:	681b      	ldr	r3, [r3, #0]
 803ea58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803ea5c:	681b      	ldr	r3, [r3, #0]
 803ea5e:	687a      	ldr	r2, [r7, #4]
 803ea60:	6812      	ldr	r2, [r2, #0]
 803ea62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803ea66:	f043 0301 	orr.w	r3, r3, #1
 803ea6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803ea6c:	687b      	ldr	r3, [r7, #4]
 803ea6e:	6a1b      	ldr	r3, [r3, #32]
 803ea70:	2b00      	cmp	r3, #0
 803ea72:	d005      	beq.n	803ea80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803ea74:	4b04      	ldr	r3, [pc, #16]	; (803ea88 <HAL_PCD_SuspendCallback+0x48>)
 803ea76:	691b      	ldr	r3, [r3, #16]
 803ea78:	4a03      	ldr	r2, [pc, #12]	; (803ea88 <HAL_PCD_SuspendCallback+0x48>)
 803ea7a:	f043 0306 	orr.w	r3, r3, #6
 803ea7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803ea80:	bf00      	nop
 803ea82:	3708      	adds	r7, #8
 803ea84:	46bd      	mov	sp, r7
 803ea86:	bd80      	pop	{r7, pc}
 803ea88:	e000ed00 	.word	0xe000ed00

0803ea8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ea8c:	b580      	push	{r7, lr}
 803ea8e:	b082      	sub	sp, #8
 803ea90:	af00      	add	r7, sp, #0
 803ea92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803ea94:	687b      	ldr	r3, [r7, #4]
 803ea96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ea9a:	4618      	mov	r0, r3
 803ea9c:	f7fe fce9 	bl	803d472 <USBD_LL_Resume>
}
 803eaa0:	bf00      	nop
 803eaa2:	3708      	adds	r7, #8
 803eaa4:	46bd      	mov	sp, r7
 803eaa6:	bd80      	pop	{r7, pc}

0803eaa8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803eaa8:	b580      	push	{r7, lr}
 803eaaa:	b082      	sub	sp, #8
 803eaac:	af00      	add	r7, sp, #0
 803eaae:	6078      	str	r0, [r7, #4]
 803eab0:	460b      	mov	r3, r1
 803eab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803eab4:	687b      	ldr	r3, [r7, #4]
 803eab6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803eaba:	78fa      	ldrb	r2, [r7, #3]
 803eabc:	4611      	mov	r1, r2
 803eabe:	4618      	mov	r0, r3
 803eac0:	f7fe fd41 	bl	803d546 <USBD_LL_IsoOUTIncomplete>
}
 803eac4:	bf00      	nop
 803eac6:	3708      	adds	r7, #8
 803eac8:	46bd      	mov	sp, r7
 803eaca:	bd80      	pop	{r7, pc}

0803eacc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803eacc:	b580      	push	{r7, lr}
 803eace:	b082      	sub	sp, #8
 803ead0:	af00      	add	r7, sp, #0
 803ead2:	6078      	str	r0, [r7, #4]
 803ead4:	460b      	mov	r3, r1
 803ead6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803ead8:	687b      	ldr	r3, [r7, #4]
 803eada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803eade:	78fa      	ldrb	r2, [r7, #3]
 803eae0:	4611      	mov	r1, r2
 803eae2:	4618      	mov	r0, r3
 803eae4:	f7fe fcfd 	bl	803d4e2 <USBD_LL_IsoINIncomplete>
}
 803eae8:	bf00      	nop
 803eaea:	3708      	adds	r7, #8
 803eaec:	46bd      	mov	sp, r7
 803eaee:	bd80      	pop	{r7, pc}

0803eaf0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803eaf0:	b580      	push	{r7, lr}
 803eaf2:	b082      	sub	sp, #8
 803eaf4:	af00      	add	r7, sp, #0
 803eaf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803eaf8:	687b      	ldr	r3, [r7, #4]
 803eafa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803eafe:	4618      	mov	r0, r3
 803eb00:	f7fe fd53 	bl	803d5aa <USBD_LL_DevConnected>
}
 803eb04:	bf00      	nop
 803eb06:	3708      	adds	r7, #8
 803eb08:	46bd      	mov	sp, r7
 803eb0a:	bd80      	pop	{r7, pc}

0803eb0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803eb0c:	b580      	push	{r7, lr}
 803eb0e:	b082      	sub	sp, #8
 803eb10:	af00      	add	r7, sp, #0
 803eb12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803eb14:	687b      	ldr	r3, [r7, #4]
 803eb16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803eb1a:	4618      	mov	r0, r3
 803eb1c:	f7fe fd50 	bl	803d5c0 <USBD_LL_DevDisconnected>
}
 803eb20:	bf00      	nop
 803eb22:	3708      	adds	r7, #8
 803eb24:	46bd      	mov	sp, r7
 803eb26:	bd80      	pop	{r7, pc}

0803eb28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803eb28:	b580      	push	{r7, lr}
 803eb2a:	b082      	sub	sp, #8
 803eb2c:	af00      	add	r7, sp, #0
 803eb2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803eb30:	687b      	ldr	r3, [r7, #4]
 803eb32:	781b      	ldrb	r3, [r3, #0]
 803eb34:	2b00      	cmp	r3, #0
 803eb36:	d13e      	bne.n	803ebb6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803eb38:	4a21      	ldr	r2, [pc, #132]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb3a:	687b      	ldr	r3, [r7, #4]
 803eb3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803eb40:	687b      	ldr	r3, [r7, #4]
 803eb42:	4a1f      	ldr	r2, [pc, #124]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803eb48:	4b1d      	ldr	r3, [pc, #116]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb4a:	4a1e      	ldr	r2, [pc, #120]	; (803ebc4 <USBD_LL_Init+0x9c>)
 803eb4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803eb4e:	4b1c      	ldr	r3, [pc, #112]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb50:	2209      	movs	r2, #9
 803eb52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803eb54:	4b1a      	ldr	r3, [pc, #104]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb56:	2202      	movs	r2, #2
 803eb58:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803eb5a:	4b19      	ldr	r3, [pc, #100]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb5c:	2200      	movs	r2, #0
 803eb5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803eb60:	4b17      	ldr	r3, [pc, #92]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb62:	2202      	movs	r2, #2
 803eb64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803eb66:	4b16      	ldr	r3, [pc, #88]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb68:	2200      	movs	r2, #0
 803eb6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803eb6c:	4b14      	ldr	r3, [pc, #80]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb6e:	2200      	movs	r2, #0
 803eb70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803eb72:	4b13      	ldr	r3, [pc, #76]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb74:	2200      	movs	r2, #0
 803eb76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803eb78:	4b11      	ldr	r3, [pc, #68]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb7a:	2200      	movs	r2, #0
 803eb7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803eb7e:	4b10      	ldr	r3, [pc, #64]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb80:	2200      	movs	r2, #0
 803eb82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803eb84:	4b0e      	ldr	r3, [pc, #56]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb86:	2200      	movs	r2, #0
 803eb88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803eb8a:	480d      	ldr	r0, [pc, #52]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb8c:	f7f3 fe18 	bl	80327c0 <HAL_PCD_Init>
 803eb90:	4603      	mov	r3, r0
 803eb92:	2b00      	cmp	r3, #0
 803eb94:	d001      	beq.n	803eb9a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803eb96:	f7ee f895 	bl	802ccc4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803eb9a:	2180      	movs	r1, #128	; 0x80
 803eb9c:	4808      	ldr	r0, [pc, #32]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eb9e:	f7f5 f8a4 	bl	8033cea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803eba2:	2240      	movs	r2, #64	; 0x40
 803eba4:	2100      	movs	r1, #0
 803eba6:	4806      	ldr	r0, [pc, #24]	; (803ebc0 <USBD_LL_Init+0x98>)
 803eba8:	f7f5 f858 	bl	8033c5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803ebac:	2280      	movs	r2, #128	; 0x80
 803ebae:	2101      	movs	r1, #1
 803ebb0:	4803      	ldr	r0, [pc, #12]	; (803ebc0 <USBD_LL_Init+0x98>)
 803ebb2:	f7f5 f853 	bl	8033c5c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803ebb6:	2300      	movs	r3, #0
}
 803ebb8:	4618      	mov	r0, r3
 803ebba:	3708      	adds	r7, #8
 803ebbc:	46bd      	mov	sp, r7
 803ebbe:	bd80      	pop	{r7, pc}
 803ebc0:	240030b0 	.word	0x240030b0
 803ebc4:	40080000 	.word	0x40080000

0803ebc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803ebc8:	b580      	push	{r7, lr}
 803ebca:	b084      	sub	sp, #16
 803ebcc:	af00      	add	r7, sp, #0
 803ebce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ebd0:	2300      	movs	r3, #0
 803ebd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ebd4:	2300      	movs	r3, #0
 803ebd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803ebd8:	687b      	ldr	r3, [r7, #4]
 803ebda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ebde:	4618      	mov	r0, r3
 803ebe0:	f7f3 ff12 	bl	8032a08 <HAL_PCD_Start>
 803ebe4:	4603      	mov	r3, r0
 803ebe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ebe8:	7bfb      	ldrb	r3, [r7, #15]
 803ebea:	4618      	mov	r0, r3
 803ebec:	f000 f942 	bl	803ee74 <USBD_Get_USB_Status>
 803ebf0:	4603      	mov	r3, r0
 803ebf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ebf4:	7bbb      	ldrb	r3, [r7, #14]
}
 803ebf6:	4618      	mov	r0, r3
 803ebf8:	3710      	adds	r7, #16
 803ebfa:	46bd      	mov	sp, r7
 803ebfc:	bd80      	pop	{r7, pc}

0803ebfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803ebfe:	b580      	push	{r7, lr}
 803ec00:	b084      	sub	sp, #16
 803ec02:	af00      	add	r7, sp, #0
 803ec04:	6078      	str	r0, [r7, #4]
 803ec06:	4608      	mov	r0, r1
 803ec08:	4611      	mov	r1, r2
 803ec0a:	461a      	mov	r2, r3
 803ec0c:	4603      	mov	r3, r0
 803ec0e:	70fb      	strb	r3, [r7, #3]
 803ec10:	460b      	mov	r3, r1
 803ec12:	70bb      	strb	r3, [r7, #2]
 803ec14:	4613      	mov	r3, r2
 803ec16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ec18:	2300      	movs	r3, #0
 803ec1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ec1c:	2300      	movs	r3, #0
 803ec1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803ec20:	687b      	ldr	r3, [r7, #4]
 803ec22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803ec26:	78bb      	ldrb	r3, [r7, #2]
 803ec28:	883a      	ldrh	r2, [r7, #0]
 803ec2a:	78f9      	ldrb	r1, [r7, #3]
 803ec2c:	f7f4 fc10 	bl	8033450 <HAL_PCD_EP_Open>
 803ec30:	4603      	mov	r3, r0
 803ec32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ec34:	7bfb      	ldrb	r3, [r7, #15]
 803ec36:	4618      	mov	r0, r3
 803ec38:	f000 f91c 	bl	803ee74 <USBD_Get_USB_Status>
 803ec3c:	4603      	mov	r3, r0
 803ec3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ec40:	7bbb      	ldrb	r3, [r7, #14]
}
 803ec42:	4618      	mov	r0, r3
 803ec44:	3710      	adds	r7, #16
 803ec46:	46bd      	mov	sp, r7
 803ec48:	bd80      	pop	{r7, pc}

0803ec4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ec4a:	b580      	push	{r7, lr}
 803ec4c:	b084      	sub	sp, #16
 803ec4e:	af00      	add	r7, sp, #0
 803ec50:	6078      	str	r0, [r7, #4]
 803ec52:	460b      	mov	r3, r1
 803ec54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ec56:	2300      	movs	r3, #0
 803ec58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ec5a:	2300      	movs	r3, #0
 803ec5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803ec5e:	687b      	ldr	r3, [r7, #4]
 803ec60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ec64:	78fa      	ldrb	r2, [r7, #3]
 803ec66:	4611      	mov	r1, r2
 803ec68:	4618      	mov	r0, r3
 803ec6a:	f7f4 fc59 	bl	8033520 <HAL_PCD_EP_Close>
 803ec6e:	4603      	mov	r3, r0
 803ec70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ec72:	7bfb      	ldrb	r3, [r7, #15]
 803ec74:	4618      	mov	r0, r3
 803ec76:	f000 f8fd 	bl	803ee74 <USBD_Get_USB_Status>
 803ec7a:	4603      	mov	r3, r0
 803ec7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ec7e:	7bbb      	ldrb	r3, [r7, #14]
}
 803ec80:	4618      	mov	r0, r3
 803ec82:	3710      	adds	r7, #16
 803ec84:	46bd      	mov	sp, r7
 803ec86:	bd80      	pop	{r7, pc}

0803ec88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ec88:	b580      	push	{r7, lr}
 803ec8a:	b084      	sub	sp, #16
 803ec8c:	af00      	add	r7, sp, #0
 803ec8e:	6078      	str	r0, [r7, #4]
 803ec90:	460b      	mov	r3, r1
 803ec92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ec94:	2300      	movs	r3, #0
 803ec96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ec98:	2300      	movs	r3, #0
 803ec9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803ec9c:	687b      	ldr	r3, [r7, #4]
 803ec9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803eca2:	78fa      	ldrb	r2, [r7, #3]
 803eca4:	4611      	mov	r1, r2
 803eca6:	4618      	mov	r0, r3
 803eca8:	f7f4 fd31 	bl	803370e <HAL_PCD_EP_SetStall>
 803ecac:	4603      	mov	r3, r0
 803ecae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ecb0:	7bfb      	ldrb	r3, [r7, #15]
 803ecb2:	4618      	mov	r0, r3
 803ecb4:	f000 f8de 	bl	803ee74 <USBD_Get_USB_Status>
 803ecb8:	4603      	mov	r3, r0
 803ecba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ecbc:	7bbb      	ldrb	r3, [r7, #14]
}
 803ecbe:	4618      	mov	r0, r3
 803ecc0:	3710      	adds	r7, #16
 803ecc2:	46bd      	mov	sp, r7
 803ecc4:	bd80      	pop	{r7, pc}

0803ecc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ecc6:	b580      	push	{r7, lr}
 803ecc8:	b084      	sub	sp, #16
 803ecca:	af00      	add	r7, sp, #0
 803eccc:	6078      	str	r0, [r7, #4]
 803ecce:	460b      	mov	r3, r1
 803ecd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ecd2:	2300      	movs	r3, #0
 803ecd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ecd6:	2300      	movs	r3, #0
 803ecd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803ecda:	687b      	ldr	r3, [r7, #4]
 803ecdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ece0:	78fa      	ldrb	r2, [r7, #3]
 803ece2:	4611      	mov	r1, r2
 803ece4:	4618      	mov	r0, r3
 803ece6:	f7f4 fd76 	bl	80337d6 <HAL_PCD_EP_ClrStall>
 803ecea:	4603      	mov	r3, r0
 803ecec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ecee:	7bfb      	ldrb	r3, [r7, #15]
 803ecf0:	4618      	mov	r0, r3
 803ecf2:	f000 f8bf 	bl	803ee74 <USBD_Get_USB_Status>
 803ecf6:	4603      	mov	r3, r0
 803ecf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ecfa:	7bbb      	ldrb	r3, [r7, #14]
}
 803ecfc:	4618      	mov	r0, r3
 803ecfe:	3710      	adds	r7, #16
 803ed00:	46bd      	mov	sp, r7
 803ed02:	bd80      	pop	{r7, pc}

0803ed04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ed04:	b480      	push	{r7}
 803ed06:	b085      	sub	sp, #20
 803ed08:	af00      	add	r7, sp, #0
 803ed0a:	6078      	str	r0, [r7, #4]
 803ed0c:	460b      	mov	r3, r1
 803ed0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803ed10:	687b      	ldr	r3, [r7, #4]
 803ed12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ed16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803ed18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803ed1c:	2b00      	cmp	r3, #0
 803ed1e:	da0b      	bge.n	803ed38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803ed20:	78fb      	ldrb	r3, [r7, #3]
 803ed22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ed26:	68f9      	ldr	r1, [r7, #12]
 803ed28:	4613      	mov	r3, r2
 803ed2a:	00db      	lsls	r3, r3, #3
 803ed2c:	4413      	add	r3, r2
 803ed2e:	009b      	lsls	r3, r3, #2
 803ed30:	440b      	add	r3, r1
 803ed32:	333e      	adds	r3, #62	; 0x3e
 803ed34:	781b      	ldrb	r3, [r3, #0]
 803ed36:	e00b      	b.n	803ed50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803ed38:	78fb      	ldrb	r3, [r7, #3]
 803ed3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ed3e:	68f9      	ldr	r1, [r7, #12]
 803ed40:	4613      	mov	r3, r2
 803ed42:	00db      	lsls	r3, r3, #3
 803ed44:	4413      	add	r3, r2
 803ed46:	009b      	lsls	r3, r3, #2
 803ed48:	440b      	add	r3, r1
 803ed4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803ed4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 803ed50:	4618      	mov	r0, r3
 803ed52:	3714      	adds	r7, #20
 803ed54:	46bd      	mov	sp, r7
 803ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ed5a:	4770      	bx	lr

0803ed5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803ed5c:	b580      	push	{r7, lr}
 803ed5e:	b084      	sub	sp, #16
 803ed60:	af00      	add	r7, sp, #0
 803ed62:	6078      	str	r0, [r7, #4]
 803ed64:	460b      	mov	r3, r1
 803ed66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ed68:	2300      	movs	r3, #0
 803ed6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ed6c:	2300      	movs	r3, #0
 803ed6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803ed70:	687b      	ldr	r3, [r7, #4]
 803ed72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ed76:	78fa      	ldrb	r2, [r7, #3]
 803ed78:	4611      	mov	r1, r2
 803ed7a:	4618      	mov	r0, r3
 803ed7c:	f7f4 fb43 	bl	8033406 <HAL_PCD_SetAddress>
 803ed80:	4603      	mov	r3, r0
 803ed82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ed84:	7bfb      	ldrb	r3, [r7, #15]
 803ed86:	4618      	mov	r0, r3
 803ed88:	f000 f874 	bl	803ee74 <USBD_Get_USB_Status>
 803ed8c:	4603      	mov	r3, r0
 803ed8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ed90:	7bbb      	ldrb	r3, [r7, #14]
}
 803ed92:	4618      	mov	r0, r3
 803ed94:	3710      	adds	r7, #16
 803ed96:	46bd      	mov	sp, r7
 803ed98:	bd80      	pop	{r7, pc}

0803ed9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803ed9a:	b580      	push	{r7, lr}
 803ed9c:	b086      	sub	sp, #24
 803ed9e:	af00      	add	r7, sp, #0
 803eda0:	60f8      	str	r0, [r7, #12]
 803eda2:	607a      	str	r2, [r7, #4]
 803eda4:	603b      	str	r3, [r7, #0]
 803eda6:	460b      	mov	r3, r1
 803eda8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803edaa:	2300      	movs	r3, #0
 803edac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803edae:	2300      	movs	r3, #0
 803edb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803edb2:	68fb      	ldr	r3, [r7, #12]
 803edb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803edb8:	7af9      	ldrb	r1, [r7, #11]
 803edba:	683b      	ldr	r3, [r7, #0]
 803edbc:	687a      	ldr	r2, [r7, #4]
 803edbe:	f7f4 fc5c 	bl	803367a <HAL_PCD_EP_Transmit>
 803edc2:	4603      	mov	r3, r0
 803edc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803edc6:	7dfb      	ldrb	r3, [r7, #23]
 803edc8:	4618      	mov	r0, r3
 803edca:	f000 f853 	bl	803ee74 <USBD_Get_USB_Status>
 803edce:	4603      	mov	r3, r0
 803edd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803edd2:	7dbb      	ldrb	r3, [r7, #22]
}
 803edd4:	4618      	mov	r0, r3
 803edd6:	3718      	adds	r7, #24
 803edd8:	46bd      	mov	sp, r7
 803edda:	bd80      	pop	{r7, pc}

0803eddc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803eddc:	b580      	push	{r7, lr}
 803edde:	b086      	sub	sp, #24
 803ede0:	af00      	add	r7, sp, #0
 803ede2:	60f8      	str	r0, [r7, #12]
 803ede4:	607a      	str	r2, [r7, #4]
 803ede6:	603b      	str	r3, [r7, #0]
 803ede8:	460b      	mov	r3, r1
 803edea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803edec:	2300      	movs	r3, #0
 803edee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803edf0:	2300      	movs	r3, #0
 803edf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803edf4:	68fb      	ldr	r3, [r7, #12]
 803edf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803edfa:	7af9      	ldrb	r1, [r7, #11]
 803edfc:	683b      	ldr	r3, [r7, #0]
 803edfe:	687a      	ldr	r2, [r7, #4]
 803ee00:	f7f4 fbd8 	bl	80335b4 <HAL_PCD_EP_Receive>
 803ee04:	4603      	mov	r3, r0
 803ee06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ee08:	7dfb      	ldrb	r3, [r7, #23]
 803ee0a:	4618      	mov	r0, r3
 803ee0c:	f000 f832 	bl	803ee74 <USBD_Get_USB_Status>
 803ee10:	4603      	mov	r3, r0
 803ee12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803ee14:	7dbb      	ldrb	r3, [r7, #22]
}
 803ee16:	4618      	mov	r0, r3
 803ee18:	3718      	adds	r7, #24
 803ee1a:	46bd      	mov	sp, r7
 803ee1c:	bd80      	pop	{r7, pc}

0803ee1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ee1e:	b580      	push	{r7, lr}
 803ee20:	b082      	sub	sp, #8
 803ee22:	af00      	add	r7, sp, #0
 803ee24:	6078      	str	r0, [r7, #4]
 803ee26:	460b      	mov	r3, r1
 803ee28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803ee2a:	687b      	ldr	r3, [r7, #4]
 803ee2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ee30:	78fa      	ldrb	r2, [r7, #3]
 803ee32:	4611      	mov	r1, r2
 803ee34:	4618      	mov	r0, r3
 803ee36:	f7f4 fc08 	bl	803364a <HAL_PCD_EP_GetRxCount>
 803ee3a:	4603      	mov	r3, r0
}
 803ee3c:	4618      	mov	r0, r3
 803ee3e:	3708      	adds	r7, #8
 803ee40:	46bd      	mov	sp, r7
 803ee42:	bd80      	pop	{r7, pc}

0803ee44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803ee44:	b480      	push	{r7}
 803ee46:	b083      	sub	sp, #12
 803ee48:	af00      	add	r7, sp, #0
 803ee4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803ee4c:	4b03      	ldr	r3, [pc, #12]	; (803ee5c <USBD_static_malloc+0x18>)
}
 803ee4e:	4618      	mov	r0, r3
 803ee50:	370c      	adds	r7, #12
 803ee52:	46bd      	mov	sp, r7
 803ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ee58:	4770      	bx	lr
 803ee5a:	bf00      	nop
 803ee5c:	240035bc 	.word	0x240035bc

0803ee60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803ee60:	b480      	push	{r7}
 803ee62:	b083      	sub	sp, #12
 803ee64:	af00      	add	r7, sp, #0
 803ee66:	6078      	str	r0, [r7, #4]

}
 803ee68:	bf00      	nop
 803ee6a:	370c      	adds	r7, #12
 803ee6c:	46bd      	mov	sp, r7
 803ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ee72:	4770      	bx	lr

0803ee74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803ee74:	b480      	push	{r7}
 803ee76:	b085      	sub	sp, #20
 803ee78:	af00      	add	r7, sp, #0
 803ee7a:	4603      	mov	r3, r0
 803ee7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ee7e:	2300      	movs	r3, #0
 803ee80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803ee82:	79fb      	ldrb	r3, [r7, #7]
 803ee84:	2b03      	cmp	r3, #3
 803ee86:	d817      	bhi.n	803eeb8 <USBD_Get_USB_Status+0x44>
 803ee88:	a201      	add	r2, pc, #4	; (adr r2, 803ee90 <USBD_Get_USB_Status+0x1c>)
 803ee8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ee8e:	bf00      	nop
 803ee90:	0803eea1 	.word	0x0803eea1
 803ee94:	0803eea7 	.word	0x0803eea7
 803ee98:	0803eead 	.word	0x0803eead
 803ee9c:	0803eeb3 	.word	0x0803eeb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803eea0:	2300      	movs	r3, #0
 803eea2:	73fb      	strb	r3, [r7, #15]
    break;
 803eea4:	e00b      	b.n	803eebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803eea6:	2303      	movs	r3, #3
 803eea8:	73fb      	strb	r3, [r7, #15]
    break;
 803eeaa:	e008      	b.n	803eebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803eeac:	2301      	movs	r3, #1
 803eeae:	73fb      	strb	r3, [r7, #15]
    break;
 803eeb0:	e005      	b.n	803eebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803eeb2:	2303      	movs	r3, #3
 803eeb4:	73fb      	strb	r3, [r7, #15]
    break;
 803eeb6:	e002      	b.n	803eebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803eeb8:	2303      	movs	r3, #3
 803eeba:	73fb      	strb	r3, [r7, #15]
    break;
 803eebc:	bf00      	nop
  }
  return usb_status;
 803eebe:	7bfb      	ldrb	r3, [r7, #15]
}
 803eec0:	4618      	mov	r0, r3
 803eec2:	3714      	adds	r7, #20
 803eec4:	46bd      	mov	sp, r7
 803eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803eeca:	4770      	bx	lr

0803eecc <_ZdlPvj>:
 803eecc:	f000 b817 	b.w	803eefe <_ZdlPv>

0803eed0 <_Znwj>:
 803eed0:	2801      	cmp	r0, #1
 803eed2:	bf38      	it	cc
 803eed4:	2001      	movcc	r0, #1
 803eed6:	b510      	push	{r4, lr}
 803eed8:	4604      	mov	r4, r0
 803eeda:	4620      	mov	r0, r4
 803eedc:	f000 f87c 	bl	803efd8 <malloc>
 803eee0:	b930      	cbnz	r0, 803eef0 <_Znwj+0x20>
 803eee2:	f000 f80f 	bl	803ef04 <_ZSt15get_new_handlerv>
 803eee6:	b908      	cbnz	r0, 803eeec <_Znwj+0x1c>
 803eee8:	f000 f814 	bl	803ef14 <abort>
 803eeec:	4780      	blx	r0
 803eeee:	e7f4      	b.n	803eeda <_Znwj+0xa>
 803eef0:	bd10      	pop	{r4, pc}

0803eef2 <_ZSt17__throw_bad_allocv>:
 803eef2:	b508      	push	{r3, lr}
 803eef4:	f000 f80e 	bl	803ef14 <abort>

0803eef8 <_ZSt20__throw_length_errorPKc>:
 803eef8:	b508      	push	{r3, lr}
 803eefa:	f000 f80b 	bl	803ef14 <abort>

0803eefe <_ZdlPv>:
 803eefe:	f000 b873 	b.w	803efe8 <free>
	...

0803ef04 <_ZSt15get_new_handlerv>:
 803ef04:	4b02      	ldr	r3, [pc, #8]	; (803ef10 <_ZSt15get_new_handlerv+0xc>)
 803ef06:	6818      	ldr	r0, [r3, #0]
 803ef08:	f3bf 8f5b 	dmb	ish
 803ef0c:	4770      	bx	lr
 803ef0e:	bf00      	nop
 803ef10:	240037dc 	.word	0x240037dc

0803ef14 <abort>:
 803ef14:	b508      	push	{r3, lr}
 803ef16:	2006      	movs	r0, #6
 803ef18:	f000 fca4 	bl	803f864 <raise>
 803ef1c:	2001      	movs	r0, #1
 803ef1e:	f7ee f90f 	bl	802d140 <_exit>
	...

0803ef24 <__assert_func>:
 803ef24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803ef26:	4614      	mov	r4, r2
 803ef28:	461a      	mov	r2, r3
 803ef2a:	4b09      	ldr	r3, [pc, #36]	; (803ef50 <__assert_func+0x2c>)
 803ef2c:	681b      	ldr	r3, [r3, #0]
 803ef2e:	4605      	mov	r5, r0
 803ef30:	68d8      	ldr	r0, [r3, #12]
 803ef32:	b14c      	cbz	r4, 803ef48 <__assert_func+0x24>
 803ef34:	4b07      	ldr	r3, [pc, #28]	; (803ef54 <__assert_func+0x30>)
 803ef36:	9100      	str	r1, [sp, #0]
 803ef38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803ef3c:	4906      	ldr	r1, [pc, #24]	; (803ef58 <__assert_func+0x34>)
 803ef3e:	462b      	mov	r3, r5
 803ef40:	f000 f814 	bl	803ef6c <fiprintf>
 803ef44:	f7ff ffe6 	bl	803ef14 <abort>
 803ef48:	4b04      	ldr	r3, [pc, #16]	; (803ef5c <__assert_func+0x38>)
 803ef4a:	461c      	mov	r4, r3
 803ef4c:	e7f3      	b.n	803ef36 <__assert_func+0x12>
 803ef4e:	bf00      	nop
 803ef50:	24000104 	.word	0x24000104
 803ef54:	0805b2b0 	.word	0x0805b2b0
 803ef58:	0805b2bd 	.word	0x0805b2bd
 803ef5c:	0805b2eb 	.word	0x0805b2eb

0803ef60 <__errno>:
 803ef60:	4b01      	ldr	r3, [pc, #4]	; (803ef68 <__errno+0x8>)
 803ef62:	6818      	ldr	r0, [r3, #0]
 803ef64:	4770      	bx	lr
 803ef66:	bf00      	nop
 803ef68:	24000104 	.word	0x24000104

0803ef6c <fiprintf>:
 803ef6c:	b40e      	push	{r1, r2, r3}
 803ef6e:	b503      	push	{r0, r1, lr}
 803ef70:	4601      	mov	r1, r0
 803ef72:	ab03      	add	r3, sp, #12
 803ef74:	4805      	ldr	r0, [pc, #20]	; (803ef8c <fiprintf+0x20>)
 803ef76:	f853 2b04 	ldr.w	r2, [r3], #4
 803ef7a:	6800      	ldr	r0, [r0, #0]
 803ef7c:	9301      	str	r3, [sp, #4]
 803ef7e:	f000 f975 	bl	803f26c <_vfiprintf_r>
 803ef82:	b002      	add	sp, #8
 803ef84:	f85d eb04 	ldr.w	lr, [sp], #4
 803ef88:	b003      	add	sp, #12
 803ef8a:	4770      	bx	lr
 803ef8c:	24000104 	.word	0x24000104

0803ef90 <__libc_init_array>:
 803ef90:	b570      	push	{r4, r5, r6, lr}
 803ef92:	4d0d      	ldr	r5, [pc, #52]	; (803efc8 <__libc_init_array+0x38>)
 803ef94:	4c0d      	ldr	r4, [pc, #52]	; (803efcc <__libc_init_array+0x3c>)
 803ef96:	1b64      	subs	r4, r4, r5
 803ef98:	10a4      	asrs	r4, r4, #2
 803ef9a:	2600      	movs	r6, #0
 803ef9c:	42a6      	cmp	r6, r4
 803ef9e:	d109      	bne.n	803efb4 <__libc_init_array+0x24>
 803efa0:	4d0b      	ldr	r5, [pc, #44]	; (803efd0 <__libc_init_array+0x40>)
 803efa2:	4c0c      	ldr	r4, [pc, #48]	; (803efd4 <__libc_init_array+0x44>)
 803efa4:	f001 f812 	bl	803ffcc <_init>
 803efa8:	1b64      	subs	r4, r4, r5
 803efaa:	10a4      	asrs	r4, r4, #2
 803efac:	2600      	movs	r6, #0
 803efae:	42a6      	cmp	r6, r4
 803efb0:	d105      	bne.n	803efbe <__libc_init_array+0x2e>
 803efb2:	bd70      	pop	{r4, r5, r6, pc}
 803efb4:	f855 3b04 	ldr.w	r3, [r5], #4
 803efb8:	4798      	blx	r3
 803efba:	3601      	adds	r6, #1
 803efbc:	e7ee      	b.n	803ef9c <__libc_init_array+0xc>
 803efbe:	f855 3b04 	ldr.w	r3, [r5], #4
 803efc2:	4798      	blx	r3
 803efc4:	3601      	adds	r6, #1
 803efc6:	e7f2      	b.n	803efae <__libc_init_array+0x1e>
 803efc8:	0805b38c 	.word	0x0805b38c
 803efcc:	0805b38c 	.word	0x0805b38c
 803efd0:	0805b38c 	.word	0x0805b38c
 803efd4:	0805b394 	.word	0x0805b394

0803efd8 <malloc>:
 803efd8:	4b02      	ldr	r3, [pc, #8]	; (803efe4 <malloc+0xc>)
 803efda:	4601      	mov	r1, r0
 803efdc:	6818      	ldr	r0, [r3, #0]
 803efde:	f000 b8a7 	b.w	803f130 <_malloc_r>
 803efe2:	bf00      	nop
 803efe4:	24000104 	.word	0x24000104

0803efe8 <free>:
 803efe8:	4b02      	ldr	r3, [pc, #8]	; (803eff4 <free+0xc>)
 803efea:	4601      	mov	r1, r0
 803efec:	6818      	ldr	r0, [r3, #0]
 803efee:	f000 b833 	b.w	803f058 <_free_r>
 803eff2:	bf00      	nop
 803eff4:	24000104 	.word	0x24000104

0803eff8 <memcpy>:
 803eff8:	440a      	add	r2, r1
 803effa:	4291      	cmp	r1, r2
 803effc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803f000:	d100      	bne.n	803f004 <memcpy+0xc>
 803f002:	4770      	bx	lr
 803f004:	b510      	push	{r4, lr}
 803f006:	f811 4b01 	ldrb.w	r4, [r1], #1
 803f00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 803f00e:	4291      	cmp	r1, r2
 803f010:	d1f9      	bne.n	803f006 <memcpy+0xe>
 803f012:	bd10      	pop	{r4, pc}

0803f014 <memmove>:
 803f014:	4288      	cmp	r0, r1
 803f016:	b510      	push	{r4, lr}
 803f018:	eb01 0402 	add.w	r4, r1, r2
 803f01c:	d902      	bls.n	803f024 <memmove+0x10>
 803f01e:	4284      	cmp	r4, r0
 803f020:	4623      	mov	r3, r4
 803f022:	d807      	bhi.n	803f034 <memmove+0x20>
 803f024:	1e43      	subs	r3, r0, #1
 803f026:	42a1      	cmp	r1, r4
 803f028:	d008      	beq.n	803f03c <memmove+0x28>
 803f02a:	f811 2b01 	ldrb.w	r2, [r1], #1
 803f02e:	f803 2f01 	strb.w	r2, [r3, #1]!
 803f032:	e7f8      	b.n	803f026 <memmove+0x12>
 803f034:	4402      	add	r2, r0
 803f036:	4601      	mov	r1, r0
 803f038:	428a      	cmp	r2, r1
 803f03a:	d100      	bne.n	803f03e <memmove+0x2a>
 803f03c:	bd10      	pop	{r4, pc}
 803f03e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803f042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803f046:	e7f7      	b.n	803f038 <memmove+0x24>

0803f048 <memset>:
 803f048:	4402      	add	r2, r0
 803f04a:	4603      	mov	r3, r0
 803f04c:	4293      	cmp	r3, r2
 803f04e:	d100      	bne.n	803f052 <memset+0xa>
 803f050:	4770      	bx	lr
 803f052:	f803 1b01 	strb.w	r1, [r3], #1
 803f056:	e7f9      	b.n	803f04c <memset+0x4>

0803f058 <_free_r>:
 803f058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803f05a:	2900      	cmp	r1, #0
 803f05c:	d044      	beq.n	803f0e8 <_free_r+0x90>
 803f05e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803f062:	9001      	str	r0, [sp, #4]
 803f064:	2b00      	cmp	r3, #0
 803f066:	f1a1 0404 	sub.w	r4, r1, #4
 803f06a:	bfb8      	it	lt
 803f06c:	18e4      	addlt	r4, r4, r3
 803f06e:	f000 fef5 	bl	803fe5c <__malloc_lock>
 803f072:	4a1e      	ldr	r2, [pc, #120]	; (803f0ec <_free_r+0x94>)
 803f074:	9801      	ldr	r0, [sp, #4]
 803f076:	6813      	ldr	r3, [r2, #0]
 803f078:	b933      	cbnz	r3, 803f088 <_free_r+0x30>
 803f07a:	6063      	str	r3, [r4, #4]
 803f07c:	6014      	str	r4, [r2, #0]
 803f07e:	b003      	add	sp, #12
 803f080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803f084:	f000 bef0 	b.w	803fe68 <__malloc_unlock>
 803f088:	42a3      	cmp	r3, r4
 803f08a:	d908      	bls.n	803f09e <_free_r+0x46>
 803f08c:	6825      	ldr	r5, [r4, #0]
 803f08e:	1961      	adds	r1, r4, r5
 803f090:	428b      	cmp	r3, r1
 803f092:	bf01      	itttt	eq
 803f094:	6819      	ldreq	r1, [r3, #0]
 803f096:	685b      	ldreq	r3, [r3, #4]
 803f098:	1949      	addeq	r1, r1, r5
 803f09a:	6021      	streq	r1, [r4, #0]
 803f09c:	e7ed      	b.n	803f07a <_free_r+0x22>
 803f09e:	461a      	mov	r2, r3
 803f0a0:	685b      	ldr	r3, [r3, #4]
 803f0a2:	b10b      	cbz	r3, 803f0a8 <_free_r+0x50>
 803f0a4:	42a3      	cmp	r3, r4
 803f0a6:	d9fa      	bls.n	803f09e <_free_r+0x46>
 803f0a8:	6811      	ldr	r1, [r2, #0]
 803f0aa:	1855      	adds	r5, r2, r1
 803f0ac:	42a5      	cmp	r5, r4
 803f0ae:	d10b      	bne.n	803f0c8 <_free_r+0x70>
 803f0b0:	6824      	ldr	r4, [r4, #0]
 803f0b2:	4421      	add	r1, r4
 803f0b4:	1854      	adds	r4, r2, r1
 803f0b6:	42a3      	cmp	r3, r4
 803f0b8:	6011      	str	r1, [r2, #0]
 803f0ba:	d1e0      	bne.n	803f07e <_free_r+0x26>
 803f0bc:	681c      	ldr	r4, [r3, #0]
 803f0be:	685b      	ldr	r3, [r3, #4]
 803f0c0:	6053      	str	r3, [r2, #4]
 803f0c2:	4421      	add	r1, r4
 803f0c4:	6011      	str	r1, [r2, #0]
 803f0c6:	e7da      	b.n	803f07e <_free_r+0x26>
 803f0c8:	d902      	bls.n	803f0d0 <_free_r+0x78>
 803f0ca:	230c      	movs	r3, #12
 803f0cc:	6003      	str	r3, [r0, #0]
 803f0ce:	e7d6      	b.n	803f07e <_free_r+0x26>
 803f0d0:	6825      	ldr	r5, [r4, #0]
 803f0d2:	1961      	adds	r1, r4, r5
 803f0d4:	428b      	cmp	r3, r1
 803f0d6:	bf04      	itt	eq
 803f0d8:	6819      	ldreq	r1, [r3, #0]
 803f0da:	685b      	ldreq	r3, [r3, #4]
 803f0dc:	6063      	str	r3, [r4, #4]
 803f0de:	bf04      	itt	eq
 803f0e0:	1949      	addeq	r1, r1, r5
 803f0e2:	6021      	streq	r1, [r4, #0]
 803f0e4:	6054      	str	r4, [r2, #4]
 803f0e6:	e7ca      	b.n	803f07e <_free_r+0x26>
 803f0e8:	b003      	add	sp, #12
 803f0ea:	bd30      	pop	{r4, r5, pc}
 803f0ec:	240037e0 	.word	0x240037e0

0803f0f0 <sbrk_aligned>:
 803f0f0:	b570      	push	{r4, r5, r6, lr}
 803f0f2:	4e0e      	ldr	r6, [pc, #56]	; (803f12c <sbrk_aligned+0x3c>)
 803f0f4:	460c      	mov	r4, r1
 803f0f6:	6831      	ldr	r1, [r6, #0]
 803f0f8:	4605      	mov	r5, r0
 803f0fa:	b911      	cbnz	r1, 803f102 <sbrk_aligned+0x12>
 803f0fc:	f000 fb7a 	bl	803f7f4 <_sbrk_r>
 803f100:	6030      	str	r0, [r6, #0]
 803f102:	4621      	mov	r1, r4
 803f104:	4628      	mov	r0, r5
 803f106:	f000 fb75 	bl	803f7f4 <_sbrk_r>
 803f10a:	1c43      	adds	r3, r0, #1
 803f10c:	d00a      	beq.n	803f124 <sbrk_aligned+0x34>
 803f10e:	1cc4      	adds	r4, r0, #3
 803f110:	f024 0403 	bic.w	r4, r4, #3
 803f114:	42a0      	cmp	r0, r4
 803f116:	d007      	beq.n	803f128 <sbrk_aligned+0x38>
 803f118:	1a21      	subs	r1, r4, r0
 803f11a:	4628      	mov	r0, r5
 803f11c:	f000 fb6a 	bl	803f7f4 <_sbrk_r>
 803f120:	3001      	adds	r0, #1
 803f122:	d101      	bne.n	803f128 <sbrk_aligned+0x38>
 803f124:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803f128:	4620      	mov	r0, r4
 803f12a:	bd70      	pop	{r4, r5, r6, pc}
 803f12c:	240037e4 	.word	0x240037e4

0803f130 <_malloc_r>:
 803f130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803f134:	1ccd      	adds	r5, r1, #3
 803f136:	f025 0503 	bic.w	r5, r5, #3
 803f13a:	3508      	adds	r5, #8
 803f13c:	2d0c      	cmp	r5, #12
 803f13e:	bf38      	it	cc
 803f140:	250c      	movcc	r5, #12
 803f142:	2d00      	cmp	r5, #0
 803f144:	4607      	mov	r7, r0
 803f146:	db01      	blt.n	803f14c <_malloc_r+0x1c>
 803f148:	42a9      	cmp	r1, r5
 803f14a:	d905      	bls.n	803f158 <_malloc_r+0x28>
 803f14c:	230c      	movs	r3, #12
 803f14e:	603b      	str	r3, [r7, #0]
 803f150:	2600      	movs	r6, #0
 803f152:	4630      	mov	r0, r6
 803f154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803f158:	4e2e      	ldr	r6, [pc, #184]	; (803f214 <_malloc_r+0xe4>)
 803f15a:	f000 fe7f 	bl	803fe5c <__malloc_lock>
 803f15e:	6833      	ldr	r3, [r6, #0]
 803f160:	461c      	mov	r4, r3
 803f162:	bb34      	cbnz	r4, 803f1b2 <_malloc_r+0x82>
 803f164:	4629      	mov	r1, r5
 803f166:	4638      	mov	r0, r7
 803f168:	f7ff ffc2 	bl	803f0f0 <sbrk_aligned>
 803f16c:	1c43      	adds	r3, r0, #1
 803f16e:	4604      	mov	r4, r0
 803f170:	d14d      	bne.n	803f20e <_malloc_r+0xde>
 803f172:	6834      	ldr	r4, [r6, #0]
 803f174:	4626      	mov	r6, r4
 803f176:	2e00      	cmp	r6, #0
 803f178:	d140      	bne.n	803f1fc <_malloc_r+0xcc>
 803f17a:	6823      	ldr	r3, [r4, #0]
 803f17c:	4631      	mov	r1, r6
 803f17e:	4638      	mov	r0, r7
 803f180:	eb04 0803 	add.w	r8, r4, r3
 803f184:	f000 fb36 	bl	803f7f4 <_sbrk_r>
 803f188:	4580      	cmp	r8, r0
 803f18a:	d13a      	bne.n	803f202 <_malloc_r+0xd2>
 803f18c:	6821      	ldr	r1, [r4, #0]
 803f18e:	3503      	adds	r5, #3
 803f190:	1a6d      	subs	r5, r5, r1
 803f192:	f025 0503 	bic.w	r5, r5, #3
 803f196:	3508      	adds	r5, #8
 803f198:	2d0c      	cmp	r5, #12
 803f19a:	bf38      	it	cc
 803f19c:	250c      	movcc	r5, #12
 803f19e:	4629      	mov	r1, r5
 803f1a0:	4638      	mov	r0, r7
 803f1a2:	f7ff ffa5 	bl	803f0f0 <sbrk_aligned>
 803f1a6:	3001      	adds	r0, #1
 803f1a8:	d02b      	beq.n	803f202 <_malloc_r+0xd2>
 803f1aa:	6823      	ldr	r3, [r4, #0]
 803f1ac:	442b      	add	r3, r5
 803f1ae:	6023      	str	r3, [r4, #0]
 803f1b0:	e00e      	b.n	803f1d0 <_malloc_r+0xa0>
 803f1b2:	6822      	ldr	r2, [r4, #0]
 803f1b4:	1b52      	subs	r2, r2, r5
 803f1b6:	d41e      	bmi.n	803f1f6 <_malloc_r+0xc6>
 803f1b8:	2a0b      	cmp	r2, #11
 803f1ba:	d916      	bls.n	803f1ea <_malloc_r+0xba>
 803f1bc:	1961      	adds	r1, r4, r5
 803f1be:	42a3      	cmp	r3, r4
 803f1c0:	6025      	str	r5, [r4, #0]
 803f1c2:	bf18      	it	ne
 803f1c4:	6059      	strne	r1, [r3, #4]
 803f1c6:	6863      	ldr	r3, [r4, #4]
 803f1c8:	bf08      	it	eq
 803f1ca:	6031      	streq	r1, [r6, #0]
 803f1cc:	5162      	str	r2, [r4, r5]
 803f1ce:	604b      	str	r3, [r1, #4]
 803f1d0:	4638      	mov	r0, r7
 803f1d2:	f104 060b 	add.w	r6, r4, #11
 803f1d6:	f000 fe47 	bl	803fe68 <__malloc_unlock>
 803f1da:	f026 0607 	bic.w	r6, r6, #7
 803f1de:	1d23      	adds	r3, r4, #4
 803f1e0:	1af2      	subs	r2, r6, r3
 803f1e2:	d0b6      	beq.n	803f152 <_malloc_r+0x22>
 803f1e4:	1b9b      	subs	r3, r3, r6
 803f1e6:	50a3      	str	r3, [r4, r2]
 803f1e8:	e7b3      	b.n	803f152 <_malloc_r+0x22>
 803f1ea:	6862      	ldr	r2, [r4, #4]
 803f1ec:	42a3      	cmp	r3, r4
 803f1ee:	bf0c      	ite	eq
 803f1f0:	6032      	streq	r2, [r6, #0]
 803f1f2:	605a      	strne	r2, [r3, #4]
 803f1f4:	e7ec      	b.n	803f1d0 <_malloc_r+0xa0>
 803f1f6:	4623      	mov	r3, r4
 803f1f8:	6864      	ldr	r4, [r4, #4]
 803f1fa:	e7b2      	b.n	803f162 <_malloc_r+0x32>
 803f1fc:	4634      	mov	r4, r6
 803f1fe:	6876      	ldr	r6, [r6, #4]
 803f200:	e7b9      	b.n	803f176 <_malloc_r+0x46>
 803f202:	230c      	movs	r3, #12
 803f204:	603b      	str	r3, [r7, #0]
 803f206:	4638      	mov	r0, r7
 803f208:	f000 fe2e 	bl	803fe68 <__malloc_unlock>
 803f20c:	e7a1      	b.n	803f152 <_malloc_r+0x22>
 803f20e:	6025      	str	r5, [r4, #0]
 803f210:	e7de      	b.n	803f1d0 <_malloc_r+0xa0>
 803f212:	bf00      	nop
 803f214:	240037e0 	.word	0x240037e0

0803f218 <__sfputc_r>:
 803f218:	6893      	ldr	r3, [r2, #8]
 803f21a:	3b01      	subs	r3, #1
 803f21c:	2b00      	cmp	r3, #0
 803f21e:	b410      	push	{r4}
 803f220:	6093      	str	r3, [r2, #8]
 803f222:	da08      	bge.n	803f236 <__sfputc_r+0x1e>
 803f224:	6994      	ldr	r4, [r2, #24]
 803f226:	42a3      	cmp	r3, r4
 803f228:	db01      	blt.n	803f22e <__sfputc_r+0x16>
 803f22a:	290a      	cmp	r1, #10
 803f22c:	d103      	bne.n	803f236 <__sfputc_r+0x1e>
 803f22e:	f85d 4b04 	ldr.w	r4, [sp], #4
 803f232:	f000 bb33 	b.w	803f89c <__swbuf_r>
 803f236:	6813      	ldr	r3, [r2, #0]
 803f238:	1c58      	adds	r0, r3, #1
 803f23a:	6010      	str	r0, [r2, #0]
 803f23c:	7019      	strb	r1, [r3, #0]
 803f23e:	4608      	mov	r0, r1
 803f240:	f85d 4b04 	ldr.w	r4, [sp], #4
 803f244:	4770      	bx	lr

0803f246 <__sfputs_r>:
 803f246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f248:	4606      	mov	r6, r0
 803f24a:	460f      	mov	r7, r1
 803f24c:	4614      	mov	r4, r2
 803f24e:	18d5      	adds	r5, r2, r3
 803f250:	42ac      	cmp	r4, r5
 803f252:	d101      	bne.n	803f258 <__sfputs_r+0x12>
 803f254:	2000      	movs	r0, #0
 803f256:	e007      	b.n	803f268 <__sfputs_r+0x22>
 803f258:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f25c:	463a      	mov	r2, r7
 803f25e:	4630      	mov	r0, r6
 803f260:	f7ff ffda 	bl	803f218 <__sfputc_r>
 803f264:	1c43      	adds	r3, r0, #1
 803f266:	d1f3      	bne.n	803f250 <__sfputs_r+0xa>
 803f268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803f26c <_vfiprintf_r>:
 803f26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803f270:	460d      	mov	r5, r1
 803f272:	b09d      	sub	sp, #116	; 0x74
 803f274:	4614      	mov	r4, r2
 803f276:	4698      	mov	r8, r3
 803f278:	4606      	mov	r6, r0
 803f27a:	b118      	cbz	r0, 803f284 <_vfiprintf_r+0x18>
 803f27c:	6983      	ldr	r3, [r0, #24]
 803f27e:	b90b      	cbnz	r3, 803f284 <_vfiprintf_r+0x18>
 803f280:	f000 fce6 	bl	803fc50 <__sinit>
 803f284:	4b89      	ldr	r3, [pc, #548]	; (803f4ac <_vfiprintf_r+0x240>)
 803f286:	429d      	cmp	r5, r3
 803f288:	d11b      	bne.n	803f2c2 <_vfiprintf_r+0x56>
 803f28a:	6875      	ldr	r5, [r6, #4]
 803f28c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803f28e:	07d9      	lsls	r1, r3, #31
 803f290:	d405      	bmi.n	803f29e <_vfiprintf_r+0x32>
 803f292:	89ab      	ldrh	r3, [r5, #12]
 803f294:	059a      	lsls	r2, r3, #22
 803f296:	d402      	bmi.n	803f29e <_vfiprintf_r+0x32>
 803f298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803f29a:	f000 fd77 	bl	803fd8c <__retarget_lock_acquire_recursive>
 803f29e:	89ab      	ldrh	r3, [r5, #12]
 803f2a0:	071b      	lsls	r3, r3, #28
 803f2a2:	d501      	bpl.n	803f2a8 <_vfiprintf_r+0x3c>
 803f2a4:	692b      	ldr	r3, [r5, #16]
 803f2a6:	b9eb      	cbnz	r3, 803f2e4 <_vfiprintf_r+0x78>
 803f2a8:	4629      	mov	r1, r5
 803f2aa:	4630      	mov	r0, r6
 803f2ac:	f000 fb48 	bl	803f940 <__swsetup_r>
 803f2b0:	b1c0      	cbz	r0, 803f2e4 <_vfiprintf_r+0x78>
 803f2b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803f2b4:	07dc      	lsls	r4, r3, #31
 803f2b6:	d50e      	bpl.n	803f2d6 <_vfiprintf_r+0x6a>
 803f2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803f2bc:	b01d      	add	sp, #116	; 0x74
 803f2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803f2c2:	4b7b      	ldr	r3, [pc, #492]	; (803f4b0 <_vfiprintf_r+0x244>)
 803f2c4:	429d      	cmp	r5, r3
 803f2c6:	d101      	bne.n	803f2cc <_vfiprintf_r+0x60>
 803f2c8:	68b5      	ldr	r5, [r6, #8]
 803f2ca:	e7df      	b.n	803f28c <_vfiprintf_r+0x20>
 803f2cc:	4b79      	ldr	r3, [pc, #484]	; (803f4b4 <_vfiprintf_r+0x248>)
 803f2ce:	429d      	cmp	r5, r3
 803f2d0:	bf08      	it	eq
 803f2d2:	68f5      	ldreq	r5, [r6, #12]
 803f2d4:	e7da      	b.n	803f28c <_vfiprintf_r+0x20>
 803f2d6:	89ab      	ldrh	r3, [r5, #12]
 803f2d8:	0598      	lsls	r0, r3, #22
 803f2da:	d4ed      	bmi.n	803f2b8 <_vfiprintf_r+0x4c>
 803f2dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803f2de:	f000 fd56 	bl	803fd8e <__retarget_lock_release_recursive>
 803f2e2:	e7e9      	b.n	803f2b8 <_vfiprintf_r+0x4c>
 803f2e4:	2300      	movs	r3, #0
 803f2e6:	9309      	str	r3, [sp, #36]	; 0x24
 803f2e8:	2320      	movs	r3, #32
 803f2ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803f2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 803f2f2:	2330      	movs	r3, #48	; 0x30
 803f2f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803f4b8 <_vfiprintf_r+0x24c>
 803f2f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803f2fc:	f04f 0901 	mov.w	r9, #1
 803f300:	4623      	mov	r3, r4
 803f302:	469a      	mov	sl, r3
 803f304:	f813 2b01 	ldrb.w	r2, [r3], #1
 803f308:	b10a      	cbz	r2, 803f30e <_vfiprintf_r+0xa2>
 803f30a:	2a25      	cmp	r2, #37	; 0x25
 803f30c:	d1f9      	bne.n	803f302 <_vfiprintf_r+0x96>
 803f30e:	ebba 0b04 	subs.w	fp, sl, r4
 803f312:	d00b      	beq.n	803f32c <_vfiprintf_r+0xc0>
 803f314:	465b      	mov	r3, fp
 803f316:	4622      	mov	r2, r4
 803f318:	4629      	mov	r1, r5
 803f31a:	4630      	mov	r0, r6
 803f31c:	f7ff ff93 	bl	803f246 <__sfputs_r>
 803f320:	3001      	adds	r0, #1
 803f322:	f000 80aa 	beq.w	803f47a <_vfiprintf_r+0x20e>
 803f326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803f328:	445a      	add	r2, fp
 803f32a:	9209      	str	r2, [sp, #36]	; 0x24
 803f32c:	f89a 3000 	ldrb.w	r3, [sl]
 803f330:	2b00      	cmp	r3, #0
 803f332:	f000 80a2 	beq.w	803f47a <_vfiprintf_r+0x20e>
 803f336:	2300      	movs	r3, #0
 803f338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803f33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803f340:	f10a 0a01 	add.w	sl, sl, #1
 803f344:	9304      	str	r3, [sp, #16]
 803f346:	9307      	str	r3, [sp, #28]
 803f348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803f34c:	931a      	str	r3, [sp, #104]	; 0x68
 803f34e:	4654      	mov	r4, sl
 803f350:	2205      	movs	r2, #5
 803f352:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f356:	4858      	ldr	r0, [pc, #352]	; (803f4b8 <_vfiprintf_r+0x24c>)
 803f358:	f7e0 ffc2 	bl	80202e0 <memchr>
 803f35c:	9a04      	ldr	r2, [sp, #16]
 803f35e:	b9d8      	cbnz	r0, 803f398 <_vfiprintf_r+0x12c>
 803f360:	06d1      	lsls	r1, r2, #27
 803f362:	bf44      	itt	mi
 803f364:	2320      	movmi	r3, #32
 803f366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803f36a:	0713      	lsls	r3, r2, #28
 803f36c:	bf44      	itt	mi
 803f36e:	232b      	movmi	r3, #43	; 0x2b
 803f370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803f374:	f89a 3000 	ldrb.w	r3, [sl]
 803f378:	2b2a      	cmp	r3, #42	; 0x2a
 803f37a:	d015      	beq.n	803f3a8 <_vfiprintf_r+0x13c>
 803f37c:	9a07      	ldr	r2, [sp, #28]
 803f37e:	4654      	mov	r4, sl
 803f380:	2000      	movs	r0, #0
 803f382:	f04f 0c0a 	mov.w	ip, #10
 803f386:	4621      	mov	r1, r4
 803f388:	f811 3b01 	ldrb.w	r3, [r1], #1
 803f38c:	3b30      	subs	r3, #48	; 0x30
 803f38e:	2b09      	cmp	r3, #9
 803f390:	d94e      	bls.n	803f430 <_vfiprintf_r+0x1c4>
 803f392:	b1b0      	cbz	r0, 803f3c2 <_vfiprintf_r+0x156>
 803f394:	9207      	str	r2, [sp, #28]
 803f396:	e014      	b.n	803f3c2 <_vfiprintf_r+0x156>
 803f398:	eba0 0308 	sub.w	r3, r0, r8
 803f39c:	fa09 f303 	lsl.w	r3, r9, r3
 803f3a0:	4313      	orrs	r3, r2
 803f3a2:	9304      	str	r3, [sp, #16]
 803f3a4:	46a2      	mov	sl, r4
 803f3a6:	e7d2      	b.n	803f34e <_vfiprintf_r+0xe2>
 803f3a8:	9b03      	ldr	r3, [sp, #12]
 803f3aa:	1d19      	adds	r1, r3, #4
 803f3ac:	681b      	ldr	r3, [r3, #0]
 803f3ae:	9103      	str	r1, [sp, #12]
 803f3b0:	2b00      	cmp	r3, #0
 803f3b2:	bfbb      	ittet	lt
 803f3b4:	425b      	neglt	r3, r3
 803f3b6:	f042 0202 	orrlt.w	r2, r2, #2
 803f3ba:	9307      	strge	r3, [sp, #28]
 803f3bc:	9307      	strlt	r3, [sp, #28]
 803f3be:	bfb8      	it	lt
 803f3c0:	9204      	strlt	r2, [sp, #16]
 803f3c2:	7823      	ldrb	r3, [r4, #0]
 803f3c4:	2b2e      	cmp	r3, #46	; 0x2e
 803f3c6:	d10c      	bne.n	803f3e2 <_vfiprintf_r+0x176>
 803f3c8:	7863      	ldrb	r3, [r4, #1]
 803f3ca:	2b2a      	cmp	r3, #42	; 0x2a
 803f3cc:	d135      	bne.n	803f43a <_vfiprintf_r+0x1ce>
 803f3ce:	9b03      	ldr	r3, [sp, #12]
 803f3d0:	1d1a      	adds	r2, r3, #4
 803f3d2:	681b      	ldr	r3, [r3, #0]
 803f3d4:	9203      	str	r2, [sp, #12]
 803f3d6:	2b00      	cmp	r3, #0
 803f3d8:	bfb8      	it	lt
 803f3da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803f3de:	3402      	adds	r4, #2
 803f3e0:	9305      	str	r3, [sp, #20]
 803f3e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803f4c8 <_vfiprintf_r+0x25c>
 803f3e6:	7821      	ldrb	r1, [r4, #0]
 803f3e8:	2203      	movs	r2, #3
 803f3ea:	4650      	mov	r0, sl
 803f3ec:	f7e0 ff78 	bl	80202e0 <memchr>
 803f3f0:	b140      	cbz	r0, 803f404 <_vfiprintf_r+0x198>
 803f3f2:	2340      	movs	r3, #64	; 0x40
 803f3f4:	eba0 000a 	sub.w	r0, r0, sl
 803f3f8:	fa03 f000 	lsl.w	r0, r3, r0
 803f3fc:	9b04      	ldr	r3, [sp, #16]
 803f3fe:	4303      	orrs	r3, r0
 803f400:	3401      	adds	r4, #1
 803f402:	9304      	str	r3, [sp, #16]
 803f404:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f408:	482c      	ldr	r0, [pc, #176]	; (803f4bc <_vfiprintf_r+0x250>)
 803f40a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803f40e:	2206      	movs	r2, #6
 803f410:	f7e0 ff66 	bl	80202e0 <memchr>
 803f414:	2800      	cmp	r0, #0
 803f416:	d03f      	beq.n	803f498 <_vfiprintf_r+0x22c>
 803f418:	4b29      	ldr	r3, [pc, #164]	; (803f4c0 <_vfiprintf_r+0x254>)
 803f41a:	bb1b      	cbnz	r3, 803f464 <_vfiprintf_r+0x1f8>
 803f41c:	9b03      	ldr	r3, [sp, #12]
 803f41e:	3307      	adds	r3, #7
 803f420:	f023 0307 	bic.w	r3, r3, #7
 803f424:	3308      	adds	r3, #8
 803f426:	9303      	str	r3, [sp, #12]
 803f428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803f42a:	443b      	add	r3, r7
 803f42c:	9309      	str	r3, [sp, #36]	; 0x24
 803f42e:	e767      	b.n	803f300 <_vfiprintf_r+0x94>
 803f430:	fb0c 3202 	mla	r2, ip, r2, r3
 803f434:	460c      	mov	r4, r1
 803f436:	2001      	movs	r0, #1
 803f438:	e7a5      	b.n	803f386 <_vfiprintf_r+0x11a>
 803f43a:	2300      	movs	r3, #0
 803f43c:	3401      	adds	r4, #1
 803f43e:	9305      	str	r3, [sp, #20]
 803f440:	4619      	mov	r1, r3
 803f442:	f04f 0c0a 	mov.w	ip, #10
 803f446:	4620      	mov	r0, r4
 803f448:	f810 2b01 	ldrb.w	r2, [r0], #1
 803f44c:	3a30      	subs	r2, #48	; 0x30
 803f44e:	2a09      	cmp	r2, #9
 803f450:	d903      	bls.n	803f45a <_vfiprintf_r+0x1ee>
 803f452:	2b00      	cmp	r3, #0
 803f454:	d0c5      	beq.n	803f3e2 <_vfiprintf_r+0x176>
 803f456:	9105      	str	r1, [sp, #20]
 803f458:	e7c3      	b.n	803f3e2 <_vfiprintf_r+0x176>
 803f45a:	fb0c 2101 	mla	r1, ip, r1, r2
 803f45e:	4604      	mov	r4, r0
 803f460:	2301      	movs	r3, #1
 803f462:	e7f0      	b.n	803f446 <_vfiprintf_r+0x1da>
 803f464:	ab03      	add	r3, sp, #12
 803f466:	9300      	str	r3, [sp, #0]
 803f468:	462a      	mov	r2, r5
 803f46a:	4b16      	ldr	r3, [pc, #88]	; (803f4c4 <_vfiprintf_r+0x258>)
 803f46c:	a904      	add	r1, sp, #16
 803f46e:	4630      	mov	r0, r6
 803f470:	f3af 8000 	nop.w
 803f474:	4607      	mov	r7, r0
 803f476:	1c78      	adds	r0, r7, #1
 803f478:	d1d6      	bne.n	803f428 <_vfiprintf_r+0x1bc>
 803f47a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803f47c:	07d9      	lsls	r1, r3, #31
 803f47e:	d405      	bmi.n	803f48c <_vfiprintf_r+0x220>
 803f480:	89ab      	ldrh	r3, [r5, #12]
 803f482:	059a      	lsls	r2, r3, #22
 803f484:	d402      	bmi.n	803f48c <_vfiprintf_r+0x220>
 803f486:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803f488:	f000 fc81 	bl	803fd8e <__retarget_lock_release_recursive>
 803f48c:	89ab      	ldrh	r3, [r5, #12]
 803f48e:	065b      	lsls	r3, r3, #25
 803f490:	f53f af12 	bmi.w	803f2b8 <_vfiprintf_r+0x4c>
 803f494:	9809      	ldr	r0, [sp, #36]	; 0x24
 803f496:	e711      	b.n	803f2bc <_vfiprintf_r+0x50>
 803f498:	ab03      	add	r3, sp, #12
 803f49a:	9300      	str	r3, [sp, #0]
 803f49c:	462a      	mov	r2, r5
 803f49e:	4b09      	ldr	r3, [pc, #36]	; (803f4c4 <_vfiprintf_r+0x258>)
 803f4a0:	a904      	add	r1, sp, #16
 803f4a2:	4630      	mov	r0, r6
 803f4a4:	f000 f880 	bl	803f5a8 <_printf_i>
 803f4a8:	e7e4      	b.n	803f474 <_vfiprintf_r+0x208>
 803f4aa:	bf00      	nop
 803f4ac:	0805b344 	.word	0x0805b344
 803f4b0:	0805b364 	.word	0x0805b364
 803f4b4:	0805b324 	.word	0x0805b324
 803f4b8:	0805b2f0 	.word	0x0805b2f0
 803f4bc:	0805b2fa 	.word	0x0805b2fa
 803f4c0:	00000000 	.word	0x00000000
 803f4c4:	0803f247 	.word	0x0803f247
 803f4c8:	0805b2f6 	.word	0x0805b2f6

0803f4cc <_printf_common>:
 803f4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803f4d0:	4616      	mov	r6, r2
 803f4d2:	4699      	mov	r9, r3
 803f4d4:	688a      	ldr	r2, [r1, #8]
 803f4d6:	690b      	ldr	r3, [r1, #16]
 803f4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803f4dc:	4293      	cmp	r3, r2
 803f4de:	bfb8      	it	lt
 803f4e0:	4613      	movlt	r3, r2
 803f4e2:	6033      	str	r3, [r6, #0]
 803f4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803f4e8:	4607      	mov	r7, r0
 803f4ea:	460c      	mov	r4, r1
 803f4ec:	b10a      	cbz	r2, 803f4f2 <_printf_common+0x26>
 803f4ee:	3301      	adds	r3, #1
 803f4f0:	6033      	str	r3, [r6, #0]
 803f4f2:	6823      	ldr	r3, [r4, #0]
 803f4f4:	0699      	lsls	r1, r3, #26
 803f4f6:	bf42      	ittt	mi
 803f4f8:	6833      	ldrmi	r3, [r6, #0]
 803f4fa:	3302      	addmi	r3, #2
 803f4fc:	6033      	strmi	r3, [r6, #0]
 803f4fe:	6825      	ldr	r5, [r4, #0]
 803f500:	f015 0506 	ands.w	r5, r5, #6
 803f504:	d106      	bne.n	803f514 <_printf_common+0x48>
 803f506:	f104 0a19 	add.w	sl, r4, #25
 803f50a:	68e3      	ldr	r3, [r4, #12]
 803f50c:	6832      	ldr	r2, [r6, #0]
 803f50e:	1a9b      	subs	r3, r3, r2
 803f510:	42ab      	cmp	r3, r5
 803f512:	dc26      	bgt.n	803f562 <_printf_common+0x96>
 803f514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803f518:	1e13      	subs	r3, r2, #0
 803f51a:	6822      	ldr	r2, [r4, #0]
 803f51c:	bf18      	it	ne
 803f51e:	2301      	movne	r3, #1
 803f520:	0692      	lsls	r2, r2, #26
 803f522:	d42b      	bmi.n	803f57c <_printf_common+0xb0>
 803f524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803f528:	4649      	mov	r1, r9
 803f52a:	4638      	mov	r0, r7
 803f52c:	47c0      	blx	r8
 803f52e:	3001      	adds	r0, #1
 803f530:	d01e      	beq.n	803f570 <_printf_common+0xa4>
 803f532:	6823      	ldr	r3, [r4, #0]
 803f534:	68e5      	ldr	r5, [r4, #12]
 803f536:	6832      	ldr	r2, [r6, #0]
 803f538:	f003 0306 	and.w	r3, r3, #6
 803f53c:	2b04      	cmp	r3, #4
 803f53e:	bf08      	it	eq
 803f540:	1aad      	subeq	r5, r5, r2
 803f542:	68a3      	ldr	r3, [r4, #8]
 803f544:	6922      	ldr	r2, [r4, #16]
 803f546:	bf0c      	ite	eq
 803f548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803f54c:	2500      	movne	r5, #0
 803f54e:	4293      	cmp	r3, r2
 803f550:	bfc4      	itt	gt
 803f552:	1a9b      	subgt	r3, r3, r2
 803f554:	18ed      	addgt	r5, r5, r3
 803f556:	2600      	movs	r6, #0
 803f558:	341a      	adds	r4, #26
 803f55a:	42b5      	cmp	r5, r6
 803f55c:	d11a      	bne.n	803f594 <_printf_common+0xc8>
 803f55e:	2000      	movs	r0, #0
 803f560:	e008      	b.n	803f574 <_printf_common+0xa8>
 803f562:	2301      	movs	r3, #1
 803f564:	4652      	mov	r2, sl
 803f566:	4649      	mov	r1, r9
 803f568:	4638      	mov	r0, r7
 803f56a:	47c0      	blx	r8
 803f56c:	3001      	adds	r0, #1
 803f56e:	d103      	bne.n	803f578 <_printf_common+0xac>
 803f570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803f574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803f578:	3501      	adds	r5, #1
 803f57a:	e7c6      	b.n	803f50a <_printf_common+0x3e>
 803f57c:	18e1      	adds	r1, r4, r3
 803f57e:	1c5a      	adds	r2, r3, #1
 803f580:	2030      	movs	r0, #48	; 0x30
 803f582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803f586:	4422      	add	r2, r4
 803f588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803f58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803f590:	3302      	adds	r3, #2
 803f592:	e7c7      	b.n	803f524 <_printf_common+0x58>
 803f594:	2301      	movs	r3, #1
 803f596:	4622      	mov	r2, r4
 803f598:	4649      	mov	r1, r9
 803f59a:	4638      	mov	r0, r7
 803f59c:	47c0      	blx	r8
 803f59e:	3001      	adds	r0, #1
 803f5a0:	d0e6      	beq.n	803f570 <_printf_common+0xa4>
 803f5a2:	3601      	adds	r6, #1
 803f5a4:	e7d9      	b.n	803f55a <_printf_common+0x8e>
	...

0803f5a8 <_printf_i>:
 803f5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803f5ac:	7e0f      	ldrb	r7, [r1, #24]
 803f5ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803f5b0:	2f78      	cmp	r7, #120	; 0x78
 803f5b2:	4691      	mov	r9, r2
 803f5b4:	4680      	mov	r8, r0
 803f5b6:	460c      	mov	r4, r1
 803f5b8:	469a      	mov	sl, r3
 803f5ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803f5be:	d807      	bhi.n	803f5d0 <_printf_i+0x28>
 803f5c0:	2f62      	cmp	r7, #98	; 0x62
 803f5c2:	d80a      	bhi.n	803f5da <_printf_i+0x32>
 803f5c4:	2f00      	cmp	r7, #0
 803f5c6:	f000 80d8 	beq.w	803f77a <_printf_i+0x1d2>
 803f5ca:	2f58      	cmp	r7, #88	; 0x58
 803f5cc:	f000 80a3 	beq.w	803f716 <_printf_i+0x16e>
 803f5d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803f5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803f5d8:	e03a      	b.n	803f650 <_printf_i+0xa8>
 803f5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803f5de:	2b15      	cmp	r3, #21
 803f5e0:	d8f6      	bhi.n	803f5d0 <_printf_i+0x28>
 803f5e2:	a101      	add	r1, pc, #4	; (adr r1, 803f5e8 <_printf_i+0x40>)
 803f5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803f5e8:	0803f641 	.word	0x0803f641
 803f5ec:	0803f655 	.word	0x0803f655
 803f5f0:	0803f5d1 	.word	0x0803f5d1
 803f5f4:	0803f5d1 	.word	0x0803f5d1
 803f5f8:	0803f5d1 	.word	0x0803f5d1
 803f5fc:	0803f5d1 	.word	0x0803f5d1
 803f600:	0803f655 	.word	0x0803f655
 803f604:	0803f5d1 	.word	0x0803f5d1
 803f608:	0803f5d1 	.word	0x0803f5d1
 803f60c:	0803f5d1 	.word	0x0803f5d1
 803f610:	0803f5d1 	.word	0x0803f5d1
 803f614:	0803f761 	.word	0x0803f761
 803f618:	0803f685 	.word	0x0803f685
 803f61c:	0803f743 	.word	0x0803f743
 803f620:	0803f5d1 	.word	0x0803f5d1
 803f624:	0803f5d1 	.word	0x0803f5d1
 803f628:	0803f783 	.word	0x0803f783
 803f62c:	0803f5d1 	.word	0x0803f5d1
 803f630:	0803f685 	.word	0x0803f685
 803f634:	0803f5d1 	.word	0x0803f5d1
 803f638:	0803f5d1 	.word	0x0803f5d1
 803f63c:	0803f74b 	.word	0x0803f74b
 803f640:	682b      	ldr	r3, [r5, #0]
 803f642:	1d1a      	adds	r2, r3, #4
 803f644:	681b      	ldr	r3, [r3, #0]
 803f646:	602a      	str	r2, [r5, #0]
 803f648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803f64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803f650:	2301      	movs	r3, #1
 803f652:	e0a3      	b.n	803f79c <_printf_i+0x1f4>
 803f654:	6820      	ldr	r0, [r4, #0]
 803f656:	6829      	ldr	r1, [r5, #0]
 803f658:	0606      	lsls	r6, r0, #24
 803f65a:	f101 0304 	add.w	r3, r1, #4
 803f65e:	d50a      	bpl.n	803f676 <_printf_i+0xce>
 803f660:	680e      	ldr	r6, [r1, #0]
 803f662:	602b      	str	r3, [r5, #0]
 803f664:	2e00      	cmp	r6, #0
 803f666:	da03      	bge.n	803f670 <_printf_i+0xc8>
 803f668:	232d      	movs	r3, #45	; 0x2d
 803f66a:	4276      	negs	r6, r6
 803f66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803f670:	485e      	ldr	r0, [pc, #376]	; (803f7ec <_printf_i+0x244>)
 803f672:	230a      	movs	r3, #10
 803f674:	e019      	b.n	803f6aa <_printf_i+0x102>
 803f676:	680e      	ldr	r6, [r1, #0]
 803f678:	602b      	str	r3, [r5, #0]
 803f67a:	f010 0f40 	tst.w	r0, #64	; 0x40
 803f67e:	bf18      	it	ne
 803f680:	b236      	sxthne	r6, r6
 803f682:	e7ef      	b.n	803f664 <_printf_i+0xbc>
 803f684:	682b      	ldr	r3, [r5, #0]
 803f686:	6820      	ldr	r0, [r4, #0]
 803f688:	1d19      	adds	r1, r3, #4
 803f68a:	6029      	str	r1, [r5, #0]
 803f68c:	0601      	lsls	r1, r0, #24
 803f68e:	d501      	bpl.n	803f694 <_printf_i+0xec>
 803f690:	681e      	ldr	r6, [r3, #0]
 803f692:	e002      	b.n	803f69a <_printf_i+0xf2>
 803f694:	0646      	lsls	r6, r0, #25
 803f696:	d5fb      	bpl.n	803f690 <_printf_i+0xe8>
 803f698:	881e      	ldrh	r6, [r3, #0]
 803f69a:	4854      	ldr	r0, [pc, #336]	; (803f7ec <_printf_i+0x244>)
 803f69c:	2f6f      	cmp	r7, #111	; 0x6f
 803f69e:	bf0c      	ite	eq
 803f6a0:	2308      	moveq	r3, #8
 803f6a2:	230a      	movne	r3, #10
 803f6a4:	2100      	movs	r1, #0
 803f6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803f6aa:	6865      	ldr	r5, [r4, #4]
 803f6ac:	60a5      	str	r5, [r4, #8]
 803f6ae:	2d00      	cmp	r5, #0
 803f6b0:	bfa2      	ittt	ge
 803f6b2:	6821      	ldrge	r1, [r4, #0]
 803f6b4:	f021 0104 	bicge.w	r1, r1, #4
 803f6b8:	6021      	strge	r1, [r4, #0]
 803f6ba:	b90e      	cbnz	r6, 803f6c0 <_printf_i+0x118>
 803f6bc:	2d00      	cmp	r5, #0
 803f6be:	d04d      	beq.n	803f75c <_printf_i+0x1b4>
 803f6c0:	4615      	mov	r5, r2
 803f6c2:	fbb6 f1f3 	udiv	r1, r6, r3
 803f6c6:	fb03 6711 	mls	r7, r3, r1, r6
 803f6ca:	5dc7      	ldrb	r7, [r0, r7]
 803f6cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803f6d0:	4637      	mov	r7, r6
 803f6d2:	42bb      	cmp	r3, r7
 803f6d4:	460e      	mov	r6, r1
 803f6d6:	d9f4      	bls.n	803f6c2 <_printf_i+0x11a>
 803f6d8:	2b08      	cmp	r3, #8
 803f6da:	d10b      	bne.n	803f6f4 <_printf_i+0x14c>
 803f6dc:	6823      	ldr	r3, [r4, #0]
 803f6de:	07de      	lsls	r6, r3, #31
 803f6e0:	d508      	bpl.n	803f6f4 <_printf_i+0x14c>
 803f6e2:	6923      	ldr	r3, [r4, #16]
 803f6e4:	6861      	ldr	r1, [r4, #4]
 803f6e6:	4299      	cmp	r1, r3
 803f6e8:	bfde      	ittt	le
 803f6ea:	2330      	movle	r3, #48	; 0x30
 803f6ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 803f6f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803f6f4:	1b52      	subs	r2, r2, r5
 803f6f6:	6122      	str	r2, [r4, #16]
 803f6f8:	f8cd a000 	str.w	sl, [sp]
 803f6fc:	464b      	mov	r3, r9
 803f6fe:	aa03      	add	r2, sp, #12
 803f700:	4621      	mov	r1, r4
 803f702:	4640      	mov	r0, r8
 803f704:	f7ff fee2 	bl	803f4cc <_printf_common>
 803f708:	3001      	adds	r0, #1
 803f70a:	d14c      	bne.n	803f7a6 <_printf_i+0x1fe>
 803f70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803f710:	b004      	add	sp, #16
 803f712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803f716:	4835      	ldr	r0, [pc, #212]	; (803f7ec <_printf_i+0x244>)
 803f718:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803f71c:	6829      	ldr	r1, [r5, #0]
 803f71e:	6823      	ldr	r3, [r4, #0]
 803f720:	f851 6b04 	ldr.w	r6, [r1], #4
 803f724:	6029      	str	r1, [r5, #0]
 803f726:	061d      	lsls	r5, r3, #24
 803f728:	d514      	bpl.n	803f754 <_printf_i+0x1ac>
 803f72a:	07df      	lsls	r7, r3, #31
 803f72c:	bf44      	itt	mi
 803f72e:	f043 0320 	orrmi.w	r3, r3, #32
 803f732:	6023      	strmi	r3, [r4, #0]
 803f734:	b91e      	cbnz	r6, 803f73e <_printf_i+0x196>
 803f736:	6823      	ldr	r3, [r4, #0]
 803f738:	f023 0320 	bic.w	r3, r3, #32
 803f73c:	6023      	str	r3, [r4, #0]
 803f73e:	2310      	movs	r3, #16
 803f740:	e7b0      	b.n	803f6a4 <_printf_i+0xfc>
 803f742:	6823      	ldr	r3, [r4, #0]
 803f744:	f043 0320 	orr.w	r3, r3, #32
 803f748:	6023      	str	r3, [r4, #0]
 803f74a:	2378      	movs	r3, #120	; 0x78
 803f74c:	4828      	ldr	r0, [pc, #160]	; (803f7f0 <_printf_i+0x248>)
 803f74e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803f752:	e7e3      	b.n	803f71c <_printf_i+0x174>
 803f754:	0659      	lsls	r1, r3, #25
 803f756:	bf48      	it	mi
 803f758:	b2b6      	uxthmi	r6, r6
 803f75a:	e7e6      	b.n	803f72a <_printf_i+0x182>
 803f75c:	4615      	mov	r5, r2
 803f75e:	e7bb      	b.n	803f6d8 <_printf_i+0x130>
 803f760:	682b      	ldr	r3, [r5, #0]
 803f762:	6826      	ldr	r6, [r4, #0]
 803f764:	6961      	ldr	r1, [r4, #20]
 803f766:	1d18      	adds	r0, r3, #4
 803f768:	6028      	str	r0, [r5, #0]
 803f76a:	0635      	lsls	r5, r6, #24
 803f76c:	681b      	ldr	r3, [r3, #0]
 803f76e:	d501      	bpl.n	803f774 <_printf_i+0x1cc>
 803f770:	6019      	str	r1, [r3, #0]
 803f772:	e002      	b.n	803f77a <_printf_i+0x1d2>
 803f774:	0670      	lsls	r0, r6, #25
 803f776:	d5fb      	bpl.n	803f770 <_printf_i+0x1c8>
 803f778:	8019      	strh	r1, [r3, #0]
 803f77a:	2300      	movs	r3, #0
 803f77c:	6123      	str	r3, [r4, #16]
 803f77e:	4615      	mov	r5, r2
 803f780:	e7ba      	b.n	803f6f8 <_printf_i+0x150>
 803f782:	682b      	ldr	r3, [r5, #0]
 803f784:	1d1a      	adds	r2, r3, #4
 803f786:	602a      	str	r2, [r5, #0]
 803f788:	681d      	ldr	r5, [r3, #0]
 803f78a:	6862      	ldr	r2, [r4, #4]
 803f78c:	2100      	movs	r1, #0
 803f78e:	4628      	mov	r0, r5
 803f790:	f7e0 fda6 	bl	80202e0 <memchr>
 803f794:	b108      	cbz	r0, 803f79a <_printf_i+0x1f2>
 803f796:	1b40      	subs	r0, r0, r5
 803f798:	6060      	str	r0, [r4, #4]
 803f79a:	6863      	ldr	r3, [r4, #4]
 803f79c:	6123      	str	r3, [r4, #16]
 803f79e:	2300      	movs	r3, #0
 803f7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803f7a4:	e7a8      	b.n	803f6f8 <_printf_i+0x150>
 803f7a6:	6923      	ldr	r3, [r4, #16]
 803f7a8:	462a      	mov	r2, r5
 803f7aa:	4649      	mov	r1, r9
 803f7ac:	4640      	mov	r0, r8
 803f7ae:	47d0      	blx	sl
 803f7b0:	3001      	adds	r0, #1
 803f7b2:	d0ab      	beq.n	803f70c <_printf_i+0x164>
 803f7b4:	6823      	ldr	r3, [r4, #0]
 803f7b6:	079b      	lsls	r3, r3, #30
 803f7b8:	d413      	bmi.n	803f7e2 <_printf_i+0x23a>
 803f7ba:	68e0      	ldr	r0, [r4, #12]
 803f7bc:	9b03      	ldr	r3, [sp, #12]
 803f7be:	4298      	cmp	r0, r3
 803f7c0:	bfb8      	it	lt
 803f7c2:	4618      	movlt	r0, r3
 803f7c4:	e7a4      	b.n	803f710 <_printf_i+0x168>
 803f7c6:	2301      	movs	r3, #1
 803f7c8:	4632      	mov	r2, r6
 803f7ca:	4649      	mov	r1, r9
 803f7cc:	4640      	mov	r0, r8
 803f7ce:	47d0      	blx	sl
 803f7d0:	3001      	adds	r0, #1
 803f7d2:	d09b      	beq.n	803f70c <_printf_i+0x164>
 803f7d4:	3501      	adds	r5, #1
 803f7d6:	68e3      	ldr	r3, [r4, #12]
 803f7d8:	9903      	ldr	r1, [sp, #12]
 803f7da:	1a5b      	subs	r3, r3, r1
 803f7dc:	42ab      	cmp	r3, r5
 803f7de:	dcf2      	bgt.n	803f7c6 <_printf_i+0x21e>
 803f7e0:	e7eb      	b.n	803f7ba <_printf_i+0x212>
 803f7e2:	2500      	movs	r5, #0
 803f7e4:	f104 0619 	add.w	r6, r4, #25
 803f7e8:	e7f5      	b.n	803f7d6 <_printf_i+0x22e>
 803f7ea:	bf00      	nop
 803f7ec:	0805b301 	.word	0x0805b301
 803f7f0:	0805b312 	.word	0x0805b312

0803f7f4 <_sbrk_r>:
 803f7f4:	b538      	push	{r3, r4, r5, lr}
 803f7f6:	4d06      	ldr	r5, [pc, #24]	; (803f810 <_sbrk_r+0x1c>)
 803f7f8:	2300      	movs	r3, #0
 803f7fa:	4604      	mov	r4, r0
 803f7fc:	4608      	mov	r0, r1
 803f7fe:	602b      	str	r3, [r5, #0]
 803f800:	f7ed fd16 	bl	802d230 <_sbrk>
 803f804:	1c43      	adds	r3, r0, #1
 803f806:	d102      	bne.n	803f80e <_sbrk_r+0x1a>
 803f808:	682b      	ldr	r3, [r5, #0]
 803f80a:	b103      	cbz	r3, 803f80e <_sbrk_r+0x1a>
 803f80c:	6023      	str	r3, [r4, #0]
 803f80e:	bd38      	pop	{r3, r4, r5, pc}
 803f810:	240037ec 	.word	0x240037ec

0803f814 <_raise_r>:
 803f814:	291f      	cmp	r1, #31
 803f816:	b538      	push	{r3, r4, r5, lr}
 803f818:	4604      	mov	r4, r0
 803f81a:	460d      	mov	r5, r1
 803f81c:	d904      	bls.n	803f828 <_raise_r+0x14>
 803f81e:	2316      	movs	r3, #22
 803f820:	6003      	str	r3, [r0, #0]
 803f822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803f826:	bd38      	pop	{r3, r4, r5, pc}
 803f828:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803f82a:	b112      	cbz	r2, 803f832 <_raise_r+0x1e>
 803f82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803f830:	b94b      	cbnz	r3, 803f846 <_raise_r+0x32>
 803f832:	4620      	mov	r0, r4
 803f834:	f000 f830 	bl	803f898 <_getpid_r>
 803f838:	462a      	mov	r2, r5
 803f83a:	4601      	mov	r1, r0
 803f83c:	4620      	mov	r0, r4
 803f83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803f842:	f000 b817 	b.w	803f874 <_kill_r>
 803f846:	2b01      	cmp	r3, #1
 803f848:	d00a      	beq.n	803f860 <_raise_r+0x4c>
 803f84a:	1c59      	adds	r1, r3, #1
 803f84c:	d103      	bne.n	803f856 <_raise_r+0x42>
 803f84e:	2316      	movs	r3, #22
 803f850:	6003      	str	r3, [r0, #0]
 803f852:	2001      	movs	r0, #1
 803f854:	e7e7      	b.n	803f826 <_raise_r+0x12>
 803f856:	2400      	movs	r4, #0
 803f858:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803f85c:	4628      	mov	r0, r5
 803f85e:	4798      	blx	r3
 803f860:	2000      	movs	r0, #0
 803f862:	e7e0      	b.n	803f826 <_raise_r+0x12>

0803f864 <raise>:
 803f864:	4b02      	ldr	r3, [pc, #8]	; (803f870 <raise+0xc>)
 803f866:	4601      	mov	r1, r0
 803f868:	6818      	ldr	r0, [r3, #0]
 803f86a:	f7ff bfd3 	b.w	803f814 <_raise_r>
 803f86e:	bf00      	nop
 803f870:	24000104 	.word	0x24000104

0803f874 <_kill_r>:
 803f874:	b538      	push	{r3, r4, r5, lr}
 803f876:	4d07      	ldr	r5, [pc, #28]	; (803f894 <_kill_r+0x20>)
 803f878:	2300      	movs	r3, #0
 803f87a:	4604      	mov	r4, r0
 803f87c:	4608      	mov	r0, r1
 803f87e:	4611      	mov	r1, r2
 803f880:	602b      	str	r3, [r5, #0]
 803f882:	f7ed fc4d 	bl	802d120 <_kill>
 803f886:	1c43      	adds	r3, r0, #1
 803f888:	d102      	bne.n	803f890 <_kill_r+0x1c>
 803f88a:	682b      	ldr	r3, [r5, #0]
 803f88c:	b103      	cbz	r3, 803f890 <_kill_r+0x1c>
 803f88e:	6023      	str	r3, [r4, #0]
 803f890:	bd38      	pop	{r3, r4, r5, pc}
 803f892:	bf00      	nop
 803f894:	240037ec 	.word	0x240037ec

0803f898 <_getpid_r>:
 803f898:	f7ed bc3a 	b.w	802d110 <_getpid>

0803f89c <__swbuf_r>:
 803f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f89e:	460e      	mov	r6, r1
 803f8a0:	4614      	mov	r4, r2
 803f8a2:	4605      	mov	r5, r0
 803f8a4:	b118      	cbz	r0, 803f8ae <__swbuf_r+0x12>
 803f8a6:	6983      	ldr	r3, [r0, #24]
 803f8a8:	b90b      	cbnz	r3, 803f8ae <__swbuf_r+0x12>
 803f8aa:	f000 f9d1 	bl	803fc50 <__sinit>
 803f8ae:	4b21      	ldr	r3, [pc, #132]	; (803f934 <__swbuf_r+0x98>)
 803f8b0:	429c      	cmp	r4, r3
 803f8b2:	d12b      	bne.n	803f90c <__swbuf_r+0x70>
 803f8b4:	686c      	ldr	r4, [r5, #4]
 803f8b6:	69a3      	ldr	r3, [r4, #24]
 803f8b8:	60a3      	str	r3, [r4, #8]
 803f8ba:	89a3      	ldrh	r3, [r4, #12]
 803f8bc:	071a      	lsls	r2, r3, #28
 803f8be:	d52f      	bpl.n	803f920 <__swbuf_r+0x84>
 803f8c0:	6923      	ldr	r3, [r4, #16]
 803f8c2:	b36b      	cbz	r3, 803f920 <__swbuf_r+0x84>
 803f8c4:	6923      	ldr	r3, [r4, #16]
 803f8c6:	6820      	ldr	r0, [r4, #0]
 803f8c8:	1ac0      	subs	r0, r0, r3
 803f8ca:	6963      	ldr	r3, [r4, #20]
 803f8cc:	b2f6      	uxtb	r6, r6
 803f8ce:	4283      	cmp	r3, r0
 803f8d0:	4637      	mov	r7, r6
 803f8d2:	dc04      	bgt.n	803f8de <__swbuf_r+0x42>
 803f8d4:	4621      	mov	r1, r4
 803f8d6:	4628      	mov	r0, r5
 803f8d8:	f000 f926 	bl	803fb28 <_fflush_r>
 803f8dc:	bb30      	cbnz	r0, 803f92c <__swbuf_r+0x90>
 803f8de:	68a3      	ldr	r3, [r4, #8]
 803f8e0:	3b01      	subs	r3, #1
 803f8e2:	60a3      	str	r3, [r4, #8]
 803f8e4:	6823      	ldr	r3, [r4, #0]
 803f8e6:	1c5a      	adds	r2, r3, #1
 803f8e8:	6022      	str	r2, [r4, #0]
 803f8ea:	701e      	strb	r6, [r3, #0]
 803f8ec:	6963      	ldr	r3, [r4, #20]
 803f8ee:	3001      	adds	r0, #1
 803f8f0:	4283      	cmp	r3, r0
 803f8f2:	d004      	beq.n	803f8fe <__swbuf_r+0x62>
 803f8f4:	89a3      	ldrh	r3, [r4, #12]
 803f8f6:	07db      	lsls	r3, r3, #31
 803f8f8:	d506      	bpl.n	803f908 <__swbuf_r+0x6c>
 803f8fa:	2e0a      	cmp	r6, #10
 803f8fc:	d104      	bne.n	803f908 <__swbuf_r+0x6c>
 803f8fe:	4621      	mov	r1, r4
 803f900:	4628      	mov	r0, r5
 803f902:	f000 f911 	bl	803fb28 <_fflush_r>
 803f906:	b988      	cbnz	r0, 803f92c <__swbuf_r+0x90>
 803f908:	4638      	mov	r0, r7
 803f90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803f90c:	4b0a      	ldr	r3, [pc, #40]	; (803f938 <__swbuf_r+0x9c>)
 803f90e:	429c      	cmp	r4, r3
 803f910:	d101      	bne.n	803f916 <__swbuf_r+0x7a>
 803f912:	68ac      	ldr	r4, [r5, #8]
 803f914:	e7cf      	b.n	803f8b6 <__swbuf_r+0x1a>
 803f916:	4b09      	ldr	r3, [pc, #36]	; (803f93c <__swbuf_r+0xa0>)
 803f918:	429c      	cmp	r4, r3
 803f91a:	bf08      	it	eq
 803f91c:	68ec      	ldreq	r4, [r5, #12]
 803f91e:	e7ca      	b.n	803f8b6 <__swbuf_r+0x1a>
 803f920:	4621      	mov	r1, r4
 803f922:	4628      	mov	r0, r5
 803f924:	f000 f80c 	bl	803f940 <__swsetup_r>
 803f928:	2800      	cmp	r0, #0
 803f92a:	d0cb      	beq.n	803f8c4 <__swbuf_r+0x28>
 803f92c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803f930:	e7ea      	b.n	803f908 <__swbuf_r+0x6c>
 803f932:	bf00      	nop
 803f934:	0805b344 	.word	0x0805b344
 803f938:	0805b364 	.word	0x0805b364
 803f93c:	0805b324 	.word	0x0805b324

0803f940 <__swsetup_r>:
 803f940:	4b32      	ldr	r3, [pc, #200]	; (803fa0c <__swsetup_r+0xcc>)
 803f942:	b570      	push	{r4, r5, r6, lr}
 803f944:	681d      	ldr	r5, [r3, #0]
 803f946:	4606      	mov	r6, r0
 803f948:	460c      	mov	r4, r1
 803f94a:	b125      	cbz	r5, 803f956 <__swsetup_r+0x16>
 803f94c:	69ab      	ldr	r3, [r5, #24]
 803f94e:	b913      	cbnz	r3, 803f956 <__swsetup_r+0x16>
 803f950:	4628      	mov	r0, r5
 803f952:	f000 f97d 	bl	803fc50 <__sinit>
 803f956:	4b2e      	ldr	r3, [pc, #184]	; (803fa10 <__swsetup_r+0xd0>)
 803f958:	429c      	cmp	r4, r3
 803f95a:	d10f      	bne.n	803f97c <__swsetup_r+0x3c>
 803f95c:	686c      	ldr	r4, [r5, #4]
 803f95e:	89a3      	ldrh	r3, [r4, #12]
 803f960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803f964:	0719      	lsls	r1, r3, #28
 803f966:	d42c      	bmi.n	803f9c2 <__swsetup_r+0x82>
 803f968:	06dd      	lsls	r5, r3, #27
 803f96a:	d411      	bmi.n	803f990 <__swsetup_r+0x50>
 803f96c:	2309      	movs	r3, #9
 803f96e:	6033      	str	r3, [r6, #0]
 803f970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803f974:	81a3      	strh	r3, [r4, #12]
 803f976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803f97a:	e03e      	b.n	803f9fa <__swsetup_r+0xba>
 803f97c:	4b25      	ldr	r3, [pc, #148]	; (803fa14 <__swsetup_r+0xd4>)
 803f97e:	429c      	cmp	r4, r3
 803f980:	d101      	bne.n	803f986 <__swsetup_r+0x46>
 803f982:	68ac      	ldr	r4, [r5, #8]
 803f984:	e7eb      	b.n	803f95e <__swsetup_r+0x1e>
 803f986:	4b24      	ldr	r3, [pc, #144]	; (803fa18 <__swsetup_r+0xd8>)
 803f988:	429c      	cmp	r4, r3
 803f98a:	bf08      	it	eq
 803f98c:	68ec      	ldreq	r4, [r5, #12]
 803f98e:	e7e6      	b.n	803f95e <__swsetup_r+0x1e>
 803f990:	0758      	lsls	r0, r3, #29
 803f992:	d512      	bpl.n	803f9ba <__swsetup_r+0x7a>
 803f994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803f996:	b141      	cbz	r1, 803f9aa <__swsetup_r+0x6a>
 803f998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803f99c:	4299      	cmp	r1, r3
 803f99e:	d002      	beq.n	803f9a6 <__swsetup_r+0x66>
 803f9a0:	4630      	mov	r0, r6
 803f9a2:	f7ff fb59 	bl	803f058 <_free_r>
 803f9a6:	2300      	movs	r3, #0
 803f9a8:	6363      	str	r3, [r4, #52]	; 0x34
 803f9aa:	89a3      	ldrh	r3, [r4, #12]
 803f9ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803f9b0:	81a3      	strh	r3, [r4, #12]
 803f9b2:	2300      	movs	r3, #0
 803f9b4:	6063      	str	r3, [r4, #4]
 803f9b6:	6923      	ldr	r3, [r4, #16]
 803f9b8:	6023      	str	r3, [r4, #0]
 803f9ba:	89a3      	ldrh	r3, [r4, #12]
 803f9bc:	f043 0308 	orr.w	r3, r3, #8
 803f9c0:	81a3      	strh	r3, [r4, #12]
 803f9c2:	6923      	ldr	r3, [r4, #16]
 803f9c4:	b94b      	cbnz	r3, 803f9da <__swsetup_r+0x9a>
 803f9c6:	89a3      	ldrh	r3, [r4, #12]
 803f9c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803f9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803f9d0:	d003      	beq.n	803f9da <__swsetup_r+0x9a>
 803f9d2:	4621      	mov	r1, r4
 803f9d4:	4630      	mov	r0, r6
 803f9d6:	f000 fa01 	bl	803fddc <__smakebuf_r>
 803f9da:	89a0      	ldrh	r0, [r4, #12]
 803f9dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803f9e0:	f010 0301 	ands.w	r3, r0, #1
 803f9e4:	d00a      	beq.n	803f9fc <__swsetup_r+0xbc>
 803f9e6:	2300      	movs	r3, #0
 803f9e8:	60a3      	str	r3, [r4, #8]
 803f9ea:	6963      	ldr	r3, [r4, #20]
 803f9ec:	425b      	negs	r3, r3
 803f9ee:	61a3      	str	r3, [r4, #24]
 803f9f0:	6923      	ldr	r3, [r4, #16]
 803f9f2:	b943      	cbnz	r3, 803fa06 <__swsetup_r+0xc6>
 803f9f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803f9f8:	d1ba      	bne.n	803f970 <__swsetup_r+0x30>
 803f9fa:	bd70      	pop	{r4, r5, r6, pc}
 803f9fc:	0781      	lsls	r1, r0, #30
 803f9fe:	bf58      	it	pl
 803fa00:	6963      	ldrpl	r3, [r4, #20]
 803fa02:	60a3      	str	r3, [r4, #8]
 803fa04:	e7f4      	b.n	803f9f0 <__swsetup_r+0xb0>
 803fa06:	2000      	movs	r0, #0
 803fa08:	e7f7      	b.n	803f9fa <__swsetup_r+0xba>
 803fa0a:	bf00      	nop
 803fa0c:	24000104 	.word	0x24000104
 803fa10:	0805b344 	.word	0x0805b344
 803fa14:	0805b364 	.word	0x0805b364
 803fa18:	0805b324 	.word	0x0805b324

0803fa1c <__sflush_r>:
 803fa1c:	898a      	ldrh	r2, [r1, #12]
 803fa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803fa22:	4605      	mov	r5, r0
 803fa24:	0710      	lsls	r0, r2, #28
 803fa26:	460c      	mov	r4, r1
 803fa28:	d458      	bmi.n	803fadc <__sflush_r+0xc0>
 803fa2a:	684b      	ldr	r3, [r1, #4]
 803fa2c:	2b00      	cmp	r3, #0
 803fa2e:	dc05      	bgt.n	803fa3c <__sflush_r+0x20>
 803fa30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803fa32:	2b00      	cmp	r3, #0
 803fa34:	dc02      	bgt.n	803fa3c <__sflush_r+0x20>
 803fa36:	2000      	movs	r0, #0
 803fa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803fa3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803fa3e:	2e00      	cmp	r6, #0
 803fa40:	d0f9      	beq.n	803fa36 <__sflush_r+0x1a>
 803fa42:	2300      	movs	r3, #0
 803fa44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803fa48:	682f      	ldr	r7, [r5, #0]
 803fa4a:	602b      	str	r3, [r5, #0]
 803fa4c:	d032      	beq.n	803fab4 <__sflush_r+0x98>
 803fa4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803fa50:	89a3      	ldrh	r3, [r4, #12]
 803fa52:	075a      	lsls	r2, r3, #29
 803fa54:	d505      	bpl.n	803fa62 <__sflush_r+0x46>
 803fa56:	6863      	ldr	r3, [r4, #4]
 803fa58:	1ac0      	subs	r0, r0, r3
 803fa5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803fa5c:	b10b      	cbz	r3, 803fa62 <__sflush_r+0x46>
 803fa5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803fa60:	1ac0      	subs	r0, r0, r3
 803fa62:	2300      	movs	r3, #0
 803fa64:	4602      	mov	r2, r0
 803fa66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803fa68:	6a21      	ldr	r1, [r4, #32]
 803fa6a:	4628      	mov	r0, r5
 803fa6c:	47b0      	blx	r6
 803fa6e:	1c43      	adds	r3, r0, #1
 803fa70:	89a3      	ldrh	r3, [r4, #12]
 803fa72:	d106      	bne.n	803fa82 <__sflush_r+0x66>
 803fa74:	6829      	ldr	r1, [r5, #0]
 803fa76:	291d      	cmp	r1, #29
 803fa78:	d82c      	bhi.n	803fad4 <__sflush_r+0xb8>
 803fa7a:	4a2a      	ldr	r2, [pc, #168]	; (803fb24 <__sflush_r+0x108>)
 803fa7c:	40ca      	lsrs	r2, r1
 803fa7e:	07d6      	lsls	r6, r2, #31
 803fa80:	d528      	bpl.n	803fad4 <__sflush_r+0xb8>
 803fa82:	2200      	movs	r2, #0
 803fa84:	6062      	str	r2, [r4, #4]
 803fa86:	04d9      	lsls	r1, r3, #19
 803fa88:	6922      	ldr	r2, [r4, #16]
 803fa8a:	6022      	str	r2, [r4, #0]
 803fa8c:	d504      	bpl.n	803fa98 <__sflush_r+0x7c>
 803fa8e:	1c42      	adds	r2, r0, #1
 803fa90:	d101      	bne.n	803fa96 <__sflush_r+0x7a>
 803fa92:	682b      	ldr	r3, [r5, #0]
 803fa94:	b903      	cbnz	r3, 803fa98 <__sflush_r+0x7c>
 803fa96:	6560      	str	r0, [r4, #84]	; 0x54
 803fa98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803fa9a:	602f      	str	r7, [r5, #0]
 803fa9c:	2900      	cmp	r1, #0
 803fa9e:	d0ca      	beq.n	803fa36 <__sflush_r+0x1a>
 803faa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803faa4:	4299      	cmp	r1, r3
 803faa6:	d002      	beq.n	803faae <__sflush_r+0x92>
 803faa8:	4628      	mov	r0, r5
 803faaa:	f7ff fad5 	bl	803f058 <_free_r>
 803faae:	2000      	movs	r0, #0
 803fab0:	6360      	str	r0, [r4, #52]	; 0x34
 803fab2:	e7c1      	b.n	803fa38 <__sflush_r+0x1c>
 803fab4:	6a21      	ldr	r1, [r4, #32]
 803fab6:	2301      	movs	r3, #1
 803fab8:	4628      	mov	r0, r5
 803faba:	47b0      	blx	r6
 803fabc:	1c41      	adds	r1, r0, #1
 803fabe:	d1c7      	bne.n	803fa50 <__sflush_r+0x34>
 803fac0:	682b      	ldr	r3, [r5, #0]
 803fac2:	2b00      	cmp	r3, #0
 803fac4:	d0c4      	beq.n	803fa50 <__sflush_r+0x34>
 803fac6:	2b1d      	cmp	r3, #29
 803fac8:	d001      	beq.n	803face <__sflush_r+0xb2>
 803faca:	2b16      	cmp	r3, #22
 803facc:	d101      	bne.n	803fad2 <__sflush_r+0xb6>
 803face:	602f      	str	r7, [r5, #0]
 803fad0:	e7b1      	b.n	803fa36 <__sflush_r+0x1a>
 803fad2:	89a3      	ldrh	r3, [r4, #12]
 803fad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803fad8:	81a3      	strh	r3, [r4, #12]
 803fada:	e7ad      	b.n	803fa38 <__sflush_r+0x1c>
 803fadc:	690f      	ldr	r7, [r1, #16]
 803fade:	2f00      	cmp	r7, #0
 803fae0:	d0a9      	beq.n	803fa36 <__sflush_r+0x1a>
 803fae2:	0793      	lsls	r3, r2, #30
 803fae4:	680e      	ldr	r6, [r1, #0]
 803fae6:	bf08      	it	eq
 803fae8:	694b      	ldreq	r3, [r1, #20]
 803faea:	600f      	str	r7, [r1, #0]
 803faec:	bf18      	it	ne
 803faee:	2300      	movne	r3, #0
 803faf0:	eba6 0807 	sub.w	r8, r6, r7
 803faf4:	608b      	str	r3, [r1, #8]
 803faf6:	f1b8 0f00 	cmp.w	r8, #0
 803fafa:	dd9c      	ble.n	803fa36 <__sflush_r+0x1a>
 803fafc:	6a21      	ldr	r1, [r4, #32]
 803fafe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803fb00:	4643      	mov	r3, r8
 803fb02:	463a      	mov	r2, r7
 803fb04:	4628      	mov	r0, r5
 803fb06:	47b0      	blx	r6
 803fb08:	2800      	cmp	r0, #0
 803fb0a:	dc06      	bgt.n	803fb1a <__sflush_r+0xfe>
 803fb0c:	89a3      	ldrh	r3, [r4, #12]
 803fb0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803fb12:	81a3      	strh	r3, [r4, #12]
 803fb14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803fb18:	e78e      	b.n	803fa38 <__sflush_r+0x1c>
 803fb1a:	4407      	add	r7, r0
 803fb1c:	eba8 0800 	sub.w	r8, r8, r0
 803fb20:	e7e9      	b.n	803faf6 <__sflush_r+0xda>
 803fb22:	bf00      	nop
 803fb24:	20400001 	.word	0x20400001

0803fb28 <_fflush_r>:
 803fb28:	b538      	push	{r3, r4, r5, lr}
 803fb2a:	690b      	ldr	r3, [r1, #16]
 803fb2c:	4605      	mov	r5, r0
 803fb2e:	460c      	mov	r4, r1
 803fb30:	b913      	cbnz	r3, 803fb38 <_fflush_r+0x10>
 803fb32:	2500      	movs	r5, #0
 803fb34:	4628      	mov	r0, r5
 803fb36:	bd38      	pop	{r3, r4, r5, pc}
 803fb38:	b118      	cbz	r0, 803fb42 <_fflush_r+0x1a>
 803fb3a:	6983      	ldr	r3, [r0, #24]
 803fb3c:	b90b      	cbnz	r3, 803fb42 <_fflush_r+0x1a>
 803fb3e:	f000 f887 	bl	803fc50 <__sinit>
 803fb42:	4b14      	ldr	r3, [pc, #80]	; (803fb94 <_fflush_r+0x6c>)
 803fb44:	429c      	cmp	r4, r3
 803fb46:	d11b      	bne.n	803fb80 <_fflush_r+0x58>
 803fb48:	686c      	ldr	r4, [r5, #4]
 803fb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803fb4e:	2b00      	cmp	r3, #0
 803fb50:	d0ef      	beq.n	803fb32 <_fflush_r+0xa>
 803fb52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803fb54:	07d0      	lsls	r0, r2, #31
 803fb56:	d404      	bmi.n	803fb62 <_fflush_r+0x3a>
 803fb58:	0599      	lsls	r1, r3, #22
 803fb5a:	d402      	bmi.n	803fb62 <_fflush_r+0x3a>
 803fb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803fb5e:	f000 f915 	bl	803fd8c <__retarget_lock_acquire_recursive>
 803fb62:	4628      	mov	r0, r5
 803fb64:	4621      	mov	r1, r4
 803fb66:	f7ff ff59 	bl	803fa1c <__sflush_r>
 803fb6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803fb6c:	07da      	lsls	r2, r3, #31
 803fb6e:	4605      	mov	r5, r0
 803fb70:	d4e0      	bmi.n	803fb34 <_fflush_r+0xc>
 803fb72:	89a3      	ldrh	r3, [r4, #12]
 803fb74:	059b      	lsls	r3, r3, #22
 803fb76:	d4dd      	bmi.n	803fb34 <_fflush_r+0xc>
 803fb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803fb7a:	f000 f908 	bl	803fd8e <__retarget_lock_release_recursive>
 803fb7e:	e7d9      	b.n	803fb34 <_fflush_r+0xc>
 803fb80:	4b05      	ldr	r3, [pc, #20]	; (803fb98 <_fflush_r+0x70>)
 803fb82:	429c      	cmp	r4, r3
 803fb84:	d101      	bne.n	803fb8a <_fflush_r+0x62>
 803fb86:	68ac      	ldr	r4, [r5, #8]
 803fb88:	e7df      	b.n	803fb4a <_fflush_r+0x22>
 803fb8a:	4b04      	ldr	r3, [pc, #16]	; (803fb9c <_fflush_r+0x74>)
 803fb8c:	429c      	cmp	r4, r3
 803fb8e:	bf08      	it	eq
 803fb90:	68ec      	ldreq	r4, [r5, #12]
 803fb92:	e7da      	b.n	803fb4a <_fflush_r+0x22>
 803fb94:	0805b344 	.word	0x0805b344
 803fb98:	0805b364 	.word	0x0805b364
 803fb9c:	0805b324 	.word	0x0805b324

0803fba0 <std>:
 803fba0:	2300      	movs	r3, #0
 803fba2:	b510      	push	{r4, lr}
 803fba4:	4604      	mov	r4, r0
 803fba6:	e9c0 3300 	strd	r3, r3, [r0]
 803fbaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803fbae:	6083      	str	r3, [r0, #8]
 803fbb0:	8181      	strh	r1, [r0, #12]
 803fbb2:	6643      	str	r3, [r0, #100]	; 0x64
 803fbb4:	81c2      	strh	r2, [r0, #14]
 803fbb6:	6183      	str	r3, [r0, #24]
 803fbb8:	4619      	mov	r1, r3
 803fbba:	2208      	movs	r2, #8
 803fbbc:	305c      	adds	r0, #92	; 0x5c
 803fbbe:	f7ff fa43 	bl	803f048 <memset>
 803fbc2:	4b05      	ldr	r3, [pc, #20]	; (803fbd8 <std+0x38>)
 803fbc4:	6263      	str	r3, [r4, #36]	; 0x24
 803fbc6:	4b05      	ldr	r3, [pc, #20]	; (803fbdc <std+0x3c>)
 803fbc8:	62a3      	str	r3, [r4, #40]	; 0x28
 803fbca:	4b05      	ldr	r3, [pc, #20]	; (803fbe0 <std+0x40>)
 803fbcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 803fbce:	4b05      	ldr	r3, [pc, #20]	; (803fbe4 <std+0x44>)
 803fbd0:	6224      	str	r4, [r4, #32]
 803fbd2:	6323      	str	r3, [r4, #48]	; 0x30
 803fbd4:	bd10      	pop	{r4, pc}
 803fbd6:	bf00      	nop
 803fbd8:	0803fe75 	.word	0x0803fe75
 803fbdc:	0803fe97 	.word	0x0803fe97
 803fbe0:	0803fecf 	.word	0x0803fecf
 803fbe4:	0803fef3 	.word	0x0803fef3

0803fbe8 <_cleanup_r>:
 803fbe8:	4901      	ldr	r1, [pc, #4]	; (803fbf0 <_cleanup_r+0x8>)
 803fbea:	f000 b8af 	b.w	803fd4c <_fwalk_reent>
 803fbee:	bf00      	nop
 803fbf0:	0803fb29 	.word	0x0803fb29

0803fbf4 <__sfmoreglue>:
 803fbf4:	b570      	push	{r4, r5, r6, lr}
 803fbf6:	2268      	movs	r2, #104	; 0x68
 803fbf8:	1e4d      	subs	r5, r1, #1
 803fbfa:	4355      	muls	r5, r2
 803fbfc:	460e      	mov	r6, r1
 803fbfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803fc02:	f7ff fa95 	bl	803f130 <_malloc_r>
 803fc06:	4604      	mov	r4, r0
 803fc08:	b140      	cbz	r0, 803fc1c <__sfmoreglue+0x28>
 803fc0a:	2100      	movs	r1, #0
 803fc0c:	e9c0 1600 	strd	r1, r6, [r0]
 803fc10:	300c      	adds	r0, #12
 803fc12:	60a0      	str	r0, [r4, #8]
 803fc14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803fc18:	f7ff fa16 	bl	803f048 <memset>
 803fc1c:	4620      	mov	r0, r4
 803fc1e:	bd70      	pop	{r4, r5, r6, pc}

0803fc20 <__sfp_lock_acquire>:
 803fc20:	4801      	ldr	r0, [pc, #4]	; (803fc28 <__sfp_lock_acquire+0x8>)
 803fc22:	f000 b8b3 	b.w	803fd8c <__retarget_lock_acquire_recursive>
 803fc26:	bf00      	nop
 803fc28:	240037e9 	.word	0x240037e9

0803fc2c <__sfp_lock_release>:
 803fc2c:	4801      	ldr	r0, [pc, #4]	; (803fc34 <__sfp_lock_release+0x8>)
 803fc2e:	f000 b8ae 	b.w	803fd8e <__retarget_lock_release_recursive>
 803fc32:	bf00      	nop
 803fc34:	240037e9 	.word	0x240037e9

0803fc38 <__sinit_lock_acquire>:
 803fc38:	4801      	ldr	r0, [pc, #4]	; (803fc40 <__sinit_lock_acquire+0x8>)
 803fc3a:	f000 b8a7 	b.w	803fd8c <__retarget_lock_acquire_recursive>
 803fc3e:	bf00      	nop
 803fc40:	240037ea 	.word	0x240037ea

0803fc44 <__sinit_lock_release>:
 803fc44:	4801      	ldr	r0, [pc, #4]	; (803fc4c <__sinit_lock_release+0x8>)
 803fc46:	f000 b8a2 	b.w	803fd8e <__retarget_lock_release_recursive>
 803fc4a:	bf00      	nop
 803fc4c:	240037ea 	.word	0x240037ea

0803fc50 <__sinit>:
 803fc50:	b510      	push	{r4, lr}
 803fc52:	4604      	mov	r4, r0
 803fc54:	f7ff fff0 	bl	803fc38 <__sinit_lock_acquire>
 803fc58:	69a3      	ldr	r3, [r4, #24]
 803fc5a:	b11b      	cbz	r3, 803fc64 <__sinit+0x14>
 803fc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803fc60:	f7ff bff0 	b.w	803fc44 <__sinit_lock_release>
 803fc64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803fc68:	6523      	str	r3, [r4, #80]	; 0x50
 803fc6a:	4b13      	ldr	r3, [pc, #76]	; (803fcb8 <__sinit+0x68>)
 803fc6c:	4a13      	ldr	r2, [pc, #76]	; (803fcbc <__sinit+0x6c>)
 803fc6e:	681b      	ldr	r3, [r3, #0]
 803fc70:	62a2      	str	r2, [r4, #40]	; 0x28
 803fc72:	42a3      	cmp	r3, r4
 803fc74:	bf04      	itt	eq
 803fc76:	2301      	moveq	r3, #1
 803fc78:	61a3      	streq	r3, [r4, #24]
 803fc7a:	4620      	mov	r0, r4
 803fc7c:	f000 f820 	bl	803fcc0 <__sfp>
 803fc80:	6060      	str	r0, [r4, #4]
 803fc82:	4620      	mov	r0, r4
 803fc84:	f000 f81c 	bl	803fcc0 <__sfp>
 803fc88:	60a0      	str	r0, [r4, #8]
 803fc8a:	4620      	mov	r0, r4
 803fc8c:	f000 f818 	bl	803fcc0 <__sfp>
 803fc90:	2200      	movs	r2, #0
 803fc92:	60e0      	str	r0, [r4, #12]
 803fc94:	2104      	movs	r1, #4
 803fc96:	6860      	ldr	r0, [r4, #4]
 803fc98:	f7ff ff82 	bl	803fba0 <std>
 803fc9c:	68a0      	ldr	r0, [r4, #8]
 803fc9e:	2201      	movs	r2, #1
 803fca0:	2109      	movs	r1, #9
 803fca2:	f7ff ff7d 	bl	803fba0 <std>
 803fca6:	68e0      	ldr	r0, [r4, #12]
 803fca8:	2202      	movs	r2, #2
 803fcaa:	2112      	movs	r1, #18
 803fcac:	f7ff ff78 	bl	803fba0 <std>
 803fcb0:	2301      	movs	r3, #1
 803fcb2:	61a3      	str	r3, [r4, #24]
 803fcb4:	e7d2      	b.n	803fc5c <__sinit+0xc>
 803fcb6:	bf00      	nop
 803fcb8:	0805b2ec 	.word	0x0805b2ec
 803fcbc:	0803fbe9 	.word	0x0803fbe9

0803fcc0 <__sfp>:
 803fcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803fcc2:	4607      	mov	r7, r0
 803fcc4:	f7ff ffac 	bl	803fc20 <__sfp_lock_acquire>
 803fcc8:	4b1e      	ldr	r3, [pc, #120]	; (803fd44 <__sfp+0x84>)
 803fcca:	681e      	ldr	r6, [r3, #0]
 803fccc:	69b3      	ldr	r3, [r6, #24]
 803fcce:	b913      	cbnz	r3, 803fcd6 <__sfp+0x16>
 803fcd0:	4630      	mov	r0, r6
 803fcd2:	f7ff ffbd 	bl	803fc50 <__sinit>
 803fcd6:	3648      	adds	r6, #72	; 0x48
 803fcd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803fcdc:	3b01      	subs	r3, #1
 803fcde:	d503      	bpl.n	803fce8 <__sfp+0x28>
 803fce0:	6833      	ldr	r3, [r6, #0]
 803fce2:	b30b      	cbz	r3, 803fd28 <__sfp+0x68>
 803fce4:	6836      	ldr	r6, [r6, #0]
 803fce6:	e7f7      	b.n	803fcd8 <__sfp+0x18>
 803fce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803fcec:	b9d5      	cbnz	r5, 803fd24 <__sfp+0x64>
 803fcee:	4b16      	ldr	r3, [pc, #88]	; (803fd48 <__sfp+0x88>)
 803fcf0:	60e3      	str	r3, [r4, #12]
 803fcf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803fcf6:	6665      	str	r5, [r4, #100]	; 0x64
 803fcf8:	f000 f847 	bl	803fd8a <__retarget_lock_init_recursive>
 803fcfc:	f7ff ff96 	bl	803fc2c <__sfp_lock_release>
 803fd00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803fd04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803fd08:	6025      	str	r5, [r4, #0]
 803fd0a:	61a5      	str	r5, [r4, #24]
 803fd0c:	2208      	movs	r2, #8
 803fd0e:	4629      	mov	r1, r5
 803fd10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803fd14:	f7ff f998 	bl	803f048 <memset>
 803fd18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803fd1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803fd20:	4620      	mov	r0, r4
 803fd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803fd24:	3468      	adds	r4, #104	; 0x68
 803fd26:	e7d9      	b.n	803fcdc <__sfp+0x1c>
 803fd28:	2104      	movs	r1, #4
 803fd2a:	4638      	mov	r0, r7
 803fd2c:	f7ff ff62 	bl	803fbf4 <__sfmoreglue>
 803fd30:	4604      	mov	r4, r0
 803fd32:	6030      	str	r0, [r6, #0]
 803fd34:	2800      	cmp	r0, #0
 803fd36:	d1d5      	bne.n	803fce4 <__sfp+0x24>
 803fd38:	f7ff ff78 	bl	803fc2c <__sfp_lock_release>
 803fd3c:	230c      	movs	r3, #12
 803fd3e:	603b      	str	r3, [r7, #0]
 803fd40:	e7ee      	b.n	803fd20 <__sfp+0x60>
 803fd42:	bf00      	nop
 803fd44:	0805b2ec 	.word	0x0805b2ec
 803fd48:	ffff0001 	.word	0xffff0001

0803fd4c <_fwalk_reent>:
 803fd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803fd50:	4606      	mov	r6, r0
 803fd52:	4688      	mov	r8, r1
 803fd54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803fd58:	2700      	movs	r7, #0
 803fd5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803fd5e:	f1b9 0901 	subs.w	r9, r9, #1
 803fd62:	d505      	bpl.n	803fd70 <_fwalk_reent+0x24>
 803fd64:	6824      	ldr	r4, [r4, #0]
 803fd66:	2c00      	cmp	r4, #0
 803fd68:	d1f7      	bne.n	803fd5a <_fwalk_reent+0xe>
 803fd6a:	4638      	mov	r0, r7
 803fd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803fd70:	89ab      	ldrh	r3, [r5, #12]
 803fd72:	2b01      	cmp	r3, #1
 803fd74:	d907      	bls.n	803fd86 <_fwalk_reent+0x3a>
 803fd76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803fd7a:	3301      	adds	r3, #1
 803fd7c:	d003      	beq.n	803fd86 <_fwalk_reent+0x3a>
 803fd7e:	4629      	mov	r1, r5
 803fd80:	4630      	mov	r0, r6
 803fd82:	47c0      	blx	r8
 803fd84:	4307      	orrs	r7, r0
 803fd86:	3568      	adds	r5, #104	; 0x68
 803fd88:	e7e9      	b.n	803fd5e <_fwalk_reent+0x12>

0803fd8a <__retarget_lock_init_recursive>:
 803fd8a:	4770      	bx	lr

0803fd8c <__retarget_lock_acquire_recursive>:
 803fd8c:	4770      	bx	lr

0803fd8e <__retarget_lock_release_recursive>:
 803fd8e:	4770      	bx	lr

0803fd90 <__swhatbuf_r>:
 803fd90:	b570      	push	{r4, r5, r6, lr}
 803fd92:	460e      	mov	r6, r1
 803fd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803fd98:	2900      	cmp	r1, #0
 803fd9a:	b096      	sub	sp, #88	; 0x58
 803fd9c:	4614      	mov	r4, r2
 803fd9e:	461d      	mov	r5, r3
 803fda0:	da08      	bge.n	803fdb4 <__swhatbuf_r+0x24>
 803fda2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803fda6:	2200      	movs	r2, #0
 803fda8:	602a      	str	r2, [r5, #0]
 803fdaa:	061a      	lsls	r2, r3, #24
 803fdac:	d410      	bmi.n	803fdd0 <__swhatbuf_r+0x40>
 803fdae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803fdb2:	e00e      	b.n	803fdd2 <__swhatbuf_r+0x42>
 803fdb4:	466a      	mov	r2, sp
 803fdb6:	f000 f8c3 	bl	803ff40 <_fstat_r>
 803fdba:	2800      	cmp	r0, #0
 803fdbc:	dbf1      	blt.n	803fda2 <__swhatbuf_r+0x12>
 803fdbe:	9a01      	ldr	r2, [sp, #4]
 803fdc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803fdc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803fdc8:	425a      	negs	r2, r3
 803fdca:	415a      	adcs	r2, r3
 803fdcc:	602a      	str	r2, [r5, #0]
 803fdce:	e7ee      	b.n	803fdae <__swhatbuf_r+0x1e>
 803fdd0:	2340      	movs	r3, #64	; 0x40
 803fdd2:	2000      	movs	r0, #0
 803fdd4:	6023      	str	r3, [r4, #0]
 803fdd6:	b016      	add	sp, #88	; 0x58
 803fdd8:	bd70      	pop	{r4, r5, r6, pc}
	...

0803fddc <__smakebuf_r>:
 803fddc:	898b      	ldrh	r3, [r1, #12]
 803fdde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803fde0:	079d      	lsls	r5, r3, #30
 803fde2:	4606      	mov	r6, r0
 803fde4:	460c      	mov	r4, r1
 803fde6:	d507      	bpl.n	803fdf8 <__smakebuf_r+0x1c>
 803fde8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803fdec:	6023      	str	r3, [r4, #0]
 803fdee:	6123      	str	r3, [r4, #16]
 803fdf0:	2301      	movs	r3, #1
 803fdf2:	6163      	str	r3, [r4, #20]
 803fdf4:	b002      	add	sp, #8
 803fdf6:	bd70      	pop	{r4, r5, r6, pc}
 803fdf8:	ab01      	add	r3, sp, #4
 803fdfa:	466a      	mov	r2, sp
 803fdfc:	f7ff ffc8 	bl	803fd90 <__swhatbuf_r>
 803fe00:	9900      	ldr	r1, [sp, #0]
 803fe02:	4605      	mov	r5, r0
 803fe04:	4630      	mov	r0, r6
 803fe06:	f7ff f993 	bl	803f130 <_malloc_r>
 803fe0a:	b948      	cbnz	r0, 803fe20 <__smakebuf_r+0x44>
 803fe0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803fe10:	059a      	lsls	r2, r3, #22
 803fe12:	d4ef      	bmi.n	803fdf4 <__smakebuf_r+0x18>
 803fe14:	f023 0303 	bic.w	r3, r3, #3
 803fe18:	f043 0302 	orr.w	r3, r3, #2
 803fe1c:	81a3      	strh	r3, [r4, #12]
 803fe1e:	e7e3      	b.n	803fde8 <__smakebuf_r+0xc>
 803fe20:	4b0d      	ldr	r3, [pc, #52]	; (803fe58 <__smakebuf_r+0x7c>)
 803fe22:	62b3      	str	r3, [r6, #40]	; 0x28
 803fe24:	89a3      	ldrh	r3, [r4, #12]
 803fe26:	6020      	str	r0, [r4, #0]
 803fe28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803fe2c:	81a3      	strh	r3, [r4, #12]
 803fe2e:	9b00      	ldr	r3, [sp, #0]
 803fe30:	6163      	str	r3, [r4, #20]
 803fe32:	9b01      	ldr	r3, [sp, #4]
 803fe34:	6120      	str	r0, [r4, #16]
 803fe36:	b15b      	cbz	r3, 803fe50 <__smakebuf_r+0x74>
 803fe38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803fe3c:	4630      	mov	r0, r6
 803fe3e:	f000 f891 	bl	803ff64 <_isatty_r>
 803fe42:	b128      	cbz	r0, 803fe50 <__smakebuf_r+0x74>
 803fe44:	89a3      	ldrh	r3, [r4, #12]
 803fe46:	f023 0303 	bic.w	r3, r3, #3
 803fe4a:	f043 0301 	orr.w	r3, r3, #1
 803fe4e:	81a3      	strh	r3, [r4, #12]
 803fe50:	89a0      	ldrh	r0, [r4, #12]
 803fe52:	4305      	orrs	r5, r0
 803fe54:	81a5      	strh	r5, [r4, #12]
 803fe56:	e7cd      	b.n	803fdf4 <__smakebuf_r+0x18>
 803fe58:	0803fbe9 	.word	0x0803fbe9

0803fe5c <__malloc_lock>:
 803fe5c:	4801      	ldr	r0, [pc, #4]	; (803fe64 <__malloc_lock+0x8>)
 803fe5e:	f7ff bf95 	b.w	803fd8c <__retarget_lock_acquire_recursive>
 803fe62:	bf00      	nop
 803fe64:	240037e8 	.word	0x240037e8

0803fe68 <__malloc_unlock>:
 803fe68:	4801      	ldr	r0, [pc, #4]	; (803fe70 <__malloc_unlock+0x8>)
 803fe6a:	f7ff bf90 	b.w	803fd8e <__retarget_lock_release_recursive>
 803fe6e:	bf00      	nop
 803fe70:	240037e8 	.word	0x240037e8

0803fe74 <__sread>:
 803fe74:	b510      	push	{r4, lr}
 803fe76:	460c      	mov	r4, r1
 803fe78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803fe7c:	f000 f894 	bl	803ffa8 <_read_r>
 803fe80:	2800      	cmp	r0, #0
 803fe82:	bfab      	itete	ge
 803fe84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803fe86:	89a3      	ldrhlt	r3, [r4, #12]
 803fe88:	181b      	addge	r3, r3, r0
 803fe8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803fe8e:	bfac      	ite	ge
 803fe90:	6563      	strge	r3, [r4, #84]	; 0x54
 803fe92:	81a3      	strhlt	r3, [r4, #12]
 803fe94:	bd10      	pop	{r4, pc}

0803fe96 <__swrite>:
 803fe96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803fe9a:	461f      	mov	r7, r3
 803fe9c:	898b      	ldrh	r3, [r1, #12]
 803fe9e:	05db      	lsls	r3, r3, #23
 803fea0:	4605      	mov	r5, r0
 803fea2:	460c      	mov	r4, r1
 803fea4:	4616      	mov	r6, r2
 803fea6:	d505      	bpl.n	803feb4 <__swrite+0x1e>
 803fea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803feac:	2302      	movs	r3, #2
 803feae:	2200      	movs	r2, #0
 803feb0:	f000 f868 	bl	803ff84 <_lseek_r>
 803feb4:	89a3      	ldrh	r3, [r4, #12]
 803feb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803feba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803febe:	81a3      	strh	r3, [r4, #12]
 803fec0:	4632      	mov	r2, r6
 803fec2:	463b      	mov	r3, r7
 803fec4:	4628      	mov	r0, r5
 803fec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803feca:	f000 b817 	b.w	803fefc <_write_r>

0803fece <__sseek>:
 803fece:	b510      	push	{r4, lr}
 803fed0:	460c      	mov	r4, r1
 803fed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803fed6:	f000 f855 	bl	803ff84 <_lseek_r>
 803feda:	1c43      	adds	r3, r0, #1
 803fedc:	89a3      	ldrh	r3, [r4, #12]
 803fede:	bf15      	itete	ne
 803fee0:	6560      	strne	r0, [r4, #84]	; 0x54
 803fee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803fee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803feea:	81a3      	strheq	r3, [r4, #12]
 803feec:	bf18      	it	ne
 803feee:	81a3      	strhne	r3, [r4, #12]
 803fef0:	bd10      	pop	{r4, pc}

0803fef2 <__sclose>:
 803fef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803fef6:	f000 b813 	b.w	803ff20 <_close_r>
	...

0803fefc <_write_r>:
 803fefc:	b538      	push	{r3, r4, r5, lr}
 803fefe:	4d07      	ldr	r5, [pc, #28]	; (803ff1c <_write_r+0x20>)
 803ff00:	4604      	mov	r4, r0
 803ff02:	4608      	mov	r0, r1
 803ff04:	4611      	mov	r1, r2
 803ff06:	2200      	movs	r2, #0
 803ff08:	602a      	str	r2, [r5, #0]
 803ff0a:	461a      	mov	r2, r3
 803ff0c:	f7ed f93f 	bl	802d18e <_write>
 803ff10:	1c43      	adds	r3, r0, #1
 803ff12:	d102      	bne.n	803ff1a <_write_r+0x1e>
 803ff14:	682b      	ldr	r3, [r5, #0]
 803ff16:	b103      	cbz	r3, 803ff1a <_write_r+0x1e>
 803ff18:	6023      	str	r3, [r4, #0]
 803ff1a:	bd38      	pop	{r3, r4, r5, pc}
 803ff1c:	240037ec 	.word	0x240037ec

0803ff20 <_close_r>:
 803ff20:	b538      	push	{r3, r4, r5, lr}
 803ff22:	4d06      	ldr	r5, [pc, #24]	; (803ff3c <_close_r+0x1c>)
 803ff24:	2300      	movs	r3, #0
 803ff26:	4604      	mov	r4, r0
 803ff28:	4608      	mov	r0, r1
 803ff2a:	602b      	str	r3, [r5, #0]
 803ff2c:	f7ed f94b 	bl	802d1c6 <_close>
 803ff30:	1c43      	adds	r3, r0, #1
 803ff32:	d102      	bne.n	803ff3a <_close_r+0x1a>
 803ff34:	682b      	ldr	r3, [r5, #0]
 803ff36:	b103      	cbz	r3, 803ff3a <_close_r+0x1a>
 803ff38:	6023      	str	r3, [r4, #0]
 803ff3a:	bd38      	pop	{r3, r4, r5, pc}
 803ff3c:	240037ec 	.word	0x240037ec

0803ff40 <_fstat_r>:
 803ff40:	b538      	push	{r3, r4, r5, lr}
 803ff42:	4d07      	ldr	r5, [pc, #28]	; (803ff60 <_fstat_r+0x20>)
 803ff44:	2300      	movs	r3, #0
 803ff46:	4604      	mov	r4, r0
 803ff48:	4608      	mov	r0, r1
 803ff4a:	4611      	mov	r1, r2
 803ff4c:	602b      	str	r3, [r5, #0]
 803ff4e:	f7ed f946 	bl	802d1de <_fstat>
 803ff52:	1c43      	adds	r3, r0, #1
 803ff54:	d102      	bne.n	803ff5c <_fstat_r+0x1c>
 803ff56:	682b      	ldr	r3, [r5, #0]
 803ff58:	b103      	cbz	r3, 803ff5c <_fstat_r+0x1c>
 803ff5a:	6023      	str	r3, [r4, #0]
 803ff5c:	bd38      	pop	{r3, r4, r5, pc}
 803ff5e:	bf00      	nop
 803ff60:	240037ec 	.word	0x240037ec

0803ff64 <_isatty_r>:
 803ff64:	b538      	push	{r3, r4, r5, lr}
 803ff66:	4d06      	ldr	r5, [pc, #24]	; (803ff80 <_isatty_r+0x1c>)
 803ff68:	2300      	movs	r3, #0
 803ff6a:	4604      	mov	r4, r0
 803ff6c:	4608      	mov	r0, r1
 803ff6e:	602b      	str	r3, [r5, #0]
 803ff70:	f7ed f945 	bl	802d1fe <_isatty>
 803ff74:	1c43      	adds	r3, r0, #1
 803ff76:	d102      	bne.n	803ff7e <_isatty_r+0x1a>
 803ff78:	682b      	ldr	r3, [r5, #0]
 803ff7a:	b103      	cbz	r3, 803ff7e <_isatty_r+0x1a>
 803ff7c:	6023      	str	r3, [r4, #0]
 803ff7e:	bd38      	pop	{r3, r4, r5, pc}
 803ff80:	240037ec 	.word	0x240037ec

0803ff84 <_lseek_r>:
 803ff84:	b538      	push	{r3, r4, r5, lr}
 803ff86:	4d07      	ldr	r5, [pc, #28]	; (803ffa4 <_lseek_r+0x20>)
 803ff88:	4604      	mov	r4, r0
 803ff8a:	4608      	mov	r0, r1
 803ff8c:	4611      	mov	r1, r2
 803ff8e:	2200      	movs	r2, #0
 803ff90:	602a      	str	r2, [r5, #0]
 803ff92:	461a      	mov	r2, r3
 803ff94:	f7ed f93e 	bl	802d214 <_lseek>
 803ff98:	1c43      	adds	r3, r0, #1
 803ff9a:	d102      	bne.n	803ffa2 <_lseek_r+0x1e>
 803ff9c:	682b      	ldr	r3, [r5, #0]
 803ff9e:	b103      	cbz	r3, 803ffa2 <_lseek_r+0x1e>
 803ffa0:	6023      	str	r3, [r4, #0]
 803ffa2:	bd38      	pop	{r3, r4, r5, pc}
 803ffa4:	240037ec 	.word	0x240037ec

0803ffa8 <_read_r>:
 803ffa8:	b538      	push	{r3, r4, r5, lr}
 803ffaa:	4d07      	ldr	r5, [pc, #28]	; (803ffc8 <_read_r+0x20>)
 803ffac:	4604      	mov	r4, r0
 803ffae:	4608      	mov	r0, r1
 803ffb0:	4611      	mov	r1, r2
 803ffb2:	2200      	movs	r2, #0
 803ffb4:	602a      	str	r2, [r5, #0]
 803ffb6:	461a      	mov	r2, r3
 803ffb8:	f7ed f8cc 	bl	802d154 <_read>
 803ffbc:	1c43      	adds	r3, r0, #1
 803ffbe:	d102      	bne.n	803ffc6 <_read_r+0x1e>
 803ffc0:	682b      	ldr	r3, [r5, #0]
 803ffc2:	b103      	cbz	r3, 803ffc6 <_read_r+0x1e>
 803ffc4:	6023      	str	r3, [r4, #0]
 803ffc6:	bd38      	pop	{r3, r4, r5, pc}
 803ffc8:	240037ec 	.word	0x240037ec

0803ffcc <_init>:
 803ffcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ffce:	bf00      	nop
 803ffd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803ffd2:	bc08      	pop	{r3}
 803ffd4:	469e      	mov	lr, r3
 803ffd6:	4770      	bx	lr

0803ffd8 <_fini>:
 803ffd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ffda:	bf00      	nop
 803ffdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803ffde:	bc08      	pop	{r3}
 803ffe0:	469e      	mov	lr, r3
 803ffe2:	4770      	bx	lr
