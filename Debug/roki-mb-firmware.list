
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db50  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001aef8  0801ddf0  0801ddf0  0002ddf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08038ce8  08038ce8  00048ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08038cf0  08038cf0  00048cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08038cf8  08038cf8  00048cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08038d00  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003600  24000168  08038e64  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003768  08038e64  00053768  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00051de2  00000000  00000000  00050192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007625  00000000  00000000  000a1f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003688  00000000  00000000  000a95a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003408  00000000  00000000  000acc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000454ee  00000000  00000000  000b0030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ad4d  00000000  00000000  000f551e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001902f7  00000000  00000000  0013026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002c0562  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f8fc  00000000  00000000  002c05b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000168 	.word	0x24000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ddd8 	.word	0x0801ddd8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400016c 	.word	0x2400016c
 80002dc:	0801ddd8 	.word	0x0801ddd8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d105      	bne.n	80006a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80006a0:	210c      	movs	r1, #12
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80006a4:	f01c fb44 	bl	801cd30 <__assert_func>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0801ddf0 	.word	0x0801ddf0
 80006b8:	0801ddfc 	.word	0x0801ddfc
 80006bc:	0801de28 	.word	0x0801de28

080006c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80006d2:	230c      	movs	r3, #12
 80006d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 faab 	bl	8000c3c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b99      	ldr	r3, [pc, #612]	; (8000958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80006f4:	4a99      	ldr	r2, [pc, #612]	; (800095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80006f6:	499a      	ldr	r1, [pc, #616]	; (8000960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80006f8:	2001      	movs	r0, #1
 80006fa:	f008 fcb0 	bl	800905e <bhy2_init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e11d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f008 fc8a 	bl	800902e <bhy2_soft_reset>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 800072a:	2302      	movs	r3, #2
 800072c:	e10f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	f107 0316 	add.w	r3, r7, #22
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 fb65 	bl	8008e06 <bhy2_get_product_id>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 800074c:	2303      	movs	r3, #3
 800074e:	e0fe      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	2b89      	cmp	r3, #137	; 0x89
 8000754:	d001      	beq.n	800075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8000756:	2304      	movs	r3, #4
 8000758:	e0f9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f008 fbf7 	bl	8008f54 <bhy2_set_host_interrupt_ctrl>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8000776:	2305      	movs	r3, #5
 8000778:	e0e9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f107 0313 	add.w	r3, r7, #19
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f008 fc02 	bl	8008f8c <bhy2_get_host_interrupt_ctrl>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8000798:	2306      	movs	r3, #6
 800079a:	e0d8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fc27 	bl	8008ff6 <bhy2_set_host_intf_ctrl>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	e0c8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 fb52 	bl	8008e6e <bhy2_get_boot_status>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	e0b7      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80007de:	7cbb      	ldrb	r3, [r7, #18]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	e0b0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	495c      	ldr	r1, [pc, #368]	; (8000964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80007f2:	485d      	ldr	r0, [pc, #372]	; (8000968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80007f4:	f008 fb77 	bl	8008ee6 <bhy2_upload_firmware_to_ram>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8000808:	2309      	movs	r3, #9
 800080a:	e0a0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	f107 0311 	add.w	r3, r7, #17
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f008 fd09 	bl	800922c <bhy2_get_error_value>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 800082a:	230a      	movs	r3, #10
 800082c:	e08f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8000834:	230b      	movs	r3, #11
 8000836:	e08a      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4618      	mov	r0, r3
 800083c:	f008 fb72 	bl	8008f24 <bhy2_boot_from_ram>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8000850:	230c      	movs	r3, #12
 8000852:	e07c      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f107 0311 	add.w	r3, r7, #17
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f008 fce5 	bl	800922c <bhy2_get_error_value>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8000872:	230d      	movs	r3, #13
 8000874:	e06b      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 800087c:	230e      	movs	r3, #14
 800087e:	e066      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f008 fad6 	bl	8008e3a <bhy2_get_kernel_version>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	e055      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	e050      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80008b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	492d      	ldr	r1, [pc, #180]	; (800096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f008 fbfa 	bl	80090b2 <bhy2_register_fifo_parse_callback>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80008ce:	2311      	movs	r3, #17
 80008d0:	e03d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f98b 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 80008de:	4604      	mov	r4, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f991 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80008ec:	4601      	mov	r1, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f008 f935 	bl	8008b62 <bhy2_get_and_process_fifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8000908:	2312      	movs	r3, #18
 800090a:	e020      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fbfe 	bl	8009110 <bhy2_update_virtual_sensor_list>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8000924:	2310      	movs	r3, #16
 8000926:	e012      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f008 fa46 	bl	8008dc4 <bhy2_set_virt_sensor_cfg>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8000948:	2311      	movs	r3, #17
 800094a:	e000      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08000e0d 	.word	0x08000e0d
 800095c:	08000d89 	.word	0x08000d89
 8000960:	08000d0d 	.word	0x08000d0d
 8000964:	0001a66c 	.word	0x0001a66c
 8000968:	0801e55c 	.word	0x0801e55c
 800096c:	08000a11 	.word	0x08000a11

08000970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f008 fb1c 	bl	8008fc2 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d01d      	beq.n	80009cc <_ZN10BHYWrapper4PollEv+0x5c>
		assert(
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f92c 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 800099c:	4604      	mov	r4, r0
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f932 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80009aa:	4601      	mov	r1, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f008 f8d6 	bl	8008b62 <bhy2_get_and_process_fifo>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <_ZN10BHYWrapper4PollEv+0x58>
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <_ZN10BHYWrapper4PollEv+0x68>)
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <_ZN10BHYWrapper4PollEv+0x6c>)
 80009c0:	2166      	movs	r1, #102	; 0x66
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <_ZN10BHYWrapper4PollEv+0x70>)
 80009c4:	f01c f9b4 	bl	801cd30 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		return true;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <_ZN10BHYWrapper4PollEv+0x5e>
	}

	return false;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	0801de44 	.word	0x0801de44
 80009dc:	0801de98 	.word	0x0801de98
 80009e0:	0801de28 	.word	0x0801de28

080009e4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80009e4:	b4b0      	push	{r4, r5, r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f6:	4615      	mov	r5, r2
 80009f8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80009fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	602b      	str	r3, [r5, #0]
}
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bcb0      	pop	{r4, r5, r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8000a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a14:	b08e      	sub	sp, #56	; 0x38
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d105      	bne.n	8000a32 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8000a26:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8000a28:	4a40      	ldr	r2, [pc, #256]	; (8000b2c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8000a2a:	2177      	movs	r1, #119	; 0x77
 8000a2c:	4840      	ldr	r0, [pc, #256]	; (8000b30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8000a2e:	f01c f97f 	bl	801cd30 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8000a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a34:	3308      	adds	r3, #8
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	2b0b      	cmp	r3, #11
 8000a42:	d167      	bne.n	8000b14 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f107 0214 	add.w	r2, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f009 fd73 	bl	800a53a <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	f04f 0a00 	mov.w	sl, #0
 8000a6c:	f04f 0b00 	mov.w	fp, #0
 8000a70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000a74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000a78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000a7c:	4652      	mov	r2, sl
 8000a7e:	465b      	mov	r3, fp
 8000a80:	ebb2 0800 	subs.w	r8, r2, r0
 8000a84:	eb63 0901 	sbc.w	r9, r3, r1
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000a94:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000a98:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000a9c:	ebb2 0408 	subs.w	r4, r2, r8
 8000aa0:	eb63 0509 	sbc.w	r5, r3, r9
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	00eb      	lsls	r3, r5, #3
 8000aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab2:	00e2      	lsls	r2, r4, #3
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	1823      	adds	r3, r4, r0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	eb45 0301 	adc.w	r3, r5, r1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ac6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8000aca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ace:	a314      	add	r3, pc, #80	; (adr r3, 8000b20 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	f7ff fc54 	bl	8000380 <__aeabi_uldivmod>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ade:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8000ae0:	6a3a      	ldr	r2, [r7, #32]
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8000af2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8000afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8000b02:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b08:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8000b0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	80da      	strh	r2, [r3, #6]
 8000b12:	e000      	b.n	8000b16 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8000b14:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000b1e:	bf00      	nop
 8000b20:	3b9aca00 	.word	0x3b9aca00
 8000b24:	00000000 	.word	0x00000000
 8000b28:	0801deb0 	.word	0x0801deb0
 8000b2c:	0801deb8 	.word	0x0801deb8
 8000b30:	0801de28 	.word	0x0801de28
 8000b34:	3b9aca00 	.word	0x3b9aca00

08000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	assert(dest);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b4e:	2190      	movs	r1, #144	; 0x90
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b52:	f01c f8ed 	bl	801cd30 <__assert_func>
	assert(size);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b60:	2191      	movs	r1, #145	; 0x91
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b64:	f01c f8e4 	bl	801cd30 <__assert_func>

	uint8_t *ptr = dest;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
	 /*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	7c1a      	ldrb	r2, [r3, #16]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2211      	movs	r2, #17
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0801df04 	.word	0x0801df04
 8000be8:	0801df0c 	.word	0x0801df0c
 8000bec:	0801de28 	.word	0x0801de28
 8000bf0:	0801df48 	.word	0x0801df48

08000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f811 	bl	8000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	24000184 	.word	0x24000184

08000c5c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f013 fda7 	bl	80147c4 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f014 fc30 	bl	80154e0 <HAL_SPI_GetState>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <_Z11spiTransmitPht+0x36>
 8000c90:	e7f1      	b.n	8000c76 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	b25b      	sxtb	r3, r3
  }
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000184 	.word	0x24000184

08000cb4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f013 fec5 	bl	8014a58 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f014 fc04 	bl	80154e0 <HAL_SPI_GetState>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d000      	beq.n	8000cea <_Z9spiReceivPht+0x36>
 8000ce8:	e7f1      	b.n	8000cce <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2301      	moveq	r3, #1
 8000cf8:	2300      	movne	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	b25b      	sxtb	r3, r3
  }
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000184 	.word	0x24000184

08000d0c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d22:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000d24:	f107 030f 	add.w	r3, r7, #15
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff96 	bl	8000c5c <_Z11spiTransmitPht>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf0c      	ite	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	2300      	movne	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8000d40:	f06f 0301 	mvn.w	r3, #1
 8000d44:	e019      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f7ff ffb1 	bl	8000cb4 <_Z9spiReceivPht>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d68:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e005      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d74:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8000d76:	f06f 0301 	mvn.w	r3, #1
  }
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58021000 	.word	0x58021000

08000d88 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b40      	cmp	r3, #64	; 0x40
 8000d9c:	d902      	bls.n	8000da4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8000d9e:	f06f 0303 	mvn.w	r3, #3
 8000da2:	e028      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f01c f827 	bl	801ce04 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dbc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000dca:	f7ff ff47 	bl	8000c5c <_Z11spiTransmitPht>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de4:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e005      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df0:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000188 	.word	0x24000188
 8000e04:	24000189 	.word	0x24000189
 8000e08:	58021000 	.word	0x58021000

08000e0c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e1c:	d308      	bcc.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <_Z13bhy2_delay_usmPv+0x44>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00b f8c7 	bl	800bfbc <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8000e2e:	e00b      	b.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8000e44:	bf00      	nop
    while( us-- ) {
 8000e46:	e7f3      	b.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
  }
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	10624dd3 	.word	0x10624dd3

08000e54 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e90:	d205      	bcs.n	8000e9e <_ZSt16__deque_buf_sizej+0x1c>
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	e000      	b.n	8000ea0 <_ZSt16__deque_buf_sizej+0x1e>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_ZN11QueueSender11MessageMode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;

		static uint8_t Serialize(Type mode) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
			return mode;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
		}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
			return val;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
		}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_ZN11QueueSender9ErrorCode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Success = 0;
		static constexpr Type Timeout = 1;
		static constexpr Type Unknown = 2;

		static uint8_t Serialize(Type error) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
			return error;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
		}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d105      	bne.n	8000f10 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8000f08:	2163      	movs	r1, #99	; 0x63
 8000f0a:	4814      	ldr	r0, [pc, #80]	; (8000f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8000f0c:	f01b ff10 	bl	801cd30 <__assert_func>
			assert(*ptr);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d105      	bne.n	8000f24 <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8000f1c:	2164      	movs	r1, #100	; 0x64
 8000f1e:	480f      	ldr	r0, [pc, #60]	; (8000f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8000f20:	f01b ff06 	bl	801cd30 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	8812      	ldrh	r2, [r2, #0]
 8000f2c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1c9a      	adds	r2, r3, #2
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	8852      	ldrh	r2, [r2, #2]
 8000f40:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1c9a      	adds	r2, r3, #2
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	601a      	str	r2, [r3, #0]
		}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0801df50 	.word	0x0801df50
 8000f58:	0801df54 	.word	0x0801df54
 8000f5c:	0801df84 	.word	0x0801df84
 8000f60:	0801dfa0 	.word	0x0801dfa0

08000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fb82 	bl	8002678 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fbee 	bl	800276a <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fc17 	bl	80027d4 <_ZNSaIhED1Ev>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fbfa 	bl	80027b4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffeb 	bl	8000fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN7RequestC1Ev>:
struct Request {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffeb 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN7RequestD1Ev>:
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fc07 	bl	800281c <_ZNSt6vectorIhSaIhEED1Ev>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff9c 	bl	8000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3328      	adds	r3, #40	; 0x28
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fb86 	bl	8002742 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3350      	adds	r3, #80	; 0x50
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffd2 	bl	8000fe4 <_ZN7RequestC1Ev>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3368      	adds	r3, #104	; 0x68
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffb8 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	675a      	str	r2, [r3, #116]	; 0x74
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	679a      	str	r2, [r3, #120]	; 0x78
		assert(uart != NULL);
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d105      	bne.n	8001078 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x6c>)
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x70>)
 8001070:	2173      	movs	r1, #115	; 0x73
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x74>)
 8001074:	f01b fe5c 	bl	801cd30 <__assert_func>
	}
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0801dfa8 	.word	0x0801dfa8
 8001088:	0801dfb8 	.word	0x0801dfb8
 800108c:	0801df84 	.word	0x0801df84

08001090 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8001094:	2301      	movs	r3, #1
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZN7RequestaSEOS_>:
struct Request {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fc04 	bl	80028be <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	7c1a      	ldrb	r2, [r3, #16]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	741a      	strb	r2, [r3, #16]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	7c5a      	ldrb	r2, [r3, #17]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	745a      	strb	r2, [r3, #17]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN8ResponceD1Ev>:
struct Responce {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fb9a 	bl	800281c <_ZNSt6vectorIhSaIhEED1Ev>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 80010f2:	b590      	push	{r4, r7, lr}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	7c1b      	ldrb	r3, [r3, #16]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fedf 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8001106:	4603      	mov	r3, r0
 8001108:	2b02      	cmp	r3, #2
 800110a:	d031      	beq.n	8001170 <_ZN11QueueSender10AddRequestEO7Request+0x7e>
 800110c:	2b02      	cmp	r3, #2
 800110e:	dc45      	bgt.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <_ZN11QueueSender10AddRequestEO7Request+0x3a>
 8001114:	2b01      	cmp	r3, #1
 8001116:	d141      	bne.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
		case MessageMode::Async:
			Requests.emplace_back(std::move(request));
 8001118:	687c      	ldr	r4, [r7, #4]
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f001 fb99 	bl	8002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	4620      	mov	r0, r4
 8001126:	f001 fb9f 	bl	8002868 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 800112a:	e037      	b.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
		case MessageMode::Sync:
			if (!HasPriorityRequest) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d02e      	beq.n	800119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>
				PriorityRequest = std::move(request);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f001 fb85 	bl	8002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001148:	4603      	mov	r3, r0
 800114a:	4619      	mov	r1, r3
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff ffa7 	bl	80010a0 <_ZN7RequestaSEOS_>
				HasPriorityRequest = true;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

				if (Requests.empty()) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fbc3 	bl	80028e8 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d018      	beq.n	800119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>
					ProcessPriorityRequest();
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f899 	bl	80012a0 <_ZN11QueueSender22ProcessPriorityRequestEv>
				}
			}
			break;
 800116e:	e014      	b.n	800119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>

		case MessageMode::Info:
			Responces.emplace(CreateInfoResponce());
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f9d9 	bl	8001534 <_ZNK11QueueSender18CreateInfoResponceEv>
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	4620      	mov	r0, r4
 800118a:	f001 fbbf 	bl	800290c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffa0 	bl	80010d8 <_ZN8ResponceD1Ev>
			break;
 8001198:	e000      	b.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
			break;
 800119a:	bf00      	nop
		}
	}
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}

080011a4 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3328      	adds	r3, #40	; 0x28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fbbd 	bl	8002930 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f083 0301 	eor.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
	}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fbcf 	bl	800297a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ffe5 	bl	80011c6 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZN8ResponceC1EOS_>:
struct Responce {
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffe5 	bl	80011e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	7b1a      	ldrb	r2, [r3, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	731a      	strb	r2, [r3, #12]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	7b5a      	ldrb	r2, [r3, #13]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	735a      	strb	r2, [r3, #13]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	7b9a      	ldrb	r2, [r3, #14]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	739a      	strb	r2, [r3, #14]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f7ff ffaa 	bl	80011a4 <_ZNK11QueueSender11HasResponceEv>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <_ZN11QueueSender11GetResponceEv+0x22>
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_ZN11QueueSender11GetResponceEv+0x54>)
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <_ZN11QueueSender11GetResponceEv+0x58>)
 800125a:	2191      	movs	r1, #145	; 0x91
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <_ZN11QueueSender11GetResponceEv+0x5c>)
 800125e:	f01b fd67 	bl	801cd30 <__assert_func>
		auto responce = std::move(Responces.front());
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3328      	adds	r3, #40	; 0x28
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fb6f 	bl	800294a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fb78 	bl	8002964 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffc4 	bl	8001206 <_ZN8ResponceC1EOS_>
		Responces.pop();
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3328      	adds	r3, #40	; 0x28
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fb94 	bl	80029b0 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 8001288:	bf00      	nop
	}
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	0801dff0 	.word	0x0801dff0
 8001298:	0801e000 	.word	0x0801e000
 800129c:	0801df84 	.word	0x0801df84

080012a0 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8086 	beq.w	80013c4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80012be:	f083 0301 	eor.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d07d      	beq.n	80013c4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
			HasPriorityRequest = false;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			WaitResponce = true;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 80012d8:	b662      	cpsie	i
}
 80012da:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3350      	adds	r3, #80	; 0x50
 80012e0:	623b      	str	r3, [r7, #32]
			auto &data = request.Data;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	61fb      	str	r3, [r7, #28]

			assert(
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	7c1b      	ldrb	r3, [r3, #16]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fdea 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <_ZN11QueueSender22ProcessPriorityRequestEv+0x62>
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x130>)
 80012f8:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x134>)
 80012fa:	21a1      	movs	r1, #161	; 0xa1
 80012fc:	4836      	ldr	r0, [pc, #216]	; (80013d8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x138>)
 80012fe:	f01b fd17 	bl	801cd30 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);

			CurrentResponceBuffer.resize(request.ResponceSize);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f001 fb5a 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001318:	69f8      	ldr	r0, [r7, #28]
 800131a:	f001 fb89 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 800131e:	4605      	mov	r5, r0
 8001320:	69f8      	ldr	r0, [r7, #28]
 8001322:	f001 fb94 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800132e:	4629      	mov	r1, r5
 8001330:	4620      	mov	r0, r4
 8001332:	f014 ffb1 	bl	8016298 <HAL_UART_Transmit>

			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3368      	adds	r3, #104	; 0x68
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fb76 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001344:	4605      	mov	r5, r0
					CurrentResponceBuffer.data(), CurrentResponceBuffer.size(),
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3368      	adds	r3, #104	; 0x68
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fb7f 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001350:	4603      	mov	r3, r0
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8001352:	b29a      	uxth	r2, r3
					TimeoutS);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8001358:	4629      	mov	r1, r5
 800135a:	4620      	mov	r0, r4
 800135c:	f015 f832 	bl	80163c4 <HAL_UART_Receive>
 8001360:	4603      	mov	r3, r0
 8001362:	76fb      	strb	r3, [r7, #27]
			WaitResponce = false;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

			ErrorCode::Type error;

			if (ret == HAL_OK)
 800136c:	7efb      	ldrb	r3, [r7, #27]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <_ZN11QueueSender22ProcessPriorityRequestEv+0xda>
				error = ErrorCode::Success;
 8001372:	2300      	movs	r3, #0
 8001374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001378:	e009      	b.n	800138e <_ZN11QueueSender22ProcessPriorityRequestEv+0xee>
			else if (ret == HAL_TIMEOUT)
 800137a:	7efb      	ldrb	r3, [r7, #27]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d103      	bne.n	8001388 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe8>
				error = ErrorCode::Timeout;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001386:	e002      	b.n	800138e <_ZN11QueueSender22ProcessPriorityRequestEv+0xee>
			else
				error = ErrorCode::Unknown;
 8001388:	2302      	movs	r3, #2
 800138a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			Responces.emplace(
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f103 0428 	add.w	r4, r3, #40	; 0x28
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800139a:	f107 0008 	add.w	r0, r7, #8
 800139e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2300      	movs	r3, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f000 f89d 	bl	80014e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
			Responces.emplace(
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	4620      	mov	r0, r4
 80013b4:	f001 faaa 	bl	800290c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe8b 	bl	80010d8 <_ZN8ResponceD1Ev>
							error));
 80013c2:	e001      	b.n	80013c8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x128>
  __ASM volatile ("cpsie i" : : : "memory");
 80013c4:	b662      	cpsie	i
}
 80013c6:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdb0      	pop	{r4, r5, r7, pc}
 80013d0:	0801e024 	.word	0x0801e024
 80013d4:	0801e064 	.word	0x0801e064
 80013d8:	0801df84 	.word	0x0801df84

080013dc <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
		__disable_irq();
		if (!Requests.empty() && !WaitResponce) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fa7c 	bl	80028e8 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f083 0301 	eor.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d009      	beq.n	8001410 <_ZN11QueueSender15ProcessRequestsEv+0x34>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <_ZN11QueueSender15ProcessRequestsEv+0x34>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <_ZN11QueueSender15ProcessRequestsEv+0x36>
 8001410:	2300      	movs	r3, #0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d04d      	beq.n	80014b2 <_ZN11QueueSender15ProcessRequestsEv+0xd6>
			WaitResponce = true;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 800141e:	b662      	cpsie	i
}
 8001420:	bf00      	nop
			__enable_irq();

			auto &request = Requests.front();
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fb21 	bl	8002a6c <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 800142a:	60f8      	str	r0, [r7, #12]
			auto &data = request.Data;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	60bb      	str	r3, [r7, #8]

			assert(
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	7c1b      	ldrb	r3, [r3, #16]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd45 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d005      	beq.n	800144c <_ZN11QueueSender15ProcessRequestsEv+0x70>
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <_ZN11QueueSender15ProcessRequestsEv+0xe4>)
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <_ZN11QueueSender15ProcessRequestsEv+0xe8>)
 8001444:	21c7      	movs	r1, #199	; 0xc7
 8001446:	4820      	ldr	r0, [pc, #128]	; (80014c8 <_ZN11QueueSender15ProcessRequestsEv+0xec>)
 8001448:	f01b fc72 	bl	801cd30 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			CurrentResponceBuffer.resize(request.ResponceSize);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f001 fab5 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>

			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3368      	adds	r3, #104	; 0x68
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fae2 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 800146c:	4605      	mov	r5, r0
					CurrentResponceBuffer.size());
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3368      	adds	r3, #104	; 0x68
 8001472:	4618      	mov	r0, r3
 8001474:	f001 faeb 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001478:	4603      	mov	r3, r0
			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4629      	mov	r1, r5
 8001480:	4620      	mov	r0, r4
 8001482:	f015 f873 	bl	801656c <HAL_UART_Receive_IT>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f001 fad0 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001490:	4605      	mov	r5, r0
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f001 fadb 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014a0:	4629      	mov	r1, r5
 80014a2:	4620      	mov	r0, r4
 80014a4:	f014 fef8 	bl	8016298 <HAL_UART_Transmit>

			Requests.pop_front();
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 faf2 	bl	8002a94 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
		} else {
			__enable_irq();
		}
	}
 80014b0:	e001      	b.n	80014b6 <_ZN11QueueSender15ProcessRequestsEv+0xda>
  __ASM volatile ("cpsie i" : : : "memory");
 80014b2:	b662      	cpsie	i
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
 80014be:	bf00      	nop
 80014c0:	0801e090 	.word	0x0801e090
 80014c4:	0801e0d4 	.word	0x0801e0d4
 80014c8:	0801df84 	.word	0x0801df84

080014cc <_ZN8ResponceC1Ev>:
struct Responce {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd77 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	70fb      	strb	r3, [r7, #3]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7ff ffe9 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.Data = data;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 faf4 	bl	8002aec <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	731a      	strb	r2, [r3, #12]
		responce.Error = ErrorCode::Serialize(error);
 800150a:	7e3b      	ldrb	r3, [r7, #24]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fce5 	bl	8000edc <_ZN11QueueSender9ErrorCode9SerializeEh>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	739a      	strb	r2, [r3, #14]
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fcc5 	bl	8000eac <_ZN11QueueSender11MessageMode9SerializeEh>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	735a      	strb	r2, [r3, #13]
		return responce;
 800152a:	bf00      	nop
	}
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af02      	add	r7, sp, #8
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
		std::vector<uint8_t> data;
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd41 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
		data.resize(Info::Size);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2104      	movs	r1, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fa3a 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = data.data();
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fa69 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 800155e:	4603      	mov	r3, r0
 8001560:	60fb      	str	r3, [r7, #12]
		GetInfo().SerializeTo(&ptr);
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f000 f82b 	bl	80015be <_ZNK11QueueSender7GetInfoEv>
 8001568:	4603      	mov	r3, r0
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fcbc 	bl	8000ef4 <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f107 0210 	add.w	r2, r7, #16
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2302      	movs	r3, #2
 8001588:	6839      	ldr	r1, [r7, #0]
 800158a:	f7ff ffac 	bl	80014e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
		std::vector<uint8_t> data;
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f942 	bl	800281c <_ZNSt6vectorIhSaIhEED1Ev>
		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 8001598:	bf00      	nop
	}
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
		WaitResponce = false;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
		return {Requests.size(), Responces.size()};
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fb7e 	bl	8002cca <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	81bb      	strh	r3, [r7, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3328      	adds	r3, #40	; 0x28
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fb88 	bl	8002cee <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	81fb      	strh	r3, [r7, #14]
 80015e4:	2300      	movs	r3, #0
 80015e6:	89ba      	ldrh	r2, [r7, #12]
 80015e8:	f362 030f 	bfi	r3, r2, #0, #16
 80015ec:	89fa      	ldrh	r2, [r7, #14]
 80015ee:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f001 f86a 	bl	80026de <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fb70 	bl	8002d08 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3334      	adds	r3, #52	; 0x34
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fcd9 	bl	8000fe4 <_ZN7RequestC1Ev>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3348      	adds	r3, #72	; 0x48
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fcc7 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 800165a:	f240 1111 	movw	r1, #273	; 0x111
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x64>)
 8001660:	f01b fb66 	bl	801cd30 <__assert_func>
	}
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	0801dfa8 	.word	0x0801dfa8
 8001674:	0801e0f8 	.word	0x0801e0f8
 8001678:	0801df84 	.word	0x0801df84

0800167c <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3328      	adds	r3, #40	; 0x28
 8001692:	2201      	movs	r2, #1
 8001694:	4619      	mov	r1, r3
 8001696:	f014 ff69 	bl	801656c <HAL_UART_Receive_IT>
	}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fb3f 	bl	8002d30 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f083 0301 	eor.w	r3, r3, #1
 80016b8:	b2db      	uxtb	r3, r3
	}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 80016c2:	b590      	push	{r4, r7, lr}
 80016c4:	b097      	sub	sp, #92	; 0x5c
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d100      	bne.n	80016d8 <_ZN13HeadInterface4SendERK8Responce+0x16>
 80016d6:	e7f9      	b.n	80016cc <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 f9b7 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80016e0:	4603      	mov	r3, r0
 80016e2:	3306      	adds	r3, #6
 80016e4:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3348      	adds	r3, #72	; 0x48
 80016ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 f96b 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3348      	adds	r3, #72	; 0x48
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 f99a 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 80016fc:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 80016fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	653a      	str	r2, [r7, #80]	; 0x50
 8001704:	22ff      	movs	r2, #255	; 0xff
 8001706:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8001708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	653a      	str	r2, [r7, #80]	; 0x50
 800170e:	22aa      	movs	r2, #170	; 0xaa
 8001710:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8001712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	653a      	str	r2, [r7, #80]	; 0x50
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	7b12      	ldrb	r2, [r2, #12]
 800171c:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 800171e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	653a      	str	r2, [r7, #80]	; 0x50
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	7b52      	ldrb	r2, [r2, #13]
 8001728:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 800172a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	653a      	str	r2, [r7, #80]	; 0x50
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	7b92      	ldrb	r2, [r2, #14]
 8001734:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fb06 	bl	8002d4a <_ZNKSt6vectorIhSaIhEE4dataEv>
 800173e:	4604      	mov	r4, r0
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f001 f983 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4621      	mov	r1, r4
 800174e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001750:	f01b fb58 	bl	801ce04 <memcpy>

		ptr += responce.Data.size();
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f979 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800175c:	4602      	mov	r2, r0
 800175e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001760:	4413      	add	r3, r2
 8001762:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 8001764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001766:	22af      	movs	r2, #175	; 0xaf
 8001768:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3348      	adds	r3, #72	; 0x48
 8001776:	4618      	mov	r0, r3
 8001778:	f001 f969 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800177c:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3348      	adds	r3, #72	; 0x48
 8001782:	4618      	mov	r0, r3
 8001784:	f001 f954 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001788:	4601      	mov	r1, r0
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001790:	4618      	mov	r0, r3
 8001792:	f01b fb37 	bl	801ce04 <memcpy>

		auto ret = HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3348      	adds	r3, #72	; 0x48
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 f946 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 80017a4:	4601      	mov	r1, r0
 80017a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a8:	b29a      	uxth	r2, r3
				sz, TimeoutS);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		auto ret = HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 80017ae:	4620      	mov	r0, r4
 80017b0:	f014 fd72 	bl	8016298 <HAL_UART_Transmit>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		TransmitComplete = true;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		auto t = ret;
 80017c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80017c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	}
 80017ca:	bf00      	nop
 80017cc:	375c      	adds	r7, #92	; 0x5c
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}

080017d2 <_ZN7RequestC1EOS_>:
struct Request {
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fcff 	bl	80011e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	7c1a      	ldrb	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	741a      	strb	r2, [r3, #16]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	7c5a      	ldrb	r2, [r3, #17]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	745a      	strb	r2, [r3, #17]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8001816:	6838      	ldr	r0, [r7, #0]
 8001818:	f7ff ff43 	bl	80016a2 <_ZNK13HeadInterface10HasRequestEv>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <_ZN13HeadInterface10GetRequestEv+0x24>
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <_ZN13HeadInterface10GetRequestEv+0x50>)
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8001826:	f240 1143 	movw	r1, #323	; 0x143
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <_ZN13HeadInterface10GetRequestEv+0x58>)
 800182c:	f01b fa80 	bl	801cd30 <__assert_func>
		auto request = std::move(Requests.front());
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fa98 	bl	8002d68 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 8001838:	4603      	mov	r3, r0
 800183a:	4618      	mov	r0, r3
 800183c:	f001 f809 	bl	8002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffc4 	bl	80017d2 <_ZN7RequestC1EOS_>
		Requests.pop();
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fa98 	bl	8002d82 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8001852:	bf00      	nop
	}
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	0801e134 	.word	0x0801e134
 8001860:	0801e144 	.word	0x0801e144
 8001864:	0801df84 	.word	0x0801df84

08001868 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	2b07      	cmp	r3, #7
 8001892:	f200 80d6 	bhi.w	8001a42 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018bd 	.word	0x080018bd
 80018a0:	080018e7 	.word	0x080018e7
 80018a4:	08001911 	.word	0x08001911
 80018a8:	08001935 	.word	0x08001935
 80018ac:	0800196b 	.word	0x0800196b
 80018b0:	0800198f 	.word	0x0800198f
 80018b4:	080019c1 	.word	0x080019c1
 80018b8:	080019d9 	.word	0x080019d9
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018c2:	2bff      	cmp	r3, #255	; 0xff
 80018c4:	d10b      	bne.n	80018de <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3328      	adds	r3, #40	; 0x28
 80018d4:	2201      	movs	r2, #1
 80018d6:	4619      	mov	r1, r3
 80018d8:	f014 fe48 	bl	801656c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 80018dc:	e0b5      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fecc 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80018e4:	e0b1      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018ec:	2baa      	cmp	r3, #170	; 0xaa
 80018ee:	d10b      	bne.n	8001908 <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3328      	adds	r3, #40	; 0x28
 80018fe:	2201      	movs	r2, #1
 8001900:	4619      	mov	r1, r3
 8001902:	f014 fe33 	bl	801656c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8001906:	e0a0      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff feb7 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 800190e:	e09c      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2203      	movs	r2, #3
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3328      	adds	r3, #40	; 0x28
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f014 fe1d 	bl	801656c <HAL_UART_Receive_IT>
			break;
 8001932:	e08a      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f001 f83b 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2204      	movs	r2, #4
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3328      	adds	r3, #40	; 0x28
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	f014 fe02 	bl	801656c <HAL_UART_Receive_IT>
			break;
 8001968:	e06f      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3328      	adds	r3, #40	; 0x28
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	f014 fdf0 	bl	801656c <HAL_UART_Receive_IT>
			break;
 800198c:	e05d      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2206      	movs	r2, #6
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3334      	adds	r3, #52	; 0x34
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 f841 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 80019ae:	4601      	mov	r1, r0
					RequestSize);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	4620      	mov	r0, r4
 80019ba:	f014 fdd7 	bl	801656c <HAL_UART_Receive_IT>
			break;
 80019be:	e044      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2207      	movs	r2, #7
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3328      	adds	r3, #40	; 0x28
 80019ce:	2201      	movs	r2, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	f014 fdcb 	bl	801656c <HAL_UART_Receive_IT>
			break;
 80019d6:	e038      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019de:	2baf      	cmp	r3, #175	; 0xaf
 80019e0:	d12b      	bne.n	8001a3a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.push(std::move(CurrentRequest));
 80019e2:	687c      	ldr	r4, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3334      	adds	r3, #52	; 0x34
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 ff32 	bl	8002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4619      	mov	r1, r3
 80019f2:	4620      	mov	r0, r4
 80019f4:	f001 f9d1 	bl	8002d9a <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>
				CurrentRequest = { };
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fad3 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff fb38 	bl	80010a0 <_ZN7RequestaSEOS_>
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fae2 	bl	8000ffe <_ZN7RequestD1Ev>
			}
			ResetReadState();
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fe1e 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001a40:	e003      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fe1a 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	bf00      	nop

08001a54 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8001a66:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8001a68:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001a6c:	4819      	ldr	r0, [pc, #100]	; (8001ad4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8001a6e:	f01b f95f 	bl	801cd30 <__assert_func>
			assert(*ptr);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8001a7e:	f240 119d 	movw	r1, #413	; 0x19d
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8001a84:	f01b f954 	bl	801cd30 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	8812      	ldrh	r2, [r2, #0]
 8001a90:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	1c9a      	adds	r2, r3, #2
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	8852      	ldrh	r2, [r2, #2]
 8001aa4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1c9a      	adds	r2, r3, #2
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	8892      	ldrh	r2, [r2, #4]
 8001ab8:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c9a      	adds	r2, r3, #2
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	601a      	str	r2, [r3, #0]
		}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	0801df50 	.word	0x0801df50
 8001ad0:	0801e168 	.word	0x0801e168
 8001ad4:	0801df84 	.word	0x0801df84
 8001ad8:	0801dfa0 	.word	0x0801dfa0

08001adc <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001af6:	f001 f962 	bl	8002dbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 f96c 	bl	8002df4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 f98a 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	bf8c      	ite	hi
 8001b2e:	2301      	movhi	r3, #1
 8001b30:	2300      	movls	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f804 	bl	8001b46 <_ZN17IMUFrameContainer6RemoveEv>
	}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 f983 	bl	8002e5c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 f993 	bl	8002ea2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e038      	b.n	8001bf8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d30b      	bcc.n	8001ba8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 f950 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d901      	bls.n	8001bac <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8001bac:	2300      	movs	r3, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e020      	b.n	8001bf8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8001bb6:	68fc      	ldr	r4, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 f93c 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f001 f978 	bl	8002ec6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f107 0414 	add.w	r4, r7, #20
 8001bdc:	461d      	mov	r5, r3
 8001bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	461d      	mov	r5, r3
 8001bea:	f107 0414 	add.w	r4, r7, #20
 8001bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	602b      	str	r3, [r5, #0]
		return true;
 8001bf6:	2301      	movs	r3, #1
	}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bdb0      	pop	{r4, r5, r7, pc}

08001c00 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	801a      	strh	r2, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 f90e 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	805a      	strh	r2, [r3, #2]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	809a      	strh	r2, [r3, #4]
	}
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type FrameBySeq = 0;
		static constexpr Type Info = 1;
		static constexpr Type LatestFrame = 2;
		static constexpr Type Reset = 3;

		static uint8_t Serialize(Type mode) {
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
			return mode;
 8001c40:	79fb      	ldrb	r3, [r7, #7]
		}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
			return meta;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
		}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type UnknownMode = 2;
		static constexpr Type BadRequest = 3;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7c1b      	ldrb	r3, [r3, #16]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ffe7 	bl	8001c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 8001c88:	4a2c      	ldr	r2, [pc, #176]	; (8001d3c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 8001c8a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001c8e:	482c      	ldr	r0, [pc, #176]	; (8001d40 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 8001c90:	f01b f84e 	bl	801cd30 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fc19 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff ffc8 	bl	8001c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2111      	movs	r1, #17
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fe88 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fec7 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	739a      	strb	r2, [r3, #14]
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 f836 	bl	8002d4a <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8001ce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ce6:	f107 0218 	add.w	r2, r7, #24
 8001cea:	4619      	mov	r1, r3
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f7ff ff3b 	bl	8001b68 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8001cf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa6>
			responce.Error = ErrorCodes::FrameUnavailable;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	739a      	strb	r2, [r3, #14]
			return responce;
 8001d0c:	e00f      	b.n	8001d2e <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fe8d 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001d16:	4601      	mov	r1, r0
 8001d18:	f107 0217 	add.w	r2, r7, #23
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ff09 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	739a      	strb	r2, [r3, #14]

		return responce;
 8001d2c:	bf00      	nop
	}
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	3730      	adds	r7, #48	; 0x30
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	0801e1a0 	.word	0x0801e1a0
 8001d3c:	0801e1e8 	.word	0x0801e1e8
 8001d40:	0801df84 	.word	0x0801df84

08001d44 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7c1b      	ldrb	r3, [r3, #16]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff79 	bl	8001c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d006      	beq.n	8001d70 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa8>)
 8001d64:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 8001d66:	f240 2111 	movw	r1, #529	; 0x211
 8001d6a:	4822      	ldr	r0, [pc, #136]	; (8001df4 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 8001d6c:	f01a ffe0 	bl	801cd30 <__assert_func>

		Responce responce;
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff fbab 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff ff5a 	bl	8001c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2106      	movs	r1, #6
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fe1a 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fe59 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2203      	movs	r2, #3
 8001db0:	739a      	strb	r2, [r3, #14]
		}

		uint8_t *ptr = responce.Data.data();
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fe3b 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff1b 	bl	8001c00 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 8001dca:	f107 021c 	add.w	r2, r7, #28
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fe3d 	bl	8001a54 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	739a      	strb	r2, [r3, #14]

		return responce;
 8001de0:	bf00      	nop
	}
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	0801e23c 	.word	0x0801e23c
 8001df0:	0801e27c 	.word	0x0801e27c
 8001df4:	0801df84 	.word	0x0801df84

08001df8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
		assert(
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7c1b      	ldrb	r3, [r3, #16]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff1f 	bl	8001c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d006      	beq.n	8001e24 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 8001e18:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 8001e1a:	f240 2127 	movw	r1, #551	; 0x227
 8001e1e:	4821      	ldr	r0, [pc, #132]	; (8001ea4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 8001e20:	f01a ff86 	bl	801cd30 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fb51 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7ff ff00 	bl	8001c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2111      	movs	r1, #17
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fdc0 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fdff 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2203      	movs	r2, #3
 8001e64:	739a      	strb	r2, [r3, #14]
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fdb9 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fddb 	bl	8002a30 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	f107 0213 	add.w	r2, r7, #19
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fe57 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	739a      	strb	r2, [r3, #14]

		return responce;
 8001e90:	bf00      	nop
	}
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	0801e2cc 	.word	0x0801e2cc
 8001ea0:	0801e314 	.word	0x0801e314
 8001ea4:	0801df84 	.word	0x0801df84

08001ea8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>:

	Responce DoReset(const Request &request, IMUFrameContainer &container) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
		assert(
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7c1b      	ldrb	r3, [r3, #16]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fec7 	bl	8001c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d006      	beq.n	8001ed4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x2c>
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x84>)
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x88>)
 8001eca:	f240 213f 	movw	r1, #575	; 0x23f
 8001ece:	4819      	ldr	r0, [pc, #100]	; (8001f34 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x8c>)
 8001ed0:	f01a ff2e 	bl	801cd30 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff faf9 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f7ff fea8 	bl	8001c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fd68 	bl	80029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fda7 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2203      	movs	r2, #3
 8001f14:	739a      	strb	r2, [r3, #14]
		}

		container.Reset();
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	f7ff fde0 	bl	8001adc <_ZN17IMUFrameContainer5ResetEv>
		responce.Error = ErrorCodes::Success;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	739a      	strb	r2, [r3, #14]

		return responce;
 8001f22:	bf00      	nop
	}
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	0801e364 	.word	0x0801e364
 8001f30:	0801e3a8 	.word	0x0801e3a8
 8001f34:	0801df84 	.word	0x0801df84

08001f38 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU) {
		assert(request.PeripheryID == Periphery::Imu);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7c5b      	ldrb	r3, [r3, #17]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d006      	beq.n	8001f5c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x24>
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x9c>)
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001f52:	f240 2155 	movw	r1, #597	; 0x255
 8001f56:	4821      	ldr	r0, [pc, #132]	; (8001fdc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001f58:	f01a feea 	bl	801cd30 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7c1b      	ldrb	r3, [r3, #16]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fe74 	bl	8001c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d827      	bhi.n	8001fbc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x84>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x3c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08001f93 	.word	0x08001f93
 8001f7c:	08001fa1 	.word	0x08001fa1
 8001f80:	08001faf 	.word	0x08001faf
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	f7ff fe6c 	bl	8001c68 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8001f90:	e01b      	b.n	8001fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Info:
			return GetInfo(request, container);
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	f7ff fed3 	bl	8001d44 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8001f9e:	e014      	b.n	8001fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	f7ff ff26 	bl	8001df8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8001fac:	e00d      	b.n	8001fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Reset:
			return DoReset(request, container);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	f7ff ff77 	bl	8001ea8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>
 8001fba:	e006      	b.n	8001fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		default:
			assert(0 && "Unknown Mode");
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa8>)
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001fc0:	f240 2161 	movw	r1, #609	; 0x261
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001fc6:	f01a feb3 	bl	801cd30 <__assert_func>
		}
	}
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	0801e3f0 	.word	0x0801e3f0
 8001fd8:	0801e418 	.word	0x0801e418
 8001fdc:	0801df84 	.word	0x0801df84
 8001fe0:	0801e474 	.word	0x0801e474

08001fe4 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3348      	adds	r3, #72	; 0x48
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fc13 	bl	800281c <_ZNSt6vectorIhSaIhEED1Ev>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3334      	adds	r3, #52	; 0x34
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe ffff 	bl	8000ffe <_ZN7RequestD1Ev>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff faf9 	bl	80015fa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3368      	adds	r3, #104	; 0x68
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fbfc 	bl	800281c <_ZNSt6vectorIhSaIhEED1Ev>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3350      	adds	r3, #80	; 0x50
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe ffe8 	bl	8000ffe <_ZN7RequestD1Ev>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3328      	adds	r3, #40	; 0x28
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ffa3 	bl	8000f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fb4f 	bl	80026de <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	f000 ff53 	bl	8002f00 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ffeb 	bl	800204a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZN17IMUFrameContainerD1Ev>:
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 ff65 	bl	8002f66 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_ZN18MotherboardContextC1E17MotherboardConfig>:

	//SystemStateFactory SysState;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 80020a6:	b084      	sub	sp, #16
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	f107 0014 	add.w	r0, r7, #20
 80020b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		HeadService{conf.HeadServiceUart, conf.HeadTimeout},
		HeadStream{conf.HeadStreamUart, conf.HeadTimeout},
		Body{conf.BodyUart, conf.BodyTimeout},
		FrameContainer{},
		IMU{conf.IMUSpi},
		IMUHandler{} {}
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6979      	ldr	r1, [r7, #20]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff faa8 	bl	8001614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3360      	adds	r3, #96	; 0x60
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff faa1 	bl	8001614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	33c0      	adds	r3, #192	; 0xc0
 80020d6:	6a39      	ldr	r1, [r7, #32]
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ff9c 	bl	8001018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80020e6:	2230      	movs	r2, #48	; 0x30
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f01a feb2 	bl	801ce54 <memset>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ffb4 	bl	8002064 <_ZN17IMUFrameContainerC1Ev>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fabc 	bl	8000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002112:	2200      	movs	r2, #0
 8002114:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002124:	b004      	add	sp, #16
 8002126:	4770      	bx	lr

08002128 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fde8 	bl	8002d08 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3334      	adds	r3, #52	; 0x34
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe ff51 	bl	8000fe4 <_ZN7RequestC1Ev>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3348      	adds	r3, #72	; 0x48
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe ff3f 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fefb 	bl	8000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3328      	adds	r3, #40	; 0x28
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fae5 	bl	8002742 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3350      	adds	r3, #80	; 0x50
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe ff31 	bl	8000fe4 <_ZN7RequestC1Ev>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3368      	adds	r3, #104	; 0x68
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff17 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ffb9 	bl	8002128 <_ZN13HeadInterfaceC1Ev>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ffb4 	bl	8002128 <_ZN13HeadInterfaceC1Ev>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	33c0      	adds	r3, #192	; 0xc0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ffca 	bl	800215e <_ZN11QueueSenderC1Ev>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff47 	bl	8002064 <_ZN17IMUFrameContainerC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff46 	bl	800208c <_ZN17IMUFrameContainerD1Ev>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	33c0      	adds	r3, #192	; 0xc0
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff04 	bl	8002012 <_ZN11QueueSenderD1Ev>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3360      	adds	r3, #96	; 0x60
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fee8 	bl	8001fe4 <_ZN13HeadInterfaceD1Ev>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fee4 	bl	8001fe4 <_ZN13HeadInterfaceD1Ev>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f000 feba 	bl	8002fb0 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ffe5 	bl	8002226 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	3334      	adds	r3, #52	; 0x34
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f7fe ff0b 	bl	80010a0 <_ZN7RequestaSEOS_>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3348      	adds	r3, #72	; 0x48
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 fb11 	bl	80028be <_ZNSt6vectorIhSaIhEEaSEOS1_>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	659a      	str	r2, [r3, #88]	; 0x58
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fe7f 	bl	8002fd6 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fe5c 	bl	8002fb0 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3328      	adds	r3, #40	; 0x28
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f7ff ffdc 	bl	80022c2 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	3350      	adds	r3, #80	; 0x50
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7fe fec2 	bl	80010a0 <_ZN7RequestaSEOS_>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3368      	adds	r3, #104	; 0x68
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f000 fabc 	bl	80028be <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	675a      	str	r2, [r3, #116]	; 0x74
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	679a      	str	r2, [r3, #120]	; 0x78
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fe43 	bl	8002ffc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_ZN18MotherboardContextaSEOS_>:
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff50 	bl	8002246 <_ZN13HeadInterfaceaSEOS_>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f7ff ff47 	bl	8002246 <_ZN13HeadInterfaceaSEOS_>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	33c0      	adds	r3, #192	; 0xc0
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7ff ff8c 	bl	80022e2 <_ZN11QueueSenderaSEOS_>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f7ff ffc1 	bl	8002360 <_ZN17IMUFrameContaineraSEOS_>
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f502 70b8 	add.w	r0, r2, #368	; 0x170
 80023e6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80023ea:	f241 1250 	movw	r2, #4432	; 0x1150
 80023ee:	4619      	mov	r1, r3
 80023f0:	f01a fd08 	bl	801ce04 <memcpy>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fa:	f893 22c1 	ldrb.w	r2, [r3, #705]	; 0x2c1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002404:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8002414:	b084      	sub	sp, #16
 8002416:	b5b0      	push	{r4, r5, r7, lr}
 8002418:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 800241c:	b086      	sub	sp, #24
 800241e:	af04      	add	r7, sp, #16
 8002420:	f241 24d8 	movw	r4, #4824	; 0x12d8
 8002424:	443c      	add	r4, r7
 8002426:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 800242a:	4c1e      	ldr	r4, [pc, #120]	; (80024a4 <MotherboardInit+0x90>)
 800242c:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8002430:	4423      	add	r3, r4
 8002432:	19dc      	adds	r4, r3, r7
 8002434:	466d      	mov	r5, sp
 8002436:	f241 23e4 	movw	r3, #4836	; 0x12e4
 800243a:	443b      	add	r3, r7
 800243c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002440:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002444:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8002448:	443b      	add	r3, r7
 800244a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244c:	4620      	mov	r0, r4
 800244e:	f7ff fe2a 	bl	80020a6 <_ZN18MotherboardContextC1E17MotherboardConfig>
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <MotherboardInit+0x90>)
 8002454:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8002458:	f103 0308 	add.w	r3, r3, #8
 800245c:	443b      	add	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	4811      	ldr	r0, [pc, #68]	; (80024a8 <MotherboardInit+0x94>)
 8002462:	f7ff ff95 	bl	8002390 <_ZN18MotherboardContextaSEOS_>
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MotherboardInit+0x90>)
 8002468:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800246c:	f103 0308 	add.w	r3, r3, #8
 8002470:	443b      	add	r3, r7
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff feba 	bl	80021ec <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 8002478:	480b      	ldr	r0, [pc, #44]	; (80024a8 <MotherboardInit+0x94>)
 800247a:	f7ff f8ff 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <MotherboardInit+0x98>)
 8002480:	f7ff f8fc 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8002484:	2100      	movs	r1, #0
 8002486:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80024b0 <MotherboardInit+0x9c>
 800248a:	480a      	ldr	r0, [pc, #40]	; (80024b4 <MotherboardInit+0xa0>)
 800248c:	f7fe f918 	bl	80006c0 <_ZN10BHYWrapper4InitEfm>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80024a0:	b004      	add	sp, #16
 80024a2:	4770      	bx	lr
 80024a4:	ffffed38 	.word	0xffffed38
 80024a8:	240001d0 	.word	0x240001d0
 80024ac:	24000230 	.word	0x24000230
 80024b0:	44480000 	.word	0x44480000
 80024b4:	24000340 	.word	0x24000340

080024b8 <MotherboardTick>:

int MotherboardTick() {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	; 0x40
 80024bc:	af02      	add	r7, sp, #8
	if (mbctx.UpdateIMU)
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <MotherboardTick+0xcc>)
 80024c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c4:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 80024cc:	482e      	ldr	r0, [pc, #184]	; (8002588 <MotherboardTick+0xd0>)
 80024ce:	f7fe fa4f 	bl	8000970 <_ZN10BHYWrapper4PollEv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f083 0301 	eor.w	r3, r3, #1
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <MotherboardTick+0xcc>)
 80024dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e0:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1

	if (mbctx.HeadService.HasRequest()) {
 80024e4:	4827      	ldr	r0, [pc, #156]	; (8002584 <MotherboardTick+0xcc>)
 80024e6:	f7ff f8dc 	bl	80016a2 <_ZNK13HeadInterface10HasRequestEv>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02d      	beq.n	800254c <MotherboardTick+0x94>
		auto request = mbctx.HeadService.GetRequest();
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4924      	ldr	r1, [pc, #144]	; (8002584 <MotherboardTick+0xcc>)
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f989 	bl	800180c <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 80024fa:	7d7b      	ldrb	r3, [r7, #21]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <MotherboardTick+0x4e>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d00a      	beq.n	800251a <MotherboardTick+0x62>
 8002504:	e01e      	b.n	8002544 <MotherboardTick+0x8c>
		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f9a2 	bl	8002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800250e:	4603      	mov	r3, r0
 8002510:	4619      	mov	r1, r3
 8002512:	481e      	ldr	r0, [pc, #120]	; (800258c <MotherboardTick+0xd4>)
 8002514:	f7fe fded 	bl	80010f2 <_ZN11QueueSender10AddRequestEO7Request>
			break;
 8002518:	e014      	b.n	8002544 <MotherboardTick+0x8c>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request,
 800251a:	f107 0018 	add.w	r0, r7, #24
 800251e:	1d3a      	adds	r2, r7, #4
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MotherboardTick+0xd0>)
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <MotherboardTick+0xd8>)
 8002526:	491b      	ldr	r1, [pc, #108]	; (8002594 <MotherboardTick+0xdc>)
 8002528:	f7ff fd06 	bl	8001f38 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>
			mbctx.HeadService.Send(
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	4619      	mov	r1, r3
 8002532:	4814      	ldr	r0, [pc, #80]	; (8002584 <MotherboardTick+0xcc>)
 8002534:	f7ff f8c5 	bl	80016c2 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request,
 8002538:	f107 0318 	add.w	r3, r7, #24
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fdcb 	bl	80010d8 <_ZN8ResponceD1Ev>
							mbctx.FrameContainer, mbctx.IMU));
			break;
 8002542:	bf00      	nop
		auto request = mbctx.HeadService.GetRequest();
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fd59 	bl	8000ffe <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 800254c:	480f      	ldr	r0, [pc, #60]	; (800258c <MotherboardTick+0xd4>)
 800254e:	f7fe fe29 	bl	80011a4 <_ZNK11QueueSender11HasResponceEv>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <MotherboardTick+0xc2>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 8002558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255c:	490b      	ldr	r1, [pc, #44]	; (800258c <MotherboardTick+0xd4>)
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fe6e 	bl	8001240 <_ZN11QueueSender11GetResponceEv>
 8002564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <MotherboardTick+0xcc>)
 800256c:	f7ff f8a9 	bl	80016c2 <_ZN13HeadInterface4SendERK8Responce>
 8002570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fdaf 	bl	80010d8 <_ZN8ResponceD1Ev>
	}

	return 0;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	240001d0 	.word	0x240001d0
 8002588:	24000340 	.word	0x24000340
 800258c:	24000290 	.word	0x24000290
 8002590:	2400030c 	.word	0x2400030c
 8002594:	24001490 	.word	0x24001490

08002598 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4906      	ldr	r1, [pc, #24]	; (80025bc <MotherboardOnStrobe+0x24>)
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fa1e 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4804      	ldr	r0, [pc, #16]	; (80025c0 <MotherboardOnStrobe+0x28>)
 80025ae:	f7ff faab 	bl	8001b08 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	24000340 	.word	0x24000340
 80025c0:	2400030c 	.word	0x2400030c

080025c4 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <MotherboardOnBodyRecieveComplete+0x10>)
 80025ca:	f7fe ffea 	bl	80015a2 <_ZN11QueueSender16ProcessResponcesEv>
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	24000290 	.word	0x24000290

080025d8 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 80025de:	f7ff f951 	bl	8001884 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	240001d0 	.word	0x240001d0

080025ec <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <MotherboardOnHeadStreamRecieveComplete+0x10>)
 80025f2:	f7ff f947 	bl	8001884 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	24000230 	.word	0x24000230

08002600 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 8002606:	f7ff f92f 	bl	8001868 <_ZN13HeadInterface14FinishTransmitEv>
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	240001d0 	.word	0x240001d0

08002614 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 800261a:	f7ff f925 	bl	8001868 <_ZN13HeadInterface14FinishTransmitEv>
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	24000230 	.word	0x24000230

08002628 <MotherboardOnBodyTimerTick>:

void MotherboardOnBodyTimerTick() {
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessPriorityRequest();
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <MotherboardOnBodyTimerTick+0x14>)
 800262e:	f7fe fe37 	bl	80012a0 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 8002632:	4802      	ldr	r0, [pc, #8]	; (800263c <MotherboardOnBodyTimerTick+0x14>)
 8002634:	f7fe fed2 	bl	80013dc <_ZN11QueueSender15ProcessRequestsEv>
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	24000290 	.word	0x24000290

08002640 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <MotherboardOnImuTimerTick+0x1c>)
 8002646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264a:	2201      	movs	r2, #1
 800264c:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	240001d0 	.word	0x240001d0

08002660 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fcea 	bl	8003042 <_ZNSaI7RequestED1Ev>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fccd 	bl	8003022 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fce5 	bl	800305a <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80026b2:	3304      	adds	r3, #4
 80026b4:	461a      	mov	r2, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fd35 	bl	8003126 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fd47 	bl	800315a <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ffc6 	bl	8002660 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80026de:	b580      	push	{r7, lr}
 80026e0:	b08a      	sub	sp, #40	; 0x28
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd50 	bl	8003192 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fd59 	bl	80031b0 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd64 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8002706:	4603      	mov	r3, r0
 8002708:	f107 0218 	add.w	r2, r7, #24
 800270c:	f107 0108 	add.w	r1, r7, #8
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fd83 	bl	800321c <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ffbe 	bl	800269a <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4618      	mov	r0, r3
 8002722:	3728      	adds	r7, #40	; 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fd9d 	bl	8003272 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
	: c() { }
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	2328      	movs	r3, #40	; 0x28
 8002750:	461a      	mov	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f01a fb7e 	bl	801ce54 <memset>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ffe4 	bl	8002728 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 800276a:	b580      	push	{r7, lr}
 800276c:	b08a      	sub	sp, #40	; 0x28
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002772:	f107 0308 	add.w	r3, r7, #8
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fdad 	bl	80032d8 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 800277e:	f107 0318 	add.w	r3, r7, #24
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fdb6 	bl	80032f6 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fdc1 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8002792:	4603      	mov	r3, r0
 8002794:	f107 0218 	add.w	r2, r7, #24
 8002798:	f107 0108 	add.w	r1, r7, #8
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fde0 	bl	8003362 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fd75 	bl	8003294 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fdef 	bl	80033a0 <_ZNSaIhEC1Ev>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fdf7 	bl	80033b8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fdff 	bl	80033e0 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8002802:	461a      	mov	r2, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fdf6 	bl	80033f6 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fbc3 	bl	8000f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800281c:	b5b0      	push	{r4, r5, r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681c      	ldr	r4, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fdf4 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002834:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002836:	461a      	mov	r2, r3
 8002838:	4629      	mov	r1, r5
 800283a:	4620      	mov	r0, r4
 800283c:	f000 fdf9 	bl	8003432 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ffd2 	bl	80027ec <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bdb0      	pop	{r4, r5, r7, pc}

08002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 800287c:	429a      	cmp	r2, r3
 800287e:	d012      	beq.n	80028a6 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8002880:	687c      	ldr	r4, [r7, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699d      	ldr	r5, [r3, #24]
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	f000 fde1 	bl	800344e <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4629      	mov	r1, r5
 8002892:	4620      	mov	r0, r4
 8002894:	f000 fde6 	bl	8003464 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f103 0214 	add.w	r2, r3, #20
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80028a4:	e007      	b.n	80028b6 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f000 fdd1 	bl	800344e <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fdeb 	bl	800348c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bdb0      	pop	{r4, r5, r7, pc}

080028be <_ZNSt6vectorIhSaIhEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80028be:	b590      	push	{r4, r7, lr}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f000 fe21 	bl	8003514 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4622      	mov	r2, r4
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fe26 	bl	800352a <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 80028de:	687b      	ldr	r3, [r7, #4]
      }
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 0218 	add.w	r2, r3, #24
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3308      	adds	r3, #8
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f000 fe52 	bl	80035a6 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
	{ return c.emplace_back(std::forward<_Args>(__args)...); }
#else
      template<typename... _Args>
	void
	emplace(_Args&&... __args)
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8002916:	687c      	ldr	r4, [r7, #4]
 8002918:	6838      	ldr	r0, [r7, #0]
 800291a:	f000 fe58 	bl	80035ce <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 800291e:	4603      	mov	r3, r0
 8002920:	4619      	mov	r1, r3
 8002922:	4620      	mov	r0, r4
 8002924:	f000 fe5e 	bl	80035e4 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}

08002930 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fe7d 	bl	800363a <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 8002940:	4603      	mov	r3, r0
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
	return c.front();
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fe82 	bl	800365e <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 800295a:	4603      	mov	r3, r0
      }
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800297a:	b590      	push	{r4, r7, lr}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	f000 fe7e 	bl	8003686 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fe84 	bl	800369c <_ZNSaIhEC1ERKS_>
 8002994:	687c      	ldr	r4, [r7, #4]
 8002996:	6838      	ldr	r0, [r7, #0]
 8002998:	f000 fe75 	bl	8003686 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	4620      	mov	r0, r4
 80029a2:	f000 fe89 	bl	80036b8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}

080029b0 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fe9f 	bl	80036fe <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f83b 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80029d8:	4602      	mov	r2, r0
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	4293      	cmp	r3, r2
 80029de:	bf8c      	ite	hi
 80029e0:	2301      	movhi	r3, #1
 80029e2:	2300      	movls	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f82f 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80029f0:	4602      	mov	r2, r0
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 febb 	bl	8003774 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 80029fe:	e013      	b.n	8002a28 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f824 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002a06:	4602      	mov	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	bf34      	ite	cc
 8002a0e:	2301      	movcc	r3, #1
 8002a10:	2300      	movcs	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 ff5e 	bl	80038e4 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 ff70 	bl	8003924 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fb89 	bl	8003192 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 ff59 	bl	800393c <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 8002a8a:	4603      	mov	r3, r0
      }
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d011      	beq.n	8002ace <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fb8e 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f000 ff4a 	bl	8003954 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f103 0214 	add.w	r2, r3, #20
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8002acc:	e002      	b.n	8002ad4 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 ff4d 	bl	800396e <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	f000 80e0 	beq.w	8002cc0 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8002b00:	f7ff ffec 	bl	8002adc <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d042      	beq.n	8002b90 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8002b0a:	f7fe fac1 	bl	8001090 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f083 0301 	eor.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fc7d 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b22:	4604      	mov	r4, r0
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 ff49 	bl	80039be <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4620      	mov	r0, r4
 8002b32:	f000 ff4f 	bl	80039d4 <_ZStneRKSaIhES1_>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 8002b40:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 ff50 	bl	80039ec <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f000 fc4a 	bl	80033f6 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fc50 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b7c:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 ff1c 	bl	80039be <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b86:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f000 ff3c 	bl	8003a08 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8002b90:	6838      	ldr	r0, [r7, #0]
 8002b92:	f7ff ff5c 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002b96:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 ff43 	bl	8003a24 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	bf8c      	ite	hi
 8002ba6:	2301      	movhi	r3, #1
 8002ba8:	2300      	movls	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d030      	beq.n	8002c12 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f000 ff46 	bl	8003a42 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	6838      	ldr	r0, [r7, #0]
 8002bba:	f000 ff52 	bl	8003a62 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	68f9      	ldr	r1, [r7, #12]
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 ff5d 	bl	8003a84 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8002bca:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681c      	ldr	r4, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fc20 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002bdc:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002bde:	461a      	mov	r2, r3
 8002be0:	4629      	mov	r1, r5
 8002be2:	4620      	mov	r0, r4
 8002be4:	f000 fc25 	bl	8003432 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f000 fbfc 	bl	80033f6 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e050      	b.n	8002cb4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ff1b 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d020      	beq.n	8002c6c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	f000 ff09 	bl	8003a42 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002c30:	4604      	mov	r4, r0
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	f000 ff15 	bl	8003a62 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002c38:	4605      	mov	r5, r0
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 ff3e 	bl	8003abc <_ZNSt6vectorIhSaIhEE5beginEv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4629      	mov	r1, r5
 8002c46:	4620      	mov	r0, r4
 8002c48:	f000 ff48 	bl	8003adc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 ff5c 	bl	8003b0c <_ZNSt6vectorIhSaIhEE3endEv>
 8002c54:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fbdf 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002c5e:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002c60:	461a      	mov	r2, r3
 8002c62:	4629      	mov	r1, r5
 8002c64:	4620      	mov	r0, r4
 8002c66:	f000 ff62 	bl	8003b2e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8002c6a:	e023      	b.n	8002cb4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681d      	ldr	r5, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681c      	ldr	r4, [r3, #0]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff feea 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	18e1      	adds	r1, r4, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4628      	mov	r0, r5
 8002c86:	f000 ff60 	bl	8003b4a <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681c      	ldr	r4, [r3, #0]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fedd 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002c94:	4603      	mov	r3, r0
 8002c96:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fbba 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002ca8:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002caa:	4632      	mov	r2, r6
 8002cac:	4629      	mov	r1, r5
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f000 ff63 	bl	8003b7a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	441a      	add	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8002cc0:	687b      	ldr	r3, [r7, #4]
    }
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cca <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f103 0218 	add.w	r2, r3, #24
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3308      	adds	r3, #8
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f000 ff5c 	bl	8003b9c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>:
      size() const
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ff7b 	bl	8003bf4 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	: c() { }
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	2328      	movs	r3, #40	; 0x28
 8002d16:	461a      	mov	r2, r3
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f01a f89b 	bl	801ce54 <memset>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe f91f 	bl	8000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fdd4 	bl	80028e8 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fde3 	bl	8003924 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	return c.front();
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fe7a 	bl	8002a6c <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8002d78:	4603      	mov	r3, r0
      }
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe81 	bl	8002a94 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>:
      push(value_type&& __x)
 8002d9a:	b590      	push	{r4, r7, lr}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002da4:	687c      	ldr	r4, [r7, #4]
 8002da6:	6838      	ldr	r0, [r7, #0]
 8002da8:	f7ff fd53 	bl	8002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4619      	mov	r1, r3
 8002db0:	4620      	mov	r0, r4
 8002db2:	f000 ff31 	bl	8003c18 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}

08002dbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 8002dbe:	b5b0      	push	{r4, r5, r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 ff33 	bl	8003c3a <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 ff3a 	bl	8003c52 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 8002dde:	4602      	mov	r2, r0
 8002de0:	462b      	mov	r3, r5
 8002de2:	4621      	mov	r1, r4
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 ff49 	bl	8003c7c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 8002dea:	68fb      	ldr	r3, [r7, #12]
      }
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bdb0      	pop	{r4, r5, r7, pc}

08002df4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
      push_front(const value_type& __x)
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d00e      	beq.n	8002e28 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8002e0a:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8002e10:	3b14      	subs	r3, #20
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f000 ff96 	bl	8003d46 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f1a3 0214 	sub.w	r2, r3, #20
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]
      }
 8002e26:	e003      	b.n	8002e30 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 ff9e 	bl	8003d6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0218 	add.w	r2, r3, #24
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3308      	adds	r3, #8
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f000 ffd3 	bl	8003df8 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d011      	beq.n	8002e94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f1a3 0214 	sub.w	r2, r3, #20
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ffe6 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f000 ffea 	bl	8003e66 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8002e92:	e002      	b.n	8002e9a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fff3 	bl	8003e80 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f103 0218 	add.w	r2, r3, #24
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f001 f80c 	bl	8003ed4 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 f80f 	bl	8003efc <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8002ede:	4603      	mov	r3, r0
      }
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f001 f829 	bl	8003f48 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 f80c 	bl	8003f28 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002f10:	2100      	movs	r1, #0
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f001 f824 	bl	8003f60 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f001 f874 	bl	800402c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 f886 	bl	8004060 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ffc6 	bl	8002ee8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b08a      	sub	sp, #40	; 0x28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 f88f 	bl	8004098 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8002f7a:	f107 0318 	add.w	r3, r7, #24
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 f898 	bl	80040b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 ff61 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f107 0218 	add.w	r2, r7, #24
 8002f94:	f107 0108 	add.w	r1, r7, #8
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f001 f8b7 	bl	800410c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ffbe 	bl	8002f22 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002fba:	6838      	ldr	r0, [r7, #0]
 8002fbc:	f001 f8b3 	bl	8004126 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f001 f8b8 	bl	800413c <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002fcc:	687b      	ldr	r3, [r7, #4]
      }
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd90      	pop	{r4, r7, pc}

08002fd6 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002fd6:	b590      	push	{r4, r7, lr}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	f001 f8cc 	bl	800417e <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4622      	mov	r2, r4
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f001 f8d1 	bl	8004194 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002ff2:	687b      	ldr	r3, [r7, #4]
      }
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}

08002ffc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	f001 f8e5 	bl	80041d6 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800300c:	4603      	mov	r3, r0
 800300e:	4622      	mov	r2, r4
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f001 f8ea 	bl	80041ec <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8003018:	687b      	ldr	r3, [r7, #4]
      }
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}

08003022 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f001 f8ff 	bl	800422e <_ZNSaI7RequestEC1Ev>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f907 	bl	8004246 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_ZNSaI7RequestED1Ev>:
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f001 f914 	bl	8004278 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800305a:	b590      	push	{r4, r7, lr}
 800305c:	b089      	sub	sp, #36	; 0x24
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003064:	2014      	movs	r0, #20
 8003066:	f7fd ff0c 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003076:	2308      	movs	r3, #8
 8003078:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3302      	adds	r3, #2
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	f107 0210 	add.w	r2, r7, #16
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f001 f8ff 	bl	800428e <_ZSt3maxIjERKT_S2_S2_>
 8003090:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f001 f909 	bl	80042b6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	1acb      	subs	r3, r1, r3
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80030ba:	4413      	add	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4413      	add	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	69b9      	ldr	r1, [r7, #24]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f001 f90f 	bl	80042f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3308      	adds	r3, #8
 80030d6:	69b9      	ldr	r1, [r7, #24]
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 f923 	bl	8004324 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 0218 	add.w	r2, r3, #24
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3b04      	subs	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f001 f91a 	bl	8004324 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80030fc:	2014      	movs	r0, #20
 80030fe:	f7fd fec0 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003102:	4602      	mov	r2, r0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	fbb3 f1f2 	udiv	r1, r3, r2
 800310a:	fb01 f202 	mul.w	r2, r1, r2
 800310e:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	619a      	str	r2, [r3, #24]
    }
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d209      	bcs.n	8003152 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f001 f909 	bl	800435c <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3304      	adds	r3, #4
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e7f1      	b.n	8003136 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	4618      	mov	r0, r3
 800316e:	f001 f908 	bl	8004382 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f91e 	bl	80043bc <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4618      	mov	r0, r3
 8003186:	f001 f90d 	bl	80043a4 <_ZNSaIP7RequestED1Ev>
      }
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	3308      	adds	r3, #8
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f81e 	bl	80031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	3318      	adds	r3, #24
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f80f 	bl	80031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	; 0x30
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ffd7 	bl	80031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8003236:	f107 0320 	add.w	r3, r7, #32
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ffd1 	bl	80031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8003242:	f107 0220 	add.w	r2, r7, #32
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	4619      	mov	r1, r3
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f001 f8c4 	bl	80043da <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8003252:	bf00      	nop
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f001 f927 	bl	80044b6 <_ZNSaI8ResponceED1Ev>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f90a 	bl	8004496 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003282:	2100      	movs	r1, #0
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f001 f922 	bl	80044ce <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80032ac:	3304      	adds	r3, #4
 80032ae:	461a      	mov	r2, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f001 f96f 	bl	8004594 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	461a      	mov	r2, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f001 f981 	bl	80045c8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ffc6 	bl	800325a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	4619      	mov	r1, r3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f81e 	bl	800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3318      	adds	r3, #24
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f80f 	bl	800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8003362:	b580      	push	{r7, lr}
 8003364:	b08c      	sub	sp, #48	; 0x30
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ffd7 	bl	800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 800337c:	f107 0320 	add.w	r3, r7, #32
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ffd1 	bl	800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8003388:	f107 0220 	add.w	r2, r7, #32
 800338c:	f107 0310 	add.w	r3, r7, #16
 8003390:	4619      	mov	r1, r3
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f001 f934 	bl	8004600 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8003398:	bf00      	nop
 800339a:	3730      	adds	r7, #48	; 0x30
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 f984 	bl	80046b6 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
	{ }
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
	if (__p)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f001 f95c 	bl	80046cc <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f001 f952 	bl	80046ea <_ZSt8_DestroyIPhEvT_S1_>
    }
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffec 	bl	800344e <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f001 f941 	bl	8004704 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fc17 	bl	8002cca <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 800349c:	4604      	mov	r4, r0
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f001 f948 	bl	8004734 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 80034a4:	4603      	mov	r3, r0
 80034a6:	429c      	cmp	r4, r3
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80034b4:	4816      	ldr	r0, [pc, #88]	; (8003510 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 80034b6:	f019 fc25 	bl	801cd04 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80034ba:	2101      	movs	r1, #1
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f001 f94a 	bl	8004756 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1d1c      	adds	r4, r3, #4
 80034ca:	4610      	mov	r0, r2
 80034cc:	f001 f95e 	bl	800478c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 80034d0:	4603      	mov	r3, r0
 80034d2:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80034d4:	687c      	ldr	r4, [r7, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699d      	ldr	r5, [r3, #24]
 80034da:	6838      	ldr	r0, [r7, #0]
 80034dc:	f7ff ffb7 	bl	800344e <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	4629      	mov	r1, r5
 80034e6:	4620      	mov	r0, r4
 80034e8:	f7ff ffbc 	bl	8003464 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f103 0218 	add.w	r2, r3, #24
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 ff12 	bl	8004324 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bdb0      	pop	{r4, r5, r7, pc}
 8003510:	0801e488 	.word	0x0801e488

08003514 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800352a:	b590      	push	{r4, r7, lr}
 800352c:	b089      	sub	sp, #36	; 0x24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f107 031c 	add.w	r3, r7, #28
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f001 f936 	bl	80047b0 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8003544:	f107 021c 	add.w	r2, r7, #28
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f93f 	bl	80047d2 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8003554:	f107 031c 	add.w	r3, r7, #28
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f93b 	bl	80027d4 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f943 	bl	80047f0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f107 0310 	add.w	r3, r7, #16
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f93c 	bl	80047f0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff4e 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003580:	4604      	mov	r4, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff49 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800358a:	4603      	mov	r3, r0
 800358c:	4619      	mov	r1, r3
 800358e:	4620      	mov	r0, r4
 8003590:	f001 f94c 	bl	800482c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff f93f 	bl	800281c <_ZNSt6vectorIhSaIhEED1Ev>
      }
 800359e:	bf00      	nop
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd90      	pop	{r4, r7, pc}

080035a6 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d012      	beq.n	8003622 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 80035fc:	687c      	ldr	r4, [r7, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699d      	ldr	r5, [r3, #24]
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f7ff ffe3 	bl	80035ce <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	4629      	mov	r1, r5
 800360e:	4620      	mov	r0, r4
 8003610:	f001 f91a 	bl	8004848 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f103 0210 	add.w	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
      }
 8003620:	e007      	b.n	8003632 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f7ff ffd3 	bl	80035ce <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8003628:	4603      	mov	r3, r0
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f001 f91f 	bl	8004870 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bdb0      	pop	{r4, r5, r7, pc}

0800363a <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f103 0218 	add.w	r2, r3, #24
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3308      	adds	r3, #8
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f001 f952 	bl	80048f8 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8003654:	4603      	mov	r3, r0
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
	return *begin();
 8003666:	f107 0308 	add.w	r3, r7, #8
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fe33 	bl	80032d8 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8003672:	f107 0308 	add.w	r3, r7, #8
 8003676:	4618      	mov	r0, r3
 8003678:	f001 f952 	bl	8004920 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 800367c:	4603      	mov	r3, r0
      }
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f001 f945 	bl	8004938 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8003710:	429a      	cmp	r2, r3
 8003712:	d011      	beq.n	8003738 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fdfc 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800371c:	4602      	mov	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f001 f913 	bl	8004950 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f103 0210 	add.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	609a      	str	r2, [r3, #8]
      }
 8003736:	e002      	b.n	800373e <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f001 f916 	bl	800496a <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f805 	bl	800375c <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003752:	4603      	mov	r3, r0
      }
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003764:	2301      	movs	r3, #1
      }
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a8 	beq.w	80038d6 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff f961 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800378c:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8003798:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f001 f90d 	bl	80049ba <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80037a0:	4602      	mov	r2, r0
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d808      	bhi.n	80037ba <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f001 f906 	bl	80049ba <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80037ae:	4602      	mov	r2, r0
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d901      	bls.n	80037be <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d30f      	bcc.n	80037ea <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fe23 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80037d6:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 80037d8:	461a      	mov	r2, r3
 80037da:	6839      	ldr	r1, [r7, #0]
 80037dc:	4620      	mov	r0, r4
 80037de:	f001 f8fd 	bl	80049dc <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 80037e2:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 80037e8:	e075      	b.n	80038d6 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 80037ea:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f001 f903 	bl	80049fa <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80037f4:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f944 	bl	8004a88 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003800:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003802:	f7ff ffa0 	bl	8003746 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01b      	beq.n	8003844 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fe01 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800381a:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800381c:	461a      	mov	r2, r3
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	4620      	mov	r0, r4
 8003822:	f001 f8db 	bl	80049dc <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681c      	ldr	r4, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fdf3 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003836:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4629      	mov	r1, r5
 800383c:	4620      	mov	r0, r4
 800383e:	f001 f937 	bl	8004ab0 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8003842:	e02e      	b.n	80038a2 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fde3 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003856:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003858:	461a      	mov	r2, r3
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	4620      	mov	r0, r4
 800385e:	f001 f8bd 	bl	80049dc <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	4413      	add	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681c      	ldr	r4, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fdd1 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800387a:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4629      	mov	r1, r5
 8003880:	4620      	mov	r0, r4
 8003882:	f001 f929 	bl	8004ad8 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681c      	ldr	r4, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fdc3 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003896:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003898:	461a      	mov	r2, r3
 800389a:	4629      	mov	r1, r5
 800389c:	4620      	mov	r0, r4
 800389e:	f7ff fdc8 	bl	8003432 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7ff fd9f 	bl	80033f6 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	609a      	str	r2, [r3, #8]
    }
 80038d6:	bf00      	nop
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bdb0      	pop	{r4, r5, r7, pc}
 80038de:	bf00      	nop
 80038e0:	0801e4b8 	.word	0x0801e4b8

080038e4 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fd89 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800390a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800390c:	461a      	mov	r2, r3
 800390e:	4621      	mov	r1, r4
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	f7ff fd8e 	bl	8003432 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	605a      	str	r2, [r3, #4]
      }
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}

08003924 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 f8d2 	bl	8004b0a <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fc28 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7ff ffe4 	bl	8003954 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f000 fce1 	bl	800435c <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f103 0208 	add.w	r2, r3, #8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f000 fcbb 	bl	8004324 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	609a      	str	r2, [r3, #8]
    }
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
      { return false; }
 80039de:	2300      	movs	r3, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ff72 	bl	80038e4 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8003a12:	461a      	mov	r2, r3
 8003a14:	6839      	ldr	r1, [r7, #0]
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f001 f883 	bl	8004b22 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	f107 030c 	add.w	r3, r7, #12
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 f871 	bl	8004b3a <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 f860 	bl	8004b3a <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fff6 	bl	8004a88 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003a9c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fcbb 	bl	800341c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003aa6:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f001 f854 	bl	8004b5a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8003ab2:	697b      	ldr	r3, [r7, #20]
	}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f855 	bl	8004b7c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f001 f857 	bl	8004b9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8003aee:	4604      	mov	r4, r0
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f001 f853 	bl	8004b9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8003af6:	4603      	mov	r3, r0
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4619      	mov	r1, r3
 8003afc:	4620      	mov	r0, r4
 8003afe:	f001 f858 	bl	8004bb2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 8003b02:	4603      	mov	r3, r0
    }
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd90      	pop	{r4, r7, pc}

08003b0c <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1d1a      	adds	r2, r3, #4
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 f82c 	bl	8004b7c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f001 f859 	bl	8004bf4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8003b4a:	b590      	push	{r4, r7, lr}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f001 f859 	bl	8004c0e <_ZSt12__miter_baseIPhET_S1_>
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f001 f855 	bl	8004c0e <_ZSt12__miter_baseIPhET_S1_>
 8003b64:	4603      	mov	r3, r0
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f001 f85a 	bl	8004c24 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8003b70:	4603      	mov	r3, r0
    }
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}

08003b7a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f001 f86c 	bl	8004c6a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003ba6:	f001 f872 	bl	8004c8e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8003baa:	4603      	mov	r3, r0
 8003bac:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	109b      	asrs	r3, r3, #2
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6811      	ldr	r1, [r2, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	1a8a      	subs	r2, r1, r2
 8003bca:	1092      	asrs	r2, r2, #2
 8003bcc:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8003bce:	fb01 f202 	mul.w	r2, r1, r2
 8003bd2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	6891      	ldr	r1, [r2, #8]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	1a8a      	subs	r2, r1, r2
 8003bde:	1092      	asrs	r2, r2, #2
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8003be2:	fb01 f202 	mul.w	r2, r1, r2
 8003be6:	4413      	add	r3, r2
      }
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	cccccccd 	.word	0xcccccccd

08003bf4 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0218 	add.w	r2, r3, #24
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3308      	adds	r3, #8
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f001 f848 	bl	8004c9e <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003c22:	6838      	ldr	r0, [r7, #0]
 8003c24:	f7fe fe15 	bl	8002852 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe fe1b 	bl	8002868 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003c52:	b590      	push	{r4, r7, lr}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ffed 	bl	8003c3a <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8003c60:	4604      	mov	r4, r0
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f001 f83f 	bl	8004ce6 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4423      	add	r3, r4
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd90      	pop	{r4, r7, pc}

08003c7c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8003c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c7e:	b09f      	sub	sp, #124	; 0x7c
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 f835 	bl	8004cfe <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8003c94:	4603      	mov	r3, r0
 8003c96:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff f8cd 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bf8c      	ite	hi
 8003ca6:	2301      	movhi	r3, #1
 8003ca8:	2300      	movls	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d031      	beq.n	8003d14 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff f8bf 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 f82f 	bl	8004d26 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8003cc8:	68bc      	ldr	r4, [r7, #8]
 8003cca:	697d      	ldr	r5, [r7, #20]
 8003ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd0:	68f9      	ldr	r1, [r7, #12]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f9e0 	bl	8004098 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8003cd8:	f107 0018 	add.w	r0, r7, #24
 8003cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ce0:	462a      	mov	r2, r5
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	f001 f832 	bl	8004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003ce8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f9e1 	bl	80040b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8003cf4:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8003cf6:	f107 0308 	add.w	r3, r7, #8
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f846 	bl	8004d8c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003d00:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003d04:	f88d 6000 	strb.w	r6, [sp]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f001 f848 	bl	8004da2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	}
 8003d12:	e014      	b.n	8003d3e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8003d14:	68bc      	ldr	r4, [r7, #8]
 8003d16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f9bb 	bl	8004098 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8003d22:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003d26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	f001 f80d 	bl	8004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8003d32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d36:	4619      	mov	r1, r3
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f001 f8af 	bl	8004e9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8003d3e:	bf00      	nop
 8003d40:	3774      	adds	r7, #116	; 0x74
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d46 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f001 f8d5 	bl	8004f02 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f001 f8da 	bl	8004f18 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff f85e 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f001 f8e3 	bl	8004f4a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8003d84:	4603      	mov	r3, r0
 8003d86:	429c      	cmp	r4, r3
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003d94:	4817      	ldr	r0, [pc, #92]	; (8003df4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8003d96:	f018 ffb5 	bl	801cd04 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 f8e5 	bl	8004f6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	1f1c      	subs	r4, r3, #4
 8003daa:	4610      	mov	r0, r2
 8003dac:	f001 f8f6 	bl	8004f9c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8003db0:	4603      	mov	r3, r0
 8003db2:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f103 0208 	add.w	r2, r3, #8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	3b04      	subs	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f001 f8fc 	bl	8004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f1a3 0214 	sub.w	r2, r3, #20
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8003dd4:	687c      	ldr	r4, [r7, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689d      	ldr	r5, [r3, #8]
 8003dda:	6838      	ldr	r0, [r7, #0]
 8003ddc:	f001 f891 	bl	8004f02 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	4629      	mov	r1, r5
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7ff ffad 	bl	8003d46 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
      }
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bdb0      	pop	{r4, r5, r7, pc}
 8003df4:	0801e488 	.word	0x0801e488

08003df8 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003e02:	f001 f90c 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	109b      	asrs	r3, r3, #2
 8003e16:	3b01      	subs	r3, #1
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6852      	ldr	r2, [r2, #4]
 8003e24:	1a8a      	subs	r2, r1, r2
 8003e26:	1092      	asrs	r2, r2, #2
 8003e28:	4908      	ldr	r1, [pc, #32]	; (8003e4c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8003e2a:	fb01 f202 	mul.w	r2, r1, r2
 8003e2e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	6891      	ldr	r1, [r2, #8]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	1a8a      	subs	r2, r1, r2
 8003e3a:	1092      	asrs	r2, r2, #2
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8003e3e:	fb01 f202 	mul.w	r2, r1, r2
 8003e42:	4413      	add	r3, r2
      }
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	cccccccd 	.word	0xcccccccd

08003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 f8db 	bl	800502e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
	}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f001 f8b1 	bl	8004ff8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f103 0218 	add.w	r2, r3, #24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	3b04      	subs	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f001 f88b 	bl	8004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f1a3 0214 	sub.w	r2, r3, #20
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ffc9 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7ff ffcd 	bl	8003e66 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
    }
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8003f06:	f107 0308 	add.w	r3, r7, #8
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f898 	bl	8005044 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 f8a6 	bl	800506a <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f001 f8a6 	bl	8005082 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f8ae 	bl	800509a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f001 f8bb 	bl	80050cc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003f6a:	2014      	movs	r0, #20
 8003f6c:	f7fc ff89 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003f70:	4602      	mov	r2, r0
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3302      	adds	r3, #2
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	f107 0210 	add.w	r2, r7, #16
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f97c 	bl	800428e <_ZSt3maxIjERKT_S2_S2_>
 8003f96:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 f89c 	bl	80050e2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8003faa:	4602      	mov	r2, r0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	1acb      	subs	r3, r1, r3
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003fc0:	4413      	add	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4413      	add	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f001 f8a2 	bl	800511c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3308      	adds	r3, #8
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ffee 	bl	8004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f103 0218 	add.w	r2, r3, #24
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3b04      	subs	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f000 ffe5 	bl	8004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004002:	2014      	movs	r0, #20
 8004004:	f7fc ff3d 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004010:	fb01 f202 	mul.w	r2, r1, r2
 8004014:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
    }
 8004024:	bf00      	nop
 8004026:	3724      	adds	r7, #36	; 0x24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}

0800402c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d209      	bcs.n	8004058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 ffd4 	bl	8004ff8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3304      	adds	r3, #4
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e7f1      	b.n	800403c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	4618      	mov	r0, r3
 8004074:	f001 f86c 	bl	8005150 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f882 	bl	800518a <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f871 	bl	8005172 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f813 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	3318      	adds	r3, #24
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f804 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 800410c:	b480      	push	{r7}
 800410e:	b08d      	sub	sp, #52	; 0x34
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
      }
 800411a:	bf00      	nop
 800411c:	3734      	adds	r7, #52	; 0x34
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f82a 	bl	80051a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f001 f834 	bl	80051c2 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff f836 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004162:	4604      	mov	r4, r0
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff f831 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800416c:	4603      	mov	r3, r0
 800416e:	4619      	mov	r1, r3
 8004170:	4620      	mov	r0, r4
 8004172:	f001 f83a 	bl	80051ea <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bd90      	pop	{r4, r7, pc}

0800417e <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f82d 	bl	8005206 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 80041ac:	68b8      	ldr	r0, [r7, #8]
 80041ae:	f001 f837 	bl	8005220 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f8ad 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80041ba:	4604      	mov	r4, r0
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff f8a8 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4619      	mov	r1, r3
 80041c8:	4620      	mov	r0, r4
 80041ca:	f001 f83d 	bl	8005248 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}

080041d6 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f830 	bl	8005264 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8004204:	68b8      	ldr	r0, [r7, #8]
 8004206:	f001 f83a 	bl	800527e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fe1f 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004212:	4604      	mov	r4, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fe1a 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 800421c:	4603      	mov	r3, r0
 800421e:	4619      	mov	r1, r3
 8004220:	4620      	mov	r0, r4
 8004222:	f001 f840 	bl	80052a6 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}

0800422e <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f001 f843 	bl	80052c2 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3308      	adds	r3, #8
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f83a 	bl	80052d8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3318      	adds	r3, #24
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f835 	bl	80052d8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d201      	bcs.n	80042a8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	e000      	b.n	80042aa <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80042a8:	687b      	ldr	r3, [r7, #4]
    }
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80042b6:	b590      	push	{r4, r7, lr}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80042c0:	f107 030c 	add.w	r3, r7, #12
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f85b 	bl	8004382 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 f817 	bl	8005306 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 80042d8:	4604      	mov	r4, r0
 80042da:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f85f 	bl	80043a4 <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80042e6:	4623      	mov	r3, r4
      }
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd90      	pop	{r4, r7, pc}

080042f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d209      	bcs.n	800431c <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa3f 	bl	800478c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 800430e:	4602      	mov	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	3304      	adds	r3, #4
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e7f1      	b.n	8004300 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 800431c:	bf00      	nop
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685c      	ldr	r4, [r3, #4]
 8004340:	f000 fca5 	bl	8004c8e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8004344:	4602      	mov	r2, r0
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	18e2      	adds	r2, r4, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	609a      	str	r2, [r3, #8]
      }
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bd90      	pop	{r4, r7, pc}

0800435c <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004366:	687c      	ldr	r4, [r7, #4]
 8004368:	2014      	movs	r0, #20
 800436a:	f7fc fd8a 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800436e:	4603      	mov	r3, r0
 8004370:	461a      	mov	r2, r3
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	4620      	mov	r0, r4
 8004376:	f000 ffd5 	bl	8005324 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}

08004382 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800438c:	6838      	ldr	r0, [r7, #0]
 800438e:	f000 ffd8 	bl	8005342 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004392:	4603      	mov	r3, r0
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 ffde 	bl	8005358 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 ffe0 	bl	8005372 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 ffdb 	bl	8005388 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 80043da:	b5b0      	push	{r4, r5, r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	3304      	adds	r3, #4
 80043ec:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d219      	bcs.n	800442c <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681d      	ldr	r5, [r3, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681c      	ldr	r4, [r3, #0]
 8004400:	f000 ffd2 	bl	80053a8 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 8004404:	4602      	mov	r2, r0
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fedb 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004418:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800441a:	461a      	mov	r2, r3
 800441c:	4621      	mov	r1, r4
 800441e:	4628      	mov	r0, r5
 8004420:	f000 ffca 	bl	80053b8 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3304      	adds	r3, #4
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e7e0      	b.n	80043ee <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d01c      	beq.n	8004472 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	681c      	ldr	r4, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fec3 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004448:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 800444a:	461a      	mov	r2, r3
 800444c:	4629      	mov	r1, r5
 800444e:	4620      	mov	r0, r4
 8004450:	f000 ffb2 	bl	80053b8 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685c      	ldr	r4, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe feb5 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004464:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8004466:	461a      	mov	r2, r3
 8004468:	4629      	mov	r1, r5
 800446a:	4620      	mov	r0, r4
 800446c:	f000 ffa4 	bl	80053b8 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8004470:	e00d      	b.n	800448e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	681c      	ldr	r4, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fea6 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004482:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8004484:	461a      	mov	r2, r3
 8004486:	4629      	mov	r1, r5
 8004488:	4620      	mov	r0, r4
 800448a:	f000 ff95 	bl	80053b8 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bdb0      	pop	{r4, r5, r7, pc}

08004496 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 ff98 	bl	80053d4 <_ZNSaI8ResponceEC1Ev>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 ffa0 	bl	80053ec <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <_ZNSaI8ResponceED1Ev>:
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 ffad 	bl	800541e <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80044ce:	b590      	push	{r4, r7, lr}
 80044d0:	b089      	sub	sp, #36	; 0x24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80044d8:	2010      	movs	r0, #16
 80044da:	f7fc fcd2 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80044de:	4602      	mov	r2, r0
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044e6:	3301      	adds	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80044ea:	2308      	movs	r3, #8
 80044ec:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3302      	adds	r3, #2
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	f107 0210 	add.w	r2, r7, #16
 80044f8:	f107 030c 	add.w	r3, r7, #12
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fec5 	bl	800428e <_ZSt3maxIjERKT_S2_S2_>
 8004504:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 ff8e 	bl	8005434 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8004518:	4602      	mov	r2, r0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	1acb      	subs	r3, r1, r3
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800452e:	4413      	add	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4413      	add	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 ff94 	bl	800546e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3308      	adds	r3, #8
 800454a:	69b9      	ldr	r1, [r7, #24]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 ffa8 	bl	80054a2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f103 0218 	add.w	r2, r3, #24
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3b04      	subs	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f000 ff9f 	bl	80054a2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004570:	2010      	movs	r0, #16
 8004572:	f7fc fc86 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004576:	4602      	mov	r2, r0
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	fbb3 f1f2 	udiv	r1, r3, r2
 800457e:	fb01 f202 	mul.w	r2, r1, r2
 8004582:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
    }
 800458c:	bf00      	nop
 800458e:	3724      	adds	r7, #36	; 0x24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd90      	pop	{r4, r7, pc}

08004594 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d209      	bcs.n	80045c0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4619      	mov	r1, r3
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 ff8e 	bl	80054d4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3304      	adds	r3, #4
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e7f1      	b.n	80045a4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80045c0:	bf00      	nop
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 ff8d 	bl	80054fa <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 ffa3 	bl	8005534 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 ff92 	bl	800551c <_ZNSaIP8ResponceED1Ev>
      }
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 8004600:	b5b0      	push	{r4, r5, r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	429a      	cmp	r2, r3
 800461c:	d216      	bcs.n	800464c <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681d      	ldr	r5, [r3, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	681c      	ldr	r4, [r3, #0]
 8004626:	f000 ff94 	bl	8005552 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 800462a:	4603      	mov	r3, r0
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fe6e 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004638:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800463a:	461a      	mov	r2, r3
 800463c:	4621      	mov	r1, r4
 800463e:	4628      	mov	r0, r5
 8004640:	f000 ff8f 	bl	8005562 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3304      	adds	r3, #4
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e7e3      	b.n	8004614 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	429a      	cmp	r2, r3
 8004656:	d01c      	beq.n	8004692 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	681c      	ldr	r4, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fe56 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004668:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 800466a:	461a      	mov	r2, r3
 800466c:	4629      	mov	r1, r5
 800466e:	4620      	mov	r0, r4
 8004670:	f000 ff77 	bl	8005562 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685c      	ldr	r4, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fe48 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004684:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8004686:	461a      	mov	r2, r3
 8004688:	4629      	mov	r1, r5
 800468a:	4620      	mov	r0, r4
 800468c:	f000 ff69 	bl	8005562 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8004690:	e00d      	b.n	80046ae <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	681c      	ldr	r4, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fe39 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80046a2:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80046a4:	461a      	mov	r2, r3
 80046a6:	4629      	mov	r1, r5
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 ff5a 	bl	8005562 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bdb0      	pop	{r4, r5, r7, pc}

080046b6 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 ff4e 	bl	800557e <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 ff4f 	bl	800559a <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fe fe9c 	bl	800344e <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8004716:	4604      	mov	r4, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4619      	mov	r1, r3
 800471c:	2014      	movs	r0, #20
 800471e:	f7fc fba4 	bl	8000e6a <_ZnwjPv>
 8004722:	4603      	mov	r3, r0
 8004724:	4621      	mov	r1, r4
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd f853 	bl	80017d2 <_ZN7RequestC1EOS_>
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bd90      	pop	{r4, r7, pc}

08004734 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fdff 	bl	8005342 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004744:	4603      	mov	r3, r0
 8004746:	4618      	mov	r0, r3
 8004748:	f000 ff32 	bl	80055b0 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 800474c:	4603      	mov	r3, r0
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	6809      	ldr	r1, [r1, #0]
 8004770:	1a41      	subs	r1, r0, r1
 8004772:	1089      	asrs	r1, r1, #2
 8004774:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004776:	429a      	cmp	r2, r3
 8004778:	d904      	bls.n	8004784 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800477a:	2200      	movs	r2, #0
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 ff30 	bl	80055e4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004794:	687c      	ldr	r4, [r7, #4]
 8004796:	2014      	movs	r0, #20
 8004798:	f7fc fb73 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800479c:	4603      	mov	r3, r0
 800479e:	4619      	mov	r1, r3
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 ffb9 	bl	8005718 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 80047a6:	4603      	mov	r3, r0
      }
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}

080047b0 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80047ba:	6838      	ldr	r0, [r7, #0]
 80047bc:	f7ff f8ff 	bl	80039be <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80047c0:	4603      	mov	r3, r0
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fe ff69 	bl	800369c <_ZNSaIhEC1ERKS_>
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 ffa8 	bl	8005736 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80047fa:	f107 030c 	add.w	r3, r7, #12
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fdda 	bl	80033b8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 ffa2 	bl	8005754 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 ff9e 	bl	8005754 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	4619      	mov	r1, r3
 800481e:	6838      	ldr	r0, [r7, #0]
 8004820:	f000 ff98 	bl	8005754 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004836:	461a      	mov	r2, r3
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 ffa1 	bl	8005782 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fe feba 	bl	80035ce <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 800485a:	4603      	mov	r3, r0
 800485c:	461a      	mov	r2, r3
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 ff9b 	bl	800579c <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004870:	b5b0      	push	{r4, r5, r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff f9ba 	bl	8003bf4 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8004880:	4604      	mov	r4, r0
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 ffa2 	bl	80057cc <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 8004888:	4603      	mov	r3, r0
 800488a:	429c      	cmp	r4, r3
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8004898:	4816      	ldr	r0, [pc, #88]	; (80048f4 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 800489a:	f018 fa33 	bl	801cd04 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800489e:	2101      	movs	r1, #1
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 ffa4 	bl	80057ee <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1d1c      	adds	r4, r3, #4
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 ffb8 	bl	8005824 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 80048b4:	4603      	mov	r3, r0
 80048b6:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80048b8:	687c      	ldr	r4, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699d      	ldr	r5, [r3, #24]
 80048be:	6838      	ldr	r0, [r7, #0]
 80048c0:	f7fe fe85 	bl	80035ce <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	4629      	mov	r1, r5
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff ffbc 	bl	8004848 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f103 0218 	add.w	r2, r3, #24
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 fddf 	bl	80054a2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	619a      	str	r2, [r3, #24]
      }
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bdb0      	pop	{r4, r5, r7, pc}
 80048f4:	0801e488 	.word	0x0801e488

080048f8 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 ff73 	bl	8005848 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4618      	mov	r0, r3
 8004976:	f7fe fccd 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800497a:	4602      	mov	r2, r0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7ff ffe4 	bl	8004950 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f000 fd9f 	bl	80054d4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f103 0208 	add.w	r2, r3, #8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f000 fd7c 	bl	80054a2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]
    }
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe fffa 	bl	80039be <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 ff47 	bl	8005860 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 ff52 	bl	8005894 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80049fa:	b590      	push	{r4, r7, lr}
 80049fc:	b087      	sub	sp, #28
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff ffd7 	bl	80049ba <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7fe f81d 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004a14:	4603      	mov	r3, r0
 8004a16:	1ae2      	subs	r2, r4, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf34      	ite	cc
 8004a1e:	2301      	movcc	r3, #1
 8004a20:	2300      	movcs	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f018 f96b 	bl	801cd04 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fe f80d 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004a34:	4604      	mov	r4, r0
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7fe f809 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	f107 0208 	add.w	r2, r7, #8
 8004a44:	f107 0310 	add.w	r3, r7, #16
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fc1f 	bl	800428e <_ZSt3maxIjERKT_S2_S2_>
 8004a50:	4603      	mov	r3, r0
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4423      	add	r3, r4
 8004a56:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7fd fff8 	bl	8002a4e <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d306      	bcc.n	8004a74 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff ffa7 	bl	80049ba <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d904      	bls.n	8004a7e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff ffa0 	bl	80049ba <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	e000      	b.n	8004a80 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8004a7e:	697b      	ldr	r3, [r7, #20]
      }
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd90      	pop	{r4, r7, pc}

08004a88 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6839      	ldr	r1, [r7, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 ff09 	bl	80058b4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	e000      	b.n	8004aa8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8004aa6:	2300      	movs	r3, #0
      }
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8004abe:	f88d 4000 	strb.w	r4, [sp]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 ff02 	bl	80058d2 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8004ace:	4603      	mov	r3, r0
      }
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd90      	pop	{r4, r7, pc}

08004ad8 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 ff05 	bl	80058f6 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8004aec:	4604      	mov	r4, r0
 8004aee:	68b8      	ldr	r0, [r7, #8]
 8004af0:	f000 ff01 	bl	80058f6 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8004af4:	4601      	mov	r1, r0
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4620      	mov	r0, r4
 8004afc:	f000 ff0a 	bl	8005914 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8004b00:	4603      	mov	r3, r0
    }
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}

08004b0a <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8004b14:	6838      	ldr	r0, [r7, #0]
 8004b16:	f7fc fa72 	bl	8000ffe <_ZN7RequestD1Ev>
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	713a      	strb	r2, [r7, #4]
    { }
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fee2 	bl	8005936 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004bb2:	b5b0      	push	{r4, r5, r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fecb 	bl	800595a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	68b8      	ldr	r0, [r7, #8]
 8004bc8:	f000 fec7 	bl	800595a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004bcc:	4605      	mov	r5, r0
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fed1 	bl	8005976 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fed9 	bl	8005992 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fee4 	bl	80059b2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 8004bea:	4603      	mov	r3, r0
    }
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bdb0      	pop	{r4, r5, r7, pc}

08004bf4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 feeb 	bl	80059dc <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fede 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 8004c36:	4604      	mov	r4, r0
 8004c38:	68b8      	ldr	r0, [r7, #8]
 8004c3a:	f000 feda 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 8004c3e:	4605      	mov	r5, r0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fed5 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 feda 	bl	8005a08 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8004c54:	4602      	mov	r2, r0
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fee4 	bl	8005a28 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8004c60:	4603      	mov	r3, r0
    }
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bdb0      	pop	{r4, r5, r7, pc}

08004c6a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fede 	bl	8005a40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8004c84:	4603      	mov	r3, r0
    }
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004c92:	2014      	movs	r0, #20
 8004c94:	f7fc f8f5 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8004ca8:	f000 feda 	bl	8005a60 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	109b      	asrs	r3, r3, #2
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6811      	ldr	r1, [r2, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6852      	ldr	r2, [r2, #4]
 8004cca:	1a8a      	subs	r2, r1, r2
 8004ccc:	1112      	asrs	r2, r2, #4
 8004cce:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	6891      	ldr	r1, [r2, #8]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	1a8a      	subs	r2, r1, r2
 8004cda:	1112      	asrs	r2, r2, #4
 8004cdc:	4413      	add	r3, r2
      }
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004cfe:	b5b0      	push	{r4, r5, r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004d08:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f83d 	bl	8004d8c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8004d12:	462a      	mov	r2, r5
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 feaa 	bl	8005a70 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8004d1c:	4603      	mov	r3, r0
    }
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bdb0      	pop	{r4, r5, r7, pc}

08004d26 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8004d26:	b590      	push	{r4, r7, lr}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f829 	bl	8004d8c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	68f9      	ldr	r1, [r7, #12]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 feac 	bl	8005a9c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd90      	pop	{r4, r7, pc}

08004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8004d4c:	b5b0      	push	{r4, r5, r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004d5a:	68b8      	ldr	r0, [r7, #8]
 8004d5c:	f000 feb4 	bl	8005ac8 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8004d60:	4604      	mov	r4, r0
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 feb0 	bl	8005ac8 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8004d68:	4605      	mov	r5, r0
 8004d6a:	f107 0310 	add.w	r3, r7, #16
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff f9af 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f107 0310 	add.w	r3, r7, #16
 8004d7c:	462a      	mov	r2, r5
 8004d7e:	4621      	mov	r1, r4
 8004d80:	f000 fead 	bl	8005ade <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bdb0      	pop	{r4, r5, r7, pc}

08004d8c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004d94:	bf00      	nop
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8004da2:	b590      	push	{r4, r7, lr}
 8004da4:	b0a5      	sub	sp, #148	; 0x94
 8004da6:	af02      	add	r7, sp, #8
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ffa3 	bl	8004cfe <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d126      	bne.n	8004e18 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8004dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 feb3 	bl	8005b40 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8004dda:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004dde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff f975 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff f82f 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004df2:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8004df4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004df8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dfc:	9200      	str	r2, [sp, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	f000 fec7 	bl	8005b94 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f103 0408 	add.w	r4, r3, #8
 8004e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004e16:	e03d      	b.n	8004e94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d127      	bne.n	8004e74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fec8 	bl	8005bc4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8004e3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff f947 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff f801 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004e4e:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8004e50:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004e54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e58:	9200      	str	r2, [sp, #0]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	f000 fe99 	bl	8005b94 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f103 0418 	add.w	r4, r3, #24
 8004e68:	f107 0314 	add.w	r3, r7, #20
 8004e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004e72:	e00f      	b.n	8004e94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8004e74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff f92a 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8004e80:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fec2 	bl	8005c18 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8004e94:	bf00      	nop
 8004e96:	378c      	adds	r7, #140	; 0x8c
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd90      	pop	{r4, r7, pc}

08004e9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b08b      	sub	sp, #44	; 0x2c
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8004ea6:	f107 0308 	add.w	r3, r7, #8
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff f911 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8004eb2:	f107 0318 	add.w	r3, r7, #24
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff f8fc 	bl	80040b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fe ffc5 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f107 0218 	add.w	r2, r7, #24
 8004ecc:	f107 0108 	add.w	r1, r7, #8
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff f91b 	bl	800410c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f7ff f8a1 	bl	800402c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	f103 0418 	add.w	r4, r3, #24
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004efa:	bf00      	nop
 8004efc:	372c      	adds	r7, #44	; 0x2c
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd90      	pop	{r4, r7, pc}

08004f02 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004f18:	b5b0      	push	{r4, r5, r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ffec 	bl	8004f02 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	2014      	movs	r0, #20
 8004f32:	f7fb ff9a 	bl	8000e6a <_ZnwjPv>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461c      	mov	r4, r3
 8004f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f3e:	682b      	ldr	r3, [r5, #0]
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bdb0      	pop	{r4, r5, r7, pc}

08004f4a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 f96c 	bl	8006232 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 f94e 	bl	80061fe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004f82:	461a      	mov	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d904      	bls.n	8004f94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 f95a 	bl	8006248 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004fa4:	687c      	ldr	r4, [r7, #4]
 8004fa6:	2014      	movs	r0, #20
 8004fa8:	f7fb ff6b 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004fac:	4603      	mov	r3, r0
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f001 f9e3 	bl	800637c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 8004fb6:	4603      	mov	r3, r0
      }
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd90      	pop	{r4, r7, pc}

08004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685c      	ldr	r4, [r3, #4]
 8004fdc:	f000 f81f 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	18e2      	adds	r2, r4, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	609a      	str	r2, [r3, #8]
      }
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd90      	pop	{r4, r7, pc}

08004ff8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8005002:	687c      	ldr	r4, [r7, #4]
 8005004:	2014      	movs	r0, #20
 8005006:	f7fb ff3c 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	4620      	mov	r0, r4
 8005012:	f001 f9c2 	bl	800639a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}

0800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800501e:	b580      	push	{r7, lr}
 8005020:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005022:	2014      	movs	r0, #20
 8005024:	f7fb ff2d 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005028:	4603      	mov	r3, r0
 800502a:	4618      	mov	r0, r3
 800502c:	bd80      	pop	{r7, pc}

0800502e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff f83e 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f001 f9ac 	bl	80063b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 8005060:	bf00      	nop
      }
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f001 f9f8 	bl	8006480 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3308      	adds	r3, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f9ef 	bl	8006496 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3318      	adds	r3, #24
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 f9ea 	bl	8006496 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80050e2:	b590      	push	{r4, r7, lr}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80050ec:	f107 030c 	add.w	r3, r7, #12
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f82c 	bl	8005150 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80050f8:	f107 030c 	add.w	r3, r7, #12
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 f9e0 	bl	80064c4 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8005104:	4604      	mov	r4, r0
 8005106:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005108:	f107 030c 	add.w	r3, r7, #12
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f830 	bl	8005172 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005112:	4623      	mov	r3, r4
      }
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}

0800511c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d209      	bcs.n	8005148 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff ff31 	bl	8004f9c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	3304      	adds	r3, #4
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e7f1      	b.n	800512c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8005148:	bf00      	nop
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800515a:	6838      	ldr	r0, [r7, #0]
 800515c:	f001 f869 	bl	8006232 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8005160:	4603      	mov	r3, r0
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 f9bc 	bl	80064e2 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 f9be 	bl	80064fc <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f001 f9b9 	bl	8006512 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 f9c4 	bl	8006542 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fd ffde 	bl	8003192 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 f9e3 	bl	80065a8 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80051e2:	bf00      	nop
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80051f4:	461a      	mov	r2, r3
 80051f6:	6839      	ldr	r1, [r7, #0]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fa08 	bl	800660e <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 fa08 	bl	8006628 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8005228:	f107 0308 	add.w	r3, r7, #8
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe f852 	bl	80032d8 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8005234:	f107 0308 	add.w	r3, r7, #8
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fa27 	bl	800668e <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8005240:	bf00      	nop
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8005252:	461a      	mov	r2, r3
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 fa4c 	bl	80066f4 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f001 fa4c 	bl	800670e <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8005286:	f107 0308 	add.w	r3, r7, #8
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe ff03 	bl	8004098 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff fdff 	bl	8004e9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80052b0:	461a      	mov	r2, r3
 80052b2:	6839      	ldr	r1, [r7, #0]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 fa5d 	bl	8006774 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	60da      	str	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005310:	2200      	movs	r2, #0
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fa3a 	bl	800678e <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 800531a:	4603      	mov	r3, r0
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f001 fa48 	bl	80067ca <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f001 fa44 	bl	80067f0 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4619      	mov	r1, r3
 800539a:	68b8      	ldr	r0, [r7, #8]
 800539c:	f017 fc9c 	bl	801ccd8 <_ZdlPvj>
      }
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80053ac:	2014      	movs	r0, #20
 80053ae:	f7fb fd68 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f001 fa1d 	bl	8006806 <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 fa1f 	bl	8006820 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	605a      	str	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3308      	adds	r3, #8
 8005404:	4618      	mov	r0, r3
 8005406:	f001 fa16 	bl	8006836 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3318      	adds	r3, #24
 800540e:	4618      	mov	r0, r3
 8005410:	f001 fa11 	bl	8006836 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800543e:	f107 030c 	add.w	r3, r7, #12
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f858 	bl	80054fa <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fa07 	bl	8006864 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 8005456:	4604      	mov	r4, r0
 8005458:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800545a:	f107 030c 	add.w	r3, r7, #12
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f85c 	bl	800551c <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005464:	4623      	mov	r3, r4
      }
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bd90      	pop	{r4, r7, pc}

0800546e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d209      	bcs.n	800549a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f9cc 	bl	8005824 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 800548c:	4602      	mov	r2, r0
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3304      	adds	r3, #4
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e7f1      	b.n	800547e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80054a2:	b590      	push	{r4, r7, lr}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685c      	ldr	r4, [r3, #4]
 80054be:	f000 facf 	bl	8005a60 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 80054c2:	4603      	mov	r3, r0
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	18e2      	adds	r2, r4, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]
      }
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd90      	pop	{r4, r7, pc}

080054d4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80054de:	687c      	ldr	r4, [r7, #4]
 80054e0:	2010      	movs	r0, #16
 80054e2:	f7fb fcce 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80054e6:	4603      	mov	r3, r0
 80054e8:	461a      	mov	r2, r3
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	4620      	mov	r0, r4
 80054ee:	f001 f9c8 	bl	8006882 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd90      	pop	{r4, r7, pc}

080054fa <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8005504:	6838      	ldr	r0, [r7, #0]
 8005506:	f001 f9cb 	bl	80068a0 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800550a:	4603      	mov	r3, r0
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 f9d1 	bl	80068b6 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 f9d3 	bl	80068d0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f001 f9ce 	bl	80068e6 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005552:	b580      	push	{r7, lr}
 8005554:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005556:	2010      	movs	r0, #16
 8005558:	f7fb fc93 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800555c:	4603      	mov	r3, r0
 800555e:	4618      	mov	r0, r3
 8005560:	bd80      	pop	{r7, pc}

08005562 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f001 f9c8 	bl	8006906 <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	68b8      	ldr	r0, [r7, #8]
 800558e:	f017 fba3 	bl	801ccd8 <_ZdlPvj>
      }
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80055b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80055bc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f9ae 	bl	8006920 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 80055c4:	4603      	mov	r3, r0
 80055c6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80055c8:	f107 0208 	add.w	r2, r7, #8
 80055cc:	f107 030c 	add.w	r3, r7, #12
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 f9b0 	bl	8006938 <_ZSt3minIjERKT_S2_S2_>
 80055d8:	4603      	mov	r3, r0
 80055da:	681b      	ldr	r3, [r3, #0]
      }
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b08b      	sub	sp, #44	; 0x2c
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	109b      	asrs	r3, r3, #2
 80055fe:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8005600:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	4413      	add	r3, r2
 8005608:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	429a      	cmp	r2, r3
 8005614:	d92d      	bls.n	8005672 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	1acb      	subs	r3, r1, r3
 8005622:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005624:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	e000      	b.n	8005634 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8005632:	2300      	movs	r3, #0
 8005634:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005636:	4413      	add	r3, r2
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	429a      	cmp	r2, r3
 8005642:	d209      	bcs.n	8005658 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800564c:	3304      	adds	r3, #4
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	4619      	mov	r1, r3
 8005652:	f001 f985 	bl	8006960 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8005656:	e048      	b.n	80056ea <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005660:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005668:	4413      	add	r3, r2
 800566a:	461a      	mov	r2, r3
 800566c:	f001 f990 	bl	8006990 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 8005670:	e03b      	b.n	80056ea <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3304      	adds	r3, #4
 800567a:	f107 0208 	add.w	r2, r7, #8
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fe04 	bl	800428e <_ZSt3maxIjERKT_S2_S2_>
 8005686:	4603      	mov	r3, r0
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800568c:	3302      	adds	r3, #2
 800568e:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	69b9      	ldr	r1, [r7, #24]
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fe0e 	bl	80042b6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 800569a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	e000      	b.n	80056b4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80056b2:	2300      	movs	r3, #0
 80056b4:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80056c4:	3304      	adds	r3, #4
 80056c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c8:	4619      	mov	r1, r3
 80056ca:	f001 f949 	bl	8006960 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	461a      	mov	r2, r3
 80056da:	f7fd fd3e 	bl	800315a <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3308      	adds	r3, #8
 80056ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fe17 	bl	8004324 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f103 0018 	add.w	r0, r3, #24
 80056fc:	6a3a      	ldr	r2, [r7, #32]
 80056fe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	4413      	add	r3, r2
 800570a:	4619      	mov	r1, r3
 800570c:	f7fe fe0a 	bl	8004324 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8005710:	bf00      	nop
 8005712:	372c      	adds	r7, #44	; 0x2c
 8005714:	46bd      	mov	sp, r7
 8005716:	bd90      	pop	{r4, r7, pc}

08005718 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005722:	2200      	movs	r2, #0
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 f94a 	bl	80069c0 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 800572c:	4603      	mov	r3, r0
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f001 f95c 	bl	8006a02 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	609a      	str	r2, [r3, #8]
	}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800578e:	68b8      	ldr	r0, [r7, #8]
 8005790:	f001 f949 	bl	8006a26 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fd ff10 	bl	80035ce <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80057ae:	4604      	mov	r4, r0
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4619      	mov	r1, r3
 80057b4:	2010      	movs	r0, #16
 80057b6:	f7fb fb58 	bl	8000e6a <_ZnwjPv>
 80057ba:	4603      	mov	r3, r0
 80057bc:	4621      	mov	r1, r4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fb fd21 	bl	8001206 <_ZN8ResponceC1EOS_>
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}

080057cc <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 f862 	bl	80068a0 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80057dc:	4603      	mov	r3, r0
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 f92c 	bl	8006a3c <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	6809      	ldr	r1, [r1, #0]
 8005808:	1a41      	subs	r1, r0, r1
 800580a:	1089      	asrs	r1, r1, #2
 800580c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800580e:	429a      	cmp	r2, r3
 8005810:	d904      	bls.n	800581c <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8005812:	2200      	movs	r2, #0
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 f92a 	bl	8006a70 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8005824:	b590      	push	{r4, r7, lr}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800582c:	687c      	ldr	r4, [r7, #4]
 800582e:	2010      	movs	r0, #16
 8005830:	f7fb fb27 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005834:	4603      	mov	r3, r0
 8005836:	4619      	mov	r1, r3
 8005838:	4620      	mov	r0, r4
 800583a:	f001 f9b3 	bl	8006ba4 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 800583e:	4603      	mov	r3, r0
      }
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bd90      	pop	{r4, r7, pc}

08005848 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005852:	6838      	ldr	r0, [r7, #0]
 8005854:	f7fb fc40 	bl	80010d8 <_ZN8ResponceD1Ev>
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005868:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800586c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 f9a7 	bl	8006bc2 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8005874:	4603      	mov	r3, r0
 8005876:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005878:	f107 0208 	add.w	r2, r7, #8
 800587c:	f107 030c 	add.w	r3, r7, #12
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f001 f858 	bl	8006938 <_ZSt3minIjERKT_S2_S2_>
 8005888:	4603      	mov	r3, r0
 800588a:	681b      	ldr	r3, [r3, #0]
      }
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800589e:	2301      	movs	r3, #1
 80058a0:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 f998 	bl	8006bda <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 80058aa:	4603      	mov	r3, r0
    }
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80058be:	2200      	movs	r2, #0
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 f99c 	bl	8006c00 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f001 f9a6 	bl	8006c38 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80058ec:	4603      	mov	r3, r0
      }
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80058fe:	f107 030c 	add.w	r3, r7, #12
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	f001 f9b4 	bl	8006c72 <_ZNSt13move_iteratorIPhEC1ES0_>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f001 f9b5 	bl	8006c96 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800592c:	4603      	mov	r3, r0
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f001 f9b5 	bl	8006cba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8005950:	4603      	mov	r3, r0
    }
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005962:	1d3b      	adds	r3, r7, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f9b8 	bl	8006cda <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 800596a:	4603      	mov	r3, r0
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f001 f9b5 	bl	8006cf0 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005986:	4603      	mov	r3, r0
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f001 f9af 	bl	8006d06 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ffda 	bl	8005976 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80059c2:	4602      	mov	r2, r0
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	1a9a      	subs	r2, r3, r2
 80059c8:	1d3b      	adds	r3, r7, #4
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f9aa 	bl	8006d26 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f001 f99b 	bl	8006d54 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7fe f87a 	bl	8003b4a <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005a64:	2010      	movs	r0, #16
 8005a66:	f7fb fa0c 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	109b      	asrs	r3, r3, #2
 8005a84:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
    }
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	cccccccd 	.word	0xcccccccd

08005a9c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	18ca      	adds	r2, r1, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	601a      	str	r2, [r3, #0]
    }
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005ade:	b5b0      	push	{r4, r5, r7, lr}
 8005ae0:	b090      	sub	sp, #64	; 0x40
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
 8005aea:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8005aec:	68b8      	ldr	r0, [r7, #8]
 8005aee:	f001 f941 	bl	8006d74 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8005af2:	4604      	mov	r4, r0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 f93d 	bl	8006d74 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8005afa:	4605      	mov	r5, r0
 8005afc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fae6 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005b08:	f107 0320 	add.w	r3, r7, #32
 8005b0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005b10:	4611      	mov	r1, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f939 	bl	8006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8005b18:	f107 0010 	add.w	r0, r7, #16
 8005b1c:	f107 0320 	add.w	r3, r7, #32
 8005b20:	462a      	mov	r2, r5
 8005b22:	4621      	mov	r1, r4
 8005b24:	f001 f952 	bl	8006dcc <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f107 0210 	add.w	r2, r7, #16
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 f99d 	bl	8006e70 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	3740      	adds	r7, #64	; 0x40
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b40 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	109b      	asrs	r3, r3, #2
 8005b58:	4a0d      	ldr	r2, [pc, #52]	; (8005b90 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8005b5e:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d906      	bls.n	8005b76 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68b8      	ldr	r0, [r7, #8]
 8005b72:	f001 f98b 	bl	8006e8c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f103 0108 	add.w	r1, r3, #8
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 f9c9 	bl	8006f18 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	cccccccd 	.word	0xcccccccd

08005b94 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005ba2:	f107 0310 	add.w	r3, r7, #16
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fa93 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f107 0310 	add.w	r3, r7, #16
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	f001 f9c1 	bl	8006f3e <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	109b      	asrs	r3, r3, #2
 8005bdc:	4a0d      	ldr	r2, [pc, #52]	; (8005c14 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8005be4:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d906      	bls.n	8005bfc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	68b8      	ldr	r0, [r7, #8]
 8005bf8:	f001 f9bc 	bl	8006f74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f103 0118 	add.w	r1, r3, #24
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fa1c 	bl	8005044 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	cccccccd 	.word	0xcccccccd

08005c18 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
      deque<_Tp, _Alloc>::
 8005c18:	b5b0      	push	{r4, r5, r7, lr}
 8005c1a:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8005c1e:	af04      	add	r7, sp, #16
 8005c20:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8005c24:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8005c28:	6020      	str	r0, [r4, #0]
 8005c2a:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8005c2e:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8005c32:	6001      	str	r1, [r0, #0]
 8005c34:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005c38:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005c3c:	600a      	str	r2, [r1, #0]
 8005c3e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005c42:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005c46:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8005c48:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c4c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f103 0208 	add.w	r2, r3, #8
 8005c56:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c5a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005c5e:	4611      	mov	r1, r2
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	f7fe f8c9 	bl	8003df8 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8005c66:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 8005c6a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c6e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	f7fd f8e0 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8005c78:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8005c7c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005c80:	085a      	lsrs	r2, r3, #1
 8005c82:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005c86:	429a      	cmp	r2, r3
 8005c88:	f240 8158 	bls.w	8005f3c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8005c8c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c90:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8005c94:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c98:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c9c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	f7ff ff4d 	bl	8005b40 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8005ca6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005caa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f103 0208 	add.w	r2, r3, #8
 8005cb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fa0a 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8005cc0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cc4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f103 0108 	add.w	r1, r3, #8
 8005cce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cd2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005cd6:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff f9b2 	bl	8005044 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8005ce0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ce4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cee:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005cf2:	4614      	mov	r4, r2
 8005cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 8005cfa:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005cfe:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8005d02:	429a      	cmp	r2, r3
 8005d04:	f2c0 8098 	blt.w	8005e38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 8005d08:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d0c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f103 0108 	add.w	r1, r3, #8
 8005d16:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005d1a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff f98e 	bl	8005044 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8005d28:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d2c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f103 0208 	add.w	r2, r3, #8
 8005d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe f9c9 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005d42:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005d46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe f9c1 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005d52:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005d56:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe f9b9 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						_M_get_Tp_allocator());
 8005d62:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d66:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe f86f 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8005d72:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8005d74:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d78:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8005d7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005d80:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005d84:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8005d88:	9400      	str	r4, [sp, #0]
 8005d8a:	f001 f937 	bl	8006ffc <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 8005d8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d92:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005d9c:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005da0:	f103 0408 	add.w	r4, r3, #8
 8005da4:	4613      	mov	r3, r2
 8005da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8005dac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005db0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f98c 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005dbc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005dc0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005dc4:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7fe f982 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005dd0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005dd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe f97a 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005de0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005de4:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8005de8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005dec:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005df0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8005df4:	f001 f93b 	bl	800706e <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8005df8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005dfc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e00:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8005e04:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e08:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	f001 f883 	bl	8006f18 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8005e12:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e16:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8005e1a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005e1e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005e22:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005e26:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005e2a:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	6809      	ldr	r1, [r1, #0]
 8005e32:	f7fe ff8b 	bl	8004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8005e36:	e1dd      	b.n	80061f4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 8005e38:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e3c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005e40:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005e44:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8005e4c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005e50:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f93c 	bl	80070da <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005e62:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e66:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f103 0208 	add.w	r2, r3, #8
 8005e70:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe f92c 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005e7c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e80:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005e84:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8005e88:	6819      	ldr	r1, [r3, #0]
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe f922 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005e90:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e94:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005e98:	681c      	ldr	r4, [r3, #0]
 8005e9a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005e9e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe f915 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 8005eaa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005eae:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fd ffcb 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8005eba:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005ebc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ec0:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8005ec4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ec8:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005ecc:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8005ed0:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8005ed4:	9202      	str	r2, [sp, #8]
 8005ed6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8005eda:	9201      	str	r2, [sp, #4]
 8005edc:	9400      	str	r4, [sp, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	f001 f90d 	bl	8007100 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 8005ee6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005eea:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005ef4:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005ef8:	f103 0408 	add.w	r4, r3, #8
 8005efc:	4613      	mov	r3, r2
 8005efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8005f04:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f08:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005f0c:	681c      	ldr	r4, [r3, #0]
 8005f0e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f12:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe f8db 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005f1e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f22:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8005f26:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005f2a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005f2e:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	4621      	mov	r1, r4
 8005f36:	f7fe ff09 	bl	8004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8005f3a:	e15b      	b.n	80061f4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8005f3c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f40:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8005f44:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f48:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005f4c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005f50:	6819      	ldr	r1, [r3, #0]
 8005f52:	f7ff fe37 	bl	8005bc4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 8005f56:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f5a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f103 0218 	add.w	r2, r3, #24
 8005f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe f8b2 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8005f70:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8005f74:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8005f7e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f82:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f103 0118 	add.w	r1, r3, #24
 8005f8c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005f94:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 ffbd 	bl	8006f18 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8005f9e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005fa2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005fac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8005fb8:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005fbc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	f340 8096 	ble.w	80060f2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8005fc6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005fca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f103 0118 	add.w	r1, r3, #24
 8005fd4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005fd8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005fdc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 ff99 	bl	8006f18 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8005fe6:	f107 0218 	add.w	r2, r7, #24
 8005fea:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe f86f 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8005ff6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ffa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8006004:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8006008:	4611      	mov	r1, r2
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe f862 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8006010:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006014:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 800601e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe f855 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 800602a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800602e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7fd ff0b 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 800603a:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 800603c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006040:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8006044:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006048:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 800604c:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8006050:	9400      	str	r4, [sp, #0]
 8006052:	f000 ffd3 	bl	8006ffc <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 8006056:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800605a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8006064:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8006068:	f103 0418 	add.w	r4, r3, #24
 800606c:	4613      	mov	r3, r2
 800606e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8006074:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006078:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800607c:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	4610      	mov	r0, r2
 8006084:	f7fe f826 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006088:	f107 0218 	add.w	r2, r7, #24
 800608c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8006090:	4611      	mov	r1, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe f81e 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006098:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800609c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80060a0:	4611      	mov	r1, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe f816 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80060a8:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 80060ac:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80060b0:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 80060b4:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80060b8:	f001 f862 	bl	8007180 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 80060bc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80060c0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80060c4:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fe f802 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80060d0:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 80060d4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80060d8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80060dc:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80060e0:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80060e4:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	6809      	ldr	r1, [r1, #0]
 80060ec:	f7fe fe2e 	bl	8004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80060f0:	e080      	b.n	80061f4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 80060f2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80060f6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80060fa:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80060fe:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 8006106:	f107 0314 	add.w	r3, r7, #20
 800610a:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 800610e:	4618      	mov	r0, r3
 8006110:	f000 ffe3 	bl	80070da <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8006114:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006118:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800611c:	681c      	ldr	r4, [r3, #0]
 800611e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006122:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8006126:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	4610      	mov	r0, r2
 800612e:	f7fd ffd1 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 8006132:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006136:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8006140:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006144:	4611      	mov	r1, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f7fd ffc4 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 800614c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006150:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 800615a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f7fd ffb7 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 8006166:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800616a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fd fe6d 	bl	8003e50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8006176:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8006178:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 800617c:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8006180:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8006184:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	460b      	mov	r3, r1
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	4621      	mov	r1, r4
 800619c:	f001 f826 	bl	80071ec <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 80061a0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80061a4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80061ae:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80061b2:	f103 0418 	add.w	r4, r3, #24
 80061b6:	4613      	mov	r3, r2
 80061b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 80061be:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80061c2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80061c6:	681c      	ldr	r4, [r3, #0]
 80061c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80061cc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80061d0:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80061d4:	6819      	ldr	r1, [r3, #0]
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fd ff7c 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80061dc:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 80061e0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80061e4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80061e8:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 80061ec:	4622      	mov	r2, r4
 80061ee:	6809      	ldr	r1, [r1, #0]
 80061f0:	f7fe fdac 	bl	8004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80061f4:	bf00      	nop
 80061f6:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bdb0      	pop	{r4, r5, r7, pc}

080061fe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006206:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800620a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 f82d 	bl	800726c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 8006212:	4603      	mov	r3, r0
 8006214:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006216:	f107 0208 	add.w	r2, r7, #8
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fb89 	bl	8006938 <_ZSt3minIjERKT_S2_S2_>
 8006226:	4603      	mov	r3, r0
 8006228:	681b      	ldr	r3, [r3, #0]
      }
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b08b      	sub	sp, #44	; 0x2c
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	109b      	asrs	r3, r3, #2
 8006262:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006264:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	4413      	add	r3, r2
 800626c:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	429a      	cmp	r2, r3
 8006278:	d92d      	bls.n	80062d6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	1acb      	subs	r3, r1, r3
 8006286:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006288:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	e000      	b.n	8006298 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8006296:	2300      	movs	r3, #0
 8006298:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800629a:	4413      	add	r3, r2
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d209      	bcs.n	80062bc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80062b0:	3304      	adds	r3, #4
 80062b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b4:	4619      	mov	r1, r3
 80062b6:	f000 ffe5 	bl	8007284 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80062ba:	e048      	b.n	800634e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80062c4:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80062ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062cc:	4413      	add	r3, r2
 80062ce:	461a      	mov	r2, r3
 80062d0:	f000 fff0 	bl	80072b4 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80062d4:	e03b      	b.n	800634e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3304      	adds	r3, #4
 80062de:	f107 0208 	add.w	r2, r7, #8
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fd ffd2 	bl	800428e <_ZSt3maxIjERKT_S2_S2_>
 80062ea:	4603      	mov	r3, r0
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80062f0:	3302      	adds	r3, #2
 80062f2:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	69b9      	ldr	r1, [r7, #24]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fef2 	bl	80050e2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80062fe:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	e000      	b.n	8006318 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8006316:	2300      	movs	r3, #0
 8006318:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4413      	add	r3, r2
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006328:	3304      	adds	r3, #4
 800632a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632c:	4619      	mov	r1, r3
 800632e:	f000 ffa9 	bl	8007284 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6819      	ldr	r1, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	461a      	mov	r2, r3
 800633e:	f7fd fe8f 	bl	8004060 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3308      	adds	r3, #8
 8006352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fe33 	bl	8004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f103 0018 	add.w	r0, r3, #24
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	4413      	add	r3, r2
 800636e:	4619      	mov	r1, r3
 8006370:	f7fe fe26 	bl	8004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8006374:	bf00      	nop
 8006376:	372c      	adds	r7, #44	; 0x2c
 8006378:	46bd      	mov	sp, r7
 800637a:	bd90      	pop	{r4, r7, pc}

0800637c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006386:	2200      	movs	r2, #0
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 ffaa 	bl	80072e4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8006390:	4603      	mov	r3, r0
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 ffbb 	bl	8007326 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	109b      	asrs	r3, r3, #2
 80063ce:	4a2b      	ldr	r2, [pc, #172]	; (800647c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 80063d0:	fb02 f303 	mul.w	r3, r2, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	4413      	add	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	db08      	blt.n	80063f4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80063e2:	f7fe fe1c 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4293      	cmp	r3, r2
 80063ee:	da01      	bge.n	80063f4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6819      	ldr	r1, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	18ca      	adds	r2, r1, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e02f      	b.n	8006470 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	dd07      	ble.n	8006426 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 8006416:	f7fe fe02 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	fb93 f3f2 	sdiv	r3, r3, r2
 8006424:	e007      	b.n	8006436 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 800642a:	f7fe fdf8 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 800642e:	4603      	mov	r3, r0
 8006430:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8006434:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8006436:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fe fdbb 	bl	8004fc0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 800644e:	f7fe fde6 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8006452:	4603      	mov	r3, r0
 8006454:	461a      	mov	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	461a      	mov	r2, r3
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	18e2      	adds	r2, r4, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
	return *this;
 8006470:	687b      	ldr	r3, [r7, #4]
      }
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bd90      	pop	{r4, r7, pc}
 800647a:	bf00      	nop
 800647c:	cccccccd 	.word	0xcccccccd

08006480 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80064ce:	2200      	movs	r2, #0
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 ff3a 	bl	800734c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 80064d8:	4603      	mov	r3, r0
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 ff4b 	bl	8007388 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4619      	mov	r1, r3
 8006524:	68b8      	ldr	r0, [r7, #8]
 8006526:	f016 fbd7 	bl	801ccd8 <_ZdlPvj>
      }
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006532:	b580      	push	{r7, lr}
 8006534:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006536:	2014      	movs	r0, #20
 8006538:	f7fa fca3 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800653c:	4603      	mov	r3, r0
 800653e:	4618      	mov	r0, r3
 8006540:	bd80      	pop	{r7, pc}

08006542 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006542:	b5b0      	push	{r4, r5, r7, lr}
 8006544:	b08c      	sub	sp, #48	; 0x30
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 ff26 	bl	800739e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006552:	4602      	mov	r2, r0
 8006554:	f107 0308 	add.w	r3, r7, #8
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f000 ff4e 	bl	80073fc <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8006560:	6838      	ldr	r0, [r7, #0]
 8006562:	f000 ff1c 	bl	800739e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006566:	4602      	mov	r2, r0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	461c      	mov	r4, r3
 800656c:	4615      	mov	r5, r2
 800656e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006576:	e895 0003 	ldmia.w	r5, {r0, r1}
 800657a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	4618      	mov	r0, r3
 8006584:	f000 ff0b 	bl	800739e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006588:	4602      	mov	r2, r0
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	461c      	mov	r4, r3
 800658e:	4615      	mov	r5, r2
 8006590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006598:	e895 0003 	ldmia.w	r5, {r0, r1}
 800659c:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80065a0:	bf00      	nop
 80065a2:	3730      	adds	r7, #48	; 0x30
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bdb0      	pop	{r4, r5, r7, pc}

080065a8 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b08b      	sub	sp, #44	; 0x2c
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80065b2:	f107 0308 	add.w	r3, r7, #8
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fc fe13 	bl	80031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80065be:	f107 0318 	add.w	r3, r7, #24
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fc fdf3 	bl	80031b0 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fc fdfe 	bl	80031ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f107 0218 	add.w	r2, r7, #24
 80065d8:	f107 0108 	add.w	r1, r7, #8
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fc fe1d 	bl	800321c <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80065ee:	3304      	adds	r3, #4
 80065f0:	461a      	mov	r2, r3
 80065f2:	f7fc fd98 	bl	8003126 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	f103 0418 	add.w	r4, r3, #24
 80065fe:	4613      	mov	r3, r2
 8006600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8006606:	bf00      	nop
 8006608:	372c      	adds	r7, #44	; 0x2c
 800660a:	46bd      	mov	sp, r7
 800660c:	bd90      	pop	{r4, r7, pc}

0800660e <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800661a:	68b8      	ldr	r0, [r7, #8]
 800661c:	f000 ff0d 	bl	800743a <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8006628:	b5b0      	push	{r4, r5, r7, lr}
 800662a:	b08c      	sub	sp, #48	; 0x30
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 ff0c 	bl	8007450 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006638:	4602      	mov	r2, r0
 800663a:	f107 0308 	add.w	r3, r7, #8
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 ff34 	bl	80074ae <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8006646:	6838      	ldr	r0, [r7, #0]
 8006648:	f000 ff02 	bl	8007450 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800664c:	4602      	mov	r2, r0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	461c      	mov	r4, r3
 8006652:	4615      	mov	r5, r2
 8006654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006660:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006664:	f107 0308 	add.w	r3, r7, #8
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fef1 	bl	8007450 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800666e:	4602      	mov	r2, r0
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	461c      	mov	r4, r3
 8006674:	4615      	mov	r5, r2
 8006676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800667c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006682:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8006686:	bf00      	nop
 8006688:	3730      	adds	r7, #48	; 0x30
 800668a:	46bd      	mov	sp, r7
 800668c:	bdb0      	pop	{r4, r5, r7, pc}

0800668e <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 800668e:	b590      	push	{r4, r7, lr}
 8006690:	b08b      	sub	sp, #44	; 0x2c
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fc fe43 	bl	800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80066a4:	f107 0318 	add.w	r3, r7, #24
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fc fe23 	bl	80032f6 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fc fe2e 	bl	8003314 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f107 0218 	add.w	r2, r7, #24
 80066be:	f107 0108 	add.w	r1, r7, #8
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fc fe4d 	bl	8003362 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80066d4:	3304      	adds	r3, #4
 80066d6:	461a      	mov	r2, r3
 80066d8:	f7fd ff5c 	bl	8004594 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	f103 0418 	add.w	r4, r3, #24
 80066e4:	4613      	mov	r3, r2
 80066e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80066ec:	bf00      	nop
 80066ee:	372c      	adds	r7, #44	; 0x2c
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd90      	pop	{r4, r7, pc}

080066f4 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8006700:	68b8      	ldr	r0, [r7, #8]
 8006702:	f000 fef3 	bl	80074ec <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800670e:	b5b0      	push	{r4, r5, r7, lr}
 8006710:	b08c      	sub	sp, #48	; 0x30
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fef2 	bl	8007502 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 800671e:	4602      	mov	r2, r0
 8006720:	f107 0308 	add.w	r3, r7, #8
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f000 ff1a 	bl	8007560 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 800672c:	6838      	ldr	r0, [r7, #0]
 800672e:	f000 fee8 	bl	8007502 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8006732:	4602      	mov	r2, r0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	461c      	mov	r4, r3
 8006738:	4615      	mov	r5, r2
 800673a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800673c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800673e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006742:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006746:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fed7 	bl	8007502 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8006754:	4602      	mov	r2, r0
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	461c      	mov	r4, r3
 800675a:	4615      	mov	r5, r2
 800675c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800675e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006764:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006768:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 800676c:	bf00      	nop
 800676e:	3730      	adds	r7, #48	; 0x30
 8006770:	46bd      	mov	sp, r7
 8006772:	bdb0      	pop	{r4, r5, r7, pc}

08006774 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f000 ff0c 	bl	800759e <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 ff0a 	bl	80075b4 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4293      	cmp	r3, r2
 80067a6:	bf8c      	ite	hi
 80067a8:	2301      	movhi	r3, #1
 80067aa:	2300      	movls	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80067b2:	f016 faa4 	bl	801ccfe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f016 fa8e 	bl	801ccdc <_Znwj>
 80067c0:	4603      	mov	r3, r0
      }
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4619      	mov	r1, r3
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f016 fa78 	bl	801ccd8 <_ZdlPvj>
      }
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 feda 	bl	80075cc <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800686e:	2200      	movs	r2, #0
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fec2 	bl	80075fc <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 8006878:	4603      	mov	r3, r0
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fed0 	bl	8007638 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fec9 	bl	8007658 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4619      	mov	r1, r3
 80068f8:	68b8      	ldr	r0, [r7, #8]
 80068fa:	f016 f9ed 	bl	801ccd8 <_ZdlPvj>
      }
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 feab 	bl	800766e <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 feb8 	bl	800769e <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 800692e:	4603      	mov	r3, r0
      }
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d201      	bcs.n	8006952 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	e000      	b.n	8006954 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006952:	687b      	ldr	r3, [r7, #4]
    }
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fea2 	bl	80076b6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8006972:	4604      	mov	r4, r0
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	f000 fe9e 	bl	80076b6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 800697a:	4603      	mov	r3, r0
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4619      	mov	r1, r3
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fea3 	bl	80076cc <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8006986:	4603      	mov	r3, r0
    }
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	bd90      	pop	{r4, r7, pc}

08006990 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fe8a 	bl	80076b6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80069a2:	4604      	mov	r4, r0
 80069a4:	68b8      	ldr	r0, [r7, #8]
 80069a6:	f000 fe86 	bl	80076b6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80069aa:	4603      	mov	r3, r0
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4619      	mov	r1, r3
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 feae 	bl	8007712 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80069b6:	4603      	mov	r3, r0
    }
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd90      	pop	{r4, r7, pc}

080069c0 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fec3 	bl	8007758 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 80069d2:	4602      	mov	r2, r0
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4293      	cmp	r3, r2
 80069d8:	bf8c      	ite	hi
 80069da:	2301      	movhi	r3, #1
 80069dc:	2300      	movls	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80069e4:	f016 f98b 	bl	801ccfe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f016 f972 	bl	801ccdc <_Znwj>
 80069f8:	4603      	mov	r3, r0
      }
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fc fe44 	bl	800369c <_ZNSaIhEC1ERKS_>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fc fcce 	bl	80033b8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006a44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006a48:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fe92 	bl	8007774 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 8006a50:	4603      	mov	r3, r0
 8006a52:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006a54:	f107 0208 	add.w	r2, r7, #8
 8006a58:	f107 030c 	add.w	r3, r7, #12
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff ff6a 	bl	8006938 <_ZSt3minIjERKT_S2_S2_>
 8006a64:	4603      	mov	r3, r0
 8006a66:	681b      	ldr	r3, [r3, #0]
      }
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b08b      	sub	sp, #44	; 0x2c
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	109b      	asrs	r3, r3, #2
 8006a8a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006a8c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	4413      	add	r3, r2
 8006a94:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d92d      	bls.n	8006afe <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	1acb      	subs	r3, r1, r3
 8006aae:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006ab0:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	e000      	b.n	8006ac0 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006ac2:	4413      	add	r3, r2
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d209      	bcs.n	8006ae4 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006ad8:	3304      	adds	r3, #4
 8006ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006adc:	4619      	mov	r1, r3
 8006ade:	f000 fe55 	bl	800778c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 8006ae2:	e048      	b.n	8006b76 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006aec:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	4413      	add	r3, r2
 8006af6:	461a      	mov	r2, r3
 8006af8:	f000 fe60 	bl	80077bc <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 8006afc:	e03b      	b.n	8006b76 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3304      	adds	r3, #4
 8006b06:	f107 0208 	add.w	r2, r7, #8
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd fbbe 	bl	800428e <_ZSt3maxIjERKT_S2_S2_>
 8006b12:	4603      	mov	r3, r0
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006b18:	3302      	adds	r3, #2
 8006b1a:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	69b9      	ldr	r1, [r7, #24]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fc87 	bl	8005434 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8006b26:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	e000      	b.n	8006b40 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006b50:	3304      	adds	r3, #4
 8006b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b54:	4619      	mov	r1, r3
 8006b56:	f000 fe19 	bl	800778c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	461a      	mov	r2, r3
 8006b66:	f7fd fd2f 	bl	80045c8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fc90 	bl	80054a2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f103 0018 	add.w	r0, r3, #24
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b94:	4413      	add	r3, r2
 8006b96:	4619      	mov	r1, r3
 8006b98:	f7fe fc83 	bl	80054a2 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8006b9c:	bf00      	nop
 8006b9e:	372c      	adds	r7, #44	; 0x2c
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd90      	pop	{r4, r7, pc}

08006ba4 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006bae:	2200      	movs	r2, #0
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fe1a 	bl	80077ec <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fe2c 	bl	8007828 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8006bd0:	4603      	mov	r3, r0
      }
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	f107 030f 	add.w	r3, r7, #15
 8006bec:	461a      	mov	r2, r3
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fe25 	bl	8007840 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8006bf6:	4603      	mov	r3, r0
	}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fe32 	bl	8007876 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4293      	cmp	r3, r2
 8006c18:	bf8c      	ite	hi
 8006c1a:	2301      	movhi	r3, #1
 8006c1c:	2300      	movls	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006c24:	f016 f86b 	bl	801ccfe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006c28:	68b8      	ldr	r0, [r7, #8]
 8006c2a:	f016 f857 	bl	801ccdc <_Znwj>
 8006c2e:	4603      	mov	r3, r0
      }
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006c38:	b5b0      	push	{r4, r5, r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7fe fed3 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	68b8      	ldr	r0, [r7, #8]
 8006c50:	f7fe fecf 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 8006c54:	4605      	mov	r5, r0
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fe fecb 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	4629      	mov	r1, r5
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 fe13 	bl	800788e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006c68:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bdb0      	pop	{r4, r5, r7, pc}

08006c72 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fe20 	bl	80078c4 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8006c84:	4603      	mov	r3, r0
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fe15 	bl	80078da <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8006cb0:	4603      	mov	r3, r0
    }
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 fe15 	bl	80078fa <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 fe07 	bl	800792a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006d1c:	4603      	mov	r3, r0
    }
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	4413      	add	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	f107 020c 	add.w	r2, r7, #12
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fd ff19 	bl	8004b7c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fde0 	bl	800792a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006d6a:	4603      	mov	r3, r0
    }
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
    { return __it; }
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fd f99c 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	da01      	bge.n	8006dbe <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	e000      	b.n	8006dc0 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8006dbe:	687b      	ldr	r3, [r7, #4]
    }
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b088      	sub	sp, #32
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	109b      	asrs	r3, r3, #2
 8006de2:	4a22      	ldr	r2, [pc, #136]	; (8006e6c <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8006de4:	fb02 f303 	mul.w	r3, r2, r3
 8006de8:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dd34      	ble.n	8006e5a <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	109b      	asrs	r3, r3, #2
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8006dfe:	fb02 f303 	mul.w	r3, r2, r3
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	f107 0218 	add.w	r2, r7, #24
 8006e08:	f107 0314 	add.w	r3, r7, #20
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff ffc8 	bl	8006da4 <_ZSt3minIiERKT_S2_S2_>
 8006e14:	4603      	mov	r3, r0
	  const difference_type __clen
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	461a      	mov	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	1899      	adds	r1, r3, r2
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	68b8      	ldr	r0, [r7, #8]
 8006e32:	f000 fd94 	bl	800795e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	461a      	mov	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	6838      	ldr	r0, [r7, #0]
 8006e4c:	f7ff fab4 	bl	80063b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8006e58:	e7c7      	b.n	8006dea <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7fd f939 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	cccccccd 	.word	0xcccccccd

08006e70 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
    { return __res; }
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7fd f928 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fe f857 	bl	8004f4a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fb ffca 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	1ae3      	subs	r3, r4, r3
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	bf8c      	ite	hi
 8006eae:	2301      	movhi	r3, #1
 8006eb0:	2300      	movls	r3, #0
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8006eb8:	4816      	ldr	r0, [pc, #88]	; (8006f14 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8006eba:	f015 ff23 	bl	801cd04 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006ebe:	f7ff fb38 	bl	8006532 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006eca:	f7ff fb32 	bl	8006532 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006ece:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006ed0:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ed4:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fe f847 	bl	8004f6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006ede:	2301      	movs	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d80f      	bhi.n	8006f0a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	425b      	negs	r3, r3
 8006ef6:	18d4      	adds	r4, r2, r3
 8006ef8:	4608      	mov	r0, r1
 8006efa:	f7fe f84f 	bl	8004f9c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8006efe:	4603      	mov	r3, r0
 8006f00:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e7eb      	b.n	8006ee2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd90      	pop	{r4, r7, pc}
 8006f12:	bf00      	nop
 8006f14:	0801e4d4 	.word	0x0801e4d4

08006f18 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7fd f8d4 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fd25 	bl	800797e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8006f34:	bf00      	nop
      }
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08a      	sub	sp, #40	; 0x28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fd f8bb 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f107 0314 	add.w	r3, r7, #20
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	f000 fd19 	bl	800799e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	3728      	adds	r7, #40	; 0x28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8006f74:	b590      	push	{r4, r7, lr}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fd ffe3 	bl	8004f4a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8006f84:	4604      	mov	r4, r0
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fb ff56 	bl	8002e38 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	1ae3      	subs	r3, r4, r3
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	bf8c      	ite	hi
 8006f96:	2301      	movhi	r3, #1
 8006f98:	2300      	movls	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8006fa0:	4815      	ldr	r0, [pc, #84]	; (8006ff8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8006fa2:	f015 feaf 	bl	801cd04 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006fa6:	f7ff fac4 	bl	8006532 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006faa:	4602      	mov	r2, r0
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	4413      	add	r3, r2
 8006fb0:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006fb2:	f7ff fabe 	bl	8006532 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006fb6:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006fb8:	fbb4 f3f3 	udiv	r3, r4, r3
 8006fbc:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fd04 	bl	80079ce <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d80e      	bhi.n	8006ff0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	18d4      	adds	r4, r2, r3
 8006fde:	4608      	mov	r0, r1
 8006fe0:	f7fd ffdc 	bl	8004f9c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3301      	adds	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e7ec      	b.n	8006fca <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd90      	pop	{r4, r7, pc}
 8006ff8:	0801e4f4 	.word	0x0801e4f4

08006ffc <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b09b      	sub	sp, #108	; 0x6c
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 800700a:	f107 0320 	add.w	r3, r7, #32
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	4618      	mov	r0, r3
 8007012:	f7fd f85f 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007016:	f107 0310 	add.w	r3, r7, #16
 800701a:	f107 0220 	add.w	r2, r7, #32
 800701e:	4611      	mov	r1, r2
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fcef 	bl	8007a04 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8007026:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	f7fd f851 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007036:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800703a:	4611      	mov	r1, r2
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fce1 	bl	8007a04 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8007042:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f7fd f843 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007054:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007058:	f107 0110 	add.w	r1, r7, #16
 800705c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4623      	mov	r3, r4
 8007062:	f000 fcf8 	bl	8007a56 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	3764      	adds	r7, #100	; 0x64
 800706a:	46bd      	mov	sp, r7
 800706c:	bd90      	pop	{r4, r7, pc}

0800706e <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move(_II __first, _II __last, _OI __result)
 800706e:	b580      	push	{r7, lr}
 8007070:	b098      	sub	sp, #96	; 0x60
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 800707c:	f107 0320 	add.w	r3, r7, #32
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	4618      	mov	r0, r3
 8007084:	f7fd f826 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007088:	f107 0310 	add.w	r3, r7, #16
 800708c:	f107 0220 	add.w	r2, r7, #32
 8007090:	4611      	mov	r1, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fd05 	bl	8007aa2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007098:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fd f818 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80070a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80070ac:	4611      	mov	r1, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fcf7 	bl	8007aa2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80070b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fd f80a 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80070ca:	f107 0110 	add.w	r1, r7, #16
 80070ce:	f000 fcf5 	bl	8007abc <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	3760      	adds	r7, #96	; 0x60
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 80070da:	b590      	push	{r4, r7, lr}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fd fe4f 	bl	8004d8c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80070ee:	4622      	mov	r2, r4
 80070f0:	68f9      	ldr	r1, [r7, #12]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fe fcd2 	bl	8005a9c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd90      	pop	{r4, r7, pc}

08007100 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b0a3      	sub	sp, #140	; 0x8c
 8007104:	af02      	add	r7, sp, #8
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 800710e:	f107 0320 	add.w	r3, r7, #32
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	4618      	mov	r0, r3
 8007116:	f7fc ffdd 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800711a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4618      	mov	r0, r3
 8007122:	f7fc ffd7 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800712a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800712e:	4618      	mov	r0, r3
 8007130:	f7fc ffd0 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007134:	f107 0010 	add.w	r0, r7, #16
 8007138:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800713c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007140:	f107 0120 	add.w	r1, r7, #32
 8007144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4623      	mov	r3, r4
 800714c:	f7ff ff56 	bl	8006ffc <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8007150:	f107 0210 	add.w	r2, r7, #16
 8007154:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7fc ffba 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007166:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	f7fe fd0e 	bl	8005b94 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
    }
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	3784      	adds	r7, #132	; 0x84
 800717c:	46bd      	mov	sp, r7
 800717e:	bd90      	pop	{r4, r7, pc}

08007180 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8007180:	b580      	push	{r7, lr}
 8007182:	b098      	sub	sp, #96	; 0x60
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
					       __result);
 800718e:	f107 0320 	add.w	r3, r7, #32
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	4618      	mov	r0, r3
 8007196:	f7fc ff9d 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800719a:	f107 0310 	add.w	r3, r7, #16
 800719e:	f107 0220 	add.w	r2, r7, #32
 80071a2:	4611      	mov	r1, r2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fc7c 	bl	8007aa2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80071aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fc ff8f 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80071b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fc6e 	bl	8007aa2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80071c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fc ff81 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80071dc:	f107 0110 	add.w	r1, r7, #16
 80071e0:	f000 fcb2 	bl	8007b48 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	3760      	adds	r7, #96	; 0x60
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b0a3      	sub	sp, #140	; 0x8c
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 80071fa:	f107 0320 	add.w	r3, r7, #32
 80071fe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007202:	4618      	mov	r0, r3
 8007204:	f7fc ff66 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007208:	f107 0010 	add.w	r0, r7, #16
 800720c:	f107 0220 	add.w	r2, r7, #32
 8007210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	4613      	mov	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	f7fe fcba 	bl	8005b94 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8007220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7fc ff54 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800722c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007230:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007234:	4618      	mov	r0, r3
 8007236:	f7fc ff4d 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800723a:	f107 0210 	add.w	r2, r7, #16
 800723e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7fc ff45 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007250:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007254:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	4623      	mov	r3, r4
 8007260:	f7ff fecc 	bl	8006ffc <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	3784      	adds	r7, #132	; 0x84
 8007268:	46bd      	mov	sp, r7
 800726a:	bd90      	pop	{r4, r7, pc}

0800726c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fcad 	bl	8007bd4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 800727a:	4603      	mov	r3, r0
      }
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8007284:	b590      	push	{r4, r7, lr}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fcab 	bl	8007bec <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007296:	4604      	mov	r4, r0
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f000 fca7 	bl	8007bec <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 800729e:	4603      	mov	r3, r0
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4619      	mov	r1, r3
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fcac 	bl	8007c02 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80072aa:	4603      	mov	r3, r0
    }
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd90      	pop	{r4, r7, pc}

080072b4 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fc93 	bl	8007bec <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80072c6:	4604      	mov	r4, r0
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f000 fc8f 	bl	8007bec <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80072ce:	4603      	mov	r3, r0
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4619      	mov	r1, r3
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 fcb7 	bl	8007c48 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80072da:	4603      	mov	r3, r0
    }
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd90      	pop	{r4, r7, pc}

080072e4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 fccd 	bl	8007c90 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80072f6:	4602      	mov	r2, r0
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4293      	cmp	r3, r2
 80072fc:	bf8c      	ite	hi
 80072fe:	2301      	movhi	r3, #1
 8007300:	2300      	movls	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007308:	f015 fcf9 	bl	801ccfe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4618      	mov	r0, r3
 8007318:	f015 fce0 	bl	801ccdc <_Znwj>
 800731c:	4603      	mov	r3, r0
      }
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4619      	mov	r1, r3
 800733e:	68b8      	ldr	r0, [r7, #8]
 8007340:	f015 fcca 	bl	801ccd8 <_ZdlPvj>
      }
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fca7 	bl	8007cac <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 800735e:	4602      	mov	r2, r0
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4293      	cmp	r3, r2
 8007364:	bf8c      	ite	hi
 8007366:	2301      	movhi	r3, #1
 8007368:	2300      	movls	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007370:	f015 fcc5 	bl	801ccfe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4618      	mov	r0, r3
 800737a:	f015 fcaf 	bl	801ccdc <_Znwj>
 800737e:	4603      	mov	r3, r0
      }
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4618      	mov	r0, r3
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f103 0208 	add.w	r2, r3, #8
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fb ff02 	bl	80031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 0218 	add.w	r2, r3, #24
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	3318      	adds	r3, #24
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fb fef9 	bl	80031e4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80073fc:	b5b0      	push	{r4, r5, r7, lr}
 80073fe:	b08c      	sub	sp, #48	; 0x30
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ffd3 	bl	80073b4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 800740e:	f107 0308 	add.w	r3, r7, #8
 8007412:	4618      	mov	r0, r3
 8007414:	f7fc ff17 	bl	8004246 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	461d      	mov	r5, r3
 800741c:	f107 0408 	add.w	r4, r7, #8
 8007420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007428:	e894 0003 	ldmia.w	r4, {r0, r1}
 800742c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4618      	mov	r0, r3
 8007434:	3730      	adds	r7, #48	; 0x30
 8007436:	46bd      	mov	sp, r7
 8007438:	bdb0      	pop	{r4, r5, r7, pc}

0800743a <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f103 0208 	add.w	r2, r3, #8
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	3308      	adds	r3, #8
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f7fb ff4c 	bl	800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f103 0218 	add.w	r2, r3, #24
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	3318      	adds	r3, #24
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fb ff43 	bl	800332a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80074ae:	b5b0      	push	{r4, r5, r7, lr}
 80074b0:	b08c      	sub	sp, #48	; 0x30
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff ffd3 	bl	8007466 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 80074c0:	f107 0308 	add.w	r3, r7, #8
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fd ff91 	bl	80053ec <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	461d      	mov	r5, r3
 80074ce:	f107 0408 	add.w	r4, r7, #8
 80074d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074de:	e885 0003 	stmia.w	r5, {r0, r1}
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4618      	mov	r0, r3
 80074e6:	3730      	adds	r7, #48	; 0x30
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bdb0      	pop	{r4, r5, r7, pc}

080074ec <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	605a      	str	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f103 0208 	add.w	r2, r3, #8
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f7fc fdc8 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f103 0218 	add.w	r2, r3, #24
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	3318      	adds	r3, #24
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f7fc fdbf 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8007560:	b5b0      	push	{r4, r5, r7, lr}
 8007562:	b08c      	sub	sp, #48	; 0x30
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ffd3 	bl	8007518 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 8007572:	f107 0308 	add.w	r3, r7, #8
 8007576:	4618      	mov	r0, r3
 8007578:	f7fd fd8f 	bl	800509a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	461d      	mov	r5, r3
 8007580:	f107 0408 	add.w	r4, r7, #8
 8007584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800758a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800758c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007590:	e885 0003 	stmia.w	r5, {r0, r1}
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4618      	mov	r0, r3
 8007598:	3730      	adds	r7, #48	; 0x30
 800759a:	46bd      	mov	sp, r7
 800759c:	bdb0      	pop	{r4, r5, r7, pc}

0800759e <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80075bc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d00a      	beq.n	80075f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fb70 	bl	8007cc4 <_ZSt11__addressofI7RequestEPT_RS1_>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fb77 	bl	8007cda <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3314      	adds	r3, #20
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	e7f0      	b.n	80075d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fb71 	bl	8007cf0 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 800760e:	4602      	mov	r2, r0
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4293      	cmp	r3, r2
 8007614:	bf8c      	ite	hi
 8007616:	2301      	movhi	r3, #1
 8007618:	2300      	movls	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007620:	f015 fb6d 	bl	801ccfe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4618      	mov	r0, r3
 800762a:	f015 fb57 	bl	801ccdc <_Znwj>
 800762e:	4603      	mov	r3, r0
      }
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	68b8      	ldr	r0, [r7, #8]
 800764c:	f015 fb44 	bl	801ccd8 <_ZdlPvj>
      }
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d00a      	beq.n	8007696 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fb41 	bl	8007d08 <_ZSt11__addressofI8ResponceEPT_RS1_>
 8007686:	4603      	mov	r3, r0
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fb48 	bl	8007d1e <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3310      	adds	r3, #16
 8007692:	607b      	str	r3, [r7, #4]
 8007694:	e7f0      	b.n	8007678 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f856 	bl	8007758 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 80076ac:	4603      	mov	r3, r0
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80076cc:	b5b0      	push	{r4, r5, r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fb2b 	bl	8007d34 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80076de:	4604      	mov	r4, r0
 80076e0:	68b8      	ldr	r0, [r7, #8]
 80076e2:	f000 fb27 	bl	8007d34 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80076e6:	4605      	mov	r5, r0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fb22 	bl	8007d34 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	4629      	mov	r1, r5
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fb27 	bl	8007d4a <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80076fc:	4602      	mov	r2, r0
 80076fe:	1d3b      	adds	r3, r7, #4
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fb31 	bl	8007d6a <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8007708:	4603      	mov	r3, r0
    }
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bdb0      	pop	{r4, r5, r7, pc}

08007712 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007712:	b5b0      	push	{r4, r5, r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fb08 	bl	8007d34 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007724:	4604      	mov	r4, r0
 8007726:	68b8      	ldr	r0, [r7, #8]
 8007728:	f000 fb04 	bl	8007d34 <_ZSt12__niter_baseIPP7RequestET_S3_>
 800772c:	4605      	mov	r5, r0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 faff 	bl	8007d34 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007736:	4603      	mov	r3, r0
 8007738:	461a      	mov	r2, r3
 800773a:	4629      	mov	r1, r5
 800773c:	4620      	mov	r0, r4
 800773e:	f000 fb20 	bl	8007d82 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007742:	4602      	mov	r2, r0
 8007744:	1d3b      	adds	r3, r7, #4
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fb0e 	bl	8007d6a <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 800774e:	4603      	mov	r3, r0
    }
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bdb0      	pop	{r4, r5, r7, pc}

08007758 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007760:	4b03      	ldr	r3, [pc, #12]	; (8007770 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	06666666 	.word	0x06666666

08007774 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fb10 	bl	8007da2 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 8007782:	4603      	mov	r3, r0
      }
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fb0e 	bl	8007dba <_ZSt12__miter_baseIPP8ResponceET_S3_>
 800779e:	4604      	mov	r4, r0
 80077a0:	68b8      	ldr	r0, [r7, #8]
 80077a2:	f000 fb0a 	bl	8007dba <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80077a6:	4603      	mov	r3, r0
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4619      	mov	r1, r3
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 fb0f 	bl	8007dd0 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80077b2:	4603      	mov	r3, r0
    }
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd90      	pop	{r4, r7, pc}

080077bc <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 faf6 	bl	8007dba <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80077ce:	4604      	mov	r4, r0
 80077d0:	68b8      	ldr	r0, [r7, #8]
 80077d2:	f000 faf2 	bl	8007dba <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80077d6:	4603      	mov	r3, r0
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 fb1a 	bl	8007e16 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80077e2:	4603      	mov	r3, r0
    }
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd90      	pop	{r4, r7, pc}

080077ec <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fb2f 	bl	8007e5c <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 80077fe:	4602      	mov	r2, r0
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4293      	cmp	r3, r2
 8007804:	bf8c      	ite	hi
 8007806:	2301      	movhi	r3, #1
 8007808:	2300      	movls	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007810:	f015 fa75 	bl	801ccfe <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	4618      	mov	r0, r3
 800781a:	f015 fa5f 	bl	801ccdc <_Znwj>
 800781e:	4603      	mov	r3, r0
      }
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f820 	bl	8007876 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8007836:	4603      	mov	r3, r0
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8007840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800784c:	68fc      	ldr	r4, [r7, #12]
 800784e:	68b8      	ldr	r0, [r7, #8]
 8007850:	f7f9 fb00 	bl	8000e54 <_ZSt17__size_to_integerj>
 8007854:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8007856:	f107 030c 	add.w	r3, r7, #12
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fb0a 	bl	8007e74 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8007860:	4633      	mov	r3, r6
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	4629      	mov	r1, r5
 8007866:	4620      	mov	r0, r4
 8007868:	f000 fb0f 	bl	8007e8a <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 800786c:	4603      	mov	r3, r0
    }
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007876 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800787e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd05      	ble.n	80078b6 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	461a      	mov	r2, r3
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f015 fab5 	bl	801ce20 <memmove>
      return __result + __count;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	4413      	add	r3, r2
    }
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fae8 	bl	8007ec0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80078f0:	4603      	mov	r3, r0
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80078fa:	b590      	push	{r4, r7, lr}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7fd f948 	bl	8004b9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800790c:	4604      	mov	r4, r0
 800790e:	68b8      	ldr	r0, [r7, #8]
 8007910:	f7fd f944 	bl	8004b9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8007914:	4603      	mov	r3, r0
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	4619      	mov	r1, r3
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fae8 	bl	8007ef0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8007920:	4603      	mov	r3, r0
    }
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	bd90      	pop	{r4, r7, pc}

0800792a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	461a      	mov	r2, r3
 8007948:	68f9      	ldr	r1, [r7, #12]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f015 fa68 	bl	801ce20 <memmove>
	  return __result + _Num;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	4413      	add	r3, r2
	}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fae1 	bl	8007f36 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8007974:	4603      	mov	r3, r0
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	425b      	negs	r3, r3
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fe fd12 	bl	80063b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 8007994:	4603      	mov	r3, r0
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800799e:	b580      	push	{r7, lr}
 80079a0:	b088      	sub	sp, #32
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	607a      	str	r2, [r7, #4]
 80079aa:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80079ac:	f107 0310 	add.w	r3, r7, #16
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fc fb8e 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f107 0310 	add.w	r3, r7, #16
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	f7fd f9c3 	bl	8004d4c <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	6809      	ldr	r1, [r1, #0]
 80079e8:	1a41      	subs	r1, r0, r1
 80079ea:	1089      	asrs	r1, r1, #2
 80079ec:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d904      	bls.n	80079fc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80079f2:	2200      	movs	r2, #0
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fe fc26 	bl	8006248 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
    make_move_iterator(_Iterator __i)
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8007a0e:	6838      	ldr	r0, [r7, #0]
 8007a10:	f000 faa1 	bl	8007f56 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8007a14:	4602      	mov	r2, r0
 8007a16:	f107 0308 	add.w	r3, r7, #8
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fc fb59 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007a22:	f107 0308 	add.w	r3, r7, #8
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa9f 	bl	8007f6c <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fc fb44 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b090      	sub	sp, #64	; 0x40
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007a64:	f107 0310 	add.w	r3, r7, #16
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff ffe3 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007a70:	f107 0320 	add.w	r3, r7, #32
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ffdd 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fc fb26 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a8e:	f107 0220 	add.w	r2, r7, #32
 8007a92:	f107 0110 	add.w	r1, r7, #16
 8007a96:	f000 fa7c 	bl	8007f92 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	3740      	adds	r7, #64	; 0x40
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
    { return __it; }
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fc fb10 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b0a0      	sub	sp, #128	; 0x80
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8007aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fc faff 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007ad6:	f107 0320 	add.w	r3, r7, #32
 8007ada:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff f952 	bl	8006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007ae6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fc faf1 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007af2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007af6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007afa:	4611      	mov	r1, r2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff f944 	bl	8006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007b02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fc fae3 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007b0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b12:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007b16:	4611      	mov	r1, r2
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff f936 	bl	8006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007b1e:	f107 0010 	add.w	r0, r7, #16
 8007b22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b26:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007b2a:	f107 0120 	add.w	r1, r7, #32
 8007b2e:	f000 fa59 	bl	8007fe4 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f107 0210 	add.w	r2, r7, #16
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff f998 	bl	8006e70 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	3780      	adds	r7, #128	; 0x80
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b0a0      	sub	sp, #128	; 0x80
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8007b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fc fab9 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007b62:	f107 0320 	add.w	r3, r7, #32
 8007b66:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff f90c 	bl	8006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007b72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fc faab 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007b86:	4611      	mov	r1, r2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff f8fe 	bl	8006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007b8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fc fa9d 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007b9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b9e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff f8f0 	bl	8006d8a <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007baa:	f107 0010 	add.w	r0, r7, #16
 8007bae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007bb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007bb6:	f107 0120 	add.w	r1, r7, #32
 8007bba:	f000 fa39 	bl	8008030 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f107 0210 	add.w	r2, r7, #16
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff f952 	bl	8006e70 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	3780      	adds	r7, #128	; 0x80
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f857 	bl	8007c90 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8007be2:	4603      	mov	r3, r0
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007c02:	b5b0      	push	{r4, r5, r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fa34 	bl	800807c <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007c14:	4604      	mov	r4, r0
 8007c16:	68b8      	ldr	r0, [r7, #8]
 8007c18:	f000 fa30 	bl	800807c <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fa2b 	bl	800807c <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007c26:	4603      	mov	r3, r0
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 fa30 	bl	8008092 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8007c32:	4602      	mov	r2, r0
 8007c34:	1d3b      	adds	r3, r7, #4
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fa3a 	bl	80080b2 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8007c3e:	4603      	mov	r3, r0
    }
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bdb0      	pop	{r4, r5, r7, pc}

08007c48 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007c48:	b5b0      	push	{r4, r5, r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fa11 	bl	800807c <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	68b8      	ldr	r0, [r7, #8]
 8007c5e:	f000 fa0d 	bl	800807c <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007c62:	4605      	mov	r5, r0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fa08 	bl	800807c <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	4629      	mov	r1, r5
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 fa29 	bl	80080ca <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	1d3b      	adds	r3, r7, #4
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fa17 	bl	80080b2 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8007c84:	4603      	mov	r3, r0
    }
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007c90 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007c98:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
      }
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	06666666 	.word	0x06666666

08007cac <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007cb4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7f9 f98b 	bl	8000ffe <_ZN7RequestD1Ev>
    }
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007cf8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7f9 f9d6 	bl	80010d8 <_ZN8ResponceD1Ev>
    }
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f9c5 	bl	80080ea <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007d60:	4603      	mov	r3, r0
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f9b9 	bl	800810a <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f856 	bl	8007e5c <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8007db0:	4603      	mov	r3, r0
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007dd0:	b5b0      	push	{r4, r5, r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f9a4 	bl	800812a <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007de2:	4604      	mov	r4, r0
 8007de4:	68b8      	ldr	r0, [r7, #8]
 8007de6:	f000 f9a0 	bl	800812a <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007dea:	4605      	mov	r5, r0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f99b 	bl	800812a <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461a      	mov	r2, r3
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 f9a0 	bl	8008140 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007e00:	4602      	mov	r2, r0
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f9aa 	bl	8008160 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8007e0c:	4603      	mov	r3, r0
    }
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bdb0      	pop	{r4, r5, r7, pc}

08007e16 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007e16:	b5b0      	push	{r4, r5, r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f981 	bl	800812a <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	68b8      	ldr	r0, [r7, #8]
 8007e2c:	f000 f97d 	bl	800812a <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007e30:	4605      	mov	r5, r0
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 f978 	bl	800812a <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 f999 	bl	8008178 <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007e46:	4602      	mov	r2, r0
 8007e48:	1d3b      	adds	r3, r7, #4
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 f987 	bl	8008160 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8007e52:	4603      	mov	r3, r0
    }
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bdb0      	pop	{r4, r5, r7, pc}

08007e5c <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007e64:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007e7c:	bf00      	nop
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	e00a      	b.n	8007eb8 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f973 	bl	8008198 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4413      	add	r3, r2
    }
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007ec0:	b590      	push	{r4, r7, lr}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f972 	bl	80081b6 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	68b8      	ldr	r0, [r7, #8]
 8007ed6:	f000 f96e 	bl	80081b6 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007eda:	4603      	mov	r3, r0
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 f979 	bl	80081d8 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8007ee6:	4603      	mov	r3, r0
    }
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}

08007ef0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007ef0:	b5b0      	push	{r4, r5, r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f7fd fd2c 	bl	800595a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007f02:	4604      	mov	r4, r0
 8007f04:	68b8      	ldr	r0, [r7, #8]
 8007f06:	f7fd fd28 	bl	800595a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd fd6f 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461a      	mov	r2, r3
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f7fd fd39 	bl	8005992 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8007f20:	4602      	mov	r2, r0
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd fd7e 	bl	8005a28 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007f2c:	4603      	mov	r3, r0
    }
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bdb0      	pop	{r4, r5, r7, pc}

08007f36 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f96a 	bl	8008220 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8007f4c:	4603      	mov	r3, r0
    }
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8007f6c:	b590      	push	{r4, r7, lr}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007f76:	687c      	ldr	r4, [r7, #4]
 8007f78:	6838      	ldr	r0, [r7, #0]
 8007f7a:	f7ff ffec 	bl	8007f56 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4619      	mov	r1, r3
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7fc f8a6 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd90      	pop	{r4, r7, pc}

08007f92 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b092      	sub	sp, #72	; 0x48
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8007fa6:	f107 0314 	add.w	r3, r7, #20
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fd42 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff fd3c 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fc f885 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007fd4:	f107 0114 	add.w	r1, r7, #20
 8007fd8:	f000 f94c 	bl	8008274 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	3748      	adds	r7, #72	; 0x48
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b090      	sub	sp, #64	; 0x40
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8007ff2:	f107 0310 	add.w	r3, r7, #16
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fc f86b 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007ffe:	f107 0320 	add.w	r3, r7, #32
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4618      	mov	r0, r3
 8008006:	f7fc f865 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800800a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f7fc f85f 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800801c:	f107 0220 	add.w	r2, r7, #32
 8008020:	f107 0110 	add.w	r1, r7, #16
 8008024:	f000 f94c 	bl	80082c0 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	3740      	adds	r7, #64	; 0x40
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8008030:	b580      	push	{r7, lr}
 8008032:	b090      	sub	sp, #64	; 0x40
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 800803e:	f107 0310 	add.w	r3, r7, #16
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	4618      	mov	r0, r3
 8008046:	f7fc f845 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800804a:	f107 0320 	add.w	r3, r7, #32
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	f7fc f83f 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008056:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f7fc f839 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008068:	f107 0220 	add.w	r2, r7, #32
 800806c:	f107 0110 	add.w	r1, r7, #16
 8008070:	f000 f9a1 	bl	80083b6 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	3740      	adds	r7, #64	; 0x40
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fa02 	bl	80084ac <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
    { return __res; }
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	68b9      	ldr	r1, [r7, #8]
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f9f6 	bl	80084cc <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80080e0:	4603      	mov	r3, r0
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 f9f6 	bl	80084ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 8008100:	4603      	mov	r3, r0
    }
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	68b9      	ldr	r1, [r7, #8]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fa03 	bl	8008526 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 8008120:	4603      	mov	r3, r0
    }
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 fa0a 	bl	800856a <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8008156:	4603      	mov	r3, r0
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
    { return __res; }
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f9fe 	bl	800858a <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 800818e:	4603      	mov	r3, r0
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f9fe 	bl	80085aa <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80081be:	1d3b      	adds	r3, r7, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fa0c 	bl	80085de <_ZNKSt13move_iteratorIPhE4baseEv>
 80081c6:	4603      	mov	r3, r0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fc fd20 	bl	8004c0e <_ZSt12__miter_baseIPhET_S1_>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80081d8:	b5b0      	push	{r4, r5, r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7fd fc04 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 80081ea:	4604      	mov	r4, r0
 80081ec:	68b8      	ldr	r0, [r7, #8]
 80081ee:	f7fd fc00 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 80081f2:	4605      	mov	r5, r0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd fbfb 	bl	80059f2 <_ZSt12__niter_baseIPhET_S1_>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	4629      	mov	r1, r5
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f9f7 	bl	80085f6 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 8008208:	4602      	mov	r2, r0
 800820a:	1d3b      	adds	r3, r7, #4
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd fc0a 	bl	8005a28 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8008214:	4603      	mov	r3, r0
    }
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008220 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	109b      	asrs	r3, r3, #2
 8008234:	4a0e      	ldr	r2, [pc, #56]	; (8008270 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8008236:	fb02 f303 	mul.w	r3, r2, r3
 800823a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	461a      	mov	r2, r3
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f014 fde5 	bl	801ce20 <memmove>
	  return __result + _Num;
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	461a      	mov	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4413      	add	r3, r2
	}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	cccccccd 	.word	0xcccccccd

08008274 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008274:	b580      	push	{r7, lr}
 8008276:	b090      	sub	sp, #64	; 0x40
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8008282:	f107 0310 	add.w	r3, r7, #16
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	4618      	mov	r0, r3
 800828a:	f7ff fbd4 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 800828e:	f107 0320 	add.w	r3, r7, #32
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff fbce 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 800829a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fb ff17 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082ac:	f107 0220 	add.w	r2, r7, #32
 80082b0:	f107 0110 	add.w	r1, r7, #16
 80082b4:	f000 f9af 	bl	8008616 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	3740      	adds	r7, #64	; 0x40
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 80082c0:	b5b0      	push	{r4, r5, r7, lr}
 80082c2:	b09e      	sub	sp, #120	; 0x78
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d058      	beq.n	800838c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	681c      	ldr	r4, [r3, #0]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	689d      	ldr	r5, [r3, #8]
 80082e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fb fef3 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80082ee:	f107 0014 	add.w	r0, r7, #20
 80082f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f6:	462a      	mov	r2, r5
 80082f8:	4621      	mov	r1, r4
 80082fa:	f000 f9c3 	bl	8008684 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	461c      	mov	r4, r3
 8008302:	f107 0314 	add.w	r3, r7, #20
 8008306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	3304      	adds	r3, #4
 8008312:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800831a:	429a      	cmp	r2, r3
 800831c:	d024      	beq.n	8008368 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 800831e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008320:	681d      	ldr	r5, [r3, #0]
 8008322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008324:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 8008326:	f7fc fe7a 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 800832a:	4602      	mov	r2, r0
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
	    __result
 8008334:	441c      	add	r4, r3
 8008336:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f7fb fec9 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008342:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008346:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800834a:	4622      	mov	r2, r4
 800834c:	4629      	mov	r1, r5
 800834e:	f000 f999 	bl	8008684 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	461c      	mov	r4, r3
 8008356:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800835a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800835c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8008360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008362:	3304      	adds	r3, #4
 8008364:	677b      	str	r3, [r7, #116]	; 0x74
 8008366:	e7d5      	b.n	8008314 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685c      	ldr	r4, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681d      	ldr	r5, [r3, #0]
 8008370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f7fb feac 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008382:	462a      	mov	r2, r5
 8008384:	4621      	mov	r1, r4
 8008386:	f000 f97d 	bl	8008684 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 800838a:	e010      	b.n	80083ae <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	681c      	ldr	r4, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681d      	ldr	r5, [r3, #0]
 8008394:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f7fb fe9a 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80083a6:	462a      	mov	r2, r5
 80083a8:	4621      	mov	r1, r4
 80083aa:	f000 f96b 	bl	8008684 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	3778      	adds	r7, #120	; 0x78
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bdb0      	pop	{r4, r5, r7, pc}

080083b6 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 80083b6:	b5b0      	push	{r4, r5, r7, lr}
 80083b8:	b09e      	sub	sp, #120	; 0x78
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
 80083c2:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d058      	beq.n	8008482 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685c      	ldr	r4, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681d      	ldr	r5, [r3, #0]
 80083d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fb fe78 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80083e4:	f107 0014 	add.w	r0, r7, #20
 80083e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ec:	462a      	mov	r2, r5
 80083ee:	4621      	mov	r1, r4
 80083f0:	f000 f99a 	bl	8008728 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	461c      	mov	r4, r3
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80083fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	3b04      	subs	r3, #4
 8008408:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008410:	429a      	cmp	r2, r3
 8008412:	d024      	beq.n	800845e <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8008414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008416:	681d      	ldr	r5, [r3, #0]
 8008418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841a:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 800841c:	f7fc fdff 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8008420:	4602      	mov	r2, r0
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 800842a:	441c      	add	r4, r3
 800842c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f7fb fe4e 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008438:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800843c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008440:	4622      	mov	r2, r4
 8008442:	4629      	mov	r1, r5
 8008444:	f000 f970 	bl	8008728 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	461c      	mov	r4, r3
 800844c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8008456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008458:	3b04      	subs	r3, #4
 800845a:	677b      	str	r3, [r7, #116]	; 0x74
 800845c:	e7d5      	b.n	800840a <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	681c      	ldr	r4, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	689d      	ldr	r5, [r3, #8]
 8008466:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f7fb fe31 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008478:	462a      	mov	r2, r5
 800847a:	4621      	mov	r1, r4
 800847c:	f000 f954 	bl	8008728 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8008480:	e010      	b.n	80084a4 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	681c      	ldr	r4, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681d      	ldr	r5, [r3, #0]
 800848a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f7fb fe1f 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800849c:	462a      	mov	r2, r5
 800849e:	4621      	mov	r1, r4
 80084a0:	f000 f942 	bl	8008728 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	3778      	adds	r7, #120	; 0x78
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bdb0      	pop	{r4, r5, r7, pc}

080084ac <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f999 	bl	80087f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 80084c2:	4603      	mov	r3, r0
    }
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f9a6 	bl	800882e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 80084e2:	4603      	mov	r3, r0
    }
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	109b      	asrs	r3, r3, #2
 8008500:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d006      	beq.n	8008516 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	461a      	mov	r2, r3
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f014 fc85 	bl	801ce20 <memmove>
	  return __result + _Num;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4413      	add	r3, r2
	}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008526:	b580      	push	{r7, lr}
 8008528:	b086      	sub	sp, #24
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	109b      	asrs	r3, r3, #2
 800853a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	425b      	negs	r3, r3
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	18d0      	adds	r0, r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	461a      	mov	r2, r3
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	f014 fc64 	bl	801ce20 <memmove>
	  return __result - _Num;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	425b      	negs	r3, r3
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	4413      	add	r3, r2
	}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f979 	bl	8008872 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 8008580:	4603      	mov	r3, r0
    }
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 f986 	bl	80088ac <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 80085a0:	4603      	mov	r3, r0
    }
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b086      	sub	sp, #24
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	613b      	str	r3, [r7, #16]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4619      	mov	r1, r3
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f014 fc3f 	bl	801ce54 <memset>
    }
 80085d6:	bf00      	nop
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f972 	bl	80088f0 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800860c:	4603      	mov	r3, r0
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8008616:	b580      	push	{r7, lr}
 8008618:	b098      	sub	sp, #96	; 0x60
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008624:	f107 0320 	add.w	r3, r7, #32
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fa03 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8008630:	f107 0310 	add.w	r3, r7, #16
 8008634:	f107 0220 	add.w	r2, r7, #32
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f968 	bl	8008910 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008640:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff f9f5 	bl	8007a36 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 800864c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008650:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f000 f95a 	bl	8008910 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800865c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f7fb fd36 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800866e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008672:	f107 0110 	add.w	r1, r7, #16
 8008676:	f7ff fa21 	bl	8007abc <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	3760      	adds	r7, #96	; 0x60
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	109b      	asrs	r3, r3, #2
 800869a:	4a22      	ldr	r2, [pc, #136]	; (8008724 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 800869c:	fb02 f303 	mul.w	r3, r2, r3
 80086a0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dd34      	ble.n	8008712 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	109b      	asrs	r3, r3, #2
 80086b4:	4a1b      	ldr	r2, [pc, #108]	; (8008724 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	61bb      	str	r3, [r7, #24]
 80086bc:	f107 0218 	add.w	r2, r7, #24
 80086c0:	f107 0314 	add.w	r3, r7, #20
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fb6c 	bl	8006da4 <_ZSt3minIiERKT_S2_S2_>
 80086cc:	4603      	mov	r3, r0
	  const difference_type __clen
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	461a      	mov	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	1899      	adds	r1, r3, r2
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	68b8      	ldr	r0, [r7, #8]
 80086ea:	f000 f927 	bl	800893c <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	461a      	mov	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	4413      	add	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8008700:	69f9      	ldr	r1, [r7, #28]
 8008702:	6838      	ldr	r0, [r7, #0]
 8008704:	f7fd fe58 	bl	80063b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8008710:	e7c7      	b.n	80086a2 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7fb fcdd 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	cccccccd 	.word	0xcccccccd

08008728 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	109b      	asrs	r3, r3, #2
 800873e:	4a2c      	ldr	r2, [pc, #176]	; (80087f0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8008740:	fb02 f303 	mul.w	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b00      	cmp	r3, #0
 800874a:	dd49      	ble.n	80087e0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	109b      	asrs	r3, r3, #2
 8008758:	4a25      	ldr	r2, [pc, #148]	; (80087f0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 800875a:	fb02 f303 	mul.w	r3, r2, r3
 800875e:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10f      	bne.n	800878c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 800876c:	f7fc fc57 	bl	800501e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8008770:	4603      	mov	r3, r0
 8008772:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	3b04      	subs	r3, #4
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4619      	mov	r1, r3
 8008780:	460b      	mov	r3, r1
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 800878c:	f107 0210 	add.w	r2, r7, #16
 8008790:	f107 0314 	add.w	r3, r7, #20
 8008794:	4611      	mov	r1, r2
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fb04 	bl	8006da4 <_ZSt3minIiERKT_S2_S2_>
 800879c:	4603      	mov	r3, r0
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	425b      	negs	r3, r3
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	4413      	add	r3, r2
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f8d0 	bl	800895c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	425b      	negs	r3, r3
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	4413      	add	r3, r2
 80087cc:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 80087ce:	69b9      	ldr	r1, [r7, #24]
 80087d0:	6838      	ldr	r0, [r7, #0]
 80087d2:	f7ff f8d4 	bl	800797e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80087de:	e7b2      	b.n	8008746 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7fb fc76 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	cccccccd 	.word	0xcccccccd

080087f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	109b      	asrs	r3, r3, #2
 8008808:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d006      	beq.n	800881e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	461a      	mov	r2, r3
 8008816:	68f9      	ldr	r1, [r7, #12]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f014 fb01 	bl	801ce20 <memmove>
	  return __result + _Num;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4413      	add	r3, r2
	}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	109b      	asrs	r3, r3, #2
 8008842:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	425b      	negs	r3, r3
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	18d0      	adds	r0, r2, r3
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	461a      	mov	r2, r3
 800885a:	68f9      	ldr	r1, [r7, #12]
 800885c:	f014 fae0 	bl	801ce20 <memmove>
	  return __result - _Num;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	425b      	negs	r3, r3
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	4413      	add	r3, r2
	}
 800886a:	4618      	mov	r0, r3
 800886c:	3718      	adds	r7, #24
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008872:	b580      	push	{r7, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	109b      	asrs	r3, r3, #2
 8008886:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	461a      	mov	r2, r3
 8008894:	68f9      	ldr	r1, [r7, #12]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f014 fac2 	bl	801ce20 <memmove>
	  return __result + _Num;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4413      	add	r3, r2
	}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	109b      	asrs	r3, r3, #2
 80088c0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	425b      	negs	r3, r3
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	18d0      	adds	r0, r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	461a      	mov	r2, r3
 80088d8:	68f9      	ldr	r1, [r7, #12]
 80088da:	f014 faa1 	bl	801ce20 <memmove>
	  return __result - _Num;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	425b      	negs	r3, r3
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	4413      	add	r3, r2
	}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f83b 	bl	800897c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8008906:	4603      	mov	r3, r0
    }
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
    { return __miter_base(__it.base()); }
 800891a:	f107 0308 	add.w	r3, r7, #8
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f845 	bl	80089b0 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f107 0208 	add.w	r2, r7, #8
 800892c:	4611      	mov	r1, r2
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f8b7 	bl	8007aa2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f83d 	bl	80089cc <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8008952:	4603      	mov	r3, r0
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f83d 	bl	80089ec <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8008972:	4603      	mov	r3, r0
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	461a      	mov	r2, r3
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f014 fa3f 	bl	801ce20 <memmove>
	  return __result + _Num;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
	}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fb fb88 	bl	80040d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f815 	bl	8008a0c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80089e2:	4603      	mov	r3, r0
    }
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f82f 	bl	8008a60 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8008a02:	4603      	mov	r3, r0
    }
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	109b      	asrs	r3, r3, #2
 8008a20:	4a0e      	ldr	r2, [pc, #56]	; (8008a5c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
 8008a26:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	68f9      	ldr	r1, [r7, #12]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f014 f9ef 	bl	801ce20 <memmove>
	  return __result + _Num;
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4613      	mov	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4413      	add	r3, r2
	}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	cccccccd 	.word	0xcccccccd

08008a60 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	109b      	asrs	r3, r3, #2
 8008a74:	4a11      	ldr	r2, [pc, #68]	; (8008abc <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 8008a76:	fb02 f303 	mul.w	r3, r2, r3
 8008a7a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d010      	beq.n	8008aa4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	18d0      	adds	r0, r2, r3
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	f014 f9be 	bl	801ce20 <memmove>
	  return __result - _Num;
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	425b      	negs	r3, r3
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	4413      	add	r3, r2
	}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	cccccccd 	.word	0xcccccccd

08008ac0 <_Z41__static_initialization_and_destruction_0ii>:
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d107      	bne.n	8008ae0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d102      	bne.n	8008ae0 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 8008ada:	4809      	ldr	r0, [pc, #36]	; (8008b00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008adc:	f7f9 fb63 	bl	80021a6 <_ZN18MotherboardContextC1Ev>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d107      	bne.n	8008af6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d102      	bne.n	8008af6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008af0:	4803      	ldr	r0, [pc, #12]	; (8008b00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008af2:	f7f9 fb7b 	bl	80021ec <_ZN18MotherboardContextD1Ev>
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	240001d0 	.word	0x240001d0

08008b04 <_GLOBAL__sub_I_MotherboardInit>:
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	f7ff ffd7 	bl	8008ac0 <_Z41__static_initialization_and_destruction_0ii>
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <_GLOBAL__sub_D_MotherboardInit>:
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f7ff ffcf 	bl	8008ac0 <_Z41__static_initialization_and_destruction_0ii>
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	607b      	str	r3, [r7, #4]
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
 8008b32:	4613      	mov	r3, r2
 8008b34:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8008b40:	89ba      	ldrh	r2, [r7, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	7bf8      	ldrb	r0, [r7, #15]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	f001 f925 	bl	8009d96 <bhy2_hif_get_regs>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e001      	b.n	8008b56 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008b52:	23ff      	movs	r3, #255	; 0xff
 8008b54:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8008b62:	b590      	push	{r4, r7, lr}
 8008b64:	b08f      	sub	sp, #60	; 0x3c
 8008b66:	af02      	add	r7, sp, #8
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <bhy2_get_and_process_fifo+0x1c>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b82:	e11b      	b.n	8008dbc <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8008b8a:	f06f 0305 	mvn.w	r3, #5
 8008b8e:	e115      	b.n	8008dbc <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	2100      	movs	r1, #0
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f014 f95d 	bl	801ce54 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8008b9a:	f107 0314 	add.w	r3, r7, #20
 8008b9e:	2214      	movs	r2, #20
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f014 f956 	bl	801ce54 <memset>

    fifos.buffer = work_buffer;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 fa5f 	bl	800a07c <bhy2_hif_get_interrupt_status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8008bc4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8008bcc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008bd0:	e0f4      	b.n	8008dbc <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008bd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008bde:	e042      	b.n	8008c66 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008be4:	f003 0306 	and.w	r3, r3, #6
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d00e      	beq.n	8008c0a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bf0:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d008      	beq.n	8008c0a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bfc:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008c00:	2b06      	cmp	r3, #6
 8008c02:	d002      	beq.n	8008c0a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d020      	beq.n	8008c4c <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8008c14:	6a3a      	ldr	r2, [r7, #32]
 8008c16:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008c18:	1ad1      	subs	r1, r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f107 0214 	add.w	r2, r7, #20
 8008c20:	f102 0408 	add.w	r4, r2, #8
 8008c24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	f001 fad7 	bl	800a1de <bhy2_hif_get_wakeup_fifo>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8008c36:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8008c3e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c42:	e0bb      	b.n	8008dbc <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	4413      	add	r3, r2
 8008c4a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8008c4c:	f107 0314 	add.w	r3, r7, #20
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	4619      	mov	r1, r3
 8008c54:	2000      	movs	r0, #0
 8008c56:	f000 fbad 	bl	80093b4 <parse_fifo>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <bhy2_get_and_process_fifo+0x112>
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <bhy2_get_and_process_fifo+0x11a>
 8008c74:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0b1      	beq.n	8008be0 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008c80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008c84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008c88:	e042      	b.n	8008d10 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8008c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c8e:	f003 0318 	and.w	r3, r3, #24
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d00e      	beq.n	8008cb4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c9a:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8008c9e:	2b10      	cmp	r3, #16
 8008ca0:	d008      	beq.n	8008cb4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ca6:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008caa:	2b18      	cmp	r3, #24
 8008cac:	d002      	beq.n	8008cb4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d020      	beq.n	8008cf6 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008cbe:	6a3a      	ldr	r2, [r7, #32]
 8008cc0:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008cc2:	1ad1      	subs	r1, r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f107 0214 	add.w	r2, r7, #20
 8008cca:	f102 0408 	add.w	r4, r2, #8
 8008cce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	4623      	mov	r3, r4
 8008cd6:	f001 fa98 	bl	800a20a <bhy2_hif_get_nonwakeup_fifo>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008ce0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8008ce8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008cec:	e066      	b.n	8008dbc <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	4413      	add	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8008cf6:	f107 0314 	add.w	r3, r7, #20
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	2001      	movs	r0, #1
 8008d00:	f000 fb58 	bl	80093b4 <parse_fifo>
 8008d04:	4603      	mov	r3, r0
 8008d06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <bhy2_get_and_process_fifo+0x1bc>
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <bhy2_get_and_process_fifo+0x1c4>
 8008d1e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0b1      	beq.n	8008c8a <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008d2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008d32:	e036      	b.n	8008da2 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8008d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <bhy2_get_and_process_fifo+0x1e4>
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d020      	beq.n	8008d88 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008d50:	6a3a      	ldr	r2, [r7, #32]
 8008d52:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008d54:	1ad1      	subs	r1, r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f107 0214 	add.w	r2, r7, #20
 8008d5c:	f102 0408 	add.w	r4, r2, #8
 8008d60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4623      	mov	r3, r4
 8008d68:	f001 fab0 	bl	800a2cc <bhy2_hif_get_status_fifo_async>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008d72:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8008d7a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008d7e:	e01d      	b.n	8008dbc <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	4413      	add	r3, r2
 8008d86:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8008d88:	f107 0314 	add.w	r3, r7, #20
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	2002      	movs	r0, #2
 8008d92:	f000 fb0f 	bl	80093b4 <parse_fifo>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <bhy2_get_and_process_fifo+0x24e>
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <bhy2_get_and_process_fifo+0x256>
 8008db0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0bd      	beq.n	8008d34 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8008db8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3734      	adds	r7, #52	; 0x34
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd90      	pop	{r4, r7, pc}

08008dc4 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8008dd0:	6079      	str	r1, [r7, #4]
 8008dd2:	603a      	str	r2, [r7, #0]
 8008dd4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00a      	beq.n	8008df6 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	ed97 0a02 	vldr	s0, [r7, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fa84 	bl	800a2f8 <bhy2_hif_exec_sensor_conf_cmd>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75fb      	strb	r3, [r7, #23]
 8008df4:	e001      	b.n	8008dfa <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008df6:	23ff      	movs	r3, #255	; 0xff
 8008df8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 f8e8 	bl	8009ff4 <bhy2_hif_get_product_id>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]
 8008e28:	e001      	b.n	8008e2e <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008e2a:	23ff      	movs	r3, #255	; 0xff
 8008e2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 f8de 	bl	800a014 <bhy2_hif_get_kernel_version>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
 8008e5c:	e001      	b.n	8008e62 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008e5e:	23ff      	movs	r3, #255	; 0xff
 8008e60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 f8e8 	bl	800a05c <bhy2_hif_get_boot_status>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e001      	b.n	8008e96 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008e92:	23ff      	movs	r3, #255	; 0xff
 8008e94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af02      	add	r7, sp, #8
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00d      	beq.n	8008ed6 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	f107 0208 	add.w	r2, r7, #8
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	f240 101f 	movw	r0, #287	; 0x11f
 8008ecc:	f001 f80a 	bl	8009ee4 <bhy2_hif_get_parameter>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
 8008ed4:	e001      	b.n	8008eda <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008ed6:	23ff      	movs	r3, #255	; 0xff
 8008ed8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <bhy2_upload_firmware_to_ram+0x1c>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f02:	23ff      	movs	r3, #255	; 0xff
 8008f04:	75fb      	strb	r3, [r7, #23]
 8008f06:	e007      	b.n	8008f18 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f001 f90d 	bl	800a12e <bhy2_hif_upload_firmware_to_ram>
 8008f14:	4603      	mov	r3, r0
 8008f16:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f36:	23ff      	movs	r3, #255	; 0xff
 8008f38:	73fb      	strb	r3, [r7, #15]
 8008f3a:	e005      	b.n	8008f48 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 f932 	bl	800a1a8 <bhy2_hif_boot_program_ram>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d102      	bne.n	8008f70 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f6a:	23ff      	movs	r3, #255	; 0xff
 8008f6c:	73fb      	strb	r3, [r7, #15]
 8008f6e:	e007      	b.n	8008f80 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	1df9      	adds	r1, r7, #7
 8008f74:	2201      	movs	r2, #1
 8008f76:	2007      	movs	r0, #7
 8008f78:	f000 ff45 	bl	8009e06 <bhy2_hif_set_regs>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008fa0:	23ff      	movs	r3, #255	; 0xff
 8008fa2:	73fb      	strb	r3, [r7, #15]
 8008fa4:	e007      	b.n	8008fb6 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	2007      	movs	r0, #7
 8008fae:	f000 fef2 	bl	8009d96 <bhy2_hif_get_regs>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008fd6:	23ff      	movs	r3, #255	; 0xff
 8008fd8:	73fb      	strb	r3, [r7, #15]
 8008fda:	e006      	b.n	8008fea <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f84b 	bl	800a07c <bhy2_hif_get_interrupt_status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	6039      	str	r1, [r7, #0]
 8009000:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 800900c:	23ff      	movs	r3, #255	; 0xff
 800900e:	73fb      	strb	r3, [r7, #15]
 8009010:	e007      	b.n	8009022 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	1df9      	adds	r1, r7, #7
 8009016:	2201      	movs	r2, #1
 8009018:	2006      	movs	r0, #6
 800901a:	f000 fef4 	bl	8009e06 <bhy2_hif_set_regs>
 800901e:	4603      	mov	r3, r0
 8009020:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8009040:	23ff      	movs	r3, #255	; 0xff
 8009042:	73fb      	strb	r3, [r7, #15]
 8009044:	e005      	b.n	8009052 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4618      	mov	r0, r3
 800904a:	f001 f827 	bl	800a09c <bhy2_hif_reset>
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009052:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b08a      	sub	sp, #40	; 0x28
 8009062:	af04      	add	r7, sp, #16
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	4603      	mov	r3, r0
 800906c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	2b00      	cmp	r3, #0
 8009076:	d014      	beq.n	80090a2 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8009078:	f640 1238 	movw	r2, #2360	; 0x938
 800907c:	2100      	movs	r1, #0
 800907e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009080:	f013 fee8 	bl	801ce54 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	7bf8      	ldrb	r0, [r7, #15]
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	f000 fe3e 	bl	8009d18 <bhy2_hif_init>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]
 80090a0:	e001      	b.n	80090a6 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80090a2:	23ff      	movs	r3, #255	; 0xff
 80090a4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80090a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b087      	sub	sp, #28
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <bhy2_register_fifo_parse_callback+0x20>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 80090d2:	23ff      	movs	r3, #255	; 0xff
 80090d4:	75fb      	strb	r3, [r7, #23]
 80090d6:	e013      	b.n	8009100 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 80090d8:	7bfa      	ldrb	r2, [r7, #15]
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	4613      	mov	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	4413      	add	r3, r2
 80090e2:	440b      	add	r3, r1
 80090e4:	3318      	adds	r3, #24
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 80090ec:	7bfa      	ldrb	r2, [r7, #15]
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	4613      	mov	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	4413      	add	r3, r2
 80090f6:	440b      	add	r3, r1
 80090f8:	3318      	adds	r3, #24
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8009100:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009104:	4618      	mov	r0, r3
 8009106:	371c      	adds	r7, #28
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b092      	sub	sp, #72	; 0x48
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d103      	bne.n	8009126 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 800911e:	23ff      	movs	r3, #255	; 0xff
 8009120:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009124:	e079      	b.n	800921a <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff feb8 	bl	8008ea2 <bhy2_get_virt_sensor_list>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8009138:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800913c:	2b00      	cmp	r3, #0
 800913e:	d16c      	bne.n	800921a <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8009146:	2301      	movs	r3, #1
 8009148:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800914c:	e041      	b.n	80091d2 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 800914e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009152:	08db      	lsrs	r3, r3, #3
 8009154:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8009158:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	2201      	movs	r2, #1
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 800916a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800916e:	3348      	adds	r3, #72	; 0x48
 8009170:	443b      	add	r3, r7
 8009172:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8009176:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800917a:	4013      	ands	r3, r2
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d022      	beq.n	80091c8 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009188:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800918c:	4618      	mov	r0, r3
 800918e:	f001 f8e6 	bl	800a35e <bhy2_hif_get_sensor_info>
 8009192:	4603      	mov	r3, r0
 8009194:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8009198:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800919c:	2b00      	cmp	r3, #0
 800919e:	d113      	bne.n	80091c8 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 80091a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d103      	bne.n	80091b0 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 80091a8:	23f8      	movs	r3, #248	; 0xf8
 80091aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 80091ae:	e018      	b.n	80091e2 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 80091b0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80091b4:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 80091b8:	6879      	ldr	r1, [r7, #4]
 80091ba:	4613      	mov	r3, r2
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	4413      	add	r3, r2
 80091c0:	440b      	add	r3, r1
 80091c2:	331c      	adds	r3, #28
 80091c4:	4602      	mov	r2, r0
 80091c6:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 80091c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091cc:	3301      	adds	r3, #1
 80091ce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80091d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091d6:	2bf4      	cmp	r3, #244	; 0xf4
 80091d8:	d803      	bhi.n	80091e2 <bhy2_update_virtual_sensor_list+0xd2>
 80091da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0b5      	beq.n	800914e <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80091e2:	23ff      	movs	r3, #255	; 0xff
 80091e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80091e8:	e013      	b.n	8009212 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80091ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091ee:	3bf5      	subs	r3, #245	; 0xf5
 80091f0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80091f4:	490c      	ldr	r1, [pc, #48]	; (8009228 <bhy2_update_virtual_sensor_list+0x118>)
 80091f6:	5cc8      	ldrb	r0, [r1, r3]
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	4613      	mov	r3, r2
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	4413      	add	r3, r2
 8009200:	440b      	add	r3, r1
 8009202:	331c      	adds	r3, #28
 8009204:	4602      	mov	r2, r0
 8009206:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8009208:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800920c:	3b01      	subs	r3, #1
 800920e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009212:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009216:	2bf4      	cmp	r3, #244	; 0xf4
 8009218:	d8e7      	bhi.n	80091ea <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 800921a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800921e:	4618      	mov	r0, r3
 8009220:	3748      	adds	r7, #72	; 0x48
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	08038bc8 	.word	0x08038bc8

0800922c <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <bhy2_get_error_value+0x1a>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8009246:	23ff      	movs	r3, #255	; 0xff
 8009248:	73fb      	strb	r3, [r7, #15]
 800924a:	e007      	b.n	800925c <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2201      	movs	r2, #1
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	202e      	movs	r0, #46	; 0x2e
 8009254:	f7ff fc66 	bl	8008b24 <bhy2_get_regs>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800925c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d04e      	beq.n	800931e <get_callback_info+0xb6>
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d04b      	beq.n	800931e <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8009286:	7bfa      	ldrb	r2, [r7, #15]
 8009288:	68b8      	ldr	r0, [r7, #8]
 800928a:	6879      	ldr	r1, [r7, #4]
 800928c:	4613      	mov	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4413      	add	r3, r2
 8009292:	440b      	add	r3, r1
 8009294:	3318      	adds	r3, #24
 8009296:	4602      	mov	r2, r0
 8009298:	3304      	adds	r3, #4
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	6859      	ldr	r1, [r3, #4]
 800929e:	6010      	str	r0, [r2, #0]
 80092a0:	6051      	str	r1, [r2, #4]
 80092a2:	7a1b      	ldrb	r3, [r3, #8]
 80092a4:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	2bf4      	cmp	r3, #244	; 0xf4
 80092aa:	d91b      	bls.n	80092e4 <get_callback_info+0x7c>
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d117      	bne.n	80092e4 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2200      	movs	r2, #0
 80092b8:	705a      	strb	r2, [r3, #1]
 80092ba:	2200      	movs	r2, #0
 80092bc:	709a      	strb	r2, [r3, #2]
 80092be:	2200      	movs	r2, #0
 80092c0:	70da      	strb	r2, [r3, #3]
 80092c2:	2200      	movs	r2, #0
 80092c4:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2200      	movs	r2, #0
 80092ca:	715a      	strb	r2, [r3, #5]
 80092cc:	2200      	movs	r2, #0
 80092ce:	719a      	strb	r2, [r3, #6]
 80092d0:	2200      	movs	r2, #0
 80092d2:	71da      	strb	r2, [r3, #7]
 80092d4:	2200      	movs	r2, #0
 80092d6:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	3bf5      	subs	r3, #245	; 0xf5
 80092dc:	4a16      	ldr	r2, [pc, #88]	; (8009338 <get_callback_info+0xd0>)
 80092de:	5cd2      	ldrb	r2, [r2, r3]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d11c      	bne.n	8009324 <get_callback_info+0xbc>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d118      	bne.n	8009324 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2200      	movs	r2, #0
 80092f6:	705a      	strb	r2, [r3, #1]
 80092f8:	2200      	movs	r2, #0
 80092fa:	709a      	strb	r2, [r3, #2]
 80092fc:	2200      	movs	r2, #0
 80092fe:	70da      	strb	r2, [r3, #3]
 8009300:	2200      	movs	r2, #0
 8009302:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2200      	movs	r2, #0
 8009308:	715a      	strb	r2, [r3, #5]
 800930a:	2200      	movs	r2, #0
 800930c:	719a      	strb	r2, [r3, #6]
 800930e:	2200      	movs	r2, #0
 8009310:	71da      	strb	r2, [r3, #7]
 8009312:	2200      	movs	r2, #0
 8009314:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2201      	movs	r2, #1
 800931a:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 800931c:	e002      	b.n	8009324 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800931e:	23ff      	movs	r3, #255	; 0xff
 8009320:	75fb      	strb	r3, [r7, #23]
 8009322:	e000      	b.n	8009326 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8009324:	bf00      	nop
    }

    return rslt;
 8009326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800932a:	4618      	mov	r0, r3
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	08038bc8 	.word	0x08038bc8

0800933c <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	460b      	mov	r3, r1
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	7afb      	ldrb	r3, [r7, #11]
 8009350:	441a      	add	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	429a      	cmp	r2, r3
 8009358:	d803      	bhi.n	8009362 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	e002      	b.n	8009368 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8009376:	b480      	push	{r7}
 8009378:	b087      	sub	sp, #28
 800937a:	af00      	add	r7, sp, #0
 800937c:	4603      	mov	r3, r0
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
 8009382:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d808      	bhi.n	80093a0 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	441a      	add	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	e001      	b.n	80093a4 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 80093a0:	23f9      	movs	r3, #249	; 0xf9
 80093a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80093a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b099      	sub	sp, #100	; 0x64
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	4603      	mov	r3, r0
 80093be:	62b9      	str	r1, [r7, #40]	; 0x28
 80093c0:	627a      	str	r2, [r7, #36]	; 0x24
 80093c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80093de:	e16a      	b.n	80096b6 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ec:	4413      	add	r3, r2
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80093f4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80093f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff ffb9 	bl	8009376 <get_time_stamp>
 8009404:	4603      	mov	r3, r0
 8009406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 800940a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <parse_fifo+0x64>
        {
            return rslt;
 8009412:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009416:	e191      	b.n	800973c <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 8009418:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800941c:	2b00      	cmp	r3, #0
 800941e:	d025      	beq.n	800946c <parse_fifo+0xb8>
 8009420:	2b00      	cmp	r3, #0
 8009422:	f2c0 80f6 	blt.w	8009612 <parse_fifo+0x25e>
 8009426:	2bff      	cmp	r3, #255	; 0xff
 8009428:	f300 80f3 	bgt.w	8009612 <parse_fifo+0x25e>
 800942c:	2bf5      	cmp	r3, #245	; 0xf5
 800942e:	f2c0 80f0 	blt.w	8009612 <parse_fifo+0x25e>
 8009432:	3bf5      	subs	r3, #245	; 0xf5
 8009434:	2b0a      	cmp	r3, #10
 8009436:	f200 80ec 	bhi.w	8009612 <parse_fifo+0x25e>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <parse_fifo+0x8c>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009479 	.word	0x08009479
 8009444:	080094e1 	.word	0x080094e1
 8009448:	0800955f 	.word	0x0800955f
 800944c:	08009613 	.word	0x08009613
 8009450:	08009613 	.word	0x08009613
 8009454:	08009613 	.word	0x08009613
 8009458:	08009479 	.word	0x08009479
 800945c:	080094e1 	.word	0x080094e1
 8009460:	0800955f 	.word	0x0800955f
 8009464:	08009613 	.word	0x08009613
 8009468:	0800946d 	.word	0x0800946d
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	601a      	str	r2, [r3, #0]
                break;
 8009476:	e11e      	b.n	80096b6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8009478:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800947c:	461a      	mov	r2, r3
 800947e:	2102      	movs	r1, #2
 8009480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009482:	f7ff ff5b 	bl	800933c <get_buffer_status>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 800948c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <parse_fifo+0xe6>
                {
                    return rslt;
 8009494:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009498:	e150      	b.n	800973c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800949a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d000      	beq.n	80094a4 <parse_fifo+0xf0>
                {
                    break;
 80094a2:	e108      	b.n	80096b6 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 80094a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b0:	3301      	adds	r3, #1
 80094b2:	4413      	add	r3, r2
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2200      	movs	r2, #0
 80094ba:	469a      	mov	sl, r3
 80094bc:	4693      	mov	fp, r2
 80094be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c0:	eb10 020a 	adds.w	r2, r0, sl
 80094c4:	61ba      	str	r2, [r7, #24]
 80094c6:	eb41 020b 	adc.w	r2, r1, fp
 80094ca:	61fa      	str	r2, [r7, #28]
 80094cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80094d0:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	1c9a      	adds	r2, r3, #2
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	601a      	str	r2, [r3, #0]
                break;
 80094de:	e0ea      	b.n	80096b6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 80094e0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80094e4:	461a      	mov	r2, r3
 80094e6:	2103      	movs	r1, #3
 80094e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ea:	f7ff ff27 	bl	800933c <get_buffer_status>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80094f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d002      	beq.n	8009502 <parse_fifo+0x14e>
                {
                    return rslt;
 80094fc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009500:	e11c      	b.n	800973c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009506:	2b00      	cmp	r3, #0
 8009508:	d000      	beq.n	800950c <parse_fifo+0x158>
                {
                    break;
 800950a:	e0d4      	b.n	80096b6 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 800950c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800950e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	691a      	ldr	r2, [r3, #16]
 8009516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009518:	3301      	adds	r3, #1
 800951a:	4413      	add	r3, r2
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	b21c      	sxth	r4, r3
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	691a      	ldr	r2, [r3, #16]
 8009524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009526:	3302      	adds	r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	b21b      	sxth	r3, r3
 8009530:	4323      	orrs	r3, r4
 8009532:	b21b      	sxth	r3, r3
 8009534:	b29b      	uxth	r3, r3
 8009536:	b29b      	uxth	r3, r3
 8009538:	2200      	movs	r2, #0
 800953a:	461d      	mov	r5, r3
 800953c:	4616      	mov	r6, r2
 800953e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009540:	1942      	adds	r2, r0, r5
 8009542:	613a      	str	r2, [r7, #16]
 8009544:	eb41 0206 	adc.w	r2, r1, r6
 8009548:	617a      	str	r2, [r7, #20]
 800954a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800954e:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	1cda      	adds	r2, r3, #3
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	601a      	str	r2, [r3, #0]
                break;
 800955c:	e0ab      	b.n	80096b6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 800955e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009562:	461a      	mov	r2, r3
 8009564:	2106      	movs	r1, #6
 8009566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009568:	f7ff fee8 	bl	800933c <get_buffer_status>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009572:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <parse_fifo+0x1cc>
                {
                    return rslt;
 800957a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800957e:	e0dd      	b.n	800973c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009584:	2b00      	cmp	r3, #0
 8009586:	d000      	beq.n	800958a <parse_fifo+0x1d6>
                {
                    break;
 8009588:	e095      	b.n	80096b6 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009590:	3301      	adds	r3, #1
 8009592:	4413      	add	r3, r2
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	4619      	mov	r1, r3
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800959e:	3302      	adds	r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	021b      	lsls	r3, r3, #8
 80095a6:	4319      	orrs	r1, r3
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ae:	3303      	adds	r3, #3
 80095b0:	4413      	add	r3, r2
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	041b      	lsls	r3, r3, #16
 80095b6:	4319      	orrs	r1, r3
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095be:	3304      	adds	r3, #4
 80095c0:	4413      	add	r3, r2
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	061b      	lsls	r3, r3, #24
 80095c6:	430b      	orrs	r3, r1
 80095c8:	2200      	movs	r2, #0
 80095ca:	4698      	mov	r8, r3
 80095cc:	4691      	mov	r9, r2
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d4:	3305      	adds	r3, #5
 80095d6:	4413      	add	r3, r2
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2200      	movs	r2, #0
 80095de:	60bb      	str	r3, [r7, #8]
 80095e0:	60fa      	str	r2, [r7, #12]
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	000b      	movs	r3, r1
 80095ee:	2200      	movs	r2, #0
 80095f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095f2:	ea48 0002 	orr.w	r0, r8, r2
 80095f6:	6038      	str	r0, [r7, #0]
 80095f8:	ea49 0303 	orr.w	r3, r9, r3
 80095fc:	607b      	str	r3, [r7, #4]
 80095fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009602:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	1d9a      	adds	r2, r3, #6
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	601a      	str	r2, [r3, #0]
                break;
 8009610:	e051      	b.n	80096b6 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8009612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009616:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800961a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff fe23 	bl	8009268 <get_callback_info>
 8009622:	4603      	mov	r3, r0
 8009624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 8009628:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <parse_fifo+0x282>
                {
                    return rslt;
 8009630:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009634:	e082      	b.n	800973c <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 8009636:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800963a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800963e:	461a      	mov	r2, r3
 8009640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009642:	f7ff fe7b 	bl	800933c <get_buffer_status>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 800964c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <parse_fifo+0x2a6>
                {
                    return rslt;
 8009654:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009658:	e070      	b.n	800973c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800965a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800965e:	2b00      	cmp	r3, #0
 8009660:	d000      	beq.n	8009664 <parse_fifo+0x2b0>
                {
                    break;
 8009662:	e028      	b.n	80096b6 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8009664:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01c      	beq.n	80096a6 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009672:	3301      	adds	r3, #1
 8009674:	4413      	add	r3, r2
 8009676:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8009678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800967c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 8009680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009682:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8009684:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009688:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 800968c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009690:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8009694:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8009698:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 800969c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80096ae:	441a      	add	r2, r3
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	601a      	str	r2, [r3, #0]
                break;
 80096b4:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d204      	bcs.n	80096cc <parse_fifo+0x318>
 80096c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f43f ae8a 	beq.w	80093e0 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d031      	beq.n	8009738 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d202      	bcs.n	80096e6 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 80096e0:	f06f 0301 	mvn.w	r3, #1
 80096e4:	e02a      	b.n	800973c <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01d      	beq.n	8009738 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80096fc:	2300      	movs	r3, #0
 80096fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009702:	e013      	b.n	800972c <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	6819      	ldr	r1, [r3, #0]
 800970c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009710:	440b      	add	r3, r1
 8009712:	441a      	add	r2, r3
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	6919      	ldr	r1, [r3, #16]
 8009718:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800971c:	440b      	add	r3, r1
 800971e:	7812      	ldrb	r2, [r2, #0]
 8009720:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8009722:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009726:	3301      	adds	r3, #1
 8009728:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800972c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	429a      	cmp	r2, r3
 8009736:	d3e5      	bcc.n	8009704 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8009738:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800973c:	4618      	mov	r0, r3
 800973e:	3764      	adds	r7, #100	; 0x64
 8009740:	46bd      	mov	sp, r7
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	bf00      	nop

08009748 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8009748:	b590      	push	{r4, r7, lr}
 800974a:	b0cf      	sub	sp, #316	; 0x13c
 800974c:	af00      	add	r7, sp, #0
 800974e:	4604      	mov	r4, r0
 8009750:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009754:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8009758:	6001      	str	r1, [r0, #0]
 800975a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800975e:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8009762:	600a      	str	r2, [r1, #0]
 8009764:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009768:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009772:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009776:	4622      	mov	r2, r4
 8009778:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 8009780:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 81af 	beq.w	8009ae8 <bhy2_hif_exec_cmd_generic+0x3a0>
 800978a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800978e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d007      	beq.n	80097a8 <bhy2_hif_exec_cmd_generic+0x60>
 8009798:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800979c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 81a0 	beq.w	8009ae8 <bhy2_hif_exec_cmd_generic+0x3a0>
 80097a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <bhy2_hif_exec_cmd_generic+0x78>
 80097b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80097b4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 8194 	beq.w	8009ae8 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 80097c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8188 	beq.w	8009adc <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 80097cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80097d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80097d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4413      	add	r3, r2
 80097dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 80097e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d007      	beq.n	80097f8 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 80097e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80097ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097f0:	4413      	add	r3, r2
 80097f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097f6:	e003      	b.n	8009800 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8009800:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009804:	f003 0303 	and.w	r3, r3, #3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d006      	beq.n	800981a <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 800980c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009810:	089b      	lsrs	r3, r3, #2
 8009812:	3301      	adds	r3, #1
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800981a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800981e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b2da      	uxtb	r2, r3
 8009826:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800982a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800982e:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8009830:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009834:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	0a1b      	lsrs	r3, r3, #8
 800983c:	b29b      	uxth	r3, r3
 800983e:	b2da      	uxtb	r2, r3
 8009840:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009844:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009848:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 800984a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800984e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d113      	bne.n	8009880 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8009858:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800985c:	089b      	lsrs	r3, r3, #2
 800985e:	b2da      	uxtb	r2, r3
 8009860:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009864:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009868:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 800986a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800986e:	089b      	lsrs	r3, r3, #2
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	b2da      	uxtb	r2, r3
 8009874:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009878:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800987c:	70da      	strb	r2, [r3, #3]
 800987e:	e010      	b.n	80098a2 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 8009880:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009884:	b2da      	uxtb	r2, r3
 8009886:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800988a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800988e:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8009890:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009894:	0a1b      	lsrs	r3, r3, #8
 8009896:	b2da      	uxtb	r2, r3
 8009898:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800989c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80098a0:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 80098a2:	2304      	movs	r3, #4
 80098a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 80098b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80098b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80098b8:	4413      	add	r3, r2
 80098ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 80098be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 80098c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80098d0:	429a      	cmp	r2, r3
 80098d2:	f240 80f9 	bls.w	8009ac8 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 80098d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80098e0:	e0f2      	b.n	8009ac8 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 80098e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80098e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80098ea:	4413      	add	r3, r2
 80098ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d20b      	bcs.n	800990c <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80098f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80098f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80098fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009900:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800990a:	e020      	b.n	800994e <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 800990c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009910:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009914:	4413      	add	r3, r2
 8009916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800991a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800991e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8009922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d006      	beq.n	800993c <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 800992e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009932:	089b      	lsrs	r3, r3, #2
 8009934:	3301      	adds	r3, #1
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 800993c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009944:	d903      	bls.n	800994e <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8009946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800994a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 800994e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009952:	2b00      	cmp	r3, #0
 8009954:	d07e      	beq.n	8009a54 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8009956:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800995a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009964:	4413      	add	r3, r2
 8009966:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800996a:	429a      	cmp	r2, r3
 800996c:	d315      	bcc.n	800999a <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 800996e:	f107 0214 	add.w	r2, r7, #20
 8009972:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009976:	18d0      	adds	r0, r2, r3
 8009978:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800997c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009986:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	4413      	add	r3, r2
 800998e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009992:	4619      	mov	r1, r3
 8009994:	f013 fa36 	bl	801ce04 <memcpy>
 8009998:	e05c      	b.n	8009a54 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 800999a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800999e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80099a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d93b      	bls.n	8009a24 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 80099ac:	f107 0214 	add.w	r2, r7, #20
 80099b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80099b4:	18d0      	adds	r0, r2, r3
 80099b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80099ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099c4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80099c8:	6812      	ldr	r2, [r2, #0]
 80099ca:	18d1      	adds	r1, r2, r3
 80099cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80099d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	f013 fa11 	bl	801ce04 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 80099e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80099e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099ea:	441a      	add	r2, r3
 80099ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	f107 0214 	add.w	r2, r7, #20
 80099fc:	18d0      	adds	r0, r2, r3
 80099fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a0c:	1ad2      	subs	r2, r2, r3
 8009a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a12:	441a      	add	r2, r3
 8009a14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a1c:	6819      	ldr	r1, [r3, #0]
 8009a1e:	f013 f9f1 	bl	801ce04 <memcpy>
 8009a22:	e017      	b.n	8009a54 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8009a24:	f107 0214 	add.w	r2, r7, #20
 8009a28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009a2c:	18d0      	adds	r0, r2, r3
 8009a2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a42:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009a46:	6812      	ldr	r2, [r2, #0]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009a4e:	4619      	mov	r1, r3
 8009a50:	f013 f9d8 	bl	801ce04 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8009a54:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d012      	beq.n	8009a8c <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8009a66:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a6e:	4413      	add	r3, r2
 8009a70:	f107 0214 	add.w	r2, r7, #20
 8009a74:	18d0      	adds	r0, r2, r3
 8009a76:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a7e:	4413      	add	r3, r2
 8009a80:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009a84:	461a      	mov	r2, r3
 8009a86:	2100      	movs	r1, #0
 8009a88:	f013 f9e4 	bl	801ce54 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8009a8c:	f107 0114 	add.w	r1, r7, #20
 8009a90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a94:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009a98:	2000      	movs	r0, #0
 8009a9a:	f000 f9b4 	bl	8009e06 <bhy2_hif_set_regs>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8009aa4:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d11b      	bne.n	8009ae4 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 8009ab2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009ab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8009ac0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8009ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00f      	beq.n	8009af0 <bhy2_hif_exec_cmd_generic+0x3a8>
 8009ad0:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f43f af04 	beq.w	80098e2 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8009ada:	e009      	b.n	8009af0 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8009adc:	23fe      	movs	r3, #254	; 0xfe
 8009ade:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8009ae2:	e005      	b.n	8009af0 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8009ae4:	bf00      	nop
        if (hif->read_write_len != 0)
 8009ae6:	e003      	b.n	8009af0 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009ae8:	23ff      	movs	r3, #255	; 0xff
 8009aea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009aee:	e000      	b.n	8009af2 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8009af0:	bf00      	nop
    }

    return rslt;
 8009af2:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd90      	pop	{r4, r7, pc}

08009b00 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	81fb      	strh	r3, [r7, #14]
 8009b0c:	e027      	b.n	8009b5e <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8009b0e:	f107 030c 	add.w	r3, r7, #12
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fab1 	bl	800a07c <bhy2_hif_get_interrupt_status>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8009b1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d115      	bne.n	8009b52 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8009b26:	7b3b      	ldrb	r3, [r7, #12]
 8009b28:	f003 0320 	and.w	r3, r3, #32
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	737b      	strb	r3, [r7, #13]
                break;
 8009b34:	e017      	b.n	8009b66 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	f242 7010 	movw	r0, #10000	; 0x2710
 8009b3c:	f000 f99b 	bl	8009e76 <bhy2_hif_delay_us>
 8009b40:	4603      	mov	r3, r0
 8009b42:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8009b44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8009b4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b50:	e00b      	b.n	8009b6a <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8009b52:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b56:	e008      	b.n	8009b6a <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8009b58:	89fb      	ldrh	r3, [r7, #14]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	81fb      	strh	r3, [r7, #14]
 8009b5e:	89fb      	ldrh	r3, [r7, #14]
 8009b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b64:	d3d3      	bcc.n	8009b0e <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8009b66:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	81fb      	strh	r3, [r7, #14]
 8009b7e:	e02f      	b.n	8009be0 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009b86:	f000 f976 	bl	8009e76 <bhy2_hif_delay_us>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8009b8e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da02      	bge.n	8009b9c <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8009b96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b9a:	e02d      	b.n	8009bf8 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8009b9c:	f107 010c 	add.w	r1, r7, #12
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	2025      	movs	r0, #37	; 0x25
 8009ba6:	f000 f8f6 	bl	8009d96 <bhy2_hif_get_regs>
 8009baa:	4603      	mov	r3, r0
 8009bac:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8009bae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da02      	bge.n	8009bbc <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8009bb6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009bba:	e01d      	b.n	8009bf8 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8009bbc:	7b3b      	ldrb	r3, [r7, #12]
 8009bbe:	f003 0310 	and.w	r3, r3, #16
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <bhy2_hif_check_boot_status_ram+0x68>
 8009bc6:	7b3b      	ldrb	r3, [r7, #12]
 8009bc8:	f003 0320 	and.w	r3, r3, #32
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8009bd0:	7b3b      	ldrb	r3, [r7, #12]
 8009bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d006      	beq.n	8009be8 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8009bda:	89fb      	ldrh	r3, [r7, #14]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	81fb      	strh	r3, [r7, #14]
 8009be0:	89fb      	ldrh	r3, [r7, #14]
 8009be2:	2b63      	cmp	r3, #99	; 0x63
 8009be4:	d9cc      	bls.n	8009b80 <bhy2_hif_check_boot_status_ram+0xe>
 8009be6:	e000      	b.n	8009bea <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8009be8:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8009bea:	89fb      	ldrh	r3, [r7, #14]
 8009bec:	2b64      	cmp	r3, #100	; 0x64
 8009bee:	d102      	bne.n	8009bf6 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8009bf0:	f06f 0304 	mvn.w	r3, #4
 8009bf4:	e000      	b.n	8009bf8 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08a      	sub	sp, #40	; 0x28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8009c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d072      	beq.n	8009d02 <bhy2_hif_get_fifo+0x102>
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d06f      	beq.n	8009d02 <bhy2_hif_get_fifo+0x102>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d06c      	beq.n	8009d02 <bhy2_hif_get_fifo+0x102>
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d069      	beq.n	8009d02 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d114      	bne.n	8009c66 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8009c3c:	f107 0114 	add.w	r1, r7, #20
 8009c40:	7bf8      	ldrb	r0, [r7, #15]
 8009c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c44:	2202      	movs	r2, #2
 8009c46:	f000 f8a6 	bl	8009d96 <bhy2_hif_get_regs>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8009c50:	7d3b      	ldrb	r3, [r7, #20]
 8009c52:	b21a      	sxth	r2, r3
 8009c54:	7d7b      	ldrb	r3, [r7, #21]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	b21b      	sxth	r3, r3
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	461a      	mov	r2, r3
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d04d      	beq.n	8009d0a <bhy2_hif_get_fifo+0x10a>
 8009c6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d149      	bne.n	8009d0a <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d203      	bcs.n	8009c88 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e003      	b.n	8009c90 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	623b      	str	r3, [r7, #32]
            offset = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8009c9a:	e016      	b.n	8009cca <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	18d1      	adds	r1, r2, r3
 8009ca2:	7bf8      	ldrb	r0, [r7, #15]
 8009ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	f000 f875 	bl	8009d96 <bhy2_hif_get_regs>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8009cb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10c      	bne.n	8009cd4 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8009cba:	6a3a      	ldr	r2, [r7, #32]
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8009cca:	6a3a      	ldr	r2, [r7, #32]
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d8e4      	bhi.n	8009c9c <bhy2_hif_get_fifo+0x9c>
 8009cd2:	e000      	b.n	8009cd6 <bhy2_hif_get_fifo+0xd6>
                    break;
 8009cd4:	bf00      	nop
            }

            if (read_len != 0)
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00a      	beq.n	8009cf2 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	18d1      	adds	r1, r2, r3
 8009ce2:	7bf8      	ldrb	r0, [r7, #15]
 8009ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	f000 f855 	bl	8009d96 <bhy2_hif_get_regs>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	1ad2      	subs	r2, r2, r3
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009d00:	e003      	b.n	8009d0a <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d02:	23ff      	movs	r3, #255	; 0xff
 8009d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d08:	e000      	b.n	8009d0c <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009d0a:	bf00      	nop
    }

    return rslt;
 8009d0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3728      	adds	r7, #40	; 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	607a      	str	r2, [r7, #4]
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d027      	beq.n	8009d82 <bhy2_hif_init+0x6a>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d024      	beq.n	8009d82 <bhy2_hif_init+0x6a>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d021      	beq.n	8009d82 <bhy2_hif_init+0x6a>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01e      	beq.n	8009d82 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5a:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	7bfa      	ldrb	r2, [r7, #15]
 8009d60:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	f003 0303 	and.w	r3, r3, #3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d006      	beq.n	8009d7a <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	089b      	lsrs	r3, r3, #2
 8009d70:	3301      	adds	r3, #1
 8009d72:	009a      	lsls	r2, r3, #2
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009d78:	e005      	b.n	8009d86 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7c:	6a3a      	ldr	r2, [r7, #32]
 8009d7e:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009d80:	e001      	b.n	8009d86 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d82:	23ff      	movs	r3, #255	; 0xff
 8009d84:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009d96:	b590      	push	{r4, r7, lr}
 8009d98:	b087      	sub	sp, #28
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d022      	beq.n	8009df6 <bhy2_hif_get_regs+0x60>
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01e      	beq.n	8009df6 <bhy2_hif_get_regs+0x60>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d01b      	beq.n	8009df6 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	7b1b      	ldrb	r3, [r3, #12]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d103      	bne.n	8009dce <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dcc:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	681c      	ldr	r4, [r3, #0]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	7bf8      	ldrb	r0, [r7, #15]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	68b9      	ldr	r1, [r7, #8]
 8009ddc:	47a0      	blx	r4
 8009dde:	4603      	mov	r3, r0
 8009de0:	461a      	mov	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009df0:	23fd      	movs	r3, #253	; 0xfd
 8009df2:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009df4:	e001      	b.n	8009dfa <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009df6:	23ff      	movs	r3, #255	; 0xff
 8009df8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd90      	pop	{r4, r7, pc}

08009e06 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009e06:	b590      	push	{r4, r7, lr}
 8009e08:	b087      	sub	sp, #28
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d022      	beq.n	8009e66 <bhy2_hif_set_regs+0x60>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01e      	beq.n	8009e66 <bhy2_hif_set_regs+0x60>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d01b      	beq.n	8009e66 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	7b1b      	ldrb	r3, [r3, #12]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d103      	bne.n	8009e3e <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685c      	ldr	r4, [r3, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	7bf8      	ldrb	r0, [r7, #15]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	47a0      	blx	r4
 8009e4e:	4603      	mov	r3, r0
 8009e50:	461a      	mov	r2, r3
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009e60:	23fd      	movs	r3, #253	; 0xfd
 8009e62:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009e64:	e001      	b.n	8009e6a <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009e66:	23ff      	movs	r3, #255	; 0xff
 8009e68:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd90      	pop	{r4, r7, pc}

08009e76 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <bhy2_hif_delay_us+0x2c>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d007      	beq.n	8009ea2 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	6912      	ldr	r2, [r2, #16]
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
 8009ea0:	e001      	b.n	8009ea6 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009ea2:	23ff      	movs	r3, #255	; 0xff
 8009ea4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b088      	sub	sp, #32
 8009eb6:	af04      	add	r7, sp, #16
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8009ec2:	89f8      	ldrh	r0, [r7, #14]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	9302      	str	r3, [sp, #8]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	f7ff fc37 	bl	8009748 <bhy2_hif_exec_cmd_generic>
 8009eda:	4603      	mov	r3, r0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	607a      	str	r2, [r7, #4]
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d06e      	beq.n	8009fe0 <bhy2_hif_get_parameter+0xfc>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d06b      	beq.n	8009fe0 <bhy2_hif_get_parameter+0xfc>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d068      	beq.n	8009fe0 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009f14:	f107 0113 	add.w	r1, r7, #19
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	2006      	movs	r0, #6
 8009f1e:	f7ff ff3a 	bl	8009d96 <bhy2_hif_get_regs>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d15b      	bne.n	8009fe6 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8009f2e:	7cfb      	ldrb	r3, [r7, #19]
 8009f30:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8009f32:	7cfb      	ldrb	r3, [r7, #19]
 8009f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8009f3c:	7cfb      	ldrb	r3, [r7, #19]
 8009f3e:	7dba      	ldrb	r2, [r7, #22]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d008      	beq.n	8009f56 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009f44:	f107 0113 	add.w	r1, r7, #19
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	2006      	movs	r0, #6
 8009f4e:	f7ff ff5a 	bl	8009e06 <bhy2_hif_set_regs>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8009f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d143      	bne.n	8009fe6 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8009f5e:	89fb      	ldrh	r3, [r7, #14]
 8009f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f64:	b298      	uxth	r0, r3
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	f7ff ffa1 	bl	8009eb2 <bhy2_hif_exec_cmd>
 8009f70:	4603      	mov	r3, r0
 8009f72:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8009f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d134      	bne.n	8009fe6 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8009f7c:	6a38      	ldr	r0, [r7, #32]
 8009f7e:	f7ff fdbf 	bl	8009b00 <bhy2_wait_status_ready>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8009f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d12b      	bne.n	8009fe6 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8009f8e:	f107 0014 	add.w	r0, r7, #20
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	f000 f94b 	bl	800a236 <bhy2_hif_get_status_fifo>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8009fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d11c      	bne.n	8009fe6 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8009fac:	7cfb      	ldrb	r3, [r7, #19]
 8009fae:	7dba      	ldrb	r2, [r7, #22]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d00a      	beq.n	8009fca <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8009fb4:	7dbb      	ldrb	r3, [r7, #22]
 8009fb6:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009fb8:	f107 0113 	add.w	r1, r7, #19
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	2006      	movs	r0, #6
 8009fc2:	f7ff ff20 	bl	8009e06 <bhy2_hif_set_regs>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8009fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8009fd2:	8abb      	ldrh	r3, [r7, #20]
 8009fd4:	89fa      	ldrh	r2, [r7, #14]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d005      	beq.n	8009fe6 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8009fda:	23fb      	movs	r3, #251	; 0xfb
 8009fdc:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009fde:	e002      	b.n	8009fe6 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009fe0:	23ff      	movs	r3, #255	; 0xff
 8009fe2:	75fb      	strb	r3, [r7, #23]
 8009fe4:	e000      	b.n	8009fe8 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8009fe6:	bf00      	nop
    }

    return rslt;
 8009fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2201      	movs	r2, #1
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	201c      	movs	r0, #28
 800a006:	f7ff fec6 	bl	8009d96 <bhy2_hif_get_regs>
 800a00a:	4603      	mov	r3, r0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d013      	beq.n	800a04c <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 800a024:	f107 010c 	add.w	r1, r7, #12
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2202      	movs	r2, #2
 800a02c:	2020      	movs	r0, #32
 800a02e:	f7ff feb2 	bl	8009d96 <bhy2_hif_get_regs>
 800a032:	4603      	mov	r3, r0
 800a034:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 800a036:	7b3b      	ldrb	r3, [r7, #12]
 800a038:	b21a      	sxth	r2, r3
 800a03a:	7b7b      	ldrb	r3, [r7, #13]
 800a03c:	021b      	lsls	r3, r3, #8
 800a03e:	b21b      	sxth	r3, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	b21b      	sxth	r3, r3
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	801a      	strh	r2, [r3, #0]
 800a04a:	e001      	b.n	800a050 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a04c:	23ff      	movs	r3, #255	; 0xff
 800a04e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a050:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2201      	movs	r2, #1
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	2025      	movs	r0, #37	; 0x25
 800a06e:	f7ff fe92 	bl	8009d96 <bhy2_hif_get_regs>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2201      	movs	r2, #1
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	202d      	movs	r0, #45	; 0x2d
 800a08e:	f7ff fe82 	bl	8009d96 <bhy2_hif_get_regs>
 800a092:	4603      	mov	r3, r0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 800a0ac:	230f      	movs	r3, #15
 800a0ae:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 800a0b0:	f107 010b 	add.w	r1, r7, #11
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	2014      	movs	r0, #20
 800a0ba:	f7ff fea4 	bl	8009e06 <bhy2_hif_set_regs>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 800a0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d12b      	bne.n	800a122 <bhy2_hif_reset+0x86>
    {
        while (count--)
 800a0ca:	e01c      	b.n	800a106 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	f242 7010 	movw	r0, #10000	; 0x2710
 800a0d2:	f7ff fed0 	bl	8009e76 <bhy2_hif_delay_us>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 800a0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d111      	bne.n	800a106 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 800a0e2:	f107 010a 	add.w	r1, r7, #10
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	2025      	movs	r0, #37	; 0x25
 800a0ec:	f7ff fe53 	bl	8009d96 <bhy2_hif_get_regs>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 800a0f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 800a0fc:	7abb      	ldrb	r3, [r7, #10]
 800a0fe:	f003 0310 	and.w	r3, r3, #16
 800a102:	2b00      	cmp	r3, #0
 800a104:	d105      	bne.n	800a112 <bhy2_hif_reset+0x76>
        while (count--)
 800a106:	89bb      	ldrh	r3, [r7, #12]
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	81ba      	strh	r2, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1dd      	bne.n	800a0cc <bhy2_hif_reset+0x30>
 800a110:	e000      	b.n	800a114 <bhy2_hif_reset+0x78>
                    {
                        break;
 800a112:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 800a114:	7abb      	ldrb	r3, [r7, #10]
 800a116:	f003 0310 	and.w	r3, r3, #16
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 800a11e:	23fb      	movs	r3, #251	; 0xfb
 800a120:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800a122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d027      	beq.n	800a194 <bhy2_hif_upload_firmware_to_ram+0x66>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d024      	beq.n	800a194 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b21a      	sxth	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3301      	adds	r3, #1
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	b21b      	sxth	r3, r3
 800a15a:	4313      	orrs	r3, r2
 800a15c:	b21b      	sxth	r3, r3
 800a15e:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 800a160:	8abb      	ldrh	r3, [r7, #20]
 800a162:	f246 622b 	movw	r2, #26155	; 0x662b
 800a166:	4293      	cmp	r3, r2
 800a168:	d002      	beq.n	800a170 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 800a16a:	23fc      	movs	r3, #252	; 0xfc
 800a16c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 800a16e:	e014      	b.n	800a19a <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	68f9      	ldr	r1, [r7, #12]
 800a176:	2002      	movs	r0, #2
 800a178:	f7ff fe9b 	bl	8009eb2 <bhy2_hif_exec_cmd>
 800a17c:	4603      	mov	r3, r0
 800a17e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 800a180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d108      	bne.n	800a19a <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7ff fcf2 	bl	8009b72 <bhy2_hif_check_boot_status_ram>
 800a18e:	4603      	mov	r3, r0
 800a190:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 800a192:	e002      	b.n	800a19a <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a194:	23ff      	movs	r3, #255	; 0xff
 800a196:	75fb      	strb	r3, [r7, #23]
 800a198:	e000      	b.n	800a19c <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 800a19a:	bf00      	nop
    }

    return rslt;
 800a19c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	2003      	movs	r0, #3
 800a1b8:	f7ff fe7b 	bl	8009eb2 <bhy2_hif_exec_cmd>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 800a1c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d104      	bne.n	800a1d2 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fcd2 	bl	8009b72 <bhy2_hif_check_boot_status_ram>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b086      	sub	sp, #24
 800a1e2:	af02      	add	r7, sp, #8
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	68f9      	ldr	r1, [r7, #12]
 800a1fa:	2001      	movs	r0, #1
 800a1fc:	f7ff fd00 	bl	8009c00 <bhy2_hif_get_fifo>
 800a200:	4603      	mov	r3, r0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af02      	add	r7, sp, #8
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	2002      	movs	r0, #2
 800a228:	f7ff fcea 	bl	8009c00 <bhy2_hif_get_fifo>
 800a22c:	4603      	mov	r3, r0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 800a244:	f107 0110 	add.w	r1, r7, #16
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	2204      	movs	r2, #4
 800a24c:	2003      	movs	r0, #3
 800a24e:	f7ff fda2 	bl	8009d96 <bhy2_hif_get_regs>
 800a252:	4603      	mov	r3, r0
 800a254:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 800a256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d130      	bne.n	800a2c0 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 800a25e:	7c3b      	ldrb	r3, [r7, #16]
 800a260:	b21a      	sxth	r2, r3
 800a262:	f107 0310 	add.w	r3, r7, #16
 800a266:	3301      	adds	r3, #1
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	4313      	orrs	r3, r2
 800a270:	b21b      	sxth	r3, r3
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 800a278:	7cbb      	ldrb	r3, [r7, #18]
 800a27a:	b21a      	sxth	r2, r3
 800a27c:	f107 0310 	add.w	r3, r7, #16
 800a280:	3302      	adds	r3, #2
 800a282:	3301      	adds	r3, #1
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	b21b      	sxth	r3, r3
 800a28a:	4313      	orrs	r3, r2
 800a28c:	b21b      	sxth	r3, r3
 800a28e:	b29b      	uxth	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d010      	beq.n	800a2c0 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d202      	bcs.n	800a2ae <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 800a2a8:	23fa      	movs	r3, #250	; 0xfa
 800a2aa:	75fb      	strb	r3, [r7, #23]
 800a2ac:	e008      	b.n	800a2c0 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	2003      	movs	r0, #3
 800a2b8:	f7ff fd6d 	bl	8009d96 <bhy2_hif_get_regs>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800a2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	2003      	movs	r0, #3
 800a2ea:	f7ff fc89 	bl	8009c00 <bhy2_hif_get_fifo>
 800a2ee:	4603      	mov	r3, r0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	ed87 0a02 	vstr	s0, [r7, #8]
 800a304:	6079      	str	r1, [r7, #4]
 800a306:	603a      	str	r2, [r7, #0]
 800a308:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	0c1b      	lsrs	r3, r3, #16
 800a324:	b2db      	uxtb	r3, r3
 800a326:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	0e1b      	lsrs	r3, r3, #24
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	0a1b      	lsrs	r3, r3, #8
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	b2db      	uxtb	r3, r3
 800a344:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800a346:	f107 0118 	add.w	r1, r7, #24
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2208      	movs	r2, #8
 800a34e:	200d      	movs	r0, #13
 800a350:	f7ff fdaf 	bl	8009eb2 <bhy2_hif_exec_cmd>
 800a354:	4603      	mov	r3, r0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3720      	adds	r7, #32
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b090      	sub	sp, #64	; 0x40
 800a362:	af02      	add	r7, sp, #8
 800a364:	4603      	mov	r3, r0
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	607a      	str	r2, [r7, #4]
 800a36a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 80da 	beq.w	800a528 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	2bf5      	cmp	r3, #245	; 0xf5
 800a378:	d903      	bls.n	800a382 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 800a37a:	23fe      	movs	r3, #254	; 0xfe
 800a37c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a380:	e0d5      	b.n	800a52e <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a38a:	b298      	uxth	r0, r3
 800a38c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a390:	f107 0114 	add.w	r1, r7, #20
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	4613      	mov	r3, r2
 800a39a:	221c      	movs	r2, #28
 800a39c:	f7ff fda2 	bl	8009ee4 <bhy2_hif_get_parameter>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 800a3a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f040 80bf 	bne.w	800a52e <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	2b1c      	cmp	r3, #28
 800a3b4:	d003      	beq.n	800a3be <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 800a3b6:	23fe      	movs	r3, #254	; 0xfe
 800a3b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a3bc:	e0b7      	b.n	800a52e <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 800a3be:	7d3a      	ldrb	r2, [r7, #20]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 800a3c4:	7d7a      	ldrb	r2, [r7, #21]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 800a3ca:	7dba      	ldrb	r2, [r7, #22]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 800a3d0:	7dfa      	ldrb	r2, [r7, #23]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800a3d6:	7e3a      	ldrb	r2, [r7, #24]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 800a3dc:	7e7a      	ldrb	r2, [r7, #25]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 800a3e2:	7eba      	ldrb	r2, [r7, #26]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800a3e8:	7efa      	ldrb	r2, [r7, #27]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 800a3ee:	7f3a      	ldrb	r2, [r7, #28]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 800a3f4:	7f7a      	ldrb	r2, [r7, #29]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800a3fa:	7fba      	ldrb	r2, [r7, #30]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 800a400:	7ffa      	ldrb	r2, [r7, #31]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800a406:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 800a40e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800a416:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 800a41e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800a426:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 800a42e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800a436:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 800a43e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800a446:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 800a44e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 800a456:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 800a45e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 800a466:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	791b      	ldrb	r3, [r3, #4]
 800a472:	b21a      	sxth	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	795b      	ldrb	r3, [r3, #5]
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	b21b      	sxth	r3, r3
 800a47c:	4313      	orrs	r3, r2
 800a47e:	b21b      	sxth	r3, r3
 800a480:	b29a      	uxth	r2, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	799b      	ldrb	r3, [r3, #6]
 800a48a:	b21a      	sxth	r2, r3
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	79db      	ldrb	r3, [r3, #7]
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	b21b      	sxth	r3, r3
 800a494:	4313      	orrs	r3, r2
 800a496:	b21b      	sxth	r3, r3
 800a498:	b29a      	uxth	r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	7a1b      	ldrb	r3, [r3, #8]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	7a5b      	ldrb	r3, [r3, #9]
 800a4a8:	021b      	lsls	r3, r3, #8
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	7a9b      	ldrb	r3, [r3, #10]
 800a4b0:	041b      	lsls	r3, r3, #16
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	7adb      	ldrb	r3, [r3, #11]
 800a4b8:	061b      	lsls	r3, r3, #24
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	7b1b      	ldrb	r3, [r3, #12]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	7b5b      	ldrb	r3, [r3, #13]
 800a4ca:	021b      	lsls	r3, r3, #8
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	7b9b      	ldrb	r3, [r3, #14]
 800a4d2:	041b      	lsls	r3, r3, #16
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	7bdb      	ldrb	r3, [r3, #15]
 800a4da:	061b      	lsls	r3, r3, #24
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	7c1b      	ldrb	r3, [r3, #16]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	7c5b      	ldrb	r3, [r3, #17]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	7c9b      	ldrb	r3, [r3, #18]
 800a4f4:	041b      	lsls	r3, r3, #16
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	7cdb      	ldrb	r3, [r3, #19]
 800a4fc:	061b      	lsls	r3, r3, #24
 800a4fe:	431a      	orrs	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	7e1b      	ldrb	r3, [r3, #24]
 800a508:	461a      	mov	r2, r3
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	7e5b      	ldrb	r3, [r3, #25]
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	431a      	orrs	r2, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	7e9b      	ldrb	r3, [r3, #26]
 800a516:	041b      	lsls	r3, r3, #16
 800a518:	431a      	orrs	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	7edb      	ldrb	r3, [r3, #27]
 800a51e:	061b      	lsls	r3, r3, #24
 800a520:	431a      	orrs	r2, r3
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	619a      	str	r2, [r3, #24]
 800a526:	e002      	b.n	800a52e <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a528:	23ff      	movs	r3, #255	; 0xff
 800a52a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800a52e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a532:	4618      	mov	r0, r3
 800a534:	3738      	adds	r7, #56	; 0x38
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	b21a      	sxth	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3301      	adds	r3, #1
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	b21b      	sxth	r3, r3
 800a554:	4313      	orrs	r3, r2
 800a556:	b21a      	sxth	r2, r3
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3302      	adds	r3, #2
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b21a      	sxth	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3303      	adds	r3, #3
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	b21b      	sxth	r3, r3
 800a56e:	4313      	orrs	r3, r2
 800a570:	b21a      	sxth	r2, r3
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3304      	adds	r3, #4
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	b21a      	sxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3305      	adds	r3, #5
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	021b      	lsls	r3, r3, #8
 800a586:	b21b      	sxth	r3, r3
 800a588:	4313      	orrs	r3, r2
 800a58a:	b21a      	sxth	r2, r3
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3306      	adds	r3, #6
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	b21a      	sxth	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3307      	adds	r3, #7
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	021b      	lsls	r3, r3, #8
 800a5a0:	b21b      	sxth	r3, r3
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	b21a      	sxth	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	b21a      	sxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3309      	adds	r3, #9
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	021b      	lsls	r3, r3, #8
 800a5ba:	b21b      	sxth	r3, r3
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	b21b      	sxth	r3, r3
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	811a      	strh	r2, [r3, #8]
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800a5d8:	4b12      	ldr	r3, [pc, #72]	; (800a624 <MX_COMP2_Init+0x50>)
 800a5da:	4a13      	ldr	r2, [pc, #76]	; (800a628 <MX_COMP2_Init+0x54>)
 800a5dc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800a5de:	4b11      	ldr	r3, [pc, #68]	; (800a624 <MX_COMP2_Init+0x50>)
 800a5e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a5e4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	; (800a624 <MX_COMP2_Init+0x50>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a5ec:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <MX_COMP2_Init+0x50>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800a5f2:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <MX_COMP2_Init+0x50>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <MX_COMP2_Init+0x50>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800a5fe:	4b09      	ldr	r3, [pc, #36]	; (800a624 <MX_COMP2_Init+0x50>)
 800a600:	2200      	movs	r2, #0
 800a602:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800a604:	4b07      	ldr	r3, [pc, #28]	; (800a624 <MX_COMP2_Init+0x50>)
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800a60a:	4b06      	ldr	r3, [pc, #24]	; (800a624 <MX_COMP2_Init+0x50>)
 800a60c:	2211      	movs	r2, #17
 800a60e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800a610:	4804      	ldr	r0, [pc, #16]	; (800a624 <MX_COMP2_Init+0x50>)
 800a612:	f001 fd03 	bl	800c01c <HAL_COMP_Init>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 800a61c:	f000 fc0c 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}
 800a624:	24001498 	.word	0x24001498
 800a628:	58003810 	.word	0x58003810

0800a62c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08a      	sub	sp, #40	; 0x28
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a634:	f107 0314 	add.w	r3, r7, #20
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	605a      	str	r2, [r3, #4]
 800a63e:	609a      	str	r2, [r3, #8]
 800a640:	60da      	str	r2, [r3, #12]
 800a642:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a1c      	ldr	r2, [pc, #112]	; (800a6bc <HAL_COMP_MspInit+0x90>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d132      	bne.n	800a6b4 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800a64e:	4b1c      	ldr	r3, [pc, #112]	; (800a6c0 <HAL_COMP_MspInit+0x94>)
 800a650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a654:	4a1a      	ldr	r2, [pc, #104]	; (800a6c0 <HAL_COMP_MspInit+0x94>)
 800a656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a65a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a65e:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <HAL_COMP_MspInit+0x94>)
 800a660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a66c:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <HAL_COMP_MspInit+0x94>)
 800a66e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a672:	4a13      	ldr	r2, [pc, #76]	; (800a6c0 <HAL_COMP_MspInit+0x94>)
 800a674:	f043 0310 	orr.w	r3, r3, #16
 800a678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <HAL_COMP_MspInit+0x94>)
 800a67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a682:	f003 0310 	and.w	r3, r3, #16
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a68a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a68e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a690:	2303      	movs	r3, #3
 800a692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a698:	f107 0314 	add.w	r3, r7, #20
 800a69c:	4619      	mov	r1, r3
 800a69e:	4809      	ldr	r0, [pc, #36]	; (800a6c4 <HAL_COMP_MspInit+0x98>)
 800a6a0:	f004 ffd2 	bl	800f648 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	2089      	movs	r0, #137	; 0x89
 800a6aa:	f001 ff7a 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800a6ae:	2089      	movs	r0, #137	; 0x89
 800a6b0:	f001 ff91 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 800a6b4:	bf00      	nop
 800a6b6:	3728      	adds	r7, #40	; 0x28
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	58003810 	.word	0x58003810
 800a6c0:	58024400 	.word	0x58024400
 800a6c4:	58021000 	.word	0x58021000

0800a6c8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08a      	sub	sp, #40	; 0x28
 800a6cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a6ce:	1d3b      	adds	r3, r7, #4
 800a6d0:	2224      	movs	r2, #36	; 0x24
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f012 fbbd 	bl	801ce54 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <MX_DAC1_Init+0x5c>)
 800a6dc:	4a12      	ldr	r2, [pc, #72]	; (800a728 <MX_DAC1_Init+0x60>)
 800a6de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a6e0:	4810      	ldr	r0, [pc, #64]	; (800a724 <MX_DAC1_Init+0x5c>)
 800a6e2:	f001 ff92 	bl	800c60a <HAL_DAC_Init>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a6ec:	f000 fba4 	bl	800ae38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a700:	2300      	movs	r3, #0
 800a702:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a704:	1d3b      	adds	r3, r7, #4
 800a706:	2200      	movs	r2, #0
 800a708:	4619      	mov	r1, r3
 800a70a:	4806      	ldr	r0, [pc, #24]	; (800a724 <MX_DAC1_Init+0x5c>)
 800a70c:	f002 f816 	bl	800c73c <HAL_DAC_ConfigChannel>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800a716:	f000 fb8f 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a71a:	bf00      	nop
 800a71c:	3728      	adds	r7, #40	; 0x28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	240014c4 	.word	0x240014c4
 800a728:	40007400 	.word	0x40007400

0800a72c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a0b      	ldr	r2, [pc, #44]	; (800a768 <HAL_DAC_MspInit+0x3c>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d10e      	bne.n	800a75c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a73e:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <HAL_DAC_MspInit+0x40>)
 800a740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a744:	4a09      	ldr	r2, [pc, #36]	; (800a76c <HAL_DAC_MspInit+0x40>)
 800a746:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a74a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a74e:	4b07      	ldr	r3, [pc, #28]	; (800a76c <HAL_DAC_MspInit+0x40>)
 800a750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800a75c:	bf00      	nop
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	40007400 	.word	0x40007400
 800a76c:	58024400 	.word	0x58024400

0800a770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a776:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <MX_DMA_Init+0x6c>)
 800a778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a77c:	4a17      	ldr	r2, [pc, #92]	; (800a7dc <MX_DMA_Init+0x6c>)
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a786:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <MX_DMA_Init+0x6c>)
 800a788:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	607b      	str	r3, [r7, #4]
 800a792:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a794:	2200      	movs	r2, #0
 800a796:	2100      	movs	r1, #0
 800a798:	200b      	movs	r0, #11
 800a79a:	f001 ff02 	bl	800c5a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a79e:	200b      	movs	r0, #11
 800a7a0:	f001 ff19 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	200c      	movs	r0, #12
 800a7aa:	f001 fefa 	bl	800c5a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a7ae:	200c      	movs	r0, #12
 800a7b0:	f001 ff11 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	200f      	movs	r0, #15
 800a7ba:	f001 fef2 	bl	800c5a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a7be:	200f      	movs	r0, #15
 800a7c0:	f001 ff09 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	2010      	movs	r0, #16
 800a7ca:	f001 feea 	bl	800c5a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a7ce:	2010      	movs	r0, #16
 800a7d0:	f001 ff01 	bl	800c5d6 <HAL_NVIC_EnableIRQ>

}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	58024400 	.word	0x58024400

0800a7e0 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08a      	sub	sp, #40	; 0x28
 800a7e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e6:	f107 0314 	add.w	r3, r7, #20
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	605a      	str	r2, [r3, #4]
 800a7f0:	609a      	str	r2, [r3, #8]
 800a7f2:	60da      	str	r2, [r3, #12]
 800a7f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7f6:	4b3b      	ldr	r3, [pc, #236]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a7f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7fc:	4a39      	ldr	r2, [pc, #228]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a7fe:	f043 0304 	orr.w	r3, r3, #4
 800a802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a806:	4b37      	ldr	r3, [pc, #220]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	613b      	str	r3, [r7, #16]
 800a812:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a814:	4b33      	ldr	r3, [pc, #204]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a81a:	4a32      	ldr	r2, [pc, #200]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a81c:	f043 0301 	orr.w	r3, r3, #1
 800a820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a824:	4b2f      	ldr	r3, [pc, #188]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a832:	4b2c      	ldr	r3, [pc, #176]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a838:	4a2a      	ldr	r2, [pc, #168]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a83a:	f043 0310 	orr.w	r3, r3, #16
 800a83e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a842:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a848:	f003 0310 	and.w	r3, r3, #16
 800a84c:	60bb      	str	r3, [r7, #8]
 800a84e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a850:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a856:	4a23      	ldr	r2, [pc, #140]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a858:	f043 0302 	orr.w	r3, r3, #2
 800a85c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a860:	4b20      	ldr	r3, [pc, #128]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	607b      	str	r3, [r7, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a86e:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a874:	4a1b      	ldr	r2, [pc, #108]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a876:	f043 0308 	orr.w	r3, r3, #8
 800a87a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a87e:	4b19      	ldr	r3, [pc, #100]	; (800a8e4 <MX_GPIO_Init+0x104>)
 800a880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a884:	f003 0308 	and.w	r3, r3, #8
 800a888:	603b      	str	r3, [r7, #0]
 800a88a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 800a88c:	2200      	movs	r2, #0
 800a88e:	2101      	movs	r1, #1
 800a890:	4815      	ldr	r0, [pc, #84]	; (800a8e8 <MX_GPIO_Init+0x108>)
 800a892:	f005 f889 	bl	800f9a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800a896:	2200      	movs	r2, #0
 800a898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a89c:	4813      	ldr	r0, [pc, #76]	; (800a8ec <MX_GPIO_Init+0x10c>)
 800a89e:	f005 f883 	bl	800f9a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 800a8b2:	f107 0314 	add.w	r3, r7, #20
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	480b      	ldr	r0, [pc, #44]	; (800a8e8 <MX_GPIO_Init+0x108>)
 800a8ba:	f004 fec5 	bl	800f648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800a8be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800a8d0:	f107 0314 	add.w	r3, r7, #20
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4805      	ldr	r0, [pc, #20]	; (800a8ec <MX_GPIO_Init+0x10c>)
 800a8d8:	f004 feb6 	bl	800f648 <HAL_GPIO_Init>

}
 800a8dc:	bf00      	nop
 800a8de:	3728      	adds	r7, #40	; 0x28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	58024400 	.word	0x58024400
 800a8e8:	58020800 	.word	0x58020800
 800a8ec:	58021000 	.word	0x58021000

0800a8f0 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a8f4:	4b1b      	ldr	r3, [pc, #108]	; (800a964 <MX_I2C2_Init+0x74>)
 800a8f6:	4a1c      	ldr	r2, [pc, #112]	; (800a968 <MX_I2C2_Init+0x78>)
 800a8f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800a8fa:	4b1a      	ldr	r3, [pc, #104]	; (800a964 <MX_I2C2_Init+0x74>)
 800a8fc:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <MX_I2C2_Init+0x7c>)
 800a8fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a900:	4b18      	ldr	r3, [pc, #96]	; (800a964 <MX_I2C2_Init+0x74>)
 800a902:	2200      	movs	r2, #0
 800a904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a906:	4b17      	ldr	r3, [pc, #92]	; (800a964 <MX_I2C2_Init+0x74>)
 800a908:	2201      	movs	r2, #1
 800a90a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a90c:	4b15      	ldr	r3, [pc, #84]	; (800a964 <MX_I2C2_Init+0x74>)
 800a90e:	2200      	movs	r2, #0
 800a910:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a912:	4b14      	ldr	r3, [pc, #80]	; (800a964 <MX_I2C2_Init+0x74>)
 800a914:	2200      	movs	r2, #0
 800a916:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a918:	4b12      	ldr	r3, [pc, #72]	; (800a964 <MX_I2C2_Init+0x74>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <MX_I2C2_Init+0x74>)
 800a920:	2200      	movs	r2, #0
 800a922:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a924:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <MX_I2C2_Init+0x74>)
 800a926:	2200      	movs	r2, #0
 800a928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a92a:	480e      	ldr	r0, [pc, #56]	; (800a964 <MX_I2C2_Init+0x74>)
 800a92c:	f005 f856 	bl	800f9dc <HAL_I2C_Init>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a936:	f000 fa7f 	bl	800ae38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a93a:	2100      	movs	r1, #0
 800a93c:	4809      	ldr	r0, [pc, #36]	; (800a964 <MX_I2C2_Init+0x74>)
 800a93e:	f005 ff62 	bl	8010806 <HAL_I2CEx_ConfigAnalogFilter>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a948:	f000 fa76 	bl	800ae38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a94c:	2100      	movs	r1, #0
 800a94e:	4805      	ldr	r0, [pc, #20]	; (800a964 <MX_I2C2_Init+0x74>)
 800a950:	f005 ffa4 	bl	801089c <HAL_I2CEx_ConfigDigitalFilter>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a95a:	f000 fa6d 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a95e:	bf00      	nop
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	240014d8 	.word	0x240014d8
 800a968:	40005800 	.word	0x40005800
 800a96c:	00b03fdb 	.word	0x00b03fdb

0800a970 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b0b8      	sub	sp, #224	; 0xe0
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a978:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	60da      	str	r2, [r3, #12]
 800a986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a988:	f107 0310 	add.w	r3, r7, #16
 800a98c:	22bc      	movs	r2, #188	; 0xbc
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f012 fa5f 	bl	801ce54 <memset>
  if(i2cHandle->Instance==I2C2)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a5a      	ldr	r2, [pc, #360]	; (800ab04 <HAL_I2C_MspInit+0x194>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	f040 80ad 	bne.w	800aafc <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a9a2:	2308      	movs	r3, #8
 800a9a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a9ac:	f107 0310 	add.w	r3, r7, #16
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f008 fa99 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800a9bc:	f000 fa3c 	bl	800ae38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9c0:	4b51      	ldr	r3, [pc, #324]	; (800ab08 <HAL_I2C_MspInit+0x198>)
 800a9c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9c6:	4a50      	ldr	r2, [pc, #320]	; (800ab08 <HAL_I2C_MspInit+0x198>)
 800a9c8:	f043 0302 	orr.w	r3, r3, #2
 800a9cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9d0:	4b4d      	ldr	r3, [pc, #308]	; (800ab08 <HAL_I2C_MspInit+0x198>)
 800a9d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9d6:	f003 0302 	and.w	r3, r3, #2
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a9de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a9e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a9e6:	2312      	movs	r3, #18
 800a9e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aa02:	4619      	mov	r1, r3
 800aa04:	4841      	ldr	r0, [pc, #260]	; (800ab0c <HAL_I2C_MspInit+0x19c>)
 800aa06:	f004 fe1f 	bl	800f648 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800aa0a:	4b3f      	ldr	r3, [pc, #252]	; (800ab08 <HAL_I2C_MspInit+0x198>)
 800aa0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa10:	4a3d      	ldr	r2, [pc, #244]	; (800ab08 <HAL_I2C_MspInit+0x198>)
 800aa12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aa1a:	4b3b      	ldr	r3, [pc, #236]	; (800ab08 <HAL_I2C_MspInit+0x198>)
 800aa1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa24:	60bb      	str	r3, [r7, #8]
 800aa26:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 800aa28:	4b39      	ldr	r3, [pc, #228]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa2a:	4a3a      	ldr	r2, [pc, #232]	; (800ab14 <HAL_I2C_MspInit+0x1a4>)
 800aa2c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800aa2e:	4b38      	ldr	r3, [pc, #224]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa30:	2223      	movs	r2, #35	; 0x23
 800aa32:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa34:	4b36      	ldr	r3, [pc, #216]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa3a:	4b35      	ldr	r3, [pc, #212]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aa40:	4b33      	ldr	r3, [pc, #204]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa46:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa48:	4b31      	ldr	r3, [pc, #196]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa4e:	4b30      	ldr	r3, [pc, #192]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800aa54:	4b2e      	ldr	r3, [pc, #184]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aa5a:	4b2d      	ldr	r3, [pc, #180]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa60:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800aa66:	482a      	ldr	r0, [pc, #168]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa68:	f001 ff98 	bl	800c99c <HAL_DMA_Init>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 800aa72:	f000 f9e1 	bl	800ae38 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a25      	ldr	r2, [pc, #148]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa7a:	63da      	str	r2, [r3, #60]	; 0x3c
 800aa7c:	4a24      	ldr	r2, [pc, #144]	; (800ab10 <HAL_I2C_MspInit+0x1a0>)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800aa82:	4b25      	ldr	r3, [pc, #148]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aa84:	4a25      	ldr	r2, [pc, #148]	; (800ab1c <HAL_I2C_MspInit+0x1ac>)
 800aa86:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800aa88:	4b23      	ldr	r3, [pc, #140]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aa8a:	2224      	movs	r2, #36	; 0x24
 800aa8c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aa8e:	4b22      	ldr	r3, [pc, #136]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aa90:	2240      	movs	r2, #64	; 0x40
 800aa92:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa94:	4b20      	ldr	r3, [pc, #128]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aa9a:	4b1f      	ldr	r3, [pc, #124]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aa9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aaa0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aaa2:	4b1d      	ldr	r3, [pc, #116]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aaa8:	4b1b      	ldr	r3, [pc, #108]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800aaae:	4b1a      	ldr	r3, [pc, #104]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aab4:	4b18      	ldr	r3, [pc, #96]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aaba:	4b17      	ldr	r3, [pc, #92]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800aac0:	4815      	ldr	r0, [pc, #84]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aac2:	f001 ff6b 	bl	800c99c <HAL_DMA_Init>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 800aacc:	f000 f9b4 	bl	800ae38 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a11      	ldr	r2, [pc, #68]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aad4:	639a      	str	r2, [r3, #56]	; 0x38
 800aad6:	4a10      	ldr	r2, [pc, #64]	; (800ab18 <HAL_I2C_MspInit+0x1a8>)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800aadc:	2200      	movs	r2, #0
 800aade:	2100      	movs	r1, #0
 800aae0:	2021      	movs	r0, #33	; 0x21
 800aae2:	f001 fd5e 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800aae6:	2021      	movs	r0, #33	; 0x21
 800aae8:	f001 fd75 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800aaec:	2200      	movs	r2, #0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	2022      	movs	r0, #34	; 0x22
 800aaf2:	f001 fd56 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800aaf6:	2022      	movs	r0, #34	; 0x22
 800aaf8:	f001 fd6d 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800aafc:	bf00      	nop
 800aafe:	37e0      	adds	r7, #224	; 0xe0
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	40005800 	.word	0x40005800
 800ab08:	58024400 	.word	0x58024400
 800ab0c:	58020400 	.word	0x58020400
 800ab10:	24001524 	.word	0x24001524
 800ab14:	40020010 	.word	0x40020010
 800ab18:	2400159c 	.word	0x2400159c
 800ab1c:	40020028 	.word	0x40020028

0800ab20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ab26:	f001 f9b7 	bl	800be98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ab2a:	f000 f865 	bl	800abf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ab2e:	f7ff fe57 	bl	800a7e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800ab32:	f7ff fe1d 	bl	800a770 <MX_DMA_Init>
  MX_I2C2_Init();
 800ab36:	f7ff fedb 	bl	800a8f0 <MX_I2C2_Init>
  MX_SPI1_Init();
 800ab3a:	f000 f983 	bl	800ae44 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800ab3e:	f011 fbab 	bl	801c298 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800ab42:	f000 ff31 	bl	800b9a8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800ab46:	f000 fe39 	bl	800b7bc <MX_UART4_Init>
  MX_UART7_Init();
 800ab4a:	f000 fe89 	bl	800b860 <MX_UART7_Init>
  MX_UART8_Init();
 800ab4e:	f000 fed5 	bl	800b8fc <MX_UART8_Init>
  MX_USART3_UART_Init();
 800ab52:	f000 ff75 	bl	800ba40 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800ab56:	f000 fd31 	bl	800b5bc <MX_TIM3_Init>
  MX_TIM2_Init();
 800ab5a:	f000 fce1 	bl	800b520 <MX_TIM2_Init>
  MX_TIM4_Init();
 800ab5e:	f000 fd7b 	bl	800b658 <MX_TIM4_Init>
  MX_COMP2_Init();
 800ab62:	f7ff fd37 	bl	800a5d4 <MX_COMP2_Init>
  MX_DAC1_Init();
 800ab66:	f7ff fdaf 	bl	800a6c8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	481a      	ldr	r0, [pc, #104]	; (800abd8 <main+0xb8>)
 800ab6e:	f001 fd6e 	bl	800c64e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 800ab72:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800ab76:	2200      	movs	r2, #0
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4817      	ldr	r0, [pc, #92]	; (800abd8 <main+0xb8>)
 800ab7c:	f001 fdb9 	bl	800c6f2 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 800ab80:	4816      	ldr	r0, [pc, #88]	; (800abdc <main+0xbc>)
 800ab82:	f00a fe9d 	bl	80158c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800ab86:	4816      	ldr	r0, [pc, #88]	; (800abe0 <main+0xc0>)
 800ab88:	f00a fe9a 	bl	80158c0 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 800ab8c:	4815      	ldr	r0, [pc, #84]	; (800abe4 <main+0xc4>)
 800ab8e:	f001 fb6f 	bl	800c270 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 800ab92:	4b15      	ldr	r3, [pc, #84]	; (800abe8 <main+0xc8>)
 800ab94:	603b      	str	r3, [r7, #0]
	config.HeadStreamUart = &huart4;
 800ab96:	4b15      	ldr	r3, [pc, #84]	; (800abec <main+0xcc>)
 800ab98:	607b      	str	r3, [r7, #4]

	config.HeadTimeout = 10;
 800ab9a:	230a      	movs	r3, #10
 800ab9c:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 800ab9e:	4b14      	ldr	r3, [pc, #80]	; (800abf0 <main+0xd0>)
 800aba0:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 800aba2:	230a      	movs	r3, #10
 800aba4:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 800aba6:	4b13      	ldr	r3, [pc, #76]	; (800abf4 <main+0xd4>)
 800aba8:	617b      	str	r3, [r7, #20]

	if (MotherboardInit(config))
 800abaa:	466a      	mov	r2, sp
 800abac:	f107 0310 	add.w	r3, r7, #16
 800abb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abb4:	e882 0003 	stmia.w	r2, {r0, r1}
 800abb8:	463b      	mov	r3, r7
 800abba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800abbc:	f7f7 fc2a 	bl	8002414 <MotherboardInit>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <main+0xaa>
		return 1;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e002      	b.n	800abd0 <main+0xb0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 800abca:	f7f7 fc75 	bl	80024b8 <MotherboardTick>
 800abce:	e7fc      	b.n	800abca <main+0xaa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	240014c4 	.word	0x240014c4
 800abdc:	240017dc 	.word	0x240017dc
 800abe0:	24001790 	.word	0x24001790
 800abe4:	24001498 	.word	0x24001498
 800abe8:	24001ab4 	.word	0x24001ab4
 800abec:	24001874 	.word	0x24001874
 800abf0:	24001994 	.word	0x24001994
 800abf4:	24001614 	.word	0x24001614

0800abf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b09e      	sub	sp, #120	; 0x78
 800abfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800abfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac02:	224c      	movs	r2, #76	; 0x4c
 800ac04:	2100      	movs	r1, #0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f012 f924 	bl	801ce54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ac0c:	f107 030c 	add.w	r3, r7, #12
 800ac10:	2220      	movs	r2, #32
 800ac12:	2100      	movs	r1, #0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f012 f91d 	bl	801ce54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ac1a:	2002      	movs	r0, #2
 800ac1c:	f007 f960 	bl	8011ee0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac20:	2300      	movs	r3, #0
 800ac22:	60bb      	str	r3, [r7, #8]
 800ac24:	4b4d      	ldr	r3, [pc, #308]	; (800ad5c <SystemClock_Config+0x164>)
 800ac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac28:	4a4c      	ldr	r2, [pc, #304]	; (800ad5c <SystemClock_Config+0x164>)
 800ac2a:	f023 0301 	bic.w	r3, r3, #1
 800ac2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac30:	4b4a      	ldr	r3, [pc, #296]	; (800ad5c <SystemClock_Config+0x164>)
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	60bb      	str	r3, [r7, #8]
 800ac3a:	4b49      	ldr	r3, [pc, #292]	; (800ad60 <SystemClock_Config+0x168>)
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	4a48      	ldr	r2, [pc, #288]	; (800ad60 <SystemClock_Config+0x168>)
 800ac40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac44:	6193      	str	r3, [r2, #24]
 800ac46:	4b46      	ldr	r3, [pc, #280]	; (800ad60 <SystemClock_Config+0x168>)
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac4e:	60bb      	str	r3, [r7, #8]
 800ac50:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ac52:	bf00      	nop
 800ac54:	4b42      	ldr	r3, [pc, #264]	; (800ad60 <SystemClock_Config+0x168>)
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac60:	d1f8      	bne.n	800ac54 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac62:	4b40      	ldr	r3, [pc, #256]	; (800ad64 <SystemClock_Config+0x16c>)
 800ac64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac68:	4a3e      	ldr	r2, [pc, #248]	; (800ad64 <SystemClock_Config+0x16c>)
 800ac6a:	f043 0302 	orr.w	r3, r3, #2
 800ac6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ac72:	4b3c      	ldr	r3, [pc, #240]	; (800ad64 <SystemClock_Config+0x16c>)
 800ac74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	607b      	str	r3, [r7, #4]
 800ac7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800ac80:	2300      	movs	r3, #0
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	4b36      	ldr	r3, [pc, #216]	; (800ad60 <SystemClock_Config+0x168>)
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	4a35      	ldr	r2, [pc, #212]	; (800ad60 <SystemClock_Config+0x168>)
 800ac8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac8e:	6193      	str	r3, [r2, #24]
 800ac90:	4b33      	ldr	r3, [pc, #204]	; (800ad60 <SystemClock_Config+0x168>)
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	4b30      	ldr	r3, [pc, #192]	; (800ad5c <SystemClock_Config+0x164>)
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	4a2f      	ldr	r2, [pc, #188]	; (800ad5c <SystemClock_Config+0x164>)
 800aca0:	f043 0301 	orr.w	r3, r3, #1
 800aca4:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aca6:	4b2d      	ldr	r3, [pc, #180]	; (800ad5c <SystemClock_Config+0x164>)
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800acb2:	bf00      	nop
 800acb4:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <SystemClock_Config+0x168>)
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acc0:	d1f8      	bne.n	800acb4 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800acc2:	4b28      	ldr	r3, [pc, #160]	; (800ad64 <SystemClock_Config+0x16c>)
 800acc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc6:	4a27      	ldr	r2, [pc, #156]	; (800ad64 <SystemClock_Config+0x16c>)
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800acce:	2322      	movs	r3, #34	; 0x22
 800acd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800acd2:	2301      	movs	r3, #1
 800acd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800acda:	2301      	movs	r3, #1
 800acdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800acde:	2302      	movs	r3, #2
 800ace0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ace2:	2300      	movs	r3, #0
 800ace4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ace6:	2304      	movs	r3, #4
 800ace8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800acea:	233c      	movs	r3, #60	; 0x3c
 800acec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800acee:	2302      	movs	r3, #2
 800acf0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800acf2:	2305      	movs	r3, #5
 800acf4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800acf6:	2302      	movs	r3, #2
 800acf8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800acfa:	230c      	movs	r3, #12
 800acfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f007 f932 	bl	8011f74 <HAL_RCC_OscConfig>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <SystemClock_Config+0x122>
  {
    Error_Handler();
 800ad16:	f000 f88f 	bl	800ae38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad1a:	233f      	movs	r3, #63	; 0x3f
 800ad1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ad26:	2308      	movs	r3, #8
 800ad28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ad2a:	2340      	movs	r3, #64	; 0x40
 800ad2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ad32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ad38:	2340      	movs	r3, #64	; 0x40
 800ad3a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ad3c:	f107 030c 	add.w	r3, r7, #12
 800ad40:	2104      	movs	r1, #4
 800ad42:	4618      	mov	r0, r3
 800ad44:	f007 fd44 	bl	80127d0 <HAL_RCC_ClockConfig>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800ad4e:	f000 f873 	bl	800ae38 <Error_Handler>
  }
}
 800ad52:	bf00      	nop
 800ad54:	3778      	adds	r7, #120	; 0x78
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	58000400 	.word	0x58000400
 800ad60:	58024800 	.word	0x58024800
 800ad64:	58024400 	.word	0x58024400

0800ad68 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a04      	ldr	r2, [pc, #16]	; (800ad88 <HAL_COMP_TriggerCallback+0x20>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d101      	bne.n	800ad7e <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 800ad7a:	f7f7 fc0d 	bl	8002598 <MotherboardOnStrobe>
	}
}
 800ad7e:	bf00      	nop
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	58003810 	.word	0x58003810

0800ad8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a0b      	ldr	r2, [pc, #44]	; (800adc8 <HAL_UART_RxCpltCallback+0x3c>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d101      	bne.n	800ada2 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 800ad9e:	f7f7 fc1b 	bl	80025d8 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a09      	ldr	r2, [pc, #36]	; (800adcc <HAL_UART_RxCpltCallback+0x40>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d101      	bne.n	800adb0 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 800adac:	f7f7 fc1e 	bl	80025ec <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a06      	ldr	r2, [pc, #24]	; (800add0 <HAL_UART_RxCpltCallback+0x44>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d101      	bne.n	800adbe <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 800adba:	f7f7 fc03 	bl	80025c4 <MotherboardOnBodyRecieveComplete>
	}
}
 800adbe:	bf00      	nop
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	40004800 	.word	0x40004800
 800adcc:	40004c00 	.word	0x40004c00
 800add0:	40007c00 	.word	0x40007c00

0800add4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a07      	ldr	r2, [pc, #28]	; (800ae00 <HAL_UART_TxCpltCallback+0x2c>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d101      	bne.n	800adea <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 800ade6:	f7f7 fc0b 	bl	8002600 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a05      	ldr	r2, [pc, #20]	; (800ae04 <HAL_UART_TxCpltCallback+0x30>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d101      	bne.n	800adf8 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 800adf4:	f7f7 fc0e 	bl	8002614 <MotherboardOnHeadStreamTransmitComplete>
	}
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	40004800 	.word	0x40004800
 800ae04:	40004c00 	.word	0x40004c00

0800ae08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a07      	ldr	r2, [pc, #28]	; (800ae34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d101      	bne.n	800ae1e <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 800ae1a:	f7f7 fc05 	bl	8002628 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae26:	d101      	bne.n	800ae2c <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 800ae28:	f7f7 fc0a 	bl	8002640 <MotherboardOnImuTimerTick>
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	40000400 	.word	0x40000400

0800ae38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ae3c:	b672      	cpsid	i
}
 800ae3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800ae40:	e7fe      	b.n	800ae40 <Error_Handler+0x8>
	...

0800ae44 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800ae48:	4b28      	ldr	r3, [pc, #160]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae4a:	4a29      	ldr	r2, [pc, #164]	; (800aef0 <MX_SPI1_Init+0xac>)
 800ae4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ae4e:	4b27      	ldr	r3, [pc, #156]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ae54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ae56:	4b25      	ldr	r3, [pc, #148]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ae5c:	4b23      	ldr	r3, [pc, #140]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae5e:	2207      	movs	r2, #7
 800ae60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ae62:	4b22      	ldr	r3, [pc, #136]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ae68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ae6a:	4b20      	ldr	r3, [pc, #128]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ae72:	4b1e      	ldr	r3, [pc, #120]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ae78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ae7a:	4b1c      	ldr	r3, [pc, #112]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ae80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ae82:	4b1a      	ldr	r3, [pc, #104]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ae88:	4b18      	ldr	r3, [pc, #96]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae8e:	4b17      	ldr	r3, [pc, #92]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800ae94:	4b15      	ldr	r3, [pc, #84]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ae9a:	4b14      	ldr	r3, [pc, #80]	; (800aeec <MX_SPI1_Init+0xa8>)
 800ae9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aea0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800aeba:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800aecc:	4b07      	ldr	r3, [pc, #28]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aece:	2200      	movs	r2, #0
 800aed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800aed2:	4b06      	ldr	r3, [pc, #24]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800aed8:	4804      	ldr	r0, [pc, #16]	; (800aeec <MX_SPI1_Init+0xa8>)
 800aeda:	f009 fb6d 	bl	80145b8 <HAL_SPI_Init>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800aee4:	f7ff ffa8 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800aee8:	bf00      	nop
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	24001614 	.word	0x24001614
 800aef0:	40013000 	.word	0x40013000

0800aef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b0b8      	sub	sp, #224	; 0xe0
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aefc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	605a      	str	r2, [r3, #4]
 800af06:	609a      	str	r2, [r3, #8]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af0c:	f107 0310 	add.w	r3, r7, #16
 800af10:	22bc      	movs	r2, #188	; 0xbc
 800af12:	2100      	movs	r1, #0
 800af14:	4618      	mov	r0, r3
 800af16:	f011 ff9d 	bl	801ce54 <memset>
  if(spiHandle->Instance==SPI1)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a60      	ldr	r2, [pc, #384]	; (800b0a0 <HAL_SPI_MspInit+0x1ac>)
 800af20:	4293      	cmp	r3, r2
 800af22:	f040 80b8 	bne.w	800b096 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800af26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800af2c:	2320      	movs	r3, #32
 800af2e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 800af30:	2381      	movs	r3, #129	; 0x81
 800af32:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800af34:	2302      	movs	r3, #2
 800af36:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800af38:	2302      	movs	r3, #2
 800af3a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800af3c:	2302      	movs	r3, #2
 800af3e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800af40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af44:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800af46:	2300      	movs	r3, #0
 800af48:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800af4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af52:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af54:	f107 0310 	add.w	r3, r7, #16
 800af58:	4618      	mov	r0, r3
 800af5a:	f007 ffc5 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800af64:	f7ff ff68 	bl	800ae38 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800af68:	4b4e      	ldr	r3, [pc, #312]	; (800b0a4 <HAL_SPI_MspInit+0x1b0>)
 800af6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af6e:	4a4d      	ldr	r2, [pc, #308]	; (800b0a4 <HAL_SPI_MspInit+0x1b0>)
 800af70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800af78:	4b4a      	ldr	r3, [pc, #296]	; (800b0a4 <HAL_SPI_MspInit+0x1b0>)
 800af7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af86:	4b47      	ldr	r3, [pc, #284]	; (800b0a4 <HAL_SPI_MspInit+0x1b0>)
 800af88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af8c:	4a45      	ldr	r2, [pc, #276]	; (800b0a4 <HAL_SPI_MspInit+0x1b0>)
 800af8e:	f043 0301 	orr.w	r3, r3, #1
 800af92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af96:	4b43      	ldr	r3, [pc, #268]	; (800b0a4 <HAL_SPI_MspInit+0x1b0>)
 800af98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	60bb      	str	r3, [r7, #8]
 800afa2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800afa4:	23e0      	movs	r3, #224	; 0xe0
 800afa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afaa:	2302      	movs	r3, #2
 800afac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afb6:	2300      	movs	r3, #0
 800afb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800afbc:	2305      	movs	r3, #5
 800afbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800afc6:	4619      	mov	r1, r3
 800afc8:	4837      	ldr	r0, [pc, #220]	; (800b0a8 <HAL_SPI_MspInit+0x1b4>)
 800afca:	f004 fb3d 	bl	800f648 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 800afce:	4b37      	ldr	r3, [pc, #220]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800afd0:	4a37      	ldr	r2, [pc, #220]	; (800b0b0 <HAL_SPI_MspInit+0x1bc>)
 800afd2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800afd4:	4b35      	ldr	r3, [pc, #212]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800afd6:	2226      	movs	r2, #38	; 0x26
 800afd8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800afda:	4b34      	ldr	r3, [pc, #208]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800afdc:	2240      	movs	r2, #64	; 0x40
 800afde:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800afe0:	4b32      	ldr	r3, [pc, #200]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800afe6:	4b31      	ldr	r3, [pc, #196]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800afe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800afee:	4b2f      	ldr	r3, [pc, #188]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aff4:	4b2d      	ldr	r3, [pc, #180]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800affa:	4b2c      	ldr	r3, [pc, #176]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800affc:	2200      	movs	r2, #0
 800affe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b000:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800b002:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b006:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b008:	4b28      	ldr	r3, [pc, #160]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800b00e:	4827      	ldr	r0, [pc, #156]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800b010:	f001 fcc4 	bl	800c99c <HAL_DMA_Init>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800b01a:	f7ff ff0d 	bl	800ae38 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a22      	ldr	r2, [pc, #136]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800b022:	679a      	str	r2, [r3, #120]	; 0x78
 800b024:	4a21      	ldr	r2, [pc, #132]	; (800b0ac <HAL_SPI_MspInit+0x1b8>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 800b02a:	4b22      	ldr	r3, [pc, #136]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b02c:	4a22      	ldr	r2, [pc, #136]	; (800b0b8 <HAL_SPI_MspInit+0x1c4>)
 800b02e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800b030:	4b20      	ldr	r3, [pc, #128]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b032:	2225      	movs	r2, #37	; 0x25
 800b034:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b036:	4b1f      	ldr	r3, [pc, #124]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b038:	2200      	movs	r2, #0
 800b03a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b03c:	4b1d      	ldr	r3, [pc, #116]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b03e:	2200      	movs	r2, #0
 800b040:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b042:	4b1c      	ldr	r3, [pc, #112]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b048:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b04a:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b050:	4b18      	ldr	r3, [pc, #96]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b052:	2200      	movs	r2, #0
 800b054:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800b056:	4b17      	ldr	r3, [pc, #92]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b058:	2200      	movs	r2, #0
 800b05a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b05c:	4b15      	ldr	r3, [pc, #84]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b05e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b062:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b064:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b066:	2200      	movs	r2, #0
 800b068:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800b06a:	4812      	ldr	r0, [pc, #72]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b06c:	f001 fc96 	bl	800c99c <HAL_DMA_Init>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 800b076:	f7ff fedf 	bl	800ae38 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a0d      	ldr	r2, [pc, #52]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b07e:	67da      	str	r2, [r3, #124]	; 0x7c
 800b080:	4a0c      	ldr	r2, [pc, #48]	; (800b0b4 <HAL_SPI_MspInit+0x1c0>)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800b086:	2200      	movs	r2, #0
 800b088:	2100      	movs	r1, #0
 800b08a:	2023      	movs	r0, #35	; 0x23
 800b08c:	f001 fa89 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800b090:	2023      	movs	r0, #35	; 0x23
 800b092:	f001 faa0 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800b096:	bf00      	nop
 800b098:	37e0      	adds	r7, #224	; 0xe0
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	40013000 	.word	0x40013000
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	58020000 	.word	0x58020000
 800b0ac:	2400169c 	.word	0x2400169c
 800b0b0:	40020070 	.word	0x40020070
 800b0b4:	24001714 	.word	0x24001714
 800b0b8:	40020088 	.word	0x40020088

0800b0bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0c2:	4b0a      	ldr	r3, [pc, #40]	; (800b0ec <HAL_MspInit+0x30>)
 800b0c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0c8:	4a08      	ldr	r2, [pc, #32]	; (800b0ec <HAL_MspInit+0x30>)
 800b0ca:	f043 0302 	orr.w	r3, r3, #2
 800b0ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b0d2:	4b06      	ldr	r3, [pc, #24]	; (800b0ec <HAL_MspInit+0x30>)
 800b0d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0d8:	f003 0302 	and.w	r3, r3, #2
 800b0dc:	607b      	str	r3, [r7, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	58024400 	.word	0x58024400

0800b0f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b0f4:	e7fe      	b.n	800b0f4 <NMI_Handler+0x4>

0800b0f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b0fa:	e7fe      	b.n	800b0fa <HardFault_Handler+0x4>

0800b0fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b100:	e7fe      	b.n	800b100 <MemManage_Handler+0x4>

0800b102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b102:	b480      	push	{r7}
 800b104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b106:	e7fe      	b.n	800b106 <BusFault_Handler+0x4>

0800b108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b108:	b480      	push	{r7}
 800b10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b10c:	e7fe      	b.n	800b10c <UsageFault_Handler+0x4>

0800b10e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b10e:	b480      	push	{r7}
 800b110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b112:	bf00      	nop
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b120:	bf00      	nop
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b12a:	b480      	push	{r7}
 800b12c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b12e:	bf00      	nop
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b13c:	f000 ff1e 	bl	800bf7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b140:	bf00      	nop
 800b142:	bd80      	pop	{r7, pc}

0800b144 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800b148:	4802      	ldr	r0, [pc, #8]	; (800b154 <DMA1_Stream0_IRQHandler+0x10>)
 800b14a:	f002 ff51 	bl	800dff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b14e:	bf00      	nop
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	24001524 	.word	0x24001524

0800b158 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800b15c:	4802      	ldr	r0, [pc, #8]	; (800b168 <DMA1_Stream1_IRQHandler+0x10>)
 800b15e:	f002 ff47 	bl	800dff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b162:	bf00      	nop
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	2400159c 	.word	0x2400159c

0800b16c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b170:	4802      	ldr	r0, [pc, #8]	; (800b17c <DMA1_Stream4_IRQHandler+0x10>)
 800b172:	f002 ff3d 	bl	800dff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b176:	bf00      	nop
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	2400169c 	.word	0x2400169c

0800b180 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800b184:	4802      	ldr	r0, [pc, #8]	; (800b190 <DMA1_Stream5_IRQHandler+0x10>)
 800b186:	f002 ff33 	bl	800dff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800b18a:	bf00      	nop
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	24001714 	.word	0x24001714

0800b194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b198:	4802      	ldr	r0, [pc, #8]	; (800b1a4 <TIM2_IRQHandler+0x10>)
 800b19a:	f00a fc09 	bl	80159b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b19e:	bf00      	nop
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	24001790 	.word	0x24001790

0800b1a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b1ac:	4802      	ldr	r0, [pc, #8]	; (800b1b8 <TIM3_IRQHandler+0x10>)
 800b1ae:	f00a fbff 	bl	80159b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b1b2:	bf00      	nop
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	240017dc 	.word	0x240017dc

0800b1bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b1c0:	4802      	ldr	r0, [pc, #8]	; (800b1cc <TIM4_IRQHandler+0x10>)
 800b1c2:	f00a fbf5 	bl	80159b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b1c6:	bf00      	nop
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	24001828 	.word	0x24001828

0800b1d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b1d4:	4802      	ldr	r0, [pc, #8]	; (800b1e0 <I2C2_EV_IRQHandler+0x10>)
 800b1d6:	f004 fc91 	bl	800fafc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b1da:	bf00      	nop
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	240014d8 	.word	0x240014d8

0800b1e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800b1e8:	4802      	ldr	r0, [pc, #8]	; (800b1f4 <I2C2_ER_IRQHandler+0x10>)
 800b1ea:	f004 fca1 	bl	800fb30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800b1ee:	bf00      	nop
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	240014d8 	.word	0x240014d8

0800b1f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800b1fc:	4802      	ldr	r0, [pc, #8]	; (800b208 <SPI1_IRQHandler+0x10>)
 800b1fe:	f009 ff5d 	bl	80150bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800b202:	bf00      	nop
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	24001614 	.word	0x24001614

0800b20c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b210:	4802      	ldr	r0, [pc, #8]	; (800b21c <USART3_IRQHandler+0x10>)
 800b212:	f00b fa01 	bl	8016618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b216:	bf00      	nop
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	24001ab4 	.word	0x24001ab4

0800b220 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b224:	4802      	ldr	r0, [pc, #8]	; (800b230 <UART4_IRQHandler+0x10>)
 800b226:	f00b f9f7 	bl	8016618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b22a:	bf00      	nop
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	24001874 	.word	0x24001874

0800b234 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800b238:	4802      	ldr	r0, [pc, #8]	; (800b244 <UART8_IRQHandler+0x10>)
 800b23a:	f00b f9ed 	bl	8016618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800b23e:	bf00      	nop
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	24001994 	.word	0x24001994

0800b248 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b24c:	4802      	ldr	r0, [pc, #8]	; (800b258 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800b24e:	f005 fcc8 	bl	8010be2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800b252:	bf00      	nop
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	24003028 	.word	0x24003028

0800b25c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b260:	4802      	ldr	r0, [pc, #8]	; (800b26c <OTG_FS_IRQHandler+0x10>)
 800b262:	f005 fcbe 	bl	8010be2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b266:	bf00      	nop
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	24003028 	.word	0x24003028

0800b270 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 800b274:	4802      	ldr	r0, [pc, #8]	; (800b280 <COMP1_IRQHandler+0x10>)
 800b276:	f001 f845 	bl	800c304 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800b27a:	bf00      	nop
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	24001498 	.word	0x24001498

0800b284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
	return 1;
 800b288:	2301      	movs	r3, #1
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <_kill>:

int _kill(int pid, int sig)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b29e:	f011 fd65 	bl	801cd6c <__errno>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2216      	movs	r2, #22
 800b2a6:	601a      	str	r2, [r3, #0]
	return -1;
 800b2a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <_exit>:

void _exit (int status)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b2bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7ff ffe7 	bl	800b294 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b2c6:	e7fe      	b.n	800b2c6 <_exit+0x12>

0800b2c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e00a      	b.n	800b2f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b2da:	f3af 8000 	nop.w
 800b2de:	4601      	mov	r1, r0
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	60ba      	str	r2, [r7, #8]
 800b2e6:	b2ca      	uxtb	r2, r1
 800b2e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	617b      	str	r3, [r7, #20]
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	dbf0      	blt.n	800b2da <_read+0x12>
	}

return len;
 800b2f8:	687b      	ldr	r3, [r7, #4]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b086      	sub	sp, #24
 800b306:	af00      	add	r7, sp, #0
 800b308:	60f8      	str	r0, [r7, #12]
 800b30a:	60b9      	str	r1, [r7, #8]
 800b30c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
 800b312:	e009      	b.n	800b328 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	60ba      	str	r2, [r7, #8]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	3301      	adds	r3, #1
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	dbf1      	blt.n	800b314 <_write+0x12>
	}
	return len;
 800b330:	687b      	ldr	r3, [r7, #4]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <_close>:

int _close(int file)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
	return -1;
 800b342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b346:	4618      	mov	r0, r3
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b362:	605a      	str	r2, [r3, #4]
	return 0;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <_isatty>:

int _isatty(int file)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
	return 1;
 800b37a:	2301      	movs	r3, #1
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
	return 0;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b3ac:	4a14      	ldr	r2, [pc, #80]	; (800b400 <_sbrk+0x5c>)
 800b3ae:	4b15      	ldr	r3, [pc, #84]	; (800b404 <_sbrk+0x60>)
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b3b8:	4b13      	ldr	r3, [pc, #76]	; (800b408 <_sbrk+0x64>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b3c0:	4b11      	ldr	r3, [pc, #68]	; (800b408 <_sbrk+0x64>)
 800b3c2:	4a12      	ldr	r2, [pc, #72]	; (800b40c <_sbrk+0x68>)
 800b3c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <_sbrk+0x64>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d207      	bcs.n	800b3e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b3d4:	f011 fcca 	bl	801cd6c <__errno>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	220c      	movs	r2, #12
 800b3dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b3de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3e2:	e009      	b.n	800b3f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b3e4:	4b08      	ldr	r3, [pc, #32]	; (800b408 <_sbrk+0x64>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b3ea:	4b07      	ldr	r3, [pc, #28]	; (800b408 <_sbrk+0x64>)
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	4a05      	ldr	r2, [pc, #20]	; (800b408 <_sbrk+0x64>)
 800b3f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	24080000 	.word	0x24080000
 800b404:	00000400 	.word	0x00000400
 800b408:	2400178c 	.word	0x2400178c
 800b40c:	24003768 	.word	0x24003768

0800b410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b410:	b480      	push	{r7}
 800b412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b414:	4b37      	ldr	r3, [pc, #220]	; (800b4f4 <SystemInit+0xe4>)
 800b416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41a:	4a36      	ldr	r2, [pc, #216]	; (800b4f4 <SystemInit+0xe4>)
 800b41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b424:	4b34      	ldr	r3, [pc, #208]	; (800b4f8 <SystemInit+0xe8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 030f 	and.w	r3, r3, #15
 800b42c:	2b06      	cmp	r3, #6
 800b42e:	d807      	bhi.n	800b440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b430:	4b31      	ldr	r3, [pc, #196]	; (800b4f8 <SystemInit+0xe8>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f023 030f 	bic.w	r3, r3, #15
 800b438:	4a2f      	ldr	r2, [pc, #188]	; (800b4f8 <SystemInit+0xe8>)
 800b43a:	f043 0307 	orr.w	r3, r3, #7
 800b43e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b440:	4b2e      	ldr	r3, [pc, #184]	; (800b4fc <SystemInit+0xec>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a2d      	ldr	r2, [pc, #180]	; (800b4fc <SystemInit+0xec>)
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b44c:	4b2b      	ldr	r3, [pc, #172]	; (800b4fc <SystemInit+0xec>)
 800b44e:	2200      	movs	r2, #0
 800b450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b452:	4b2a      	ldr	r3, [pc, #168]	; (800b4fc <SystemInit+0xec>)
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	4929      	ldr	r1, [pc, #164]	; (800b4fc <SystemInit+0xec>)
 800b458:	4b29      	ldr	r3, [pc, #164]	; (800b500 <SystemInit+0xf0>)
 800b45a:	4013      	ands	r3, r2
 800b45c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b45e:	4b26      	ldr	r3, [pc, #152]	; (800b4f8 <SystemInit+0xe8>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0308 	and.w	r3, r3, #8
 800b466:	2b00      	cmp	r3, #0
 800b468:	d007      	beq.n	800b47a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b46a:	4b23      	ldr	r3, [pc, #140]	; (800b4f8 <SystemInit+0xe8>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f023 030f 	bic.w	r3, r3, #15
 800b472:	4a21      	ldr	r2, [pc, #132]	; (800b4f8 <SystemInit+0xe8>)
 800b474:	f043 0307 	orr.w	r3, r3, #7
 800b478:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b47a:	4b20      	ldr	r3, [pc, #128]	; (800b4fc <SystemInit+0xec>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b480:	4b1e      	ldr	r3, [pc, #120]	; (800b4fc <SystemInit+0xec>)
 800b482:	2200      	movs	r2, #0
 800b484:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b486:	4b1d      	ldr	r3, [pc, #116]	; (800b4fc <SystemInit+0xec>)
 800b488:	2200      	movs	r2, #0
 800b48a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b48c:	4b1b      	ldr	r3, [pc, #108]	; (800b4fc <SystemInit+0xec>)
 800b48e:	4a1d      	ldr	r2, [pc, #116]	; (800b504 <SystemInit+0xf4>)
 800b490:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b492:	4b1a      	ldr	r3, [pc, #104]	; (800b4fc <SystemInit+0xec>)
 800b494:	4a1c      	ldr	r2, [pc, #112]	; (800b508 <SystemInit+0xf8>)
 800b496:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b498:	4b18      	ldr	r3, [pc, #96]	; (800b4fc <SystemInit+0xec>)
 800b49a:	4a1c      	ldr	r2, [pc, #112]	; (800b50c <SystemInit+0xfc>)
 800b49c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b49e:	4b17      	ldr	r3, [pc, #92]	; (800b4fc <SystemInit+0xec>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b4a4:	4b15      	ldr	r3, [pc, #84]	; (800b4fc <SystemInit+0xec>)
 800b4a6:	4a19      	ldr	r2, [pc, #100]	; (800b50c <SystemInit+0xfc>)
 800b4a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b4aa:	4b14      	ldr	r3, [pc, #80]	; (800b4fc <SystemInit+0xec>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b4b0:	4b12      	ldr	r3, [pc, #72]	; (800b4fc <SystemInit+0xec>)
 800b4b2:	4a16      	ldr	r2, [pc, #88]	; (800b50c <SystemInit+0xfc>)
 800b4b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b4b6:	4b11      	ldr	r3, [pc, #68]	; (800b4fc <SystemInit+0xec>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b4bc:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <SystemInit+0xec>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a0e      	ldr	r2, [pc, #56]	; (800b4fc <SystemInit+0xec>)
 800b4c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b4c8:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <SystemInit+0xec>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b4ce:	4b10      	ldr	r3, [pc, #64]	; (800b510 <SystemInit+0x100>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b10      	ldr	r3, [pc, #64]	; (800b514 <SystemInit+0x104>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4da:	d202      	bcs.n	800b4e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <SystemInit+0x108>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b4e2:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <SystemInit+0x10c>)
 800b4e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b4e8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b4ea:	bf00      	nop
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	e000ed00 	.word	0xe000ed00
 800b4f8:	52002000 	.word	0x52002000
 800b4fc:	58024400 	.word	0x58024400
 800b500:	eaf6ed7f 	.word	0xeaf6ed7f
 800b504:	02020200 	.word	0x02020200
 800b508:	01ff0000 	.word	0x01ff0000
 800b50c:	01010280 	.word	0x01010280
 800b510:	5c001000 	.word	0x5c001000
 800b514:	ffff0000 	.word	0xffff0000
 800b518:	51008108 	.word	0x51008108
 800b51c:	52004000 	.word	0x52004000

0800b520 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b526:	f107 0310 	add.w	r3, r7, #16
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	605a      	str	r2, [r3, #4]
 800b530:	609a      	str	r2, [r3, #8]
 800b532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b534:	1d3b      	adds	r3, r7, #4
 800b536:	2200      	movs	r2, #0
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	605a      	str	r2, [r3, #4]
 800b53c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b53e:	4b1e      	ldr	r3, [pc, #120]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 800b546:	4b1c      	ldr	r3, [pc, #112]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b548:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b54c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b54e:	4b1a      	ldr	r3, [pc, #104]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b550:	2200      	movs	r2, #0
 800b552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800b554:	4b18      	ldr	r3, [pc, #96]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b556:	2264      	movs	r2, #100	; 0x64
 800b558:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b55a:	4b17      	ldr	r3, [pc, #92]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b560:	4b15      	ldr	r3, [pc, #84]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b562:	2200      	movs	r2, #0
 800b564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b566:	4814      	ldr	r0, [pc, #80]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b568:	f00a f953 	bl	8015812 <HAL_TIM_Base_Init>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b572:	f7ff fc61 	bl	800ae38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b57a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b57c:	f107 0310 	add.w	r3, r7, #16
 800b580:	4619      	mov	r1, r3
 800b582:	480d      	ldr	r0, [pc, #52]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b584:	f00a fb34 	bl	8015bf0 <HAL_TIM_ConfigClockSource>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b58e:	f7ff fc53 	bl	800ae38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b592:	2300      	movs	r3, #0
 800b594:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b59a:	1d3b      	adds	r3, r7, #4
 800b59c:	4619      	mov	r1, r3
 800b59e:	4806      	ldr	r0, [pc, #24]	; (800b5b8 <MX_TIM2_Init+0x98>)
 800b5a0:	f00a fd7e 	bl	80160a0 <HAL_TIMEx_MasterConfigSynchronization>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b5aa:	f7ff fc45 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b5ae:	bf00      	nop
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	24001790 	.word	0x24001790

0800b5bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b5c2:	f107 0310 	add.w	r3, r7, #16
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	605a      	str	r2, [r3, #4]
 800b5cc:	609a      	str	r2, [r3, #8]
 800b5ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5d0:	1d3b      	adds	r3, r7, #4
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	605a      	str	r2, [r3, #4]
 800b5d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b5da:	4b1d      	ldr	r3, [pc, #116]	; (800b650 <MX_TIM3_Init+0x94>)
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	; (800b654 <MX_TIM3_Init+0x98>)
 800b5de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 800b5e0:	4b1b      	ldr	r3, [pc, #108]	; (800b650 <MX_TIM3_Init+0x94>)
 800b5e2:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b5e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5e8:	4b19      	ldr	r3, [pc, #100]	; (800b650 <MX_TIM3_Init+0x94>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800b5ee:	4b18      	ldr	r3, [pc, #96]	; (800b650 <MX_TIM3_Init+0x94>)
 800b5f0:	2264      	movs	r2, #100	; 0x64
 800b5f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b5f4:	4b16      	ldr	r3, [pc, #88]	; (800b650 <MX_TIM3_Init+0x94>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5fa:	4b15      	ldr	r3, [pc, #84]	; (800b650 <MX_TIM3_Init+0x94>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b600:	4813      	ldr	r0, [pc, #76]	; (800b650 <MX_TIM3_Init+0x94>)
 800b602:	f00a f906 	bl	8015812 <HAL_TIM_Base_Init>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b60c:	f7ff fc14 	bl	800ae38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b614:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b616:	f107 0310 	add.w	r3, r7, #16
 800b61a:	4619      	mov	r1, r3
 800b61c:	480c      	ldr	r0, [pc, #48]	; (800b650 <MX_TIM3_Init+0x94>)
 800b61e:	f00a fae7 	bl	8015bf0 <HAL_TIM_ConfigClockSource>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b628:	f7ff fc06 	bl	800ae38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b62c:	2300      	movs	r3, #0
 800b62e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b630:	2300      	movs	r3, #0
 800b632:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b634:	1d3b      	adds	r3, r7, #4
 800b636:	4619      	mov	r1, r3
 800b638:	4805      	ldr	r0, [pc, #20]	; (800b650 <MX_TIM3_Init+0x94>)
 800b63a:	f00a fd31 	bl	80160a0 <HAL_TIMEx_MasterConfigSynchronization>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b644:	f7ff fbf8 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b648:	bf00      	nop
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	240017dc 	.word	0x240017dc
 800b654:	40000400 	.word	0x40000400

0800b658 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b65e:	f107 0310 	add.w	r3, r7, #16
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	605a      	str	r2, [r3, #4]
 800b668:	609a      	str	r2, [r3, #8]
 800b66a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b66c:	1d3b      	adds	r3, r7, #4
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	605a      	str	r2, [r3, #4]
 800b674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b678:	4a1d      	ldr	r2, [pc, #116]	; (800b6f0 <MX_TIM4_Init+0x98>)
 800b67a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 800b67c:	4b1b      	ldr	r3, [pc, #108]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b67e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b682:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b684:	4b19      	ldr	r3, [pc, #100]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b686:	2200      	movs	r2, #0
 800b688:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800b68a:	4b18      	ldr	r3, [pc, #96]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b68c:	2264      	movs	r2, #100	; 0x64
 800b68e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b690:	4b16      	ldr	r3, [pc, #88]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b692:	2200      	movs	r2, #0
 800b694:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b696:	4b15      	ldr	r3, [pc, #84]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b698:	2200      	movs	r2, #0
 800b69a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b69c:	4813      	ldr	r0, [pc, #76]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b69e:	f00a f8b8 	bl	8015812 <HAL_TIM_Base_Init>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800b6a8:	f7ff fbc6 	bl	800ae38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b6b2:	f107 0310 	add.w	r3, r7, #16
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	480c      	ldr	r0, [pc, #48]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b6ba:	f00a fa99 	bl	8015bf0 <HAL_TIM_ConfigClockSource>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800b6c4:	f7ff fbb8 	bl	800ae38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b6d0:	1d3b      	adds	r3, r7, #4
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4805      	ldr	r0, [pc, #20]	; (800b6ec <MX_TIM4_Init+0x94>)
 800b6d6:	f00a fce3 	bl	80160a0 <HAL_TIMEx_MasterConfigSynchronization>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800b6e0:	f7ff fbaa 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b6e4:	bf00      	nop
 800b6e6:	3720      	adds	r7, #32
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	24001828 	.word	0x24001828
 800b6f0:	40000800 	.word	0x40000800

0800b6f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b704:	d117      	bne.n	800b736 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b706:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b70c:	4a28      	ldr	r2, [pc, #160]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b70e:	f043 0301 	orr.w	r3, r3, #1
 800b712:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b716:	4b26      	ldr	r3, [pc, #152]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	617b      	str	r3, [r7, #20]
 800b722:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b724:	2200      	movs	r2, #0
 800b726:	2100      	movs	r1, #0
 800b728:	201c      	movs	r0, #28
 800b72a:	f000 ff3a 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b72e:	201c      	movs	r0, #28
 800b730:	f000 ff51 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800b734:	e038      	b.n	800b7a8 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a1e      	ldr	r2, [pc, #120]	; (800b7b4 <HAL_TIM_Base_MspInit+0xc0>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d117      	bne.n	800b770 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b740:	4b1b      	ldr	r3, [pc, #108]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b746:	4a1a      	ldr	r2, [pc, #104]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b748:	f043 0302 	orr.w	r3, r3, #2
 800b74c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b750:	4b17      	ldr	r3, [pc, #92]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b756:	f003 0302 	and.w	r3, r3, #2
 800b75a:	613b      	str	r3, [r7, #16]
 800b75c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b75e:	2200      	movs	r2, #0
 800b760:	2100      	movs	r1, #0
 800b762:	201d      	movs	r0, #29
 800b764:	f000 ff1d 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b768:	201d      	movs	r0, #29
 800b76a:	f000 ff34 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
}
 800b76e:	e01b      	b.n	800b7a8 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a10      	ldr	r2, [pc, #64]	; (800b7b8 <HAL_TIM_Base_MspInit+0xc4>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d116      	bne.n	800b7a8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b77a:	4b0d      	ldr	r3, [pc, #52]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b77c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b780:	4a0b      	ldr	r2, [pc, #44]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b782:	f043 0304 	orr.w	r3, r3, #4
 800b786:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b78a:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b78c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b790:	f003 0304 	and.w	r3, r3, #4
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b798:	2200      	movs	r2, #0
 800b79a:	2100      	movs	r1, #0
 800b79c:	201e      	movs	r0, #30
 800b79e:	f000 ff00 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b7a2:	201e      	movs	r0, #30
 800b7a4:	f000 ff17 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
}
 800b7a8:	bf00      	nop
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	58024400 	.word	0x58024400
 800b7b4:	40000400 	.word	0x40000400
 800b7b8:	40000800 	.word	0x40000800

0800b7bc <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800b7c0:	4b25      	ldr	r3, [pc, #148]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7c2:	4a26      	ldr	r2, [pc, #152]	; (800b85c <MX_UART4_Init+0xa0>)
 800b7c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b7c6:	4b24      	ldr	r3, [pc, #144]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b7cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800b7ce:	4b22      	ldr	r3, [pc, #136]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b7d4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b7d6:	4b20      	ldr	r3, [pc, #128]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800b7dc:	4b1e      	ldr	r3, [pc, #120]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b7e4:	4b1c      	ldr	r3, [pc, #112]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7e6:	220c      	movs	r2, #12
 800b7e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b7f0:	4b19      	ldr	r3, [pc, #100]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b7f6:	4b18      	ldr	r3, [pc, #96]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b7fc:	4b16      	ldr	r3, [pc, #88]	; (800b858 <MX_UART4_Init+0x9c>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b802:	4b15      	ldr	r3, [pc, #84]	; (800b858 <MX_UART4_Init+0x9c>)
 800b804:	2220      	movs	r2, #32
 800b806:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b808:	4b13      	ldr	r3, [pc, #76]	; (800b858 <MX_UART4_Init+0x9c>)
 800b80a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b80e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b810:	4811      	ldr	r0, [pc, #68]	; (800b858 <MX_UART4_Init+0x9c>)
 800b812:	f00a fcf1 	bl	80161f8 <HAL_UART_Init>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 800b81c:	f7ff fb0c 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b820:	2100      	movs	r1, #0
 800b822:	480d      	ldr	r0, [pc, #52]	; (800b858 <MX_UART4_Init+0x9c>)
 800b824:	f00d f88a 	bl	801893c <HAL_UARTEx_SetTxFifoThreshold>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 800b82e:	f7ff fb03 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b832:	2100      	movs	r1, #0
 800b834:	4808      	ldr	r0, [pc, #32]	; (800b858 <MX_UART4_Init+0x9c>)
 800b836:	f00d f8bf 	bl	80189b8 <HAL_UARTEx_SetRxFifoThreshold>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 800b840:	f7ff fafa 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800b844:	4804      	ldr	r0, [pc, #16]	; (800b858 <MX_UART4_Init+0x9c>)
 800b846:	f00d f840 	bl	80188ca <HAL_UARTEx_DisableFifoMode>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 800b850:	f7ff faf2 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800b854:	bf00      	nop
 800b856:	bd80      	pop	{r7, pc}
 800b858:	24001874 	.word	0x24001874
 800b85c:	40004c00 	.word	0x40004c00

0800b860 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800b864:	4b22      	ldr	r3, [pc, #136]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b866:	4a23      	ldr	r2, [pc, #140]	; (800b8f4 <MX_UART7_Init+0x94>)
 800b868:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 800b86a:	4b21      	ldr	r3, [pc, #132]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b86c:	4a22      	ldr	r2, [pc, #136]	; (800b8f8 <MX_UART7_Init+0x98>)
 800b86e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800b870:	4b1f      	ldr	r3, [pc, #124]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b872:	2200      	movs	r2, #0
 800b874:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800b876:	4b1e      	ldr	r3, [pc, #120]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b878:	2200      	movs	r2, #0
 800b87a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800b87c:	4b1c      	ldr	r3, [pc, #112]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b87e:	2200      	movs	r2, #0
 800b880:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800b882:	4b1b      	ldr	r3, [pc, #108]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b884:	220c      	movs	r2, #12
 800b886:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b888:	4b19      	ldr	r3, [pc, #100]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800b88e:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b890:	2200      	movs	r2, #0
 800b892:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b894:	4b16      	ldr	r3, [pc, #88]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b896:	2200      	movs	r2, #0
 800b898:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b89a:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b8a0:	4b13      	ldr	r3, [pc, #76]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800b8a6:	4812      	ldr	r0, [pc, #72]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b8a8:	f00a fca6 	bl	80161f8 <HAL_UART_Init>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800b8b2:	f7ff fac1 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	480d      	ldr	r0, [pc, #52]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b8ba:	f00d f83f 	bl	801893c <HAL_UARTEx_SetTxFifoThreshold>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 800b8c4:	f7ff fab8 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	4809      	ldr	r0, [pc, #36]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b8cc:	f00d f874 	bl	80189b8 <HAL_UARTEx_SetRxFifoThreshold>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800b8d6:	f7ff faaf 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800b8da:	4805      	ldr	r0, [pc, #20]	; (800b8f0 <MX_UART7_Init+0x90>)
 800b8dc:	f00c fff5 	bl	80188ca <HAL_UARTEx_DisableFifoMode>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800b8e6:	f7ff faa7 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800b8ea:	bf00      	nop
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	24001904 	.word	0x24001904
 800b8f4:	40007800 	.word	0x40007800
 800b8f8:	001312d0 	.word	0x001312d0

0800b8fc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800b900:	4b26      	ldr	r3, [pc, #152]	; (800b99c <MX_UART8_Init+0xa0>)
 800b902:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <MX_UART8_Init+0xa4>)
 800b904:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 800b906:	4b25      	ldr	r3, [pc, #148]	; (800b99c <MX_UART8_Init+0xa0>)
 800b908:	4a26      	ldr	r2, [pc, #152]	; (800b9a4 <MX_UART8_Init+0xa8>)
 800b90a:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 800b90c:	4b23      	ldr	r3, [pc, #140]	; (800b99c <MX_UART8_Init+0xa0>)
 800b90e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b912:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800b914:	4b21      	ldr	r3, [pc, #132]	; (800b99c <MX_UART8_Init+0xa0>)
 800b916:	2200      	movs	r2, #0
 800b918:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 800b91a:	4b20      	ldr	r3, [pc, #128]	; (800b99c <MX_UART8_Init+0xa0>)
 800b91c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b920:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800b922:	4b1e      	ldr	r3, [pc, #120]	; (800b99c <MX_UART8_Init+0xa0>)
 800b924:	220c      	movs	r2, #12
 800b926:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b928:	4b1c      	ldr	r3, [pc, #112]	; (800b99c <MX_UART8_Init+0xa0>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800b92e:	4b1b      	ldr	r3, [pc, #108]	; (800b99c <MX_UART8_Init+0xa0>)
 800b930:	2200      	movs	r2, #0
 800b932:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b934:	4b19      	ldr	r3, [pc, #100]	; (800b99c <MX_UART8_Init+0xa0>)
 800b936:	2200      	movs	r2, #0
 800b938:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b93a:	4b18      	ldr	r3, [pc, #96]	; (800b99c <MX_UART8_Init+0xa0>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b940:	4b16      	ldr	r3, [pc, #88]	; (800b99c <MX_UART8_Init+0xa0>)
 800b942:	2220      	movs	r2, #32
 800b944:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b946:	4b15      	ldr	r3, [pc, #84]	; (800b99c <MX_UART8_Init+0xa0>)
 800b948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b94c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800b94e:	4813      	ldr	r0, [pc, #76]	; (800b99c <MX_UART8_Init+0xa0>)
 800b950:	f00a fc52 	bl	80161f8 <HAL_UART_Init>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <MX_UART8_Init+0x62>
  {
    Error_Handler();
 800b95a:	f7ff fa6d 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b95e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b962:	480e      	ldr	r0, [pc, #56]	; (800b99c <MX_UART8_Init+0xa0>)
 800b964:	f00c ffea 	bl	801893c <HAL_UARTEx_SetTxFifoThreshold>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 800b96e:	f7ff fa63 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b972:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b976:	4809      	ldr	r0, [pc, #36]	; (800b99c <MX_UART8_Init+0xa0>)
 800b978:	f00d f81e 	bl	80189b8 <HAL_UARTEx_SetRxFifoThreshold>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 800b982:	f7ff fa59 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 800b986:	4805      	ldr	r0, [pc, #20]	; (800b99c <MX_UART8_Init+0xa0>)
 800b988:	f00c ff64 	bl	8018854 <HAL_UARTEx_EnableFifoMode>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 800b992:	f7ff fa51 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800b996:	bf00      	nop
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	24001994 	.word	0x24001994
 800b9a0:	40007c00 	.word	0x40007c00
 800b9a4:	001312d0 	.word	0x001312d0

0800b9a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b9ac:	4b22      	ldr	r3, [pc, #136]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9ae:	4a23      	ldr	r2, [pc, #140]	; (800ba3c <MX_USART2_UART_Init+0x94>)
 800b9b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b9b2:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b9b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b9ba:	4b1f      	ldr	r3, [pc, #124]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b9c0:	4b1d      	ldr	r3, [pc, #116]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b9c6:	4b1c      	ldr	r3, [pc, #112]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9ce:	220c      	movs	r2, #12
 800b9d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b9d2:	4b19      	ldr	r3, [pc, #100]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b9d8:	4b17      	ldr	r3, [pc, #92]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b9de:	4b16      	ldr	r3, [pc, #88]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b9e4:	4b14      	ldr	r3, [pc, #80]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b9ea:	4b13      	ldr	r3, [pc, #76]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b9f0:	4811      	ldr	r0, [pc, #68]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800b9f2:	f00a fc01 	bl	80161f8 <HAL_UART_Init>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800b9fc:	f7ff fa1c 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ba00:	2100      	movs	r1, #0
 800ba02:	480d      	ldr	r0, [pc, #52]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800ba04:	f00c ff9a 	bl	801893c <HAL_UARTEx_SetTxFifoThreshold>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800ba0e:	f7ff fa13 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ba12:	2100      	movs	r1, #0
 800ba14:	4808      	ldr	r0, [pc, #32]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800ba16:	f00c ffcf 	bl	80189b8 <HAL_UARTEx_SetRxFifoThreshold>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800ba20:	f7ff fa0a 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800ba24:	4804      	ldr	r0, [pc, #16]	; (800ba38 <MX_USART2_UART_Init+0x90>)
 800ba26:	f00c ff50 	bl	80188ca <HAL_UARTEx_DisableFifoMode>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800ba30:	f7ff fa02 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ba34:	bf00      	nop
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	24001a24 	.word	0x24001a24
 800ba3c:	40004400 	.word	0x40004400

0800ba40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ba44:	4b26      	ldr	r3, [pc, #152]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba46:	4a27      	ldr	r2, [pc, #156]	; (800bae4 <MX_USART3_UART_Init+0xa4>)
 800ba48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 800ba4a:	4b25      	ldr	r3, [pc, #148]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba4c:	4a26      	ldr	r2, [pc, #152]	; (800bae8 <MX_USART3_UART_Init+0xa8>)
 800ba4e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800ba50:	4b23      	ldr	r3, [pc, #140]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ba58:	4b21      	ldr	r3, [pc, #132]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800ba5e:	4b20      	ldr	r3, [pc, #128]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ba64:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ba66:	4b1e      	ldr	r3, [pc, #120]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba68:	220c      	movs	r2, #12
 800ba6a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ba6c:	4b1c      	ldr	r3, [pc, #112]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ba72:	4b1b      	ldr	r3, [pc, #108]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ba78:	4b19      	ldr	r3, [pc, #100]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ba7e:	4b18      	ldr	r3, [pc, #96]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800ba84:	4b16      	ldr	r3, [pc, #88]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba86:	2220      	movs	r2, #32
 800ba88:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800ba8a:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ba90:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ba92:	4813      	ldr	r0, [pc, #76]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800ba94:	f00a fbb0 	bl	80161f8 <HAL_UART_Init>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 800ba9e:	f7ff f9cb 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800baa2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800baa6:	480e      	ldr	r0, [pc, #56]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800baa8:	f00c ff48 	bl	801893c <HAL_UARTEx_SetTxFifoThreshold>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 800bab2:	f7ff f9c1 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800bab6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800baba:	4809      	ldr	r0, [pc, #36]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800babc:	f00c ff7c 	bl	80189b8 <HAL_UARTEx_SetRxFifoThreshold>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800bac6:	f7ff f9b7 	bl	800ae38 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800baca:	4805      	ldr	r0, [pc, #20]	; (800bae0 <MX_USART3_UART_Init+0xa0>)
 800bacc:	f00c fec2 	bl	8018854 <HAL_UARTEx_EnableFifoMode>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 800bad6:	f7ff f9af 	bl	800ae38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800bada:	bf00      	nop
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	24001ab4 	.word	0x24001ab4
 800bae4:	40004800 	.word	0x40004800
 800bae8:	001312d0 	.word	0x001312d0

0800baec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b0c0      	sub	sp, #256	; 0x100
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baf4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	605a      	str	r2, [r3, #4]
 800bafe:	609a      	str	r2, [r3, #8]
 800bb00:	60da      	str	r2, [r3, #12]
 800bb02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bb04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb08:	22bc      	movs	r2, #188	; 0xbc
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f011 f9a1 	bl	801ce54 <memset>
  if(uartHandle->Instance==UART4)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4ac2      	ldr	r2, [pc, #776]	; (800be20 <HAL_UART_MspInit+0x334>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d14a      	bne.n	800bbb2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bb20:	2300      	movs	r3, #0
 800bb22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f007 f9dc 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800bb36:	f7ff f97f 	bl	800ae38 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800bb3a:	4bba      	ldr	r3, [pc, #744]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bb3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb40:	4ab8      	ldr	r2, [pc, #736]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bb42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bb4a:	4bb6      	ldr	r3, [pc, #728]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bb4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb58:	4bb2      	ldr	r3, [pc, #712]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bb5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb5e:	4ab1      	ldr	r2, [pc, #708]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bb60:	f043 0301 	orr.w	r3, r3, #1
 800bb64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bb68:	4bae      	ldr	r3, [pc, #696]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bb6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bb76:	2303      	movs	r3, #3
 800bb78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800bb8e:	2308      	movs	r3, #8
 800bb90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bb98:	4619      	mov	r1, r3
 800bb9a:	48a3      	ldr	r0, [pc, #652]	; (800be28 <HAL_UART_MspInit+0x33c>)
 800bb9c:	f003 fd54 	bl	800f648 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800bba0:	2200      	movs	r2, #0
 800bba2:	2100      	movs	r1, #0
 800bba4:	2034      	movs	r0, #52	; 0x34
 800bba6:	f000 fcfc 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800bbaa:	2034      	movs	r0, #52	; 0x34
 800bbac:	f000 fd13 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800bbb0:	e130      	b.n	800be14 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a9d      	ldr	r2, [pc, #628]	; (800be2c <HAL_UART_MspInit+0x340>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d143      	bne.n	800bc44 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bbc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f007 f98c 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <HAL_UART_MspInit+0xee>
      Error_Handler();
 800bbd6:	f7ff f92f 	bl	800ae38 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800bbda:	4b92      	ldr	r3, [pc, #584]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bbdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bbe0:	4a90      	ldr	r2, [pc, #576]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bbe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbe6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bbea:	4b8e      	ldr	r3, [pc, #568]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bbec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bbf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbf4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bbf8:	4b8a      	ldr	r3, [pc, #552]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bbfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bbfe:	4a89      	ldr	r2, [pc, #548]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc00:	f043 0310 	orr.w	r3, r3, #16
 800bc04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc08:	4b86      	ldr	r3, [pc, #536]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc0e:	f003 0310 	and.w	r3, r3, #16
 800bc12:	623b      	str	r3, [r7, #32]
 800bc14:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800bc16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800bc1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc1e:	2302      	movs	r3, #2
 800bc20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800bc30:	2307      	movs	r3, #7
 800bc32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bc36:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	487c      	ldr	r0, [pc, #496]	; (800be30 <HAL_UART_MspInit+0x344>)
 800bc3e:	f003 fd03 	bl	800f648 <HAL_GPIO_Init>
}
 800bc42:	e0e7      	b.n	800be14 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a7a      	ldr	r2, [pc, #488]	; (800be34 <HAL_UART_MspInit+0x348>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d14a      	bne.n	800bce4 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800bc4e:	2302      	movs	r3, #2
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bc52:	2300      	movs	r3, #0
 800bc54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bc58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f007 f943 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <HAL_UART_MspInit+0x180>
      Error_Handler();
 800bc68:	f7ff f8e6 	bl	800ae38 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800bc6c:	4b6d      	ldr	r3, [pc, #436]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc72:	4a6c      	ldr	r2, [pc, #432]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bc7c:	4b69      	ldr	r3, [pc, #420]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc86:	61fb      	str	r3, [r7, #28]
 800bc88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bc8a:	4b66      	ldr	r3, [pc, #408]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc90:	4a64      	ldr	r2, [pc, #400]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc92:	f043 0310 	orr.w	r3, r3, #16
 800bc96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc9a:	4b62      	ldr	r3, [pc, #392]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bc9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bca0:	f003 0310 	and.w	r3, r3, #16
 800bca4:	61bb      	str	r3, [r7, #24]
 800bca6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcae:	2302      	movs	r3, #2
 800bcb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800bcc0:	2308      	movs	r3, #8
 800bcc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bcc6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bcca:	4619      	mov	r1, r3
 800bccc:	4858      	ldr	r0, [pc, #352]	; (800be30 <HAL_UART_MspInit+0x344>)
 800bcce:	f003 fcbb 	bl	800f648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	2053      	movs	r0, #83	; 0x53
 800bcd8:	f000 fc63 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800bcdc:	2053      	movs	r0, #83	; 0x53
 800bcde:	f000 fc7a 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
}
 800bce2:	e097      	b.n	800be14 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a53      	ldr	r2, [pc, #332]	; (800be38 <HAL_UART_MspInit+0x34c>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d142      	bne.n	800bd74 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bcf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f007 f8f3 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d001      	beq.n	800bd0c <HAL_UART_MspInit+0x220>
      Error_Handler();
 800bd08:	f7ff f896 	bl	800ae38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800bd0c:	4b45      	ldr	r3, [pc, #276]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bd0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd12:	4a44      	ldr	r2, [pc, #272]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bd14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bd1c:	4b41      	ldr	r3, [pc, #260]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bd1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd26:	617b      	str	r3, [r7, #20]
 800bd28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd2a:	4b3e      	ldr	r3, [pc, #248]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bd2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd30:	4a3c      	ldr	r2, [pc, #240]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd3a:	4b3a      	ldr	r3, [pc, #232]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bd3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	613b      	str	r3, [r7, #16]
 800bd46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bd48:	230c      	movs	r3, #12
 800bd4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd4e:	2302      	movs	r3, #2
 800bd50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bd60:	2307      	movs	r3, #7
 800bd62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	482e      	ldr	r0, [pc, #184]	; (800be28 <HAL_UART_MspInit+0x33c>)
 800bd6e:	f003 fc6b 	bl	800f648 <HAL_GPIO_Init>
}
 800bd72:	e04f      	b.n	800be14 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a30      	ldr	r2, [pc, #192]	; (800be3c <HAL_UART_MspInit+0x350>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d14a      	bne.n	800be14 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800bd7e:	2302      	movs	r3, #2
 800bd80:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bd82:	2300      	movs	r3, #0
 800bd84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bd88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f007 f8ab 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 800bd98:	f7ff f84e 	bl	800ae38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800bd9c:	4b21      	ldr	r3, [pc, #132]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bd9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bda2:	4a20      	ldr	r2, [pc, #128]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bda4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bda8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bdac:	4b1d      	ldr	r3, [pc, #116]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bdae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bdb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bdba:	4b1a      	ldr	r3, [pc, #104]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bdbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdc0:	4a18      	ldr	r2, [pc, #96]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bdc2:	f043 0308 	orr.w	r3, r3, #8
 800bdc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bdca:	4b16      	ldr	r3, [pc, #88]	; (800be24 <HAL_UART_MspInit+0x338>)
 800bdcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdd0:	f003 0308 	and.w	r3, r3, #8
 800bdd4:	60bb      	str	r3, [r7, #8]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bdd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bddc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bde0:	2302      	movs	r3, #2
 800bde2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdec:	2300      	movs	r3, #0
 800bdee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bdf2:	2307      	movs	r3, #7
 800bdf4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bdf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	4810      	ldr	r0, [pc, #64]	; (800be40 <HAL_UART_MspInit+0x354>)
 800be00:	f003 fc22 	bl	800f648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800be04:	2200      	movs	r2, #0
 800be06:	2100      	movs	r1, #0
 800be08:	2027      	movs	r0, #39	; 0x27
 800be0a:	f000 fbca 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800be0e:	2027      	movs	r0, #39	; 0x27
 800be10:	f000 fbe1 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
}
 800be14:	bf00      	nop
 800be16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	40004c00 	.word	0x40004c00
 800be24:	58024400 	.word	0x58024400
 800be28:	58020000 	.word	0x58020000
 800be2c:	40007800 	.word	0x40007800
 800be30:	58021000 	.word	0x58021000
 800be34:	40007c00 	.word	0x40007c00
 800be38:	40004400 	.word	0x40004400
 800be3c:	40004800 	.word	0x40004800
 800be40:	58020c00 	.word	0x58020c00

0800be44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800be44:	f8df d034 	ldr.w	sp, [pc, #52]	; 800be7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800be48:	f7ff fae2 	bl	800b410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800be4c:	480c      	ldr	r0, [pc, #48]	; (800be80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800be4e:	490d      	ldr	r1, [pc, #52]	; (800be84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800be50:	4a0d      	ldr	r2, [pc, #52]	; (800be88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800be52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800be54:	e002      	b.n	800be5c <LoopCopyDataInit>

0800be56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800be56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800be58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800be5a:	3304      	adds	r3, #4

0800be5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800be5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800be5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800be60:	d3f9      	bcc.n	800be56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800be62:	4a0a      	ldr	r2, [pc, #40]	; (800be8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800be64:	4c0a      	ldr	r4, [pc, #40]	; (800be90 <LoopFillZerobss+0x22>)
  movs r3, #0
 800be66:	2300      	movs	r3, #0
  b LoopFillZerobss
 800be68:	e001      	b.n	800be6e <LoopFillZerobss>

0800be6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800be6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800be6c:	3204      	adds	r2, #4

0800be6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800be6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800be70:	d3fb      	bcc.n	800be6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800be72:	f010 ff93 	bl	801cd9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800be76:	f7fe fe53 	bl	800ab20 <main>
  bx  lr
 800be7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800be7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800be80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800be84:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 800be88:	08038d00 	.word	0x08038d00
  ldr r2, =_sbss
 800be8c:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 800be90:	24003768 	.word	0x24003768

0800be94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800be94:	e7fe      	b.n	800be94 <ADC3_IRQHandler>
	...

0800be98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800be9e:	2003      	movs	r0, #3
 800bea0:	f000 fb74 	bl	800c58c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bea4:	f006 fe4a 	bl	8012b3c <HAL_RCC_GetSysClockFreq>
 800bea8:	4602      	mov	r2, r0
 800beaa:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <HAL_Init+0x68>)
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	0a1b      	lsrs	r3, r3, #8
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	4913      	ldr	r1, [pc, #76]	; (800bf04 <HAL_Init+0x6c>)
 800beb6:	5ccb      	ldrb	r3, [r1, r3]
 800beb8:	f003 031f 	and.w	r3, r3, #31
 800bebc:	fa22 f303 	lsr.w	r3, r2, r3
 800bec0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bec2:	4b0f      	ldr	r3, [pc, #60]	; (800bf00 <HAL_Init+0x68>)
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	f003 030f 	and.w	r3, r3, #15
 800beca:	4a0e      	ldr	r2, [pc, #56]	; (800bf04 <HAL_Init+0x6c>)
 800becc:	5cd3      	ldrb	r3, [r2, r3]
 800bece:	f003 031f 	and.w	r3, r3, #31
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	fa22 f303 	lsr.w	r3, r2, r3
 800bed8:	4a0b      	ldr	r2, [pc, #44]	; (800bf08 <HAL_Init+0x70>)
 800beda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bedc:	4a0b      	ldr	r2, [pc, #44]	; (800bf0c <HAL_Init+0x74>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bee2:	200f      	movs	r0, #15
 800bee4:	f000 f814 	bl	800bf10 <HAL_InitTick>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	e002      	b.n	800bef8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bef2:	f7ff f8e3 	bl	800b0bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	58024400 	.word	0x58024400
 800bf04:	08038bd4 	.word	0x08038bd4
 800bf08:	24000004 	.word	0x24000004
 800bf0c:	24000000 	.word	0x24000000

0800bf10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800bf18:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <HAL_InitTick+0x60>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e021      	b.n	800bf68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800bf24:	4b13      	ldr	r3, [pc, #76]	; (800bf74 <HAL_InitTick+0x64>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	4b11      	ldr	r3, [pc, #68]	; (800bf70 <HAL_InitTick+0x60>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf32:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 fb59 	bl	800c5f2 <HAL_SYSTICK_Config>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e00e      	b.n	800bf68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b0f      	cmp	r3, #15
 800bf4e:	d80a      	bhi.n	800bf66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bf50:	2200      	movs	r2, #0
 800bf52:	6879      	ldr	r1, [r7, #4]
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf58:	f000 fb23 	bl	800c5a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bf5c:	4a06      	ldr	r2, [pc, #24]	; (800bf78 <HAL_InitTick+0x68>)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e000      	b.n	800bf68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	2400000c 	.word	0x2400000c
 800bf74:	24000000 	.word	0x24000000
 800bf78:	24000008 	.word	0x24000008

0800bf7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bf80:	4b06      	ldr	r3, [pc, #24]	; (800bf9c <HAL_IncTick+0x20>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	461a      	mov	r2, r3
 800bf86:	4b06      	ldr	r3, [pc, #24]	; (800bfa0 <HAL_IncTick+0x24>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	4a04      	ldr	r2, [pc, #16]	; (800bfa0 <HAL_IncTick+0x24>)
 800bf8e:	6013      	str	r3, [r2, #0]
}
 800bf90:	bf00      	nop
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	2400000c 	.word	0x2400000c
 800bfa0:	24001b44 	.word	0x24001b44

0800bfa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
  return uwTick;
 800bfa8:	4b03      	ldr	r3, [pc, #12]	; (800bfb8 <HAL_GetTick+0x14>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	24001b44 	.word	0x24001b44

0800bfbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bfc4:	f7ff ffee 	bl	800bfa4 <HAL_GetTick>
 800bfc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfd4:	d005      	beq.n	800bfe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <HAL_Delay+0x44>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bfe2:	bf00      	nop
 800bfe4:	f7ff ffde 	bl	800bfa4 <HAL_GetTick>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d8f7      	bhi.n	800bfe4 <HAL_Delay+0x28>
  {
  }
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	2400000c 	.word	0x2400000c

0800c004 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800c004:	b480      	push	{r7}
 800c006:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800c008:	4b03      	ldr	r3, [pc, #12]	; (800c018 <HAL_GetREVID+0x14>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	0c1b      	lsrs	r3, r3, #16
}
 800c00e:	4618      	mov	r0, r3
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	5c001000 	.word	0x5c001000

0800c01c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800c024:	2300      	movs	r3, #0
 800c026:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	77fb      	strb	r3, [r7, #31]
 800c036:	e10e      	b.n	800c256 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c046:	d102      	bne.n	800c04e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	77fb      	strb	r3, [r7, #31]
 800c04c:	e103      	b.n	800c256 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d109      	bne.n	800c06e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7fe fadf 	bl	800a62c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800c082:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800c088:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800c08e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800c094:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800c09a:	4313      	orrs	r3, r2
 800c09c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	4b6e      	ldr	r3, [pc, #440]	; (800c260 <HAL_COMP_Init+0x244>)
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	6812      	ldr	r2, [r2, #0]
 800c0ac:	6979      	ldr	r1, [r7, #20]
 800c0ae:	430b      	orrs	r3, r1
 800c0b0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	2b10      	cmp	r3, #16
 800c0b8:	d108      	bne.n	800c0cc <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f042 0210 	orr.w	r2, r2, #16
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	e007      	b.n	800c0dc <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f022 0210 	bic.w	r2, r2, #16
 800c0da:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0304 	and.w	r3, r3, #4
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d016      	beq.n	800c118 <HAL_COMP_Init+0xfc>
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d013      	beq.n	800c118 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c0f0:	4b5c      	ldr	r3, [pc, #368]	; (800c264 <HAL_COMP_Init+0x248>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	099b      	lsrs	r3, r3, #6
 800c0f6:	4a5c      	ldr	r2, [pc, #368]	; (800c268 <HAL_COMP_Init+0x24c>)
 800c0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fc:	099b      	lsrs	r3, r3, #6
 800c0fe:	1c5a      	adds	r2, r3, #1
 800c100:	4613      	mov	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800c10a:	e002      	b.n	800c112 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3b01      	subs	r3, #1
 800c110:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1f9      	bne.n	800c10c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a53      	ldr	r2, [pc, #332]	; (800c26c <HAL_COMP_Init+0x250>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d102      	bne.n	800c128 <HAL_COMP_Init+0x10c>
 800c122:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c126:	e001      	b.n	800c12c <HAL_COMP_Init+0x110>
 800c128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c12c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	f003 0303 	and.w	r3, r3, #3
 800c136:	2b00      	cmp	r3, #0
 800c138:	d06d      	beq.n	800c216 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	f003 0310 	and.w	r3, r3, #16
 800c142:	2b00      	cmp	r3, #0
 800c144:	d008      	beq.n	800c158 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800c146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	4313      	orrs	r3, r2
 800c154:	600b      	str	r3, [r1, #0]
 800c156:	e008      	b.n	800c16a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800c158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	43db      	mvns	r3, r3
 800c162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c166:	4013      	ands	r3, r2
 800c168:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	f003 0320 	and.w	r3, r3, #32
 800c172:	2b00      	cmp	r3, #0
 800c174:	d008      	beq.n	800c188 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800c176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	4313      	orrs	r3, r2
 800c184:	604b      	str	r3, [r1, #4]
 800c186:	e008      	b.n	800c19a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800c188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	43db      	mvns	r3, r3
 800c192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c196:	4013      	ands	r3, r2
 800c198:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800c19a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	f003 0302 	and.w	r3, r3, #2
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00a      	beq.n	800c1c6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800c1b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1b4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c1b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c1c4:	e00a      	b.n	800c1dc <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800c1c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6a1b      	ldr	r3, [r3, #32]
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00a      	beq.n	800c1fe <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800c1e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c1f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800c1fc:	e021      	b.n	800c242 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800c1fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c202:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	43db      	mvns	r3, r3
 800c20a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c20e:	4013      	ands	r3, r2
 800c210:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800c214:	e015      	b.n	800c242 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800c216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c21a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	43db      	mvns	r3, r3
 800c222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c226:	4013      	ands	r3, r2
 800c228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800c22c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c230:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	43db      	mvns	r3, r3
 800c238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c23c:	4013      	ands	r3, r2
 800c23e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d103      	bne.n	800c256 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 800c256:	7ffb      	ldrb	r3, [r7, #31]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3720      	adds	r7, #32
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	f0e8cce1 	.word	0xf0e8cce1
 800c264:	24000000 	.word	0x24000000
 800c268:	053e2d63 	.word	0x053e2d63
 800c26c:	5800380c 	.word	0x5800380c

0800c270 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800c278:	2300      	movs	r3, #0
 800c27a:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d102      	bne.n	800c28c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	73fb      	strb	r3, [r7, #15]
 800c28a:	e030      	b.n	800c2ee <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c29a:	d102      	bne.n	800c2a2 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	73fb      	strb	r3, [r7, #15]
 800c2a0:	e025      	b.n	800c2ee <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d11d      	bne.n	800c2ea <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0201 	orr.w	r2, r2, #1
 800c2bc:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c2c6:	4b0d      	ldr	r3, [pc, #52]	; (800c2fc <HAL_COMP_Start+0x8c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	099b      	lsrs	r3, r3, #6
 800c2cc:	4a0c      	ldr	r2, [pc, #48]	; (800c300 <HAL_COMP_Start+0x90>)
 800c2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d2:	099b      	lsrs	r3, r3, #6
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800c2da:	e002      	b.n	800c2e2 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1f9      	bne.n	800c2dc <HAL_COMP_Start+0x6c>
 800c2e8:	e001      	b.n	800c2ee <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	24000000 	.word	0x24000000
 800c300:	053e2d63 	.word	0x053e2d63

0800c304 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a33      	ldr	r2, [pc, #204]	; (800c3e0 <HAL_COMP_IRQHandler+0xdc>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d102      	bne.n	800c31c <HAL_COMP_IRQHandler+0x18>
 800c316:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c31a:	e001      	b.n	800c320 <HAL_COMP_IRQHandler+0x1c>
 800c31c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c320:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800c322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c326:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4013      	ands	r3, r2
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d014      	beq.n	800c35c <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800c332:	4b2c      	ldr	r3, [pc, #176]	; (800c3e4 <HAL_COMP_IRQHandler+0xe0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0310 	and.w	r3, r3, #16
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d006      	beq.n	800c34c <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800c33e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c342:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800c346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c34a:	e004      	b.n	800c356 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 800c34c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7fe fd06 	bl	800ad68 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c366:	2b40      	cmp	r3, #64	; 0x40
 800c368:	d136      	bne.n	800c3d8 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800c36a:	4b1f      	ldr	r3, [pc, #124]	; (800c3e8 <HAL_COMP_IRQHandler+0xe4>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c376:	d101      	bne.n	800c37c <HAL_COMP_IRQHandler+0x78>
 800c378:	2301      	movs	r3, #1
 800c37a:	e000      	b.n	800c37e <HAL_COMP_IRQHandler+0x7a>
 800c37c:	2300      	movs	r3, #0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00b      	beq.n	800c39a <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800c382:	4b19      	ldr	r3, [pc, #100]	; (800c3e8 <HAL_COMP_IRQHandler+0xe4>)
 800c384:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c388:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c398:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 800c39a:	4b13      	ldr	r3, [pc, #76]	; (800c3e8 <HAL_COMP_IRQHandler+0xe4>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3a6:	d101      	bne.n	800c3ac <HAL_COMP_IRQHandler+0xa8>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e000      	b.n	800c3ae <HAL_COMP_IRQHandler+0xaa>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00b      	beq.n	800c3ca <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800c3b2:	4b0d      	ldr	r3, [pc, #52]	; (800c3e8 <HAL_COMP_IRQHandler+0xe4>)
 800c3b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c3b8:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3c8:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7fe fcc8 	bl	800ad68 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 800c3d8:	bf00      	nop
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	5800380c 	.word	0x5800380c
 800c3e4:	58003810 	.word	0x58003810
 800c3e8:	58003800 	.word	0x58003800

0800c3ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c3fc:	4b0b      	ldr	r3, [pc, #44]	; (800c42c <__NVIC_SetPriorityGrouping+0x40>)
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c408:	4013      	ands	r3, r2
 800c40a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c414:	4b06      	ldr	r3, [pc, #24]	; (800c430 <__NVIC_SetPriorityGrouping+0x44>)
 800c416:	4313      	orrs	r3, r2
 800c418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c41a:	4a04      	ldr	r2, [pc, #16]	; (800c42c <__NVIC_SetPriorityGrouping+0x40>)
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	60d3      	str	r3, [r2, #12]
}
 800c420:	bf00      	nop
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	e000ed00 	.word	0xe000ed00
 800c430:	05fa0000 	.word	0x05fa0000

0800c434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c434:	b480      	push	{r7}
 800c436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c438:	4b04      	ldr	r3, [pc, #16]	; (800c44c <__NVIC_GetPriorityGrouping+0x18>)
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	0a1b      	lsrs	r3, r3, #8
 800c43e:	f003 0307 	and.w	r3, r3, #7
}
 800c442:	4618      	mov	r0, r3
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	e000ed00 	.word	0xe000ed00

0800c450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c45a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	db0b      	blt.n	800c47a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c462:	88fb      	ldrh	r3, [r7, #6]
 800c464:	f003 021f 	and.w	r2, r3, #31
 800c468:	4907      	ldr	r1, [pc, #28]	; (800c488 <__NVIC_EnableIRQ+0x38>)
 800c46a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c46e:	095b      	lsrs	r3, r3, #5
 800c470:	2001      	movs	r0, #1
 800c472:	fa00 f202 	lsl.w	r2, r0, r2
 800c476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c47a:	bf00      	nop
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	e000e100 	.word	0xe000e100

0800c48c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	6039      	str	r1, [r7, #0]
 800c496:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	db0a      	blt.n	800c4b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	490c      	ldr	r1, [pc, #48]	; (800c4d8 <__NVIC_SetPriority+0x4c>)
 800c4a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4aa:	0112      	lsls	r2, r2, #4
 800c4ac:	b2d2      	uxtb	r2, r2
 800c4ae:	440b      	add	r3, r1
 800c4b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c4b4:	e00a      	b.n	800c4cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	4908      	ldr	r1, [pc, #32]	; (800c4dc <__NVIC_SetPriority+0x50>)
 800c4bc:	88fb      	ldrh	r3, [r7, #6]
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	3b04      	subs	r3, #4
 800c4c4:	0112      	lsls	r2, r2, #4
 800c4c6:	b2d2      	uxtb	r2, r2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	761a      	strb	r2, [r3, #24]
}
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	e000e100 	.word	0xe000e100
 800c4dc:	e000ed00 	.word	0xe000ed00

0800c4e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b089      	sub	sp, #36	; 0x24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	f1c3 0307 	rsb	r3, r3, #7
 800c4fa:	2b04      	cmp	r3, #4
 800c4fc:	bf28      	it	cs
 800c4fe:	2304      	movcs	r3, #4
 800c500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	3304      	adds	r3, #4
 800c506:	2b06      	cmp	r3, #6
 800c508:	d902      	bls.n	800c510 <NVIC_EncodePriority+0x30>
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	3b03      	subs	r3, #3
 800c50e:	e000      	b.n	800c512 <NVIC_EncodePriority+0x32>
 800c510:	2300      	movs	r3, #0
 800c512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	fa02 f303 	lsl.w	r3, r2, r3
 800c51e:	43da      	mvns	r2, r3
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	401a      	ands	r2, r3
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	fa01 f303 	lsl.w	r3, r1, r3
 800c532:	43d9      	mvns	r1, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c538:	4313      	orrs	r3, r2
         );
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3724      	adds	r7, #36	; 0x24
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
	...

0800c548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3b01      	subs	r3, #1
 800c554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c558:	d301      	bcc.n	800c55e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c55a:	2301      	movs	r3, #1
 800c55c:	e00f      	b.n	800c57e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c55e:	4a0a      	ldr	r2, [pc, #40]	; (800c588 <SysTick_Config+0x40>)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3b01      	subs	r3, #1
 800c564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c566:	210f      	movs	r1, #15
 800c568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c56c:	f7ff ff8e 	bl	800c48c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c570:	4b05      	ldr	r3, [pc, #20]	; (800c588 <SysTick_Config+0x40>)
 800c572:	2200      	movs	r2, #0
 800c574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c576:	4b04      	ldr	r3, [pc, #16]	; (800c588 <SysTick_Config+0x40>)
 800c578:	2207      	movs	r2, #7
 800c57a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	e000e010 	.word	0xe000e010

0800c58c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ff29 	bl	800c3ec <__NVIC_SetPriorityGrouping>
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b086      	sub	sp, #24
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	60b9      	str	r1, [r7, #8]
 800c5ac:	607a      	str	r2, [r7, #4]
 800c5ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c5b0:	f7ff ff40 	bl	800c434 <__NVIC_GetPriorityGrouping>
 800c5b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	68b9      	ldr	r1, [r7, #8]
 800c5ba:	6978      	ldr	r0, [r7, #20]
 800c5bc:	f7ff ff90 	bl	800c4e0 <NVIC_EncodePriority>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ff5f 	bl	800c48c <__NVIC_SetPriority>
}
 800c5ce:	bf00      	nop
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	4603      	mov	r3, r0
 800c5de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c5e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff ff33 	bl	800c450 <__NVIC_EnableIRQ>
}
 800c5ea:	bf00      	nop
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff ffa4 	bl	800c548 <SysTick_Config>
 800c600:	4603      	mov	r3, r0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b082      	sub	sp, #8
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d101      	bne.n	800c61c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800c618:	2301      	movs	r3, #1
 800c61a:	e014      	b.n	800c646 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	791b      	ldrb	r3, [r3, #4]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d105      	bne.n	800c632 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7fe f87d 	bl	800a72c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2202      	movs	r2, #2
 800c636:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	795b      	ldrb	r3, [r3, #5]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d101      	bne.n	800c664 <HAL_DAC_Start+0x16>
 800c660:	2302      	movs	r3, #2
 800c662:	e040      	b.n	800c6e6 <HAL_DAC_Start+0x98>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6819      	ldr	r1, [r3, #0]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	f003 0310 	and.w	r3, r3, #16
 800c67c:	2201      	movs	r2, #1
 800c67e:	409a      	lsls	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	430a      	orrs	r2, r1
 800c686:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10f      	bne.n	800c6ae <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d11d      	bne.n	800c6d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f042 0201 	orr.w	r2, r2, #1
 800c6aa:	605a      	str	r2, [r3, #4]
 800c6ac:	e014      	b.n	800c6d8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f003 0310 	and.w	r3, r3, #16
 800c6be:	2102      	movs	r1, #2
 800c6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d107      	bne.n	800c6d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f042 0202 	orr.w	r2, r2, #2
 800c6d6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b087      	sub	sp, #28
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	60f8      	str	r0, [r7, #12]
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	607a      	str	r2, [r7, #4]
 800c6fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800c700:	2300      	movs	r3, #0
 800c702:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d105      	bne.n	800c71c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4413      	add	r3, r2
 800c716:	3308      	adds	r3, #8
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	e004      	b.n	800c726 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4413      	add	r3, r2
 800c722:	3314      	adds	r3, #20
 800c724:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	461a      	mov	r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	371c      	adds	r7, #28
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	795b      	ldrb	r3, [r3, #5]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d101      	bne.n	800c754 <HAL_DAC_ConfigChannel+0x18>
 800c750:	2302      	movs	r3, #2
 800c752:	e11d      	b.n	800c990 <HAL_DAC_ConfigChannel+0x254>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2201      	movs	r2, #1
 800c758:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2202      	movs	r2, #2
 800c75e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b04      	cmp	r3, #4
 800c766:	d174      	bne.n	800c852 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800c768:	f7ff fc1c 	bl	800bfa4 <HAL_GetTick>
 800c76c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d134      	bne.n	800c7de <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c774:	e011      	b.n	800c79a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c776:	f7ff fc15 	bl	800bfa4 <HAL_GetTick>
 800c77a:	4602      	mov	r2, r0
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	2b01      	cmp	r3, #1
 800c782:	d90a      	bls.n	800c79a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	f043 0208 	orr.w	r2, r3, #8
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2203      	movs	r2, #3
 800c794:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e0fa      	b.n	800c990 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7a0:	4b7d      	ldr	r3, [pc, #500]	; (800c998 <HAL_DAC_ConfigChannel+0x25c>)
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1e6      	bne.n	800c776 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800c7a8:	2001      	movs	r0, #1
 800c7aa:	f7ff fc07 	bl	800bfbc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	6992      	ldr	r2, [r2, #24]
 800c7b6:	641a      	str	r2, [r3, #64]	; 0x40
 800c7b8:	e01e      	b.n	800c7f8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c7ba:	f7ff fbf3 	bl	800bfa4 <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d90a      	bls.n	800c7de <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	f043 0208 	orr.w	r2, r3, #8
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e0d8      	b.n	800c990 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dbe8      	blt.n	800c7ba <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	f7ff fbe7 	bl	800bfbc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	6992      	ldr	r2, [r2, #24]
 800c7f6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f003 0310 	and.w	r3, r3, #16
 800c804:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c808:	fa01 f303 	lsl.w	r3, r1, r3
 800c80c:	43db      	mvns	r3, r3
 800c80e:	ea02 0103 	and.w	r1, r2, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	69da      	ldr	r2, [r3, #28]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f003 0310 	and.w	r3, r3, #16
 800c81c:	409a      	lsls	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	430a      	orrs	r2, r1
 800c824:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f003 0310 	and.w	r3, r3, #16
 800c832:	21ff      	movs	r1, #255	; 0xff
 800c834:	fa01 f303 	lsl.w	r3, r1, r3
 800c838:	43db      	mvns	r3, r3
 800c83a:	ea02 0103 	and.w	r1, r2, r3
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	6a1a      	ldr	r2, [r3, #32]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f003 0310 	and.w	r3, r3, #16
 800c848:	409a      	lsls	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	430a      	orrs	r2, r1
 800c850:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d11d      	bne.n	800c896 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c860:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f003 0310 	and.w	r3, r3, #16
 800c868:	221f      	movs	r2, #31
 800c86a:	fa02 f303 	lsl.w	r3, r2, r3
 800c86e:	43db      	mvns	r3, r3
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	4013      	ands	r3, r2
 800c874:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f003 0310 	and.w	r3, r3, #16
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	fa02 f303 	lsl.w	r3, r2, r3
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f003 0310 	and.w	r3, r3, #16
 800c8a4:	2207      	movs	r2, #7
 800c8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8aa:	43db      	mvns	r3, r3
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d102      	bne.n	800c8c0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	61fb      	str	r3, [r7, #28]
 800c8be:	e00f      	b.n	800c8e0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d102      	bne.n	800c8ce <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	61fb      	str	r3, [r7, #28]
 800c8cc:	e008      	b.n	800c8e0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	61fb      	str	r3, [r7, #28]
 800c8da:	e001      	b.n	800c8e0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	69fa      	ldr	r2, [r7, #28]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f003 0310 	and.w	r3, r3, #16
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6819      	ldr	r1, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f003 0310 	and.w	r3, r3, #16
 800c916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c91a:	fa02 f303 	lsl.w	r3, r2, r3
 800c91e:	43da      	mvns	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	400a      	ands	r2, r1
 800c926:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f003 0310 	and.w	r3, r3, #16
 800c936:	f640 72fe 	movw	r2, #4094	; 0xffe
 800c93a:	fa02 f303 	lsl.w	r3, r2, r3
 800c93e:	43db      	mvns	r3, r3
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	4013      	ands	r3, r2
 800c944:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f003 0310 	and.w	r3, r3, #16
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	fa02 f303 	lsl.w	r3, r2, r3
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6819      	ldr	r1, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f003 0310 	and.w	r3, r3, #16
 800c972:	22c0      	movs	r2, #192	; 0xc0
 800c974:	fa02 f303 	lsl.w	r3, r2, r3
 800c978:	43da      	mvns	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	400a      	ands	r2, r1
 800c980:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2201      	movs	r2, #1
 800c986:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20008000 	.word	0x20008000

0800c99c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800c9a4:	f7ff fafe 	bl	800bfa4 <HAL_GetTick>
 800c9a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e316      	b.n	800cfe2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a66      	ldr	r2, [pc, #408]	; (800cb54 <HAL_DMA_Init+0x1b8>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d04a      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a65      	ldr	r2, [pc, #404]	; (800cb58 <HAL_DMA_Init+0x1bc>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d045      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a63      	ldr	r2, [pc, #396]	; (800cb5c <HAL_DMA_Init+0x1c0>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d040      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a62      	ldr	r2, [pc, #392]	; (800cb60 <HAL_DMA_Init+0x1c4>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d03b      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a60      	ldr	r2, [pc, #384]	; (800cb64 <HAL_DMA_Init+0x1c8>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d036      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a5f      	ldr	r2, [pc, #380]	; (800cb68 <HAL_DMA_Init+0x1cc>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d031      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a5d      	ldr	r2, [pc, #372]	; (800cb6c <HAL_DMA_Init+0x1d0>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d02c      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a5c      	ldr	r2, [pc, #368]	; (800cb70 <HAL_DMA_Init+0x1d4>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d027      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a5a      	ldr	r2, [pc, #360]	; (800cb74 <HAL_DMA_Init+0x1d8>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d022      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a59      	ldr	r2, [pc, #356]	; (800cb78 <HAL_DMA_Init+0x1dc>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d01d      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a57      	ldr	r2, [pc, #348]	; (800cb7c <HAL_DMA_Init+0x1e0>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d018      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a56      	ldr	r2, [pc, #344]	; (800cb80 <HAL_DMA_Init+0x1e4>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d013      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a54      	ldr	r2, [pc, #336]	; (800cb84 <HAL_DMA_Init+0x1e8>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d00e      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a53      	ldr	r2, [pc, #332]	; (800cb88 <HAL_DMA_Init+0x1ec>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d009      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a51      	ldr	r2, [pc, #324]	; (800cb8c <HAL_DMA_Init+0x1f0>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d004      	beq.n	800ca54 <HAL_DMA_Init+0xb8>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a50      	ldr	r2, [pc, #320]	; (800cb90 <HAL_DMA_Init+0x1f4>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d101      	bne.n	800ca58 <HAL_DMA_Init+0xbc>
 800ca54:	2301      	movs	r3, #1
 800ca56:	e000      	b.n	800ca5a <HAL_DMA_Init+0xbe>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f000 813b 	beq.w	800ccd6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2202      	movs	r2, #2
 800ca64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a37      	ldr	r2, [pc, #220]	; (800cb54 <HAL_DMA_Init+0x1b8>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d04a      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a36      	ldr	r2, [pc, #216]	; (800cb58 <HAL_DMA_Init+0x1bc>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d045      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a34      	ldr	r2, [pc, #208]	; (800cb5c <HAL_DMA_Init+0x1c0>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d040      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a33      	ldr	r2, [pc, #204]	; (800cb60 <HAL_DMA_Init+0x1c4>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d03b      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a31      	ldr	r2, [pc, #196]	; (800cb64 <HAL_DMA_Init+0x1c8>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d036      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a30      	ldr	r2, [pc, #192]	; (800cb68 <HAL_DMA_Init+0x1cc>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d031      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a2e      	ldr	r2, [pc, #184]	; (800cb6c <HAL_DMA_Init+0x1d0>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d02c      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a2d      	ldr	r2, [pc, #180]	; (800cb70 <HAL_DMA_Init+0x1d4>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d027      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a2b      	ldr	r2, [pc, #172]	; (800cb74 <HAL_DMA_Init+0x1d8>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d022      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a2a      	ldr	r2, [pc, #168]	; (800cb78 <HAL_DMA_Init+0x1dc>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d01d      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a28      	ldr	r2, [pc, #160]	; (800cb7c <HAL_DMA_Init+0x1e0>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d018      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a27      	ldr	r2, [pc, #156]	; (800cb80 <HAL_DMA_Init+0x1e4>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d013      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a25      	ldr	r2, [pc, #148]	; (800cb84 <HAL_DMA_Init+0x1e8>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d00e      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a24      	ldr	r2, [pc, #144]	; (800cb88 <HAL_DMA_Init+0x1ec>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d009      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a22      	ldr	r2, [pc, #136]	; (800cb8c <HAL_DMA_Init+0x1f0>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d004      	beq.n	800cb10 <HAL_DMA_Init+0x174>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a21      	ldr	r2, [pc, #132]	; (800cb90 <HAL_DMA_Init+0x1f4>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d108      	bne.n	800cb22 <HAL_DMA_Init+0x186>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 0201 	bic.w	r2, r2, #1
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	e007      	b.n	800cb32 <HAL_DMA_Init+0x196>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f022 0201 	bic.w	r2, r2, #1
 800cb30:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800cb32:	e02f      	b.n	800cb94 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cb34:	f7ff fa36 	bl	800bfa4 <HAL_GetTick>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	2b05      	cmp	r3, #5
 800cb40:	d928      	bls.n	800cb94 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2220      	movs	r2, #32
 800cb46:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2203      	movs	r2, #3
 800cb4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e246      	b.n	800cfe2 <HAL_DMA_Init+0x646>
 800cb54:	40020010 	.word	0x40020010
 800cb58:	40020028 	.word	0x40020028
 800cb5c:	40020040 	.word	0x40020040
 800cb60:	40020058 	.word	0x40020058
 800cb64:	40020070 	.word	0x40020070
 800cb68:	40020088 	.word	0x40020088
 800cb6c:	400200a0 	.word	0x400200a0
 800cb70:	400200b8 	.word	0x400200b8
 800cb74:	40020410 	.word	0x40020410
 800cb78:	40020428 	.word	0x40020428
 800cb7c:	40020440 	.word	0x40020440
 800cb80:	40020458 	.word	0x40020458
 800cb84:	40020470 	.word	0x40020470
 800cb88:	40020488 	.word	0x40020488
 800cb8c:	400204a0 	.word	0x400204a0
 800cb90:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0301 	and.w	r3, r3, #1
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1c8      	bne.n	800cb34 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	4b83      	ldr	r3, [pc, #524]	; (800cdbc <HAL_DMA_Init+0x420>)
 800cbae:	4013      	ands	r3, r2
 800cbb0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800cbba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbc6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	699b      	ldr	r3, [r3, #24]
 800cbcc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbd2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	d107      	bne.n	800cbf8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800cbf8:	4b71      	ldr	r3, [pc, #452]	; (800cdc0 <HAL_DMA_Init+0x424>)
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	4b71      	ldr	r3, [pc, #452]	; (800cdc4 <HAL_DMA_Init+0x428>)
 800cbfe:	4013      	ands	r3, r2
 800cc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc04:	d328      	bcc.n	800cc58 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	2b28      	cmp	r3, #40	; 0x28
 800cc0c:	d903      	bls.n	800cc16 <HAL_DMA_Init+0x27a>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	2b2e      	cmp	r3, #46	; 0x2e
 800cc14:	d917      	bls.n	800cc46 <HAL_DMA_Init+0x2aa>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	2b3e      	cmp	r3, #62	; 0x3e
 800cc1c:	d903      	bls.n	800cc26 <HAL_DMA_Init+0x28a>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	2b42      	cmp	r3, #66	; 0x42
 800cc24:	d90f      	bls.n	800cc46 <HAL_DMA_Init+0x2aa>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	2b46      	cmp	r3, #70	; 0x46
 800cc2c:	d903      	bls.n	800cc36 <HAL_DMA_Init+0x29a>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	2b48      	cmp	r3, #72	; 0x48
 800cc34:	d907      	bls.n	800cc46 <HAL_DMA_Init+0x2aa>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	2b4e      	cmp	r3, #78	; 0x4e
 800cc3c:	d905      	bls.n	800cc4a <HAL_DMA_Init+0x2ae>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	2b52      	cmp	r3, #82	; 0x52
 800cc44:	d801      	bhi.n	800cc4a <HAL_DMA_Init+0x2ae>
 800cc46:	2301      	movs	r3, #1
 800cc48:	e000      	b.n	800cc4c <HAL_DMA_Init+0x2b0>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d003      	beq.n	800cc58 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc56:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	f023 0307 	bic.w	r3, r3, #7
 800cc6e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7e:	2b04      	cmp	r3, #4
 800cc80:	d117      	bne.n	800ccb2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00e      	beq.n	800ccb2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f002 fb4d 	bl	800f334 <DMA_CheckFifoParam>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d008      	beq.n	800ccb2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2240      	movs	r2, #64	; 0x40
 800cca4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e197      	b.n	800cfe2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f002 fa88 	bl	800f1d0 <DMA_CalcBaseAndBitshift>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccc8:	f003 031f 	and.w	r3, r3, #31
 800cccc:	223f      	movs	r2, #63	; 0x3f
 800ccce:	409a      	lsls	r2, r3
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	609a      	str	r2, [r3, #8]
 800ccd4:	e0cd      	b.n	800ce72 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a3b      	ldr	r2, [pc, #236]	; (800cdc8 <HAL_DMA_Init+0x42c>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d022      	beq.n	800cd26 <HAL_DMA_Init+0x38a>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a39      	ldr	r2, [pc, #228]	; (800cdcc <HAL_DMA_Init+0x430>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d01d      	beq.n	800cd26 <HAL_DMA_Init+0x38a>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a38      	ldr	r2, [pc, #224]	; (800cdd0 <HAL_DMA_Init+0x434>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d018      	beq.n	800cd26 <HAL_DMA_Init+0x38a>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a36      	ldr	r2, [pc, #216]	; (800cdd4 <HAL_DMA_Init+0x438>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d013      	beq.n	800cd26 <HAL_DMA_Init+0x38a>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a35      	ldr	r2, [pc, #212]	; (800cdd8 <HAL_DMA_Init+0x43c>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d00e      	beq.n	800cd26 <HAL_DMA_Init+0x38a>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a33      	ldr	r2, [pc, #204]	; (800cddc <HAL_DMA_Init+0x440>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d009      	beq.n	800cd26 <HAL_DMA_Init+0x38a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a32      	ldr	r2, [pc, #200]	; (800cde0 <HAL_DMA_Init+0x444>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d004      	beq.n	800cd26 <HAL_DMA_Init+0x38a>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a30      	ldr	r2, [pc, #192]	; (800cde4 <HAL_DMA_Init+0x448>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d101      	bne.n	800cd2a <HAL_DMA_Init+0x38e>
 800cd26:	2301      	movs	r3, #1
 800cd28:	e000      	b.n	800cd2c <HAL_DMA_Init+0x390>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 8097 	beq.w	800ce60 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a24      	ldr	r2, [pc, #144]	; (800cdc8 <HAL_DMA_Init+0x42c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d021      	beq.n	800cd80 <HAL_DMA_Init+0x3e4>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a22      	ldr	r2, [pc, #136]	; (800cdcc <HAL_DMA_Init+0x430>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d01c      	beq.n	800cd80 <HAL_DMA_Init+0x3e4>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a21      	ldr	r2, [pc, #132]	; (800cdd0 <HAL_DMA_Init+0x434>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d017      	beq.n	800cd80 <HAL_DMA_Init+0x3e4>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a1f      	ldr	r2, [pc, #124]	; (800cdd4 <HAL_DMA_Init+0x438>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d012      	beq.n	800cd80 <HAL_DMA_Init+0x3e4>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a1e      	ldr	r2, [pc, #120]	; (800cdd8 <HAL_DMA_Init+0x43c>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d00d      	beq.n	800cd80 <HAL_DMA_Init+0x3e4>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a1c      	ldr	r2, [pc, #112]	; (800cddc <HAL_DMA_Init+0x440>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d008      	beq.n	800cd80 <HAL_DMA_Init+0x3e4>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a1b      	ldr	r2, [pc, #108]	; (800cde0 <HAL_DMA_Init+0x444>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d003      	beq.n	800cd80 <HAL_DMA_Init+0x3e4>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a19      	ldr	r2, [pc, #100]	; (800cde4 <HAL_DMA_Init+0x448>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2202      	movs	r2, #2
 800cd86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800cd9a:	697a      	ldr	r2, [r7, #20]
 800cd9c:	4b12      	ldr	r3, [pc, #72]	; (800cde8 <HAL_DMA_Init+0x44c>)
 800cd9e:	4013      	ands	r3, r2
 800cda0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	2b40      	cmp	r3, #64	; 0x40
 800cda8:	d020      	beq.n	800cdec <HAL_DMA_Init+0x450>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	2b80      	cmp	r3, #128	; 0x80
 800cdb0:	d102      	bne.n	800cdb8 <HAL_DMA_Init+0x41c>
 800cdb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cdb6:	e01a      	b.n	800cdee <HAL_DMA_Init+0x452>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	e018      	b.n	800cdee <HAL_DMA_Init+0x452>
 800cdbc:	fe10803f 	.word	0xfe10803f
 800cdc0:	5c001000 	.word	0x5c001000
 800cdc4:	ffff0000 	.word	0xffff0000
 800cdc8:	58025408 	.word	0x58025408
 800cdcc:	5802541c 	.word	0x5802541c
 800cdd0:	58025430 	.word	0x58025430
 800cdd4:	58025444 	.word	0x58025444
 800cdd8:	58025458 	.word	0x58025458
 800cddc:	5802546c 	.word	0x5802546c
 800cde0:	58025480 	.word	0x58025480
 800cde4:	58025494 	.word	0x58025494
 800cde8:	fffe000f 	.word	0xfffe000f
 800cdec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	68d2      	ldr	r2, [r2, #12]
 800cdf2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cdf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800cdfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ce04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ce0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ce14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ce1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	461a      	mov	r2, r3
 800ce32:	4b6e      	ldr	r3, [pc, #440]	; (800cfec <HAL_DMA_Init+0x650>)
 800ce34:	4413      	add	r3, r2
 800ce36:	4a6e      	ldr	r2, [pc, #440]	; (800cff0 <HAL_DMA_Init+0x654>)
 800ce38:	fba2 2303 	umull	r2, r3, r2, r3
 800ce3c:	091b      	lsrs	r3, r3, #4
 800ce3e:	009a      	lsls	r2, r3, #2
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f002 f9c3 	bl	800f1d0 <DMA_CalcBaseAndBitshift>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce52:	f003 031f 	and.w	r3, r3, #31
 800ce56:	2201      	movs	r2, #1
 800ce58:	409a      	lsls	r2, r3
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	e008      	b.n	800ce72 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2240      	movs	r2, #64	; 0x40
 800ce64:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2203      	movs	r2, #3
 800ce6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e0b7      	b.n	800cfe2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a5f      	ldr	r2, [pc, #380]	; (800cff4 <HAL_DMA_Init+0x658>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d072      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a5d      	ldr	r2, [pc, #372]	; (800cff8 <HAL_DMA_Init+0x65c>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d06d      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a5c      	ldr	r2, [pc, #368]	; (800cffc <HAL_DMA_Init+0x660>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d068      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a5a      	ldr	r2, [pc, #360]	; (800d000 <HAL_DMA_Init+0x664>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d063      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a59      	ldr	r2, [pc, #356]	; (800d004 <HAL_DMA_Init+0x668>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d05e      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a57      	ldr	r2, [pc, #348]	; (800d008 <HAL_DMA_Init+0x66c>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d059      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a56      	ldr	r2, [pc, #344]	; (800d00c <HAL_DMA_Init+0x670>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d054      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a54      	ldr	r2, [pc, #336]	; (800d010 <HAL_DMA_Init+0x674>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d04f      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a53      	ldr	r2, [pc, #332]	; (800d014 <HAL_DMA_Init+0x678>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d04a      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a51      	ldr	r2, [pc, #324]	; (800d018 <HAL_DMA_Init+0x67c>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d045      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a50      	ldr	r2, [pc, #320]	; (800d01c <HAL_DMA_Init+0x680>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d040      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a4e      	ldr	r2, [pc, #312]	; (800d020 <HAL_DMA_Init+0x684>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d03b      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a4d      	ldr	r2, [pc, #308]	; (800d024 <HAL_DMA_Init+0x688>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d036      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a4b      	ldr	r2, [pc, #300]	; (800d028 <HAL_DMA_Init+0x68c>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d031      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a4a      	ldr	r2, [pc, #296]	; (800d02c <HAL_DMA_Init+0x690>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d02c      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a48      	ldr	r2, [pc, #288]	; (800d030 <HAL_DMA_Init+0x694>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d027      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a47      	ldr	r2, [pc, #284]	; (800d034 <HAL_DMA_Init+0x698>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d022      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a45      	ldr	r2, [pc, #276]	; (800d038 <HAL_DMA_Init+0x69c>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d01d      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a44      	ldr	r2, [pc, #272]	; (800d03c <HAL_DMA_Init+0x6a0>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d018      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a42      	ldr	r2, [pc, #264]	; (800d040 <HAL_DMA_Init+0x6a4>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d013      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a41      	ldr	r2, [pc, #260]	; (800d044 <HAL_DMA_Init+0x6a8>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d00e      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a3f      	ldr	r2, [pc, #252]	; (800d048 <HAL_DMA_Init+0x6ac>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d009      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a3e      	ldr	r2, [pc, #248]	; (800d04c <HAL_DMA_Init+0x6b0>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d004      	beq.n	800cf62 <HAL_DMA_Init+0x5c6>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a3c      	ldr	r2, [pc, #240]	; (800d050 <HAL_DMA_Init+0x6b4>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d101      	bne.n	800cf66 <HAL_DMA_Init+0x5ca>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e000      	b.n	800cf68 <HAL_DMA_Init+0x5cc>
 800cf66:	2300      	movs	r3, #0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d032      	beq.n	800cfd2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f002 fa5d 	bl	800f42c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	2b80      	cmp	r3, #128	; 0x80
 800cf78:	d102      	bne.n	800cf80 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf88:	b2d2      	uxtb	r2, r2
 800cf8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cf94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d010      	beq.n	800cfc0 <HAL_DMA_Init+0x624>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	2b08      	cmp	r3, #8
 800cfa4:	d80c      	bhi.n	800cfc0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f002 fada 	bl	800f560 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cfbc:	605a      	str	r2, [r3, #4]
 800cfbe:	e008      	b.n	800cfd2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	a7fdabf8 	.word	0xa7fdabf8
 800cff0:	cccccccd 	.word	0xcccccccd
 800cff4:	40020010 	.word	0x40020010
 800cff8:	40020028 	.word	0x40020028
 800cffc:	40020040 	.word	0x40020040
 800d000:	40020058 	.word	0x40020058
 800d004:	40020070 	.word	0x40020070
 800d008:	40020088 	.word	0x40020088
 800d00c:	400200a0 	.word	0x400200a0
 800d010:	400200b8 	.word	0x400200b8
 800d014:	40020410 	.word	0x40020410
 800d018:	40020428 	.word	0x40020428
 800d01c:	40020440 	.word	0x40020440
 800d020:	40020458 	.word	0x40020458
 800d024:	40020470 	.word	0x40020470
 800d028:	40020488 	.word	0x40020488
 800d02c:	400204a0 	.word	0x400204a0
 800d030:	400204b8 	.word	0x400204b8
 800d034:	58025408 	.word	0x58025408
 800d038:	5802541c 	.word	0x5802541c
 800d03c:	58025430 	.word	0x58025430
 800d040:	58025444 	.word	0x58025444
 800d044:	58025458 	.word	0x58025458
 800d048:	5802546c 	.word	0x5802546c
 800d04c:	58025480 	.word	0x58025480
 800d050:	58025494 	.word	0x58025494

0800d054 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b086      	sub	sp, #24
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
 800d060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	e226      	b.n	800d4be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d076:	2b01      	cmp	r3, #1
 800d078:	d101      	bne.n	800d07e <HAL_DMA_Start_IT+0x2a>
 800d07a:	2302      	movs	r3, #2
 800d07c:	e21f      	b.n	800d4be <HAL_DMA_Start_IT+0x46a>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2201      	movs	r2, #1
 800d082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b01      	cmp	r3, #1
 800d090:	f040 820a 	bne.w	800d4a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2202      	movs	r2, #2
 800d098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a68      	ldr	r2, [pc, #416]	; (800d248 <HAL_DMA_Start_IT+0x1f4>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d04a      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a66      	ldr	r2, [pc, #408]	; (800d24c <HAL_DMA_Start_IT+0x1f8>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d045      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a65      	ldr	r2, [pc, #404]	; (800d250 <HAL_DMA_Start_IT+0x1fc>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d040      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a63      	ldr	r2, [pc, #396]	; (800d254 <HAL_DMA_Start_IT+0x200>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d03b      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a62      	ldr	r2, [pc, #392]	; (800d258 <HAL_DMA_Start_IT+0x204>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d036      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a60      	ldr	r2, [pc, #384]	; (800d25c <HAL_DMA_Start_IT+0x208>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d031      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a5f      	ldr	r2, [pc, #380]	; (800d260 <HAL_DMA_Start_IT+0x20c>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d02c      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a5d      	ldr	r2, [pc, #372]	; (800d264 <HAL_DMA_Start_IT+0x210>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d027      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a5c      	ldr	r2, [pc, #368]	; (800d268 <HAL_DMA_Start_IT+0x214>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d022      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a5a      	ldr	r2, [pc, #360]	; (800d26c <HAL_DMA_Start_IT+0x218>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d01d      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a59      	ldr	r2, [pc, #356]	; (800d270 <HAL_DMA_Start_IT+0x21c>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d018      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a57      	ldr	r2, [pc, #348]	; (800d274 <HAL_DMA_Start_IT+0x220>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d013      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a56      	ldr	r2, [pc, #344]	; (800d278 <HAL_DMA_Start_IT+0x224>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d00e      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a54      	ldr	r2, [pc, #336]	; (800d27c <HAL_DMA_Start_IT+0x228>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d009      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a53      	ldr	r2, [pc, #332]	; (800d280 <HAL_DMA_Start_IT+0x22c>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d004      	beq.n	800d142 <HAL_DMA_Start_IT+0xee>
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a51      	ldr	r2, [pc, #324]	; (800d284 <HAL_DMA_Start_IT+0x230>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d108      	bne.n	800d154 <HAL_DMA_Start_IT+0x100>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f022 0201 	bic.w	r2, r2, #1
 800d150:	601a      	str	r2, [r3, #0]
 800d152:	e007      	b.n	800d164 <HAL_DMA_Start_IT+0x110>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f022 0201 	bic.w	r2, r2, #1
 800d162:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	68b9      	ldr	r1, [r7, #8]
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f001 fe84 	bl	800ee78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a34      	ldr	r2, [pc, #208]	; (800d248 <HAL_DMA_Start_IT+0x1f4>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d04a      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a33      	ldr	r2, [pc, #204]	; (800d24c <HAL_DMA_Start_IT+0x1f8>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d045      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a31      	ldr	r2, [pc, #196]	; (800d250 <HAL_DMA_Start_IT+0x1fc>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d040      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a30      	ldr	r2, [pc, #192]	; (800d254 <HAL_DMA_Start_IT+0x200>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d03b      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a2e      	ldr	r2, [pc, #184]	; (800d258 <HAL_DMA_Start_IT+0x204>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d036      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a2d      	ldr	r2, [pc, #180]	; (800d25c <HAL_DMA_Start_IT+0x208>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d031      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a2b      	ldr	r2, [pc, #172]	; (800d260 <HAL_DMA_Start_IT+0x20c>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d02c      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a2a      	ldr	r2, [pc, #168]	; (800d264 <HAL_DMA_Start_IT+0x210>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d027      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a28      	ldr	r2, [pc, #160]	; (800d268 <HAL_DMA_Start_IT+0x214>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d022      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a27      	ldr	r2, [pc, #156]	; (800d26c <HAL_DMA_Start_IT+0x218>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d01d      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a25      	ldr	r2, [pc, #148]	; (800d270 <HAL_DMA_Start_IT+0x21c>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d018      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a24      	ldr	r2, [pc, #144]	; (800d274 <HAL_DMA_Start_IT+0x220>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d013      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a22      	ldr	r2, [pc, #136]	; (800d278 <HAL_DMA_Start_IT+0x224>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d00e      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a21      	ldr	r2, [pc, #132]	; (800d27c <HAL_DMA_Start_IT+0x228>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d009      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a1f      	ldr	r2, [pc, #124]	; (800d280 <HAL_DMA_Start_IT+0x22c>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d004      	beq.n	800d210 <HAL_DMA_Start_IT+0x1bc>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a1e      	ldr	r2, [pc, #120]	; (800d284 <HAL_DMA_Start_IT+0x230>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d101      	bne.n	800d214 <HAL_DMA_Start_IT+0x1c0>
 800d210:	2301      	movs	r3, #1
 800d212:	e000      	b.n	800d216 <HAL_DMA_Start_IT+0x1c2>
 800d214:	2300      	movs	r3, #0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d036      	beq.n	800d288 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f023 021e 	bic.w	r2, r3, #30
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f042 0216 	orr.w	r2, r2, #22
 800d22c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d232:	2b00      	cmp	r3, #0
 800d234:	d03e      	beq.n	800d2b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f042 0208 	orr.w	r2, r2, #8
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	e035      	b.n	800d2b4 <HAL_DMA_Start_IT+0x260>
 800d248:	40020010 	.word	0x40020010
 800d24c:	40020028 	.word	0x40020028
 800d250:	40020040 	.word	0x40020040
 800d254:	40020058 	.word	0x40020058
 800d258:	40020070 	.word	0x40020070
 800d25c:	40020088 	.word	0x40020088
 800d260:	400200a0 	.word	0x400200a0
 800d264:	400200b8 	.word	0x400200b8
 800d268:	40020410 	.word	0x40020410
 800d26c:	40020428 	.word	0x40020428
 800d270:	40020440 	.word	0x40020440
 800d274:	40020458 	.word	0x40020458
 800d278:	40020470 	.word	0x40020470
 800d27c:	40020488 	.word	0x40020488
 800d280:	400204a0 	.word	0x400204a0
 800d284:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f023 020e 	bic.w	r2, r3, #14
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f042 020a 	orr.w	r2, r2, #10
 800d29a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d007      	beq.n	800d2b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f042 0204 	orr.w	r2, r2, #4
 800d2b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a83      	ldr	r2, [pc, #524]	; (800d4c8 <HAL_DMA_Start_IT+0x474>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d072      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a82      	ldr	r2, [pc, #520]	; (800d4cc <HAL_DMA_Start_IT+0x478>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d06d      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a80      	ldr	r2, [pc, #512]	; (800d4d0 <HAL_DMA_Start_IT+0x47c>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d068      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a7f      	ldr	r2, [pc, #508]	; (800d4d4 <HAL_DMA_Start_IT+0x480>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d063      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a7d      	ldr	r2, [pc, #500]	; (800d4d8 <HAL_DMA_Start_IT+0x484>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d05e      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a7c      	ldr	r2, [pc, #496]	; (800d4dc <HAL_DMA_Start_IT+0x488>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d059      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a7a      	ldr	r2, [pc, #488]	; (800d4e0 <HAL_DMA_Start_IT+0x48c>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d054      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a79      	ldr	r2, [pc, #484]	; (800d4e4 <HAL_DMA_Start_IT+0x490>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d04f      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a77      	ldr	r2, [pc, #476]	; (800d4e8 <HAL_DMA_Start_IT+0x494>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d04a      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a76      	ldr	r2, [pc, #472]	; (800d4ec <HAL_DMA_Start_IT+0x498>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d045      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a74      	ldr	r2, [pc, #464]	; (800d4f0 <HAL_DMA_Start_IT+0x49c>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d040      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a73      	ldr	r2, [pc, #460]	; (800d4f4 <HAL_DMA_Start_IT+0x4a0>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d03b      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a71      	ldr	r2, [pc, #452]	; (800d4f8 <HAL_DMA_Start_IT+0x4a4>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d036      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a70      	ldr	r2, [pc, #448]	; (800d4fc <HAL_DMA_Start_IT+0x4a8>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d031      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a6e      	ldr	r2, [pc, #440]	; (800d500 <HAL_DMA_Start_IT+0x4ac>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d02c      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a6d      	ldr	r2, [pc, #436]	; (800d504 <HAL_DMA_Start_IT+0x4b0>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d027      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a6b      	ldr	r2, [pc, #428]	; (800d508 <HAL_DMA_Start_IT+0x4b4>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d022      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a6a      	ldr	r2, [pc, #424]	; (800d50c <HAL_DMA_Start_IT+0x4b8>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d01d      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a68      	ldr	r2, [pc, #416]	; (800d510 <HAL_DMA_Start_IT+0x4bc>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d018      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a67      	ldr	r2, [pc, #412]	; (800d514 <HAL_DMA_Start_IT+0x4c0>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d013      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a65      	ldr	r2, [pc, #404]	; (800d518 <HAL_DMA_Start_IT+0x4c4>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00e      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a64      	ldr	r2, [pc, #400]	; (800d51c <HAL_DMA_Start_IT+0x4c8>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d009      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a62      	ldr	r2, [pc, #392]	; (800d520 <HAL_DMA_Start_IT+0x4cc>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d004      	beq.n	800d3a4 <HAL_DMA_Start_IT+0x350>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a61      	ldr	r2, [pc, #388]	; (800d524 <HAL_DMA_Start_IT+0x4d0>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d101      	bne.n	800d3a8 <HAL_DMA_Start_IT+0x354>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e000      	b.n	800d3aa <HAL_DMA_Start_IT+0x356>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d01a      	beq.n	800d3e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d007      	beq.n	800d3cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d007      	beq.n	800d3e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a37      	ldr	r2, [pc, #220]	; (800d4c8 <HAL_DMA_Start_IT+0x474>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d04a      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a36      	ldr	r2, [pc, #216]	; (800d4cc <HAL_DMA_Start_IT+0x478>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d045      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a34      	ldr	r2, [pc, #208]	; (800d4d0 <HAL_DMA_Start_IT+0x47c>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d040      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a33      	ldr	r2, [pc, #204]	; (800d4d4 <HAL_DMA_Start_IT+0x480>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d03b      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a31      	ldr	r2, [pc, #196]	; (800d4d8 <HAL_DMA_Start_IT+0x484>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d036      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a30      	ldr	r2, [pc, #192]	; (800d4dc <HAL_DMA_Start_IT+0x488>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d031      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a2e      	ldr	r2, [pc, #184]	; (800d4e0 <HAL_DMA_Start_IT+0x48c>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d02c      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a2d      	ldr	r2, [pc, #180]	; (800d4e4 <HAL_DMA_Start_IT+0x490>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d027      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a2b      	ldr	r2, [pc, #172]	; (800d4e8 <HAL_DMA_Start_IT+0x494>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d022      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a2a      	ldr	r2, [pc, #168]	; (800d4ec <HAL_DMA_Start_IT+0x498>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d01d      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a28      	ldr	r2, [pc, #160]	; (800d4f0 <HAL_DMA_Start_IT+0x49c>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d018      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a27      	ldr	r2, [pc, #156]	; (800d4f4 <HAL_DMA_Start_IT+0x4a0>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d013      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a25      	ldr	r2, [pc, #148]	; (800d4f8 <HAL_DMA_Start_IT+0x4a4>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d00e      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a24      	ldr	r2, [pc, #144]	; (800d4fc <HAL_DMA_Start_IT+0x4a8>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d009      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a22      	ldr	r2, [pc, #136]	; (800d500 <HAL_DMA_Start_IT+0x4ac>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d004      	beq.n	800d484 <HAL_DMA_Start_IT+0x430>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a21      	ldr	r2, [pc, #132]	; (800d504 <HAL_DMA_Start_IT+0x4b0>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d108      	bne.n	800d496 <HAL_DMA_Start_IT+0x442>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f042 0201 	orr.w	r2, r2, #1
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	e012      	b.n	800d4bc <HAL_DMA_Start_IT+0x468>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f042 0201 	orr.w	r2, r2, #1
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	e009      	b.n	800d4bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	40020010 	.word	0x40020010
 800d4cc:	40020028 	.word	0x40020028
 800d4d0:	40020040 	.word	0x40020040
 800d4d4:	40020058 	.word	0x40020058
 800d4d8:	40020070 	.word	0x40020070
 800d4dc:	40020088 	.word	0x40020088
 800d4e0:	400200a0 	.word	0x400200a0
 800d4e4:	400200b8 	.word	0x400200b8
 800d4e8:	40020410 	.word	0x40020410
 800d4ec:	40020428 	.word	0x40020428
 800d4f0:	40020440 	.word	0x40020440
 800d4f4:	40020458 	.word	0x40020458
 800d4f8:	40020470 	.word	0x40020470
 800d4fc:	40020488 	.word	0x40020488
 800d500:	400204a0 	.word	0x400204a0
 800d504:	400204b8 	.word	0x400204b8
 800d508:	58025408 	.word	0x58025408
 800d50c:	5802541c 	.word	0x5802541c
 800d510:	58025430 	.word	0x58025430
 800d514:	58025444 	.word	0x58025444
 800d518:	58025458 	.word	0x58025458
 800d51c:	5802546c 	.word	0x5802546c
 800d520:	58025480 	.word	0x58025480
 800d524:	58025494 	.word	0x58025494

0800d528 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800d530:	f7fe fd38 	bl	800bfa4 <HAL_GetTick>
 800d534:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	e2dc      	b.n	800dafa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d008      	beq.n	800d55e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2280      	movs	r2, #128	; 0x80
 800d550:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	e2cd      	b.n	800dafa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a76      	ldr	r2, [pc, #472]	; (800d73c <HAL_DMA_Abort+0x214>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d04a      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a74      	ldr	r2, [pc, #464]	; (800d740 <HAL_DMA_Abort+0x218>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d045      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a73      	ldr	r2, [pc, #460]	; (800d744 <HAL_DMA_Abort+0x21c>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d040      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a71      	ldr	r2, [pc, #452]	; (800d748 <HAL_DMA_Abort+0x220>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d03b      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a70      	ldr	r2, [pc, #448]	; (800d74c <HAL_DMA_Abort+0x224>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d036      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a6e      	ldr	r2, [pc, #440]	; (800d750 <HAL_DMA_Abort+0x228>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d031      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a6d      	ldr	r2, [pc, #436]	; (800d754 <HAL_DMA_Abort+0x22c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d02c      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a6b      	ldr	r2, [pc, #428]	; (800d758 <HAL_DMA_Abort+0x230>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d027      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a6a      	ldr	r2, [pc, #424]	; (800d75c <HAL_DMA_Abort+0x234>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d022      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a68      	ldr	r2, [pc, #416]	; (800d760 <HAL_DMA_Abort+0x238>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d01d      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a67      	ldr	r2, [pc, #412]	; (800d764 <HAL_DMA_Abort+0x23c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d018      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a65      	ldr	r2, [pc, #404]	; (800d768 <HAL_DMA_Abort+0x240>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d013      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a64      	ldr	r2, [pc, #400]	; (800d76c <HAL_DMA_Abort+0x244>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d00e      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a62      	ldr	r2, [pc, #392]	; (800d770 <HAL_DMA_Abort+0x248>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d009      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a61      	ldr	r2, [pc, #388]	; (800d774 <HAL_DMA_Abort+0x24c>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d004      	beq.n	800d5fe <HAL_DMA_Abort+0xd6>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a5f      	ldr	r2, [pc, #380]	; (800d778 <HAL_DMA_Abort+0x250>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d101      	bne.n	800d602 <HAL_DMA_Abort+0xda>
 800d5fe:	2301      	movs	r3, #1
 800d600:	e000      	b.n	800d604 <HAL_DMA_Abort+0xdc>
 800d602:	2300      	movs	r3, #0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d013      	beq.n	800d630 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f022 021e 	bic.w	r2, r2, #30
 800d616:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	695a      	ldr	r2, [r3, #20]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d626:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	617b      	str	r3, [r7, #20]
 800d62e:	e00a      	b.n	800d646 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f022 020e 	bic.w	r2, r2, #14
 800d63e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a3c      	ldr	r2, [pc, #240]	; (800d73c <HAL_DMA_Abort+0x214>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d072      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a3a      	ldr	r2, [pc, #232]	; (800d740 <HAL_DMA_Abort+0x218>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d06d      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a39      	ldr	r2, [pc, #228]	; (800d744 <HAL_DMA_Abort+0x21c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d068      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a37      	ldr	r2, [pc, #220]	; (800d748 <HAL_DMA_Abort+0x220>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d063      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a36      	ldr	r2, [pc, #216]	; (800d74c <HAL_DMA_Abort+0x224>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d05e      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a34      	ldr	r2, [pc, #208]	; (800d750 <HAL_DMA_Abort+0x228>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d059      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a33      	ldr	r2, [pc, #204]	; (800d754 <HAL_DMA_Abort+0x22c>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d054      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a31      	ldr	r2, [pc, #196]	; (800d758 <HAL_DMA_Abort+0x230>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d04f      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a30      	ldr	r2, [pc, #192]	; (800d75c <HAL_DMA_Abort+0x234>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d04a      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a2e      	ldr	r2, [pc, #184]	; (800d760 <HAL_DMA_Abort+0x238>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d045      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a2d      	ldr	r2, [pc, #180]	; (800d764 <HAL_DMA_Abort+0x23c>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d040      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a2b      	ldr	r2, [pc, #172]	; (800d768 <HAL_DMA_Abort+0x240>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d03b      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a2a      	ldr	r2, [pc, #168]	; (800d76c <HAL_DMA_Abort+0x244>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d036      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a28      	ldr	r2, [pc, #160]	; (800d770 <HAL_DMA_Abort+0x248>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d031      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a27      	ldr	r2, [pc, #156]	; (800d774 <HAL_DMA_Abort+0x24c>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d02c      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a25      	ldr	r2, [pc, #148]	; (800d778 <HAL_DMA_Abort+0x250>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d027      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a24      	ldr	r2, [pc, #144]	; (800d77c <HAL_DMA_Abort+0x254>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d022      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a22      	ldr	r2, [pc, #136]	; (800d780 <HAL_DMA_Abort+0x258>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d01d      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a21      	ldr	r2, [pc, #132]	; (800d784 <HAL_DMA_Abort+0x25c>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d018      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a1f      	ldr	r2, [pc, #124]	; (800d788 <HAL_DMA_Abort+0x260>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d013      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a1e      	ldr	r2, [pc, #120]	; (800d78c <HAL_DMA_Abort+0x264>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d00e      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a1c      	ldr	r2, [pc, #112]	; (800d790 <HAL_DMA_Abort+0x268>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d009      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a1b      	ldr	r2, [pc, #108]	; (800d794 <HAL_DMA_Abort+0x26c>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d004      	beq.n	800d736 <HAL_DMA_Abort+0x20e>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a19      	ldr	r2, [pc, #100]	; (800d798 <HAL_DMA_Abort+0x270>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d132      	bne.n	800d79c <HAL_DMA_Abort+0x274>
 800d736:	2301      	movs	r3, #1
 800d738:	e031      	b.n	800d79e <HAL_DMA_Abort+0x276>
 800d73a:	bf00      	nop
 800d73c:	40020010 	.word	0x40020010
 800d740:	40020028 	.word	0x40020028
 800d744:	40020040 	.word	0x40020040
 800d748:	40020058 	.word	0x40020058
 800d74c:	40020070 	.word	0x40020070
 800d750:	40020088 	.word	0x40020088
 800d754:	400200a0 	.word	0x400200a0
 800d758:	400200b8 	.word	0x400200b8
 800d75c:	40020410 	.word	0x40020410
 800d760:	40020428 	.word	0x40020428
 800d764:	40020440 	.word	0x40020440
 800d768:	40020458 	.word	0x40020458
 800d76c:	40020470 	.word	0x40020470
 800d770:	40020488 	.word	0x40020488
 800d774:	400204a0 	.word	0x400204a0
 800d778:	400204b8 	.word	0x400204b8
 800d77c:	58025408 	.word	0x58025408
 800d780:	5802541c 	.word	0x5802541c
 800d784:	58025430 	.word	0x58025430
 800d788:	58025444 	.word	0x58025444
 800d78c:	58025458 	.word	0x58025458
 800d790:	5802546c 	.word	0x5802546c
 800d794:	58025480 	.word	0x58025480
 800d798:	58025494 	.word	0x58025494
 800d79c:	2300      	movs	r3, #0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d007      	beq.n	800d7b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a6d      	ldr	r2, [pc, #436]	; (800d96c <HAL_DMA_Abort+0x444>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d04a      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a6b      	ldr	r2, [pc, #428]	; (800d970 <HAL_DMA_Abort+0x448>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d045      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a6a      	ldr	r2, [pc, #424]	; (800d974 <HAL_DMA_Abort+0x44c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d040      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a68      	ldr	r2, [pc, #416]	; (800d978 <HAL_DMA_Abort+0x450>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d03b      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a67      	ldr	r2, [pc, #412]	; (800d97c <HAL_DMA_Abort+0x454>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d036      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a65      	ldr	r2, [pc, #404]	; (800d980 <HAL_DMA_Abort+0x458>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d031      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a64      	ldr	r2, [pc, #400]	; (800d984 <HAL_DMA_Abort+0x45c>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d02c      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a62      	ldr	r2, [pc, #392]	; (800d988 <HAL_DMA_Abort+0x460>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d027      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a61      	ldr	r2, [pc, #388]	; (800d98c <HAL_DMA_Abort+0x464>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d022      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a5f      	ldr	r2, [pc, #380]	; (800d990 <HAL_DMA_Abort+0x468>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d01d      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a5e      	ldr	r2, [pc, #376]	; (800d994 <HAL_DMA_Abort+0x46c>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d018      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a5c      	ldr	r2, [pc, #368]	; (800d998 <HAL_DMA_Abort+0x470>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d013      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a5b      	ldr	r2, [pc, #364]	; (800d99c <HAL_DMA_Abort+0x474>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d00e      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a59      	ldr	r2, [pc, #356]	; (800d9a0 <HAL_DMA_Abort+0x478>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d009      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a58      	ldr	r2, [pc, #352]	; (800d9a4 <HAL_DMA_Abort+0x47c>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d004      	beq.n	800d852 <HAL_DMA_Abort+0x32a>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a56      	ldr	r2, [pc, #344]	; (800d9a8 <HAL_DMA_Abort+0x480>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d108      	bne.n	800d864 <HAL_DMA_Abort+0x33c>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f022 0201 	bic.w	r2, r2, #1
 800d860:	601a      	str	r2, [r3, #0]
 800d862:	e007      	b.n	800d874 <HAL_DMA_Abort+0x34c>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f022 0201 	bic.w	r2, r2, #1
 800d872:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d874:	e013      	b.n	800d89e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d876:	f7fe fb95 	bl	800bfa4 <HAL_GetTick>
 800d87a:	4602      	mov	r2, r0
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	2b05      	cmp	r3, #5
 800d882:	d90c      	bls.n	800d89e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2220      	movs	r2, #32
 800d888:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2203      	movs	r2, #3
 800d88e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e12d      	b.n	800dafa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 0301 	and.w	r3, r3, #1
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e5      	bne.n	800d876 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a2f      	ldr	r2, [pc, #188]	; (800d96c <HAL_DMA_Abort+0x444>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d04a      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a2d      	ldr	r2, [pc, #180]	; (800d970 <HAL_DMA_Abort+0x448>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d045      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a2c      	ldr	r2, [pc, #176]	; (800d974 <HAL_DMA_Abort+0x44c>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d040      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a2a      	ldr	r2, [pc, #168]	; (800d978 <HAL_DMA_Abort+0x450>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d03b      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a29      	ldr	r2, [pc, #164]	; (800d97c <HAL_DMA_Abort+0x454>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d036      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a27      	ldr	r2, [pc, #156]	; (800d980 <HAL_DMA_Abort+0x458>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d031      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a26      	ldr	r2, [pc, #152]	; (800d984 <HAL_DMA_Abort+0x45c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d02c      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a24      	ldr	r2, [pc, #144]	; (800d988 <HAL_DMA_Abort+0x460>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d027      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a23      	ldr	r2, [pc, #140]	; (800d98c <HAL_DMA_Abort+0x464>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d022      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a21      	ldr	r2, [pc, #132]	; (800d990 <HAL_DMA_Abort+0x468>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d01d      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a20      	ldr	r2, [pc, #128]	; (800d994 <HAL_DMA_Abort+0x46c>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d018      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a1e      	ldr	r2, [pc, #120]	; (800d998 <HAL_DMA_Abort+0x470>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d013      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a1d      	ldr	r2, [pc, #116]	; (800d99c <HAL_DMA_Abort+0x474>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d00e      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a1b      	ldr	r2, [pc, #108]	; (800d9a0 <HAL_DMA_Abort+0x478>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d009      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a1a      	ldr	r2, [pc, #104]	; (800d9a4 <HAL_DMA_Abort+0x47c>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d004      	beq.n	800d94a <HAL_DMA_Abort+0x422>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a18      	ldr	r2, [pc, #96]	; (800d9a8 <HAL_DMA_Abort+0x480>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d101      	bne.n	800d94e <HAL_DMA_Abort+0x426>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e000      	b.n	800d950 <HAL_DMA_Abort+0x428>
 800d94e:	2300      	movs	r3, #0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d02b      	beq.n	800d9ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d958:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d95e:	f003 031f 	and.w	r3, r3, #31
 800d962:	223f      	movs	r2, #63	; 0x3f
 800d964:	409a      	lsls	r2, r3
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	609a      	str	r2, [r3, #8]
 800d96a:	e02a      	b.n	800d9c2 <HAL_DMA_Abort+0x49a>
 800d96c:	40020010 	.word	0x40020010
 800d970:	40020028 	.word	0x40020028
 800d974:	40020040 	.word	0x40020040
 800d978:	40020058 	.word	0x40020058
 800d97c:	40020070 	.word	0x40020070
 800d980:	40020088 	.word	0x40020088
 800d984:	400200a0 	.word	0x400200a0
 800d988:	400200b8 	.word	0x400200b8
 800d98c:	40020410 	.word	0x40020410
 800d990:	40020428 	.word	0x40020428
 800d994:	40020440 	.word	0x40020440
 800d998:	40020458 	.word	0x40020458
 800d99c:	40020470 	.word	0x40020470
 800d9a0:	40020488 	.word	0x40020488
 800d9a4:	400204a0 	.word	0x400204a0
 800d9a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9b6:	f003 031f 	and.w	r3, r3, #31
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	409a      	lsls	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a4f      	ldr	r2, [pc, #316]	; (800db04 <HAL_DMA_Abort+0x5dc>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d072      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a4d      	ldr	r2, [pc, #308]	; (800db08 <HAL_DMA_Abort+0x5e0>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d06d      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a4c      	ldr	r2, [pc, #304]	; (800db0c <HAL_DMA_Abort+0x5e4>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d068      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a4a      	ldr	r2, [pc, #296]	; (800db10 <HAL_DMA_Abort+0x5e8>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d063      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4a49      	ldr	r2, [pc, #292]	; (800db14 <HAL_DMA_Abort+0x5ec>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d05e      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a47      	ldr	r2, [pc, #284]	; (800db18 <HAL_DMA_Abort+0x5f0>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d059      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a46      	ldr	r2, [pc, #280]	; (800db1c <HAL_DMA_Abort+0x5f4>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d054      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a44      	ldr	r2, [pc, #272]	; (800db20 <HAL_DMA_Abort+0x5f8>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d04f      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a43      	ldr	r2, [pc, #268]	; (800db24 <HAL_DMA_Abort+0x5fc>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d04a      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a41      	ldr	r2, [pc, #260]	; (800db28 <HAL_DMA_Abort+0x600>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d045      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a40      	ldr	r2, [pc, #256]	; (800db2c <HAL_DMA_Abort+0x604>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d040      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a3e      	ldr	r2, [pc, #248]	; (800db30 <HAL_DMA_Abort+0x608>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d03b      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a3d      	ldr	r2, [pc, #244]	; (800db34 <HAL_DMA_Abort+0x60c>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d036      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a3b      	ldr	r2, [pc, #236]	; (800db38 <HAL_DMA_Abort+0x610>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d031      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4a3a      	ldr	r2, [pc, #232]	; (800db3c <HAL_DMA_Abort+0x614>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d02c      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a38      	ldr	r2, [pc, #224]	; (800db40 <HAL_DMA_Abort+0x618>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d027      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a37      	ldr	r2, [pc, #220]	; (800db44 <HAL_DMA_Abort+0x61c>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d022      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a35      	ldr	r2, [pc, #212]	; (800db48 <HAL_DMA_Abort+0x620>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d01d      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a34      	ldr	r2, [pc, #208]	; (800db4c <HAL_DMA_Abort+0x624>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d018      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a32      	ldr	r2, [pc, #200]	; (800db50 <HAL_DMA_Abort+0x628>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d013      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a31      	ldr	r2, [pc, #196]	; (800db54 <HAL_DMA_Abort+0x62c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d00e      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a2f      	ldr	r2, [pc, #188]	; (800db58 <HAL_DMA_Abort+0x630>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d009      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a2e      	ldr	r2, [pc, #184]	; (800db5c <HAL_DMA_Abort+0x634>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d004      	beq.n	800dab2 <HAL_DMA_Abort+0x58a>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a2c      	ldr	r2, [pc, #176]	; (800db60 <HAL_DMA_Abort+0x638>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d101      	bne.n	800dab6 <HAL_DMA_Abort+0x58e>
 800dab2:	2301      	movs	r3, #1
 800dab4:	e000      	b.n	800dab8 <HAL_DMA_Abort+0x590>
 800dab6:	2300      	movs	r3, #0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d015      	beq.n	800dae8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dac4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00c      	beq.n	800dae8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dadc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dae6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	40020010 	.word	0x40020010
 800db08:	40020028 	.word	0x40020028
 800db0c:	40020040 	.word	0x40020040
 800db10:	40020058 	.word	0x40020058
 800db14:	40020070 	.word	0x40020070
 800db18:	40020088 	.word	0x40020088
 800db1c:	400200a0 	.word	0x400200a0
 800db20:	400200b8 	.word	0x400200b8
 800db24:	40020410 	.word	0x40020410
 800db28:	40020428 	.word	0x40020428
 800db2c:	40020440 	.word	0x40020440
 800db30:	40020458 	.word	0x40020458
 800db34:	40020470 	.word	0x40020470
 800db38:	40020488 	.word	0x40020488
 800db3c:	400204a0 	.word	0x400204a0
 800db40:	400204b8 	.word	0x400204b8
 800db44:	58025408 	.word	0x58025408
 800db48:	5802541c 	.word	0x5802541c
 800db4c:	58025430 	.word	0x58025430
 800db50:	58025444 	.word	0x58025444
 800db54:	58025458 	.word	0x58025458
 800db58:	5802546c 	.word	0x5802546c
 800db5c:	58025480 	.word	0x58025480
 800db60:	58025494 	.word	0x58025494

0800db64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	e237      	b.n	800dfe6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d004      	beq.n	800db8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2280      	movs	r2, #128	; 0x80
 800db86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800db88:	2301      	movs	r3, #1
 800db8a:	e22c      	b.n	800dfe6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a5c      	ldr	r2, [pc, #368]	; (800dd04 <HAL_DMA_Abort_IT+0x1a0>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d04a      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a5b      	ldr	r2, [pc, #364]	; (800dd08 <HAL_DMA_Abort_IT+0x1a4>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d045      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a59      	ldr	r2, [pc, #356]	; (800dd0c <HAL_DMA_Abort_IT+0x1a8>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d040      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a58      	ldr	r2, [pc, #352]	; (800dd10 <HAL_DMA_Abort_IT+0x1ac>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d03b      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a56      	ldr	r2, [pc, #344]	; (800dd14 <HAL_DMA_Abort_IT+0x1b0>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d036      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a55      	ldr	r2, [pc, #340]	; (800dd18 <HAL_DMA_Abort_IT+0x1b4>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d031      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a53      	ldr	r2, [pc, #332]	; (800dd1c <HAL_DMA_Abort_IT+0x1b8>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d02c      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a52      	ldr	r2, [pc, #328]	; (800dd20 <HAL_DMA_Abort_IT+0x1bc>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d027      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a50      	ldr	r2, [pc, #320]	; (800dd24 <HAL_DMA_Abort_IT+0x1c0>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d022      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a4f      	ldr	r2, [pc, #316]	; (800dd28 <HAL_DMA_Abort_IT+0x1c4>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d01d      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a4d      	ldr	r2, [pc, #308]	; (800dd2c <HAL_DMA_Abort_IT+0x1c8>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d018      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a4c      	ldr	r2, [pc, #304]	; (800dd30 <HAL_DMA_Abort_IT+0x1cc>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d013      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a4a      	ldr	r2, [pc, #296]	; (800dd34 <HAL_DMA_Abort_IT+0x1d0>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d00e      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a49      	ldr	r2, [pc, #292]	; (800dd38 <HAL_DMA_Abort_IT+0x1d4>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d009      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a47      	ldr	r2, [pc, #284]	; (800dd3c <HAL_DMA_Abort_IT+0x1d8>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d004      	beq.n	800dc2c <HAL_DMA_Abort_IT+0xc8>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a46      	ldr	r2, [pc, #280]	; (800dd40 <HAL_DMA_Abort_IT+0x1dc>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d101      	bne.n	800dc30 <HAL_DMA_Abort_IT+0xcc>
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e000      	b.n	800dc32 <HAL_DMA_Abort_IT+0xce>
 800dc30:	2300      	movs	r3, #0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f000 8086 	beq.w	800dd44 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2204      	movs	r2, #4
 800dc3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a2f      	ldr	r2, [pc, #188]	; (800dd04 <HAL_DMA_Abort_IT+0x1a0>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d04a      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a2e      	ldr	r2, [pc, #184]	; (800dd08 <HAL_DMA_Abort_IT+0x1a4>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d045      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a2c      	ldr	r2, [pc, #176]	; (800dd0c <HAL_DMA_Abort_IT+0x1a8>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d040      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a2b      	ldr	r2, [pc, #172]	; (800dd10 <HAL_DMA_Abort_IT+0x1ac>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d03b      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a29      	ldr	r2, [pc, #164]	; (800dd14 <HAL_DMA_Abort_IT+0x1b0>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d036      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a28      	ldr	r2, [pc, #160]	; (800dd18 <HAL_DMA_Abort_IT+0x1b4>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d031      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a26      	ldr	r2, [pc, #152]	; (800dd1c <HAL_DMA_Abort_IT+0x1b8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d02c      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a25      	ldr	r2, [pc, #148]	; (800dd20 <HAL_DMA_Abort_IT+0x1bc>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d027      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a23      	ldr	r2, [pc, #140]	; (800dd24 <HAL_DMA_Abort_IT+0x1c0>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d022      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a22      	ldr	r2, [pc, #136]	; (800dd28 <HAL_DMA_Abort_IT+0x1c4>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d01d      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a20      	ldr	r2, [pc, #128]	; (800dd2c <HAL_DMA_Abort_IT+0x1c8>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d018      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a1f      	ldr	r2, [pc, #124]	; (800dd30 <HAL_DMA_Abort_IT+0x1cc>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d013      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a1d      	ldr	r2, [pc, #116]	; (800dd34 <HAL_DMA_Abort_IT+0x1d0>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d00e      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a1c      	ldr	r2, [pc, #112]	; (800dd38 <HAL_DMA_Abort_IT+0x1d4>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d009      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a1a      	ldr	r2, [pc, #104]	; (800dd3c <HAL_DMA_Abort_IT+0x1d8>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d004      	beq.n	800dce0 <HAL_DMA_Abort_IT+0x17c>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a19      	ldr	r2, [pc, #100]	; (800dd40 <HAL_DMA_Abort_IT+0x1dc>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d108      	bne.n	800dcf2 <HAL_DMA_Abort_IT+0x18e>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f022 0201 	bic.w	r2, r2, #1
 800dcee:	601a      	str	r2, [r3, #0]
 800dcf0:	e178      	b.n	800dfe4 <HAL_DMA_Abort_IT+0x480>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f022 0201 	bic.w	r2, r2, #1
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	e16f      	b.n	800dfe4 <HAL_DMA_Abort_IT+0x480>
 800dd04:	40020010 	.word	0x40020010
 800dd08:	40020028 	.word	0x40020028
 800dd0c:	40020040 	.word	0x40020040
 800dd10:	40020058 	.word	0x40020058
 800dd14:	40020070 	.word	0x40020070
 800dd18:	40020088 	.word	0x40020088
 800dd1c:	400200a0 	.word	0x400200a0
 800dd20:	400200b8 	.word	0x400200b8
 800dd24:	40020410 	.word	0x40020410
 800dd28:	40020428 	.word	0x40020428
 800dd2c:	40020440 	.word	0x40020440
 800dd30:	40020458 	.word	0x40020458
 800dd34:	40020470 	.word	0x40020470
 800dd38:	40020488 	.word	0x40020488
 800dd3c:	400204a0 	.word	0x400204a0
 800dd40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f022 020e 	bic.w	r2, r2, #14
 800dd52:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a6c      	ldr	r2, [pc, #432]	; (800df0c <HAL_DMA_Abort_IT+0x3a8>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d04a      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a6b      	ldr	r2, [pc, #428]	; (800df10 <HAL_DMA_Abort_IT+0x3ac>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d045      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a69      	ldr	r2, [pc, #420]	; (800df14 <HAL_DMA_Abort_IT+0x3b0>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d040      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a68      	ldr	r2, [pc, #416]	; (800df18 <HAL_DMA_Abort_IT+0x3b4>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d03b      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a66      	ldr	r2, [pc, #408]	; (800df1c <HAL_DMA_Abort_IT+0x3b8>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d036      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a65      	ldr	r2, [pc, #404]	; (800df20 <HAL_DMA_Abort_IT+0x3bc>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d031      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a63      	ldr	r2, [pc, #396]	; (800df24 <HAL_DMA_Abort_IT+0x3c0>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d02c      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a62      	ldr	r2, [pc, #392]	; (800df28 <HAL_DMA_Abort_IT+0x3c4>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d027      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a60      	ldr	r2, [pc, #384]	; (800df2c <HAL_DMA_Abort_IT+0x3c8>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d022      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a5f      	ldr	r2, [pc, #380]	; (800df30 <HAL_DMA_Abort_IT+0x3cc>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d01d      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a5d      	ldr	r2, [pc, #372]	; (800df34 <HAL_DMA_Abort_IT+0x3d0>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d018      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a5c      	ldr	r2, [pc, #368]	; (800df38 <HAL_DMA_Abort_IT+0x3d4>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d013      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a5a      	ldr	r2, [pc, #360]	; (800df3c <HAL_DMA_Abort_IT+0x3d8>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d00e      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a59      	ldr	r2, [pc, #356]	; (800df40 <HAL_DMA_Abort_IT+0x3dc>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d009      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a57      	ldr	r2, [pc, #348]	; (800df44 <HAL_DMA_Abort_IT+0x3e0>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d004      	beq.n	800ddf4 <HAL_DMA_Abort_IT+0x290>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a56      	ldr	r2, [pc, #344]	; (800df48 <HAL_DMA_Abort_IT+0x3e4>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d108      	bne.n	800de06 <HAL_DMA_Abort_IT+0x2a2>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f022 0201 	bic.w	r2, r2, #1
 800de02:	601a      	str	r2, [r3, #0]
 800de04:	e007      	b.n	800de16 <HAL_DMA_Abort_IT+0x2b2>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f022 0201 	bic.w	r2, r2, #1
 800de14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a3c      	ldr	r2, [pc, #240]	; (800df0c <HAL_DMA_Abort_IT+0x3a8>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d072      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a3a      	ldr	r2, [pc, #232]	; (800df10 <HAL_DMA_Abort_IT+0x3ac>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d06d      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a39      	ldr	r2, [pc, #228]	; (800df14 <HAL_DMA_Abort_IT+0x3b0>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d068      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a37      	ldr	r2, [pc, #220]	; (800df18 <HAL_DMA_Abort_IT+0x3b4>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d063      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a36      	ldr	r2, [pc, #216]	; (800df1c <HAL_DMA_Abort_IT+0x3b8>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d05e      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a34      	ldr	r2, [pc, #208]	; (800df20 <HAL_DMA_Abort_IT+0x3bc>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d059      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a33      	ldr	r2, [pc, #204]	; (800df24 <HAL_DMA_Abort_IT+0x3c0>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d054      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a31      	ldr	r2, [pc, #196]	; (800df28 <HAL_DMA_Abort_IT+0x3c4>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d04f      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a30      	ldr	r2, [pc, #192]	; (800df2c <HAL_DMA_Abort_IT+0x3c8>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d04a      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4a2e      	ldr	r2, [pc, #184]	; (800df30 <HAL_DMA_Abort_IT+0x3cc>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d045      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a2d      	ldr	r2, [pc, #180]	; (800df34 <HAL_DMA_Abort_IT+0x3d0>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d040      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a2b      	ldr	r2, [pc, #172]	; (800df38 <HAL_DMA_Abort_IT+0x3d4>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d03b      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a2a      	ldr	r2, [pc, #168]	; (800df3c <HAL_DMA_Abort_IT+0x3d8>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d036      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a28      	ldr	r2, [pc, #160]	; (800df40 <HAL_DMA_Abort_IT+0x3dc>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d031      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4a27      	ldr	r2, [pc, #156]	; (800df44 <HAL_DMA_Abort_IT+0x3e0>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d02c      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a25      	ldr	r2, [pc, #148]	; (800df48 <HAL_DMA_Abort_IT+0x3e4>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d027      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a24      	ldr	r2, [pc, #144]	; (800df4c <HAL_DMA_Abort_IT+0x3e8>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d022      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a22      	ldr	r2, [pc, #136]	; (800df50 <HAL_DMA_Abort_IT+0x3ec>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d01d      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a21      	ldr	r2, [pc, #132]	; (800df54 <HAL_DMA_Abort_IT+0x3f0>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d018      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a1f      	ldr	r2, [pc, #124]	; (800df58 <HAL_DMA_Abort_IT+0x3f4>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d013      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a1e      	ldr	r2, [pc, #120]	; (800df5c <HAL_DMA_Abort_IT+0x3f8>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d00e      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a1c      	ldr	r2, [pc, #112]	; (800df60 <HAL_DMA_Abort_IT+0x3fc>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d009      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a1b      	ldr	r2, [pc, #108]	; (800df64 <HAL_DMA_Abort_IT+0x400>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d004      	beq.n	800df06 <HAL_DMA_Abort_IT+0x3a2>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a19      	ldr	r2, [pc, #100]	; (800df68 <HAL_DMA_Abort_IT+0x404>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d132      	bne.n	800df6c <HAL_DMA_Abort_IT+0x408>
 800df06:	2301      	movs	r3, #1
 800df08:	e031      	b.n	800df6e <HAL_DMA_Abort_IT+0x40a>
 800df0a:	bf00      	nop
 800df0c:	40020010 	.word	0x40020010
 800df10:	40020028 	.word	0x40020028
 800df14:	40020040 	.word	0x40020040
 800df18:	40020058 	.word	0x40020058
 800df1c:	40020070 	.word	0x40020070
 800df20:	40020088 	.word	0x40020088
 800df24:	400200a0 	.word	0x400200a0
 800df28:	400200b8 	.word	0x400200b8
 800df2c:	40020410 	.word	0x40020410
 800df30:	40020428 	.word	0x40020428
 800df34:	40020440 	.word	0x40020440
 800df38:	40020458 	.word	0x40020458
 800df3c:	40020470 	.word	0x40020470
 800df40:	40020488 	.word	0x40020488
 800df44:	400204a0 	.word	0x400204a0
 800df48:	400204b8 	.word	0x400204b8
 800df4c:	58025408 	.word	0x58025408
 800df50:	5802541c 	.word	0x5802541c
 800df54:	58025430 	.word	0x58025430
 800df58:	58025444 	.word	0x58025444
 800df5c:	58025458 	.word	0x58025458
 800df60:	5802546c 	.word	0x5802546c
 800df64:	58025480 	.word	0x58025480
 800df68:	58025494 	.word	0x58025494
 800df6c:	2300      	movs	r3, #0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d028      	beq.n	800dfc4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df8c:	f003 031f 	and.w	r3, r3, #31
 800df90:	2201      	movs	r2, #1
 800df92:	409a      	lsls	r2, r3
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dfa0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00c      	beq.n	800dfc4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dfc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d003      	beq.n	800dfe4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop

0800dff0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b08a      	sub	sp, #40	; 0x28
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800dffc:	4b67      	ldr	r3, [pc, #412]	; (800e19c <HAL_DMA_IRQHandler+0x1ac>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a67      	ldr	r2, [pc, #412]	; (800e1a0 <HAL_DMA_IRQHandler+0x1b0>)
 800e002:	fba2 2303 	umull	r2, r3, r2, r3
 800e006:	0a9b      	lsrs	r3, r3, #10
 800e008:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e00e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e014:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a5f      	ldr	r2, [pc, #380]	; (800e1a4 <HAL_DMA_IRQHandler+0x1b4>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d04a      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a5d      	ldr	r2, [pc, #372]	; (800e1a8 <HAL_DMA_IRQHandler+0x1b8>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d045      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a5c      	ldr	r2, [pc, #368]	; (800e1ac <HAL_DMA_IRQHandler+0x1bc>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d040      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a5a      	ldr	r2, [pc, #360]	; (800e1b0 <HAL_DMA_IRQHandler+0x1c0>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d03b      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a59      	ldr	r2, [pc, #356]	; (800e1b4 <HAL_DMA_IRQHandler+0x1c4>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d036      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a57      	ldr	r2, [pc, #348]	; (800e1b8 <HAL_DMA_IRQHandler+0x1c8>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d031      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a56      	ldr	r2, [pc, #344]	; (800e1bc <HAL_DMA_IRQHandler+0x1cc>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d02c      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a54      	ldr	r2, [pc, #336]	; (800e1c0 <HAL_DMA_IRQHandler+0x1d0>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d027      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a53      	ldr	r2, [pc, #332]	; (800e1c4 <HAL_DMA_IRQHandler+0x1d4>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d022      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a51      	ldr	r2, [pc, #324]	; (800e1c8 <HAL_DMA_IRQHandler+0x1d8>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d01d      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a50      	ldr	r2, [pc, #320]	; (800e1cc <HAL_DMA_IRQHandler+0x1dc>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d018      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a4e      	ldr	r2, [pc, #312]	; (800e1d0 <HAL_DMA_IRQHandler+0x1e0>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d013      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a4d      	ldr	r2, [pc, #308]	; (800e1d4 <HAL_DMA_IRQHandler+0x1e4>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d00e      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a4b      	ldr	r2, [pc, #300]	; (800e1d8 <HAL_DMA_IRQHandler+0x1e8>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d009      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a4a      	ldr	r2, [pc, #296]	; (800e1dc <HAL_DMA_IRQHandler+0x1ec>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d004      	beq.n	800e0c2 <HAL_DMA_IRQHandler+0xd2>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a48      	ldr	r2, [pc, #288]	; (800e1e0 <HAL_DMA_IRQHandler+0x1f0>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d101      	bne.n	800e0c6 <HAL_DMA_IRQHandler+0xd6>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e000      	b.n	800e0c8 <HAL_DMA_IRQHandler+0xd8>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 842b 	beq.w	800e924 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0d2:	f003 031f 	and.w	r3, r3, #31
 800e0d6:	2208      	movs	r2, #8
 800e0d8:	409a      	lsls	r2, r3
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	4013      	ands	r3, r2
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 80a2 	beq.w	800e228 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a2e      	ldr	r2, [pc, #184]	; (800e1a4 <HAL_DMA_IRQHandler+0x1b4>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d04a      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a2d      	ldr	r2, [pc, #180]	; (800e1a8 <HAL_DMA_IRQHandler+0x1b8>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d045      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a2b      	ldr	r2, [pc, #172]	; (800e1ac <HAL_DMA_IRQHandler+0x1bc>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d040      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a2a      	ldr	r2, [pc, #168]	; (800e1b0 <HAL_DMA_IRQHandler+0x1c0>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d03b      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a28      	ldr	r2, [pc, #160]	; (800e1b4 <HAL_DMA_IRQHandler+0x1c4>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d036      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a27      	ldr	r2, [pc, #156]	; (800e1b8 <HAL_DMA_IRQHandler+0x1c8>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d031      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a25      	ldr	r2, [pc, #148]	; (800e1bc <HAL_DMA_IRQHandler+0x1cc>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d02c      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a24      	ldr	r2, [pc, #144]	; (800e1c0 <HAL_DMA_IRQHandler+0x1d0>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d027      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a22      	ldr	r2, [pc, #136]	; (800e1c4 <HAL_DMA_IRQHandler+0x1d4>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d022      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4a21      	ldr	r2, [pc, #132]	; (800e1c8 <HAL_DMA_IRQHandler+0x1d8>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d01d      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a1f      	ldr	r2, [pc, #124]	; (800e1cc <HAL_DMA_IRQHandler+0x1dc>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d018      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a1e      	ldr	r2, [pc, #120]	; (800e1d0 <HAL_DMA_IRQHandler+0x1e0>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d013      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a1c      	ldr	r2, [pc, #112]	; (800e1d4 <HAL_DMA_IRQHandler+0x1e4>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d00e      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a1b      	ldr	r2, [pc, #108]	; (800e1d8 <HAL_DMA_IRQHandler+0x1e8>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d009      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a19      	ldr	r2, [pc, #100]	; (800e1dc <HAL_DMA_IRQHandler+0x1ec>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d004      	beq.n	800e184 <HAL_DMA_IRQHandler+0x194>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a18      	ldr	r2, [pc, #96]	; (800e1e0 <HAL_DMA_IRQHandler+0x1f0>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d12f      	bne.n	800e1e4 <HAL_DMA_IRQHandler+0x1f4>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f003 0304 	and.w	r3, r3, #4
 800e18e:	2b00      	cmp	r3, #0
 800e190:	bf14      	ite	ne
 800e192:	2301      	movne	r3, #1
 800e194:	2300      	moveq	r3, #0
 800e196:	b2db      	uxtb	r3, r3
 800e198:	e02e      	b.n	800e1f8 <HAL_DMA_IRQHandler+0x208>
 800e19a:	bf00      	nop
 800e19c:	24000000 	.word	0x24000000
 800e1a0:	1b4e81b5 	.word	0x1b4e81b5
 800e1a4:	40020010 	.word	0x40020010
 800e1a8:	40020028 	.word	0x40020028
 800e1ac:	40020040 	.word	0x40020040
 800e1b0:	40020058 	.word	0x40020058
 800e1b4:	40020070 	.word	0x40020070
 800e1b8:	40020088 	.word	0x40020088
 800e1bc:	400200a0 	.word	0x400200a0
 800e1c0:	400200b8 	.word	0x400200b8
 800e1c4:	40020410 	.word	0x40020410
 800e1c8:	40020428 	.word	0x40020428
 800e1cc:	40020440 	.word	0x40020440
 800e1d0:	40020458 	.word	0x40020458
 800e1d4:	40020470 	.word	0x40020470
 800e1d8:	40020488 	.word	0x40020488
 800e1dc:	400204a0 	.word	0x400204a0
 800e1e0:	400204b8 	.word	0x400204b8
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f003 0308 	and.w	r3, r3, #8
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	bf14      	ite	ne
 800e1f2:	2301      	movne	r3, #1
 800e1f4:	2300      	moveq	r3, #0
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d015      	beq.n	800e228 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f022 0204 	bic.w	r2, r2, #4
 800e20a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e210:	f003 031f 	and.w	r3, r3, #31
 800e214:	2208      	movs	r2, #8
 800e216:	409a      	lsls	r2, r3
 800e218:	6a3b      	ldr	r3, [r7, #32]
 800e21a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e220:	f043 0201 	orr.w	r2, r3, #1
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e22c:	f003 031f 	and.w	r3, r3, #31
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	fa22 f303 	lsr.w	r3, r2, r3
 800e236:	f003 0301 	and.w	r3, r3, #1
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d06e      	beq.n	800e31c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a69      	ldr	r2, [pc, #420]	; (800e3e8 <HAL_DMA_IRQHandler+0x3f8>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d04a      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a67      	ldr	r2, [pc, #412]	; (800e3ec <HAL_DMA_IRQHandler+0x3fc>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d045      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a66      	ldr	r2, [pc, #408]	; (800e3f0 <HAL_DMA_IRQHandler+0x400>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d040      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a64      	ldr	r2, [pc, #400]	; (800e3f4 <HAL_DMA_IRQHandler+0x404>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d03b      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a63      	ldr	r2, [pc, #396]	; (800e3f8 <HAL_DMA_IRQHandler+0x408>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d036      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a61      	ldr	r2, [pc, #388]	; (800e3fc <HAL_DMA_IRQHandler+0x40c>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d031      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a60      	ldr	r2, [pc, #384]	; (800e400 <HAL_DMA_IRQHandler+0x410>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d02c      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a5e      	ldr	r2, [pc, #376]	; (800e404 <HAL_DMA_IRQHandler+0x414>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d027      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a5d      	ldr	r2, [pc, #372]	; (800e408 <HAL_DMA_IRQHandler+0x418>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d022      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a5b      	ldr	r2, [pc, #364]	; (800e40c <HAL_DMA_IRQHandler+0x41c>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d01d      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a5a      	ldr	r2, [pc, #360]	; (800e410 <HAL_DMA_IRQHandler+0x420>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d018      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a58      	ldr	r2, [pc, #352]	; (800e414 <HAL_DMA_IRQHandler+0x424>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d013      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a57      	ldr	r2, [pc, #348]	; (800e418 <HAL_DMA_IRQHandler+0x428>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d00e      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a55      	ldr	r2, [pc, #340]	; (800e41c <HAL_DMA_IRQHandler+0x42c>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d009      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a54      	ldr	r2, [pc, #336]	; (800e420 <HAL_DMA_IRQHandler+0x430>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d004      	beq.n	800e2de <HAL_DMA_IRQHandler+0x2ee>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a52      	ldr	r2, [pc, #328]	; (800e424 <HAL_DMA_IRQHandler+0x434>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d10a      	bne.n	800e2f4 <HAL_DMA_IRQHandler+0x304>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	bf14      	ite	ne
 800e2ec:	2301      	movne	r3, #1
 800e2ee:	2300      	moveq	r3, #0
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	e003      	b.n	800e2fc <HAL_DMA_IRQHandler+0x30c>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00d      	beq.n	800e31c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e304:	f003 031f 	and.w	r3, r3, #31
 800e308:	2201      	movs	r2, #1
 800e30a:	409a      	lsls	r2, r3
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e314:	f043 0202 	orr.w	r2, r3, #2
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e320:	f003 031f 	and.w	r3, r3, #31
 800e324:	2204      	movs	r2, #4
 800e326:	409a      	lsls	r2, r3
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	4013      	ands	r3, r2
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f000 808f 	beq.w	800e450 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a2c      	ldr	r2, [pc, #176]	; (800e3e8 <HAL_DMA_IRQHandler+0x3f8>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d04a      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a2a      	ldr	r2, [pc, #168]	; (800e3ec <HAL_DMA_IRQHandler+0x3fc>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d045      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a29      	ldr	r2, [pc, #164]	; (800e3f0 <HAL_DMA_IRQHandler+0x400>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d040      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a27      	ldr	r2, [pc, #156]	; (800e3f4 <HAL_DMA_IRQHandler+0x404>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d03b      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a26      	ldr	r2, [pc, #152]	; (800e3f8 <HAL_DMA_IRQHandler+0x408>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d036      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a24      	ldr	r2, [pc, #144]	; (800e3fc <HAL_DMA_IRQHandler+0x40c>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d031      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a23      	ldr	r2, [pc, #140]	; (800e400 <HAL_DMA_IRQHandler+0x410>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d02c      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a21      	ldr	r2, [pc, #132]	; (800e404 <HAL_DMA_IRQHandler+0x414>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d027      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a20      	ldr	r2, [pc, #128]	; (800e408 <HAL_DMA_IRQHandler+0x418>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d022      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a1e      	ldr	r2, [pc, #120]	; (800e40c <HAL_DMA_IRQHandler+0x41c>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d01d      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a1d      	ldr	r2, [pc, #116]	; (800e410 <HAL_DMA_IRQHandler+0x420>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d018      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a1b      	ldr	r2, [pc, #108]	; (800e414 <HAL_DMA_IRQHandler+0x424>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d013      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a1a      	ldr	r2, [pc, #104]	; (800e418 <HAL_DMA_IRQHandler+0x428>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d00e      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a18      	ldr	r2, [pc, #96]	; (800e41c <HAL_DMA_IRQHandler+0x42c>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d009      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a17      	ldr	r2, [pc, #92]	; (800e420 <HAL_DMA_IRQHandler+0x430>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d004      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x3e2>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a15      	ldr	r2, [pc, #84]	; (800e424 <HAL_DMA_IRQHandler+0x434>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d12a      	bne.n	800e428 <HAL_DMA_IRQHandler+0x438>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f003 0302 	and.w	r3, r3, #2
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	bf14      	ite	ne
 800e3e0:	2301      	movne	r3, #1
 800e3e2:	2300      	moveq	r3, #0
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	e023      	b.n	800e430 <HAL_DMA_IRQHandler+0x440>
 800e3e8:	40020010 	.word	0x40020010
 800e3ec:	40020028 	.word	0x40020028
 800e3f0:	40020040 	.word	0x40020040
 800e3f4:	40020058 	.word	0x40020058
 800e3f8:	40020070 	.word	0x40020070
 800e3fc:	40020088 	.word	0x40020088
 800e400:	400200a0 	.word	0x400200a0
 800e404:	400200b8 	.word	0x400200b8
 800e408:	40020410 	.word	0x40020410
 800e40c:	40020428 	.word	0x40020428
 800e410:	40020440 	.word	0x40020440
 800e414:	40020458 	.word	0x40020458
 800e418:	40020470 	.word	0x40020470
 800e41c:	40020488 	.word	0x40020488
 800e420:	400204a0 	.word	0x400204a0
 800e424:	400204b8 	.word	0x400204b8
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2300      	movs	r3, #0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00d      	beq.n	800e450 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e438:	f003 031f 	and.w	r3, r3, #31
 800e43c:	2204      	movs	r2, #4
 800e43e:	409a      	lsls	r2, r3
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e448:	f043 0204 	orr.w	r2, r3, #4
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e454:	f003 031f 	and.w	r3, r3, #31
 800e458:	2210      	movs	r2, #16
 800e45a:	409a      	lsls	r2, r3
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	4013      	ands	r3, r2
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 80a6 	beq.w	800e5b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a85      	ldr	r2, [pc, #532]	; (800e680 <HAL_DMA_IRQHandler+0x690>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d04a      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a83      	ldr	r2, [pc, #524]	; (800e684 <HAL_DMA_IRQHandler+0x694>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d045      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a82      	ldr	r2, [pc, #520]	; (800e688 <HAL_DMA_IRQHandler+0x698>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d040      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a80      	ldr	r2, [pc, #512]	; (800e68c <HAL_DMA_IRQHandler+0x69c>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d03b      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a7f      	ldr	r2, [pc, #508]	; (800e690 <HAL_DMA_IRQHandler+0x6a0>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d036      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a7d      	ldr	r2, [pc, #500]	; (800e694 <HAL_DMA_IRQHandler+0x6a4>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d031      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a7c      	ldr	r2, [pc, #496]	; (800e698 <HAL_DMA_IRQHandler+0x6a8>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d02c      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a7a      	ldr	r2, [pc, #488]	; (800e69c <HAL_DMA_IRQHandler+0x6ac>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d027      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a79      	ldr	r2, [pc, #484]	; (800e6a0 <HAL_DMA_IRQHandler+0x6b0>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d022      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a77      	ldr	r2, [pc, #476]	; (800e6a4 <HAL_DMA_IRQHandler+0x6b4>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d01d      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a76      	ldr	r2, [pc, #472]	; (800e6a8 <HAL_DMA_IRQHandler+0x6b8>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d018      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a74      	ldr	r2, [pc, #464]	; (800e6ac <HAL_DMA_IRQHandler+0x6bc>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d013      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a73      	ldr	r2, [pc, #460]	; (800e6b0 <HAL_DMA_IRQHandler+0x6c0>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d00e      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a71      	ldr	r2, [pc, #452]	; (800e6b4 <HAL_DMA_IRQHandler+0x6c4>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d009      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a70      	ldr	r2, [pc, #448]	; (800e6b8 <HAL_DMA_IRQHandler+0x6c8>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d004      	beq.n	800e506 <HAL_DMA_IRQHandler+0x516>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a6e      	ldr	r2, [pc, #440]	; (800e6bc <HAL_DMA_IRQHandler+0x6cc>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d10a      	bne.n	800e51c <HAL_DMA_IRQHandler+0x52c>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f003 0308 	and.w	r3, r3, #8
 800e510:	2b00      	cmp	r3, #0
 800e512:	bf14      	ite	ne
 800e514:	2301      	movne	r3, #1
 800e516:	2300      	moveq	r3, #0
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	e009      	b.n	800e530 <HAL_DMA_IRQHandler+0x540>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 0304 	and.w	r3, r3, #4
 800e526:	2b00      	cmp	r3, #0
 800e528:	bf14      	ite	ne
 800e52a:	2301      	movne	r3, #1
 800e52c:	2300      	moveq	r3, #0
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	d03e      	beq.n	800e5b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e538:	f003 031f 	and.w	r3, r3, #31
 800e53c:	2210      	movs	r2, #16
 800e53e:	409a      	lsls	r2, r3
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d018      	beq.n	800e584 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d108      	bne.n	800e572 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e564:	2b00      	cmp	r3, #0
 800e566:	d024      	beq.n	800e5b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	4798      	blx	r3
 800e570:	e01f      	b.n	800e5b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e576:	2b00      	cmp	r3, #0
 800e578:	d01b      	beq.n	800e5b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	4798      	blx	r3
 800e582:	e016      	b.n	800e5b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d107      	bne.n	800e5a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f022 0208 	bic.w	r2, r2, #8
 800e5a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d003      	beq.n	800e5b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5b6:	f003 031f 	and.w	r3, r3, #31
 800e5ba:	2220      	movs	r2, #32
 800e5bc:	409a      	lsls	r2, r3
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	4013      	ands	r3, r2
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 8110 	beq.w	800e7e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a2c      	ldr	r2, [pc, #176]	; (800e680 <HAL_DMA_IRQHandler+0x690>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d04a      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a2b      	ldr	r2, [pc, #172]	; (800e684 <HAL_DMA_IRQHandler+0x694>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d045      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a29      	ldr	r2, [pc, #164]	; (800e688 <HAL_DMA_IRQHandler+0x698>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d040      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a28      	ldr	r2, [pc, #160]	; (800e68c <HAL_DMA_IRQHandler+0x69c>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d03b      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a26      	ldr	r2, [pc, #152]	; (800e690 <HAL_DMA_IRQHandler+0x6a0>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d036      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a25      	ldr	r2, [pc, #148]	; (800e694 <HAL_DMA_IRQHandler+0x6a4>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d031      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a23      	ldr	r2, [pc, #140]	; (800e698 <HAL_DMA_IRQHandler+0x6a8>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d02c      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a22      	ldr	r2, [pc, #136]	; (800e69c <HAL_DMA_IRQHandler+0x6ac>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d027      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a20      	ldr	r2, [pc, #128]	; (800e6a0 <HAL_DMA_IRQHandler+0x6b0>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d022      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a1f      	ldr	r2, [pc, #124]	; (800e6a4 <HAL_DMA_IRQHandler+0x6b4>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d01d      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a1d      	ldr	r2, [pc, #116]	; (800e6a8 <HAL_DMA_IRQHandler+0x6b8>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d018      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a1c      	ldr	r2, [pc, #112]	; (800e6ac <HAL_DMA_IRQHandler+0x6bc>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d013      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a1a      	ldr	r2, [pc, #104]	; (800e6b0 <HAL_DMA_IRQHandler+0x6c0>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d00e      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a19      	ldr	r2, [pc, #100]	; (800e6b4 <HAL_DMA_IRQHandler+0x6c4>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d009      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a17      	ldr	r2, [pc, #92]	; (800e6b8 <HAL_DMA_IRQHandler+0x6c8>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d004      	beq.n	800e668 <HAL_DMA_IRQHandler+0x678>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a16      	ldr	r2, [pc, #88]	; (800e6bc <HAL_DMA_IRQHandler+0x6cc>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d12b      	bne.n	800e6c0 <HAL_DMA_IRQHandler+0x6d0>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f003 0310 	and.w	r3, r3, #16
 800e672:	2b00      	cmp	r3, #0
 800e674:	bf14      	ite	ne
 800e676:	2301      	movne	r3, #1
 800e678:	2300      	moveq	r3, #0
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	e02a      	b.n	800e6d4 <HAL_DMA_IRQHandler+0x6e4>
 800e67e:	bf00      	nop
 800e680:	40020010 	.word	0x40020010
 800e684:	40020028 	.word	0x40020028
 800e688:	40020040 	.word	0x40020040
 800e68c:	40020058 	.word	0x40020058
 800e690:	40020070 	.word	0x40020070
 800e694:	40020088 	.word	0x40020088
 800e698:	400200a0 	.word	0x400200a0
 800e69c:	400200b8 	.word	0x400200b8
 800e6a0:	40020410 	.word	0x40020410
 800e6a4:	40020428 	.word	0x40020428
 800e6a8:	40020440 	.word	0x40020440
 800e6ac:	40020458 	.word	0x40020458
 800e6b0:	40020470 	.word	0x40020470
 800e6b4:	40020488 	.word	0x40020488
 800e6b8:	400204a0 	.word	0x400204a0
 800e6bc:	400204b8 	.word	0x400204b8
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f003 0302 	and.w	r3, r3, #2
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	bf14      	ite	ne
 800e6ce:	2301      	movne	r3, #1
 800e6d0:	2300      	moveq	r3, #0
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 8087 	beq.w	800e7e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6de:	f003 031f 	and.w	r3, r3, #31
 800e6e2:	2220      	movs	r2, #32
 800e6e4:	409a      	lsls	r2, r3
 800e6e6:	6a3b      	ldr	r3, [r7, #32]
 800e6e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b04      	cmp	r3, #4
 800e6f4:	d139      	bne.n	800e76a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f022 0216 	bic.w	r2, r2, #22
 800e704:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	695a      	ldr	r2, [r3, #20]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e714:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d103      	bne.n	800e726 <HAL_DMA_IRQHandler+0x736>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e722:	2b00      	cmp	r3, #0
 800e724:	d007      	beq.n	800e736 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f022 0208 	bic.w	r2, r2, #8
 800e734:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e73a:	f003 031f 	and.w	r3, r3, #31
 800e73e:	223f      	movs	r2, #63	; 0x3f
 800e740:	409a      	lsls	r2, r3
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f000 834a 	beq.w	800edf4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	4798      	blx	r3
          }
          return;
 800e768:	e344      	b.n	800edf4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d018      	beq.n	800e7aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e782:	2b00      	cmp	r3, #0
 800e784:	d108      	bne.n	800e798 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d02c      	beq.n	800e7e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	4798      	blx	r3
 800e796:	e027      	b.n	800e7e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d023      	beq.n	800e7e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	4798      	blx	r3
 800e7a8:	e01e      	b.n	800e7e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10f      	bne.n	800e7d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f022 0210 	bic.w	r2, r2, #16
 800e7c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d003      	beq.n	800e7e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f000 8306 	beq.w	800edfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f000 8088 	beq.w	800e910 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2204      	movs	r2, #4
 800e804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a7a      	ldr	r2, [pc, #488]	; (800e9f8 <HAL_DMA_IRQHandler+0xa08>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d04a      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a79      	ldr	r2, [pc, #484]	; (800e9fc <HAL_DMA_IRQHandler+0xa0c>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d045      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a77      	ldr	r2, [pc, #476]	; (800ea00 <HAL_DMA_IRQHandler+0xa10>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d040      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a76      	ldr	r2, [pc, #472]	; (800ea04 <HAL_DMA_IRQHandler+0xa14>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d03b      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a74      	ldr	r2, [pc, #464]	; (800ea08 <HAL_DMA_IRQHandler+0xa18>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d036      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a73      	ldr	r2, [pc, #460]	; (800ea0c <HAL_DMA_IRQHandler+0xa1c>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d031      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a71      	ldr	r2, [pc, #452]	; (800ea10 <HAL_DMA_IRQHandler+0xa20>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d02c      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a70      	ldr	r2, [pc, #448]	; (800ea14 <HAL_DMA_IRQHandler+0xa24>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d027      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a6e      	ldr	r2, [pc, #440]	; (800ea18 <HAL_DMA_IRQHandler+0xa28>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d022      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a6d      	ldr	r2, [pc, #436]	; (800ea1c <HAL_DMA_IRQHandler+0xa2c>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d01d      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a6b      	ldr	r2, [pc, #428]	; (800ea20 <HAL_DMA_IRQHandler+0xa30>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d018      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a6a      	ldr	r2, [pc, #424]	; (800ea24 <HAL_DMA_IRQHandler+0xa34>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d013      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a68      	ldr	r2, [pc, #416]	; (800ea28 <HAL_DMA_IRQHandler+0xa38>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d00e      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a67      	ldr	r2, [pc, #412]	; (800ea2c <HAL_DMA_IRQHandler+0xa3c>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d009      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a65      	ldr	r2, [pc, #404]	; (800ea30 <HAL_DMA_IRQHandler+0xa40>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d004      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x8b8>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a64      	ldr	r2, [pc, #400]	; (800ea34 <HAL_DMA_IRQHandler+0xa44>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d108      	bne.n	800e8ba <HAL_DMA_IRQHandler+0x8ca>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f022 0201 	bic.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	e007      	b.n	800e8ca <HAL_DMA_IRQHandler+0x8da>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f022 0201 	bic.w	r2, r2, #1
 800e8c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d307      	bcc.n	800e8e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1f2      	bne.n	800e8ca <HAL_DMA_IRQHandler+0x8da>
 800e8e4:	e000      	b.n	800e8e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800e8e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d004      	beq.n	800e900 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2203      	movs	r2, #3
 800e8fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800e8fe:	e003      	b.n	800e908 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e914:	2b00      	cmp	r3, #0
 800e916:	f000 8272 	beq.w	800edfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	4798      	blx	r3
 800e922:	e26c      	b.n	800edfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a43      	ldr	r2, [pc, #268]	; (800ea38 <HAL_DMA_IRQHandler+0xa48>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d022      	beq.n	800e974 <HAL_DMA_IRQHandler+0x984>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a42      	ldr	r2, [pc, #264]	; (800ea3c <HAL_DMA_IRQHandler+0xa4c>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d01d      	beq.n	800e974 <HAL_DMA_IRQHandler+0x984>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a40      	ldr	r2, [pc, #256]	; (800ea40 <HAL_DMA_IRQHandler+0xa50>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d018      	beq.n	800e974 <HAL_DMA_IRQHandler+0x984>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a3f      	ldr	r2, [pc, #252]	; (800ea44 <HAL_DMA_IRQHandler+0xa54>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d013      	beq.n	800e974 <HAL_DMA_IRQHandler+0x984>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a3d      	ldr	r2, [pc, #244]	; (800ea48 <HAL_DMA_IRQHandler+0xa58>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00e      	beq.n	800e974 <HAL_DMA_IRQHandler+0x984>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a3c      	ldr	r2, [pc, #240]	; (800ea4c <HAL_DMA_IRQHandler+0xa5c>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d009      	beq.n	800e974 <HAL_DMA_IRQHandler+0x984>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a3a      	ldr	r2, [pc, #232]	; (800ea50 <HAL_DMA_IRQHandler+0xa60>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d004      	beq.n	800e974 <HAL_DMA_IRQHandler+0x984>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a39      	ldr	r2, [pc, #228]	; (800ea54 <HAL_DMA_IRQHandler+0xa64>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d101      	bne.n	800e978 <HAL_DMA_IRQHandler+0x988>
 800e974:	2301      	movs	r3, #1
 800e976:	e000      	b.n	800e97a <HAL_DMA_IRQHandler+0x98a>
 800e978:	2300      	movs	r3, #0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f000 823f 	beq.w	800edfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e98c:	f003 031f 	and.w	r3, r3, #31
 800e990:	2204      	movs	r2, #4
 800e992:	409a      	lsls	r2, r3
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	4013      	ands	r3, r2
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f000 80cd 	beq.w	800eb38 <HAL_DMA_IRQHandler+0xb48>
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 80c7 	beq.w	800eb38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9ae:	f003 031f 	and.w	r3, r3, #31
 800e9b2:	2204      	movs	r2, #4
 800e9b4:	409a      	lsls	r2, r3
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d049      	beq.n	800ea58 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d109      	bne.n	800e9e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 8210 	beq.w	800edf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e9e0:	e20a      	b.n	800edf8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f000 8206 	beq.w	800edf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e9f4:	e200      	b.n	800edf8 <HAL_DMA_IRQHandler+0xe08>
 800e9f6:	bf00      	nop
 800e9f8:	40020010 	.word	0x40020010
 800e9fc:	40020028 	.word	0x40020028
 800ea00:	40020040 	.word	0x40020040
 800ea04:	40020058 	.word	0x40020058
 800ea08:	40020070 	.word	0x40020070
 800ea0c:	40020088 	.word	0x40020088
 800ea10:	400200a0 	.word	0x400200a0
 800ea14:	400200b8 	.word	0x400200b8
 800ea18:	40020410 	.word	0x40020410
 800ea1c:	40020428 	.word	0x40020428
 800ea20:	40020440 	.word	0x40020440
 800ea24:	40020458 	.word	0x40020458
 800ea28:	40020470 	.word	0x40020470
 800ea2c:	40020488 	.word	0x40020488
 800ea30:	400204a0 	.word	0x400204a0
 800ea34:	400204b8 	.word	0x400204b8
 800ea38:	58025408 	.word	0x58025408
 800ea3c:	5802541c 	.word	0x5802541c
 800ea40:	58025430 	.word	0x58025430
 800ea44:	58025444 	.word	0x58025444
 800ea48:	58025458 	.word	0x58025458
 800ea4c:	5802546c 	.word	0x5802546c
 800ea50:	58025480 	.word	0x58025480
 800ea54:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f003 0320 	and.w	r3, r3, #32
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d160      	bne.n	800eb24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a7f      	ldr	r2, [pc, #508]	; (800ec64 <HAL_DMA_IRQHandler+0xc74>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d04a      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a7d      	ldr	r2, [pc, #500]	; (800ec68 <HAL_DMA_IRQHandler+0xc78>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d045      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a7c      	ldr	r2, [pc, #496]	; (800ec6c <HAL_DMA_IRQHandler+0xc7c>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d040      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a7a      	ldr	r2, [pc, #488]	; (800ec70 <HAL_DMA_IRQHandler+0xc80>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d03b      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a79      	ldr	r2, [pc, #484]	; (800ec74 <HAL_DMA_IRQHandler+0xc84>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d036      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a77      	ldr	r2, [pc, #476]	; (800ec78 <HAL_DMA_IRQHandler+0xc88>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d031      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a76      	ldr	r2, [pc, #472]	; (800ec7c <HAL_DMA_IRQHandler+0xc8c>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d02c      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a74      	ldr	r2, [pc, #464]	; (800ec80 <HAL_DMA_IRQHandler+0xc90>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d027      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a73      	ldr	r2, [pc, #460]	; (800ec84 <HAL_DMA_IRQHandler+0xc94>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d022      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a71      	ldr	r2, [pc, #452]	; (800ec88 <HAL_DMA_IRQHandler+0xc98>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d01d      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a70      	ldr	r2, [pc, #448]	; (800ec8c <HAL_DMA_IRQHandler+0xc9c>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d018      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a6e      	ldr	r2, [pc, #440]	; (800ec90 <HAL_DMA_IRQHandler+0xca0>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d013      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a6d      	ldr	r2, [pc, #436]	; (800ec94 <HAL_DMA_IRQHandler+0xca4>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d00e      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a6b      	ldr	r2, [pc, #428]	; (800ec98 <HAL_DMA_IRQHandler+0xca8>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d009      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a6a      	ldr	r2, [pc, #424]	; (800ec9c <HAL_DMA_IRQHandler+0xcac>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d004      	beq.n	800eb02 <HAL_DMA_IRQHandler+0xb12>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a68      	ldr	r2, [pc, #416]	; (800eca0 <HAL_DMA_IRQHandler+0xcb0>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d108      	bne.n	800eb14 <HAL_DMA_IRQHandler+0xb24>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f022 0208 	bic.w	r2, r2, #8
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	e007      	b.n	800eb24 <HAL_DMA_IRQHandler+0xb34>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f022 0204 	bic.w	r2, r2, #4
 800eb22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f000 8165 	beq.w	800edf8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800eb36:	e15f      	b.n	800edf8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb3c:	f003 031f 	and.w	r3, r3, #31
 800eb40:	2202      	movs	r2, #2
 800eb42:	409a      	lsls	r2, r3
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	4013      	ands	r3, r2
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 80c5 	beq.w	800ecd8 <HAL_DMA_IRQHandler+0xce8>
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	f003 0302 	and.w	r3, r3, #2
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f000 80bf 	beq.w	800ecd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb5e:	f003 031f 	and.w	r3, r3, #31
 800eb62:	2202      	movs	r2, #2
 800eb64:	409a      	lsls	r2, r3
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d018      	beq.n	800eba6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d109      	bne.n	800eb92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 813a 	beq.w	800edfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800eb90:	e134      	b.n	800edfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 8130 	beq.w	800edfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800eba4:	e12a      	b.n	800edfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	f003 0320 	and.w	r3, r3, #32
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 8089 	bne.w	800ecc4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a2b      	ldr	r2, [pc, #172]	; (800ec64 <HAL_DMA_IRQHandler+0xc74>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d04a      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a29      	ldr	r2, [pc, #164]	; (800ec68 <HAL_DMA_IRQHandler+0xc78>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d045      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a28      	ldr	r2, [pc, #160]	; (800ec6c <HAL_DMA_IRQHandler+0xc7c>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d040      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a26      	ldr	r2, [pc, #152]	; (800ec70 <HAL_DMA_IRQHandler+0xc80>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d03b      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a25      	ldr	r2, [pc, #148]	; (800ec74 <HAL_DMA_IRQHandler+0xc84>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d036      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a23      	ldr	r2, [pc, #140]	; (800ec78 <HAL_DMA_IRQHandler+0xc88>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d031      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a22      	ldr	r2, [pc, #136]	; (800ec7c <HAL_DMA_IRQHandler+0xc8c>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d02c      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a20      	ldr	r2, [pc, #128]	; (800ec80 <HAL_DMA_IRQHandler+0xc90>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d027      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4a1f      	ldr	r2, [pc, #124]	; (800ec84 <HAL_DMA_IRQHandler+0xc94>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d022      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a1d      	ldr	r2, [pc, #116]	; (800ec88 <HAL_DMA_IRQHandler+0xc98>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d01d      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a1c      	ldr	r2, [pc, #112]	; (800ec8c <HAL_DMA_IRQHandler+0xc9c>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d018      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4a1a      	ldr	r2, [pc, #104]	; (800ec90 <HAL_DMA_IRQHandler+0xca0>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d013      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a19      	ldr	r2, [pc, #100]	; (800ec94 <HAL_DMA_IRQHandler+0xca4>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d00e      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a17      	ldr	r2, [pc, #92]	; (800ec98 <HAL_DMA_IRQHandler+0xca8>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d009      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4a16      	ldr	r2, [pc, #88]	; (800ec9c <HAL_DMA_IRQHandler+0xcac>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d004      	beq.n	800ec52 <HAL_DMA_IRQHandler+0xc62>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a14      	ldr	r2, [pc, #80]	; (800eca0 <HAL_DMA_IRQHandler+0xcb0>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d128      	bne.n	800eca4 <HAL_DMA_IRQHandler+0xcb4>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f022 0214 	bic.w	r2, r2, #20
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	e027      	b.n	800ecb4 <HAL_DMA_IRQHandler+0xcc4>
 800ec64:	40020010 	.word	0x40020010
 800ec68:	40020028 	.word	0x40020028
 800ec6c:	40020040 	.word	0x40020040
 800ec70:	40020058 	.word	0x40020058
 800ec74:	40020070 	.word	0x40020070
 800ec78:	40020088 	.word	0x40020088
 800ec7c:	400200a0 	.word	0x400200a0
 800ec80:	400200b8 	.word	0x400200b8
 800ec84:	40020410 	.word	0x40020410
 800ec88:	40020428 	.word	0x40020428
 800ec8c:	40020440 	.word	0x40020440
 800ec90:	40020458 	.word	0x40020458
 800ec94:	40020470 	.word	0x40020470
 800ec98:	40020488 	.word	0x40020488
 800ec9c:	400204a0 	.word	0x400204a0
 800eca0:	400204b8 	.word	0x400204b8
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f022 020a 	bic.w	r2, r2, #10
 800ecb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f000 8097 	beq.w	800edfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ecd6:	e091      	b.n	800edfc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecdc:	f003 031f 	and.w	r3, r3, #31
 800ece0:	2208      	movs	r2, #8
 800ece2:	409a      	lsls	r2, r3
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	4013      	ands	r3, r2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 8088 	beq.w	800edfe <HAL_DMA_IRQHandler+0xe0e>
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	f003 0308 	and.w	r3, r3, #8
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f000 8082 	beq.w	800edfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a41      	ldr	r2, [pc, #260]	; (800ee04 <HAL_DMA_IRQHandler+0xe14>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d04a      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a3f      	ldr	r2, [pc, #252]	; (800ee08 <HAL_DMA_IRQHandler+0xe18>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d045      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4a3e      	ldr	r2, [pc, #248]	; (800ee0c <HAL_DMA_IRQHandler+0xe1c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d040      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a3c      	ldr	r2, [pc, #240]	; (800ee10 <HAL_DMA_IRQHandler+0xe20>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d03b      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a3b      	ldr	r2, [pc, #236]	; (800ee14 <HAL_DMA_IRQHandler+0xe24>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d036      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a39      	ldr	r2, [pc, #228]	; (800ee18 <HAL_DMA_IRQHandler+0xe28>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d031      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a38      	ldr	r2, [pc, #224]	; (800ee1c <HAL_DMA_IRQHandler+0xe2c>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d02c      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a36      	ldr	r2, [pc, #216]	; (800ee20 <HAL_DMA_IRQHandler+0xe30>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d027      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a35      	ldr	r2, [pc, #212]	; (800ee24 <HAL_DMA_IRQHandler+0xe34>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d022      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4a33      	ldr	r2, [pc, #204]	; (800ee28 <HAL_DMA_IRQHandler+0xe38>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d01d      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	4a32      	ldr	r2, [pc, #200]	; (800ee2c <HAL_DMA_IRQHandler+0xe3c>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d018      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a30      	ldr	r2, [pc, #192]	; (800ee30 <HAL_DMA_IRQHandler+0xe40>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d013      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4a2f      	ldr	r2, [pc, #188]	; (800ee34 <HAL_DMA_IRQHandler+0xe44>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d00e      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a2d      	ldr	r2, [pc, #180]	; (800ee38 <HAL_DMA_IRQHandler+0xe48>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d009      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a2c      	ldr	r2, [pc, #176]	; (800ee3c <HAL_DMA_IRQHandler+0xe4c>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d004      	beq.n	800ed9a <HAL_DMA_IRQHandler+0xdaa>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a2a      	ldr	r2, [pc, #168]	; (800ee40 <HAL_DMA_IRQHandler+0xe50>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d108      	bne.n	800edac <HAL_DMA_IRQHandler+0xdbc>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f022 021c 	bic.w	r2, r2, #28
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	e007      	b.n	800edbc <HAL_DMA_IRQHandler+0xdcc>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f022 020e 	bic.w	r2, r2, #14
 800edba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edc0:	f003 031f 	and.w	r3, r3, #31
 800edc4:	2201      	movs	r2, #1
 800edc6:	409a      	lsls	r2, r3
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2201      	movs	r2, #1
 800edd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2201      	movs	r2, #1
 800edd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d009      	beq.n	800edfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	4798      	blx	r3
 800edf2:	e004      	b.n	800edfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 800edf4:	bf00      	nop
 800edf6:	e002      	b.n	800edfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800edf8:	bf00      	nop
 800edfa:	e000      	b.n	800edfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800edfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800edfe:	3728      	adds	r7, #40	; 0x28
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	40020010 	.word	0x40020010
 800ee08:	40020028 	.word	0x40020028
 800ee0c:	40020040 	.word	0x40020040
 800ee10:	40020058 	.word	0x40020058
 800ee14:	40020070 	.word	0x40020070
 800ee18:	40020088 	.word	0x40020088
 800ee1c:	400200a0 	.word	0x400200a0
 800ee20:	400200b8 	.word	0x400200b8
 800ee24:	40020410 	.word	0x40020410
 800ee28:	40020428 	.word	0x40020428
 800ee2c:	40020440 	.word	0x40020440
 800ee30:	40020458 	.word	0x40020458
 800ee34:	40020470 	.word	0x40020470
 800ee38:	40020488 	.word	0x40020488
 800ee3c:	400204a0 	.word	0x400204a0
 800ee40:	400204b8 	.word	0x400204b8

0800ee44 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ee52:	b2db      	uxtb	r3, r3
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a7f      	ldr	r2, [pc, #508]	; (800f094 <DMA_SetConfig+0x21c>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d072      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a7d      	ldr	r2, [pc, #500]	; (800f098 <DMA_SetConfig+0x220>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d06d      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a7c      	ldr	r2, [pc, #496]	; (800f09c <DMA_SetConfig+0x224>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d068      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a7a      	ldr	r2, [pc, #488]	; (800f0a0 <DMA_SetConfig+0x228>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d063      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a79      	ldr	r2, [pc, #484]	; (800f0a4 <DMA_SetConfig+0x22c>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d05e      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a77      	ldr	r2, [pc, #476]	; (800f0a8 <DMA_SetConfig+0x230>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d059      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a76      	ldr	r2, [pc, #472]	; (800f0ac <DMA_SetConfig+0x234>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d054      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a74      	ldr	r2, [pc, #464]	; (800f0b0 <DMA_SetConfig+0x238>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d04f      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a73      	ldr	r2, [pc, #460]	; (800f0b4 <DMA_SetConfig+0x23c>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d04a      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a71      	ldr	r2, [pc, #452]	; (800f0b8 <DMA_SetConfig+0x240>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d045      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a70      	ldr	r2, [pc, #448]	; (800f0bc <DMA_SetConfig+0x244>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d040      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a6e      	ldr	r2, [pc, #440]	; (800f0c0 <DMA_SetConfig+0x248>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d03b      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a6d      	ldr	r2, [pc, #436]	; (800f0c4 <DMA_SetConfig+0x24c>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d036      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a6b      	ldr	r2, [pc, #428]	; (800f0c8 <DMA_SetConfig+0x250>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d031      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a6a      	ldr	r2, [pc, #424]	; (800f0cc <DMA_SetConfig+0x254>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d02c      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a68      	ldr	r2, [pc, #416]	; (800f0d0 <DMA_SetConfig+0x258>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d027      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a67      	ldr	r2, [pc, #412]	; (800f0d4 <DMA_SetConfig+0x25c>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d022      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a65      	ldr	r2, [pc, #404]	; (800f0d8 <DMA_SetConfig+0x260>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d01d      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a64      	ldr	r2, [pc, #400]	; (800f0dc <DMA_SetConfig+0x264>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d018      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a62      	ldr	r2, [pc, #392]	; (800f0e0 <DMA_SetConfig+0x268>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d013      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a61      	ldr	r2, [pc, #388]	; (800f0e4 <DMA_SetConfig+0x26c>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d00e      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a5f      	ldr	r2, [pc, #380]	; (800f0e8 <DMA_SetConfig+0x270>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d009      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a5e      	ldr	r2, [pc, #376]	; (800f0ec <DMA_SetConfig+0x274>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d004      	beq.n	800ef82 <DMA_SetConfig+0x10a>
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a5c      	ldr	r2, [pc, #368]	; (800f0f0 <DMA_SetConfig+0x278>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d101      	bne.n	800ef86 <DMA_SetConfig+0x10e>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e000      	b.n	800ef88 <DMA_SetConfig+0x110>
 800ef86:	2300      	movs	r3, #0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00d      	beq.n	800efa8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ef94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d004      	beq.n	800efa8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800efa6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a39      	ldr	r2, [pc, #228]	; (800f094 <DMA_SetConfig+0x21c>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d04a      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a38      	ldr	r2, [pc, #224]	; (800f098 <DMA_SetConfig+0x220>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d045      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a36      	ldr	r2, [pc, #216]	; (800f09c <DMA_SetConfig+0x224>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d040      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a35      	ldr	r2, [pc, #212]	; (800f0a0 <DMA_SetConfig+0x228>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d03b      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a33      	ldr	r2, [pc, #204]	; (800f0a4 <DMA_SetConfig+0x22c>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d036      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4a32      	ldr	r2, [pc, #200]	; (800f0a8 <DMA_SetConfig+0x230>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d031      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a30      	ldr	r2, [pc, #192]	; (800f0ac <DMA_SetConfig+0x234>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d02c      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a2f      	ldr	r2, [pc, #188]	; (800f0b0 <DMA_SetConfig+0x238>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d027      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a2d      	ldr	r2, [pc, #180]	; (800f0b4 <DMA_SetConfig+0x23c>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d022      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a2c      	ldr	r2, [pc, #176]	; (800f0b8 <DMA_SetConfig+0x240>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d01d      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a2a      	ldr	r2, [pc, #168]	; (800f0bc <DMA_SetConfig+0x244>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d018      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4a29      	ldr	r2, [pc, #164]	; (800f0c0 <DMA_SetConfig+0x248>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d013      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a27      	ldr	r2, [pc, #156]	; (800f0c4 <DMA_SetConfig+0x24c>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d00e      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4a26      	ldr	r2, [pc, #152]	; (800f0c8 <DMA_SetConfig+0x250>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d009      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4a24      	ldr	r2, [pc, #144]	; (800f0cc <DMA_SetConfig+0x254>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d004      	beq.n	800f048 <DMA_SetConfig+0x1d0>
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4a23      	ldr	r2, [pc, #140]	; (800f0d0 <DMA_SetConfig+0x258>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d101      	bne.n	800f04c <DMA_SetConfig+0x1d4>
 800f048:	2301      	movs	r3, #1
 800f04a:	e000      	b.n	800f04e <DMA_SetConfig+0x1d6>
 800f04c:	2300      	movs	r3, #0
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d059      	beq.n	800f106 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f056:	f003 031f 	and.w	r3, r3, #31
 800f05a:	223f      	movs	r2, #63	; 0x3f
 800f05c:	409a      	lsls	r2, r3
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f070:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	683a      	ldr	r2, [r7, #0]
 800f078:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	2b40      	cmp	r3, #64	; 0x40
 800f080:	d138      	bne.n	800f0f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	68ba      	ldr	r2, [r7, #8]
 800f090:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800f092:	e086      	b.n	800f1a2 <DMA_SetConfig+0x32a>
 800f094:	40020010 	.word	0x40020010
 800f098:	40020028 	.word	0x40020028
 800f09c:	40020040 	.word	0x40020040
 800f0a0:	40020058 	.word	0x40020058
 800f0a4:	40020070 	.word	0x40020070
 800f0a8:	40020088 	.word	0x40020088
 800f0ac:	400200a0 	.word	0x400200a0
 800f0b0:	400200b8 	.word	0x400200b8
 800f0b4:	40020410 	.word	0x40020410
 800f0b8:	40020428 	.word	0x40020428
 800f0bc:	40020440 	.word	0x40020440
 800f0c0:	40020458 	.word	0x40020458
 800f0c4:	40020470 	.word	0x40020470
 800f0c8:	40020488 	.word	0x40020488
 800f0cc:	400204a0 	.word	0x400204a0
 800f0d0:	400204b8 	.word	0x400204b8
 800f0d4:	58025408 	.word	0x58025408
 800f0d8:	5802541c 	.word	0x5802541c
 800f0dc:	58025430 	.word	0x58025430
 800f0e0:	58025444 	.word	0x58025444
 800f0e4:	58025458 	.word	0x58025458
 800f0e8:	5802546c 	.word	0x5802546c
 800f0ec:	58025480 	.word	0x58025480
 800f0f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	60da      	str	r2, [r3, #12]
}
 800f104:	e04d      	b.n	800f1a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a29      	ldr	r2, [pc, #164]	; (800f1b0 <DMA_SetConfig+0x338>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d022      	beq.n	800f156 <DMA_SetConfig+0x2de>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a27      	ldr	r2, [pc, #156]	; (800f1b4 <DMA_SetConfig+0x33c>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d01d      	beq.n	800f156 <DMA_SetConfig+0x2de>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4a26      	ldr	r2, [pc, #152]	; (800f1b8 <DMA_SetConfig+0x340>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d018      	beq.n	800f156 <DMA_SetConfig+0x2de>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a24      	ldr	r2, [pc, #144]	; (800f1bc <DMA_SetConfig+0x344>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d013      	beq.n	800f156 <DMA_SetConfig+0x2de>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	4a23      	ldr	r2, [pc, #140]	; (800f1c0 <DMA_SetConfig+0x348>)
 800f134:	4293      	cmp	r3, r2
 800f136:	d00e      	beq.n	800f156 <DMA_SetConfig+0x2de>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4a21      	ldr	r2, [pc, #132]	; (800f1c4 <DMA_SetConfig+0x34c>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d009      	beq.n	800f156 <DMA_SetConfig+0x2de>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4a20      	ldr	r2, [pc, #128]	; (800f1c8 <DMA_SetConfig+0x350>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d004      	beq.n	800f156 <DMA_SetConfig+0x2de>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a1e      	ldr	r2, [pc, #120]	; (800f1cc <DMA_SetConfig+0x354>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d101      	bne.n	800f15a <DMA_SetConfig+0x2e2>
 800f156:	2301      	movs	r3, #1
 800f158:	e000      	b.n	800f15c <DMA_SetConfig+0x2e4>
 800f15a:	2300      	movs	r3, #0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d020      	beq.n	800f1a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f164:	f003 031f 	and.w	r3, r3, #31
 800f168:	2201      	movs	r2, #1
 800f16a:	409a      	lsls	r2, r3
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	683a      	ldr	r2, [r7, #0]
 800f176:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	2b40      	cmp	r3, #64	; 0x40
 800f17e:	d108      	bne.n	800f192 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	60da      	str	r2, [r3, #12]
}
 800f190:	e007      	b.n	800f1a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	60da      	str	r2, [r3, #12]
}
 800f1a2:	bf00      	nop
 800f1a4:	371c      	adds	r7, #28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	58025408 	.word	0x58025408
 800f1b4:	5802541c 	.word	0x5802541c
 800f1b8:	58025430 	.word	0x58025430
 800f1bc:	58025444 	.word	0x58025444
 800f1c0:	58025458 	.word	0x58025458
 800f1c4:	5802546c 	.word	0x5802546c
 800f1c8:	58025480 	.word	0x58025480
 800f1cc:	58025494 	.word	0x58025494

0800f1d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a42      	ldr	r2, [pc, #264]	; (800f2e8 <DMA_CalcBaseAndBitshift+0x118>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d04a      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4a41      	ldr	r2, [pc, #260]	; (800f2ec <DMA_CalcBaseAndBitshift+0x11c>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d045      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a3f      	ldr	r2, [pc, #252]	; (800f2f0 <DMA_CalcBaseAndBitshift+0x120>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d040      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a3e      	ldr	r2, [pc, #248]	; (800f2f4 <DMA_CalcBaseAndBitshift+0x124>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d03b      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a3c      	ldr	r2, [pc, #240]	; (800f2f8 <DMA_CalcBaseAndBitshift+0x128>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d036      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4a3b      	ldr	r2, [pc, #236]	; (800f2fc <DMA_CalcBaseAndBitshift+0x12c>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d031      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a39      	ldr	r2, [pc, #228]	; (800f300 <DMA_CalcBaseAndBitshift+0x130>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d02c      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a38      	ldr	r2, [pc, #224]	; (800f304 <DMA_CalcBaseAndBitshift+0x134>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d027      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a36      	ldr	r2, [pc, #216]	; (800f308 <DMA_CalcBaseAndBitshift+0x138>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d022      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4a35      	ldr	r2, [pc, #212]	; (800f30c <DMA_CalcBaseAndBitshift+0x13c>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d01d      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a33      	ldr	r2, [pc, #204]	; (800f310 <DMA_CalcBaseAndBitshift+0x140>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d018      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4a32      	ldr	r2, [pc, #200]	; (800f314 <DMA_CalcBaseAndBitshift+0x144>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d013      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4a30      	ldr	r2, [pc, #192]	; (800f318 <DMA_CalcBaseAndBitshift+0x148>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d00e      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a2f      	ldr	r2, [pc, #188]	; (800f31c <DMA_CalcBaseAndBitshift+0x14c>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d009      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4a2d      	ldr	r2, [pc, #180]	; (800f320 <DMA_CalcBaseAndBitshift+0x150>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d004      	beq.n	800f278 <DMA_CalcBaseAndBitshift+0xa8>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	4a2c      	ldr	r2, [pc, #176]	; (800f324 <DMA_CalcBaseAndBitshift+0x154>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d101      	bne.n	800f27c <DMA_CalcBaseAndBitshift+0xac>
 800f278:	2301      	movs	r3, #1
 800f27a:	e000      	b.n	800f27e <DMA_CalcBaseAndBitshift+0xae>
 800f27c:	2300      	movs	r3, #0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d024      	beq.n	800f2cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	b2db      	uxtb	r3, r3
 800f288:	3b10      	subs	r3, #16
 800f28a:	4a27      	ldr	r2, [pc, #156]	; (800f328 <DMA_CalcBaseAndBitshift+0x158>)
 800f28c:	fba2 2303 	umull	r2, r3, r2, r3
 800f290:	091b      	lsrs	r3, r3, #4
 800f292:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f003 0307 	and.w	r3, r3, #7
 800f29a:	4a24      	ldr	r2, [pc, #144]	; (800f32c <DMA_CalcBaseAndBitshift+0x15c>)
 800f29c:	5cd3      	ldrb	r3, [r2, r3]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2b03      	cmp	r3, #3
 800f2a8:	d908      	bls.n	800f2bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	4b1f      	ldr	r3, [pc, #124]	; (800f330 <DMA_CalcBaseAndBitshift+0x160>)
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	1d1a      	adds	r2, r3, #4
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	659a      	str	r2, [r3, #88]	; 0x58
 800f2ba:	e00d      	b.n	800f2d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4b1b      	ldr	r3, [pc, #108]	; (800f330 <DMA_CalcBaseAndBitshift+0x160>)
 800f2c4:	4013      	ands	r3, r2
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	6593      	str	r3, [r2, #88]	; 0x58
 800f2ca:	e005      	b.n	800f2d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3714      	adds	r7, #20
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	40020010 	.word	0x40020010
 800f2ec:	40020028 	.word	0x40020028
 800f2f0:	40020040 	.word	0x40020040
 800f2f4:	40020058 	.word	0x40020058
 800f2f8:	40020070 	.word	0x40020070
 800f2fc:	40020088 	.word	0x40020088
 800f300:	400200a0 	.word	0x400200a0
 800f304:	400200b8 	.word	0x400200b8
 800f308:	40020410 	.word	0x40020410
 800f30c:	40020428 	.word	0x40020428
 800f310:	40020440 	.word	0x40020440
 800f314:	40020458 	.word	0x40020458
 800f318:	40020470 	.word	0x40020470
 800f31c:	40020488 	.word	0x40020488
 800f320:	400204a0 	.word	0x400204a0
 800f324:	400204b8 	.word	0x400204b8
 800f328:	aaaaaaab 	.word	0xaaaaaaab
 800f32c:	08038be4 	.word	0x08038be4
 800f330:	fffffc00 	.word	0xfffffc00

0800f334 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f334:	b480      	push	{r7}
 800f336:	b085      	sub	sp, #20
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	699b      	ldr	r3, [r3, #24]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d120      	bne.n	800f38a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f34c:	2b03      	cmp	r3, #3
 800f34e:	d858      	bhi.n	800f402 <DMA_CheckFifoParam+0xce>
 800f350:	a201      	add	r2, pc, #4	; (adr r2, 800f358 <DMA_CheckFifoParam+0x24>)
 800f352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f356:	bf00      	nop
 800f358:	0800f369 	.word	0x0800f369
 800f35c:	0800f37b 	.word	0x0800f37b
 800f360:	0800f369 	.word	0x0800f369
 800f364:	0800f403 	.word	0x0800f403
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f36c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f370:	2b00      	cmp	r3, #0
 800f372:	d048      	beq.n	800f406 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800f374:	2301      	movs	r3, #1
 800f376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f378:	e045      	b.n	800f406 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f37e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f382:	d142      	bne.n	800f40a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800f384:	2301      	movs	r3, #1
 800f386:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f388:	e03f      	b.n	800f40a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	699b      	ldr	r3, [r3, #24]
 800f38e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f392:	d123      	bne.n	800f3dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d838      	bhi.n	800f40e <DMA_CheckFifoParam+0xda>
 800f39c:	a201      	add	r2, pc, #4	; (adr r2, 800f3a4 <DMA_CheckFifoParam+0x70>)
 800f39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a2:	bf00      	nop
 800f3a4:	0800f3b5 	.word	0x0800f3b5
 800f3a8:	0800f3bb 	.word	0x0800f3bb
 800f3ac:	0800f3b5 	.word	0x0800f3b5
 800f3b0:	0800f3cd 	.word	0x0800f3cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	73fb      	strb	r3, [r7, #15]
        break;
 800f3b8:	e030      	b.n	800f41c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d025      	beq.n	800f412 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f3ca:	e022      	b.n	800f412 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f3d4:	d11f      	bne.n	800f416 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f3da:	e01c      	b.n	800f416 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d902      	bls.n	800f3ea <DMA_CheckFifoParam+0xb6>
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d003      	beq.n	800f3f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800f3e8:	e018      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	73fb      	strb	r3, [r7, #15]
        break;
 800f3ee:	e015      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d00e      	beq.n	800f41a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f400:	e00b      	b.n	800f41a <DMA_CheckFifoParam+0xe6>
        break;
 800f402:	bf00      	nop
 800f404:	e00a      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
        break;
 800f406:	bf00      	nop
 800f408:	e008      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
        break;
 800f40a:	bf00      	nop
 800f40c:	e006      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
        break;
 800f40e:	bf00      	nop
 800f410:	e004      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
        break;
 800f412:	bf00      	nop
 800f414:	e002      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
        break;
 800f416:	bf00      	nop
 800f418:	e000      	b.n	800f41c <DMA_CheckFifoParam+0xe8>
    break;
 800f41a:	bf00      	nop
    }
  }

  return status;
 800f41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3714      	adds	r7, #20
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop

0800f42c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b085      	sub	sp, #20
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4a38      	ldr	r2, [pc, #224]	; (800f520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d022      	beq.n	800f48a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a36      	ldr	r2, [pc, #216]	; (800f524 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d01d      	beq.n	800f48a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4a35      	ldr	r2, [pc, #212]	; (800f528 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d018      	beq.n	800f48a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4a33      	ldr	r2, [pc, #204]	; (800f52c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d013      	beq.n	800f48a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4a32      	ldr	r2, [pc, #200]	; (800f530 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d00e      	beq.n	800f48a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a30      	ldr	r2, [pc, #192]	; (800f534 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d009      	beq.n	800f48a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4a2f      	ldr	r2, [pc, #188]	; (800f538 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d004      	beq.n	800f48a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a2d      	ldr	r2, [pc, #180]	; (800f53c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d101      	bne.n	800f48e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800f48a:	2301      	movs	r3, #1
 800f48c:	e000      	b.n	800f490 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800f48e:	2300      	movs	r3, #0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d01a      	beq.n	800f4ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	3b08      	subs	r3, #8
 800f49c:	4a28      	ldr	r2, [pc, #160]	; (800f540 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800f49e:	fba2 2303 	umull	r2, r3, r2, r3
 800f4a2:	091b      	lsrs	r3, r3, #4
 800f4a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	4b26      	ldr	r3, [pc, #152]	; (800f544 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800f4aa:	4413      	add	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a24      	ldr	r2, [pc, #144]	; (800f548 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800f4b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f003 031f 	and.w	r3, r3, #31
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	409a      	lsls	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800f4c8:	e024      	b.n	800f514 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	3b10      	subs	r3, #16
 800f4d2:	4a1e      	ldr	r2, [pc, #120]	; (800f54c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800f4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d8:	091b      	lsrs	r3, r3, #4
 800f4da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	4a1c      	ldr	r2, [pc, #112]	; (800f550 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d806      	bhi.n	800f4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	4a1b      	ldr	r2, [pc, #108]	; (800f554 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d902      	bls.n	800f4f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	4b18      	ldr	r3, [pc, #96]	; (800f558 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800f4f6:	4413      	add	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a16      	ldr	r2, [pc, #88]	; (800f55c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800f504:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f003 031f 	and.w	r3, r3, #31
 800f50c:	2201      	movs	r2, #1
 800f50e:	409a      	lsls	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	669a      	str	r2, [r3, #104]	; 0x68
}
 800f514:	bf00      	nop
 800f516:	3714      	adds	r7, #20
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr
 800f520:	58025408 	.word	0x58025408
 800f524:	5802541c 	.word	0x5802541c
 800f528:	58025430 	.word	0x58025430
 800f52c:	58025444 	.word	0x58025444
 800f530:	58025458 	.word	0x58025458
 800f534:	5802546c 	.word	0x5802546c
 800f538:	58025480 	.word	0x58025480
 800f53c:	58025494 	.word	0x58025494
 800f540:	cccccccd 	.word	0xcccccccd
 800f544:	16009600 	.word	0x16009600
 800f548:	58025880 	.word	0x58025880
 800f54c:	aaaaaaab 	.word	0xaaaaaaab
 800f550:	400204b8 	.word	0x400204b8
 800f554:	4002040f 	.word	0x4002040f
 800f558:	10008200 	.word	0x10008200
 800f55c:	40020880 	.word	0x40020880

0800f560 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d04a      	beq.n	800f60c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2b08      	cmp	r3, #8
 800f57a:	d847      	bhi.n	800f60c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a25      	ldr	r2, [pc, #148]	; (800f618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d022      	beq.n	800f5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a24      	ldr	r2, [pc, #144]	; (800f61c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d01d      	beq.n	800f5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a22      	ldr	r2, [pc, #136]	; (800f620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d018      	beq.n	800f5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a21      	ldr	r2, [pc, #132]	; (800f624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d013      	beq.n	800f5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a1f      	ldr	r2, [pc, #124]	; (800f628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d00e      	beq.n	800f5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a1e      	ldr	r2, [pc, #120]	; (800f62c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d009      	beq.n	800f5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a1c      	ldr	r2, [pc, #112]	; (800f630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d004      	beq.n	800f5cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a1b      	ldr	r2, [pc, #108]	; (800f634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d101      	bne.n	800f5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e000      	b.n	800f5d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00a      	beq.n	800f5ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	4b17      	ldr	r3, [pc, #92]	; (800f638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800f5da:	4413      	add	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	461a      	mov	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a15      	ldr	r2, [pc, #84]	; (800f63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800f5e8:	671a      	str	r2, [r3, #112]	; 0x70
 800f5ea:	e009      	b.n	800f600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	4b14      	ldr	r3, [pc, #80]	; (800f640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800f5f0:	4413      	add	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a11      	ldr	r2, [pc, #68]	; (800f644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800f5fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	3b01      	subs	r3, #1
 800f604:	2201      	movs	r2, #1
 800f606:	409a      	lsls	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800f60c:	bf00      	nop
 800f60e:	3714      	adds	r7, #20
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	58025408 	.word	0x58025408
 800f61c:	5802541c 	.word	0x5802541c
 800f620:	58025430 	.word	0x58025430
 800f624:	58025444 	.word	0x58025444
 800f628:	58025458 	.word	0x58025458
 800f62c:	5802546c 	.word	0x5802546c
 800f630:	58025480 	.word	0x58025480
 800f634:	58025494 	.word	0x58025494
 800f638:	1600963f 	.word	0x1600963f
 800f63c:	58025940 	.word	0x58025940
 800f640:	1000823f 	.word	0x1000823f
 800f644:	40020940 	.word	0x40020940

0800f648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f648:	b480      	push	{r7}
 800f64a:	b089      	sub	sp, #36	; 0x24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f652:	2300      	movs	r3, #0
 800f654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f656:	4b89      	ldr	r3, [pc, #548]	; (800f87c <HAL_GPIO_Init+0x234>)
 800f658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f65a:	e194      	b.n	800f986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	2101      	movs	r1, #1
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	fa01 f303 	lsl.w	r3, r1, r3
 800f668:	4013      	ands	r3, r2
 800f66a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f000 8186 	beq.w	800f980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	f003 0303 	and.w	r3, r3, #3
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d005      	beq.n	800f68c <HAL_GPIO_Init+0x44>
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	f003 0303 	and.w	r3, r3, #3
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d130      	bne.n	800f6ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	689b      	ldr	r3, [r3, #8]
 800f690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	2203      	movs	r2, #3
 800f698:	fa02 f303 	lsl.w	r3, r2, r3
 800f69c:	43db      	mvns	r3, r3
 800f69e:	69ba      	ldr	r2, [r7, #24]
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	68da      	ldr	r2, [r3, #12]
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	005b      	lsls	r3, r3, #1
 800f6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f6b0:	69ba      	ldr	r2, [r7, #24]
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	69ba      	ldr	r2, [r7, #24]
 800f6ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ca:	43db      	mvns	r3, r3
 800f6cc:	69ba      	ldr	r2, [r7, #24]
 800f6ce:	4013      	ands	r3, r2
 800f6d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	091b      	lsrs	r3, r3, #4
 800f6d8:	f003 0201 	and.w	r2, r3, #1
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	fa02 f303 	lsl.w	r3, r2, r3
 800f6e2:	69ba      	ldr	r2, [r7, #24]
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	69ba      	ldr	r2, [r7, #24]
 800f6ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	f003 0303 	and.w	r3, r3, #3
 800f6f6:	2b03      	cmp	r3, #3
 800f6f8:	d017      	beq.n	800f72a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	005b      	lsls	r3, r3, #1
 800f704:	2203      	movs	r2, #3
 800f706:	fa02 f303 	lsl.w	r3, r2, r3
 800f70a:	43db      	mvns	r3, r3
 800f70c:	69ba      	ldr	r2, [r7, #24]
 800f70e:	4013      	ands	r3, r2
 800f710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	689a      	ldr	r2, [r3, #8]
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	005b      	lsls	r3, r3, #1
 800f71a:	fa02 f303 	lsl.w	r3, r2, r3
 800f71e:	69ba      	ldr	r2, [r7, #24]
 800f720:	4313      	orrs	r3, r2
 800f722:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	69ba      	ldr	r2, [r7, #24]
 800f728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	f003 0303 	and.w	r3, r3, #3
 800f732:	2b02      	cmp	r3, #2
 800f734:	d123      	bne.n	800f77e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	08da      	lsrs	r2, r3, #3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	3208      	adds	r2, #8
 800f73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	f003 0307 	and.w	r3, r3, #7
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	220f      	movs	r2, #15
 800f74e:	fa02 f303 	lsl.w	r3, r2, r3
 800f752:	43db      	mvns	r3, r3
 800f754:	69ba      	ldr	r2, [r7, #24]
 800f756:	4013      	ands	r3, r2
 800f758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	691a      	ldr	r2, [r3, #16]
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	f003 0307 	and.w	r3, r3, #7
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	fa02 f303 	lsl.w	r3, r2, r3
 800f76a:	69ba      	ldr	r2, [r7, #24]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	08da      	lsrs	r2, r3, #3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	3208      	adds	r2, #8
 800f778:	69b9      	ldr	r1, [r7, #24]
 800f77a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	005b      	lsls	r3, r3, #1
 800f788:	2203      	movs	r2, #3
 800f78a:	fa02 f303 	lsl.w	r3, r2, r3
 800f78e:	43db      	mvns	r3, r3
 800f790:	69ba      	ldr	r2, [r7, #24]
 800f792:	4013      	ands	r3, r2
 800f794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	f003 0203 	and.w	r2, r3, #3
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	005b      	lsls	r3, r3, #1
 800f7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800f7a6:	69ba      	ldr	r2, [r7, #24]
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	69ba      	ldr	r2, [r7, #24]
 800f7b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 80e0 	beq.w	800f980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f7c0:	4b2f      	ldr	r3, [pc, #188]	; (800f880 <HAL_GPIO_Init+0x238>)
 800f7c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7c6:	4a2e      	ldr	r2, [pc, #184]	; (800f880 <HAL_GPIO_Init+0x238>)
 800f7c8:	f043 0302 	orr.w	r3, r3, #2
 800f7cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f7d0:	4b2b      	ldr	r3, [pc, #172]	; (800f880 <HAL_GPIO_Init+0x238>)
 800f7d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7d6:	f003 0302 	and.w	r3, r3, #2
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f7de:	4a29      	ldr	r2, [pc, #164]	; (800f884 <HAL_GPIO_Init+0x23c>)
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	089b      	lsrs	r3, r3, #2
 800f7e4:	3302      	adds	r3, #2
 800f7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	f003 0303 	and.w	r3, r3, #3
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	220f      	movs	r2, #15
 800f7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f7fa:	43db      	mvns	r3, r3
 800f7fc:	69ba      	ldr	r2, [r7, #24]
 800f7fe:	4013      	ands	r3, r2
 800f800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4a20      	ldr	r2, [pc, #128]	; (800f888 <HAL_GPIO_Init+0x240>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d052      	beq.n	800f8b0 <HAL_GPIO_Init+0x268>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a1f      	ldr	r2, [pc, #124]	; (800f88c <HAL_GPIO_Init+0x244>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d031      	beq.n	800f876 <HAL_GPIO_Init+0x22e>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a1e      	ldr	r2, [pc, #120]	; (800f890 <HAL_GPIO_Init+0x248>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d02b      	beq.n	800f872 <HAL_GPIO_Init+0x22a>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a1d      	ldr	r2, [pc, #116]	; (800f894 <HAL_GPIO_Init+0x24c>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d025      	beq.n	800f86e <HAL_GPIO_Init+0x226>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a1c      	ldr	r2, [pc, #112]	; (800f898 <HAL_GPIO_Init+0x250>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d01f      	beq.n	800f86a <HAL_GPIO_Init+0x222>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a1b      	ldr	r2, [pc, #108]	; (800f89c <HAL_GPIO_Init+0x254>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d019      	beq.n	800f866 <HAL_GPIO_Init+0x21e>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4a1a      	ldr	r2, [pc, #104]	; (800f8a0 <HAL_GPIO_Init+0x258>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d013      	beq.n	800f862 <HAL_GPIO_Init+0x21a>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a19      	ldr	r2, [pc, #100]	; (800f8a4 <HAL_GPIO_Init+0x25c>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d00d      	beq.n	800f85e <HAL_GPIO_Init+0x216>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a18      	ldr	r2, [pc, #96]	; (800f8a8 <HAL_GPIO_Init+0x260>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d007      	beq.n	800f85a <HAL_GPIO_Init+0x212>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a17      	ldr	r2, [pc, #92]	; (800f8ac <HAL_GPIO_Init+0x264>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d101      	bne.n	800f856 <HAL_GPIO_Init+0x20e>
 800f852:	2309      	movs	r3, #9
 800f854:	e02d      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f856:	230a      	movs	r3, #10
 800f858:	e02b      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f85a:	2308      	movs	r3, #8
 800f85c:	e029      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f85e:	2307      	movs	r3, #7
 800f860:	e027      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f862:	2306      	movs	r3, #6
 800f864:	e025      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f866:	2305      	movs	r3, #5
 800f868:	e023      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f86a:	2304      	movs	r3, #4
 800f86c:	e021      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f86e:	2303      	movs	r3, #3
 800f870:	e01f      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f872:	2302      	movs	r3, #2
 800f874:	e01d      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f876:	2301      	movs	r3, #1
 800f878:	e01b      	b.n	800f8b2 <HAL_GPIO_Init+0x26a>
 800f87a:	bf00      	nop
 800f87c:	58000080 	.word	0x58000080
 800f880:	58024400 	.word	0x58024400
 800f884:	58000400 	.word	0x58000400
 800f888:	58020000 	.word	0x58020000
 800f88c:	58020400 	.word	0x58020400
 800f890:	58020800 	.word	0x58020800
 800f894:	58020c00 	.word	0x58020c00
 800f898:	58021000 	.word	0x58021000
 800f89c:	58021400 	.word	0x58021400
 800f8a0:	58021800 	.word	0x58021800
 800f8a4:	58021c00 	.word	0x58021c00
 800f8a8:	58022000 	.word	0x58022000
 800f8ac:	58022400 	.word	0x58022400
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	69fa      	ldr	r2, [r7, #28]
 800f8b4:	f002 0203 	and.w	r2, r2, #3
 800f8b8:	0092      	lsls	r2, r2, #2
 800f8ba:	4093      	lsls	r3, r2
 800f8bc:	69ba      	ldr	r2, [r7, #24]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f8c2:	4938      	ldr	r1, [pc, #224]	; (800f9a4 <HAL_GPIO_Init+0x35c>)
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	089b      	lsrs	r3, r3, #2
 800f8c8:	3302      	adds	r3, #2
 800f8ca:	69ba      	ldr	r2, [r7, #24]
 800f8cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f8d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	43db      	mvns	r3, r3
 800f8dc:	69ba      	ldr	r2, [r7, #24]
 800f8de:	4013      	ands	r3, r2
 800f8e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800f8ee:	69ba      	ldr	r2, [r7, #24]
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800f8f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	43db      	mvns	r3, r3
 800f90a:	69ba      	ldr	r2, [r7, #24]
 800f90c:	4013      	ands	r3, r2
 800f90e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d003      	beq.n	800f924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f91c:	69ba      	ldr	r2, [r7, #24]
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	4313      	orrs	r3, r2
 800f922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800f924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	43db      	mvns	r3, r3
 800f936:	69ba      	ldr	r2, [r7, #24]
 800f938:	4013      	ands	r3, r2
 800f93a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f944:	2b00      	cmp	r3, #0
 800f946:	d003      	beq.n	800f950 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800f948:	69ba      	ldr	r2, [r7, #24]
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	69ba      	ldr	r2, [r7, #24]
 800f954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	43db      	mvns	r3, r3
 800f960:	69ba      	ldr	r2, [r7, #24]
 800f962:	4013      	ands	r3, r2
 800f964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d003      	beq.n	800f97a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800f972:	69ba      	ldr	r2, [r7, #24]
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	4313      	orrs	r3, r2
 800f978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	69ba      	ldr	r2, [r7, #24]
 800f97e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	3301      	adds	r3, #1
 800f984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	fa22 f303 	lsr.w	r3, r2, r3
 800f990:	2b00      	cmp	r3, #0
 800f992:	f47f ae63 	bne.w	800f65c <HAL_GPIO_Init+0x14>
  }
}
 800f996:	bf00      	nop
 800f998:	bf00      	nop
 800f99a:	3724      	adds	r7, #36	; 0x24
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr
 800f9a4:	58000400 	.word	0x58000400

0800f9a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	807b      	strh	r3, [r7, #2]
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f9b8:	787b      	ldrb	r3, [r7, #1]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d003      	beq.n	800f9c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f9be:	887a      	ldrh	r2, [r7, #2]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800f9c4:	e003      	b.n	800f9ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f9c6:	887b      	ldrh	r3, [r7, #2]
 800f9c8:	041a      	lsls	r2, r3, #16
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	619a      	str	r2, [r3, #24]
}
 800f9ce:	bf00      	nop
 800f9d0:	370c      	adds	r7, #12
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
	...

0800f9dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d101      	bne.n	800f9ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e07f      	b.n	800faee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9f4:	b2db      	uxtb	r3, r3
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d106      	bne.n	800fa08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7fa ffb4 	bl	800a970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2224      	movs	r2, #36	; 0x24
 800fa0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f022 0201 	bic.w	r2, r2, #1
 800fa1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	685a      	ldr	r2, [r3, #4]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fa2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	689a      	ldr	r2, [r3, #8]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fa3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d107      	bne.n	800fa56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	689a      	ldr	r2, [r3, #8]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa52:	609a      	str	r2, [r3, #8]
 800fa54:	e006      	b.n	800fa64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	689a      	ldr	r2, [r3, #8]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800fa62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	2b02      	cmp	r3, #2
 800fa6a:	d104      	bne.n	800fa76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6859      	ldr	r1, [r3, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	4b1d      	ldr	r3, [pc, #116]	; (800faf8 <HAL_I2C_Init+0x11c>)
 800fa82:	430b      	orrs	r3, r1
 800fa84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68da      	ldr	r2, [r3, #12]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fa94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	691a      	ldr	r2, [r3, #16]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	695b      	ldr	r3, [r3, #20]
 800fa9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	699b      	ldr	r3, [r3, #24]
 800faa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	430a      	orrs	r2, r1
 800faae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	69d9      	ldr	r1, [r3, #28]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a1a      	ldr	r2, [r3, #32]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	430a      	orrs	r2, r1
 800fabe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f042 0201 	orr.w	r2, r2, #1
 800face:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2220      	movs	r2, #32
 800fada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	02008000 	.word	0x02008000

0800fafc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	699b      	ldr	r3, [r3, #24]
 800fb0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d005      	beq.n	800fb28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb20:	68ba      	ldr	r2, [r7, #8]
 800fb22:	68f9      	ldr	r1, [r7, #12]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	4798      	blx	r3
  }
}
 800fb28:	bf00      	nop
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	699b      	ldr	r3, [r3, #24]
 800fb3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	0a1b      	lsrs	r3, r3, #8
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d010      	beq.n	800fb76 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	09db      	lsrs	r3, r3, #7
 800fb58:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00a      	beq.n	800fb76 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb64:	f043 0201 	orr.w	r2, r3, #1
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	0a9b      	lsrs	r3, r3, #10
 800fb7a:	f003 0301 	and.w	r3, r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d010      	beq.n	800fba4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	09db      	lsrs	r3, r3, #7
 800fb86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00a      	beq.n	800fba4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb92:	f043 0208 	orr.w	r2, r3, #8
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fba2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	0a5b      	lsrs	r3, r3, #9
 800fba8:	f003 0301 	and.w	r3, r3, #1
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d010      	beq.n	800fbd2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	09db      	lsrs	r3, r3, #7
 800fbb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00a      	beq.n	800fbd2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbc0:	f043 0202 	orr.w	r2, r3, #2
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbd0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbd6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f003 030b 	and.w	r3, r3, #11
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d003      	beq.n	800fbea <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800fbe2:	68f9      	ldr	r1, [r7, #12]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 fc77 	bl	80104d8 <I2C_ITError>
  }
}
 800fbea:	bf00      	nop
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b083      	sub	sp, #12
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800fbfa:	bf00      	nop
 800fbfc:	370c      	adds	r7, #12
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fc06:	b480      	push	{r7}
 800fc08:	b083      	sub	sp, #12
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800fc0e:	bf00      	nop
 800fc10:	370c      	adds	r7, #12
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	460b      	mov	r3, r1
 800fc24:	70fb      	strb	r3, [r7, #3]
 800fc26:	4613      	mov	r3, r2
 800fc28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800fc2a:	bf00      	nop
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr

0800fc36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fc36:	b480      	push	{r7}
 800fc38:	b083      	sub	sp, #12
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800fc3e:	bf00      	nop
 800fc40:	370c      	adds	r7, #12
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr

0800fc4a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fc4a:	b480      	push	{r7}
 800fc4c:	b083      	sub	sp, #12
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800fc52:	bf00      	nop
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fc5e:	b480      	push	{r7}
 800fc60:	b083      	sub	sp, #12
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800fc66:	bf00      	nop
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr

0800fc72 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b086      	sub	sp, #24
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	60f8      	str	r0, [r7, #12]
 800fc7a:	60b9      	str	r1, [r7, #8]
 800fc7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc82:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d101      	bne.n	800fc96 <I2C_Slave_ISR_IT+0x24>
 800fc92:	2302      	movs	r3, #2
 800fc94:	e0ec      	b.n	800fe70 <I2C_Slave_ISR_IT+0x1fe>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	095b      	lsrs	r3, r3, #5
 800fca2:	f003 0301 	and.w	r3, r3, #1
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d009      	beq.n	800fcbe <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	095b      	lsrs	r3, r3, #5
 800fcae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d003      	beq.n	800fcbe <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800fcb6:	6939      	ldr	r1, [r7, #16]
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	f000 f9bf 	bl	801003c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	091b      	lsrs	r3, r3, #4
 800fcc2:	f003 0301 	and.w	r3, r3, #1
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d04d      	beq.n	800fd66 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	091b      	lsrs	r3, r3, #4
 800fcce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d047      	beq.n	800fd66 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d128      	bne.n	800fd32 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	2b28      	cmp	r3, #40	; 0x28
 800fcea:	d108      	bne.n	800fcfe <I2C_Slave_ISR_IT+0x8c>
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fcf2:	d104      	bne.n	800fcfe <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800fcf4:	6939      	ldr	r1, [r7, #16]
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f000 fb98 	bl	801042c <I2C_ITListenCplt>
 800fcfc:	e032      	b.n	800fd64 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	2b29      	cmp	r3, #41	; 0x29
 800fd08:	d10e      	bne.n	800fd28 <I2C_Slave_ISR_IT+0xb6>
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fd10:	d00a      	beq.n	800fd28 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2210      	movs	r2, #16
 800fd18:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f000 fcd3 	bl	80106c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f000 f92d 	bl	800ff80 <I2C_ITSlaveSeqCplt>
 800fd26:	e01d      	b.n	800fd64 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2210      	movs	r2, #16
 800fd2e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fd30:	e096      	b.n	800fe60 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2210      	movs	r2, #16
 800fd38:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd3e:	f043 0204 	orr.w	r2, r3, #4
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d004      	beq.n	800fd56 <I2C_Slave_ISR_IT+0xe4>
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fd52:	f040 8085 	bne.w	800fe60 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f000 fbbb 	bl	80104d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fd62:	e07d      	b.n	800fe60 <I2C_Slave_ISR_IT+0x1ee>
 800fd64:	e07c      	b.n	800fe60 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	089b      	lsrs	r3, r3, #2
 800fd6a:	f003 0301 	and.w	r3, r3, #1
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d030      	beq.n	800fdd4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	089b      	lsrs	r3, r3, #2
 800fd76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d02a      	beq.n	800fdd4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d018      	beq.n	800fdba <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd92:	b2d2      	uxtb	r2, r2
 800fd94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fda4:	3b01      	subs	r3, #1
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d14f      	bne.n	800fe64 <I2C_Slave_ISR_IT+0x1f2>
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fdca:	d04b      	beq.n	800fe64 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f000 f8d7 	bl	800ff80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fdd2:	e047      	b.n	800fe64 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	08db      	lsrs	r3, r3, #3
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00a      	beq.n	800fdf6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	08db      	lsrs	r3, r3, #3
 800fde4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d004      	beq.n	800fdf6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fdec:	6939      	ldr	r1, [r7, #16]
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f000 f842 	bl	800fe78 <I2C_ITAddrCplt>
 800fdf4:	e037      	b.n	800fe66 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	085b      	lsrs	r3, r3, #1
 800fdfa:	f003 0301 	and.w	r3, r3, #1
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d031      	beq.n	800fe66 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	085b      	lsrs	r3, r3, #1
 800fe06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d02b      	beq.n	800fe66 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d018      	beq.n	800fe4a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1c:	781a      	ldrb	r2, [r3, #0]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	3b01      	subs	r3, #1
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe40:	3b01      	subs	r3, #1
 800fe42:	b29a      	uxth	r2, r3
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	851a      	strh	r2, [r3, #40]	; 0x28
 800fe48:	e00d      	b.n	800fe66 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fe50:	d002      	beq.n	800fe58 <I2C_Slave_ISR_IT+0x1e6>
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d106      	bne.n	800fe66 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f000 f891 	bl	800ff80 <I2C_ITSlaveSeqCplt>
 800fe5e:	e002      	b.n	800fe66 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800fe60:	bf00      	nop
 800fe62:	e000      	b.n	800fe66 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fe64:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fe6e:	2300      	movs	r3, #0
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fe8e:	2b28      	cmp	r3, #40	; 0x28
 800fe90:	d16a      	bne.n	800ff68 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	0c1b      	lsrs	r3, r3, #16
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	f003 0301 	and.w	r3, r3, #1
 800fea0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	699b      	ldr	r3, [r3, #24]
 800fea8:	0c1b      	lsrs	r3, r3, #16
 800feaa:	b29b      	uxth	r3, r3
 800feac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800feb0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	b29b      	uxth	r3, r3
 800feba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800febe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fecc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	2b02      	cmp	r3, #2
 800fed4:	d138      	bne.n	800ff48 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fed6:	897b      	ldrh	r3, [r7, #10]
 800fed8:	09db      	lsrs	r3, r3, #7
 800feda:	b29a      	uxth	r2, r3
 800fedc:	89bb      	ldrh	r3, [r7, #12]
 800fede:	4053      	eors	r3, r2
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	f003 0306 	and.w	r3, r3, #6
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d11c      	bne.n	800ff24 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800feea:	897b      	ldrh	r3, [r7, #10]
 800feec:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fef2:	1c5a      	adds	r2, r3, #1
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d13b      	bne.n	800ff78 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2208      	movs	r2, #8
 800ff0c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff16:	89ba      	ldrh	r2, [r7, #12]
 800ff18:	7bfb      	ldrb	r3, [r7, #15]
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7ff fe7c 	bl	800fc1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ff22:	e029      	b.n	800ff78 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ff24:	893b      	ldrh	r3, [r7, #8]
 800ff26:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fc0c 	bl	801074a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff3a:	89ba      	ldrh	r2, [r7, #12]
 800ff3c:	7bfb      	ldrb	r3, [r7, #15]
 800ff3e:	4619      	mov	r1, r3
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff fe6a 	bl	800fc1a <HAL_I2C_AddrCallback>
}
 800ff46:	e017      	b.n	800ff78 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fbfc 	bl	801074a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff5a:	89ba      	ldrh	r2, [r7, #12]
 800ff5c:	7bfb      	ldrb	r3, [r7, #15]
 800ff5e:	4619      	mov	r1, r3
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7ff fe5a 	bl	800fc1a <HAL_I2C_AddrCallback>
}
 800ff66:	e007      	b.n	800ff78 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2208      	movs	r2, #8
 800ff6e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ff78:	bf00      	nop
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	0b9b      	lsrs	r3, r3, #14
 800ff9c:	f003 0301 	and.w	r3, r3, #1
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d008      	beq.n	800ffb6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ffb2:	601a      	str	r2, [r3, #0]
 800ffb4:	e00d      	b.n	800ffd2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	0bdb      	lsrs	r3, r3, #15
 800ffba:	f003 0301 	and.w	r3, r3, #1
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d007      	beq.n	800ffd2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681a      	ldr	r2, [r3, #0]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ffd0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b29      	cmp	r3, #41	; 0x29
 800ffdc:	d112      	bne.n	8010004 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2228      	movs	r2, #40	; 0x28
 800ffe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2221      	movs	r2, #33	; 0x21
 800ffea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ffec:	2101      	movs	r1, #1
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 fbab 	bl	801074a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7ff fdf8 	bl	800fbf2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010002:	e017      	b.n	8010034 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801000a:	b2db      	uxtb	r3, r3
 801000c:	2b2a      	cmp	r3, #42	; 0x2a
 801000e:	d111      	bne.n	8010034 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2228      	movs	r2, #40	; 0x28
 8010014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2222      	movs	r2, #34	; 0x22
 801001c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801001e:	2102      	movs	r1, #2
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fb92 	bl	801074a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7ff fde9 	bl	800fc06 <HAL_I2C_SlaveRxCpltCallback>
}
 8010034:	bf00      	nop
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b086      	sub	sp, #24
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010058:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2220      	movs	r2, #32
 8010060:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010062:	7bfb      	ldrb	r3, [r7, #15]
 8010064:	2b21      	cmp	r3, #33	; 0x21
 8010066:	d002      	beq.n	801006e <I2C_ITSlaveCplt+0x32>
 8010068:	7bfb      	ldrb	r3, [r7, #15]
 801006a:	2b29      	cmp	r3, #41	; 0x29
 801006c:	d108      	bne.n	8010080 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801006e:	f248 0101 	movw	r1, #32769	; 0x8001
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fb69 	bl	801074a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2221      	movs	r2, #33	; 0x21
 801007c:	631a      	str	r2, [r3, #48]	; 0x30
 801007e:	e00d      	b.n	801009c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010080:	7bfb      	ldrb	r3, [r7, #15]
 8010082:	2b22      	cmp	r3, #34	; 0x22
 8010084:	d002      	beq.n	801008c <I2C_ITSlaveCplt+0x50>
 8010086:	7bfb      	ldrb	r3, [r7, #15]
 8010088:	2b2a      	cmp	r3, #42	; 0x2a
 801008a:	d107      	bne.n	801009c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801008c:	f248 0102 	movw	r1, #32770	; 0x8002
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 fb5a 	bl	801074a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2222      	movs	r2, #34	; 0x22
 801009a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80100aa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	6859      	ldr	r1, [r3, #4]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	4b80      	ldr	r3, [pc, #512]	; (80102b8 <I2C_ITSlaveCplt+0x27c>)
 80100b8:	400b      	ands	r3, r1
 80100ba:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fb02 	bl	80106c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	0b9b      	lsrs	r3, r3, #14
 80100c6:	f003 0301 	and.w	r3, r3, #1
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d07a      	beq.n	80101c4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80100dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 8111 	beq.w	801030a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4a73      	ldr	r2, [pc, #460]	; (80102bc <I2C_ITSlaveCplt+0x280>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d059      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a71      	ldr	r2, [pc, #452]	; (80102c0 <I2C_ITSlaveCplt+0x284>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d053      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a6f      	ldr	r2, [pc, #444]	; (80102c4 <I2C_ITSlaveCplt+0x288>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d04d      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a6d      	ldr	r2, [pc, #436]	; (80102c8 <I2C_ITSlaveCplt+0x28c>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d047      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4a6b      	ldr	r2, [pc, #428]	; (80102cc <I2C_ITSlaveCplt+0x290>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d041      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a69      	ldr	r2, [pc, #420]	; (80102d0 <I2C_ITSlaveCplt+0x294>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d03b      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a67      	ldr	r2, [pc, #412]	; (80102d4 <I2C_ITSlaveCplt+0x298>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d035      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4a65      	ldr	r2, [pc, #404]	; (80102d8 <I2C_ITSlaveCplt+0x29c>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d02f      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a63      	ldr	r2, [pc, #396]	; (80102dc <I2C_ITSlaveCplt+0x2a0>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d029      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a61      	ldr	r2, [pc, #388]	; (80102e0 <I2C_ITSlaveCplt+0x2a4>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d023      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4a5f      	ldr	r2, [pc, #380]	; (80102e4 <I2C_ITSlaveCplt+0x2a8>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d01d      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4a5d      	ldr	r2, [pc, #372]	; (80102e8 <I2C_ITSlaveCplt+0x2ac>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d017      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4a5b      	ldr	r2, [pc, #364]	; (80102ec <I2C_ITSlaveCplt+0x2b0>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d011      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a59      	ldr	r2, [pc, #356]	; (80102f0 <I2C_ITSlaveCplt+0x2b4>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d00b      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4a57      	ldr	r2, [pc, #348]	; (80102f4 <I2C_ITSlaveCplt+0x2b8>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d005      	beq.n	80101a8 <I2C_ITSlaveCplt+0x16c>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4a55      	ldr	r2, [pc, #340]	; (80102f8 <I2C_ITSlaveCplt+0x2bc>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d105      	bne.n	80101b4 <I2C_ITSlaveCplt+0x178>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	e004      	b.n	80101be <I2C_ITSlaveCplt+0x182>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	b29b      	uxth	r3, r3
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	8553      	strh	r3, [r2, #42]	; 0x2a
 80101c2:	e0a2      	b.n	801030a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	0bdb      	lsrs	r3, r3, #15
 80101c8:	f003 0301 	and.w	r3, r3, #1
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f000 809c 	beq.w	801030a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80101e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	f000 808f 	beq.w	801030a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	4a32      	ldr	r2, [pc, #200]	; (80102bc <I2C_ITSlaveCplt+0x280>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d059      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	4a30      	ldr	r2, [pc, #192]	; (80102c0 <I2C_ITSlaveCplt+0x284>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d053      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4a2e      	ldr	r2, [pc, #184]	; (80102c4 <I2C_ITSlaveCplt+0x288>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d04d      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a2c      	ldr	r2, [pc, #176]	; (80102c8 <I2C_ITSlaveCplt+0x28c>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d047      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	4a2a      	ldr	r2, [pc, #168]	; (80102cc <I2C_ITSlaveCplt+0x290>)
 8010224:	4293      	cmp	r3, r2
 8010226:	d041      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4a28      	ldr	r2, [pc, #160]	; (80102d0 <I2C_ITSlaveCplt+0x294>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d03b      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4a26      	ldr	r2, [pc, #152]	; (80102d4 <I2C_ITSlaveCplt+0x298>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d035      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4a24      	ldr	r2, [pc, #144]	; (80102d8 <I2C_ITSlaveCplt+0x29c>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d02f      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4a22      	ldr	r2, [pc, #136]	; (80102dc <I2C_ITSlaveCplt+0x2a0>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d029      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4a20      	ldr	r2, [pc, #128]	; (80102e0 <I2C_ITSlaveCplt+0x2a4>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d023      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a1e      	ldr	r2, [pc, #120]	; (80102e4 <I2C_ITSlaveCplt+0x2a8>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d01d      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4a1c      	ldr	r2, [pc, #112]	; (80102e8 <I2C_ITSlaveCplt+0x2ac>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d017      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	4a1a      	ldr	r2, [pc, #104]	; (80102ec <I2C_ITSlaveCplt+0x2b0>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d011      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a18      	ldr	r2, [pc, #96]	; (80102f0 <I2C_ITSlaveCplt+0x2b4>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d00b      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a16      	ldr	r2, [pc, #88]	; (80102f4 <I2C_ITSlaveCplt+0x2b8>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d005      	beq.n	80102ac <I2C_ITSlaveCplt+0x270>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4a14      	ldr	r2, [pc, #80]	; (80102f8 <I2C_ITSlaveCplt+0x2bc>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d127      	bne.n	80102fc <I2C_ITSlaveCplt+0x2c0>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	e026      	b.n	8010306 <I2C_ITSlaveCplt+0x2ca>
 80102b8:	fe00e800 	.word	0xfe00e800
 80102bc:	40020010 	.word	0x40020010
 80102c0:	40020028 	.word	0x40020028
 80102c4:	40020040 	.word	0x40020040
 80102c8:	40020058 	.word	0x40020058
 80102cc:	40020070 	.word	0x40020070
 80102d0:	40020088 	.word	0x40020088
 80102d4:	400200a0 	.word	0x400200a0
 80102d8:	400200b8 	.word	0x400200b8
 80102dc:	40020410 	.word	0x40020410
 80102e0:	40020428 	.word	0x40020428
 80102e4:	40020440 	.word	0x40020440
 80102e8:	40020458 	.word	0x40020458
 80102ec:	40020470 	.word	0x40020470
 80102f0:	40020488 	.word	0x40020488
 80102f4:	400204a0 	.word	0x400204a0
 80102f8:	400204b8 	.word	0x400204b8
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	b29b      	uxth	r3, r3
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	089b      	lsrs	r3, r3, #2
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d020      	beq.n	8010358 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	f023 0304 	bic.w	r3, r3, #4
 801031c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	b2d2      	uxtb	r2, r2
 801032a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00c      	beq.n	8010358 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010342:	3b01      	subs	r3, #1
 8010344:	b29a      	uxth	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801034e:	b29b      	uxth	r3, r3
 8010350:	3b01      	subs	r3, #1
 8010352:	b29a      	uxth	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801035c:	b29b      	uxth	r3, r3
 801035e:	2b00      	cmp	r3, #0
 8010360:	d005      	beq.n	801036e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010366:	f043 0204 	orr.w	r2, r3, #4
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010380:	2b00      	cmp	r3, #0
 8010382:	d010      	beq.n	80103a6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 f8a4 	bl	80104d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b28      	cmp	r3, #40	; 0x28
 801039a:	d141      	bne.n	8010420 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801039c:	6979      	ldr	r1, [r7, #20]
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f844 	bl	801042c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80103a4:	e03c      	b.n	8010420 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80103ae:	d014      	beq.n	80103da <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f7ff fde5 	bl	800ff80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a1b      	ldr	r2, [pc, #108]	; (8010428 <I2C_ITSlaveCplt+0x3ec>)
 80103ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2220      	movs	r2, #32
 80103c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7ff fc2f 	bl	800fc36 <HAL_I2C_ListenCpltCallback>
}
 80103d8:	e022      	b.n	8010420 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	2b22      	cmp	r3, #34	; 0x22
 80103e4:	d10e      	bne.n	8010404 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2220      	movs	r2, #32
 80103ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff fc02 	bl	800fc06 <HAL_I2C_SlaveRxCpltCallback>
}
 8010402:	e00d      	b.n	8010420 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2220      	movs	r2, #32
 8010408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7ff fbe9 	bl	800fbf2 <HAL_I2C_SlaveTxCpltCallback>
}
 8010420:	bf00      	nop
 8010422:	3718      	adds	r7, #24
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	ffff0000 	.word	0xffff0000

0801042c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4a26      	ldr	r2, [pc, #152]	; (80104d4 <I2C_ITListenCplt+0xa8>)
 801043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2220      	movs	r2, #32
 8010446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2200      	movs	r2, #0
 8010456:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	089b      	lsrs	r3, r3, #2
 801045c:	f003 0301 	and.w	r3, r3, #1
 8010460:	2b00      	cmp	r3, #0
 8010462:	d022      	beq.n	80104aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046e:	b2d2      	uxtb	r2, r2
 8010470:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010476:	1c5a      	adds	r2, r3, #1
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010480:	2b00      	cmp	r3, #0
 8010482:	d012      	beq.n	80104aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010488:	3b01      	subs	r3, #1
 801048a:	b29a      	uxth	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010494:	b29b      	uxth	r3, r3
 8010496:	3b01      	subs	r3, #1
 8010498:	b29a      	uxth	r2, r3
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a2:	f043 0204 	orr.w	r2, r3, #4
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80104aa:	f248 0103 	movw	r1, #32771	; 0x8003
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 f94b 	bl	801074a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2210      	movs	r2, #16
 80104ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7ff fbb6 	bl	800fc36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80104ca:	bf00      	nop
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	ffff0000 	.word	0xffff0000

080104d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80104e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2200      	movs	r2, #0
 80104ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a5d      	ldr	r2, [pc, #372]	; (801066c <I2C_ITError+0x194>)
 80104f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	431a      	orrs	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801050a:	7bfb      	ldrb	r3, [r7, #15]
 801050c:	2b28      	cmp	r3, #40	; 0x28
 801050e:	d005      	beq.n	801051c <I2C_ITError+0x44>
 8010510:	7bfb      	ldrb	r3, [r7, #15]
 8010512:	2b29      	cmp	r3, #41	; 0x29
 8010514:	d002      	beq.n	801051c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010516:	7bfb      	ldrb	r3, [r7, #15]
 8010518:	2b2a      	cmp	r3, #42	; 0x2a
 801051a:	d10b      	bne.n	8010534 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801051c:	2103      	movs	r1, #3
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f913 	bl	801074a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2228      	movs	r2, #40	; 0x28
 8010528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4a50      	ldr	r2, [pc, #320]	; (8010670 <I2C_ITError+0x198>)
 8010530:	635a      	str	r2, [r3, #52]	; 0x34
 8010532:	e011      	b.n	8010558 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010534:	f248 0103 	movw	r1, #32771	; 0x8003
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 f906 	bl	801074a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010544:	b2db      	uxtb	r3, r3
 8010546:	2b60      	cmp	r3, #96	; 0x60
 8010548:	d003      	beq.n	8010552 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2220      	movs	r2, #32
 801054e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801055c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010562:	2b00      	cmp	r3, #0
 8010564:	d039      	beq.n	80105da <I2C_ITError+0x102>
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	2b11      	cmp	r3, #17
 801056a:	d002      	beq.n	8010572 <I2C_ITError+0x9a>
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2b21      	cmp	r3, #33	; 0x21
 8010570:	d133      	bne.n	80105da <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801057c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010580:	d107      	bne.n	8010592 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010590:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010596:	4618      	mov	r0, r3
 8010598:	f7fe fc54 	bl	800ee44 <HAL_DMA_GetState>
 801059c:	4603      	mov	r3, r0
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d017      	beq.n	80105d2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a6:	4a33      	ldr	r2, [pc, #204]	; (8010674 <I2C_ITError+0x19c>)
 80105a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2200      	movs	r2, #0
 80105ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fd fad4 	bl	800db64 <HAL_DMA_Abort_IT>
 80105bc:	4603      	mov	r3, r0
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d04d      	beq.n	801065e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80105cc:	4610      	mov	r0, r2
 80105ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105d0:	e045      	b.n	801065e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 f850 	bl	8010678 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105d8:	e041      	b.n	801065e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d039      	beq.n	8010656 <I2C_ITError+0x17e>
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	2b12      	cmp	r3, #18
 80105e6:	d002      	beq.n	80105ee <I2C_ITError+0x116>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2b22      	cmp	r3, #34	; 0x22
 80105ec:	d133      	bne.n	8010656 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105fc:	d107      	bne.n	801060e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801060c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010612:	4618      	mov	r0, r3
 8010614:	f7fe fc16 	bl	800ee44 <HAL_DMA_GetState>
 8010618:	4603      	mov	r3, r0
 801061a:	2b01      	cmp	r3, #1
 801061c:	d017      	beq.n	801064e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010622:	4a14      	ldr	r2, [pc, #80]	; (8010674 <I2C_ITError+0x19c>)
 8010624:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010632:	4618      	mov	r0, r3
 8010634:	f7fd fa96 	bl	800db64 <HAL_DMA_Abort_IT>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d011      	beq.n	8010662 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010648:	4610      	mov	r0, r2
 801064a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801064c:	e009      	b.n	8010662 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 f812 	bl	8010678 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010654:	e005      	b.n	8010662 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 f80e 	bl	8010678 <I2C_TreatErrorCallback>
  }
}
 801065c:	e002      	b.n	8010664 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801065e:	bf00      	nop
 8010660:	e000      	b.n	8010664 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010662:	bf00      	nop
}
 8010664:	bf00      	nop
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	ffff0000 	.word	0xffff0000
 8010670:	0800fc73 	.word	0x0800fc73
 8010674:	0801070f 	.word	0x0801070f

08010678 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b60      	cmp	r3, #96	; 0x60
 801068a:	d10e      	bne.n	80106aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2220      	movs	r2, #32
 8010690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7ff fadb 	bl	800fc5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80106a8:	e009      	b.n	80106be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff fac6 	bl	800fc4a <HAL_I2C_ErrorCallback>
}
 80106be:	bf00      	nop
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80106c6:	b480      	push	{r7}
 80106c8:	b083      	sub	sp, #12
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	699b      	ldr	r3, [r3, #24]
 80106d4:	f003 0302 	and.w	r3, r3, #2
 80106d8:	2b02      	cmp	r3, #2
 80106da:	d103      	bne.n	80106e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2200      	movs	r2, #0
 80106e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	699b      	ldr	r3, [r3, #24]
 80106ea:	f003 0301 	and.w	r3, r3, #1
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d007      	beq.n	8010702 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	699a      	ldr	r2, [r3, #24]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f042 0201 	orr.w	r2, r2, #1
 8010700:	619a      	str	r2, [r3, #24]
  }
}
 8010702:	bf00      	nop
 8010704:	370c      	adds	r7, #12
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr

0801070e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b084      	sub	sp, #16
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801071a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010720:	2b00      	cmp	r3, #0
 8010722:	d003      	beq.n	801072c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010728:	2200      	movs	r2, #0
 801072a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010738:	2200      	movs	r2, #0
 801073a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	f7ff ff9b 	bl	8010678 <I2C_TreatErrorCallback>
}
 8010742:	bf00      	nop
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801074a:	b480      	push	{r7}
 801074c:	b085      	sub	sp, #20
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	460b      	mov	r3, r1
 8010754:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010756:	2300      	movs	r3, #0
 8010758:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801075a:	887b      	ldrh	r3, [r7, #2]
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	d00f      	beq.n	8010784 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801076a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010772:	b2db      	uxtb	r3, r3
 8010774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010778:	2b28      	cmp	r3, #40	; 0x28
 801077a:	d003      	beq.n	8010784 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8010782:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010784:	887b      	ldrh	r3, [r7, #2]
 8010786:	f003 0302 	and.w	r3, r3, #2
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00f      	beq.n	80107ae <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010794:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801079c:	b2db      	uxtb	r3, r3
 801079e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80107a2:	2b28      	cmp	r3, #40	; 0x28
 80107a4:	d003      	beq.n	80107ae <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80107ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80107ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	da03      	bge.n	80107be <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80107bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80107be:	887b      	ldrh	r3, [r7, #2]
 80107c0:	2b10      	cmp	r3, #16
 80107c2:	d103      	bne.n	80107cc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80107ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80107cc:	887b      	ldrh	r3, [r7, #2]
 80107ce:	2b20      	cmp	r3, #32
 80107d0:	d103      	bne.n	80107da <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f043 0320 	orr.w	r3, r3, #32
 80107d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80107da:	887b      	ldrh	r3, [r7, #2]
 80107dc:	2b40      	cmp	r3, #64	; 0x40
 80107de:	d103      	bne.n	80107e8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107e6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	6819      	ldr	r1, [r3, #0]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	43da      	mvns	r2, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	400a      	ands	r2, r1
 80107f8:	601a      	str	r2, [r3, #0]
}
 80107fa:	bf00      	nop
 80107fc:	3714      	adds	r7, #20
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr

08010806 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010806:	b480      	push	{r7}
 8010808:	b083      	sub	sp, #12
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
 801080e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010816:	b2db      	uxtb	r3, r3
 8010818:	2b20      	cmp	r3, #32
 801081a:	d138      	bne.n	801088e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010822:	2b01      	cmp	r3, #1
 8010824:	d101      	bne.n	801082a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010826:	2302      	movs	r3, #2
 8010828:	e032      	b.n	8010890 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2224      	movs	r2, #36	; 0x24
 8010836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f022 0201 	bic.w	r2, r2, #1
 8010848:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010858:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	6819      	ldr	r1, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	683a      	ldr	r2, [r7, #0]
 8010866:	430a      	orrs	r2, r1
 8010868:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f042 0201 	orr.w	r2, r2, #1
 8010878:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2220      	movs	r2, #32
 801087e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801088a:	2300      	movs	r3, #0
 801088c:	e000      	b.n	8010890 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801088e:	2302      	movs	r3, #2
  }
}
 8010890:	4618      	mov	r0, r3
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b20      	cmp	r3, #32
 80108b0:	d139      	bne.n	8010926 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d101      	bne.n	80108c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80108bc:	2302      	movs	r3, #2
 80108be:	e033      	b.n	8010928 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2201      	movs	r2, #1
 80108c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2224      	movs	r2, #36	; 0x24
 80108cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f022 0201 	bic.w	r2, r2, #1
 80108de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80108ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	021b      	lsls	r3, r3, #8
 80108f4:	68fa      	ldr	r2, [r7, #12]
 80108f6:	4313      	orrs	r3, r2
 80108f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f042 0201 	orr.w	r2, r2, #1
 8010910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2220      	movs	r2, #32
 8010916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010922:	2300      	movs	r3, #0
 8010924:	e000      	b.n	8010928 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010926:	2302      	movs	r3, #2
  }
}
 8010928:	4618      	mov	r0, r3
 801092a:	3714      	adds	r7, #20
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010936:	b08f      	sub	sp, #60	; 0x3c
 8010938:	af0a      	add	r7, sp, #40	; 0x28
 801093a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d101      	bne.n	8010946 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8010942:	2301      	movs	r3, #1
 8010944:	e116      	b.n	8010b74 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d106      	bne.n	8010966 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f00b fe7b 	bl	801c65c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2203      	movs	r2, #3
 801096a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010976:	2b00      	cmp	r3, #0
 8010978:	d102      	bne.n	8010980 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4618      	mov	r0, r3
 8010986:	f008 f9c4 	bl	8018d12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	603b      	str	r3, [r7, #0]
 8010990:	687e      	ldr	r6, [r7, #4]
 8010992:	466d      	mov	r5, sp
 8010994:	f106 0410 	add.w	r4, r6, #16
 8010998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801099a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80109a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80109a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80109a8:	1d33      	adds	r3, r6, #4
 80109aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109ac:	6838      	ldr	r0, [r7, #0]
 80109ae:	f008 f88f 	bl	8018ad0 <USB_CoreInit>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d005      	beq.n	80109c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2202      	movs	r2, #2
 80109bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80109c0:	2301      	movs	r3, #1
 80109c2:	e0d7      	b.n	8010b74 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2100      	movs	r1, #0
 80109ca:	4618      	mov	r0, r3
 80109cc:	f008 f9b2 	bl	8018d34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80109d0:	2300      	movs	r3, #0
 80109d2:	73fb      	strb	r3, [r7, #15]
 80109d4:	e04a      	b.n	8010a6c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80109d6:	7bfa      	ldrb	r2, [r7, #15]
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	4613      	mov	r3, r2
 80109dc:	00db      	lsls	r3, r3, #3
 80109de:	4413      	add	r3, r2
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	440b      	add	r3, r1
 80109e4:	333d      	adds	r3, #61	; 0x3d
 80109e6:	2201      	movs	r2, #1
 80109e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80109ea:	7bfa      	ldrb	r2, [r7, #15]
 80109ec:	6879      	ldr	r1, [r7, #4]
 80109ee:	4613      	mov	r3, r2
 80109f0:	00db      	lsls	r3, r3, #3
 80109f2:	4413      	add	r3, r2
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	440b      	add	r3, r1
 80109f8:	333c      	adds	r3, #60	; 0x3c
 80109fa:	7bfa      	ldrb	r2, [r7, #15]
 80109fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80109fe:	7bfa      	ldrb	r2, [r7, #15]
 8010a00:	7bfb      	ldrb	r3, [r7, #15]
 8010a02:	b298      	uxth	r0, r3
 8010a04:	6879      	ldr	r1, [r7, #4]
 8010a06:	4613      	mov	r3, r2
 8010a08:	00db      	lsls	r3, r3, #3
 8010a0a:	4413      	add	r3, r2
 8010a0c:	009b      	lsls	r3, r3, #2
 8010a0e:	440b      	add	r3, r1
 8010a10:	3344      	adds	r3, #68	; 0x44
 8010a12:	4602      	mov	r2, r0
 8010a14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8010a16:	7bfa      	ldrb	r2, [r7, #15]
 8010a18:	6879      	ldr	r1, [r7, #4]
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	00db      	lsls	r3, r3, #3
 8010a1e:	4413      	add	r3, r2
 8010a20:	009b      	lsls	r3, r3, #2
 8010a22:	440b      	add	r3, r1
 8010a24:	3340      	adds	r3, #64	; 0x40
 8010a26:	2200      	movs	r2, #0
 8010a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8010a2a:	7bfa      	ldrb	r2, [r7, #15]
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	00db      	lsls	r3, r3, #3
 8010a32:	4413      	add	r3, r2
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	440b      	add	r3, r1
 8010a38:	3348      	adds	r3, #72	; 0x48
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8010a3e:	7bfa      	ldrb	r2, [r7, #15]
 8010a40:	6879      	ldr	r1, [r7, #4]
 8010a42:	4613      	mov	r3, r2
 8010a44:	00db      	lsls	r3, r3, #3
 8010a46:	4413      	add	r3, r2
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	440b      	add	r3, r1
 8010a4c:	334c      	adds	r3, #76	; 0x4c
 8010a4e:	2200      	movs	r2, #0
 8010a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8010a52:	7bfa      	ldrb	r2, [r7, #15]
 8010a54:	6879      	ldr	r1, [r7, #4]
 8010a56:	4613      	mov	r3, r2
 8010a58:	00db      	lsls	r3, r3, #3
 8010a5a:	4413      	add	r3, r2
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	440b      	add	r3, r1
 8010a60:	3354      	adds	r3, #84	; 0x54
 8010a62:	2200      	movs	r2, #0
 8010a64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010a66:	7bfb      	ldrb	r3, [r7, #15]
 8010a68:	3301      	adds	r3, #1
 8010a6a:	73fb      	strb	r3, [r7, #15]
 8010a6c:	7bfa      	ldrb	r2, [r7, #15]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d3af      	bcc.n	80109d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010a76:	2300      	movs	r3, #0
 8010a78:	73fb      	strb	r3, [r7, #15]
 8010a7a:	e044      	b.n	8010b06 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8010a7c:	7bfa      	ldrb	r2, [r7, #15]
 8010a7e:	6879      	ldr	r1, [r7, #4]
 8010a80:	4613      	mov	r3, r2
 8010a82:	00db      	lsls	r3, r3, #3
 8010a84:	4413      	add	r3, r2
 8010a86:	009b      	lsls	r3, r3, #2
 8010a88:	440b      	add	r3, r1
 8010a8a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8010a8e:	2200      	movs	r2, #0
 8010a90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8010a92:	7bfa      	ldrb	r2, [r7, #15]
 8010a94:	6879      	ldr	r1, [r7, #4]
 8010a96:	4613      	mov	r3, r2
 8010a98:	00db      	lsls	r3, r3, #3
 8010a9a:	4413      	add	r3, r2
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	440b      	add	r3, r1
 8010aa0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010aa4:	7bfa      	ldrb	r2, [r7, #15]
 8010aa6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010aa8:	7bfa      	ldrb	r2, [r7, #15]
 8010aaa:	6879      	ldr	r1, [r7, #4]
 8010aac:	4613      	mov	r3, r2
 8010aae:	00db      	lsls	r3, r3, #3
 8010ab0:	4413      	add	r3, r2
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	440b      	add	r3, r1
 8010ab6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010aba:	2200      	movs	r2, #0
 8010abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8010abe:	7bfa      	ldrb	r2, [r7, #15]
 8010ac0:	6879      	ldr	r1, [r7, #4]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	4413      	add	r3, r2
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	440b      	add	r3, r1
 8010acc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8010ad4:	7bfa      	ldrb	r2, [r7, #15]
 8010ad6:	6879      	ldr	r1, [r7, #4]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	00db      	lsls	r3, r3, #3
 8010adc:	4413      	add	r3, r2
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	440b      	add	r3, r1
 8010ae2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8010aea:	7bfa      	ldrb	r2, [r7, #15]
 8010aec:	6879      	ldr	r1, [r7, #4]
 8010aee:	4613      	mov	r3, r2
 8010af0:	00db      	lsls	r3, r3, #3
 8010af2:	4413      	add	r3, r2
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	440b      	add	r3, r1
 8010af8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8010afc:	2200      	movs	r2, #0
 8010afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010b00:	7bfb      	ldrb	r3, [r7, #15]
 8010b02:	3301      	adds	r3, #1
 8010b04:	73fb      	strb	r3, [r7, #15]
 8010b06:	7bfa      	ldrb	r2, [r7, #15]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d3b5      	bcc.n	8010a7c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	603b      	str	r3, [r7, #0]
 8010b16:	687e      	ldr	r6, [r7, #4]
 8010b18:	466d      	mov	r5, sp
 8010b1a:	f106 0410 	add.w	r4, r6, #16
 8010b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b2e:	1d33      	adds	r3, r6, #4
 8010b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b32:	6838      	ldr	r0, [r7, #0]
 8010b34:	f008 f94a 	bl	8018dcc <USB_DevInit>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d005      	beq.n	8010b4a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2202      	movs	r2, #2
 8010b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8010b46:	2301      	movs	r3, #1
 8010b48:	e014      	b.n	8010b74 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2201      	movs	r2, #1
 8010b56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d102      	bne.n	8010b68 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f001 f98c 	bl	8011e80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f009 fa98 	bl	801a0a2 <USB_DevDisconnect>

  return HAL_OK;
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3714      	adds	r7, #20
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d101      	bne.n	8010b98 <HAL_PCD_Start+0x1c>
 8010b94:	2302      	movs	r3, #2
 8010b96:	e020      	b.n	8010bda <HAL_PCD_Start+0x5e>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d109      	bne.n	8010bbc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d005      	beq.n	8010bbc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f008 f895 	bl	8018cf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f009 fa48 	bl	801a060 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8010be2:	b590      	push	{r4, r7, lr}
 8010be4:	b08d      	sub	sp, #52	; 0x34
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f009 fb06 	bl	801a20a <USB_GetMode>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f040 84b7 	bne.w	8011574 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f009 fa6a 	bl	801a0e4 <USB_ReadInterrupts>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f000 84ad 	beq.w	8011572 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c1e:	689b      	ldr	r3, [r3, #8]
 8010c20:	0a1b      	lsrs	r3, r3, #8
 8010c22:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f009 fa57 	bl	801a0e4 <USB_ReadInterrupts>
 8010c36:	4603      	mov	r3, r0
 8010c38:	f003 0302 	and.w	r3, r3, #2
 8010c3c:	2b02      	cmp	r3, #2
 8010c3e:	d107      	bne.n	8010c50 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	695a      	ldr	r2, [r3, #20]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f002 0202 	and.w	r2, r2, #2
 8010c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4618      	mov	r0, r3
 8010c56:	f009 fa45 	bl	801a0e4 <USB_ReadInterrupts>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	f003 0310 	and.w	r3, r3, #16
 8010c60:	2b10      	cmp	r3, #16
 8010c62:	d161      	bne.n	8010d28 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	699a      	ldr	r2, [r3, #24]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f022 0210 	bic.w	r2, r2, #16
 8010c72:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	6a1b      	ldr	r3, [r3, #32]
 8010c78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8010c7a:	69bb      	ldr	r3, [r7, #24]
 8010c7c:	f003 020f 	and.w	r2, r3, #15
 8010c80:	4613      	mov	r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	4413      	add	r3, r2
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	4413      	add	r3, r2
 8010c90:	3304      	adds	r3, #4
 8010c92:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010c94:	69bb      	ldr	r3, [r7, #24]
 8010c96:	0c5b      	lsrs	r3, r3, #17
 8010c98:	f003 030f 	and.w	r3, r3, #15
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d124      	bne.n	8010cea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8010ca0:	69ba      	ldr	r2, [r7, #24]
 8010ca2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8010ca6:	4013      	ands	r3, r2
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d035      	beq.n	8010d18 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8010cb0:	69bb      	ldr	r3, [r7, #24]
 8010cb2:	091b      	lsrs	r3, r3, #4
 8010cb4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	6a38      	ldr	r0, [r7, #32]
 8010cc0:	f009 f87c 	bl	8019dbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	691a      	ldr	r2, [r3, #16]
 8010cc8:	69bb      	ldr	r3, [r7, #24]
 8010cca:	091b      	lsrs	r3, r3, #4
 8010ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010cd0:	441a      	add	r2, r3
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	6a1a      	ldr	r2, [r3, #32]
 8010cda:	69bb      	ldr	r3, [r7, #24]
 8010cdc:	091b      	lsrs	r3, r3, #4
 8010cde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010ce2:	441a      	add	r2, r3
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	621a      	str	r2, [r3, #32]
 8010ce8:	e016      	b.n	8010d18 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	0c5b      	lsrs	r3, r3, #17
 8010cee:	f003 030f 	and.w	r3, r3, #15
 8010cf2:	2b06      	cmp	r3, #6
 8010cf4:	d110      	bne.n	8010d18 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010cfc:	2208      	movs	r2, #8
 8010cfe:	4619      	mov	r1, r3
 8010d00:	6a38      	ldr	r0, [r7, #32]
 8010d02:	f009 f85b 	bl	8019dbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	6a1a      	ldr	r2, [r3, #32]
 8010d0a:	69bb      	ldr	r3, [r7, #24]
 8010d0c:	091b      	lsrs	r3, r3, #4
 8010d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010d12:	441a      	add	r2, r3
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	699a      	ldr	r2, [r3, #24]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f042 0210 	orr.w	r2, r2, #16
 8010d26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f009 f9d9 	bl	801a0e4 <USB_ReadInterrupts>
 8010d32:	4603      	mov	r3, r0
 8010d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010d38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010d3c:	f040 80a7 	bne.w	8010e8e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8010d40:	2300      	movs	r3, #0
 8010d42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f009 f9de 	bl	801a10a <USB_ReadDevAllOutEpInterrupt>
 8010d4e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8010d50:	e099      	b.n	8010e86 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d54:	f003 0301 	and.w	r3, r3, #1
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f000 808e 	beq.w	8010e7a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d64:	b2d2      	uxtb	r2, r2
 8010d66:	4611      	mov	r1, r2
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f009 fa02 	bl	801a172 <USB_ReadDevOutEPInterrupt>
 8010d6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	f003 0301 	and.w	r3, r3, #1
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00c      	beq.n	8010d94 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7c:	015a      	lsls	r2, r3, #5
 8010d7e:	69fb      	ldr	r3, [r7, #28]
 8010d80:	4413      	add	r3, r2
 8010d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d86:	461a      	mov	r2, r3
 8010d88:	2301      	movs	r3, #1
 8010d8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8010d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 fef0 	bl	8011b74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	f003 0308 	and.w	r3, r3, #8
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00c      	beq.n	8010db8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da0:	015a      	lsls	r2, r3, #5
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	4413      	add	r3, r2
 8010da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010daa:	461a      	mov	r2, r3
 8010dac:	2308      	movs	r3, #8
 8010dae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8010db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 ffc6 	bl	8011d44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	f003 0310 	and.w	r3, r3, #16
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d008      	beq.n	8010dd4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	015a      	lsls	r2, r3, #5
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	4413      	add	r3, r2
 8010dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dce:	461a      	mov	r2, r3
 8010dd0:	2310      	movs	r3, #16
 8010dd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	f003 0302 	and.w	r3, r3, #2
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d030      	beq.n	8010e40 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	695b      	ldr	r3, [r3, #20]
 8010de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de6:	2b80      	cmp	r3, #128	; 0x80
 8010de8:	d109      	bne.n	8010dfe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	69fa      	ldr	r2, [r7, #28]
 8010df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010dfc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8010dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e00:	4613      	mov	r3, r2
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	4413      	add	r3, r2
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	4413      	add	r3, r2
 8010e10:	3304      	adds	r3, #4
 8010e12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	78db      	ldrb	r3, [r3, #3]
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d108      	bne.n	8010e2e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	4619      	mov	r1, r3
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f00b fd43 	bl	801c8b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e30:	015a      	lsls	r2, r3, #5
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	4413      	add	r3, r2
 8010e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	2302      	movs	r3, #2
 8010e3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	f003 0320 	and.w	r3, r3, #32
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d008      	beq.n	8010e5c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	015a      	lsls	r2, r3, #5
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	4413      	add	r3, r2
 8010e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e56:	461a      	mov	r2, r3
 8010e58:	2320      	movs	r3, #32
 8010e5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d009      	beq.n	8010e7a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8010e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e68:	015a      	lsls	r2, r3, #5
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e72:	461a      	mov	r2, r3
 8010e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8010e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	085b      	lsrs	r3, r3, #1
 8010e84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f47f af62 	bne.w	8010d52 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f009 f926 	bl	801a0e4 <USB_ReadInterrupts>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010ea2:	f040 80db 	bne.w	801105c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f009 f947 	bl	801a13e <USB_ReadDevAllInEpInterrupt>
 8010eb0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8010eb6:	e0cd      	b.n	8011054 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f000 80c2 	beq.w	8011048 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eca:	b2d2      	uxtb	r2, r2
 8010ecc:	4611      	mov	r1, r2
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f009 f96d 	bl	801a1ae <USB_ReadDevInEPInterrupt>
 8010ed4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d057      	beq.n	8010f90 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee2:	f003 030f 	and.w	r3, r3, #15
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8010eec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	43db      	mvns	r3, r3
 8010efa:	69f9      	ldr	r1, [r7, #28]
 8010efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010f00:	4013      	ands	r3, r2
 8010f02:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	015a      	lsls	r2, r3, #5
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	4413      	add	r3, r2
 8010f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f10:	461a      	mov	r2, r3
 8010f12:	2301      	movs	r3, #1
 8010f14:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	691b      	ldr	r3, [r3, #16]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d132      	bne.n	8010f84 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8010f1e:	6879      	ldr	r1, [r7, #4]
 8010f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f22:	4613      	mov	r3, r2
 8010f24:	00db      	lsls	r3, r3, #3
 8010f26:	4413      	add	r3, r2
 8010f28:	009b      	lsls	r3, r3, #2
 8010f2a:	440b      	add	r3, r1
 8010f2c:	334c      	adds	r3, #76	; 0x4c
 8010f2e:	6819      	ldr	r1, [r3, #0]
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f34:	4613      	mov	r3, r2
 8010f36:	00db      	lsls	r3, r3, #3
 8010f38:	4413      	add	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4403      	add	r3, r0
 8010f3e:	3348      	adds	r3, #72	; 0x48
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4419      	add	r1, r3
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f48:	4613      	mov	r3, r2
 8010f4a:	00db      	lsls	r3, r3, #3
 8010f4c:	4413      	add	r3, r2
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	4403      	add	r3, r0
 8010f52:	334c      	adds	r3, #76	; 0x4c
 8010f54:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d113      	bne.n	8010f84 <HAL_PCD_IRQHandler+0x3a2>
 8010f5c:	6879      	ldr	r1, [r7, #4]
 8010f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f60:	4613      	mov	r3, r2
 8010f62:	00db      	lsls	r3, r3, #3
 8010f64:	4413      	add	r3, r2
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	440b      	add	r3, r1
 8010f6a:	3354      	adds	r3, #84	; 0x54
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d108      	bne.n	8010f84 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6818      	ldr	r0, [r3, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	2101      	movs	r1, #1
 8010f80:	f009 f976 	bl	801a270 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f00b fc0d 	bl	801c7aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	f003 0308 	and.w	r3, r3, #8
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d008      	beq.n	8010fac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	015a      	lsls	r2, r3, #5
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	2308      	movs	r3, #8
 8010faa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	f003 0310 	and.w	r3, r3, #16
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d008      	beq.n	8010fc8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	015a      	lsls	r2, r3, #5
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	2310      	movs	r3, #16
 8010fc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010fc8:	693b      	ldr	r3, [r7, #16]
 8010fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d008      	beq.n	8010fe4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd4:	015a      	lsls	r2, r3, #5
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	4413      	add	r3, r2
 8010fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fde:	461a      	mov	r2, r3
 8010fe0:	2340      	movs	r3, #64	; 0x40
 8010fe2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	f003 0302 	and.w	r3, r3, #2
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d023      	beq.n	8011036 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8010fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ff0:	6a38      	ldr	r0, [r7, #32]
 8010ff2:	f008 f849 	bl	8019088 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8010ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	4413      	add	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	3338      	adds	r3, #56	; 0x38
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	4413      	add	r3, r2
 8011006:	3304      	adds	r3, #4
 8011008:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	78db      	ldrb	r3, [r3, #3]
 801100e:	2b01      	cmp	r3, #1
 8011010:	d108      	bne.n	8011024 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	2200      	movs	r2, #0
 8011016:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	b2db      	uxtb	r3, r3
 801101c:	4619      	mov	r1, r3
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f00b fc5a 	bl	801c8d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	015a      	lsls	r2, r3, #5
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	4413      	add	r3, r2
 801102c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011030:	461a      	mov	r2, r3
 8011032:	2302      	movs	r3, #2
 8011034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801103c:	2b00      	cmp	r3, #0
 801103e:	d003      	beq.n	8011048 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8011040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 fd08 	bl	8011a58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	3301      	adds	r3, #1
 801104c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011050:	085b      	lsrs	r3, r3, #1
 8011052:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8011054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011056:	2b00      	cmp	r3, #0
 8011058:	f47f af2e 	bne.w	8010eb8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4618      	mov	r0, r3
 8011062:	f009 f83f 	bl	801a0e4 <USB_ReadInterrupts>
 8011066:	4603      	mov	r3, r0
 8011068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801106c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011070:	d122      	bne.n	80110b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	69fa      	ldr	r2, [r7, #28]
 801107c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011080:	f023 0301 	bic.w	r3, r3, #1
 8011084:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801108c:	2b01      	cmp	r3, #1
 801108e:	d108      	bne.n	80110a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8011098:	2100      	movs	r1, #0
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 ff14 	bl	8011ec8 <HAL_PCDEx_LPM_Callback>
 80110a0:	e002      	b.n	80110a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f00b fbf8 	bl	801c898 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	695a      	ldr	r2, [r3, #20]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80110b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4618      	mov	r0, r3
 80110be:	f009 f811 	bl	801a0e4 <USB_ReadInterrupts>
 80110c2:	4603      	mov	r3, r0
 80110c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110cc:	d112      	bne.n	80110f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80110ce:	69fb      	ldr	r3, [r7, #28]
 80110d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	f003 0301 	and.w	r3, r3, #1
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d102      	bne.n	80110e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f00b fbb4 	bl	801c84c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	695a      	ldr	r2, [r3, #20]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80110f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f008 fff3 	bl	801a0e4 <USB_ReadInterrupts>
 80110fe:	4603      	mov	r3, r0
 8011100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011108:	d121      	bne.n	801114e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	695a      	ldr	r2, [r3, #20]
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8011118:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8011120:	2b00      	cmp	r3, #0
 8011122:	d111      	bne.n	8011148 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2201      	movs	r2, #1
 8011128:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011132:	089b      	lsrs	r3, r3, #2
 8011134:	f003 020f 	and.w	r2, r3, #15
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801113e:	2101      	movs	r1, #1
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f000 fec1 	bl	8011ec8 <HAL_PCDEx_LPM_Callback>
 8011146:	e002      	b.n	801114e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f00b fb7f 	bl	801c84c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4618      	mov	r0, r3
 8011154:	f008 ffc6 	bl	801a0e4 <USB_ReadInterrupts>
 8011158:	4603      	mov	r3, r0
 801115a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801115e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011162:	f040 80b7 	bne.w	80112d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	69fa      	ldr	r2, [r7, #28]
 8011170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011174:	f023 0301 	bic.w	r3, r3, #1
 8011178:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	2110      	movs	r1, #16
 8011180:	4618      	mov	r0, r3
 8011182:	f007 ff81 	bl	8019088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011186:	2300      	movs	r3, #0
 8011188:	62fb      	str	r3, [r7, #44]	; 0x2c
 801118a:	e046      	b.n	801121a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118e:	015a      	lsls	r2, r3, #5
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	4413      	add	r3, r2
 8011194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011198:	461a      	mov	r2, r3
 801119a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801119e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80111a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a2:	015a      	lsls	r2, r3, #5
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	4413      	add	r3, r2
 80111a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111b0:	0151      	lsls	r1, r2, #5
 80111b2:	69fa      	ldr	r2, [r7, #28]
 80111b4:	440a      	add	r2, r1
 80111b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80111be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	015a      	lsls	r2, r3, #5
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	4413      	add	r3, r2
 80111c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111cc:	461a      	mov	r2, r3
 80111ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80111d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80111d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d6:	015a      	lsls	r2, r3, #5
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	4413      	add	r3, r2
 80111dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111e4:	0151      	lsls	r1, r2, #5
 80111e6:	69fa      	ldr	r2, [r7, #28]
 80111e8:	440a      	add	r2, r1
 80111ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80111f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80111f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f6:	015a      	lsls	r2, r3, #5
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	4413      	add	r3, r2
 80111fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011204:	0151      	lsls	r1, r2, #5
 8011206:	69fa      	ldr	r2, [r7, #28]
 8011208:	440a      	add	r2, r1
 801120a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801120e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011212:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011216:	3301      	adds	r3, #1
 8011218:	62fb      	str	r3, [r7, #44]	; 0x2c
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011220:	429a      	cmp	r2, r3
 8011222:	d3b3      	bcc.n	801118c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	69fa      	ldr	r2, [r7, #28]
 801122e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011232:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8011236:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801123c:	2b00      	cmp	r3, #0
 801123e:	d016      	beq.n	801126e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801124a:	69fa      	ldr	r2, [r7, #28]
 801124c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011250:	f043 030b 	orr.w	r3, r3, #11
 8011254:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011260:	69fa      	ldr	r2, [r7, #28]
 8011262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011266:	f043 030b 	orr.w	r3, r3, #11
 801126a:	6453      	str	r3, [r2, #68]	; 0x44
 801126c:	e015      	b.n	801129a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011274:	695a      	ldr	r2, [r3, #20]
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801127c:	4619      	mov	r1, r3
 801127e:	f242 032b 	movw	r3, #8235	; 0x202b
 8011282:	4313      	orrs	r3, r2
 8011284:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	69fa      	ldr	r2, [r7, #28]
 8011290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011294:	f043 030b 	orr.w	r3, r3, #11
 8011298:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	69fa      	ldr	r2, [r7, #28]
 80112a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80112a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80112ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6818      	ldr	r0, [r3, #0]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	691b      	ldr	r3, [r3, #16]
 80112b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80112be:	461a      	mov	r2, r3
 80112c0:	f008 ffd6 	bl	801a270 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	695a      	ldr	r2, [r3, #20]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80112d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4618      	mov	r0, r3
 80112da:	f008 ff03 	bl	801a0e4 <USB_ReadInterrupts>
 80112de:	4603      	mov	r3, r0
 80112e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80112e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112e8:	d124      	bne.n	8011334 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f008 ff9a 	bl	801a228 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f007 ff42 	bl	8019182 <USB_GetDevSpeed>
 80112fe:	4603      	mov	r3, r0
 8011300:	461a      	mov	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681c      	ldr	r4, [r3, #0]
 801130a:	f001 fd91 	bl	8012e30 <HAL_RCC_GetHCLKFreq>
 801130e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011314:	b2db      	uxtb	r3, r3
 8011316:	461a      	mov	r2, r3
 8011318:	4620      	mov	r0, r4
 801131a:	f007 fc47 	bl	8018bac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f00b fa6b 	bl	801c7fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	695a      	ldr	r2, [r3, #20]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011332:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4618      	mov	r0, r3
 801133a:	f008 fed3 	bl	801a0e4 <USB_ReadInterrupts>
 801133e:	4603      	mov	r3, r0
 8011340:	f003 0308 	and.w	r3, r3, #8
 8011344:	2b08      	cmp	r3, #8
 8011346:	d10a      	bne.n	801135e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f00b fa48 	bl	801c7de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	695a      	ldr	r2, [r3, #20]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	f002 0208 	and.w	r2, r2, #8
 801135c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	4618      	mov	r0, r3
 8011364:	f008 febe 	bl	801a0e4 <USB_ReadInterrupts>
 8011368:	4603      	mov	r3, r0
 801136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801136e:	2b80      	cmp	r3, #128	; 0x80
 8011370:	d122      	bne.n	80113b8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8011372:	6a3b      	ldr	r3, [r7, #32]
 8011374:	699b      	ldr	r3, [r3, #24]
 8011376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801137e:	2301      	movs	r3, #1
 8011380:	627b      	str	r3, [r7, #36]	; 0x24
 8011382:	e014      	b.n	80113ae <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8011384:	6879      	ldr	r1, [r7, #4]
 8011386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011388:	4613      	mov	r3, r2
 801138a:	00db      	lsls	r3, r3, #3
 801138c:	4413      	add	r3, r2
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	440b      	add	r3, r1
 8011392:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	2b01      	cmp	r3, #1
 801139a:	d105      	bne.n	80113a8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	4619      	mov	r1, r3
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f000 fb27 	bl	80119f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80113a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113aa:	3301      	adds	r3, #1
 80113ac:	627b      	str	r3, [r7, #36]	; 0x24
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d3e5      	bcc.n	8011384 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4618      	mov	r0, r3
 80113be:	f008 fe91 	bl	801a0e4 <USB_ReadInterrupts>
 80113c2:	4603      	mov	r3, r0
 80113c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80113c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113cc:	d13b      	bne.n	8011446 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80113ce:	2301      	movs	r3, #1
 80113d0:	627b      	str	r3, [r7, #36]	; 0x24
 80113d2:	e02b      	b.n	801142c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	015a      	lsls	r2, r3, #5
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	4413      	add	r3, r2
 80113dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80113e4:	6879      	ldr	r1, [r7, #4]
 80113e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e8:	4613      	mov	r3, r2
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	4413      	add	r3, r2
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	440b      	add	r3, r1
 80113f2:	3340      	adds	r3, #64	; 0x40
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d115      	bne.n	8011426 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80113fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	da12      	bge.n	8011426 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8011400:	6879      	ldr	r1, [r7, #4]
 8011402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011404:	4613      	mov	r3, r2
 8011406:	00db      	lsls	r3, r3, #3
 8011408:	4413      	add	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	440b      	add	r3, r1
 801140e:	333f      	adds	r3, #63	; 0x3f
 8011410:	2201      	movs	r2, #1
 8011412:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	b2db      	uxtb	r3, r3
 8011418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801141c:	b2db      	uxtb	r3, r3
 801141e:	4619      	mov	r1, r3
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 fae8 	bl	80119f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	3301      	adds	r3, #1
 801142a:	627b      	str	r3, [r7, #36]	; 0x24
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011432:	429a      	cmp	r2, r3
 8011434:	d3ce      	bcc.n	80113d4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	695a      	ldr	r2, [r3, #20]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8011444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4618      	mov	r0, r3
 801144c:	f008 fe4a 	bl	801a0e4 <USB_ReadInterrupts>
 8011450:	4603      	mov	r3, r0
 8011452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801145a:	d155      	bne.n	8011508 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801145c:	2301      	movs	r3, #1
 801145e:	627b      	str	r3, [r7, #36]	; 0x24
 8011460:	e045      	b.n	80114ee <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8011462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011464:	015a      	lsls	r2, r3, #5
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	4413      	add	r3, r2
 801146a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011472:	6879      	ldr	r1, [r7, #4]
 8011474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011476:	4613      	mov	r3, r2
 8011478:	00db      	lsls	r3, r3, #3
 801147a:	4413      	add	r3, r2
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	440b      	add	r3, r1
 8011480:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	2b01      	cmp	r3, #1
 8011488:	d12e      	bne.n	80114e8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801148a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801148c:	2b00      	cmp	r3, #0
 801148e:	da2b      	bge.n	80114e8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 801149c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d121      	bne.n	80114e8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80114a4:	6879      	ldr	r1, [r7, #4]
 80114a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114a8:	4613      	mov	r3, r2
 80114aa:	00db      	lsls	r3, r3, #3
 80114ac:	4413      	add	r3, r2
 80114ae:	009b      	lsls	r3, r3, #2
 80114b0:	440b      	add	r3, r1
 80114b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80114b6:	2201      	movs	r2, #1
 80114b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	699b      	ldr	r3, [r3, #24]
 80114be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80114c2:	6a3b      	ldr	r3, [r7, #32]
 80114c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80114c6:	6a3b      	ldr	r3, [r7, #32]
 80114c8:	695b      	ldr	r3, [r3, #20]
 80114ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d10a      	bne.n	80114e8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	69fa      	ldr	r2, [r7, #28]
 80114dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80114e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80114e4:	6053      	str	r3, [r2, #4]
            break;
 80114e6:	e007      	b.n	80114f8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80114e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ea:	3301      	adds	r3, #1
 80114ec:	627b      	str	r3, [r7, #36]	; 0x24
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d3b4      	bcc.n	8011462 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	695a      	ldr	r2, [r3, #20]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8011506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4618      	mov	r0, r3
 801150e:	f008 fde9 	bl	801a0e4 <USB_ReadInterrupts>
 8011512:	4603      	mov	r3, r0
 8011514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801151c:	d10a      	bne.n	8011534 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f00b f9ec 	bl	801c8fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	695a      	ldr	r2, [r3, #20]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8011532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4618      	mov	r0, r3
 801153a:	f008 fdd3 	bl	801a0e4 <USB_ReadInterrupts>
 801153e:	4603      	mov	r3, r0
 8011540:	f003 0304 	and.w	r3, r3, #4
 8011544:	2b04      	cmp	r3, #4
 8011546:	d115      	bne.n	8011574 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	f003 0304 	and.w	r3, r3, #4
 8011556:	2b00      	cmp	r3, #0
 8011558:	d002      	beq.n	8011560 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f00b f9dc 	bl	801c918 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	6859      	ldr	r1, [r3, #4]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	69ba      	ldr	r2, [r7, #24]
 801156c:	430a      	orrs	r2, r1
 801156e:	605a      	str	r2, [r3, #4]
 8011570:	e000      	b.n	8011574 <HAL_PCD_IRQHandler+0x992>
      return;
 8011572:	bf00      	nop
    }
  }
}
 8011574:	3734      	adds	r7, #52	; 0x34
 8011576:	46bd      	mov	sp, r7
 8011578:	bd90      	pop	{r4, r7, pc}

0801157a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801157a:	b580      	push	{r7, lr}
 801157c:	b082      	sub	sp, #8
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
 8011582:	460b      	mov	r3, r1
 8011584:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801158c:	2b01      	cmp	r3, #1
 801158e:	d101      	bne.n	8011594 <HAL_PCD_SetAddress+0x1a>
 8011590:	2302      	movs	r3, #2
 8011592:	e013      	b.n	80115bc <HAL_PCD_SetAddress+0x42>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2201      	movs	r2, #1
 8011598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	78fa      	ldrb	r2, [r7, #3]
 80115a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	78fa      	ldrb	r2, [r7, #3]
 80115aa:	4611      	mov	r1, r2
 80115ac:	4618      	mov	r0, r3
 80115ae:	f008 fd31 	bl	801a014 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	4608      	mov	r0, r1
 80115ce:	4611      	mov	r1, r2
 80115d0:	461a      	mov	r2, r3
 80115d2:	4603      	mov	r3, r0
 80115d4:	70fb      	strb	r3, [r7, #3]
 80115d6:	460b      	mov	r3, r1
 80115d8:	803b      	strh	r3, [r7, #0]
 80115da:	4613      	mov	r3, r2
 80115dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80115de:	2300      	movs	r3, #0
 80115e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80115e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	da0f      	bge.n	801160a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80115ea:	78fb      	ldrb	r3, [r7, #3]
 80115ec:	f003 020f 	and.w	r2, r3, #15
 80115f0:	4613      	mov	r3, r2
 80115f2:	00db      	lsls	r3, r3, #3
 80115f4:	4413      	add	r3, r2
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	3338      	adds	r3, #56	; 0x38
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	4413      	add	r3, r2
 80115fe:	3304      	adds	r3, #4
 8011600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2201      	movs	r2, #1
 8011606:	705a      	strb	r2, [r3, #1]
 8011608:	e00f      	b.n	801162a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801160a:	78fb      	ldrb	r3, [r7, #3]
 801160c:	f003 020f 	and.w	r2, r3, #15
 8011610:	4613      	mov	r3, r2
 8011612:	00db      	lsls	r3, r3, #3
 8011614:	4413      	add	r3, r2
 8011616:	009b      	lsls	r3, r3, #2
 8011618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	4413      	add	r3, r2
 8011620:	3304      	adds	r3, #4
 8011622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2200      	movs	r2, #0
 8011628:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801162a:	78fb      	ldrb	r3, [r7, #3]
 801162c:	f003 030f 	and.w	r3, r3, #15
 8011630:	b2da      	uxtb	r2, r3
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011636:	883a      	ldrh	r2, [r7, #0]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	78ba      	ldrb	r2, [r7, #2]
 8011640:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	785b      	ldrb	r3, [r3, #1]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d004      	beq.n	8011654 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	b29a      	uxth	r2, r3
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011654:	78bb      	ldrb	r3, [r7, #2]
 8011656:	2b02      	cmp	r3, #2
 8011658:	d102      	bne.n	8011660 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2200      	movs	r2, #0
 801165e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011666:	2b01      	cmp	r3, #1
 8011668:	d101      	bne.n	801166e <HAL_PCD_EP_Open+0xaa>
 801166a:	2302      	movs	r3, #2
 801166c:	e00e      	b.n	801168c <HAL_PCD_EP_Open+0xc8>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2201      	movs	r2, #1
 8011672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	68f9      	ldr	r1, [r7, #12]
 801167c:	4618      	mov	r0, r3
 801167e:	f007 fda5 	bl	80191cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 801168a:	7afb      	ldrb	r3, [r7, #11]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3710      	adds	r7, #16
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	460b      	mov	r3, r1
 801169e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80116a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	da0f      	bge.n	80116c8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80116a8:	78fb      	ldrb	r3, [r7, #3]
 80116aa:	f003 020f 	and.w	r2, r3, #15
 80116ae:	4613      	mov	r3, r2
 80116b0:	00db      	lsls	r3, r3, #3
 80116b2:	4413      	add	r3, r2
 80116b4:	009b      	lsls	r3, r3, #2
 80116b6:	3338      	adds	r3, #56	; 0x38
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	4413      	add	r3, r2
 80116bc:	3304      	adds	r3, #4
 80116be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2201      	movs	r2, #1
 80116c4:	705a      	strb	r2, [r3, #1]
 80116c6:	e00f      	b.n	80116e8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80116c8:	78fb      	ldrb	r3, [r7, #3]
 80116ca:	f003 020f 	and.w	r2, r3, #15
 80116ce:	4613      	mov	r3, r2
 80116d0:	00db      	lsls	r3, r3, #3
 80116d2:	4413      	add	r3, r2
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	4413      	add	r3, r2
 80116de:	3304      	adds	r3, #4
 80116e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2200      	movs	r2, #0
 80116e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80116e8:	78fb      	ldrb	r3, [r7, #3]
 80116ea:	f003 030f 	and.w	r3, r3, #15
 80116ee:	b2da      	uxtb	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d101      	bne.n	8011702 <HAL_PCD_EP_Close+0x6e>
 80116fe:	2302      	movs	r3, #2
 8011700:	e00e      	b.n	8011720 <HAL_PCD_EP_Close+0x8c>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2201      	movs	r2, #1
 8011706:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	68f9      	ldr	r1, [r7, #12]
 8011710:	4618      	mov	r0, r3
 8011712:	f007 fde3 	bl	80192dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2200      	movs	r2, #0
 801171a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	607a      	str	r2, [r7, #4]
 8011732:	603b      	str	r3, [r7, #0]
 8011734:	460b      	mov	r3, r1
 8011736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011738:	7afb      	ldrb	r3, [r7, #11]
 801173a:	f003 020f 	and.w	r2, r3, #15
 801173e:	4613      	mov	r3, r2
 8011740:	00db      	lsls	r3, r3, #3
 8011742:	4413      	add	r3, r2
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	4413      	add	r3, r2
 801174e:	3304      	adds	r3, #4
 8011750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2200      	movs	r2, #0
 8011762:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	2200      	movs	r2, #0
 8011768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801176a:	7afb      	ldrb	r3, [r7, #11]
 801176c:	f003 030f 	and.w	r3, r3, #15
 8011770:	b2da      	uxtb	r2, r3
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	691b      	ldr	r3, [r3, #16]
 801177a:	2b01      	cmp	r3, #1
 801177c:	d102      	bne.n	8011784 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011784:	7afb      	ldrb	r3, [r7, #11]
 8011786:	f003 030f 	and.w	r3, r3, #15
 801178a:	2b00      	cmp	r3, #0
 801178c:	d109      	bne.n	80117a2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	6818      	ldr	r0, [r3, #0]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	691b      	ldr	r3, [r3, #16]
 8011796:	b2db      	uxtb	r3, r3
 8011798:	461a      	mov	r2, r3
 801179a:	6979      	ldr	r1, [r7, #20]
 801179c:	f008 f8ca 	bl	8019934 <USB_EP0StartXfer>
 80117a0:	e008      	b.n	80117b4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6818      	ldr	r0, [r3, #0]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	461a      	mov	r2, r3
 80117ae:	6979      	ldr	r1, [r7, #20]
 80117b0:	f007 fe70 	bl	8019494 <USB_EPStartXfer>
  }

  return HAL_OK;
 80117b4:	2300      	movs	r3, #0
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3718      	adds	r7, #24
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80117be:	b480      	push	{r7}
 80117c0:	b083      	sub	sp, #12
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
 80117c6:	460b      	mov	r3, r1
 80117c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80117ca:	78fb      	ldrb	r3, [r7, #3]
 80117cc:	f003 020f 	and.w	r2, r3, #15
 80117d0:	6879      	ldr	r1, [r7, #4]
 80117d2:	4613      	mov	r3, r2
 80117d4:	00db      	lsls	r3, r3, #3
 80117d6:	4413      	add	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	440b      	add	r3, r1
 80117dc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80117e0:	681b      	ldr	r3, [r3, #0]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	370c      	adds	r7, #12
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr

080117ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b086      	sub	sp, #24
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	60f8      	str	r0, [r7, #12]
 80117f6:	607a      	str	r2, [r7, #4]
 80117f8:	603b      	str	r3, [r7, #0]
 80117fa:	460b      	mov	r3, r1
 80117fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80117fe:	7afb      	ldrb	r3, [r7, #11]
 8011800:	f003 020f 	and.w	r2, r3, #15
 8011804:	4613      	mov	r3, r2
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	4413      	add	r3, r2
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	3338      	adds	r3, #56	; 0x38
 801180e:	68fa      	ldr	r2, [r7, #12]
 8011810:	4413      	add	r3, r2
 8011812:	3304      	adds	r3, #4
 8011814:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	683a      	ldr	r2, [r7, #0]
 8011820:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	2200      	movs	r2, #0
 8011826:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	2201      	movs	r2, #1
 801182c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801182e:	7afb      	ldrb	r3, [r7, #11]
 8011830:	f003 030f 	and.w	r3, r3, #15
 8011834:	b2da      	uxtb	r2, r3
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	691b      	ldr	r3, [r3, #16]
 801183e:	2b01      	cmp	r3, #1
 8011840:	d102      	bne.n	8011848 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011848:	7afb      	ldrb	r3, [r7, #11]
 801184a:	f003 030f 	and.w	r3, r3, #15
 801184e:	2b00      	cmp	r3, #0
 8011850:	d109      	bne.n	8011866 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	6818      	ldr	r0, [r3, #0]
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	b2db      	uxtb	r3, r3
 801185c:	461a      	mov	r2, r3
 801185e:	6979      	ldr	r1, [r7, #20]
 8011860:	f008 f868 	bl	8019934 <USB_EP0StartXfer>
 8011864:	e008      	b.n	8011878 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	6818      	ldr	r0, [r3, #0]
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	691b      	ldr	r3, [r3, #16]
 801186e:	b2db      	uxtb	r3, r3
 8011870:	461a      	mov	r2, r3
 8011872:	6979      	ldr	r1, [r7, #20]
 8011874:	f007 fe0e 	bl	8019494 <USB_EPStartXfer>
  }

  return HAL_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3718      	adds	r7, #24
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b084      	sub	sp, #16
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801188e:	78fb      	ldrb	r3, [r7, #3]
 8011890:	f003 020f 	and.w	r2, r3, #15
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	429a      	cmp	r2, r3
 801189a:	d901      	bls.n	80118a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801189c:	2301      	movs	r3, #1
 801189e:	e050      	b.n	8011942 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80118a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	da0f      	bge.n	80118c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80118a8:	78fb      	ldrb	r3, [r7, #3]
 80118aa:	f003 020f 	and.w	r2, r3, #15
 80118ae:	4613      	mov	r3, r2
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	4413      	add	r3, r2
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	3338      	adds	r3, #56	; 0x38
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	4413      	add	r3, r2
 80118bc:	3304      	adds	r3, #4
 80118be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2201      	movs	r2, #1
 80118c4:	705a      	strb	r2, [r3, #1]
 80118c6:	e00d      	b.n	80118e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80118c8:	78fa      	ldrb	r2, [r7, #3]
 80118ca:	4613      	mov	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	4413      	add	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	4413      	add	r3, r2
 80118da:	3304      	adds	r3, #4
 80118dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2200      	movs	r2, #0
 80118e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2201      	movs	r2, #1
 80118e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80118ea:	78fb      	ldrb	r3, [r7, #3]
 80118ec:	f003 030f 	and.w	r3, r3, #15
 80118f0:	b2da      	uxtb	r2, r3
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d101      	bne.n	8011904 <HAL_PCD_EP_SetStall+0x82>
 8011900:	2302      	movs	r3, #2
 8011902:	e01e      	b.n	8011942 <HAL_PCD_EP_SetStall+0xc0>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2201      	movs	r2, #1
 8011908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	68f9      	ldr	r1, [r7, #12]
 8011912:	4618      	mov	r0, r3
 8011914:	f008 faaa 	bl	8019e6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011918:	78fb      	ldrb	r3, [r7, #3]
 801191a:	f003 030f 	and.w	r3, r3, #15
 801191e:	2b00      	cmp	r3, #0
 8011920:	d10a      	bne.n	8011938 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6818      	ldr	r0, [r3, #0]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	691b      	ldr	r3, [r3, #16]
 801192a:	b2d9      	uxtb	r1, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011932:	461a      	mov	r2, r3
 8011934:	f008 fc9c 	bl	801a270 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8011940:	2300      	movs	r3, #0
}
 8011942:	4618      	mov	r0, r3
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b084      	sub	sp, #16
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	460b      	mov	r3, r1
 8011954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011956:	78fb      	ldrb	r3, [r7, #3]
 8011958:	f003 020f 	and.w	r2, r3, #15
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	429a      	cmp	r2, r3
 8011962:	d901      	bls.n	8011968 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011964:	2301      	movs	r3, #1
 8011966:	e042      	b.n	80119ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801196c:	2b00      	cmp	r3, #0
 801196e:	da0f      	bge.n	8011990 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011970:	78fb      	ldrb	r3, [r7, #3]
 8011972:	f003 020f 	and.w	r2, r3, #15
 8011976:	4613      	mov	r3, r2
 8011978:	00db      	lsls	r3, r3, #3
 801197a:	4413      	add	r3, r2
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	3338      	adds	r3, #56	; 0x38
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	4413      	add	r3, r2
 8011984:	3304      	adds	r3, #4
 8011986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2201      	movs	r2, #1
 801198c:	705a      	strb	r2, [r3, #1]
 801198e:	e00f      	b.n	80119b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011990:	78fb      	ldrb	r3, [r7, #3]
 8011992:	f003 020f 	and.w	r2, r3, #15
 8011996:	4613      	mov	r3, r2
 8011998:	00db      	lsls	r3, r3, #3
 801199a:	4413      	add	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	4413      	add	r3, r2
 80119a6:	3304      	adds	r3, #4
 80119a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2200      	movs	r2, #0
 80119ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2200      	movs	r2, #0
 80119b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80119b6:	78fb      	ldrb	r3, [r7, #3]
 80119b8:	f003 030f 	and.w	r3, r3, #15
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d101      	bne.n	80119d0 <HAL_PCD_EP_ClrStall+0x86>
 80119cc:	2302      	movs	r3, #2
 80119ce:	e00e      	b.n	80119ee <HAL_PCD_EP_ClrStall+0xa4>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2201      	movs	r2, #1
 80119d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	68f9      	ldr	r1, [r7, #12]
 80119de:	4618      	mov	r0, r3
 80119e0:	f008 fab2 	bl	8019f48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80119ec:	2300      	movs	r3, #0
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	460b      	mov	r3, r1
 8011a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8011a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	da0c      	bge.n	8011a24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011a0a:	78fb      	ldrb	r3, [r7, #3]
 8011a0c:	f003 020f 	and.w	r2, r3, #15
 8011a10:	4613      	mov	r3, r2
 8011a12:	00db      	lsls	r3, r3, #3
 8011a14:	4413      	add	r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	3338      	adds	r3, #56	; 0x38
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	3304      	adds	r3, #4
 8011a20:	60fb      	str	r3, [r7, #12]
 8011a22:	e00c      	b.n	8011a3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011a24:	78fb      	ldrb	r3, [r7, #3]
 8011a26:	f003 020f 	and.w	r2, r3, #15
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	00db      	lsls	r3, r3, #3
 8011a2e:	4413      	add	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	4413      	add	r3, r2
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	68f9      	ldr	r1, [r7, #12]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f008 f8d1 	bl	8019bec <USB_EPStopXfer>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8011a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3710      	adds	r7, #16
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b08a      	sub	sp, #40	; 0x28
 8011a5c:	af02      	add	r7, sp, #8
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8011a6c:	683a      	ldr	r2, [r7, #0]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	00db      	lsls	r3, r3, #3
 8011a72:	4413      	add	r3, r2
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	3338      	adds	r3, #56	; 0x38
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	3304      	adds	r3, #4
 8011a7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6a1a      	ldr	r2, [r3, #32]
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	699b      	ldr	r3, [r3, #24]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d901      	bls.n	8011a90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e06c      	b.n	8011b6a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	699a      	ldr	r2, [r3, #24]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	6a1b      	ldr	r3, [r3, #32]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	69fa      	ldr	r2, [r7, #28]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d902      	bls.n	8011aac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	3303      	adds	r3, #3
 8011ab0:	089b      	lsrs	r3, r3, #2
 8011ab2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8011ab4:	e02b      	b.n	8011b0e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	699a      	ldr	r2, [r3, #24]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6a1b      	ldr	r3, [r3, #32]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	69fa      	ldr	r2, [r7, #28]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d902      	bls.n	8011ad2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	3303      	adds	r3, #3
 8011ad6:	089b      	lsrs	r3, r3, #2
 8011ad8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6919      	ldr	r1, [r3, #16]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	b2da      	uxtb	r2, r3
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	4603      	mov	r3, r0
 8011af0:	6978      	ldr	r0, [r7, #20]
 8011af2:	f008 f925 	bl	8019d40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	691a      	ldr	r2, [r3, #16]
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	441a      	add	r2, r3
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	6a1a      	ldr	r2, [r3, #32]
 8011b06:	69fb      	ldr	r3, [r7, #28]
 8011b08:	441a      	add	r2, r3
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	015a      	lsls	r2, r3, #5
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	4413      	add	r3, r2
 8011b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b1a:	699b      	ldr	r3, [r3, #24]
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	69ba      	ldr	r2, [r7, #24]
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d809      	bhi.n	8011b38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6a1a      	ldr	r2, [r3, #32]
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d203      	bcs.n	8011b38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	699b      	ldr	r3, [r3, #24]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1be      	bne.n	8011ab6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	699a      	ldr	r2, [r3, #24]
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	6a1b      	ldr	r3, [r3, #32]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d811      	bhi.n	8011b68 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	f003 030f 	and.w	r3, r3, #15
 8011b4a:	2201      	movs	r2, #1
 8011b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	43db      	mvns	r3, r3
 8011b5e:	6939      	ldr	r1, [r7, #16]
 8011b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b64:	4013      	ands	r3, r2
 8011b66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8011b68:	2300      	movs	r3, #0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3720      	adds	r7, #32
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
	...

08011b74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b088      	sub	sp, #32
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	333c      	adds	r3, #60	; 0x3c
 8011b8c:	3304      	adds	r3, #4
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	015a      	lsls	r2, r3, #5
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	4413      	add	r3, r2
 8011b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b9e:	689b      	ldr	r3, [r3, #8]
 8011ba0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	691b      	ldr	r3, [r3, #16]
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d17b      	bne.n	8011ca2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	f003 0308 	and.w	r3, r3, #8
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d015      	beq.n	8011be0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	4a61      	ldr	r2, [pc, #388]	; (8011d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	f240 80b9 	bls.w	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f000 80b3 	beq.w	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	015a      	lsls	r2, r3, #5
 8011bce:	69bb      	ldr	r3, [r7, #24]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bdc:	6093      	str	r3, [r2, #8]
 8011bde:	e0a7      	b.n	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	f003 0320 	and.w	r3, r3, #32
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d009      	beq.n	8011bfe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	015a      	lsls	r2, r3, #5
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	2320      	movs	r3, #32
 8011bfa:	6093      	str	r3, [r2, #8]
 8011bfc:	e098      	b.n	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f040 8093 	bne.w	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	4a4b      	ldr	r2, [pc, #300]	; (8011d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d90f      	bls.n	8011c32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d00a      	beq.n	8011c32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	015a      	lsls	r2, r3, #5
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	4413      	add	r3, r2
 8011c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c28:	461a      	mov	r2, r3
 8011c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c2e:	6093      	str	r3, [r2, #8]
 8011c30:	e07e      	b.n	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8011c32:	683a      	ldr	r2, [r7, #0]
 8011c34:	4613      	mov	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	4413      	add	r3, r2
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	4413      	add	r3, r2
 8011c44:	3304      	adds	r3, #4
 8011c46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	69da      	ldr	r2, [r3, #28]
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	0159      	lsls	r1, r3, #5
 8011c50:	69bb      	ldr	r3, [r7, #24]
 8011c52:	440b      	add	r3, r1
 8011c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c58:	691b      	ldr	r3, [r3, #16]
 8011c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c5e:	1ad2      	subs	r2, r2, r3
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d114      	bne.n	8011c94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	699b      	ldr	r3, [r3, #24]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d109      	bne.n	8011c86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6818      	ldr	r0, [r3, #0]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	2101      	movs	r1, #1
 8011c80:	f008 faf6 	bl	801a270 <USB_EP0_OutStart>
 8011c84:	e006      	b.n	8011c94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	691a      	ldr	r2, [r3, #16]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	6a1b      	ldr	r3, [r3, #32]
 8011c8e:	441a      	add	r2, r3
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	4619      	mov	r1, r3
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f00a fd6a 	bl	801c774 <HAL_PCD_DataOutStageCallback>
 8011ca0:	e046      	b.n	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	4a26      	ldr	r2, [pc, #152]	; (8011d40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d124      	bne.n	8011cf4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d00a      	beq.n	8011cca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	015a      	lsls	r2, r3, #5
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	4413      	add	r3, r2
 8011cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011cc6:	6093      	str	r3, [r2, #8]
 8011cc8:	e032      	b.n	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	f003 0320 	and.w	r3, r3, #32
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d008      	beq.n	8011ce6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	015a      	lsls	r2, r3, #5
 8011cd8:	69bb      	ldr	r3, [r7, #24]
 8011cda:	4413      	add	r3, r2
 8011cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	2320      	movs	r3, #32
 8011ce4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	4619      	mov	r1, r3
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f00a fd41 	bl	801c774 <HAL_PCD_DataOutStageCallback>
 8011cf2:	e01d      	b.n	8011d30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d114      	bne.n	8011d24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	683a      	ldr	r2, [r7, #0]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	00db      	lsls	r3, r3, #3
 8011d02:	4413      	add	r3, r2
 8011d04:	009b      	lsls	r3, r3, #2
 8011d06:	440b      	add	r3, r1
 8011d08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d108      	bne.n	8011d24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6818      	ldr	r0, [r3, #0]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	2100      	movs	r1, #0
 8011d20:	f008 faa6 	bl	801a270 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	4619      	mov	r1, r3
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f00a fd22 	bl	801c774 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3720      	adds	r7, #32
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	4f54300a 	.word	0x4f54300a
 8011d40:	4f54310a 	.word	0x4f54310a

08011d44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b086      	sub	sp, #24
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	333c      	adds	r3, #60	; 0x3c
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	015a      	lsls	r2, r3, #5
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	4413      	add	r3, r2
 8011d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	4a15      	ldr	r2, [pc, #84]	; (8011dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d90e      	bls.n	8011d98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d009      	beq.n	8011d98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	015a      	lsls	r2, r3, #5
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d90:	461a      	mov	r2, r3
 8011d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f00a fcd9 	bl	801c750 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	4a0a      	ldr	r2, [pc, #40]	; (8011dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d90c      	bls.n	8011dc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	691b      	ldr	r3, [r3, #16]
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	d108      	bne.n	8011dc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6818      	ldr	r0, [r3, #0]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011db8:	461a      	mov	r2, r3
 8011dba:	2101      	movs	r1, #1
 8011dbc:	f008 fa58 	bl	801a270 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3718      	adds	r7, #24
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	4f54300a 	.word	0x4f54300a

08011dd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b085      	sub	sp, #20
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	460b      	mov	r3, r1
 8011dda:	70fb      	strb	r3, [r7, #3]
 8011ddc:	4613      	mov	r3, r2
 8011dde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8011de8:	78fb      	ldrb	r3, [r7, #3]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d107      	bne.n	8011dfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8011dee:	883b      	ldrh	r3, [r7, #0]
 8011df0:	0419      	lsls	r1, r3, #16
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	430a      	orrs	r2, r1
 8011dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8011dfc:	e028      	b.n	8011e50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e04:	0c1b      	lsrs	r3, r3, #16
 8011e06:	68ba      	ldr	r2, [r7, #8]
 8011e08:	4413      	add	r3, r2
 8011e0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	73fb      	strb	r3, [r7, #15]
 8011e10:	e00d      	b.n	8011e2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	7bfb      	ldrb	r3, [r7, #15]
 8011e18:	3340      	adds	r3, #64	; 0x40
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	4413      	add	r3, r2
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	0c1b      	lsrs	r3, r3, #16
 8011e22:	68ba      	ldr	r2, [r7, #8]
 8011e24:	4413      	add	r3, r2
 8011e26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011e28:	7bfb      	ldrb	r3, [r7, #15]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	73fb      	strb	r3, [r7, #15]
 8011e2e:	7bfa      	ldrb	r2, [r7, #15]
 8011e30:	78fb      	ldrb	r3, [r7, #3]
 8011e32:	3b01      	subs	r3, #1
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d3ec      	bcc.n	8011e12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8011e38:	883b      	ldrh	r3, [r7, #0]
 8011e3a:	0418      	lsls	r0, r3, #16
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6819      	ldr	r1, [r3, #0]
 8011e40:	78fb      	ldrb	r3, [r7, #3]
 8011e42:	3b01      	subs	r3, #1
 8011e44:	68ba      	ldr	r2, [r7, #8]
 8011e46:	4302      	orrs	r2, r0
 8011e48:	3340      	adds	r3, #64	; 0x40
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	440b      	add	r3, r1
 8011e4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011e50:	2300      	movs	r3, #0
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3714      	adds	r7, #20
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	460b      	mov	r3, r1
 8011e68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	887a      	ldrh	r2, [r7, #2]
 8011e70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8011e72:	2300      	movs	r3, #0
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	370c      	adds	r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr

08011e80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011e80:	b480      	push	{r7}
 8011e82:	b085      	sub	sp, #20
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2201      	movs	r2, #1
 8011e92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	699b      	ldr	r3, [r3, #24]
 8011ea2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011eae:	4b05      	ldr	r3, [pc, #20]	; (8011ec4 <HAL_PCDEx_ActivateLPM+0x44>)
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	68fa      	ldr	r2, [r7, #12]
 8011eb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8011eb6:	2300      	movs	r3, #0
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3714      	adds	r7, #20
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	10000003 	.word	0x10000003

08011ec8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b083      	sub	sp, #12
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	460b      	mov	r3, r1
 8011ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011ed4:	bf00      	nop
 8011ed6:	370c      	adds	r7, #12
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr

08011ee0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011ee8:	4b19      	ldr	r3, [pc, #100]	; (8011f50 <HAL_PWREx_ConfigSupply+0x70>)
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	f003 0304 	and.w	r3, r3, #4
 8011ef0:	2b04      	cmp	r3, #4
 8011ef2:	d00a      	beq.n	8011f0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011ef4:	4b16      	ldr	r3, [pc, #88]	; (8011f50 <HAL_PWREx_ConfigSupply+0x70>)
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	f003 0307 	and.w	r3, r3, #7
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d001      	beq.n	8011f06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011f02:	2301      	movs	r3, #1
 8011f04:	e01f      	b.n	8011f46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8011f06:	2300      	movs	r3, #0
 8011f08:	e01d      	b.n	8011f46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011f0a:	4b11      	ldr	r3, [pc, #68]	; (8011f50 <HAL_PWREx_ConfigSupply+0x70>)
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	f023 0207 	bic.w	r2, r3, #7
 8011f12:	490f      	ldr	r1, [pc, #60]	; (8011f50 <HAL_PWREx_ConfigSupply+0x70>)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	4313      	orrs	r3, r2
 8011f18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8011f1a:	f7fa f843 	bl	800bfa4 <HAL_GetTick>
 8011f1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011f20:	e009      	b.n	8011f36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011f22:	f7fa f83f 	bl	800bfa4 <HAL_GetTick>
 8011f26:	4602      	mov	r2, r0
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	1ad3      	subs	r3, r2, r3
 8011f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f30:	d901      	bls.n	8011f36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011f32:	2301      	movs	r3, #1
 8011f34:	e007      	b.n	8011f46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011f36:	4b06      	ldr	r3, [pc, #24]	; (8011f50 <HAL_PWREx_ConfigSupply+0x70>)
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f42:	d1ee      	bne.n	8011f22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	58024800 	.word	0x58024800

08011f54 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8011f54:	b480      	push	{r7}
 8011f56:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8011f58:	4b05      	ldr	r3, [pc, #20]	; (8011f70 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	4a04      	ldr	r2, [pc, #16]	; (8011f70 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011f62:	60d3      	str	r3, [r2, #12]
}
 8011f64:	bf00      	nop
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr
 8011f6e:	bf00      	nop
 8011f70:	58024800 	.word	0x58024800

08011f74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b08c      	sub	sp, #48	; 0x30
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d102      	bne.n	8011f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	f000 bc1d 	b.w	80127c2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f003 0301 	and.w	r3, r3, #1
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	f000 8087 	beq.w	80120a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011f96:	4b99      	ldr	r3, [pc, #612]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8011f98:	691b      	ldr	r3, [r3, #16]
 8011f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011fa0:	4b96      	ldr	r3, [pc, #600]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8011fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa8:	2b10      	cmp	r3, #16
 8011faa:	d007      	beq.n	8011fbc <HAL_RCC_OscConfig+0x48>
 8011fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fae:	2b18      	cmp	r3, #24
 8011fb0:	d110      	bne.n	8011fd4 <HAL_RCC_OscConfig+0x60>
 8011fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb4:	f003 0303 	and.w	r3, r3, #3
 8011fb8:	2b02      	cmp	r3, #2
 8011fba:	d10b      	bne.n	8011fd4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011fbc:	4b8f      	ldr	r3, [pc, #572]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d06c      	beq.n	80120a2 <HAL_RCC_OscConfig+0x12e>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d168      	bne.n	80120a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	e3f6      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fdc:	d106      	bne.n	8011fec <HAL_RCC_OscConfig+0x78>
 8011fde:	4b87      	ldr	r3, [pc, #540]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	4a86      	ldr	r2, [pc, #536]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8011fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011fe8:	6013      	str	r3, [r2, #0]
 8011fea:	e02e      	b.n	801204a <HAL_RCC_OscConfig+0xd6>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d10c      	bne.n	801200e <HAL_RCC_OscConfig+0x9a>
 8011ff4:	4b81      	ldr	r3, [pc, #516]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4a80      	ldr	r2, [pc, #512]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8011ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011ffe:	6013      	str	r3, [r2, #0]
 8012000:	4b7e      	ldr	r3, [pc, #504]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	4a7d      	ldr	r2, [pc, #500]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801200a:	6013      	str	r3, [r2, #0]
 801200c:	e01d      	b.n	801204a <HAL_RCC_OscConfig+0xd6>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012016:	d10c      	bne.n	8012032 <HAL_RCC_OscConfig+0xbe>
 8012018:	4b78      	ldr	r3, [pc, #480]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	4a77      	ldr	r2, [pc, #476]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 801201e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012022:	6013      	str	r3, [r2, #0]
 8012024:	4b75      	ldr	r3, [pc, #468]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4a74      	ldr	r2, [pc, #464]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 801202a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801202e:	6013      	str	r3, [r2, #0]
 8012030:	e00b      	b.n	801204a <HAL_RCC_OscConfig+0xd6>
 8012032:	4b72      	ldr	r3, [pc, #456]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	4a71      	ldr	r2, [pc, #452]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801203c:	6013      	str	r3, [r2, #0]
 801203e:	4b6f      	ldr	r3, [pc, #444]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4a6e      	ldr	r2, [pc, #440]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012048:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d013      	beq.n	801207a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012052:	f7f9 ffa7 	bl	800bfa4 <HAL_GetTick>
 8012056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012058:	e008      	b.n	801206c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801205a:	f7f9 ffa3 	bl	800bfa4 <HAL_GetTick>
 801205e:	4602      	mov	r2, r0
 8012060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012062:	1ad3      	subs	r3, r2, r3
 8012064:	2b64      	cmp	r3, #100	; 0x64
 8012066:	d901      	bls.n	801206c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8012068:	2303      	movs	r3, #3
 801206a:	e3aa      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801206c:	4b63      	ldr	r3, [pc, #396]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012074:	2b00      	cmp	r3, #0
 8012076:	d0f0      	beq.n	801205a <HAL_RCC_OscConfig+0xe6>
 8012078:	e014      	b.n	80120a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801207a:	f7f9 ff93 	bl	800bfa4 <HAL_GetTick>
 801207e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012080:	e008      	b.n	8012094 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012082:	f7f9 ff8f 	bl	800bfa4 <HAL_GetTick>
 8012086:	4602      	mov	r2, r0
 8012088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	2b64      	cmp	r3, #100	; 0x64
 801208e:	d901      	bls.n	8012094 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8012090:	2303      	movs	r3, #3
 8012092:	e396      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012094:	4b59      	ldr	r3, [pc, #356]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801209c:	2b00      	cmp	r3, #0
 801209e:	d1f0      	bne.n	8012082 <HAL_RCC_OscConfig+0x10e>
 80120a0:	e000      	b.n	80120a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80120a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f003 0302 	and.w	r3, r3, #2
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f000 80cb 	beq.w	8012248 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80120b2:	4b52      	ldr	r3, [pc, #328]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80120b4:	691b      	ldr	r3, [r3, #16]
 80120b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80120ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80120bc:	4b4f      	ldr	r3, [pc, #316]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80120be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80120c2:	6a3b      	ldr	r3, [r7, #32]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d007      	beq.n	80120d8 <HAL_RCC_OscConfig+0x164>
 80120c8:	6a3b      	ldr	r3, [r7, #32]
 80120ca:	2b18      	cmp	r3, #24
 80120cc:	d156      	bne.n	801217c <HAL_RCC_OscConfig+0x208>
 80120ce:	69fb      	ldr	r3, [r7, #28]
 80120d0:	f003 0303 	and.w	r3, r3, #3
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d151      	bne.n	801217c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80120d8:	4b48      	ldr	r3, [pc, #288]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f003 0304 	and.w	r3, r3, #4
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d005      	beq.n	80120f0 <HAL_RCC_OscConfig+0x17c>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d101      	bne.n	80120f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80120ec:	2301      	movs	r3, #1
 80120ee:	e368      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80120f0:	4b42      	ldr	r3, [pc, #264]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f023 0219 	bic.w	r2, r3, #25
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	493f      	ldr	r1, [pc, #252]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80120fe:	4313      	orrs	r3, r2
 8012100:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012102:	f7f9 ff4f 	bl	800bfa4 <HAL_GetTick>
 8012106:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012108:	e008      	b.n	801211c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801210a:	f7f9 ff4b 	bl	800bfa4 <HAL_GetTick>
 801210e:	4602      	mov	r2, r0
 8012110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	2b02      	cmp	r3, #2
 8012116:	d901      	bls.n	801211c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8012118:	2303      	movs	r3, #3
 801211a:	e352      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801211c:	4b37      	ldr	r3, [pc, #220]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	f003 0304 	and.w	r3, r3, #4
 8012124:	2b00      	cmp	r3, #0
 8012126:	d0f0      	beq.n	801210a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012128:	f7f9 ff6c 	bl	800c004 <HAL_GetREVID>
 801212c:	4603      	mov	r3, r0
 801212e:	f241 0203 	movw	r2, #4099	; 0x1003
 8012132:	4293      	cmp	r3, r2
 8012134:	d817      	bhi.n	8012166 <HAL_RCC_OscConfig+0x1f2>
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	691b      	ldr	r3, [r3, #16]
 801213a:	2b40      	cmp	r3, #64	; 0x40
 801213c:	d108      	bne.n	8012150 <HAL_RCC_OscConfig+0x1dc>
 801213e:	4b2f      	ldr	r3, [pc, #188]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8012146:	4a2d      	ldr	r2, [pc, #180]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801214c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801214e:	e07b      	b.n	8012248 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012150:	4b2a      	ldr	r3, [pc, #168]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	691b      	ldr	r3, [r3, #16]
 801215c:	031b      	lsls	r3, r3, #12
 801215e:	4927      	ldr	r1, [pc, #156]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012160:	4313      	orrs	r3, r2
 8012162:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012164:	e070      	b.n	8012248 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012166:	4b25      	ldr	r3, [pc, #148]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	691b      	ldr	r3, [r3, #16]
 8012172:	061b      	lsls	r3, r3, #24
 8012174:	4921      	ldr	r1, [pc, #132]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012176:	4313      	orrs	r3, r2
 8012178:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801217a:	e065      	b.n	8012248 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d048      	beq.n	8012216 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012184:	4b1d      	ldr	r3, [pc, #116]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f023 0219 	bic.w	r2, r3, #25
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	491a      	ldr	r1, [pc, #104]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 8012192:	4313      	orrs	r3, r2
 8012194:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012196:	f7f9 ff05 	bl	800bfa4 <HAL_GetTick>
 801219a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801219c:	e008      	b.n	80121b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801219e:	f7f9 ff01 	bl	800bfa4 <HAL_GetTick>
 80121a2:	4602      	mov	r2, r0
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	2b02      	cmp	r3, #2
 80121aa:	d901      	bls.n	80121b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80121ac:	2303      	movs	r3, #3
 80121ae:	e308      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80121b0:	4b12      	ldr	r3, [pc, #72]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f003 0304 	and.w	r3, r3, #4
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d0f0      	beq.n	801219e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80121bc:	f7f9 ff22 	bl	800c004 <HAL_GetREVID>
 80121c0:	4603      	mov	r3, r0
 80121c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d81a      	bhi.n	8012200 <HAL_RCC_OscConfig+0x28c>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	691b      	ldr	r3, [r3, #16]
 80121ce:	2b40      	cmp	r3, #64	; 0x40
 80121d0:	d108      	bne.n	80121e4 <HAL_RCC_OscConfig+0x270>
 80121d2:	4b0a      	ldr	r3, [pc, #40]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80121da:	4a08      	ldr	r2, [pc, #32]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80121dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80121e0:	6053      	str	r3, [r2, #4]
 80121e2:	e031      	b.n	8012248 <HAL_RCC_OscConfig+0x2d4>
 80121e4:	4b05      	ldr	r3, [pc, #20]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	691b      	ldr	r3, [r3, #16]
 80121f0:	031b      	lsls	r3, r3, #12
 80121f2:	4902      	ldr	r1, [pc, #8]	; (80121fc <HAL_RCC_OscConfig+0x288>)
 80121f4:	4313      	orrs	r3, r2
 80121f6:	604b      	str	r3, [r1, #4]
 80121f8:	e026      	b.n	8012248 <HAL_RCC_OscConfig+0x2d4>
 80121fa:	bf00      	nop
 80121fc:	58024400 	.word	0x58024400
 8012200:	4b9a      	ldr	r3, [pc, #616]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	691b      	ldr	r3, [r3, #16]
 801220c:	061b      	lsls	r3, r3, #24
 801220e:	4997      	ldr	r1, [pc, #604]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012210:	4313      	orrs	r3, r2
 8012212:	604b      	str	r3, [r1, #4]
 8012214:	e018      	b.n	8012248 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012216:	4b95      	ldr	r3, [pc, #596]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4a94      	ldr	r2, [pc, #592]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801221c:	f023 0301 	bic.w	r3, r3, #1
 8012220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012222:	f7f9 febf 	bl	800bfa4 <HAL_GetTick>
 8012226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8012228:	e008      	b.n	801223c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801222a:	f7f9 febb 	bl	800bfa4 <HAL_GetTick>
 801222e:	4602      	mov	r2, r0
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	1ad3      	subs	r3, r2, r3
 8012234:	2b02      	cmp	r3, #2
 8012236:	d901      	bls.n	801223c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8012238:	2303      	movs	r3, #3
 801223a:	e2c2      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801223c:	4b8b      	ldr	r3, [pc, #556]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f003 0304 	and.w	r3, r3, #4
 8012244:	2b00      	cmp	r3, #0
 8012246:	d1f0      	bne.n	801222a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f003 0310 	and.w	r3, r3, #16
 8012250:	2b00      	cmp	r3, #0
 8012252:	f000 80a9 	beq.w	80123a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012256:	4b85      	ldr	r3, [pc, #532]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012258:	691b      	ldr	r3, [r3, #16]
 801225a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801225e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012260:	4b82      	ldr	r3, [pc, #520]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012264:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012266:	69bb      	ldr	r3, [r7, #24]
 8012268:	2b08      	cmp	r3, #8
 801226a:	d007      	beq.n	801227c <HAL_RCC_OscConfig+0x308>
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	2b18      	cmp	r3, #24
 8012270:	d13a      	bne.n	80122e8 <HAL_RCC_OscConfig+0x374>
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	f003 0303 	and.w	r3, r3, #3
 8012278:	2b01      	cmp	r3, #1
 801227a:	d135      	bne.n	80122e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801227c:	4b7b      	ldr	r3, [pc, #492]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012284:	2b00      	cmp	r3, #0
 8012286:	d005      	beq.n	8012294 <HAL_RCC_OscConfig+0x320>
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	69db      	ldr	r3, [r3, #28]
 801228c:	2b80      	cmp	r3, #128	; 0x80
 801228e:	d001      	beq.n	8012294 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8012290:	2301      	movs	r3, #1
 8012292:	e296      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012294:	f7f9 feb6 	bl	800c004 <HAL_GetREVID>
 8012298:	4603      	mov	r3, r0
 801229a:	f241 0203 	movw	r2, #4099	; 0x1003
 801229e:	4293      	cmp	r3, r2
 80122a0:	d817      	bhi.n	80122d2 <HAL_RCC_OscConfig+0x35e>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6a1b      	ldr	r3, [r3, #32]
 80122a6:	2b20      	cmp	r3, #32
 80122a8:	d108      	bne.n	80122bc <HAL_RCC_OscConfig+0x348>
 80122aa:	4b70      	ldr	r3, [pc, #448]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80122b2:	4a6e      	ldr	r2, [pc, #440]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80122b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80122ba:	e075      	b.n	80123a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80122bc:	4b6b      	ldr	r3, [pc, #428]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6a1b      	ldr	r3, [r3, #32]
 80122c8:	069b      	lsls	r3, r3, #26
 80122ca:	4968      	ldr	r1, [pc, #416]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122cc:	4313      	orrs	r3, r2
 80122ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80122d0:	e06a      	b.n	80123a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80122d2:	4b66      	ldr	r3, [pc, #408]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122d4:	68db      	ldr	r3, [r3, #12]
 80122d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6a1b      	ldr	r3, [r3, #32]
 80122de:	061b      	lsls	r3, r3, #24
 80122e0:	4962      	ldr	r1, [pc, #392]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122e2:	4313      	orrs	r3, r2
 80122e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80122e6:	e05f      	b.n	80123a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	69db      	ldr	r3, [r3, #28]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d042      	beq.n	8012376 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80122f0:	4b5e      	ldr	r3, [pc, #376]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4a5d      	ldr	r2, [pc, #372]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80122f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80122fc:	f7f9 fe52 	bl	800bfa4 <HAL_GetTick>
 8012300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012302:	e008      	b.n	8012316 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8012304:	f7f9 fe4e 	bl	800bfa4 <HAL_GetTick>
 8012308:	4602      	mov	r2, r0
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	2b02      	cmp	r3, #2
 8012310:	d901      	bls.n	8012316 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8012312:	2303      	movs	r3, #3
 8012314:	e255      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012316:	4b55      	ldr	r3, [pc, #340]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801231e:	2b00      	cmp	r3, #0
 8012320:	d0f0      	beq.n	8012304 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012322:	f7f9 fe6f 	bl	800c004 <HAL_GetREVID>
 8012326:	4603      	mov	r3, r0
 8012328:	f241 0203 	movw	r2, #4099	; 0x1003
 801232c:	4293      	cmp	r3, r2
 801232e:	d817      	bhi.n	8012360 <HAL_RCC_OscConfig+0x3ec>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6a1b      	ldr	r3, [r3, #32]
 8012334:	2b20      	cmp	r3, #32
 8012336:	d108      	bne.n	801234a <HAL_RCC_OscConfig+0x3d6>
 8012338:	4b4c      	ldr	r3, [pc, #304]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8012340:	4a4a      	ldr	r2, [pc, #296]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012346:	6053      	str	r3, [r2, #4]
 8012348:	e02e      	b.n	80123a8 <HAL_RCC_OscConfig+0x434>
 801234a:	4b48      	ldr	r3, [pc, #288]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6a1b      	ldr	r3, [r3, #32]
 8012356:	069b      	lsls	r3, r3, #26
 8012358:	4944      	ldr	r1, [pc, #272]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801235a:	4313      	orrs	r3, r2
 801235c:	604b      	str	r3, [r1, #4]
 801235e:	e023      	b.n	80123a8 <HAL_RCC_OscConfig+0x434>
 8012360:	4b42      	ldr	r3, [pc, #264]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6a1b      	ldr	r3, [r3, #32]
 801236c:	061b      	lsls	r3, r3, #24
 801236e:	493f      	ldr	r1, [pc, #252]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012370:	4313      	orrs	r3, r2
 8012372:	60cb      	str	r3, [r1, #12]
 8012374:	e018      	b.n	80123a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012376:	4b3d      	ldr	r3, [pc, #244]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4a3c      	ldr	r2, [pc, #240]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801237c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012382:	f7f9 fe0f 	bl	800bfa4 <HAL_GetTick>
 8012386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012388:	e008      	b.n	801239c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801238a:	f7f9 fe0b 	bl	800bfa4 <HAL_GetTick>
 801238e:	4602      	mov	r2, r0
 8012390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012392:	1ad3      	subs	r3, r2, r3
 8012394:	2b02      	cmp	r3, #2
 8012396:	d901      	bls.n	801239c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012398:	2303      	movs	r3, #3
 801239a:	e212      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801239c:	4b33      	ldr	r3, [pc, #204]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1f0      	bne.n	801238a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f003 0308 	and.w	r3, r3, #8
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d036      	beq.n	8012422 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	695b      	ldr	r3, [r3, #20]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d019      	beq.n	80123f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80123bc:	4b2b      	ldr	r3, [pc, #172]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80123be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123c0:	4a2a      	ldr	r2, [pc, #168]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80123c2:	f043 0301 	orr.w	r3, r3, #1
 80123c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80123c8:	f7f9 fdec 	bl	800bfa4 <HAL_GetTick>
 80123cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80123ce:	e008      	b.n	80123e2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80123d0:	f7f9 fde8 	bl	800bfa4 <HAL_GetTick>
 80123d4:	4602      	mov	r2, r0
 80123d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	2b02      	cmp	r3, #2
 80123dc:	d901      	bls.n	80123e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80123de:	2303      	movs	r3, #3
 80123e0:	e1ef      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80123e2:	4b22      	ldr	r3, [pc, #136]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80123e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123e6:	f003 0302 	and.w	r3, r3, #2
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d0f0      	beq.n	80123d0 <HAL_RCC_OscConfig+0x45c>
 80123ee:	e018      	b.n	8012422 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80123f0:	4b1e      	ldr	r3, [pc, #120]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80123f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123f4:	4a1d      	ldr	r2, [pc, #116]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 80123f6:	f023 0301 	bic.w	r3, r3, #1
 80123fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80123fc:	f7f9 fdd2 	bl	800bfa4 <HAL_GetTick>
 8012400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012402:	e008      	b.n	8012416 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012404:	f7f9 fdce 	bl	800bfa4 <HAL_GetTick>
 8012408:	4602      	mov	r2, r0
 801240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	2b02      	cmp	r3, #2
 8012410:	d901      	bls.n	8012416 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8012412:	2303      	movs	r3, #3
 8012414:	e1d5      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012416:	4b15      	ldr	r3, [pc, #84]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801241a:	f003 0302 	and.w	r3, r3, #2
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1f0      	bne.n	8012404 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f003 0320 	and.w	r3, r3, #32
 801242a:	2b00      	cmp	r3, #0
 801242c:	d039      	beq.n	80124a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	699b      	ldr	r3, [r3, #24]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d01c      	beq.n	8012470 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012436:	4b0d      	ldr	r3, [pc, #52]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4a0c      	ldr	r2, [pc, #48]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801243c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012440:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012442:	f7f9 fdaf 	bl	800bfa4 <HAL_GetTick>
 8012446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012448:	e008      	b.n	801245c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801244a:	f7f9 fdab 	bl	800bfa4 <HAL_GetTick>
 801244e:	4602      	mov	r2, r0
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	1ad3      	subs	r3, r2, r3
 8012454:	2b02      	cmp	r3, #2
 8012456:	d901      	bls.n	801245c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8012458:	2303      	movs	r3, #3
 801245a:	e1b2      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801245c:	4b03      	ldr	r3, [pc, #12]	; (801246c <HAL_RCC_OscConfig+0x4f8>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012464:	2b00      	cmp	r3, #0
 8012466:	d0f0      	beq.n	801244a <HAL_RCC_OscConfig+0x4d6>
 8012468:	e01b      	b.n	80124a2 <HAL_RCC_OscConfig+0x52e>
 801246a:	bf00      	nop
 801246c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012470:	4b9b      	ldr	r3, [pc, #620]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	4a9a      	ldr	r2, [pc, #616]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801247a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801247c:	f7f9 fd92 	bl	800bfa4 <HAL_GetTick>
 8012480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012482:	e008      	b.n	8012496 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8012484:	f7f9 fd8e 	bl	800bfa4 <HAL_GetTick>
 8012488:	4602      	mov	r2, r0
 801248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248c:	1ad3      	subs	r3, r2, r3
 801248e:	2b02      	cmp	r3, #2
 8012490:	d901      	bls.n	8012496 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8012492:	2303      	movs	r3, #3
 8012494:	e195      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012496:	4b92      	ldr	r3, [pc, #584]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1f0      	bne.n	8012484 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f003 0304 	and.w	r3, r3, #4
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f000 8081 	beq.w	80125b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80124b0:	4b8c      	ldr	r3, [pc, #560]	; (80126e4 <HAL_RCC_OscConfig+0x770>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a8b      	ldr	r2, [pc, #556]	; (80126e4 <HAL_RCC_OscConfig+0x770>)
 80124b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80124ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80124bc:	f7f9 fd72 	bl	800bfa4 <HAL_GetTick>
 80124c0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80124c2:	e008      	b.n	80124d6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80124c4:	f7f9 fd6e 	bl	800bfa4 <HAL_GetTick>
 80124c8:	4602      	mov	r2, r0
 80124ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124cc:	1ad3      	subs	r3, r2, r3
 80124ce:	2b64      	cmp	r3, #100	; 0x64
 80124d0:	d901      	bls.n	80124d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80124d2:	2303      	movs	r3, #3
 80124d4:	e175      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80124d6:	4b83      	ldr	r3, [pc, #524]	; (80126e4 <HAL_RCC_OscConfig+0x770>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d0f0      	beq.n	80124c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d106      	bne.n	80124f8 <HAL_RCC_OscConfig+0x584>
 80124ea:	4b7d      	ldr	r3, [pc, #500]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80124ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ee:	4a7c      	ldr	r2, [pc, #496]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80124f0:	f043 0301 	orr.w	r3, r3, #1
 80124f4:	6713      	str	r3, [r2, #112]	; 0x70
 80124f6:	e02d      	b.n	8012554 <HAL_RCC_OscConfig+0x5e0>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d10c      	bne.n	801251a <HAL_RCC_OscConfig+0x5a6>
 8012500:	4b77      	ldr	r3, [pc, #476]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012504:	4a76      	ldr	r2, [pc, #472]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012506:	f023 0301 	bic.w	r3, r3, #1
 801250a:	6713      	str	r3, [r2, #112]	; 0x70
 801250c:	4b74      	ldr	r3, [pc, #464]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012510:	4a73      	ldr	r2, [pc, #460]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012512:	f023 0304 	bic.w	r3, r3, #4
 8012516:	6713      	str	r3, [r2, #112]	; 0x70
 8012518:	e01c      	b.n	8012554 <HAL_RCC_OscConfig+0x5e0>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	2b05      	cmp	r3, #5
 8012520:	d10c      	bne.n	801253c <HAL_RCC_OscConfig+0x5c8>
 8012522:	4b6f      	ldr	r3, [pc, #444]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012526:	4a6e      	ldr	r2, [pc, #440]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012528:	f043 0304 	orr.w	r3, r3, #4
 801252c:	6713      	str	r3, [r2, #112]	; 0x70
 801252e:	4b6c      	ldr	r3, [pc, #432]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012532:	4a6b      	ldr	r2, [pc, #428]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012534:	f043 0301 	orr.w	r3, r3, #1
 8012538:	6713      	str	r3, [r2, #112]	; 0x70
 801253a:	e00b      	b.n	8012554 <HAL_RCC_OscConfig+0x5e0>
 801253c:	4b68      	ldr	r3, [pc, #416]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012540:	4a67      	ldr	r2, [pc, #412]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012542:	f023 0301 	bic.w	r3, r3, #1
 8012546:	6713      	str	r3, [r2, #112]	; 0x70
 8012548:	4b65      	ldr	r3, [pc, #404]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801254c:	4a64      	ldr	r2, [pc, #400]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801254e:	f023 0304 	bic.w	r3, r3, #4
 8012552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d015      	beq.n	8012588 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801255c:	f7f9 fd22 	bl	800bfa4 <HAL_GetTick>
 8012560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012562:	e00a      	b.n	801257a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012564:	f7f9 fd1e 	bl	800bfa4 <HAL_GetTick>
 8012568:	4602      	mov	r2, r0
 801256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012572:	4293      	cmp	r3, r2
 8012574:	d901      	bls.n	801257a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8012576:	2303      	movs	r3, #3
 8012578:	e123      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801257a:	4b59      	ldr	r3, [pc, #356]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801257e:	f003 0302 	and.w	r3, r3, #2
 8012582:	2b00      	cmp	r3, #0
 8012584:	d0ee      	beq.n	8012564 <HAL_RCC_OscConfig+0x5f0>
 8012586:	e014      	b.n	80125b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012588:	f7f9 fd0c 	bl	800bfa4 <HAL_GetTick>
 801258c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801258e:	e00a      	b.n	80125a6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012590:	f7f9 fd08 	bl	800bfa4 <HAL_GetTick>
 8012594:	4602      	mov	r2, r0
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	1ad3      	subs	r3, r2, r3
 801259a:	f241 3288 	movw	r2, #5000	; 0x1388
 801259e:	4293      	cmp	r3, r2
 80125a0:	d901      	bls.n	80125a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80125a2:	2303      	movs	r3, #3
 80125a4:	e10d      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80125a6:	4b4e      	ldr	r3, [pc, #312]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80125a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125aa:	f003 0302 	and.w	r3, r3, #2
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d1ee      	bne.n	8012590 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	f000 8102 	beq.w	80127c0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80125bc:	4b48      	ldr	r3, [pc, #288]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80125be:	691b      	ldr	r3, [r3, #16]
 80125c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80125c4:	2b18      	cmp	r3, #24
 80125c6:	f000 80bd 	beq.w	8012744 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ce:	2b02      	cmp	r3, #2
 80125d0:	f040 809e 	bne.w	8012710 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80125d4:	4b42      	ldr	r3, [pc, #264]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4a41      	ldr	r2, [pc, #260]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80125da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80125de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80125e0:	f7f9 fce0 	bl	800bfa4 <HAL_GetTick>
 80125e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80125e6:	e008      	b.n	80125fa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80125e8:	f7f9 fcdc 	bl	800bfa4 <HAL_GetTick>
 80125ec:	4602      	mov	r2, r0
 80125ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	2b02      	cmp	r3, #2
 80125f4:	d901      	bls.n	80125fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80125f6:	2303      	movs	r3, #3
 80125f8:	e0e3      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80125fa:	4b39      	ldr	r3, [pc, #228]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1f0      	bne.n	80125e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012606:	4b36      	ldr	r3, [pc, #216]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801260a:	4b37      	ldr	r3, [pc, #220]	; (80126e8 <HAL_RCC_OscConfig+0x774>)
 801260c:	4013      	ands	r3, r2
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8012612:	687a      	ldr	r2, [r7, #4]
 8012614:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012616:	0112      	lsls	r2, r2, #4
 8012618:	430a      	orrs	r2, r1
 801261a:	4931      	ldr	r1, [pc, #196]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801261c:	4313      	orrs	r3, r2
 801261e:	628b      	str	r3, [r1, #40]	; 0x28
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012624:	3b01      	subs	r3, #1
 8012626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801262e:	3b01      	subs	r3, #1
 8012630:	025b      	lsls	r3, r3, #9
 8012632:	b29b      	uxth	r3, r3
 8012634:	431a      	orrs	r2, r3
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801263a:	3b01      	subs	r3, #1
 801263c:	041b      	lsls	r3, r3, #16
 801263e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012642:	431a      	orrs	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012648:	3b01      	subs	r3, #1
 801264a:	061b      	lsls	r3, r3, #24
 801264c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012650:	4923      	ldr	r1, [pc, #140]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012652:	4313      	orrs	r3, r2
 8012654:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8012656:	4b22      	ldr	r3, [pc, #136]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265a:	4a21      	ldr	r2, [pc, #132]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801265c:	f023 0301 	bic.w	r3, r3, #1
 8012660:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012662:	4b1f      	ldr	r3, [pc, #124]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012666:	4b21      	ldr	r3, [pc, #132]	; (80126ec <HAL_RCC_OscConfig+0x778>)
 8012668:	4013      	ands	r3, r2
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801266e:	00d2      	lsls	r2, r2, #3
 8012670:	491b      	ldr	r1, [pc, #108]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012672:	4313      	orrs	r3, r2
 8012674:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012676:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801267a:	f023 020c 	bic.w	r2, r3, #12
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012682:	4917      	ldr	r1, [pc, #92]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012684:	4313      	orrs	r3, r2
 8012686:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012688:	4b15      	ldr	r3, [pc, #84]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268c:	f023 0202 	bic.w	r2, r3, #2
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012694:	4912      	ldr	r1, [pc, #72]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 8012696:	4313      	orrs	r3, r2
 8012698:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801269a:	4b11      	ldr	r3, [pc, #68]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 801269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801269e:	4a10      	ldr	r2, [pc, #64]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80126a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126a6:	4b0e      	ldr	r3, [pc, #56]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126aa:	4a0d      	ldr	r2, [pc, #52]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80126b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80126b2:	4b0b      	ldr	r3, [pc, #44]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126b6:	4a0a      	ldr	r2, [pc, #40]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80126bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80126be:	4b08      	ldr	r3, [pc, #32]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c2:	4a07      	ldr	r2, [pc, #28]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126c4:	f043 0301 	orr.w	r3, r3, #1
 80126c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80126ca:	4b05      	ldr	r3, [pc, #20]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4a04      	ldr	r2, [pc, #16]	; (80126e0 <HAL_RCC_OscConfig+0x76c>)
 80126d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80126d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80126d6:	f7f9 fc65 	bl	800bfa4 <HAL_GetTick>
 80126da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80126dc:	e011      	b.n	8012702 <HAL_RCC_OscConfig+0x78e>
 80126de:	bf00      	nop
 80126e0:	58024400 	.word	0x58024400
 80126e4:	58024800 	.word	0x58024800
 80126e8:	fffffc0c 	.word	0xfffffc0c
 80126ec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80126f0:	f7f9 fc58 	bl	800bfa4 <HAL_GetTick>
 80126f4:	4602      	mov	r2, r0
 80126f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f8:	1ad3      	subs	r3, r2, r3
 80126fa:	2b02      	cmp	r3, #2
 80126fc:	d901      	bls.n	8012702 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80126fe:	2303      	movs	r3, #3
 8012700:	e05f      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012702:	4b32      	ldr	r3, [pc, #200]	; (80127cc <HAL_RCC_OscConfig+0x858>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801270a:	2b00      	cmp	r3, #0
 801270c:	d0f0      	beq.n	80126f0 <HAL_RCC_OscConfig+0x77c>
 801270e:	e057      	b.n	80127c0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012710:	4b2e      	ldr	r3, [pc, #184]	; (80127cc <HAL_RCC_OscConfig+0x858>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	4a2d      	ldr	r2, [pc, #180]	; (80127cc <HAL_RCC_OscConfig+0x858>)
 8012716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801271c:	f7f9 fc42 	bl	800bfa4 <HAL_GetTick>
 8012720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012722:	e008      	b.n	8012736 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012724:	f7f9 fc3e 	bl	800bfa4 <HAL_GetTick>
 8012728:	4602      	mov	r2, r0
 801272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	2b02      	cmp	r3, #2
 8012730:	d901      	bls.n	8012736 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8012732:	2303      	movs	r3, #3
 8012734:	e045      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012736:	4b25      	ldr	r3, [pc, #148]	; (80127cc <HAL_RCC_OscConfig+0x858>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801273e:	2b00      	cmp	r3, #0
 8012740:	d1f0      	bne.n	8012724 <HAL_RCC_OscConfig+0x7b0>
 8012742:	e03d      	b.n	80127c0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012744:	4b21      	ldr	r3, [pc, #132]	; (80127cc <HAL_RCC_OscConfig+0x858>)
 8012746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012748:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801274a:	4b20      	ldr	r3, [pc, #128]	; (80127cc <HAL_RCC_OscConfig+0x858>)
 801274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801274e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012754:	2b01      	cmp	r3, #1
 8012756:	d031      	beq.n	80127bc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	f003 0203 	and.w	r2, r3, #3
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012762:	429a      	cmp	r2, r3
 8012764:	d12a      	bne.n	80127bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	091b      	lsrs	r3, r3, #4
 801276a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012772:	429a      	cmp	r2, r3
 8012774:	d122      	bne.n	80127bc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012780:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012782:	429a      	cmp	r2, r3
 8012784:	d11a      	bne.n	80127bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	0a5b      	lsrs	r3, r3, #9
 801278a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012792:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012794:	429a      	cmp	r2, r3
 8012796:	d111      	bne.n	80127bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	0c1b      	lsrs	r3, r3, #16
 801279c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d108      	bne.n	80127bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	0e1b      	lsrs	r3, r3, #24
 80127ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d001      	beq.n	80127c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80127bc:	2301      	movs	r3, #1
 80127be:	e000      	b.n	80127c2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80127c0:	2300      	movs	r3, #0
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3730      	adds	r7, #48	; 0x30
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	58024400 	.word	0x58024400

080127d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80127e0:	2301      	movs	r3, #1
 80127e2:	e19c      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80127e4:	4b8a      	ldr	r3, [pc, #552]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f003 030f 	and.w	r3, r3, #15
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d910      	bls.n	8012814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80127f2:	4b87      	ldr	r3, [pc, #540]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f023 020f 	bic.w	r2, r3, #15
 80127fa:	4985      	ldr	r1, [pc, #532]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	4313      	orrs	r3, r2
 8012800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012802:	4b83      	ldr	r3, [pc, #524]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f003 030f 	and.w	r3, r3, #15
 801280a:	683a      	ldr	r2, [r7, #0]
 801280c:	429a      	cmp	r2, r3
 801280e:	d001      	beq.n	8012814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8012810:	2301      	movs	r3, #1
 8012812:	e184      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f003 0304 	and.w	r3, r3, #4
 801281c:	2b00      	cmp	r3, #0
 801281e:	d010      	beq.n	8012842 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	691a      	ldr	r2, [r3, #16]
 8012824:	4b7b      	ldr	r3, [pc, #492]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012826:	699b      	ldr	r3, [r3, #24]
 8012828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801282c:	429a      	cmp	r2, r3
 801282e:	d908      	bls.n	8012842 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012830:	4b78      	ldr	r3, [pc, #480]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012832:	699b      	ldr	r3, [r3, #24]
 8012834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	691b      	ldr	r3, [r3, #16]
 801283c:	4975      	ldr	r1, [pc, #468]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 801283e:	4313      	orrs	r3, r2
 8012840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f003 0308 	and.w	r3, r3, #8
 801284a:	2b00      	cmp	r3, #0
 801284c:	d010      	beq.n	8012870 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	695a      	ldr	r2, [r3, #20]
 8012852:	4b70      	ldr	r3, [pc, #448]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012854:	69db      	ldr	r3, [r3, #28]
 8012856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801285a:	429a      	cmp	r2, r3
 801285c:	d908      	bls.n	8012870 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801285e:	4b6d      	ldr	r3, [pc, #436]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012860:	69db      	ldr	r3, [r3, #28]
 8012862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	695b      	ldr	r3, [r3, #20]
 801286a:	496a      	ldr	r1, [pc, #424]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 801286c:	4313      	orrs	r3, r2
 801286e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f003 0310 	and.w	r3, r3, #16
 8012878:	2b00      	cmp	r3, #0
 801287a:	d010      	beq.n	801289e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	699a      	ldr	r2, [r3, #24]
 8012880:	4b64      	ldr	r3, [pc, #400]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012882:	69db      	ldr	r3, [r3, #28]
 8012884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012888:	429a      	cmp	r2, r3
 801288a:	d908      	bls.n	801289e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801288c:	4b61      	ldr	r3, [pc, #388]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 801288e:	69db      	ldr	r3, [r3, #28]
 8012890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	699b      	ldr	r3, [r3, #24]
 8012898:	495e      	ldr	r1, [pc, #376]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 801289a:	4313      	orrs	r3, r2
 801289c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f003 0320 	and.w	r3, r3, #32
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d010      	beq.n	80128cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	69da      	ldr	r2, [r3, #28]
 80128ae:	4b59      	ldr	r3, [pc, #356]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80128b0:	6a1b      	ldr	r3, [r3, #32]
 80128b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d908      	bls.n	80128cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80128ba:	4b56      	ldr	r3, [pc, #344]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80128bc:	6a1b      	ldr	r3, [r3, #32]
 80128be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	69db      	ldr	r3, [r3, #28]
 80128c6:	4953      	ldr	r1, [pc, #332]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80128c8:	4313      	orrs	r3, r2
 80128ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f003 0302 	and.w	r3, r3, #2
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d010      	beq.n	80128fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	68da      	ldr	r2, [r3, #12]
 80128dc:	4b4d      	ldr	r3, [pc, #308]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80128de:	699b      	ldr	r3, [r3, #24]
 80128e0:	f003 030f 	and.w	r3, r3, #15
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d908      	bls.n	80128fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80128e8:	4b4a      	ldr	r3, [pc, #296]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80128ea:	699b      	ldr	r3, [r3, #24]
 80128ec:	f023 020f 	bic.w	r2, r3, #15
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	68db      	ldr	r3, [r3, #12]
 80128f4:	4947      	ldr	r1, [pc, #284]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80128f6:	4313      	orrs	r3, r2
 80128f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	f003 0301 	and.w	r3, r3, #1
 8012902:	2b00      	cmp	r3, #0
 8012904:	d055      	beq.n	80129b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8012906:	4b43      	ldr	r3, [pc, #268]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012908:	699b      	ldr	r3, [r3, #24]
 801290a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	689b      	ldr	r3, [r3, #8]
 8012912:	4940      	ldr	r1, [pc, #256]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012914:	4313      	orrs	r3, r2
 8012916:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	2b02      	cmp	r3, #2
 801291e:	d107      	bne.n	8012930 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012920:	4b3c      	ldr	r3, [pc, #240]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012928:	2b00      	cmp	r3, #0
 801292a:	d121      	bne.n	8012970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801292c:	2301      	movs	r3, #1
 801292e:	e0f6      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	2b03      	cmp	r3, #3
 8012936:	d107      	bne.n	8012948 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012938:	4b36      	ldr	r3, [pc, #216]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012940:	2b00      	cmp	r3, #0
 8012942:	d115      	bne.n	8012970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012944:	2301      	movs	r3, #1
 8012946:	e0ea      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	2b01      	cmp	r3, #1
 801294e:	d107      	bne.n	8012960 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012950:	4b30      	ldr	r3, [pc, #192]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012958:	2b00      	cmp	r3, #0
 801295a:	d109      	bne.n	8012970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801295c:	2301      	movs	r3, #1
 801295e:	e0de      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012960:	4b2c      	ldr	r3, [pc, #176]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f003 0304 	and.w	r3, r3, #4
 8012968:	2b00      	cmp	r3, #0
 801296a:	d101      	bne.n	8012970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801296c:	2301      	movs	r3, #1
 801296e:	e0d6      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012970:	4b28      	ldr	r3, [pc, #160]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 8012972:	691b      	ldr	r3, [r3, #16]
 8012974:	f023 0207 	bic.w	r2, r3, #7
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	4925      	ldr	r1, [pc, #148]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 801297e:	4313      	orrs	r3, r2
 8012980:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012982:	f7f9 fb0f 	bl	800bfa4 <HAL_GetTick>
 8012986:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012988:	e00a      	b.n	80129a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801298a:	f7f9 fb0b 	bl	800bfa4 <HAL_GetTick>
 801298e:	4602      	mov	r2, r0
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	f241 3288 	movw	r2, #5000	; 0x1388
 8012998:	4293      	cmp	r3, r2
 801299a:	d901      	bls.n	80129a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801299c:	2303      	movs	r3, #3
 801299e:	e0be      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80129a0:	4b1c      	ldr	r3, [pc, #112]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80129a2:	691b      	ldr	r3, [r3, #16]
 80129a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d1eb      	bne.n	801298a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	f003 0302 	and.w	r3, r3, #2
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d010      	beq.n	80129e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	68da      	ldr	r2, [r3, #12]
 80129c2:	4b14      	ldr	r3, [pc, #80]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80129c4:	699b      	ldr	r3, [r3, #24]
 80129c6:	f003 030f 	and.w	r3, r3, #15
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d208      	bcs.n	80129e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80129ce:	4b11      	ldr	r3, [pc, #68]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80129d0:	699b      	ldr	r3, [r3, #24]
 80129d2:	f023 020f 	bic.w	r2, r3, #15
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	68db      	ldr	r3, [r3, #12]
 80129da:	490e      	ldr	r1, [pc, #56]	; (8012a14 <HAL_RCC_ClockConfig+0x244>)
 80129dc:	4313      	orrs	r3, r2
 80129de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80129e0:	4b0b      	ldr	r3, [pc, #44]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f003 030f 	and.w	r3, r3, #15
 80129e8:	683a      	ldr	r2, [r7, #0]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d214      	bcs.n	8012a18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80129ee:	4b08      	ldr	r3, [pc, #32]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f023 020f 	bic.w	r2, r3, #15
 80129f6:	4906      	ldr	r1, [pc, #24]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	4313      	orrs	r3, r2
 80129fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80129fe:	4b04      	ldr	r3, [pc, #16]	; (8012a10 <HAL_RCC_ClockConfig+0x240>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f003 030f 	and.w	r3, r3, #15
 8012a06:	683a      	ldr	r2, [r7, #0]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d005      	beq.n	8012a18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	e086      	b.n	8012b1e <HAL_RCC_ClockConfig+0x34e>
 8012a10:	52002000 	.word	0x52002000
 8012a14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f003 0304 	and.w	r3, r3, #4
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d010      	beq.n	8012a46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	691a      	ldr	r2, [r3, #16]
 8012a28:	4b3f      	ldr	r3, [pc, #252]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a2a:	699b      	ldr	r3, [r3, #24]
 8012a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d208      	bcs.n	8012a46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012a34:	4b3c      	ldr	r3, [pc, #240]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a36:	699b      	ldr	r3, [r3, #24]
 8012a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	691b      	ldr	r3, [r3, #16]
 8012a40:	4939      	ldr	r1, [pc, #228]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a42:	4313      	orrs	r3, r2
 8012a44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f003 0308 	and.w	r3, r3, #8
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d010      	beq.n	8012a74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	695a      	ldr	r2, [r3, #20]
 8012a56:	4b34      	ldr	r3, [pc, #208]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a58:	69db      	ldr	r3, [r3, #28]
 8012a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d208      	bcs.n	8012a74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8012a62:	4b31      	ldr	r3, [pc, #196]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a64:	69db      	ldr	r3, [r3, #28]
 8012a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	695b      	ldr	r3, [r3, #20]
 8012a6e:	492e      	ldr	r1, [pc, #184]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a70:	4313      	orrs	r3, r2
 8012a72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f003 0310 	and.w	r3, r3, #16
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d010      	beq.n	8012aa2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	699a      	ldr	r2, [r3, #24]
 8012a84:	4b28      	ldr	r3, [pc, #160]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a86:	69db      	ldr	r3, [r3, #28]
 8012a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d208      	bcs.n	8012aa2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012a90:	4b25      	ldr	r3, [pc, #148]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a92:	69db      	ldr	r3, [r3, #28]
 8012a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	699b      	ldr	r3, [r3, #24]
 8012a9c:	4922      	ldr	r1, [pc, #136]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f003 0320 	and.w	r3, r3, #32
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d010      	beq.n	8012ad0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	69da      	ldr	r2, [r3, #28]
 8012ab2:	4b1d      	ldr	r3, [pc, #116]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012ab4:	6a1b      	ldr	r3, [r3, #32]
 8012ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d208      	bcs.n	8012ad0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8012abe:	4b1a      	ldr	r3, [pc, #104]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012ac0:	6a1b      	ldr	r3, [r3, #32]
 8012ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	69db      	ldr	r3, [r3, #28]
 8012aca:	4917      	ldr	r1, [pc, #92]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012acc:	4313      	orrs	r3, r2
 8012ace:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012ad0:	f000 f834 	bl	8012b3c <HAL_RCC_GetSysClockFreq>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	4b14      	ldr	r3, [pc, #80]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012ad8:	699b      	ldr	r3, [r3, #24]
 8012ada:	0a1b      	lsrs	r3, r3, #8
 8012adc:	f003 030f 	and.w	r3, r3, #15
 8012ae0:	4912      	ldr	r1, [pc, #72]	; (8012b2c <HAL_RCC_ClockConfig+0x35c>)
 8012ae2:	5ccb      	ldrb	r3, [r1, r3]
 8012ae4:	f003 031f 	and.w	r3, r3, #31
 8012ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8012aec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012aee:	4b0e      	ldr	r3, [pc, #56]	; (8012b28 <HAL_RCC_ClockConfig+0x358>)
 8012af0:	699b      	ldr	r3, [r3, #24]
 8012af2:	f003 030f 	and.w	r3, r3, #15
 8012af6:	4a0d      	ldr	r2, [pc, #52]	; (8012b2c <HAL_RCC_ClockConfig+0x35c>)
 8012af8:	5cd3      	ldrb	r3, [r2, r3]
 8012afa:	f003 031f 	and.w	r3, r3, #31
 8012afe:	693a      	ldr	r2, [r7, #16]
 8012b00:	fa22 f303 	lsr.w	r3, r2, r3
 8012b04:	4a0a      	ldr	r2, [pc, #40]	; (8012b30 <HAL_RCC_ClockConfig+0x360>)
 8012b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012b08:	4a0a      	ldr	r2, [pc, #40]	; (8012b34 <HAL_RCC_ClockConfig+0x364>)
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8012b0e:	4b0a      	ldr	r3, [pc, #40]	; (8012b38 <HAL_RCC_ClockConfig+0x368>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7f9 f9fc 	bl	800bf10 <HAL_InitTick>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8012b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3718      	adds	r7, #24
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	58024400 	.word	0x58024400
 8012b2c:	08038bd4 	.word	0x08038bd4
 8012b30:	24000004 	.word	0x24000004
 8012b34:	24000000 	.word	0x24000000
 8012b38:	24000008 	.word	0x24000008

08012b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b089      	sub	sp, #36	; 0x24
 8012b40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012b42:	4bb3      	ldr	r3, [pc, #716]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012b44:	691b      	ldr	r3, [r3, #16]
 8012b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012b4a:	2b18      	cmp	r3, #24
 8012b4c:	f200 8155 	bhi.w	8012dfa <HAL_RCC_GetSysClockFreq+0x2be>
 8012b50:	a201      	add	r2, pc, #4	; (adr r2, 8012b58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8012b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b56:	bf00      	nop
 8012b58:	08012bbd 	.word	0x08012bbd
 8012b5c:	08012dfb 	.word	0x08012dfb
 8012b60:	08012dfb 	.word	0x08012dfb
 8012b64:	08012dfb 	.word	0x08012dfb
 8012b68:	08012dfb 	.word	0x08012dfb
 8012b6c:	08012dfb 	.word	0x08012dfb
 8012b70:	08012dfb 	.word	0x08012dfb
 8012b74:	08012dfb 	.word	0x08012dfb
 8012b78:	08012be3 	.word	0x08012be3
 8012b7c:	08012dfb 	.word	0x08012dfb
 8012b80:	08012dfb 	.word	0x08012dfb
 8012b84:	08012dfb 	.word	0x08012dfb
 8012b88:	08012dfb 	.word	0x08012dfb
 8012b8c:	08012dfb 	.word	0x08012dfb
 8012b90:	08012dfb 	.word	0x08012dfb
 8012b94:	08012dfb 	.word	0x08012dfb
 8012b98:	08012be9 	.word	0x08012be9
 8012b9c:	08012dfb 	.word	0x08012dfb
 8012ba0:	08012dfb 	.word	0x08012dfb
 8012ba4:	08012dfb 	.word	0x08012dfb
 8012ba8:	08012dfb 	.word	0x08012dfb
 8012bac:	08012dfb 	.word	0x08012dfb
 8012bb0:	08012dfb 	.word	0x08012dfb
 8012bb4:	08012dfb 	.word	0x08012dfb
 8012bb8:	08012bef 	.word	0x08012bef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012bbc:	4b94      	ldr	r3, [pc, #592]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f003 0320 	and.w	r3, r3, #32
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d009      	beq.n	8012bdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012bc8:	4b91      	ldr	r3, [pc, #580]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	08db      	lsrs	r3, r3, #3
 8012bce:	f003 0303 	and.w	r3, r3, #3
 8012bd2:	4a90      	ldr	r2, [pc, #576]	; (8012e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8012bd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8012bda:	e111      	b.n	8012e00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012bdc:	4b8d      	ldr	r3, [pc, #564]	; (8012e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012bde:	61bb      	str	r3, [r7, #24]
    break;
 8012be0:	e10e      	b.n	8012e00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8012be2:	4b8d      	ldr	r3, [pc, #564]	; (8012e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012be4:	61bb      	str	r3, [r7, #24]
    break;
 8012be6:	e10b      	b.n	8012e00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8012be8:	4b8c      	ldr	r3, [pc, #560]	; (8012e1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8012bea:	61bb      	str	r3, [r7, #24]
    break;
 8012bec:	e108      	b.n	8012e00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012bee:	4b88      	ldr	r3, [pc, #544]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bf2:	f003 0303 	and.w	r3, r3, #3
 8012bf6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012bf8:	4b85      	ldr	r3, [pc, #532]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bfc:	091b      	lsrs	r3, r3, #4
 8012bfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012c04:	4b82      	ldr	r3, [pc, #520]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c08:	f003 0301 	and.w	r3, r3, #1
 8012c0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012c0e:	4b80      	ldr	r3, [pc, #512]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c12:	08db      	lsrs	r3, r3, #3
 8012c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	fb02 f303 	mul.w	r3, r2, r3
 8012c1e:	ee07 3a90 	vmov	s15, r3
 8012c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f000 80e1 	beq.w	8012df4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	2b02      	cmp	r3, #2
 8012c36:	f000 8083 	beq.w	8012d40 <HAL_RCC_GetSysClockFreq+0x204>
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	2b02      	cmp	r3, #2
 8012c3e:	f200 80a1 	bhi.w	8012d84 <HAL_RCC_GetSysClockFreq+0x248>
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d003      	beq.n	8012c50 <HAL_RCC_GetSysClockFreq+0x114>
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d056      	beq.n	8012cfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8012c4e:	e099      	b.n	8012d84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c50:	4b6f      	ldr	r3, [pc, #444]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f003 0320 	and.w	r3, r3, #32
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d02d      	beq.n	8012cb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012c5c:	4b6c      	ldr	r3, [pc, #432]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	08db      	lsrs	r3, r3, #3
 8012c62:	f003 0303 	and.w	r3, r3, #3
 8012c66:	4a6b      	ldr	r2, [pc, #428]	; (8012e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012c68:	fa22 f303 	lsr.w	r3, r2, r3
 8012c6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	ee07 3a90 	vmov	s15, r3
 8012c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	ee07 3a90 	vmov	s15, r3
 8012c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c86:	4b62      	ldr	r3, [pc, #392]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c8e:	ee07 3a90 	vmov	s15, r3
 8012c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8012c9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8012e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8012cb6:	e087      	b.n	8012dc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	ee07 3a90 	vmov	s15, r3
 8012cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8012e24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8012cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012cca:	4b51      	ldr	r3, [pc, #324]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cd2:	ee07 3a90 	vmov	s15, r3
 8012cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8012cde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8012e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012cfa:	e065      	b.n	8012dc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	ee07 3a90 	vmov	s15, r3
 8012d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012d0e:	4b40      	ldr	r3, [pc, #256]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d16:	ee07 3a90 	vmov	s15, r3
 8012d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8012d22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8012e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012d3e:	e043      	b.n	8012dc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	ee07 3a90 	vmov	s15, r3
 8012d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012e2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8012d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012d52:	4b2f      	ldr	r3, [pc, #188]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d5a:	ee07 3a90 	vmov	s15, r3
 8012d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8012d66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8012e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012d82:	e021      	b.n	8012dc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	ee07 3a90 	vmov	s15, r3
 8012d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012d96:	4b1e      	ldr	r3, [pc, #120]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d9e:	ee07 3a90 	vmov	s15, r3
 8012da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8012daa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012dc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012dc8:	4b11      	ldr	r3, [pc, #68]	; (8012e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dcc:	0a5b      	lsrs	r3, r3, #9
 8012dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	ee07 3a90 	vmov	s15, r3
 8012ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8012de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dec:	ee17 3a90 	vmov	r3, s15
 8012df0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8012df2:	e005      	b.n	8012e00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8012df4:	2300      	movs	r3, #0
 8012df6:	61bb      	str	r3, [r7, #24]
    break;
 8012df8:	e002      	b.n	8012e00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8012dfa:	4b07      	ldr	r3, [pc, #28]	; (8012e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012dfc:	61bb      	str	r3, [r7, #24]
    break;
 8012dfe:	bf00      	nop
  }

  return sysclockfreq;
 8012e00:	69bb      	ldr	r3, [r7, #24]
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3724      	adds	r7, #36	; 0x24
 8012e06:	46bd      	mov	sp, r7
 8012e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0c:	4770      	bx	lr
 8012e0e:	bf00      	nop
 8012e10:	58024400 	.word	0x58024400
 8012e14:	03d09000 	.word	0x03d09000
 8012e18:	003d0900 	.word	0x003d0900
 8012e1c:	017d7840 	.word	0x017d7840
 8012e20:	46000000 	.word	0x46000000
 8012e24:	4c742400 	.word	0x4c742400
 8012e28:	4a742400 	.word	0x4a742400
 8012e2c:	4bbebc20 	.word	0x4bbebc20

08012e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b082      	sub	sp, #8
 8012e34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012e36:	f7ff fe81 	bl	8012b3c <HAL_RCC_GetSysClockFreq>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	4b10      	ldr	r3, [pc, #64]	; (8012e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8012e3e:	699b      	ldr	r3, [r3, #24]
 8012e40:	0a1b      	lsrs	r3, r3, #8
 8012e42:	f003 030f 	and.w	r3, r3, #15
 8012e46:	490f      	ldr	r1, [pc, #60]	; (8012e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8012e48:	5ccb      	ldrb	r3, [r1, r3]
 8012e4a:	f003 031f 	and.w	r3, r3, #31
 8012e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8012e52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012e54:	4b0a      	ldr	r3, [pc, #40]	; (8012e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8012e56:	699b      	ldr	r3, [r3, #24]
 8012e58:	f003 030f 	and.w	r3, r3, #15
 8012e5c:	4a09      	ldr	r2, [pc, #36]	; (8012e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8012e5e:	5cd3      	ldrb	r3, [r2, r3]
 8012e60:	f003 031f 	and.w	r3, r3, #31
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	fa22 f303 	lsr.w	r3, r2, r3
 8012e6a:	4a07      	ldr	r2, [pc, #28]	; (8012e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8012e6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012e6e:	4a07      	ldr	r2, [pc, #28]	; (8012e8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012e74:	4b04      	ldr	r3, [pc, #16]	; (8012e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8012e76:	681b      	ldr	r3, [r3, #0]
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	58024400 	.word	0x58024400
 8012e84:	08038bd4 	.word	0x08038bd4
 8012e88:	24000004 	.word	0x24000004
 8012e8c:	24000000 	.word	0x24000000

08012e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012e94:	f7ff ffcc 	bl	8012e30 <HAL_RCC_GetHCLKFreq>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	4b06      	ldr	r3, [pc, #24]	; (8012eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012e9c:	69db      	ldr	r3, [r3, #28]
 8012e9e:	091b      	lsrs	r3, r3, #4
 8012ea0:	f003 0307 	and.w	r3, r3, #7
 8012ea4:	4904      	ldr	r1, [pc, #16]	; (8012eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012ea6:	5ccb      	ldrb	r3, [r1, r3]
 8012ea8:	f003 031f 	and.w	r3, r3, #31
 8012eac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	58024400 	.word	0x58024400
 8012eb8:	08038bd4 	.word	0x08038bd4

08012ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012ec0:	f7ff ffb6 	bl	8012e30 <HAL_RCC_GetHCLKFreq>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	4b06      	ldr	r3, [pc, #24]	; (8012ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012ec8:	69db      	ldr	r3, [r3, #28]
 8012eca:	0a1b      	lsrs	r3, r3, #8
 8012ecc:	f003 0307 	and.w	r3, r3, #7
 8012ed0:	4904      	ldr	r1, [pc, #16]	; (8012ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012ed2:	5ccb      	ldrb	r3, [r1, r3]
 8012ed4:	f003 031f 	and.w	r3, r3, #31
 8012ed8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	58024400 	.word	0x58024400
 8012ee4:	08038bd4 	.word	0x08038bd4

08012ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d03f      	beq.n	8012f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012f0c:	d02a      	beq.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012f12:	d824      	bhi.n	8012f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012f18:	d018      	beq.n	8012f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012f1e:	d81e      	bhi.n	8012f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d003      	beq.n	8012f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f28:	d007      	beq.n	8012f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012f2a:	e018      	b.n	8012f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f2c:	4ba3      	ldr	r3, [pc, #652]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f30:	4aa2      	ldr	r2, [pc, #648]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012f38:	e015      	b.n	8012f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	3304      	adds	r3, #4
 8012f3e:	2102      	movs	r1, #2
 8012f40:	4618      	mov	r0, r3
 8012f42:	f001 f9d5 	bl	80142f0 <RCCEx_PLL2_Config>
 8012f46:	4603      	mov	r3, r0
 8012f48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012f4a:	e00c      	b.n	8012f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	3324      	adds	r3, #36	; 0x24
 8012f50:	2102      	movs	r1, #2
 8012f52:	4618      	mov	r0, r3
 8012f54:	f001 fa7e 	bl	8014454 <RCCEx_PLL3_Config>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012f5c:	e003      	b.n	8012f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012f5e:	2301      	movs	r3, #1
 8012f60:	75fb      	strb	r3, [r7, #23]
      break;
 8012f62:	e000      	b.n	8012f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8012f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012f66:	7dfb      	ldrb	r3, [r7, #23]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d109      	bne.n	8012f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012f6c:	4b93      	ldr	r3, [pc, #588]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f78:	4990      	ldr	r1, [pc, #576]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8012f7e:	e001      	b.n	8012f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f80:	7dfb      	ldrb	r3, [r7, #23]
 8012f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d03d      	beq.n	801300c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f94:	2b04      	cmp	r3, #4
 8012f96:	d826      	bhi.n	8012fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8012f98:	a201      	add	r2, pc, #4	; (adr r2, 8012fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8012f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f9e:	bf00      	nop
 8012fa0:	08012fb5 	.word	0x08012fb5
 8012fa4:	08012fc3 	.word	0x08012fc3
 8012fa8:	08012fd5 	.word	0x08012fd5
 8012fac:	08012fed 	.word	0x08012fed
 8012fb0:	08012fed 	.word	0x08012fed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fb4:	4b81      	ldr	r3, [pc, #516]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb8:	4a80      	ldr	r2, [pc, #512]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012fc0:	e015      	b.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	3304      	adds	r3, #4
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f001 f991 	bl	80142f0 <RCCEx_PLL2_Config>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012fd2:	e00c      	b.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	3324      	adds	r3, #36	; 0x24
 8012fd8:	2100      	movs	r1, #0
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f001 fa3a 	bl	8014454 <RCCEx_PLL3_Config>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012fe4:	e003      	b.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8012fea:	e000      	b.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8012fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012fee:	7dfb      	ldrb	r3, [r7, #23]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d109      	bne.n	8013008 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012ff4:	4b71      	ldr	r3, [pc, #452]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ff8:	f023 0207 	bic.w	r2, r3, #7
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013000:	496e      	ldr	r1, [pc, #440]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013002:	4313      	orrs	r3, r2
 8013004:	650b      	str	r3, [r1, #80]	; 0x50
 8013006:	e001      	b.n	801300c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013008:	7dfb      	ldrb	r3, [r7, #23]
 801300a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013014:	2b00      	cmp	r3, #0
 8013016:	d042      	beq.n	801309e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801301c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013020:	d02b      	beq.n	801307a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8013022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013026:	d825      	bhi.n	8013074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8013028:	2bc0      	cmp	r3, #192	; 0xc0
 801302a:	d028      	beq.n	801307e <HAL_RCCEx_PeriphCLKConfig+0x196>
 801302c:	2bc0      	cmp	r3, #192	; 0xc0
 801302e:	d821      	bhi.n	8013074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8013030:	2b80      	cmp	r3, #128	; 0x80
 8013032:	d016      	beq.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8013034:	2b80      	cmp	r3, #128	; 0x80
 8013036:	d81d      	bhi.n	8013074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8013038:	2b00      	cmp	r3, #0
 801303a:	d002      	beq.n	8013042 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 801303c:	2b40      	cmp	r3, #64	; 0x40
 801303e:	d007      	beq.n	8013050 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8013040:	e018      	b.n	8013074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013042:	4b5e      	ldr	r3, [pc, #376]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013046:	4a5d      	ldr	r2, [pc, #372]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801304c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801304e:	e017      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	3304      	adds	r3, #4
 8013054:	2100      	movs	r1, #0
 8013056:	4618      	mov	r0, r3
 8013058:	f001 f94a 	bl	80142f0 <RCCEx_PLL2_Config>
 801305c:	4603      	mov	r3, r0
 801305e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8013060:	e00e      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	3324      	adds	r3, #36	; 0x24
 8013066:	2100      	movs	r1, #0
 8013068:	4618      	mov	r0, r3
 801306a:	f001 f9f3 	bl	8014454 <RCCEx_PLL3_Config>
 801306e:	4603      	mov	r3, r0
 8013070:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8013072:	e005      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013074:	2301      	movs	r3, #1
 8013076:	75fb      	strb	r3, [r7, #23]
      break;
 8013078:	e002      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801307a:	bf00      	nop
 801307c:	e000      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801307e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013080:	7dfb      	ldrb	r3, [r7, #23]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d109      	bne.n	801309a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8013086:	4b4d      	ldr	r3, [pc, #308]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801308a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013092:	494a      	ldr	r1, [pc, #296]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013094:	4313      	orrs	r3, r2
 8013096:	650b      	str	r3, [r1, #80]	; 0x50
 8013098:	e001      	b.n	801309e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801309a:	7dfb      	ldrb	r3, [r7, #23]
 801309c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d049      	beq.n	801313e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80130b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80130b4:	d030      	beq.n	8013118 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80130b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80130ba:	d82a      	bhi.n	8013112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80130bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80130c0:	d02c      	beq.n	801311c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80130c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80130c6:	d824      	bhi.n	8013112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80130c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80130cc:	d018      	beq.n	8013100 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80130ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80130d2:	d81e      	bhi.n	8013112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d003      	beq.n	80130e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80130d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80130dc:	d007      	beq.n	80130ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80130de:	e018      	b.n	8013112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80130e0:	4b36      	ldr	r3, [pc, #216]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80130e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e4:	4a35      	ldr	r2, [pc, #212]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80130e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80130ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80130ec:	e017      	b.n	801311e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	3304      	adds	r3, #4
 80130f2:	2100      	movs	r1, #0
 80130f4:	4618      	mov	r0, r3
 80130f6:	f001 f8fb 	bl	80142f0 <RCCEx_PLL2_Config>
 80130fa:	4603      	mov	r3, r0
 80130fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80130fe:	e00e      	b.n	801311e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	3324      	adds	r3, #36	; 0x24
 8013104:	2100      	movs	r1, #0
 8013106:	4618      	mov	r0, r3
 8013108:	f001 f9a4 	bl	8014454 <RCCEx_PLL3_Config>
 801310c:	4603      	mov	r3, r0
 801310e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8013110:	e005      	b.n	801311e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8013112:	2301      	movs	r3, #1
 8013114:	75fb      	strb	r3, [r7, #23]
      break;
 8013116:	e002      	b.n	801311e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8013118:	bf00      	nop
 801311a:	e000      	b.n	801311e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801311c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801311e:	7dfb      	ldrb	r3, [r7, #23]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10a      	bne.n	801313a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8013124:	4b25      	ldr	r3, [pc, #148]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013128:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013132:	4922      	ldr	r1, [pc, #136]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013134:	4313      	orrs	r3, r2
 8013136:	658b      	str	r3, [r1, #88]	; 0x58
 8013138:	e001      	b.n	801313e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801313a:	7dfb      	ldrb	r3, [r7, #23]
 801313c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013146:	2b00      	cmp	r3, #0
 8013148:	d04b      	beq.n	80131e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013154:	d030      	beq.n	80131b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8013156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801315a:	d82a      	bhi.n	80131b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801315c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013160:	d02e      	beq.n	80131c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8013162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013166:	d824      	bhi.n	80131b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8013168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801316c:	d018      	beq.n	80131a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801316e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013172:	d81e      	bhi.n	80131b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8013174:	2b00      	cmp	r3, #0
 8013176:	d003      	beq.n	8013180 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8013178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801317c:	d007      	beq.n	801318e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801317e:	e018      	b.n	80131b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013180:	4b0e      	ldr	r3, [pc, #56]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013184:	4a0d      	ldr	r2, [pc, #52]	; (80131bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801318a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801318c:	e019      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	3304      	adds	r3, #4
 8013192:	2100      	movs	r1, #0
 8013194:	4618      	mov	r0, r3
 8013196:	f001 f8ab 	bl	80142f0 <RCCEx_PLL2_Config>
 801319a:	4603      	mov	r3, r0
 801319c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801319e:	e010      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	3324      	adds	r3, #36	; 0x24
 80131a4:	2100      	movs	r1, #0
 80131a6:	4618      	mov	r0, r3
 80131a8:	f001 f954 	bl	8014454 <RCCEx_PLL3_Config>
 80131ac:	4603      	mov	r3, r0
 80131ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80131b0:	e007      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80131b2:	2301      	movs	r3, #1
 80131b4:	75fb      	strb	r3, [r7, #23]
      break;
 80131b6:	e004      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80131b8:	bf00      	nop
 80131ba:	e002      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80131bc:	58024400 	.word	0x58024400
      break;
 80131c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80131c2:	7dfb      	ldrb	r3, [r7, #23]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d10a      	bne.n	80131de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80131c8:	4b99      	ldr	r3, [pc, #612]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80131ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80131d6:	4996      	ldr	r1, [pc, #600]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80131d8:	4313      	orrs	r3, r2
 80131da:	658b      	str	r3, [r1, #88]	; 0x58
 80131dc:	e001      	b.n	80131e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80131de:	7dfb      	ldrb	r3, [r7, #23]
 80131e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d032      	beq.n	8013254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131f2:	2b30      	cmp	r3, #48	; 0x30
 80131f4:	d01c      	beq.n	8013230 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80131f6:	2b30      	cmp	r3, #48	; 0x30
 80131f8:	d817      	bhi.n	801322a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80131fa:	2b20      	cmp	r3, #32
 80131fc:	d00c      	beq.n	8013218 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80131fe:	2b20      	cmp	r3, #32
 8013200:	d813      	bhi.n	801322a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8013202:	2b00      	cmp	r3, #0
 8013204:	d016      	beq.n	8013234 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8013206:	2b10      	cmp	r3, #16
 8013208:	d10f      	bne.n	801322a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801320a:	4b89      	ldr	r3, [pc, #548]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801320e:	4a88      	ldr	r2, [pc, #544]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8013216:	e00e      	b.n	8013236 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	3304      	adds	r3, #4
 801321c:	2102      	movs	r1, #2
 801321e:	4618      	mov	r0, r3
 8013220:	f001 f866 	bl	80142f0 <RCCEx_PLL2_Config>
 8013224:	4603      	mov	r3, r0
 8013226:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8013228:	e005      	b.n	8013236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801322a:	2301      	movs	r3, #1
 801322c:	75fb      	strb	r3, [r7, #23]
      break;
 801322e:	e002      	b.n	8013236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8013230:	bf00      	nop
 8013232:	e000      	b.n	8013236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8013234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013236:	7dfb      	ldrb	r3, [r7, #23]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d109      	bne.n	8013250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801323c:	4b7c      	ldr	r3, [pc, #496]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013248:	4979      	ldr	r1, [pc, #484]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801324a:	4313      	orrs	r3, r2
 801324c:	64cb      	str	r3, [r1, #76]	; 0x4c
 801324e:	e001      	b.n	8013254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013250:	7dfb      	ldrb	r3, [r7, #23]
 8013252:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801325c:	2b00      	cmp	r3, #0
 801325e:	d047      	beq.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013268:	d030      	beq.n	80132cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801326a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801326e:	d82a      	bhi.n	80132c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8013270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013274:	d02c      	beq.n	80132d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8013276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801327a:	d824      	bhi.n	80132c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801327c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013280:	d018      	beq.n	80132b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8013282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013286:	d81e      	bhi.n	80132c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8013288:	2b00      	cmp	r3, #0
 801328a:	d003      	beq.n	8013294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 801328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013290:	d007      	beq.n	80132a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8013292:	e018      	b.n	80132c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013294:	4b66      	ldr	r3, [pc, #408]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013298:	4a65      	ldr	r2, [pc, #404]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801329a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801329e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80132a0:	e017      	b.n	80132d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	3304      	adds	r3, #4
 80132a6:	2100      	movs	r1, #0
 80132a8:	4618      	mov	r0, r3
 80132aa:	f001 f821 	bl	80142f0 <RCCEx_PLL2_Config>
 80132ae:	4603      	mov	r3, r0
 80132b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80132b2:	e00e      	b.n	80132d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	3324      	adds	r3, #36	; 0x24
 80132b8:	2100      	movs	r1, #0
 80132ba:	4618      	mov	r0, r3
 80132bc:	f001 f8ca 	bl	8014454 <RCCEx_PLL3_Config>
 80132c0:	4603      	mov	r3, r0
 80132c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80132c4:	e005      	b.n	80132d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80132c6:	2301      	movs	r3, #1
 80132c8:	75fb      	strb	r3, [r7, #23]
      break;
 80132ca:	e002      	b.n	80132d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80132cc:	bf00      	nop
 80132ce:	e000      	b.n	80132d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80132d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80132d2:	7dfb      	ldrb	r3, [r7, #23]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d109      	bne.n	80132ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80132d8:	4b55      	ldr	r3, [pc, #340]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80132da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132e4:	4952      	ldr	r1, [pc, #328]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80132e6:	4313      	orrs	r3, r2
 80132e8:	650b      	str	r3, [r1, #80]	; 0x50
 80132ea:	e001      	b.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132ec:	7dfb      	ldrb	r3, [r7, #23]
 80132ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d049      	beq.n	8013390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013304:	d02e      	beq.n	8013364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8013306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801330a:	d828      	bhi.n	801335e <HAL_RCCEx_PeriphCLKConfig+0x476>
 801330c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013310:	d02a      	beq.n	8013368 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8013312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013316:	d822      	bhi.n	801335e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801331c:	d026      	beq.n	801336c <HAL_RCCEx_PeriphCLKConfig+0x484>
 801331e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013322:	d81c      	bhi.n	801335e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013328:	d010      	beq.n	801334c <HAL_RCCEx_PeriphCLKConfig+0x464>
 801332a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801332e:	d816      	bhi.n	801335e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013330:	2b00      	cmp	r3, #0
 8013332:	d01d      	beq.n	8013370 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8013334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013338:	d111      	bne.n	801335e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	3304      	adds	r3, #4
 801333e:	2101      	movs	r1, #1
 8013340:	4618      	mov	r0, r3
 8013342:	f000 ffd5 	bl	80142f0 <RCCEx_PLL2_Config>
 8013346:	4603      	mov	r3, r0
 8013348:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801334a:	e012      	b.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	3324      	adds	r3, #36	; 0x24
 8013350:	2101      	movs	r1, #1
 8013352:	4618      	mov	r0, r3
 8013354:	f001 f87e 	bl	8014454 <RCCEx_PLL3_Config>
 8013358:	4603      	mov	r3, r0
 801335a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801335c:	e009      	b.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801335e:	2301      	movs	r3, #1
 8013360:	75fb      	strb	r3, [r7, #23]
      break;
 8013362:	e006      	b.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013364:	bf00      	nop
 8013366:	e004      	b.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013368:	bf00      	nop
 801336a:	e002      	b.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801336c:	bf00      	nop
 801336e:	e000      	b.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013372:	7dfb      	ldrb	r3, [r7, #23]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d109      	bne.n	801338c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8013378:	4b2d      	ldr	r3, [pc, #180]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801337c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013384:	492a      	ldr	r1, [pc, #168]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013386:	4313      	orrs	r3, r2
 8013388:	650b      	str	r3, [r1, #80]	; 0x50
 801338a:	e001      	b.n	8013390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801338c:	7dfb      	ldrb	r3, [r7, #23]
 801338e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013398:	2b00      	cmp	r3, #0
 801339a:	d04d      	beq.n	8013438 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80133a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80133a6:	d02e      	beq.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80133a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80133ac:	d828      	bhi.n	8013400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80133ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133b2:	d02a      	beq.n	801340a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80133b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133b8:	d822      	bhi.n	8013400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80133ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80133be:	d026      	beq.n	801340e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80133c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80133c4:	d81c      	bhi.n	8013400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80133c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80133ca:	d010      	beq.n	80133ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 80133cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80133d0:	d816      	bhi.n	8013400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d01d      	beq.n	8013412 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80133d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80133da:	d111      	bne.n	8013400 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	3304      	adds	r3, #4
 80133e0:	2101      	movs	r1, #1
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 ff84 	bl	80142f0 <RCCEx_PLL2_Config>
 80133e8:	4603      	mov	r3, r0
 80133ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80133ec:	e012      	b.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3324      	adds	r3, #36	; 0x24
 80133f2:	2101      	movs	r1, #1
 80133f4:	4618      	mov	r0, r3
 80133f6:	f001 f82d 	bl	8014454 <RCCEx_PLL3_Config>
 80133fa:	4603      	mov	r3, r0
 80133fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80133fe:	e009      	b.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8013400:	2301      	movs	r3, #1
 8013402:	75fb      	strb	r3, [r7, #23]
      break;
 8013404:	e006      	b.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8013406:	bf00      	nop
 8013408:	e004      	b.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801340a:	bf00      	nop
 801340c:	e002      	b.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801340e:	bf00      	nop
 8013410:	e000      	b.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8013412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013414:	7dfb      	ldrb	r3, [r7, #23]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d10c      	bne.n	8013434 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801341a:	4b05      	ldr	r3, [pc, #20]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801341e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013428:	4901      	ldr	r1, [pc, #4]	; (8013430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801342a:	4313      	orrs	r3, r2
 801342c:	658b      	str	r3, [r1, #88]	; 0x58
 801342e:	e003      	b.n	8013438 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8013430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013434:	7dfb      	ldrb	r3, [r7, #23]
 8013436:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013440:	2b00      	cmp	r3, #0
 8013442:	d02f      	beq.n	80134a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801344c:	d00e      	beq.n	801346c <HAL_RCCEx_PeriphCLKConfig+0x584>
 801344e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013452:	d814      	bhi.n	801347e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8013454:	2b00      	cmp	r3, #0
 8013456:	d015      	beq.n	8013484 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8013458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801345c:	d10f      	bne.n	801347e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801345e:	4baf      	ldr	r3, [pc, #700]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013462:	4aae      	ldr	r2, [pc, #696]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801346a:	e00c      	b.n	8013486 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	3304      	adds	r3, #4
 8013470:	2101      	movs	r1, #1
 8013472:	4618      	mov	r0, r3
 8013474:	f000 ff3c 	bl	80142f0 <RCCEx_PLL2_Config>
 8013478:	4603      	mov	r3, r0
 801347a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801347c:	e003      	b.n	8013486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801347e:	2301      	movs	r3, #1
 8013480:	75fb      	strb	r3, [r7, #23]
      break;
 8013482:	e000      	b.n	8013486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8013484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013486:	7dfb      	ldrb	r3, [r7, #23]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d109      	bne.n	80134a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801348c:	4ba3      	ldr	r3, [pc, #652]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013490:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013498:	49a0      	ldr	r1, [pc, #640]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801349a:	4313      	orrs	r3, r2
 801349c:	650b      	str	r3, [r1, #80]	; 0x50
 801349e:	e001      	b.n	80134a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134a0:	7dfb      	ldrb	r3, [r7, #23]
 80134a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d032      	beq.n	8013516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134b4:	2b03      	cmp	r3, #3
 80134b6:	d81b      	bhi.n	80134f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80134b8:	a201      	add	r2, pc, #4	; (adr r2, 80134c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80134ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134be:	bf00      	nop
 80134c0:	080134f7 	.word	0x080134f7
 80134c4:	080134d1 	.word	0x080134d1
 80134c8:	080134df 	.word	0x080134df
 80134cc:	080134f7 	.word	0x080134f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80134d0:	4b92      	ldr	r3, [pc, #584]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d4:	4a91      	ldr	r2, [pc, #580]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80134da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80134dc:	e00c      	b.n	80134f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	3304      	adds	r3, #4
 80134e2:	2102      	movs	r1, #2
 80134e4:	4618      	mov	r0, r3
 80134e6:	f000 ff03 	bl	80142f0 <RCCEx_PLL2_Config>
 80134ea:	4603      	mov	r3, r0
 80134ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80134ee:	e003      	b.n	80134f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80134f0:	2301      	movs	r3, #1
 80134f2:	75fb      	strb	r3, [r7, #23]
      break;
 80134f4:	e000      	b.n	80134f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80134f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d109      	bne.n	8013512 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80134fe:	4b87      	ldr	r3, [pc, #540]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013502:	f023 0203 	bic.w	r2, r3, #3
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801350a:	4984      	ldr	r1, [pc, #528]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801350c:	4313      	orrs	r3, r2
 801350e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013510:	e001      	b.n	8013516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013512:	7dfb      	ldrb	r3, [r7, #23]
 8013514:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801351e:	2b00      	cmp	r3, #0
 8013520:	f000 8086 	beq.w	8013630 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013524:	4b7e      	ldr	r3, [pc, #504]	; (8013720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4a7d      	ldr	r2, [pc, #500]	; (8013720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801352a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801352e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013530:	f7f8 fd38 	bl	800bfa4 <HAL_GetTick>
 8013534:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013536:	e009      	b.n	801354c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013538:	f7f8 fd34 	bl	800bfa4 <HAL_GetTick>
 801353c:	4602      	mov	r2, r0
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	1ad3      	subs	r3, r2, r3
 8013542:	2b64      	cmp	r3, #100	; 0x64
 8013544:	d902      	bls.n	801354c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8013546:	2303      	movs	r3, #3
 8013548:	75fb      	strb	r3, [r7, #23]
        break;
 801354a:	e005      	b.n	8013558 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801354c:	4b74      	ldr	r3, [pc, #464]	; (8013720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013554:	2b00      	cmp	r3, #0
 8013556:	d0ef      	beq.n	8013538 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8013558:	7dfb      	ldrb	r3, [r7, #23]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d166      	bne.n	801362c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801355e:	4b6f      	ldr	r3, [pc, #444]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013568:	4053      	eors	r3, r2
 801356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801356e:	2b00      	cmp	r3, #0
 8013570:	d013      	beq.n	801359a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013572:	4b6a      	ldr	r3, [pc, #424]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801357a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801357c:	4b67      	ldr	r3, [pc, #412]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013580:	4a66      	ldr	r2, [pc, #408]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013586:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013588:	4b64      	ldr	r3, [pc, #400]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801358c:	4a63      	ldr	r2, [pc, #396]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013592:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8013594:	4a61      	ldr	r2, [pc, #388]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80135a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80135a4:	d115      	bne.n	80135d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135a6:	f7f8 fcfd 	bl	800bfa4 <HAL_GetTick>
 80135aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80135ac:	e00b      	b.n	80135c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80135ae:	f7f8 fcf9 	bl	800bfa4 <HAL_GetTick>
 80135b2:	4602      	mov	r2, r0
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	1ad3      	subs	r3, r2, r3
 80135b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80135bc:	4293      	cmp	r3, r2
 80135be:	d902      	bls.n	80135c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80135c0:	2303      	movs	r3, #3
 80135c2:	75fb      	strb	r3, [r7, #23]
            break;
 80135c4:	e005      	b.n	80135d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80135c6:	4b55      	ldr	r3, [pc, #340]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80135c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135ca:	f003 0302 	and.w	r3, r3, #2
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d0ed      	beq.n	80135ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80135d2:	7dfb      	ldrb	r3, [r7, #23]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d126      	bne.n	8013626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80135de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80135e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80135e6:	d10d      	bne.n	8013604 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80135e8:	4b4c      	ldr	r3, [pc, #304]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80135f6:	0919      	lsrs	r1, r3, #4
 80135f8:	4b4a      	ldr	r3, [pc, #296]	; (8013724 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80135fa:	400b      	ands	r3, r1
 80135fc:	4947      	ldr	r1, [pc, #284]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80135fe:	4313      	orrs	r3, r2
 8013600:	610b      	str	r3, [r1, #16]
 8013602:	e005      	b.n	8013610 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8013604:	4b45      	ldr	r3, [pc, #276]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	4a44      	ldr	r2, [pc, #272]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801360a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801360e:	6113      	str	r3, [r2, #16]
 8013610:	4b42      	ldr	r3, [pc, #264]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801361e:	493f      	ldr	r1, [pc, #252]	; (801371c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013620:	4313      	orrs	r3, r2
 8013622:	670b      	str	r3, [r1, #112]	; 0x70
 8013624:	e004      	b.n	8013630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013626:	7dfb      	ldrb	r3, [r7, #23]
 8013628:	75bb      	strb	r3, [r7, #22]
 801362a:	e001      	b.n	8013630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801362c:	7dfb      	ldrb	r3, [r7, #23]
 801362e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	f003 0301 	and.w	r3, r3, #1
 8013638:	2b00      	cmp	r3, #0
 801363a:	f000 8085 	beq.w	8013748 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013642:	2b28      	cmp	r3, #40	; 0x28
 8013644:	d866      	bhi.n	8013714 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8013646:	a201      	add	r2, pc, #4	; (adr r2, 801364c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8013648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801364c:	08013729 	.word	0x08013729
 8013650:	08013715 	.word	0x08013715
 8013654:	08013715 	.word	0x08013715
 8013658:	08013715 	.word	0x08013715
 801365c:	08013715 	.word	0x08013715
 8013660:	08013715 	.word	0x08013715
 8013664:	08013715 	.word	0x08013715
 8013668:	08013715 	.word	0x08013715
 801366c:	080136f1 	.word	0x080136f1
 8013670:	08013715 	.word	0x08013715
 8013674:	08013715 	.word	0x08013715
 8013678:	08013715 	.word	0x08013715
 801367c:	08013715 	.word	0x08013715
 8013680:	08013715 	.word	0x08013715
 8013684:	08013715 	.word	0x08013715
 8013688:	08013715 	.word	0x08013715
 801368c:	08013703 	.word	0x08013703
 8013690:	08013715 	.word	0x08013715
 8013694:	08013715 	.word	0x08013715
 8013698:	08013715 	.word	0x08013715
 801369c:	08013715 	.word	0x08013715
 80136a0:	08013715 	.word	0x08013715
 80136a4:	08013715 	.word	0x08013715
 80136a8:	08013715 	.word	0x08013715
 80136ac:	08013729 	.word	0x08013729
 80136b0:	08013715 	.word	0x08013715
 80136b4:	08013715 	.word	0x08013715
 80136b8:	08013715 	.word	0x08013715
 80136bc:	08013715 	.word	0x08013715
 80136c0:	08013715 	.word	0x08013715
 80136c4:	08013715 	.word	0x08013715
 80136c8:	08013715 	.word	0x08013715
 80136cc:	08013729 	.word	0x08013729
 80136d0:	08013715 	.word	0x08013715
 80136d4:	08013715 	.word	0x08013715
 80136d8:	08013715 	.word	0x08013715
 80136dc:	08013715 	.word	0x08013715
 80136e0:	08013715 	.word	0x08013715
 80136e4:	08013715 	.word	0x08013715
 80136e8:	08013715 	.word	0x08013715
 80136ec:	08013729 	.word	0x08013729
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	3304      	adds	r3, #4
 80136f4:	2101      	movs	r1, #1
 80136f6:	4618      	mov	r0, r3
 80136f8:	f000 fdfa 	bl	80142f0 <RCCEx_PLL2_Config>
 80136fc:	4603      	mov	r3, r0
 80136fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8013700:	e013      	b.n	801372a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	3324      	adds	r3, #36	; 0x24
 8013706:	2101      	movs	r1, #1
 8013708:	4618      	mov	r0, r3
 801370a:	f000 fea3 	bl	8014454 <RCCEx_PLL3_Config>
 801370e:	4603      	mov	r3, r0
 8013710:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8013712:	e00a      	b.n	801372a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013714:	2301      	movs	r3, #1
 8013716:	75fb      	strb	r3, [r7, #23]
      break;
 8013718:	e007      	b.n	801372a <HAL_RCCEx_PeriphCLKConfig+0x842>
 801371a:	bf00      	nop
 801371c:	58024400 	.word	0x58024400
 8013720:	58024800 	.word	0x58024800
 8013724:	00ffffcf 	.word	0x00ffffcf
      break;
 8013728:	bf00      	nop
    }

    if(ret == HAL_OK)
 801372a:	7dfb      	ldrb	r3, [r7, #23]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d109      	bne.n	8013744 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8013730:	4b96      	ldr	r3, [pc, #600]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013734:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801373c:	4993      	ldr	r1, [pc, #588]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801373e:	4313      	orrs	r3, r2
 8013740:	654b      	str	r3, [r1, #84]	; 0x54
 8013742:	e001      	b.n	8013748 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013744:	7dfb      	ldrb	r3, [r7, #23]
 8013746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f003 0302 	and.w	r3, r3, #2
 8013750:	2b00      	cmp	r3, #0
 8013752:	d038      	beq.n	80137c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013758:	2b05      	cmp	r3, #5
 801375a:	d821      	bhi.n	80137a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 801375c:	a201      	add	r2, pc, #4	; (adr r2, 8013764 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 801375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013762:	bf00      	nop
 8013764:	080137a7 	.word	0x080137a7
 8013768:	0801377d 	.word	0x0801377d
 801376c:	0801378f 	.word	0x0801378f
 8013770:	080137a7 	.word	0x080137a7
 8013774:	080137a7 	.word	0x080137a7
 8013778:	080137a7 	.word	0x080137a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	3304      	adds	r3, #4
 8013780:	2101      	movs	r1, #1
 8013782:	4618      	mov	r0, r3
 8013784:	f000 fdb4 	bl	80142f0 <RCCEx_PLL2_Config>
 8013788:	4603      	mov	r3, r0
 801378a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801378c:	e00c      	b.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	3324      	adds	r3, #36	; 0x24
 8013792:	2101      	movs	r1, #1
 8013794:	4618      	mov	r0, r3
 8013796:	f000 fe5d 	bl	8014454 <RCCEx_PLL3_Config>
 801379a:	4603      	mov	r3, r0
 801379c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801379e:	e003      	b.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80137a0:	2301      	movs	r3, #1
 80137a2:	75fb      	strb	r3, [r7, #23]
      break;
 80137a4:	e000      	b.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80137a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80137a8:	7dfb      	ldrb	r3, [r7, #23]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d109      	bne.n	80137c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80137ae:	4b77      	ldr	r3, [pc, #476]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80137b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137b2:	f023 0207 	bic.w	r2, r3, #7
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137ba:	4974      	ldr	r1, [pc, #464]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80137bc:	4313      	orrs	r3, r2
 80137be:	654b      	str	r3, [r1, #84]	; 0x54
 80137c0:	e001      	b.n	80137c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137c2:	7dfb      	ldrb	r3, [r7, #23]
 80137c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f003 0304 	and.w	r3, r3, #4
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d03a      	beq.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137d8:	2b05      	cmp	r3, #5
 80137da:	d821      	bhi.n	8013820 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80137dc:	a201      	add	r2, pc, #4	; (adr r2, 80137e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80137de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137e2:	bf00      	nop
 80137e4:	08013827 	.word	0x08013827
 80137e8:	080137fd 	.word	0x080137fd
 80137ec:	0801380f 	.word	0x0801380f
 80137f0:	08013827 	.word	0x08013827
 80137f4:	08013827 	.word	0x08013827
 80137f8:	08013827 	.word	0x08013827
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	3304      	adds	r3, #4
 8013800:	2101      	movs	r1, #1
 8013802:	4618      	mov	r0, r3
 8013804:	f000 fd74 	bl	80142f0 <RCCEx_PLL2_Config>
 8013808:	4603      	mov	r3, r0
 801380a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801380c:	e00c      	b.n	8013828 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	3324      	adds	r3, #36	; 0x24
 8013812:	2101      	movs	r1, #1
 8013814:	4618      	mov	r0, r3
 8013816:	f000 fe1d 	bl	8014454 <RCCEx_PLL3_Config>
 801381a:	4603      	mov	r3, r0
 801381c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801381e:	e003      	b.n	8013828 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013820:	2301      	movs	r3, #1
 8013822:	75fb      	strb	r3, [r7, #23]
      break;
 8013824:	e000      	b.n	8013828 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8013826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013828:	7dfb      	ldrb	r3, [r7, #23]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d10a      	bne.n	8013844 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801382e:	4b57      	ldr	r3, [pc, #348]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013832:	f023 0207 	bic.w	r2, r3, #7
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801383c:	4953      	ldr	r1, [pc, #332]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801383e:	4313      	orrs	r3, r2
 8013840:	658b      	str	r3, [r1, #88]	; 0x58
 8013842:	e001      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013844:	7dfb      	ldrb	r3, [r7, #23]
 8013846:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f003 0320 	and.w	r3, r3, #32
 8013850:	2b00      	cmp	r3, #0
 8013852:	d04b      	beq.n	80138ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801385a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801385e:	d02e      	beq.n	80138be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8013860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013864:	d828      	bhi.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801386a:	d02a      	beq.n	80138c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 801386c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013870:	d822      	bhi.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013872:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013876:	d026      	beq.n	80138c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8013878:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801387c:	d81c      	bhi.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801387e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013882:	d010      	beq.n	80138a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8013884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013888:	d816      	bhi.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801388a:	2b00      	cmp	r3, #0
 801388c:	d01d      	beq.n	80138ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 801388e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013892:	d111      	bne.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	3304      	adds	r3, #4
 8013898:	2100      	movs	r1, #0
 801389a:	4618      	mov	r0, r3
 801389c:	f000 fd28 	bl	80142f0 <RCCEx_PLL2_Config>
 80138a0:	4603      	mov	r3, r0
 80138a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80138a4:	e012      	b.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	3324      	adds	r3, #36	; 0x24
 80138aa:	2102      	movs	r1, #2
 80138ac:	4618      	mov	r0, r3
 80138ae:	f000 fdd1 	bl	8014454 <RCCEx_PLL3_Config>
 80138b2:	4603      	mov	r3, r0
 80138b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80138b6:	e009      	b.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80138b8:	2301      	movs	r3, #1
 80138ba:	75fb      	strb	r3, [r7, #23]
      break;
 80138bc:	e006      	b.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80138be:	bf00      	nop
 80138c0:	e004      	b.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80138c2:	bf00      	nop
 80138c4:	e002      	b.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80138c6:	bf00      	nop
 80138c8:	e000      	b.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80138ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80138cc:	7dfb      	ldrb	r3, [r7, #23]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d10a      	bne.n	80138e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80138d2:	4b2e      	ldr	r3, [pc, #184]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80138d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138e0:	492a      	ldr	r1, [pc, #168]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80138e2:	4313      	orrs	r3, r2
 80138e4:	654b      	str	r3, [r1, #84]	; 0x54
 80138e6:	e001      	b.n	80138ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80138e8:	7dfb      	ldrb	r3, [r7, #23]
 80138ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d04d      	beq.n	8013994 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80138fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013902:	d02e      	beq.n	8013962 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8013904:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013908:	d828      	bhi.n	801395c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801390a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801390e:	d02a      	beq.n	8013966 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8013910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013914:	d822      	bhi.n	801395c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8013916:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801391a:	d026      	beq.n	801396a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 801391c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013920:	d81c      	bhi.n	801395c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8013922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013926:	d010      	beq.n	801394a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8013928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801392c:	d816      	bhi.n	801395c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801392e:	2b00      	cmp	r3, #0
 8013930:	d01d      	beq.n	801396e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8013932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013936:	d111      	bne.n	801395c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	3304      	adds	r3, #4
 801393c:	2100      	movs	r1, #0
 801393e:	4618      	mov	r0, r3
 8013940:	f000 fcd6 	bl	80142f0 <RCCEx_PLL2_Config>
 8013944:	4603      	mov	r3, r0
 8013946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8013948:	e012      	b.n	8013970 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	3324      	adds	r3, #36	; 0x24
 801394e:	2102      	movs	r1, #2
 8013950:	4618      	mov	r0, r3
 8013952:	f000 fd7f 	bl	8014454 <RCCEx_PLL3_Config>
 8013956:	4603      	mov	r3, r0
 8013958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801395a:	e009      	b.n	8013970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801395c:	2301      	movs	r3, #1
 801395e:	75fb      	strb	r3, [r7, #23]
      break;
 8013960:	e006      	b.n	8013970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013962:	bf00      	nop
 8013964:	e004      	b.n	8013970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013966:	bf00      	nop
 8013968:	e002      	b.n	8013970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801396a:	bf00      	nop
 801396c:	e000      	b.n	8013970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801396e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013970:	7dfb      	ldrb	r3, [r7, #23]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d10c      	bne.n	8013990 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013976:	4b05      	ldr	r3, [pc, #20]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801397a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013984:	4901      	ldr	r1, [pc, #4]	; (801398c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013986:	4313      	orrs	r3, r2
 8013988:	658b      	str	r3, [r1, #88]	; 0x58
 801398a:	e003      	b.n	8013994 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801398c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013990:	7dfb      	ldrb	r3, [r7, #23]
 8013992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801399c:	2b00      	cmp	r3, #0
 801399e:	d04b      	beq.n	8013a38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80139a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80139aa:	d02e      	beq.n	8013a0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80139ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80139b0:	d828      	bhi.n	8013a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80139b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139b6:	d02a      	beq.n	8013a0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80139b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139bc:	d822      	bhi.n	8013a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80139be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80139c2:	d026      	beq.n	8013a12 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80139c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80139c8:	d81c      	bhi.n	8013a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80139ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80139ce:	d010      	beq.n	80139f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80139d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80139d4:	d816      	bhi.n	8013a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d01d      	beq.n	8013a16 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80139da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80139de:	d111      	bne.n	8013a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	3304      	adds	r3, #4
 80139e4:	2100      	movs	r1, #0
 80139e6:	4618      	mov	r0, r3
 80139e8:	f000 fc82 	bl	80142f0 <RCCEx_PLL2_Config>
 80139ec:	4603      	mov	r3, r0
 80139ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80139f0:	e012      	b.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	3324      	adds	r3, #36	; 0x24
 80139f6:	2102      	movs	r1, #2
 80139f8:	4618      	mov	r0, r3
 80139fa:	f000 fd2b 	bl	8014454 <RCCEx_PLL3_Config>
 80139fe:	4603      	mov	r3, r0
 8013a00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8013a02:	e009      	b.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013a04:	2301      	movs	r3, #1
 8013a06:	75fb      	strb	r3, [r7, #23]
      break;
 8013a08:	e006      	b.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8013a0a:	bf00      	nop
 8013a0c:	e004      	b.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8013a0e:	bf00      	nop
 8013a10:	e002      	b.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8013a12:	bf00      	nop
 8013a14:	e000      	b.n	8013a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8013a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013a18:	7dfb      	ldrb	r3, [r7, #23]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d10a      	bne.n	8013a34 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8013a1e:	4b9d      	ldr	r3, [pc, #628]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013a2c:	4999      	ldr	r1, [pc, #612]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	658b      	str	r3, [r1, #88]	; 0x58
 8013a32:	e001      	b.n	8013a38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a34:	7dfb      	ldrb	r3, [r7, #23]
 8013a36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	f003 0308 	and.w	r3, r3, #8
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d01a      	beq.n	8013a7a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013a4e:	d10a      	bne.n	8013a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	3324      	adds	r3, #36	; 0x24
 8013a54:	2102      	movs	r1, #2
 8013a56:	4618      	mov	r0, r3
 8013a58:	f000 fcfc 	bl	8014454 <RCCEx_PLL3_Config>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d001      	beq.n	8013a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8013a62:	2301      	movs	r3, #1
 8013a64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8013a66:	4b8b      	ldr	r3, [pc, #556]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a74:	4987      	ldr	r1, [pc, #540]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a76:	4313      	orrs	r3, r2
 8013a78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	f003 0310 	and.w	r3, r3, #16
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d01a      	beq.n	8013abc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a90:	d10a      	bne.n	8013aa8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	3324      	adds	r3, #36	; 0x24
 8013a96:	2102      	movs	r1, #2
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f000 fcdb 	bl	8014454 <RCCEx_PLL3_Config>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d001      	beq.n	8013aa8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013aa8:	4b7a      	ldr	r3, [pc, #488]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013ab6:	4977      	ldr	r1, [pc, #476]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d034      	beq.n	8013b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013ad2:	d01d      	beq.n	8013b10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8013ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013ad8:	d817      	bhi.n	8013b0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d003      	beq.n	8013ae6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8013ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ae2:	d009      	beq.n	8013af8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8013ae4:	e011      	b.n	8013b0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	3304      	adds	r3, #4
 8013aea:	2100      	movs	r1, #0
 8013aec:	4618      	mov	r0, r3
 8013aee:	f000 fbff 	bl	80142f0 <RCCEx_PLL2_Config>
 8013af2:	4603      	mov	r3, r0
 8013af4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8013af6:	e00c      	b.n	8013b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	3324      	adds	r3, #36	; 0x24
 8013afc:	2102      	movs	r1, #2
 8013afe:	4618      	mov	r0, r3
 8013b00:	f000 fca8 	bl	8014454 <RCCEx_PLL3_Config>
 8013b04:	4603      	mov	r3, r0
 8013b06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8013b08:	e003      	b.n	8013b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8013b0e:	e000      	b.n	8013b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8013b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013b12:	7dfb      	ldrb	r3, [r7, #23]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d10a      	bne.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013b18:	4b5e      	ldr	r3, [pc, #376]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013b26:	495b      	ldr	r1, [pc, #364]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b28:	4313      	orrs	r3, r2
 8013b2a:	658b      	str	r3, [r1, #88]	; 0x58
 8013b2c:	e001      	b.n	8013b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b2e:	7dfb      	ldrb	r3, [r7, #23]
 8013b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d033      	beq.n	8013ba6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013b48:	d01c      	beq.n	8013b84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8013b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013b4e:	d816      	bhi.n	8013b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8013b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013b54:	d003      	beq.n	8013b5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8013b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013b5a:	d007      	beq.n	8013b6c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8013b5c:	e00f      	b.n	8013b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013b5e:	4b4d      	ldr	r3, [pc, #308]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b62:	4a4c      	ldr	r2, [pc, #304]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8013b6a:	e00c      	b.n	8013b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	3324      	adds	r3, #36	; 0x24
 8013b70:	2101      	movs	r1, #1
 8013b72:	4618      	mov	r0, r3
 8013b74:	f000 fc6e 	bl	8014454 <RCCEx_PLL3_Config>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8013b7c:	e003      	b.n	8013b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013b7e:	2301      	movs	r3, #1
 8013b80:	75fb      	strb	r3, [r7, #23]
      break;
 8013b82:	e000      	b.n	8013b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8013b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013b86:	7dfb      	ldrb	r3, [r7, #23]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d10a      	bne.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013b8c:	4b41      	ldr	r3, [pc, #260]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b9a:	493e      	ldr	r1, [pc, #248]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b9c:	4313      	orrs	r3, r2
 8013b9e:	654b      	str	r3, [r1, #84]	; 0x54
 8013ba0:	e001      	b.n	8013ba6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013ba2:	7dfb      	ldrb	r3, [r7, #23]
 8013ba4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d029      	beq.n	8013c06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d003      	beq.n	8013bc2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8013bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013bbe:	d007      	beq.n	8013bd0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8013bc0:	e00f      	b.n	8013be2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013bc2:	4b34      	ldr	r3, [pc, #208]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bc6:	4a33      	ldr	r2, [pc, #204]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013bce:	e00b      	b.n	8013be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	3304      	adds	r3, #4
 8013bd4:	2102      	movs	r1, #2
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f000 fb8a 	bl	80142f0 <RCCEx_PLL2_Config>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013be0:	e002      	b.n	8013be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8013be2:	2301      	movs	r3, #1
 8013be4:	75fb      	strb	r3, [r7, #23]
      break;
 8013be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013be8:	7dfb      	ldrb	r3, [r7, #23]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d109      	bne.n	8013c02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013bee:	4b29      	ldr	r3, [pc, #164]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bfa:	4926      	ldr	r1, [pc, #152]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013bfc:	4313      	orrs	r3, r2
 8013bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013c00:	e001      	b.n	8013c06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013c02:	7dfb      	ldrb	r3, [r7, #23]
 8013c04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d00a      	beq.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3324      	adds	r3, #36	; 0x24
 8013c16:	2102      	movs	r1, #2
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f000 fc1b 	bl	8014454 <RCCEx_PLL3_Config>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8013c24:	2301      	movs	r3, #1
 8013c26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d033      	beq.n	8013c9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c3c:	d017      	beq.n	8013c6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8013c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c42:	d811      	bhi.n	8013c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8013c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c48:	d013      	beq.n	8013c72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8013c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c4e:	d80b      	bhi.n	8013c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d010      	beq.n	8013c76 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8013c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c58:	d106      	bne.n	8013c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013c5a:	4b0e      	ldr	r3, [pc, #56]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c5e:	4a0d      	ldr	r2, [pc, #52]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8013c66:	e007      	b.n	8013c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8013c6c:	e004      	b.n	8013c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013c6e:	bf00      	nop
 8013c70:	e002      	b.n	8013c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013c72:	bf00      	nop
 8013c74:	e000      	b.n	8013c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013c78:	7dfb      	ldrb	r3, [r7, #23]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d10c      	bne.n	8013c98 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013c7e:	4b05      	ldr	r3, [pc, #20]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c8a:	4902      	ldr	r1, [pc, #8]	; (8013c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013c8c:	4313      	orrs	r3, r2
 8013c8e:	654b      	str	r3, [r1, #84]	; 0x54
 8013c90:	e004      	b.n	8013c9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8013c92:	bf00      	nop
 8013c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013c98:	7dfb      	ldrb	r3, [r7, #23]
 8013c9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d008      	beq.n	8013cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013ca8:	4b31      	ldr	r3, [pc, #196]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cb4:	492e      	ldr	r1, [pc, #184]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013cb6:	4313      	orrs	r3, r2
 8013cb8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d009      	beq.n	8013cda <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8013cc6:	4b2a      	ldr	r3, [pc, #168]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013cc8:	691b      	ldr	r3, [r3, #16]
 8013cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013cd4:	4926      	ldr	r1, [pc, #152]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013cd6:	4313      	orrs	r3, r2
 8013cd8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d008      	beq.n	8013cf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013ce6:	4b22      	ldr	r3, [pc, #136]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cf2:	491f      	ldr	r1, [pc, #124]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013cf4:	4313      	orrs	r3, r2
 8013cf6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d00d      	beq.n	8013d20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013d04:	4b1a      	ldr	r3, [pc, #104]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d06:	691b      	ldr	r3, [r3, #16]
 8013d08:	4a19      	ldr	r2, [pc, #100]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013d0e:	6113      	str	r3, [r2, #16]
 8013d10:	4b17      	ldr	r3, [pc, #92]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d12:	691a      	ldr	r2, [r3, #16]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013d1a:	4915      	ldr	r1, [pc, #84]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	da08      	bge.n	8013d3a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013d28:	4b11      	ldr	r3, [pc, #68]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d34:	490e      	ldr	r1, [pc, #56]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d36:	4313      	orrs	r3, r2
 8013d38:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d009      	beq.n	8013d5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013d46:	4b0a      	ldr	r3, [pc, #40]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d54:	4906      	ldr	r1, [pc, #24]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013d56:	4313      	orrs	r3, r2
 8013d58:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8013d5a:	7dbb      	ldrb	r3, [r7, #22]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d101      	bne.n	8013d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8013d60:	2300      	movs	r3, #0
 8013d62:	e000      	b.n	8013d66 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8013d64:	2301      	movs	r3, #1
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3718      	adds	r7, #24
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}
 8013d6e:	bf00      	nop
 8013d70:	58024400 	.word	0x58024400

08013d74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013d78:	f7ff f85a 	bl	8012e30 <HAL_RCC_GetHCLKFreq>
 8013d7c:	4602      	mov	r2, r0
 8013d7e:	4b06      	ldr	r3, [pc, #24]	; (8013d98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013d80:	6a1b      	ldr	r3, [r3, #32]
 8013d82:	091b      	lsrs	r3, r3, #4
 8013d84:	f003 0307 	and.w	r3, r3, #7
 8013d88:	4904      	ldr	r1, [pc, #16]	; (8013d9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013d8a:	5ccb      	ldrb	r3, [r1, r3]
 8013d8c:	f003 031f 	and.w	r3, r3, #31
 8013d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	58024400 	.word	0x58024400
 8013d9c:	08038bd4 	.word	0x08038bd4

08013da0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8013da0:	b480      	push	{r7}
 8013da2:	b089      	sub	sp, #36	; 0x24
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013da8:	4ba1      	ldr	r3, [pc, #644]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dac:	f003 0303 	and.w	r3, r3, #3
 8013db0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013db2:	4b9f      	ldr	r3, [pc, #636]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013db6:	0b1b      	lsrs	r3, r3, #12
 8013db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013dbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013dbe:	4b9c      	ldr	r3, [pc, #624]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc2:	091b      	lsrs	r3, r3, #4
 8013dc4:	f003 0301 	and.w	r3, r3, #1
 8013dc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013dca:	4b99      	ldr	r3, [pc, #612]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dce:	08db      	lsrs	r3, r3, #3
 8013dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	fb02 f303 	mul.w	r3, r2, r3
 8013dda:	ee07 3a90 	vmov	s15, r3
 8013dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f000 8111 	beq.w	8014010 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	2b02      	cmp	r3, #2
 8013df2:	f000 8083 	beq.w	8013efc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	f200 80a1 	bhi.w	8013f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d003      	beq.n	8013e0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d056      	beq.n	8013eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013e0a:	e099      	b.n	8013f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e0c:	4b88      	ldr	r3, [pc, #544]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f003 0320 	and.w	r3, r3, #32
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d02d      	beq.n	8013e74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013e18:	4b85      	ldr	r3, [pc, #532]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	08db      	lsrs	r3, r3, #3
 8013e1e:	f003 0303 	and.w	r3, r3, #3
 8013e22:	4a84      	ldr	r2, [pc, #528]	; (8014034 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013e24:	fa22 f303 	lsr.w	r3, r2, r3
 8013e28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	ee07 3a90 	vmov	s15, r3
 8013e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	ee07 3a90 	vmov	s15, r3
 8013e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e42:	4b7b      	ldr	r3, [pc, #492]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e4a:	ee07 3a90 	vmov	s15, r3
 8013e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013e72:	e087      	b.n	8013f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	ee07 3a90 	vmov	s15, r3
 8013e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801403c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e86:	4b6a      	ldr	r3, [pc, #424]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e8e:	ee07 3a90 	vmov	s15, r3
 8013e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013eb6:	e065      	b.n	8013f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	ee07 3a90 	vmov	s15, r3
 8013ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8014040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013eca:	4b59      	ldr	r3, [pc, #356]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ed2:	ee07 3a90 	vmov	s15, r3
 8013ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ede:	eddf 5a56 	vldr	s11, [pc, #344]	; 8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013efa:	e043      	b.n	8013f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	ee07 3a90 	vmov	s15, r3
 8013f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8014044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f0e:	4b48      	ldr	r3, [pc, #288]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f16:	ee07 3a90 	vmov	s15, r3
 8013f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013f3e:	e021      	b.n	8013f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	ee07 3a90 	vmov	s15, r3
 8013f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f52:	4b37      	ldr	r3, [pc, #220]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f5a:	ee07 3a90 	vmov	s15, r3
 8013f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013f82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013f84:	4b2a      	ldr	r3, [pc, #168]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f88:	0a5b      	lsrs	r3, r3, #9
 8013f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f8e:	ee07 3a90 	vmov	s15, r3
 8013f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013faa:	ee17 2a90 	vmov	r2, s15
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013fb2:	4b1f      	ldr	r3, [pc, #124]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fb6:	0c1b      	lsrs	r3, r3, #16
 8013fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fbc:	ee07 3a90 	vmov	s15, r3
 8013fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fd8:	ee17 2a90 	vmov	r2, s15
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013fe0:	4b13      	ldr	r3, [pc, #76]	; (8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fe4:	0e1b      	lsrs	r3, r3, #24
 8013fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fea:	ee07 3a90 	vmov	s15, r3
 8013fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014006:	ee17 2a90 	vmov	r2, s15
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801400e:	e008      	b.n	8014022 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2200      	movs	r2, #0
 8014014:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	609a      	str	r2, [r3, #8]
}
 8014022:	bf00      	nop
 8014024:	3724      	adds	r7, #36	; 0x24
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	58024400 	.word	0x58024400
 8014034:	03d09000 	.word	0x03d09000
 8014038:	46000000 	.word	0x46000000
 801403c:	4c742400 	.word	0x4c742400
 8014040:	4a742400 	.word	0x4a742400
 8014044:	4bbebc20 	.word	0x4bbebc20

08014048 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8014048:	b480      	push	{r7}
 801404a:	b089      	sub	sp, #36	; 0x24
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014050:	4ba1      	ldr	r3, [pc, #644]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014054:	f003 0303 	and.w	r3, r3, #3
 8014058:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801405a:	4b9f      	ldr	r3, [pc, #636]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801405e:	0d1b      	lsrs	r3, r3, #20
 8014060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014064:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8014066:	4b9c      	ldr	r3, [pc, #624]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801406a:	0a1b      	lsrs	r3, r3, #8
 801406c:	f003 0301 	and.w	r3, r3, #1
 8014070:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8014072:	4b99      	ldr	r3, [pc, #612]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014076:	08db      	lsrs	r3, r3, #3
 8014078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801407c:	693a      	ldr	r2, [r7, #16]
 801407e:	fb02 f303 	mul.w	r3, r2, r3
 8014082:	ee07 3a90 	vmov	s15, r3
 8014086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801408a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	2b00      	cmp	r3, #0
 8014092:	f000 8111 	beq.w	80142b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	2b02      	cmp	r3, #2
 801409a:	f000 8083 	beq.w	80141a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	2b02      	cmp	r3, #2
 80140a2:	f200 80a1 	bhi.w	80141e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80140a6:	69bb      	ldr	r3, [r7, #24]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d003      	beq.n	80140b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	2b01      	cmp	r3, #1
 80140b0:	d056      	beq.n	8014160 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80140b2:	e099      	b.n	80141e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80140b4:	4b88      	ldr	r3, [pc, #544]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	f003 0320 	and.w	r3, r3, #32
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d02d      	beq.n	801411c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80140c0:	4b85      	ldr	r3, [pc, #532]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	08db      	lsrs	r3, r3, #3
 80140c6:	f003 0303 	and.w	r3, r3, #3
 80140ca:	4a84      	ldr	r2, [pc, #528]	; (80142dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80140cc:	fa22 f303 	lsr.w	r3, r2, r3
 80140d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	ee07 3a90 	vmov	s15, r3
 80140d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	ee07 3a90 	vmov	s15, r3
 80140e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140ea:	4b7b      	ldr	r3, [pc, #492]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140f2:	ee07 3a90 	vmov	s15, r3
 80140f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80140fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801410a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014116:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801411a:	e087      	b.n	801422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	ee07 3a90 	vmov	s15, r3
 8014122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014126:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80142e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801412e:	4b6a      	ldr	r3, [pc, #424]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014136:	ee07 3a90 	vmov	s15, r3
 801413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801413e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014142:	eddf 5a67 	vldr	s11, [pc, #412]	; 80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801414e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014156:	ee67 7a27 	vmul.f32	s15, s14, s15
 801415a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801415e:	e065      	b.n	801422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	ee07 3a90 	vmov	s15, r3
 8014166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801416a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80142e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014172:	4b59      	ldr	r3, [pc, #356]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801417a:	ee07 3a90 	vmov	s15, r3
 801417e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014182:	ed97 6a03 	vldr	s12, [r7, #12]
 8014186:	eddf 5a56 	vldr	s11, [pc, #344]	; 80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801418a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801418e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801419e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80141a2:	e043      	b.n	801422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	ee07 3a90 	vmov	s15, r3
 80141aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80142ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80141b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141b6:	4b48      	ldr	r3, [pc, #288]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141be:	ee07 3a90 	vmov	s15, r3
 80141c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80141ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80141da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80141e6:	e021      	b.n	801422c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80141e8:	697b      	ldr	r3, [r7, #20]
 80141ea:	ee07 3a90 	vmov	s15, r3
 80141ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80142e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80141f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141fa:	4b37      	ldr	r3, [pc, #220]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014202:	ee07 3a90 	vmov	s15, r3
 8014206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801420a:	ed97 6a03 	vldr	s12, [r7, #12]
 801420e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801421a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801421e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801422a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801422c:	4b2a      	ldr	r3, [pc, #168]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014230:	0a5b      	lsrs	r3, r3, #9
 8014232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014236:	ee07 3a90 	vmov	s15, r3
 801423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801423e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014246:	edd7 6a07 	vldr	s13, [r7, #28]
 801424a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801424e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014252:	ee17 2a90 	vmov	r2, s15
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801425a:	4b1f      	ldr	r3, [pc, #124]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801425e:	0c1b      	lsrs	r3, r3, #16
 8014260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014264:	ee07 3a90 	vmov	s15, r3
 8014268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801426c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014274:	edd7 6a07 	vldr	s13, [r7, #28]
 8014278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801427c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014280:	ee17 2a90 	vmov	r2, s15
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8014288:	4b13      	ldr	r3, [pc, #76]	; (80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801428c:	0e1b      	lsrs	r3, r3, #24
 801428e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014292:	ee07 3a90 	vmov	s15, r3
 8014296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801429a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801429e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80142a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80142a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142ae:	ee17 2a90 	vmov	r2, s15
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80142b6:	e008      	b.n	80142ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2200      	movs	r2, #0
 80142bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2200      	movs	r2, #0
 80142c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2200      	movs	r2, #0
 80142c8:	609a      	str	r2, [r3, #8]
}
 80142ca:	bf00      	nop
 80142cc:	3724      	adds	r7, #36	; 0x24
 80142ce:	46bd      	mov	sp, r7
 80142d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d4:	4770      	bx	lr
 80142d6:	bf00      	nop
 80142d8:	58024400 	.word	0x58024400
 80142dc:	03d09000 	.word	0x03d09000
 80142e0:	46000000 	.word	0x46000000
 80142e4:	4c742400 	.word	0x4c742400
 80142e8:	4a742400 	.word	0x4a742400
 80142ec:	4bbebc20 	.word	0x4bbebc20

080142f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80142fa:	2300      	movs	r3, #0
 80142fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80142fe:	4b53      	ldr	r3, [pc, #332]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014302:	f003 0303 	and.w	r3, r3, #3
 8014306:	2b03      	cmp	r3, #3
 8014308:	d101      	bne.n	801430e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801430a:	2301      	movs	r3, #1
 801430c:	e099      	b.n	8014442 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801430e:	4b4f      	ldr	r3, [pc, #316]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	4a4e      	ldr	r2, [pc, #312]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801431a:	f7f7 fe43 	bl	800bfa4 <HAL_GetTick>
 801431e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014320:	e008      	b.n	8014334 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8014322:	f7f7 fe3f 	bl	800bfa4 <HAL_GetTick>
 8014326:	4602      	mov	r2, r0
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	1ad3      	subs	r3, r2, r3
 801432c:	2b02      	cmp	r3, #2
 801432e:	d901      	bls.n	8014334 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014330:	2303      	movs	r3, #3
 8014332:	e086      	b.n	8014442 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014334:	4b45      	ldr	r3, [pc, #276]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801433c:	2b00      	cmp	r3, #0
 801433e:	d1f0      	bne.n	8014322 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014340:	4b42      	ldr	r3, [pc, #264]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014344:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	031b      	lsls	r3, r3, #12
 801434e:	493f      	ldr	r1, [pc, #252]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014350:	4313      	orrs	r3, r2
 8014352:	628b      	str	r3, [r1, #40]	; 0x28
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	3b01      	subs	r3, #1
 801435a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	689b      	ldr	r3, [r3, #8]
 8014362:	3b01      	subs	r3, #1
 8014364:	025b      	lsls	r3, r3, #9
 8014366:	b29b      	uxth	r3, r3
 8014368:	431a      	orrs	r2, r3
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	68db      	ldr	r3, [r3, #12]
 801436e:	3b01      	subs	r3, #1
 8014370:	041b      	lsls	r3, r3, #16
 8014372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014376:	431a      	orrs	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	691b      	ldr	r3, [r3, #16]
 801437c:	3b01      	subs	r3, #1
 801437e:	061b      	lsls	r3, r3, #24
 8014380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014384:	4931      	ldr	r1, [pc, #196]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014386:	4313      	orrs	r3, r2
 8014388:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801438a:	4b30      	ldr	r3, [pc, #192]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 801438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801438e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	695b      	ldr	r3, [r3, #20]
 8014396:	492d      	ldr	r1, [pc, #180]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014398:	4313      	orrs	r3, r2
 801439a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801439c:	4b2b      	ldr	r3, [pc, #172]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 801439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a0:	f023 0220 	bic.w	r2, r3, #32
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	699b      	ldr	r3, [r3, #24]
 80143a8:	4928      	ldr	r1, [pc, #160]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143aa:	4313      	orrs	r3, r2
 80143ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80143ae:	4b27      	ldr	r3, [pc, #156]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b2:	4a26      	ldr	r2, [pc, #152]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143b4:	f023 0310 	bic.w	r3, r3, #16
 80143b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80143ba:	4b24      	ldr	r3, [pc, #144]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80143be:	4b24      	ldr	r3, [pc, #144]	; (8014450 <RCCEx_PLL2_Config+0x160>)
 80143c0:	4013      	ands	r3, r2
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	69d2      	ldr	r2, [r2, #28]
 80143c6:	00d2      	lsls	r2, r2, #3
 80143c8:	4920      	ldr	r1, [pc, #128]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143ca:	4313      	orrs	r3, r2
 80143cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80143ce:	4b1f      	ldr	r3, [pc, #124]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d2:	4a1e      	ldr	r2, [pc, #120]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143d4:	f043 0310 	orr.w	r3, r3, #16
 80143d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d106      	bne.n	80143ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80143e0:	4b1a      	ldr	r3, [pc, #104]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e4:	4a19      	ldr	r2, [pc, #100]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80143ec:	e00f      	b.n	801440e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	d106      	bne.n	8014402 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80143f4:	4b15      	ldr	r3, [pc, #84]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f8:	4a14      	ldr	r2, [pc, #80]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 80143fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014400:	e005      	b.n	801440e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014402:	4b12      	ldr	r3, [pc, #72]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014406:	4a11      	ldr	r2, [pc, #68]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801440c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801440e:	4b0f      	ldr	r3, [pc, #60]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4a0e      	ldr	r2, [pc, #56]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801441a:	f7f7 fdc3 	bl	800bfa4 <HAL_GetTick>
 801441e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014420:	e008      	b.n	8014434 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8014422:	f7f7 fdbf 	bl	800bfa4 <HAL_GetTick>
 8014426:	4602      	mov	r2, r0
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	2b02      	cmp	r3, #2
 801442e:	d901      	bls.n	8014434 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014430:	2303      	movs	r3, #3
 8014432:	e006      	b.n	8014442 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014434:	4b05      	ldr	r3, [pc, #20]	; (801444c <RCCEx_PLL2_Config+0x15c>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801443c:	2b00      	cmp	r3, #0
 801443e:	d0f0      	beq.n	8014422 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014440:	7bfb      	ldrb	r3, [r7, #15]
}
 8014442:	4618      	mov	r0, r3
 8014444:	3710      	adds	r7, #16
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}
 801444a:	bf00      	nop
 801444c:	58024400 	.word	0x58024400
 8014450:	ffff0007 	.word	0xffff0007

08014454 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801445e:	2300      	movs	r3, #0
 8014460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014462:	4b53      	ldr	r3, [pc, #332]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014466:	f003 0303 	and.w	r3, r3, #3
 801446a:	2b03      	cmp	r3, #3
 801446c:	d101      	bne.n	8014472 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801446e:	2301      	movs	r3, #1
 8014470:	e099      	b.n	80145a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014472:	4b4f      	ldr	r3, [pc, #316]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	4a4e      	ldr	r2, [pc, #312]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801447c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801447e:	f7f7 fd91 	bl	800bfa4 <HAL_GetTick>
 8014482:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014484:	e008      	b.n	8014498 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014486:	f7f7 fd8d 	bl	800bfa4 <HAL_GetTick>
 801448a:	4602      	mov	r2, r0
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	1ad3      	subs	r3, r2, r3
 8014490:	2b02      	cmp	r3, #2
 8014492:	d901      	bls.n	8014498 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014494:	2303      	movs	r3, #3
 8014496:	e086      	b.n	80145a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014498:	4b45      	ldr	r3, [pc, #276]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d1f0      	bne.n	8014486 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80144a4:	4b42      	ldr	r3, [pc, #264]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 80144a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	051b      	lsls	r3, r3, #20
 80144b2:	493f      	ldr	r1, [pc, #252]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 80144b4:	4313      	orrs	r3, r2
 80144b6:	628b      	str	r3, [r1, #40]	; 0x28
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	3b01      	subs	r3, #1
 80144be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	689b      	ldr	r3, [r3, #8]
 80144c6:	3b01      	subs	r3, #1
 80144c8:	025b      	lsls	r3, r3, #9
 80144ca:	b29b      	uxth	r3, r3
 80144cc:	431a      	orrs	r2, r3
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	68db      	ldr	r3, [r3, #12]
 80144d2:	3b01      	subs	r3, #1
 80144d4:	041b      	lsls	r3, r3, #16
 80144d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80144da:	431a      	orrs	r2, r3
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	691b      	ldr	r3, [r3, #16]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	061b      	lsls	r3, r3, #24
 80144e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80144e8:	4931      	ldr	r1, [pc, #196]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 80144ea:	4313      	orrs	r3, r2
 80144ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80144ee:	4b30      	ldr	r3, [pc, #192]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 80144f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	695b      	ldr	r3, [r3, #20]
 80144fa:	492d      	ldr	r1, [pc, #180]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 80144fc:	4313      	orrs	r3, r2
 80144fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014500:	4b2b      	ldr	r3, [pc, #172]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014504:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	699b      	ldr	r3, [r3, #24]
 801450c:	4928      	ldr	r1, [pc, #160]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801450e:	4313      	orrs	r3, r2
 8014510:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014512:	4b27      	ldr	r3, [pc, #156]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014516:	4a26      	ldr	r2, [pc, #152]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801451c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801451e:	4b24      	ldr	r3, [pc, #144]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014522:	4b24      	ldr	r3, [pc, #144]	; (80145b4 <RCCEx_PLL3_Config+0x160>)
 8014524:	4013      	ands	r3, r2
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	69d2      	ldr	r2, [r2, #28]
 801452a:	00d2      	lsls	r2, r2, #3
 801452c:	4920      	ldr	r1, [pc, #128]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801452e:	4313      	orrs	r3, r2
 8014530:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014532:	4b1f      	ldr	r3, [pc, #124]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014536:	4a1e      	ldr	r2, [pc, #120]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801453c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d106      	bne.n	8014552 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014544:	4b1a      	ldr	r3, [pc, #104]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014548:	4a19      	ldr	r2, [pc, #100]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801454a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801454e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014550:	e00f      	b.n	8014572 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	2b01      	cmp	r3, #1
 8014556:	d106      	bne.n	8014566 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014558:	4b15      	ldr	r3, [pc, #84]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801455c:	4a14      	ldr	r2, [pc, #80]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801455e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014562:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014564:	e005      	b.n	8014572 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014566:	4b12      	ldr	r3, [pc, #72]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801456a:	4a11      	ldr	r2, [pc, #68]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801456c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014570:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014572:	4b0f      	ldr	r3, [pc, #60]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	4a0e      	ldr	r2, [pc, #56]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 8014578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801457c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801457e:	f7f7 fd11 	bl	800bfa4 <HAL_GetTick>
 8014582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014584:	e008      	b.n	8014598 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014586:	f7f7 fd0d 	bl	800bfa4 <HAL_GetTick>
 801458a:	4602      	mov	r2, r0
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	1ad3      	subs	r3, r2, r3
 8014590:	2b02      	cmp	r3, #2
 8014592:	d901      	bls.n	8014598 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014594:	2303      	movs	r3, #3
 8014596:	e006      	b.n	80145a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014598:	4b05      	ldr	r3, [pc, #20]	; (80145b0 <RCCEx_PLL3_Config+0x15c>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d0f0      	beq.n	8014586 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80145a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	58024400 	.word	0x58024400
 80145b4:	ffff0007 	.word	0xffff0007

080145b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b084      	sub	sp, #16
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d101      	bne.n	80145ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80145c6:	2301      	movs	r3, #1
 80145c8:	e0f1      	b.n	80147ae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2200      	movs	r2, #0
 80145ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a78      	ldr	r2, [pc, #480]	; (80147b8 <HAL_SPI_Init+0x200>)
 80145d6:	4293      	cmp	r3, r2
 80145d8:	d00f      	beq.n	80145fa <HAL_SPI_Init+0x42>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	4a77      	ldr	r2, [pc, #476]	; (80147bc <HAL_SPI_Init+0x204>)
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d00a      	beq.n	80145fa <HAL_SPI_Init+0x42>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	4a75      	ldr	r2, [pc, #468]	; (80147c0 <HAL_SPI_Init+0x208>)
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d005      	beq.n	80145fa <HAL_SPI_Init+0x42>
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	68db      	ldr	r3, [r3, #12]
 80145f2:	2b0f      	cmp	r3, #15
 80145f4:	d901      	bls.n	80145fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80145f6:	2301      	movs	r3, #1
 80145f8:	e0d9      	b.n	80147ae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f001 f8ee 	bl	80157dc <SPI_GetPacketSize>
 8014600:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4a6c      	ldr	r2, [pc, #432]	; (80147b8 <HAL_SPI_Init+0x200>)
 8014608:	4293      	cmp	r3, r2
 801460a:	d00c      	beq.n	8014626 <HAL_SPI_Init+0x6e>
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a6a      	ldr	r2, [pc, #424]	; (80147bc <HAL_SPI_Init+0x204>)
 8014612:	4293      	cmp	r3, r2
 8014614:	d007      	beq.n	8014626 <HAL_SPI_Init+0x6e>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4a69      	ldr	r2, [pc, #420]	; (80147c0 <HAL_SPI_Init+0x208>)
 801461c:	4293      	cmp	r3, r2
 801461e:	d002      	beq.n	8014626 <HAL_SPI_Init+0x6e>
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2b08      	cmp	r3, #8
 8014624:	d811      	bhi.n	801464a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801462a:	4a63      	ldr	r2, [pc, #396]	; (80147b8 <HAL_SPI_Init+0x200>)
 801462c:	4293      	cmp	r3, r2
 801462e:	d009      	beq.n	8014644 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4a61      	ldr	r2, [pc, #388]	; (80147bc <HAL_SPI_Init+0x204>)
 8014636:	4293      	cmp	r3, r2
 8014638:	d004      	beq.n	8014644 <HAL_SPI_Init+0x8c>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4a60      	ldr	r2, [pc, #384]	; (80147c0 <HAL_SPI_Init+0x208>)
 8014640:	4293      	cmp	r3, r2
 8014642:	d104      	bne.n	801464e <HAL_SPI_Init+0x96>
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	2b10      	cmp	r3, #16
 8014648:	d901      	bls.n	801464e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801464a:	2301      	movs	r3, #1
 801464c:	e0af      	b.n	80147ae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014654:	b2db      	uxtb	r3, r3
 8014656:	2b00      	cmp	r3, #0
 8014658:	d106      	bne.n	8014668 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2200      	movs	r2, #0
 801465e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7f6 fc46 	bl	800aef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2202      	movs	r2, #2
 801466c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	f022 0201 	bic.w	r2, r2, #1
 801467e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	689b      	ldr	r3, [r3, #8]
 8014686:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801468a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	699b      	ldr	r3, [r3, #24]
 8014690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014694:	d119      	bne.n	80146ca <HAL_SPI_Init+0x112>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801469e:	d103      	bne.n	80146a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d008      	beq.n	80146ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d10c      	bne.n	80146ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80146b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80146b8:	d107      	bne.n	80146ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80146c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	69da      	ldr	r2, [r3, #28]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146d2:	431a      	orrs	r2, r3
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	431a      	orrs	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146dc:	ea42 0103 	orr.w	r1, r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	68da      	ldr	r2, [r3, #12]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	430a      	orrs	r2, r1
 80146ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f4:	431a      	orrs	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146fa:	431a      	orrs	r2, r3
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	699b      	ldr	r3, [r3, #24]
 8014700:	431a      	orrs	r2, r3
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	431a      	orrs	r2, r3
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	695b      	ldr	r3, [r3, #20]
 801470c:	431a      	orrs	r2, r3
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6a1b      	ldr	r3, [r3, #32]
 8014712:	431a      	orrs	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	431a      	orrs	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801471e:	431a      	orrs	r2, r3
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	689b      	ldr	r3, [r3, #8]
 8014724:	431a      	orrs	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801472a:	ea42 0103 	orr.w	r1, r2, r3
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	430a      	orrs	r2, r1
 8014738:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d113      	bne.n	801476a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	689b      	ldr	r3, [r3, #8]
 8014748:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014754:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	689b      	ldr	r3, [r3, #8]
 801475c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014768:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f022 0201 	bic.w	r2, r2, #1
 8014778:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014782:	2b00      	cmp	r3, #0
 8014784:	d00a      	beq.n	801479c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	430a      	orrs	r2, r1
 801479a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2200      	movs	r2, #0
 80147a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2201      	movs	r2, #1
 80147a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80147ac:	2300      	movs	r3, #0
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3710      	adds	r7, #16
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	40013000 	.word	0x40013000
 80147bc:	40003800 	.word	0x40003800
 80147c0:	40003c00 	.word	0x40003c00

080147c4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	4613      	mov	r3, r2
 80147d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80147d2:	2300      	movs	r3, #0
 80147d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80147dc:	2b01      	cmp	r3, #1
 80147de:	d101      	bne.n	80147e4 <HAL_SPI_Transmit_DMA+0x20>
 80147e0:	2302      	movs	r3, #2
 80147e2:	e12c      	b.n	8014a3e <HAL_SPI_Transmit_DMA+0x27a>
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	2201      	movs	r2, #1
 80147e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d007      	beq.n	8014808 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80147f8:	2302      	movs	r3, #2
 80147fa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2200      	movs	r2, #0
 8014800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014804:	7dfb      	ldrb	r3, [r7, #23]
 8014806:	e11a      	b.n	8014a3e <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d002      	beq.n	8014814 <HAL_SPI_Transmit_DMA+0x50>
 801480e:	88fb      	ldrh	r3, [r7, #6]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d107      	bne.n	8014824 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8014814:	2301      	movs	r3, #1
 8014816:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	2200      	movs	r2, #0
 801481c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014820:	7dfb      	ldrb	r3, [r7, #23]
 8014822:	e10c      	b.n	8014a3e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2203      	movs	r2, #3
 8014828:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	2200      	movs	r2, #0
 8014830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	68ba      	ldr	r2, [r7, #8]
 8014838:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	88fa      	ldrh	r2, [r7, #6]
 801483e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	88fa      	ldrh	r2, [r7, #6]
 8014846:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2200      	movs	r2, #0
 801484e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2200      	movs	r2, #0
 8014854:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2200      	movs	r2, #0
 801485a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	2200      	movs	r2, #0
 8014860:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2200      	movs	r2, #0
 8014868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	689b      	ldr	r3, [r3, #8]
 8014870:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014874:	d107      	bne.n	8014886 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014884:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	68db      	ldr	r3, [r3, #12]
 801488a:	2b0f      	cmp	r3, #15
 801488c:	d905      	bls.n	801489a <HAL_SPI_Transmit_DMA+0xd6>
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014892:	699b      	ldr	r3, [r3, #24]
 8014894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014898:	d10f      	bne.n	80148ba <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801489e:	2b07      	cmp	r3, #7
 80148a0:	d913      	bls.n	80148ca <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148a6:	699b      	ldr	r3, [r3, #24]
 80148a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80148ac:	d00d      	beq.n	80148ca <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148b2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80148b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148b8:	d007      	beq.n	80148ca <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80148ba:	2301      	movs	r3, #1
 80148bc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	2200      	movs	r2, #0
 80148c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80148c6:	7dfb      	ldrb	r3, [r7, #23]
 80148c8:	e0b9      	b.n	8014a3e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	68db      	ldr	r3, [r3, #12]
 80148ce:	2b07      	cmp	r3, #7
 80148d0:	d820      	bhi.n	8014914 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148d6:	699b      	ldr	r3, [r3, #24]
 80148d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80148dc:	d109      	bne.n	80148f2 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	3301      	adds	r3, #1
 80148e8:	105b      	asrs	r3, r3, #1
 80148ea:	b29a      	uxth	r2, r3
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148f6:	699b      	ldr	r3, [r3, #24]
 80148f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148fc:	d11e      	bne.n	801493c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014904:	b29b      	uxth	r3, r3
 8014906:	3303      	adds	r3, #3
 8014908:	109b      	asrs	r3, r3, #2
 801490a:	b29a      	uxth	r2, r3
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8014912:	e013      	b.n	801493c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	2b0f      	cmp	r3, #15
 801491a:	d80f      	bhi.n	801493c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014920:	699b      	ldr	r3, [r3, #24]
 8014922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014926:	d109      	bne.n	801493c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801492e:	b29b      	uxth	r3, r3
 8014930:	3301      	adds	r3, #1
 8014932:	105b      	asrs	r3, r3, #1
 8014934:	b29a      	uxth	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014940:	4a41      	ldr	r2, [pc, #260]	; (8014a48 <HAL_SPI_Transmit_DMA+0x284>)
 8014942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014948:	4a40      	ldr	r2, [pc, #256]	; (8014a4c <HAL_SPI_Transmit_DMA+0x288>)
 801494a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014950:	4a3f      	ldr	r2, [pc, #252]	; (8014a50 <HAL_SPI_Transmit_DMA+0x28c>)
 8014952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014958:	2200      	movs	r2, #0
 801495a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	689a      	ldr	r2, [r3, #8]
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801496a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014974:	4619      	mov	r1, r3
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	3320      	adds	r3, #32
 801497c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014984:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014986:	f7f8 fb65 	bl	800d054 <HAL_DMA_Start_IT>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d013      	beq.n	80149b8 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014996:	f043 0210 	orr.w	r2, r3, #16
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	2200      	movs	r2, #0
 80149a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2201      	movs	r2, #1
 80149ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80149b0:	2301      	movs	r3, #1
 80149b2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80149b4:	7dfb      	ldrb	r3, [r7, #23]
 80149b6:	e042      	b.n	8014a3e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80149bc:	69db      	ldr	r3, [r3, #28]
 80149be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149c2:	d108      	bne.n	80149d6 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	6859      	ldr	r1, [r3, #4]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	4b21      	ldr	r3, [pc, #132]	; (8014a54 <HAL_SPI_Transmit_DMA+0x290>)
 80149d0:	400b      	ands	r3, r1
 80149d2:	6053      	str	r3, [r2, #4]
 80149d4:	e009      	b.n	80149ea <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	685a      	ldr	r2, [r3, #4]
 80149dc:	4b1d      	ldr	r3, [pc, #116]	; (8014a54 <HAL_SPI_Transmit_DMA+0x290>)
 80149de:	4013      	ands	r3, r2
 80149e0:	88f9      	ldrh	r1, [r7, #6]
 80149e2:	68fa      	ldr	r2, [r7, #12]
 80149e4:	6812      	ldr	r2, [r2, #0]
 80149e6:	430b      	orrs	r3, r1
 80149e8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	689a      	ldr	r2, [r3, #8]
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80149f8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	691a      	ldr	r2, [r3, #16]
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8014a08:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	681a      	ldr	r2, [r3, #0]
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f042 0201 	orr.w	r2, r2, #1
 8014a18:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014a22:	d107      	bne.n	8014a34 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	681a      	ldr	r2, [r3, #0]
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014a32:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	2200      	movs	r2, #0
 8014a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3718      	adds	r7, #24
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	080155cf 	.word	0x080155cf
 8014a4c:	080154fd 	.word	0x080154fd
 8014a50:	08015623 	.word	0x08015623
 8014a54:	ffff0000 	.word	0xffff0000

08014a58 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b086      	sub	sp, #24
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	4613      	mov	r3, r2
 8014a64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014a66:	2300      	movs	r3, #0
 8014a68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	689b      	ldr	r3, [r3, #8]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d110      	bne.n	8014a94 <HAL_SPI_Receive_DMA+0x3c>
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014a7a:	d10b      	bne.n	8014a94 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2204      	movs	r2, #4
 8014a80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8014a84:	88fb      	ldrh	r3, [r7, #6]
 8014a86:	68ba      	ldr	r2, [r7, #8]
 8014a88:	68b9      	ldr	r1, [r7, #8]
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	f000 f940 	bl	8014d10 <HAL_SPI_TransmitReceive_DMA>
 8014a90:	4603      	mov	r3, r0
 8014a92:	e130      	b.n	8014cf6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014a9a:	2b01      	cmp	r3, #1
 8014a9c:	d101      	bne.n	8014aa2 <HAL_SPI_Receive_DMA+0x4a>
 8014a9e:	2302      	movs	r3, #2
 8014aa0:	e129      	b.n	8014cf6 <HAL_SPI_Receive_DMA+0x29e>
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014ab0:	b2db      	uxtb	r3, r3
 8014ab2:	2b01      	cmp	r3, #1
 8014ab4:	d007      	beq.n	8014ac6 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8014ab6:	2302      	movs	r3, #2
 8014ab8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	2200      	movs	r2, #0
 8014abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014ac2:	7dfb      	ldrb	r3, [r7, #23]
 8014ac4:	e117      	b.n	8014cf6 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d002      	beq.n	8014ad2 <HAL_SPI_Receive_DMA+0x7a>
 8014acc:	88fb      	ldrh	r3, [r7, #6]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d107      	bne.n	8014ae2 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014ade:	7dfb      	ldrb	r3, [r7, #23]
 8014ae0:	e109      	b.n	8014cf6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	2204      	movs	r2, #4
 8014ae6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2200      	movs	r2, #0
 8014aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	68ba      	ldr	r2, [r7, #8]
 8014af6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	88fa      	ldrh	r2, [r7, #6]
 8014afc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	88fa      	ldrh	r2, [r7, #6]
 8014b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2200      	movs	r2, #0
 8014b12:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	2200      	movs	r2, #0
 8014b18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	689b      	ldr	r3, [r3, #8]
 8014b28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014b2c:	d107      	bne.n	8014b3e <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	681a      	ldr	r2, [r3, #0]
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014b3c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	2b0f      	cmp	r3, #15
 8014b44:	d905      	bls.n	8014b52 <HAL_SPI_Receive_DMA+0xfa>
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b4a:	699b      	ldr	r3, [r3, #24]
 8014b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014b50:	d10f      	bne.n	8014b72 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014b56:	2b07      	cmp	r3, #7
 8014b58:	d913      	bls.n	8014b82 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b5e:	699b      	ldr	r3, [r3, #24]
 8014b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b64:	d00d      	beq.n	8014b82 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b6a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014b70:	d007      	beq.n	8014b82 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8014b72:	2301      	movs	r3, #1
 8014b74:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014b7e:	7dfb      	ldrb	r3, [r7, #23]
 8014b80:	e0b9      	b.n	8014cf6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	689a      	ldr	r2, [r3, #8]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014b90:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	68db      	ldr	r3, [r3, #12]
 8014b96:	2b07      	cmp	r3, #7
 8014b98:	d820      	bhi.n	8014bdc <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b9e:	699b      	ldr	r3, [r3, #24]
 8014ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014ba4:	d109      	bne.n	8014bba <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	3301      	adds	r3, #1
 8014bb0:	105b      	asrs	r3, r3, #1
 8014bb2:	b29a      	uxth	r2, r3
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014bbe:	699b      	ldr	r3, [r3, #24]
 8014bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014bc4:	d11e      	bne.n	8014c04 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	3303      	adds	r3, #3
 8014bd0:	109b      	asrs	r3, r3, #2
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014bda:	e013      	b.n	8014c04 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	2b0f      	cmp	r3, #15
 8014be2:	d80f      	bhi.n	8014c04 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014be8:	699b      	ldr	r3, [r3, #24]
 8014bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014bee:	d109      	bne.n	8014c04 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	105b      	asrs	r3, r3, #1
 8014bfc:	b29a      	uxth	r2, r3
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c08:	4a3d      	ldr	r2, [pc, #244]	; (8014d00 <HAL_SPI_Receive_DMA+0x2a8>)
 8014c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c10:	4a3c      	ldr	r2, [pc, #240]	; (8014d04 <HAL_SPI_Receive_DMA+0x2ac>)
 8014c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c18:	4a3b      	ldr	r2, [pc, #236]	; (8014d08 <HAL_SPI_Receive_DMA+0x2b0>)
 8014c1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c20:	2200      	movs	r2, #0
 8014c22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	3330      	adds	r3, #48	; 0x30
 8014c2e:	4619      	mov	r1, r3
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014c3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014c3e:	f7f8 fa09 	bl	800d054 <HAL_DMA_Start_IT>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d013      	beq.n	8014c70 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c4e:	f043 0210 	orr.w	r2, r3, #16
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2201      	movs	r2, #1
 8014c64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014c6c:	7dfb      	ldrb	r3, [r7, #23]
 8014c6e:	e042      	b.n	8014cf6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c74:	69db      	ldr	r3, [r3, #28]
 8014c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c7a:	d108      	bne.n	8014c8e <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	6859      	ldr	r1, [r3, #4]
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	4b21      	ldr	r3, [pc, #132]	; (8014d0c <HAL_SPI_Receive_DMA+0x2b4>)
 8014c88:	400b      	ands	r3, r1
 8014c8a:	6053      	str	r3, [r2, #4]
 8014c8c:	e009      	b.n	8014ca2 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	685a      	ldr	r2, [r3, #4]
 8014c94:	4b1d      	ldr	r3, [pc, #116]	; (8014d0c <HAL_SPI_Receive_DMA+0x2b4>)
 8014c96:	4013      	ands	r3, r2
 8014c98:	88f9      	ldrh	r1, [r7, #6]
 8014c9a:	68fa      	ldr	r2, [r7, #12]
 8014c9c:	6812      	ldr	r2, [r2, #0]
 8014c9e:	430b      	orrs	r3, r1
 8014ca0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	689a      	ldr	r2, [r3, #8]
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014cb0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	691a      	ldr	r2, [r3, #16]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8014cc0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f042 0201 	orr.w	r2, r2, #1
 8014cd0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	685b      	ldr	r3, [r3, #4]
 8014cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014cda:	d107      	bne.n	8014cec <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	681a      	ldr	r2, [r3, #0]
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014cea:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3718      	adds	r7, #24
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	080155eb 	.word	0x080155eb
 8014d04:	08015543 	.word	0x08015543
 8014d08:	08015623 	.word	0x08015623
 8014d0c:	ffff0000 	.word	0xffff0000

08014d10 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b086      	sub	sp, #24
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
 8014d1c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014d28:	2b01      	cmp	r3, #1
 8014d2a:	d101      	bne.n	8014d30 <HAL_SPI_TransmitReceive_DMA+0x20>
 8014d2c:	2302      	movs	r3, #2
 8014d2e:	e1b4      	b.n	801509a <HAL_SPI_TransmitReceive_DMA+0x38a>
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2201      	movs	r2, #1
 8014d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014d3e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014d46:	7dbb      	ldrb	r3, [r7, #22]
 8014d48:	2b01      	cmp	r3, #1
 8014d4a:	d012      	beq.n	8014d72 <HAL_SPI_TransmitReceive_DMA+0x62>
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014d52:	d106      	bne.n	8014d62 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d102      	bne.n	8014d62 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014d5c:	7dbb      	ldrb	r3, [r7, #22]
 8014d5e:	2b04      	cmp	r3, #4
 8014d60:	d007      	beq.n	8014d72 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8014d62:	2302      	movs	r3, #2
 8014d64:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014d6e:	7dfb      	ldrb	r3, [r7, #23]
 8014d70:	e193      	b.n	801509a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d005      	beq.n	8014d84 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d002      	beq.n	8014d84 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014d7e:	887b      	ldrh	r3, [r7, #2]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d107      	bne.n	8014d94 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8014d84:	2301      	movs	r3, #1
 8014d86:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014d90:	7dfb      	ldrb	r3, [r7, #23]
 8014d92:	e182      	b.n	801509a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014d9a:	b2db      	uxtb	r3, r3
 8014d9c:	2b04      	cmp	r3, #4
 8014d9e:	d003      	beq.n	8014da8 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	2205      	movs	r2, #5
 8014da4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2200      	movs	r2, #0
 8014dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	68ba      	ldr	r2, [r7, #8]
 8014db4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	887a      	ldrh	r2, [r7, #2]
 8014dba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	887a      	ldrh	r2, [r7, #2]
 8014dc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	887a      	ldrh	r2, [r7, #2]
 8014dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	887a      	ldrh	r2, [r7, #2]
 8014dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2200      	movs	r2, #0
 8014de0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2200      	movs	r2, #0
 8014de6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	689a      	ldr	r2, [r3, #8]
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014df6:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	68db      	ldr	r3, [r3, #12]
 8014dfc:	2b0f      	cmp	r3, #15
 8014dfe:	d905      	bls.n	8014e0c <HAL_SPI_TransmitReceive_DMA+0xfc>
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e04:	699b      	ldr	r3, [r3, #24]
 8014e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014e0a:	d10f      	bne.n	8014e2c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014e10:	2b07      	cmp	r3, #7
 8014e12:	d913      	bls.n	8014e3c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e18:	699b      	ldr	r3, [r3, #24]
 8014e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e1e:	d00d      	beq.n	8014e3c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e24:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014e2a:	d007      	beq.n	8014e3c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2200      	movs	r2, #0
 8014e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014e38:	7dfb      	ldrb	r3, [r7, #23]
 8014e3a:	e12e      	b.n	801509a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	68db      	ldr	r3, [r3, #12]
 8014e40:	2b07      	cmp	r3, #7
 8014e42:	d840      	bhi.n	8014ec6 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e48:	699b      	ldr	r3, [r3, #24]
 8014e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e4e:	d109      	bne.n	8014e64 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	3301      	adds	r3, #1
 8014e5a:	105b      	asrs	r3, r3, #1
 8014e5c:	b29a      	uxth	r2, r3
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e68:	699b      	ldr	r3, [r3, #24]
 8014e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014e6e:	d109      	bne.n	8014e84 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	3303      	adds	r3, #3
 8014e7a:	109b      	asrs	r3, r3, #2
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e88:	699b      	ldr	r3, [r3, #24]
 8014e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e8e:	d109      	bne.n	8014ea4 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	3301      	adds	r3, #1
 8014e9a:	105b      	asrs	r3, r3, #1
 8014e9c:	b29a      	uxth	r2, r3
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ea8:	699b      	ldr	r3, [r3, #24]
 8014eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014eae:	d12e      	bne.n	8014f0e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	3303      	adds	r3, #3
 8014eba:	109b      	asrs	r3, r3, #2
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014ec4:	e023      	b.n	8014f0e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	2b0f      	cmp	r3, #15
 8014ecc:	d81f      	bhi.n	8014f0e <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ed2:	699b      	ldr	r3, [r3, #24]
 8014ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ed8:	d109      	bne.n	8014eee <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ee0:	b29b      	uxth	r3, r3
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	105b      	asrs	r3, r3, #1
 8014ee6:	b29a      	uxth	r2, r3
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ef2:	699b      	ldr	r3, [r3, #24]
 8014ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ef8:	d109      	bne.n	8014f0e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	3301      	adds	r3, #1
 8014f04:	105b      	asrs	r3, r3, #1
 8014f06:	b29a      	uxth	r2, r3
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	2b04      	cmp	r3, #4
 8014f18:	d108      	bne.n	8014f2c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f1e:	4a61      	ldr	r2, [pc, #388]	; (80150a4 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8014f20:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f26:	4a60      	ldr	r2, [pc, #384]	; (80150a8 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8014f28:	63da      	str	r2, [r3, #60]	; 0x3c
 8014f2a:	e007      	b.n	8014f3c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f30:	4a5e      	ldr	r2, [pc, #376]	; (80150ac <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8014f32:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f38:	4a5d      	ldr	r2, [pc, #372]	; (80150b0 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8014f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f40:	4a5c      	ldr	r2, [pc, #368]	; (80150b4 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8014f42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f48:	2200      	movs	r2, #0
 8014f4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	3330      	adds	r3, #48	; 0x30
 8014f56:	4619      	mov	r1, r3
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f5c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f64:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014f66:	f7f8 f875 	bl	800d054 <HAL_DMA_Start_IT>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d013      	beq.n	8014f98 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f76:	f043 0210 	orr.w	r2, r3, #16
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	2201      	movs	r2, #1
 8014f8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014f90:	2301      	movs	r3, #1
 8014f92:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014f94:	7dfb      	ldrb	r3, [r7, #23]
 8014f96:	e080      	b.n	801509a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	689a      	ldr	r2, [r3, #8]
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014fa6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fac:	2200      	movs	r2, #0
 8014fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014fd0:	4619      	mov	r1, r3
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	3320      	adds	r3, #32
 8014fd8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014fe0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014fe2:	f7f8 f837 	bl	800d054 <HAL_DMA_Start_IT>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d013      	beq.n	8015014 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014ff2:	f043 0210 	orr.w	r2, r3, #16
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2200      	movs	r2, #0
 8015000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2201      	movs	r2, #1
 8015008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 801500c:	2301      	movs	r3, #1
 801500e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8015010:	7dfb      	ldrb	r3, [r7, #23]
 8015012:	e042      	b.n	801509a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015018:	69db      	ldr	r3, [r3, #28]
 801501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801501e:	d108      	bne.n	8015032 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	6859      	ldr	r1, [r3, #4]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	681a      	ldr	r2, [r3, #0]
 801502a:	4b23      	ldr	r3, [pc, #140]	; (80150b8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 801502c:	400b      	ands	r3, r1
 801502e:	6053      	str	r3, [r2, #4]
 8015030:	e009      	b.n	8015046 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	685a      	ldr	r2, [r3, #4]
 8015038:	4b1f      	ldr	r3, [pc, #124]	; (80150b8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 801503a:	4013      	ands	r3, r2
 801503c:	8879      	ldrh	r1, [r7, #2]
 801503e:	68fa      	ldr	r2, [r7, #12]
 8015040:	6812      	ldr	r2, [r2, #0]
 8015042:	430b      	orrs	r3, r1
 8015044:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	689a      	ldr	r2, [r3, #8]
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015054:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	691a      	ldr	r2, [r3, #16]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8015064:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	f042 0201 	orr.w	r2, r2, #1
 8015074:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801507e:	d107      	bne.n	8015090 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801508e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2200      	movs	r2, #0
 8015094:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8015098:	7dfb      	ldrb	r3, [r7, #23]
}
 801509a:	4618      	mov	r0, r3
 801509c:	3718      	adds	r7, #24
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop
 80150a4:	080155eb 	.word	0x080155eb
 80150a8:	08015543 	.word	0x08015543
 80150ac:	08015607 	.word	0x08015607
 80150b0:	08015589 	.word	0x08015589
 80150b4:	08015623 	.word	0x08015623
 80150b8:	ffff0000 	.word	0xffff0000

080150bc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b08a      	sub	sp, #40	; 0x28
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	691b      	ldr	r3, [r3, #16]
 80150ca:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	695b      	ldr	r3, [r3, #20]
 80150d2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80150d4:	6a3a      	ldr	r2, [r7, #32]
 80150d6:	69fb      	ldr	r3, [r7, #28]
 80150d8:	4013      	ands	r3, r2
 80150da:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	689b      	ldr	r3, [r3, #8]
 80150e2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80150e4:	2300      	movs	r3, #0
 80150e6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80150ee:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	3330      	adds	r3, #48	; 0x30
 80150f6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80150f8:	69bb      	ldr	r3, [r7, #24]
 80150fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d113      	bne.n	801512a <HAL_SPI_IRQHandler+0x6e>
 8015102:	69bb      	ldr	r3, [r7, #24]
 8015104:	f003 0320 	and.w	r3, r3, #32
 8015108:	2b00      	cmp	r3, #0
 801510a:	d10e      	bne.n	801512a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801510c:	69bb      	ldr	r3, [r7, #24]
 801510e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015112:	2b00      	cmp	r3, #0
 8015114:	d009      	beq.n	801512a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	4798      	blx	r3
    handled = 1UL;
 8015126:	2301      	movs	r3, #1
 8015128:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801512a:	69bb      	ldr	r3, [r7, #24]
 801512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015130:	2b00      	cmp	r3, #0
 8015132:	d10f      	bne.n	8015154 <HAL_SPI_IRQHandler+0x98>
 8015134:	69bb      	ldr	r3, [r7, #24]
 8015136:	f003 0301 	and.w	r3, r3, #1
 801513a:	2b00      	cmp	r3, #0
 801513c:	d00a      	beq.n	8015154 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015144:	2b00      	cmp	r3, #0
 8015146:	d105      	bne.n	8015154 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	4798      	blx	r3
    handled = 1UL;
 8015150:	2301      	movs	r3, #1
 8015152:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015154:	69bb      	ldr	r3, [r7, #24]
 8015156:	f003 0320 	and.w	r3, r3, #32
 801515a:	2b00      	cmp	r3, #0
 801515c:	d10f      	bne.n	801517e <HAL_SPI_IRQHandler+0xc2>
 801515e:	69bb      	ldr	r3, [r7, #24]
 8015160:	f003 0302 	and.w	r3, r3, #2
 8015164:	2b00      	cmp	r3, #0
 8015166:	d00a      	beq.n	801517e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015168:	69bb      	ldr	r3, [r7, #24]
 801516a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801516e:	2b00      	cmp	r3, #0
 8015170:	d105      	bne.n	801517e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	4798      	blx	r3
    handled = 1UL;
 801517a:	2301      	movs	r3, #1
 801517c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	2b00      	cmp	r3, #0
 8015182:	f040 815a 	bne.w	801543a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015186:	69bb      	ldr	r3, [r7, #24]
 8015188:	f003 0308 	and.w	r3, r3, #8
 801518c:	2b00      	cmp	r3, #0
 801518e:	f000 808b 	beq.w	80152a8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	699a      	ldr	r2, [r3, #24]
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f042 0208 	orr.w	r2, r2, #8
 80151a0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	699a      	ldr	r2, [r3, #24]
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	f042 0210 	orr.w	r2, r2, #16
 80151b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	699a      	ldr	r2, [r3, #24]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80151c0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	691a      	ldr	r2, [r3, #16]
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f022 0208 	bic.w	r2, r2, #8
 80151d0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	689b      	ldr	r3, [r3, #8]
 80151d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d13d      	bne.n	801525c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80151e0:	e036      	b.n	8015250 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	68db      	ldr	r3, [r3, #12]
 80151e6:	2b0f      	cmp	r3, #15
 80151e8:	d90b      	bls.n	8015202 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80151f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80151f4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80151fa:	1d1a      	adds	r2, r3, #4
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	665a      	str	r2, [r3, #100]	; 0x64
 8015200:	e01d      	b.n	801523e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	68db      	ldr	r3, [r3, #12]
 8015206:	2b07      	cmp	r3, #7
 8015208:	d90b      	bls.n	8015222 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801520e:	68fa      	ldr	r2, [r7, #12]
 8015210:	8812      	ldrh	r2, [r2, #0]
 8015212:	b292      	uxth	r2, r2
 8015214:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801521a:	1c9a      	adds	r2, r3, #2
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	665a      	str	r2, [r3, #100]	; 0x64
 8015220:	e00d      	b.n	801523e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801522e:	7812      	ldrb	r2, [r2, #0]
 8015230:	b2d2      	uxtb	r2, r2
 8015232:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015238:	1c5a      	adds	r2, r3, #1
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015244:	b29b      	uxth	r3, r3
 8015246:	3b01      	subs	r3, #1
 8015248:	b29a      	uxth	r2, r3
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015256:	b29b      	uxth	r3, r3
 8015258:	2b00      	cmp	r3, #0
 801525a:	d1c2      	bne.n	80151e2 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f000 fa1d 	bl	801569c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2201      	movs	r2, #1
 8015266:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015270:	2b00      	cmp	r3, #0
 8015272:	d003      	beq.n	801527c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f000 f929 	bl	80154cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801527a:	e0e3      	b.n	8015444 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801527c:	7cfb      	ldrb	r3, [r7, #19]
 801527e:	2b05      	cmp	r3, #5
 8015280:	d103      	bne.n	801528a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f000 f8fa 	bl	801547c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015288:	e0d9      	b.n	801543e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801528a:	7cfb      	ldrb	r3, [r7, #19]
 801528c:	2b04      	cmp	r3, #4
 801528e:	d103      	bne.n	8015298 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f000 f8e9 	bl	8015468 <HAL_SPI_RxCpltCallback>
    return;
 8015296:	e0d2      	b.n	801543e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015298:	7cfb      	ldrb	r3, [r7, #19]
 801529a:	2b03      	cmp	r3, #3
 801529c:	f040 80cf 	bne.w	801543e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f000 f8d7 	bl	8015454 <HAL_SPI_TxCpltCallback>
    return;
 80152a6:	e0ca      	b.n	801543e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00d      	beq.n	80152ce <HAL_SPI_IRQHandler+0x212>
 80152b2:	6a3b      	ldr	r3, [r7, #32]
 80152b4:	f003 0308 	and.w	r3, r3, #8
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d008      	beq.n	80152ce <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	699a      	ldr	r2, [r3, #24]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80152ca:	619a      	str	r2, [r3, #24]

    return;
 80152cc:	e0ba      	b.n	8015444 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80152ce:	69bb      	ldr	r3, [r7, #24]
 80152d0:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f000 80b5 	beq.w	8015444 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80152da:	69bb      	ldr	r3, [r7, #24]
 80152dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d00f      	beq.n	8015304 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80152ea:	f043 0204 	orr.w	r2, r3, #4
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	699a      	ldr	r2, [r3, #24]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015302:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015304:	69bb      	ldr	r3, [r7, #24]
 8015306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00f      	beq.n	801532e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015314:	f043 0201 	orr.w	r2, r3, #1
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	699a      	ldr	r2, [r3, #24]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801532c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801532e:	69bb      	ldr	r3, [r7, #24]
 8015330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015334:	2b00      	cmp	r3, #0
 8015336:	d00f      	beq.n	8015358 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801533e:	f043 0208 	orr.w	r2, r3, #8
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	699a      	ldr	r2, [r3, #24]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015356:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015358:	69bb      	ldr	r3, [r7, #24]
 801535a:	f003 0320 	and.w	r3, r3, #32
 801535e:	2b00      	cmp	r3, #0
 8015360:	d00f      	beq.n	8015382 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015368:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	699a      	ldr	r2, [r3, #24]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	f042 0220 	orr.w	r2, r2, #32
 8015380:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015388:	2b00      	cmp	r3, #0
 801538a:	d05a      	beq.n	8015442 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	681a      	ldr	r2, [r3, #0]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	f022 0201 	bic.w	r2, r2, #1
 801539a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	6919      	ldr	r1, [r3, #16]
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	4b29      	ldr	r3, [pc, #164]	; (801544c <HAL_SPI_IRQHandler+0x390>)
 80153a8:	400b      	ands	r3, r1
 80153aa:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80153b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80153b6:	d138      	bne.n	801542a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	689a      	ldr	r2, [r3, #8]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80153c6:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d013      	beq.n	80153f8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80153d4:	4a1e      	ldr	r2, [pc, #120]	; (8015450 <HAL_SPI_IRQHandler+0x394>)
 80153d6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80153dc:	4618      	mov	r0, r3
 80153de:	f7f8 fbc1 	bl	800db64 <HAL_DMA_Abort_IT>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d007      	beq.n	80153f8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80153ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d020      	beq.n	8015442 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015404:	4a12      	ldr	r2, [pc, #72]	; (8015450 <HAL_SPI_IRQHandler+0x394>)
 8015406:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801540c:	4618      	mov	r0, r3
 801540e:	f7f8 fba9 	bl	800db64 <HAL_DMA_Abort_IT>
 8015412:	4603      	mov	r3, r0
 8015414:	2b00      	cmp	r3, #0
 8015416:	d014      	beq.n	8015442 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801541e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015428:	e00b      	b.n	8015442 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2201      	movs	r2, #1
 801542e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f000 f84a 	bl	80154cc <HAL_SPI_ErrorCallback>
    return;
 8015438:	e003      	b.n	8015442 <HAL_SPI_IRQHandler+0x386>
    return;
 801543a:	bf00      	nop
 801543c:	e002      	b.n	8015444 <HAL_SPI_IRQHandler+0x388>
    return;
 801543e:	bf00      	nop
 8015440:	e000      	b.n	8015444 <HAL_SPI_IRQHandler+0x388>
    return;
 8015442:	bf00      	nop
  }
}
 8015444:	3728      	adds	r7, #40	; 0x28
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	fffffc94 	.word	0xfffffc94
 8015450:	08015669 	.word	0x08015669

08015454 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015454:	b480      	push	{r7}
 8015456:	b083      	sub	sp, #12
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801545c:	bf00      	nop
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr

08015468 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015468:	b480      	push	{r7}
 801546a:	b083      	sub	sp, #12
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015470:	bf00      	nop
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr

0801547c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801547c:	b480      	push	{r7}
 801547e:	b083      	sub	sp, #12
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015484:	bf00      	nop
 8015486:	370c      	adds	r7, #12
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr

08015490 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015490:	b480      	push	{r7}
 8015492:	b083      	sub	sp, #12
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015498:	bf00      	nop
 801549a:	370c      	adds	r7, #12
 801549c:	46bd      	mov	sp, r7
 801549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a2:	4770      	bx	lr

080154a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80154a4:	b480      	push	{r7}
 80154a6:	b083      	sub	sp, #12
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80154ac:	bf00      	nop
 80154ae:	370c      	adds	r7, #12
 80154b0:	46bd      	mov	sp, r7
 80154b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b6:	4770      	bx	lr

080154b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80154b8:	b480      	push	{r7}
 80154ba:	b083      	sub	sp, #12
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80154c0:	bf00      	nop
 80154c2:	370c      	adds	r7, #12
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80154d4:	bf00      	nop
 80154d6:	370c      	adds	r7, #12
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr

080154e0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80154ee:	b2db      	uxtb	r3, r3
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	370c      	adds	r7, #12
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015508:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015510:	b2db      	uxtb	r3, r3
 8015512:	2b07      	cmp	r3, #7
 8015514:	d011      	beq.n	801553a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801551a:	69db      	ldr	r3, [r3, #28]
 801551c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015520:	d103      	bne.n	801552a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f7ff ff96 	bl	8015454 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015528:	e007      	b.n	801553a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	691a      	ldr	r2, [r3, #16]
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	f042 0208 	orr.w	r2, r2, #8
 8015538:	611a      	str	r2, [r3, #16]
}
 801553a:	bf00      	nop
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}

08015542 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015542:	b580      	push	{r7, lr}
 8015544:	b084      	sub	sp, #16
 8015546:	af00      	add	r7, sp, #0
 8015548:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801554e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015556:	b2db      	uxtb	r3, r3
 8015558:	2b07      	cmp	r3, #7
 801555a:	d011      	beq.n	8015580 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015560:	69db      	ldr	r3, [r3, #28]
 8015562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015566:	d103      	bne.n	8015570 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f7ff ff7d 	bl	8015468 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801556e:	e007      	b.n	8015580 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	691a      	ldr	r2, [r3, #16]
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	f042 0208 	orr.w	r2, r2, #8
 801557e:	611a      	str	r2, [r3, #16]
}
 8015580:	bf00      	nop
 8015582:	3710      	adds	r7, #16
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b084      	sub	sp, #16
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015594:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801559c:	b2db      	uxtb	r3, r3
 801559e:	2b07      	cmp	r3, #7
 80155a0:	d011      	beq.n	80155c6 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155a6:	69db      	ldr	r3, [r3, #28]
 80155a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80155ac:	d103      	bne.n	80155b6 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f7ff ff64 	bl	801547c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80155b4:	e007      	b.n	80155c6 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	691a      	ldr	r2, [r3, #16]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	f042 0208 	orr.w	r2, r2, #8
 80155c4:	611a      	str	r2, [r3, #16]
}
 80155c6:	bf00      	nop
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b084      	sub	sp, #16
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155da:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f7ff ff57 	bl	8015490 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80155e2:	bf00      	nop
 80155e4:	3710      	adds	r7, #16
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b084      	sub	sp, #16
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155f6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f7ff ff53 	bl	80154a4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80155fe:	bf00      	nop
 8015600:	3710      	adds	r7, #16
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}

08015606 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015606:	b580      	push	{r7, lr}
 8015608:	b084      	sub	sp, #16
 801560a:	af00      	add	r7, sp, #0
 801560c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015612:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8015614:	68f8      	ldr	r0, [r7, #12]
 8015616:	f7ff ff4f 	bl	80154b8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801561a:	bf00      	nop
 801561c:	3710      	adds	r7, #16
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}

08015622 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8015622:	b580      	push	{r7, lr}
 8015624:	b084      	sub	sp, #16
 8015626:	af00      	add	r7, sp, #0
 8015628:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801562e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f7f9 fc15 	bl	800ee60 <HAL_DMA_GetError>
 8015636:	4603      	mov	r3, r0
 8015638:	2b02      	cmp	r3, #2
 801563a:	d011      	beq.n	8015660 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f000 f82d 	bl	801569c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015648:	f043 0210 	orr.w	r2, r3, #16
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2201      	movs	r2, #1
 8015656:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801565a:	68f8      	ldr	r0, [r7, #12]
 801565c:	f7ff ff36 	bl	80154cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015660:	bf00      	nop
 8015662:	3710      	adds	r7, #16
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}

08015668 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b084      	sub	sp, #16
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015674:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	2200      	movs	r2, #0
 801567a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	2200      	movs	r2, #0
 8015682:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	2201      	movs	r2, #1
 801568a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801568e:	68f8      	ldr	r0, [r7, #12]
 8015690:	f7ff ff1c 	bl	80154cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015694:	bf00      	nop
 8015696:	3710      	adds	r7, #16
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}

0801569c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801569c:	b480      	push	{r7}
 801569e:	b085      	sub	sp, #20
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	695b      	ldr	r3, [r3, #20]
 80156aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	699a      	ldr	r2, [r3, #24]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	f042 0208 	orr.w	r2, r2, #8
 80156ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	699a      	ldr	r2, [r3, #24]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	f042 0210 	orr.w	r2, r2, #16
 80156ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f022 0201 	bic.w	r2, r2, #1
 80156da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	6919      	ldr	r1, [r3, #16]
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	4b3c      	ldr	r3, [pc, #240]	; (80157d8 <SPI_CloseTransfer+0x13c>)
 80156e8:	400b      	ands	r3, r1
 80156ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	689a      	ldr	r2, [r3, #8]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80156fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015702:	b2db      	uxtb	r3, r3
 8015704:	2b04      	cmp	r3, #4
 8015706:	d014      	beq.n	8015732 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f003 0320 	and.w	r3, r3, #32
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00f      	beq.n	8015732 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015718:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	699a      	ldr	r2, [r3, #24]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	f042 0220 	orr.w	r2, r2, #32
 8015730:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015738:	b2db      	uxtb	r3, r3
 801573a:	2b03      	cmp	r3, #3
 801573c:	d014      	beq.n	8015768 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015744:	2b00      	cmp	r3, #0
 8015746:	d00f      	beq.n	8015768 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801574e:	f043 0204 	orr.w	r2, r3, #4
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	699a      	ldr	r2, [r3, #24]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015766:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801576e:	2b00      	cmp	r3, #0
 8015770:	d00f      	beq.n	8015792 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015778:	f043 0201 	orr.w	r2, r3, #1
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	699a      	ldr	r2, [r3, #24]
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015790:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015798:	2b00      	cmp	r3, #0
 801579a:	d00f      	beq.n	80157bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80157a2:	f043 0208 	orr.w	r2, r3, #8
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	699a      	ldr	r2, [r3, #24]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80157ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2200      	movs	r2, #0
 80157c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2200      	movs	r2, #0
 80157c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80157cc:	bf00      	nop
 80157ce:	3714      	adds	r7, #20
 80157d0:	46bd      	mov	sp, r7
 80157d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d6:	4770      	bx	lr
 80157d8:	fffffc90 	.word	0xfffffc90

080157dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80157dc:	b480      	push	{r7}
 80157de:	b085      	sub	sp, #20
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157e8:	095b      	lsrs	r3, r3, #5
 80157ea:	3301      	adds	r3, #1
 80157ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	68db      	ldr	r3, [r3, #12]
 80157f2:	3301      	adds	r3, #1
 80157f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	3307      	adds	r3, #7
 80157fa:	08db      	lsrs	r3, r3, #3
 80157fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	68fa      	ldr	r2, [r7, #12]
 8015802:	fb02 f303 	mul.w	r3, r2, r3
}
 8015806:	4618      	mov	r0, r3
 8015808:	3714      	adds	r7, #20
 801580a:	46bd      	mov	sp, r7
 801580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015810:	4770      	bx	lr

08015812 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015812:	b580      	push	{r7, lr}
 8015814:	b082      	sub	sp, #8
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d101      	bne.n	8015824 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015820:	2301      	movs	r3, #1
 8015822:	e049      	b.n	80158b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801582a:	b2db      	uxtb	r3, r3
 801582c:	2b00      	cmp	r3, #0
 801582e:	d106      	bne.n	801583e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2200      	movs	r2, #0
 8015834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f7f5 ff5b 	bl	800b6f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2202      	movs	r2, #2
 8015842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	3304      	adds	r3, #4
 801584e:	4619      	mov	r1, r3
 8015850:	4610      	mov	r0, r2
 8015852:	f000 faed 	bl	8015e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2201      	movs	r2, #1
 801585a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2201      	movs	r2, #1
 8015862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2201      	movs	r2, #1
 801586a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2201      	movs	r2, #1
 8015872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2201      	movs	r2, #1
 801587a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2201      	movs	r2, #1
 8015882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2201      	movs	r2, #1
 801588a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	2201      	movs	r2, #1
 8015892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	2201      	movs	r2, #1
 801589a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2201      	movs	r2, #1
 80158a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2201      	movs	r2, #1
 80158aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2201      	movs	r2, #1
 80158b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80158b6:	2300      	movs	r3, #0
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80158c0:	b480      	push	{r7}
 80158c2:	b085      	sub	sp, #20
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d001      	beq.n	80158d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80158d4:	2301      	movs	r3, #1
 80158d6:	e054      	b.n	8015982 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2202      	movs	r2, #2
 80158dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	68da      	ldr	r2, [r3, #12]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	f042 0201 	orr.w	r2, r2, #1
 80158ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	4a26      	ldr	r2, [pc, #152]	; (8015990 <HAL_TIM_Base_Start_IT+0xd0>)
 80158f6:	4293      	cmp	r3, r2
 80158f8:	d022      	beq.n	8015940 <HAL_TIM_Base_Start_IT+0x80>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015902:	d01d      	beq.n	8015940 <HAL_TIM_Base_Start_IT+0x80>
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	4a22      	ldr	r2, [pc, #136]	; (8015994 <HAL_TIM_Base_Start_IT+0xd4>)
 801590a:	4293      	cmp	r3, r2
 801590c:	d018      	beq.n	8015940 <HAL_TIM_Base_Start_IT+0x80>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	4a21      	ldr	r2, [pc, #132]	; (8015998 <HAL_TIM_Base_Start_IT+0xd8>)
 8015914:	4293      	cmp	r3, r2
 8015916:	d013      	beq.n	8015940 <HAL_TIM_Base_Start_IT+0x80>
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	4a1f      	ldr	r2, [pc, #124]	; (801599c <HAL_TIM_Base_Start_IT+0xdc>)
 801591e:	4293      	cmp	r3, r2
 8015920:	d00e      	beq.n	8015940 <HAL_TIM_Base_Start_IT+0x80>
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	4a1e      	ldr	r2, [pc, #120]	; (80159a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8015928:	4293      	cmp	r3, r2
 801592a:	d009      	beq.n	8015940 <HAL_TIM_Base_Start_IT+0x80>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	4a1c      	ldr	r2, [pc, #112]	; (80159a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8015932:	4293      	cmp	r3, r2
 8015934:	d004      	beq.n	8015940 <HAL_TIM_Base_Start_IT+0x80>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	4a1b      	ldr	r2, [pc, #108]	; (80159a8 <HAL_TIM_Base_Start_IT+0xe8>)
 801593c:	4293      	cmp	r3, r2
 801593e:	d115      	bne.n	801596c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	689a      	ldr	r2, [r3, #8]
 8015946:	4b19      	ldr	r3, [pc, #100]	; (80159ac <HAL_TIM_Base_Start_IT+0xec>)
 8015948:	4013      	ands	r3, r2
 801594a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2b06      	cmp	r3, #6
 8015950:	d015      	beq.n	801597e <HAL_TIM_Base_Start_IT+0xbe>
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015958:	d011      	beq.n	801597e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	f042 0201 	orr.w	r2, r2, #1
 8015968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801596a:	e008      	b.n	801597e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	f042 0201 	orr.w	r2, r2, #1
 801597a:	601a      	str	r2, [r3, #0]
 801597c:	e000      	b.n	8015980 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801597e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015980:	2300      	movs	r3, #0
}
 8015982:	4618      	mov	r0, r3
 8015984:	3714      	adds	r7, #20
 8015986:	46bd      	mov	sp, r7
 8015988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598c:	4770      	bx	lr
 801598e:	bf00      	nop
 8015990:	40010000 	.word	0x40010000
 8015994:	40000400 	.word	0x40000400
 8015998:	40000800 	.word	0x40000800
 801599c:	40000c00 	.word	0x40000c00
 80159a0:	40010400 	.word	0x40010400
 80159a4:	40001800 	.word	0x40001800
 80159a8:	40014000 	.word	0x40014000
 80159ac:	00010007 	.word	0x00010007

080159b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	691b      	ldr	r3, [r3, #16]
 80159be:	f003 0302 	and.w	r3, r3, #2
 80159c2:	2b02      	cmp	r3, #2
 80159c4:	d122      	bne.n	8015a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	f003 0302 	and.w	r3, r3, #2
 80159d0:	2b02      	cmp	r3, #2
 80159d2:	d11b      	bne.n	8015a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	f06f 0202 	mvn.w	r2, #2
 80159dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2201      	movs	r2, #1
 80159e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	699b      	ldr	r3, [r3, #24]
 80159ea:	f003 0303 	and.w	r3, r3, #3
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d003      	beq.n	80159fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f000 f9fe 	bl	8015df4 <HAL_TIM_IC_CaptureCallback>
 80159f8:	e005      	b.n	8015a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 f9f0 	bl	8015de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f000 fa01 	bl	8015e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	691b      	ldr	r3, [r3, #16]
 8015a12:	f003 0304 	and.w	r3, r3, #4
 8015a16:	2b04      	cmp	r3, #4
 8015a18:	d122      	bne.n	8015a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	f003 0304 	and.w	r3, r3, #4
 8015a24:	2b04      	cmp	r3, #4
 8015a26:	d11b      	bne.n	8015a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f06f 0204 	mvn.w	r2, #4
 8015a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2202      	movs	r2, #2
 8015a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	699b      	ldr	r3, [r3, #24]
 8015a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d003      	beq.n	8015a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f000 f9d4 	bl	8015df4 <HAL_TIM_IC_CaptureCallback>
 8015a4c:	e005      	b.n	8015a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	f000 f9c6 	bl	8015de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f000 f9d7 	bl	8015e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	691b      	ldr	r3, [r3, #16]
 8015a66:	f003 0308 	and.w	r3, r3, #8
 8015a6a:	2b08      	cmp	r3, #8
 8015a6c:	d122      	bne.n	8015ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	f003 0308 	and.w	r3, r3, #8
 8015a78:	2b08      	cmp	r3, #8
 8015a7a:	d11b      	bne.n	8015ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f06f 0208 	mvn.w	r2, #8
 8015a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2204      	movs	r2, #4
 8015a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	69db      	ldr	r3, [r3, #28]
 8015a92:	f003 0303 	and.w	r3, r3, #3
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d003      	beq.n	8015aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f000 f9aa 	bl	8015df4 <HAL_TIM_IC_CaptureCallback>
 8015aa0:	e005      	b.n	8015aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f000 f99c 	bl	8015de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f000 f9ad 	bl	8015e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	691b      	ldr	r3, [r3, #16]
 8015aba:	f003 0310 	and.w	r3, r3, #16
 8015abe:	2b10      	cmp	r3, #16
 8015ac0:	d122      	bne.n	8015b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	68db      	ldr	r3, [r3, #12]
 8015ac8:	f003 0310 	and.w	r3, r3, #16
 8015acc:	2b10      	cmp	r3, #16
 8015ace:	d11b      	bne.n	8015b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	f06f 0210 	mvn.w	r2, #16
 8015ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2208      	movs	r2, #8
 8015ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	69db      	ldr	r3, [r3, #28]
 8015ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d003      	beq.n	8015af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f000 f980 	bl	8015df4 <HAL_TIM_IC_CaptureCallback>
 8015af4:	e005      	b.n	8015b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f000 f972 	bl	8015de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f000 f983 	bl	8015e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2200      	movs	r2, #0
 8015b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	691b      	ldr	r3, [r3, #16]
 8015b0e:	f003 0301 	and.w	r3, r3, #1
 8015b12:	2b01      	cmp	r3, #1
 8015b14:	d10e      	bne.n	8015b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	68db      	ldr	r3, [r3, #12]
 8015b1c:	f003 0301 	and.w	r3, r3, #1
 8015b20:	2b01      	cmp	r3, #1
 8015b22:	d107      	bne.n	8015b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	f06f 0201 	mvn.w	r2, #1
 8015b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f7f5 f96a 	bl	800ae08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	691b      	ldr	r3, [r3, #16]
 8015b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b3e:	2b80      	cmp	r3, #128	; 0x80
 8015b40:	d10e      	bne.n	8015b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	68db      	ldr	r3, [r3, #12]
 8015b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b4c:	2b80      	cmp	r3, #128	; 0x80
 8015b4e:	d107      	bne.n	8015b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f000 fb38 	bl	80161d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	691b      	ldr	r3, [r3, #16]
 8015b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b6e:	d10e      	bne.n	8015b8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b7a:	2b80      	cmp	r3, #128	; 0x80
 8015b7c:	d107      	bne.n	8015b8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f000 fb2b 	bl	80161e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	691b      	ldr	r3, [r3, #16]
 8015b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b98:	2b40      	cmp	r3, #64	; 0x40
 8015b9a:	d10e      	bne.n	8015bba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	68db      	ldr	r3, [r3, #12]
 8015ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ba6:	2b40      	cmp	r3, #64	; 0x40
 8015ba8:	d107      	bne.n	8015bba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f000 f931 	bl	8015e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	691b      	ldr	r3, [r3, #16]
 8015bc0:	f003 0320 	and.w	r3, r3, #32
 8015bc4:	2b20      	cmp	r3, #32
 8015bc6:	d10e      	bne.n	8015be6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	f003 0320 	and.w	r3, r3, #32
 8015bd2:	2b20      	cmp	r3, #32
 8015bd4:	d107      	bne.n	8015be6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	f06f 0220 	mvn.w	r2, #32
 8015bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f000 faeb 	bl	80161bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015be6:	bf00      	nop
 8015be8:	3708      	adds	r7, #8
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
	...

08015bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d101      	bne.n	8015c0c <HAL_TIM_ConfigClockSource+0x1c>
 8015c08:	2302      	movs	r3, #2
 8015c0a:	e0dc      	b.n	8015dc6 <HAL_TIM_ConfigClockSource+0x1d6>
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2201      	movs	r2, #1
 8015c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	2202      	movs	r2, #2
 8015c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	689b      	ldr	r3, [r3, #8]
 8015c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015c24:	68ba      	ldr	r2, [r7, #8]
 8015c26:	4b6a      	ldr	r3, [pc, #424]	; (8015dd0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8015c28:	4013      	ands	r3, r2
 8015c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	68ba      	ldr	r2, [r7, #8]
 8015c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	4a64      	ldr	r2, [pc, #400]	; (8015dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8015c42:	4293      	cmp	r3, r2
 8015c44:	f000 80a9 	beq.w	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015c48:	4a62      	ldr	r2, [pc, #392]	; (8015dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	f200 80ae 	bhi.w	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015c50:	4a61      	ldr	r2, [pc, #388]	; (8015dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8015c52:	4293      	cmp	r3, r2
 8015c54:	f000 80a1 	beq.w	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015c58:	4a5f      	ldr	r2, [pc, #380]	; (8015dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	f200 80a6 	bhi.w	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015c60:	4a5e      	ldr	r2, [pc, #376]	; (8015ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8015c62:	4293      	cmp	r3, r2
 8015c64:	f000 8099 	beq.w	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015c68:	4a5c      	ldr	r2, [pc, #368]	; (8015ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8015c6a:	4293      	cmp	r3, r2
 8015c6c:	f200 809e 	bhi.w	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015c70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015c74:	f000 8091 	beq.w	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015c78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015c7c:	f200 8096 	bhi.w	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c84:	f000 8089 	beq.w	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c8c:	f200 808e 	bhi.w	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c94:	d03e      	beq.n	8015d14 <HAL_TIM_ConfigClockSource+0x124>
 8015c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c9a:	f200 8087 	bhi.w	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ca2:	f000 8086 	beq.w	8015db2 <HAL_TIM_ConfigClockSource+0x1c2>
 8015ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015caa:	d87f      	bhi.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015cac:	2b70      	cmp	r3, #112	; 0x70
 8015cae:	d01a      	beq.n	8015ce6 <HAL_TIM_ConfigClockSource+0xf6>
 8015cb0:	2b70      	cmp	r3, #112	; 0x70
 8015cb2:	d87b      	bhi.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015cb4:	2b60      	cmp	r3, #96	; 0x60
 8015cb6:	d050      	beq.n	8015d5a <HAL_TIM_ConfigClockSource+0x16a>
 8015cb8:	2b60      	cmp	r3, #96	; 0x60
 8015cba:	d877      	bhi.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015cbc:	2b50      	cmp	r3, #80	; 0x50
 8015cbe:	d03c      	beq.n	8015d3a <HAL_TIM_ConfigClockSource+0x14a>
 8015cc0:	2b50      	cmp	r3, #80	; 0x50
 8015cc2:	d873      	bhi.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015cc4:	2b40      	cmp	r3, #64	; 0x40
 8015cc6:	d058      	beq.n	8015d7a <HAL_TIM_ConfigClockSource+0x18a>
 8015cc8:	2b40      	cmp	r3, #64	; 0x40
 8015cca:	d86f      	bhi.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015ccc:	2b30      	cmp	r3, #48	; 0x30
 8015cce:	d064      	beq.n	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015cd0:	2b30      	cmp	r3, #48	; 0x30
 8015cd2:	d86b      	bhi.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015cd4:	2b20      	cmp	r3, #32
 8015cd6:	d060      	beq.n	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015cd8:	2b20      	cmp	r3, #32
 8015cda:	d867      	bhi.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d05c      	beq.n	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015ce0:	2b10      	cmp	r3, #16
 8015ce2:	d05a      	beq.n	8015d9a <HAL_TIM_ConfigClockSource+0x1aa>
 8015ce4:	e062      	b.n	8015dac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	6818      	ldr	r0, [r3, #0]
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	6899      	ldr	r1, [r3, #8]
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	685a      	ldr	r2, [r3, #4]
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	68db      	ldr	r3, [r3, #12]
 8015cf6:	f000 f9b3 	bl	8016060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	689b      	ldr	r3, [r3, #8]
 8015d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015d02:	68bb      	ldr	r3, [r7, #8]
 8015d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	68ba      	ldr	r2, [r7, #8]
 8015d10:	609a      	str	r2, [r3, #8]
      break;
 8015d12:	e04f      	b.n	8015db4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6818      	ldr	r0, [r3, #0]
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	6899      	ldr	r1, [r3, #8]
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	685a      	ldr	r2, [r3, #4]
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	f000 f99c 	bl	8016060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	689a      	ldr	r2, [r3, #8]
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015d36:	609a      	str	r2, [r3, #8]
      break;
 8015d38:	e03c      	b.n	8015db4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6818      	ldr	r0, [r3, #0]
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	6859      	ldr	r1, [r3, #4]
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	68db      	ldr	r3, [r3, #12]
 8015d46:	461a      	mov	r2, r3
 8015d48:	f000 f90c 	bl	8015f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	2150      	movs	r1, #80	; 0x50
 8015d52:	4618      	mov	r0, r3
 8015d54:	f000 f966 	bl	8016024 <TIM_ITRx_SetConfig>
      break;
 8015d58:	e02c      	b.n	8015db4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6818      	ldr	r0, [r3, #0]
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	6859      	ldr	r1, [r3, #4]
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	461a      	mov	r2, r3
 8015d68:	f000 f92b 	bl	8015fc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	2160      	movs	r1, #96	; 0x60
 8015d72:	4618      	mov	r0, r3
 8015d74:	f000 f956 	bl	8016024 <TIM_ITRx_SetConfig>
      break;
 8015d78:	e01c      	b.n	8015db4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6818      	ldr	r0, [r3, #0]
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	6859      	ldr	r1, [r3, #4]
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	461a      	mov	r2, r3
 8015d88:	f000 f8ec 	bl	8015f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2140      	movs	r1, #64	; 0x40
 8015d92:	4618      	mov	r0, r3
 8015d94:	f000 f946 	bl	8016024 <TIM_ITRx_SetConfig>
      break;
 8015d98:	e00c      	b.n	8015db4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	4619      	mov	r1, r3
 8015da4:	4610      	mov	r0, r2
 8015da6:	f000 f93d 	bl	8016024 <TIM_ITRx_SetConfig>
      break;
 8015daa:	e003      	b.n	8015db4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8015dac:	2301      	movs	r3, #1
 8015dae:	73fb      	strb	r3, [r7, #15]
      break;
 8015db0:	e000      	b.n	8015db4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8015db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2201      	movs	r2, #1
 8015db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3710      	adds	r7, #16
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
 8015dce:	bf00      	nop
 8015dd0:	ffceff88 	.word	0xffceff88
 8015dd4:	00100040 	.word	0x00100040
 8015dd8:	00100030 	.word	0x00100030
 8015ddc:	00100020 	.word	0x00100020

08015de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015de0:	b480      	push	{r7}
 8015de2:	b083      	sub	sp, #12
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015de8:	bf00      	nop
 8015dea:	370c      	adds	r7, #12
 8015dec:	46bd      	mov	sp, r7
 8015dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df2:	4770      	bx	lr

08015df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015df4:	b480      	push	{r7}
 8015df6:	b083      	sub	sp, #12
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015dfc:	bf00      	nop
 8015dfe:	370c      	adds	r7, #12
 8015e00:	46bd      	mov	sp, r7
 8015e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e06:	4770      	bx	lr

08015e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015e08:	b480      	push	{r7}
 8015e0a:	b083      	sub	sp, #12
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015e10:	bf00      	nop
 8015e12:	370c      	adds	r7, #12
 8015e14:	46bd      	mov	sp, r7
 8015e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1a:	4770      	bx	lr

08015e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015e1c:	b480      	push	{r7}
 8015e1e:	b083      	sub	sp, #12
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015e24:	bf00      	nop
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr

08015e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015e30:	b480      	push	{r7}
 8015e32:	b085      	sub	sp, #20
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	4a40      	ldr	r2, [pc, #256]	; (8015f44 <TIM_Base_SetConfig+0x114>)
 8015e44:	4293      	cmp	r3, r2
 8015e46:	d013      	beq.n	8015e70 <TIM_Base_SetConfig+0x40>
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015e4e:	d00f      	beq.n	8015e70 <TIM_Base_SetConfig+0x40>
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	4a3d      	ldr	r2, [pc, #244]	; (8015f48 <TIM_Base_SetConfig+0x118>)
 8015e54:	4293      	cmp	r3, r2
 8015e56:	d00b      	beq.n	8015e70 <TIM_Base_SetConfig+0x40>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	4a3c      	ldr	r2, [pc, #240]	; (8015f4c <TIM_Base_SetConfig+0x11c>)
 8015e5c:	4293      	cmp	r3, r2
 8015e5e:	d007      	beq.n	8015e70 <TIM_Base_SetConfig+0x40>
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	4a3b      	ldr	r2, [pc, #236]	; (8015f50 <TIM_Base_SetConfig+0x120>)
 8015e64:	4293      	cmp	r3, r2
 8015e66:	d003      	beq.n	8015e70 <TIM_Base_SetConfig+0x40>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	4a3a      	ldr	r2, [pc, #232]	; (8015f54 <TIM_Base_SetConfig+0x124>)
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	d108      	bne.n	8015e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	68fa      	ldr	r2, [r7, #12]
 8015e7e:	4313      	orrs	r3, r2
 8015e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	4a2f      	ldr	r2, [pc, #188]	; (8015f44 <TIM_Base_SetConfig+0x114>)
 8015e86:	4293      	cmp	r3, r2
 8015e88:	d01f      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015e90:	d01b      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	4a2c      	ldr	r2, [pc, #176]	; (8015f48 <TIM_Base_SetConfig+0x118>)
 8015e96:	4293      	cmp	r3, r2
 8015e98:	d017      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	4a2b      	ldr	r2, [pc, #172]	; (8015f4c <TIM_Base_SetConfig+0x11c>)
 8015e9e:	4293      	cmp	r3, r2
 8015ea0:	d013      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	4a2a      	ldr	r2, [pc, #168]	; (8015f50 <TIM_Base_SetConfig+0x120>)
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	d00f      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	4a29      	ldr	r2, [pc, #164]	; (8015f54 <TIM_Base_SetConfig+0x124>)
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	d00b      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	4a28      	ldr	r2, [pc, #160]	; (8015f58 <TIM_Base_SetConfig+0x128>)
 8015eb6:	4293      	cmp	r3, r2
 8015eb8:	d007      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	4a27      	ldr	r2, [pc, #156]	; (8015f5c <TIM_Base_SetConfig+0x12c>)
 8015ebe:	4293      	cmp	r3, r2
 8015ec0:	d003      	beq.n	8015eca <TIM_Base_SetConfig+0x9a>
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	4a26      	ldr	r2, [pc, #152]	; (8015f60 <TIM_Base_SetConfig+0x130>)
 8015ec6:	4293      	cmp	r3, r2
 8015ec8:	d108      	bne.n	8015edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	68fa      	ldr	r2, [r7, #12]
 8015ed8:	4313      	orrs	r3, r2
 8015eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	695b      	ldr	r3, [r3, #20]
 8015ee6:	4313      	orrs	r3, r2
 8015ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	689a      	ldr	r2, [r3, #8]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	681a      	ldr	r2, [r3, #0]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	4a10      	ldr	r2, [pc, #64]	; (8015f44 <TIM_Base_SetConfig+0x114>)
 8015f04:	4293      	cmp	r3, r2
 8015f06:	d00f      	beq.n	8015f28 <TIM_Base_SetConfig+0xf8>
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	4a12      	ldr	r2, [pc, #72]	; (8015f54 <TIM_Base_SetConfig+0x124>)
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d00b      	beq.n	8015f28 <TIM_Base_SetConfig+0xf8>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	4a11      	ldr	r2, [pc, #68]	; (8015f58 <TIM_Base_SetConfig+0x128>)
 8015f14:	4293      	cmp	r3, r2
 8015f16:	d007      	beq.n	8015f28 <TIM_Base_SetConfig+0xf8>
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	4a10      	ldr	r2, [pc, #64]	; (8015f5c <TIM_Base_SetConfig+0x12c>)
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	d003      	beq.n	8015f28 <TIM_Base_SetConfig+0xf8>
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	4a0f      	ldr	r2, [pc, #60]	; (8015f60 <TIM_Base_SetConfig+0x130>)
 8015f24:	4293      	cmp	r3, r2
 8015f26:	d103      	bne.n	8015f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	691a      	ldr	r2, [r3, #16]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2201      	movs	r2, #1
 8015f34:	615a      	str	r2, [r3, #20]
}
 8015f36:	bf00      	nop
 8015f38:	3714      	adds	r7, #20
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	40010000 	.word	0x40010000
 8015f48:	40000400 	.word	0x40000400
 8015f4c:	40000800 	.word	0x40000800
 8015f50:	40000c00 	.word	0x40000c00
 8015f54:	40010400 	.word	0x40010400
 8015f58:	40014000 	.word	0x40014000
 8015f5c:	40014400 	.word	0x40014400
 8015f60:	40014800 	.word	0x40014800

08015f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015f64:	b480      	push	{r7}
 8015f66:	b087      	sub	sp, #28
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
 8015f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	6a1b      	ldr	r3, [r3, #32]
 8015f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	6a1b      	ldr	r3, [r3, #32]
 8015f7a:	f023 0201 	bic.w	r2, r3, #1
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	699b      	ldr	r3, [r3, #24]
 8015f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	011b      	lsls	r3, r3, #4
 8015f94:	693a      	ldr	r2, [r7, #16]
 8015f96:	4313      	orrs	r3, r2
 8015f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015f9a:	697b      	ldr	r3, [r7, #20]
 8015f9c:	f023 030a 	bic.w	r3, r3, #10
 8015fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015fa2:	697a      	ldr	r2, [r7, #20]
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	4313      	orrs	r3, r2
 8015fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	693a      	ldr	r2, [r7, #16]
 8015fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	697a      	ldr	r2, [r7, #20]
 8015fb4:	621a      	str	r2, [r3, #32]
}
 8015fb6:	bf00      	nop
 8015fb8:	371c      	adds	r7, #28
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr

08015fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015fc2:	b480      	push	{r7}
 8015fc4:	b087      	sub	sp, #28
 8015fc6:	af00      	add	r7, sp, #0
 8015fc8:	60f8      	str	r0, [r7, #12]
 8015fca:	60b9      	str	r1, [r7, #8]
 8015fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	6a1b      	ldr	r3, [r3, #32]
 8015fd2:	f023 0210 	bic.w	r2, r3, #16
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	699b      	ldr	r3, [r3, #24]
 8015fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	6a1b      	ldr	r3, [r3, #32]
 8015fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	031b      	lsls	r3, r3, #12
 8015ff2:	697a      	ldr	r2, [r7, #20]
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	011b      	lsls	r3, r3, #4
 8016004:	693a      	ldr	r2, [r7, #16]
 8016006:	4313      	orrs	r3, r2
 8016008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	697a      	ldr	r2, [r7, #20]
 801600e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	693a      	ldr	r2, [r7, #16]
 8016014:	621a      	str	r2, [r3, #32]
}
 8016016:	bf00      	nop
 8016018:	371c      	adds	r7, #28
 801601a:	46bd      	mov	sp, r7
 801601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016020:	4770      	bx	lr
	...

08016024 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8016024:	b480      	push	{r7}
 8016026:	b085      	sub	sp, #20
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	689b      	ldr	r3, [r3, #8]
 8016032:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016034:	68fa      	ldr	r2, [r7, #12]
 8016036:	4b09      	ldr	r3, [pc, #36]	; (801605c <TIM_ITRx_SetConfig+0x38>)
 8016038:	4013      	ands	r3, r2
 801603a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801603c:	683a      	ldr	r2, [r7, #0]
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	4313      	orrs	r3, r2
 8016042:	f043 0307 	orr.w	r3, r3, #7
 8016046:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	68fa      	ldr	r2, [r7, #12]
 801604c:	609a      	str	r2, [r3, #8]
}
 801604e:	bf00      	nop
 8016050:	3714      	adds	r7, #20
 8016052:	46bd      	mov	sp, r7
 8016054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016058:	4770      	bx	lr
 801605a:	bf00      	nop
 801605c:	ffcfff8f 	.word	0xffcfff8f

08016060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016060:	b480      	push	{r7}
 8016062:	b087      	sub	sp, #28
 8016064:	af00      	add	r7, sp, #0
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	60b9      	str	r1, [r7, #8]
 801606a:	607a      	str	r2, [r7, #4]
 801606c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	689b      	ldr	r3, [r3, #8]
 8016072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801607a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	021a      	lsls	r2, r3, #8
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	431a      	orrs	r2, r3
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	4313      	orrs	r3, r2
 8016088:	697a      	ldr	r2, [r7, #20]
 801608a:	4313      	orrs	r3, r2
 801608c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	697a      	ldr	r2, [r7, #20]
 8016092:	609a      	str	r2, [r3, #8]
}
 8016094:	bf00      	nop
 8016096:	371c      	adds	r7, #28
 8016098:	46bd      	mov	sp, r7
 801609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609e:	4770      	bx	lr

080160a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80160a0:	b480      	push	{r7}
 80160a2:	b085      	sub	sp, #20
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80160b0:	2b01      	cmp	r3, #1
 80160b2:	d101      	bne.n	80160b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80160b4:	2302      	movs	r3, #2
 80160b6:	e06d      	b.n	8016194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2201      	movs	r2, #1
 80160bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2202      	movs	r2, #2
 80160c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	689b      	ldr	r3, [r3, #8]
 80160d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	4a30      	ldr	r2, [pc, #192]	; (80161a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80160de:	4293      	cmp	r3, r2
 80160e0:	d004      	beq.n	80160ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	4a2f      	ldr	r2, [pc, #188]	; (80161a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80160e8:	4293      	cmp	r3, r2
 80160ea:	d108      	bne.n	80160fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80160f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	685b      	ldr	r3, [r3, #4]
 80160f8:	68fa      	ldr	r2, [r7, #12]
 80160fa:	4313      	orrs	r3, r2
 80160fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016104:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	68fa      	ldr	r2, [r7, #12]
 801610c:	4313      	orrs	r3, r2
 801610e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	68fa      	ldr	r2, [r7, #12]
 8016116:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	4a20      	ldr	r2, [pc, #128]	; (80161a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801611e:	4293      	cmp	r3, r2
 8016120:	d022      	beq.n	8016168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801612a:	d01d      	beq.n	8016168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	4a1d      	ldr	r2, [pc, #116]	; (80161a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8016132:	4293      	cmp	r3, r2
 8016134:	d018      	beq.n	8016168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	4a1c      	ldr	r2, [pc, #112]	; (80161ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801613c:	4293      	cmp	r3, r2
 801613e:	d013      	beq.n	8016168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	4a1a      	ldr	r2, [pc, #104]	; (80161b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8016146:	4293      	cmp	r3, r2
 8016148:	d00e      	beq.n	8016168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	4a15      	ldr	r2, [pc, #84]	; (80161a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016150:	4293      	cmp	r3, r2
 8016152:	d009      	beq.n	8016168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	4a16      	ldr	r2, [pc, #88]	; (80161b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801615a:	4293      	cmp	r3, r2
 801615c:	d004      	beq.n	8016168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	4a15      	ldr	r2, [pc, #84]	; (80161b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8016164:	4293      	cmp	r3, r2
 8016166:	d10c      	bne.n	8016182 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801616e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	689b      	ldr	r3, [r3, #8]
 8016174:	68ba      	ldr	r2, [r7, #8]
 8016176:	4313      	orrs	r3, r2
 8016178:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	68ba      	ldr	r2, [r7, #8]
 8016180:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2201      	movs	r2, #1
 8016186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2200      	movs	r2, #0
 801618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016192:	2300      	movs	r3, #0
}
 8016194:	4618      	mov	r0, r3
 8016196:	3714      	adds	r7, #20
 8016198:	46bd      	mov	sp, r7
 801619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619e:	4770      	bx	lr
 80161a0:	40010000 	.word	0x40010000
 80161a4:	40010400 	.word	0x40010400
 80161a8:	40000400 	.word	0x40000400
 80161ac:	40000800 	.word	0x40000800
 80161b0:	40000c00 	.word	0x40000c00
 80161b4:	40001800 	.word	0x40001800
 80161b8:	40014000 	.word	0x40014000

080161bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80161bc:	b480      	push	{r7}
 80161be:	b083      	sub	sp, #12
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80161c4:	bf00      	nop
 80161c6:	370c      	adds	r7, #12
 80161c8:	46bd      	mov	sp, r7
 80161ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ce:	4770      	bx	lr

080161d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80161d0:	b480      	push	{r7}
 80161d2:	b083      	sub	sp, #12
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80161d8:	bf00      	nop
 80161da:	370c      	adds	r7, #12
 80161dc:	46bd      	mov	sp, r7
 80161de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e2:	4770      	bx	lr

080161e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80161e4:	b480      	push	{r7}
 80161e6:	b083      	sub	sp, #12
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80161ec:	bf00      	nop
 80161ee:	370c      	adds	r7, #12
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr

080161f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d101      	bne.n	801620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016206:	2301      	movs	r3, #1
 8016208:	e042      	b.n	8016290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016210:	2b00      	cmp	r3, #0
 8016212:	d106      	bne.n	8016222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f7f5 fc65 	bl	800baec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2224      	movs	r2, #36	; 0x24
 8016226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f022 0201 	bic.w	r2, r2, #1
 8016238:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f000 fda0 	bl	8016d80 <UART_SetConfig>
 8016240:	4603      	mov	r3, r0
 8016242:	2b01      	cmp	r3, #1
 8016244:	d101      	bne.n	801624a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8016246:	2301      	movs	r3, #1
 8016248:	e022      	b.n	8016290 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801624e:	2b00      	cmp	r3, #0
 8016250:	d002      	beq.n	8016258 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f001 fafc 	bl	8017850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	685a      	ldr	r2, [r3, #4]
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	689a      	ldr	r2, [r3, #8]
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	f042 0201 	orr.w	r2, r2, #1
 8016286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f001 fb83 	bl	8017994 <UART_CheckIdleState>
 801628e:	4603      	mov	r3, r0
}
 8016290:	4618      	mov	r0, r3
 8016292:	3708      	adds	r7, #8
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}

08016298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b08a      	sub	sp, #40	; 0x28
 801629c:	af02      	add	r7, sp, #8
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	603b      	str	r3, [r7, #0]
 80162a4:	4613      	mov	r3, r2
 80162a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80162ae:	2b20      	cmp	r3, #32
 80162b0:	f040 8083 	bne.w	80163ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d002      	beq.n	80162c0 <HAL_UART_Transmit+0x28>
 80162ba:	88fb      	ldrh	r3, [r7, #6]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d101      	bne.n	80162c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80162c0:	2301      	movs	r3, #1
 80162c2:	e07b      	b.n	80163bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d101      	bne.n	80162d2 <HAL_UART_Transmit+0x3a>
 80162ce:	2302      	movs	r3, #2
 80162d0:	e074      	b.n	80163bc <HAL_UART_Transmit+0x124>
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	2201      	movs	r2, #1
 80162d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2200      	movs	r2, #0
 80162de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	2221      	movs	r2, #33	; 0x21
 80162e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80162ea:	f7f5 fe5b 	bl	800bfa4 <HAL_GetTick>
 80162ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	88fa      	ldrh	r2, [r7, #6]
 80162f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	88fa      	ldrh	r2, [r7, #6]
 80162fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	689b      	ldr	r3, [r3, #8]
 8016304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016308:	d108      	bne.n	801631c <HAL_UART_Transmit+0x84>
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	691b      	ldr	r3, [r3, #16]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d104      	bne.n	801631c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8016312:	2300      	movs	r3, #0
 8016314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	61bb      	str	r3, [r7, #24]
 801631a:	e003      	b.n	8016324 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016320:	2300      	movs	r3, #0
 8016322:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	2200      	movs	r2, #0
 8016328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801632c:	e02c      	b.n	8016388 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801632e:	683b      	ldr	r3, [r7, #0]
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	697b      	ldr	r3, [r7, #20]
 8016334:	2200      	movs	r2, #0
 8016336:	2180      	movs	r1, #128	; 0x80
 8016338:	68f8      	ldr	r0, [r7, #12]
 801633a:	f001 fb76 	bl	8017a2a <UART_WaitOnFlagUntilTimeout>
 801633e:	4603      	mov	r3, r0
 8016340:	2b00      	cmp	r3, #0
 8016342:	d001      	beq.n	8016348 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8016344:	2303      	movs	r3, #3
 8016346:	e039      	b.n	80163bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d10b      	bne.n	8016366 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801634e:	69bb      	ldr	r3, [r7, #24]
 8016350:	881b      	ldrh	r3, [r3, #0]
 8016352:	461a      	mov	r2, r3
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801635c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801635e:	69bb      	ldr	r3, [r7, #24]
 8016360:	3302      	adds	r3, #2
 8016362:	61bb      	str	r3, [r7, #24]
 8016364:	e007      	b.n	8016376 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016366:	69fb      	ldr	r3, [r7, #28]
 8016368:	781a      	ldrb	r2, [r3, #0]
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8016370:	69fb      	ldr	r3, [r7, #28]
 8016372:	3301      	adds	r3, #1
 8016374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801637c:	b29b      	uxth	r3, r3
 801637e:	3b01      	subs	r3, #1
 8016380:	b29a      	uxth	r2, r3
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801638e:	b29b      	uxth	r3, r3
 8016390:	2b00      	cmp	r3, #0
 8016392:	d1cc      	bne.n	801632e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	9300      	str	r3, [sp, #0]
 8016398:	697b      	ldr	r3, [r7, #20]
 801639a:	2200      	movs	r2, #0
 801639c:	2140      	movs	r1, #64	; 0x40
 801639e:	68f8      	ldr	r0, [r7, #12]
 80163a0:	f001 fb43 	bl	8017a2a <UART_WaitOnFlagUntilTimeout>
 80163a4:	4603      	mov	r3, r0
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d001      	beq.n	80163ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80163aa:	2303      	movs	r3, #3
 80163ac:	e006      	b.n	80163bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	2220      	movs	r2, #32
 80163b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80163b6:	2300      	movs	r3, #0
 80163b8:	e000      	b.n	80163bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80163ba:	2302      	movs	r3, #2
  }
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3720      	adds	r7, #32
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b08a      	sub	sp, #40	; 0x28
 80163c8:	af02      	add	r7, sp, #8
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	603b      	str	r3, [r7, #0]
 80163d0:	4613      	mov	r3, r2
 80163d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80163da:	2b20      	cmp	r3, #32
 80163dc:	f040 80c0 	bne.w	8016560 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d002      	beq.n	80163ec <HAL_UART_Receive+0x28>
 80163e6:	88fb      	ldrh	r3, [r7, #6]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d101      	bne.n	80163f0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80163ec:	2301      	movs	r3, #1
 80163ee:	e0b8      	b.n	8016562 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80163f6:	2b01      	cmp	r3, #1
 80163f8:	d101      	bne.n	80163fe <HAL_UART_Receive+0x3a>
 80163fa:	2302      	movs	r3, #2
 80163fc:	e0b1      	b.n	8016562 <HAL_UART_Receive+0x19e>
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	2201      	movs	r2, #1
 8016402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2200      	movs	r2, #0
 801640a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2222      	movs	r2, #34	; 0x22
 8016412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2200      	movs	r2, #0
 801641a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801641c:	f7f5 fdc2 	bl	800bfa4 <HAL_GetTick>
 8016420:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	88fa      	ldrh	r2, [r7, #6]
 8016426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	88fa      	ldrh	r2, [r7, #6]
 801642e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	689b      	ldr	r3, [r3, #8]
 8016436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801643a:	d10e      	bne.n	801645a <HAL_UART_Receive+0x96>
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	691b      	ldr	r3, [r3, #16]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d105      	bne.n	8016450 <HAL_UART_Receive+0x8c>
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	f240 12ff 	movw	r2, #511	; 0x1ff
 801644a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801644e:	e02d      	b.n	80164ac <HAL_UART_Receive+0xe8>
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	22ff      	movs	r2, #255	; 0xff
 8016454:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016458:	e028      	b.n	80164ac <HAL_UART_Receive+0xe8>
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	689b      	ldr	r3, [r3, #8]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d10d      	bne.n	801647e <HAL_UART_Receive+0xba>
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	691b      	ldr	r3, [r3, #16]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d104      	bne.n	8016474 <HAL_UART_Receive+0xb0>
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	22ff      	movs	r2, #255	; 0xff
 801646e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016472:	e01b      	b.n	80164ac <HAL_UART_Receive+0xe8>
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	227f      	movs	r2, #127	; 0x7f
 8016478:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801647c:	e016      	b.n	80164ac <HAL_UART_Receive+0xe8>
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	689b      	ldr	r3, [r3, #8]
 8016482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016486:	d10d      	bne.n	80164a4 <HAL_UART_Receive+0xe0>
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	691b      	ldr	r3, [r3, #16]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d104      	bne.n	801649a <HAL_UART_Receive+0xd6>
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	227f      	movs	r2, #127	; 0x7f
 8016494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016498:	e008      	b.n	80164ac <HAL_UART_Receive+0xe8>
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	223f      	movs	r2, #63	; 0x3f
 801649e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80164a2:	e003      	b.n	80164ac <HAL_UART_Receive+0xe8>
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	2200      	movs	r2, #0
 80164a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164b2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	689b      	ldr	r3, [r3, #8]
 80164b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164bc:	d108      	bne.n	80164d0 <HAL_UART_Receive+0x10c>
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	691b      	ldr	r3, [r3, #16]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d104      	bne.n	80164d0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80164c6:	2300      	movs	r3, #0
 80164c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	61bb      	str	r3, [r7, #24]
 80164ce:	e003      	b.n	80164d8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80164d4:	2300      	movs	r3, #0
 80164d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2200      	movs	r2, #0
 80164dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80164e0:	e032      	b.n	8016548 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	9300      	str	r3, [sp, #0]
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	2200      	movs	r2, #0
 80164ea:	2120      	movs	r1, #32
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	f001 fa9c 	bl	8017a2a <UART_WaitOnFlagUntilTimeout>
 80164f2:	4603      	mov	r3, r0
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d001      	beq.n	80164fc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80164f8:	2303      	movs	r3, #3
 80164fa:	e032      	b.n	8016562 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d10c      	bne.n	801651c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016508:	b29a      	uxth	r2, r3
 801650a:	8a7b      	ldrh	r3, [r7, #18]
 801650c:	4013      	ands	r3, r2
 801650e:	b29a      	uxth	r2, r3
 8016510:	69bb      	ldr	r3, [r7, #24]
 8016512:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	3302      	adds	r3, #2
 8016518:	61bb      	str	r3, [r7, #24]
 801651a:	e00c      	b.n	8016536 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016522:	b2da      	uxtb	r2, r3
 8016524:	8a7b      	ldrh	r3, [r7, #18]
 8016526:	b2db      	uxtb	r3, r3
 8016528:	4013      	ands	r3, r2
 801652a:	b2da      	uxtb	r2, r3
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8016530:	69fb      	ldr	r3, [r7, #28]
 8016532:	3301      	adds	r3, #1
 8016534:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801653c:	b29b      	uxth	r3, r3
 801653e:	3b01      	subs	r3, #1
 8016540:	b29a      	uxth	r2, r3
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801654e:	b29b      	uxth	r3, r3
 8016550:	2b00      	cmp	r3, #0
 8016552:	d1c6      	bne.n	80164e2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2220      	movs	r2, #32
 8016558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801655c:	2300      	movs	r3, #0
 801655e:	e000      	b.n	8016562 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8016560:	2302      	movs	r3, #2
  }
}
 8016562:	4618      	mov	r0, r3
 8016564:	3720      	adds	r7, #32
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
	...

0801656c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b08a      	sub	sp, #40	; 0x28
 8016570:	af00      	add	r7, sp, #0
 8016572:	60f8      	str	r0, [r7, #12]
 8016574:	60b9      	str	r1, [r7, #8]
 8016576:	4613      	mov	r3, r2
 8016578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016580:	2b20      	cmp	r3, #32
 8016582:	d142      	bne.n	801660a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d002      	beq.n	8016590 <HAL_UART_Receive_IT+0x24>
 801658a:	88fb      	ldrh	r3, [r7, #6]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d101      	bne.n	8016594 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8016590:	2301      	movs	r3, #1
 8016592:	e03b      	b.n	801660c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801659a:	2b01      	cmp	r3, #1
 801659c:	d101      	bne.n	80165a2 <HAL_UART_Receive_IT+0x36>
 801659e:	2302      	movs	r3, #2
 80165a0:	e034      	b.n	801660c <HAL_UART_Receive_IT+0xa0>
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2201      	movs	r2, #1
 80165a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2200      	movs	r2, #0
 80165ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	4a17      	ldr	r2, [pc, #92]	; (8016614 <HAL_UART_Receive_IT+0xa8>)
 80165b6:	4293      	cmp	r3, r2
 80165b8:	d01f      	beq.n	80165fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d018      	beq.n	80165fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	e853 3f00 	ldrex	r3, [r3]
 80165d4:	613b      	str	r3, [r7, #16]
   return(result);
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80165dc:	627b      	str	r3, [r7, #36]	; 0x24
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	461a      	mov	r2, r3
 80165e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e6:	623b      	str	r3, [r7, #32]
 80165e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165ea:	69f9      	ldr	r1, [r7, #28]
 80165ec:	6a3a      	ldr	r2, [r7, #32]
 80165ee:	e841 2300 	strex	r3, r2, [r1]
 80165f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80165f4:	69bb      	ldr	r3, [r7, #24]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d1e6      	bne.n	80165c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80165fa:	88fb      	ldrh	r3, [r7, #6]
 80165fc:	461a      	mov	r2, r3
 80165fe:	68b9      	ldr	r1, [r7, #8]
 8016600:	68f8      	ldr	r0, [r7, #12]
 8016602:	f001 fadb 	bl	8017bbc <UART_Start_Receive_IT>
 8016606:	4603      	mov	r3, r0
 8016608:	e000      	b.n	801660c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801660a:	2302      	movs	r3, #2
  }
}
 801660c:	4618      	mov	r0, r3
 801660e:	3728      	adds	r7, #40	; 0x28
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}
 8016614:	58000c00 	.word	0x58000c00

08016618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b0ba      	sub	sp, #232	; 0xe8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	69db      	ldr	r3, [r3, #28]
 8016626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	689b      	ldr	r3, [r3, #8]
 801663a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801663e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016642:	f640 030f 	movw	r3, #2063	; 0x80f
 8016646:	4013      	ands	r3, r2
 8016648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801664c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016650:	2b00      	cmp	r3, #0
 8016652:	d11b      	bne.n	801668c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016658:	f003 0320 	and.w	r3, r3, #32
 801665c:	2b00      	cmp	r3, #0
 801665e:	d015      	beq.n	801668c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016664:	f003 0320 	and.w	r3, r3, #32
 8016668:	2b00      	cmp	r3, #0
 801666a:	d105      	bne.n	8016678 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801666c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016674:	2b00      	cmp	r3, #0
 8016676:	d009      	beq.n	801668c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801667c:	2b00      	cmp	r3, #0
 801667e:	f000 835a 	beq.w	8016d36 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	4798      	blx	r3
      }
      return;
 801668a:	e354      	b.n	8016d36 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801668c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016690:	2b00      	cmp	r3, #0
 8016692:	f000 811f 	beq.w	80168d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8016696:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801669a:	4b8b      	ldr	r3, [pc, #556]	; (80168c8 <HAL_UART_IRQHandler+0x2b0>)
 801669c:	4013      	ands	r3, r2
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d106      	bne.n	80166b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80166a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80166a6:	4b89      	ldr	r3, [pc, #548]	; (80168cc <HAL_UART_IRQHandler+0x2b4>)
 80166a8:	4013      	ands	r3, r2
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	f000 8112 	beq.w	80168d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80166b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166b4:	f003 0301 	and.w	r3, r3, #1
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d011      	beq.n	80166e0 <HAL_UART_IRQHandler+0xc8>
 80166bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d00b      	beq.n	80166e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2201      	movs	r2, #1
 80166ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80166d6:	f043 0201 	orr.w	r2, r3, #1
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80166e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166e4:	f003 0302 	and.w	r3, r3, #2
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d011      	beq.n	8016710 <HAL_UART_IRQHandler+0xf8>
 80166ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80166f0:	f003 0301 	and.w	r3, r3, #1
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d00b      	beq.n	8016710 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	2202      	movs	r2, #2
 80166fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016706:	f043 0204 	orr.w	r2, r3, #4
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016714:	f003 0304 	and.w	r3, r3, #4
 8016718:	2b00      	cmp	r3, #0
 801671a:	d011      	beq.n	8016740 <HAL_UART_IRQHandler+0x128>
 801671c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016720:	f003 0301 	and.w	r3, r3, #1
 8016724:	2b00      	cmp	r3, #0
 8016726:	d00b      	beq.n	8016740 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2204      	movs	r2, #4
 801672e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016736:	f043 0202 	orr.w	r2, r3, #2
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016744:	f003 0308 	and.w	r3, r3, #8
 8016748:	2b00      	cmp	r3, #0
 801674a:	d017      	beq.n	801677c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016750:	f003 0320 	and.w	r3, r3, #32
 8016754:	2b00      	cmp	r3, #0
 8016756:	d105      	bne.n	8016764 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8016758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801675c:	4b5a      	ldr	r3, [pc, #360]	; (80168c8 <HAL_UART_IRQHandler+0x2b0>)
 801675e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8016760:	2b00      	cmp	r3, #0
 8016762:	d00b      	beq.n	801677c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	2208      	movs	r2, #8
 801676a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016772:	f043 0208 	orr.w	r2, r3, #8
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016784:	2b00      	cmp	r3, #0
 8016786:	d012      	beq.n	80167ae <HAL_UART_IRQHandler+0x196>
 8016788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801678c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016790:	2b00      	cmp	r3, #0
 8016792:	d00c      	beq.n	80167ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801679c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80167a4:	f043 0220 	orr.w	r2, r3, #32
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	f000 82c0 	beq.w	8016d3a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80167ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167be:	f003 0320 	and.w	r3, r3, #32
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d013      	beq.n	80167ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80167c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80167ca:	f003 0320 	and.w	r3, r3, #32
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d105      	bne.n	80167de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80167d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80167d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d007      	beq.n	80167ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d003      	beq.n	80167ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80167f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	689b      	ldr	r3, [r3, #8]
 80167fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016802:	2b40      	cmp	r3, #64	; 0x40
 8016804:	d005      	beq.n	8016812 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801680a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801680e:	2b00      	cmp	r3, #0
 8016810:	d04f      	beq.n	80168b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f001 fafc 	bl	8017e10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016822:	2b40      	cmp	r3, #64	; 0x40
 8016824:	d141      	bne.n	80168aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	3308      	adds	r3, #8
 801682c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016834:	e853 3f00 	ldrex	r3, [r3]
 8016838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801683c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	3308      	adds	r3, #8
 801684e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801685a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801685e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016862:	e841 2300 	strex	r3, r2, [r1]
 8016866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801686a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801686e:	2b00      	cmp	r3, #0
 8016870:	d1d9      	bne.n	8016826 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016876:	2b00      	cmp	r3, #0
 8016878:	d013      	beq.n	80168a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801687e:	4a14      	ldr	r2, [pc, #80]	; (80168d0 <HAL_UART_IRQHandler+0x2b8>)
 8016880:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016886:	4618      	mov	r0, r3
 8016888:	f7f7 f96c 	bl	800db64 <HAL_DMA_Abort_IT>
 801688c:	4603      	mov	r3, r0
 801688e:	2b00      	cmp	r3, #0
 8016890:	d017      	beq.n	80168c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016898:	687a      	ldr	r2, [r7, #4]
 801689a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801689c:	4610      	mov	r0, r2
 801689e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168a0:	e00f      	b.n	80168c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f000 fa56 	bl	8016d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168a8:	e00b      	b.n	80168c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f000 fa52 	bl	8016d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168b0:	e007      	b.n	80168c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f000 fa4e 	bl	8016d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2200      	movs	r2, #0
 80168bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80168c0:	e23b      	b.n	8016d3a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168c2:	bf00      	nop
    return;
 80168c4:	e239      	b.n	8016d3a <HAL_UART_IRQHandler+0x722>
 80168c6:	bf00      	nop
 80168c8:	10000001 	.word	0x10000001
 80168cc:	04000120 	.word	0x04000120
 80168d0:	08017edd 	.word	0x08017edd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168d8:	2b01      	cmp	r3, #1
 80168da:	f040 81ce 	bne.w	8016c7a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80168de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80168e2:	f003 0310 	and.w	r3, r3, #16
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	f000 81c7 	beq.w	8016c7a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80168ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80168f0:	f003 0310 	and.w	r3, r3, #16
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	f000 81c0 	beq.w	8016c7a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2210      	movs	r2, #16
 8016900:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	689b      	ldr	r3, [r3, #8]
 8016908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801690c:	2b40      	cmp	r3, #64	; 0x40
 801690e:	f040 813b 	bne.w	8016b88 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	4a8b      	ldr	r2, [pc, #556]	; (8016b48 <HAL_UART_IRQHandler+0x530>)
 801691a:	4293      	cmp	r3, r2
 801691c:	d059      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	4a89      	ldr	r2, [pc, #548]	; (8016b4c <HAL_UART_IRQHandler+0x534>)
 8016926:	4293      	cmp	r3, r2
 8016928:	d053      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	4a87      	ldr	r2, [pc, #540]	; (8016b50 <HAL_UART_IRQHandler+0x538>)
 8016932:	4293      	cmp	r3, r2
 8016934:	d04d      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	4a85      	ldr	r2, [pc, #532]	; (8016b54 <HAL_UART_IRQHandler+0x53c>)
 801693e:	4293      	cmp	r3, r2
 8016940:	d047      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4a83      	ldr	r2, [pc, #524]	; (8016b58 <HAL_UART_IRQHandler+0x540>)
 801694a:	4293      	cmp	r3, r2
 801694c:	d041      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	4a81      	ldr	r2, [pc, #516]	; (8016b5c <HAL_UART_IRQHandler+0x544>)
 8016956:	4293      	cmp	r3, r2
 8016958:	d03b      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	4a7f      	ldr	r2, [pc, #508]	; (8016b60 <HAL_UART_IRQHandler+0x548>)
 8016962:	4293      	cmp	r3, r2
 8016964:	d035      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	4a7d      	ldr	r2, [pc, #500]	; (8016b64 <HAL_UART_IRQHandler+0x54c>)
 801696e:	4293      	cmp	r3, r2
 8016970:	d02f      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4a7b      	ldr	r2, [pc, #492]	; (8016b68 <HAL_UART_IRQHandler+0x550>)
 801697a:	4293      	cmp	r3, r2
 801697c:	d029      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	4a79      	ldr	r2, [pc, #484]	; (8016b6c <HAL_UART_IRQHandler+0x554>)
 8016986:	4293      	cmp	r3, r2
 8016988:	d023      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	4a77      	ldr	r2, [pc, #476]	; (8016b70 <HAL_UART_IRQHandler+0x558>)
 8016992:	4293      	cmp	r3, r2
 8016994:	d01d      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	4a75      	ldr	r2, [pc, #468]	; (8016b74 <HAL_UART_IRQHandler+0x55c>)
 801699e:	4293      	cmp	r3, r2
 80169a0:	d017      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	4a73      	ldr	r2, [pc, #460]	; (8016b78 <HAL_UART_IRQHandler+0x560>)
 80169aa:	4293      	cmp	r3, r2
 80169ac:	d011      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	4a71      	ldr	r2, [pc, #452]	; (8016b7c <HAL_UART_IRQHandler+0x564>)
 80169b6:	4293      	cmp	r3, r2
 80169b8:	d00b      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	4a6f      	ldr	r2, [pc, #444]	; (8016b80 <HAL_UART_IRQHandler+0x568>)
 80169c2:	4293      	cmp	r3, r2
 80169c4:	d005      	beq.n	80169d2 <HAL_UART_IRQHandler+0x3ba>
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	4a6d      	ldr	r2, [pc, #436]	; (8016b84 <HAL_UART_IRQHandler+0x56c>)
 80169ce:	4293      	cmp	r3, r2
 80169d0:	d105      	bne.n	80169de <HAL_UART_IRQHandler+0x3c6>
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	b29b      	uxth	r3, r3
 80169dc:	e004      	b.n	80169e8 <HAL_UART_IRQHandler+0x3d0>
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	685b      	ldr	r3, [r3, #4]
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80169ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	f000 81a4 	beq.w	8016d3e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80169fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016a00:	429a      	cmp	r2, r3
 8016a02:	f080 819c 	bcs.w	8016d3e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016a14:	69db      	ldr	r3, [r3, #28]
 8016a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a1a:	f000 8086 	beq.w	8016b2a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a2a:	e853 3f00 	ldrex	r3, [r3]
 8016a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	461a      	mov	r2, r3
 8016a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016a4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016a54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016a58:	e841 2300 	strex	r3, r2, [r1]
 8016a5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d1da      	bne.n	8016a1e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	3308      	adds	r3, #8
 8016a6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a72:	e853 3f00 	ldrex	r3, [r3]
 8016a76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a7a:	f023 0301 	bic.w	r3, r3, #1
 8016a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	3308      	adds	r3, #8
 8016a88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016a8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016a90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016a94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016a98:	e841 2300 	strex	r3, r2, [r1]
 8016a9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d1e1      	bne.n	8016a68 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	3308      	adds	r3, #8
 8016aaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016aae:	e853 3f00 	ldrex	r3, [r3]
 8016ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	3308      	adds	r3, #8
 8016ac4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016ac8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016aca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016acc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016ace:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016ad0:	e841 2300 	strex	r3, r2, [r1]
 8016ad4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d1e3      	bne.n	8016aa4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2220      	movs	r2, #32
 8016ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016af2:	e853 3f00 	ldrex	r3, [r3]
 8016af6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016afa:	f023 0310 	bic.w	r3, r3, #16
 8016afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	461a      	mov	r2, r3
 8016b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016b0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8016b0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b14:	e841 2300 	strex	r3, r2, [r1]
 8016b18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d1e4      	bne.n	8016aea <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7f6 fcff 	bl	800d528 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b36:	b29b      	uxth	r3, r3
 8016b38:	1ad3      	subs	r3, r2, r3
 8016b3a:	b29b      	uxth	r3, r3
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 f912 	bl	8016d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016b44:	e0fb      	b.n	8016d3e <HAL_UART_IRQHandler+0x726>
 8016b46:	bf00      	nop
 8016b48:	40020010 	.word	0x40020010
 8016b4c:	40020028 	.word	0x40020028
 8016b50:	40020040 	.word	0x40020040
 8016b54:	40020058 	.word	0x40020058
 8016b58:	40020070 	.word	0x40020070
 8016b5c:	40020088 	.word	0x40020088
 8016b60:	400200a0 	.word	0x400200a0
 8016b64:	400200b8 	.word	0x400200b8
 8016b68:	40020410 	.word	0x40020410
 8016b6c:	40020428 	.word	0x40020428
 8016b70:	40020440 	.word	0x40020440
 8016b74:	40020458 	.word	0x40020458
 8016b78:	40020470 	.word	0x40020470
 8016b7c:	40020488 	.word	0x40020488
 8016b80:	400204a0 	.word	0x400204a0
 8016b84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	1ad3      	subs	r3, r2, r3
 8016b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ba2:	b29b      	uxth	r3, r3
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	f000 80cc 	beq.w	8016d42 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8016baa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	f000 80c7 	beq.w	8016d42 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bbc:	e853 3f00 	ldrex	r3, [r3]
 8016bc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8016bd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bde:	e841 2300 	strex	r3, r2, [r1]
 8016be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d1e4      	bne.n	8016bb4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	3308      	adds	r3, #8
 8016bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf4:	e853 3f00 	ldrex	r3, [r3]
 8016bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8016bfa:	6a3a      	ldr	r2, [r7, #32]
 8016bfc:	4b54      	ldr	r3, [pc, #336]	; (8016d50 <HAL_UART_IRQHandler+0x738>)
 8016bfe:	4013      	ands	r3, r2
 8016c00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	3308      	adds	r3, #8
 8016c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016c0e:	633a      	str	r2, [r7, #48]	; 0x30
 8016c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c16:	e841 2300 	strex	r3, r2, [r1]
 8016c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d1e3      	bne.n	8016bea <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2220      	movs	r2, #32
 8016c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c3c:	693b      	ldr	r3, [r7, #16]
 8016c3e:	e853 3f00 	ldrex	r3, [r3]
 8016c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	f023 0310 	bic.w	r3, r3, #16
 8016c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	461a      	mov	r2, r3
 8016c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016c58:	61fb      	str	r3, [r7, #28]
 8016c5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c5c:	69b9      	ldr	r1, [r7, #24]
 8016c5e:	69fa      	ldr	r2, [r7, #28]
 8016c60:	e841 2300 	strex	r3, r2, [r1]
 8016c64:	617b      	str	r3, [r7, #20]
   return(result);
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d1e4      	bne.n	8016c36 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016c70:	4619      	mov	r1, r3
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f000 f878 	bl	8016d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016c78:	e063      	b.n	8016d42 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d00e      	beq.n	8016ca4 <HAL_UART_IRQHandler+0x68c>
 8016c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d008      	beq.n	8016ca4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016c9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016c9c:	6878      	ldr	r0, [r7, #4]
 8016c9e:	f001 fdbb 	bl	8018818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016ca2:	e051      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d014      	beq.n	8016cda <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8016cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d105      	bne.n	8016cc8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d008      	beq.n	8016cda <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d03a      	beq.n	8016d46 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	4798      	blx	r3
    }
    return;
 8016cd8:	e035      	b.n	8016d46 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d009      	beq.n	8016cfa <HAL_UART_IRQHandler+0x6e2>
 8016ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d003      	beq.n	8016cfa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f001 f908 	bl	8017f08 <UART_EndTransmit_IT>
    return;
 8016cf8:	e026      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d009      	beq.n	8016d1a <HAL_UART_IRQHandler+0x702>
 8016d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d003      	beq.n	8016d1a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f001 fd94 	bl	8018840 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016d18:	e016      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d010      	beq.n	8016d48 <HAL_UART_IRQHandler+0x730>
 8016d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	da0c      	bge.n	8016d48 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f001 fd7c 	bl	801882c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016d34:	e008      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
      return;
 8016d36:	bf00      	nop
 8016d38:	e006      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
    return;
 8016d3a:	bf00      	nop
 8016d3c:	e004      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
      return;
 8016d3e:	bf00      	nop
 8016d40:	e002      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
      return;
 8016d42:	bf00      	nop
 8016d44:	e000      	b.n	8016d48 <HAL_UART_IRQHandler+0x730>
    return;
 8016d46:	bf00      	nop
  }
}
 8016d48:	37e8      	adds	r7, #232	; 0xe8
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
 8016d4e:	bf00      	nop
 8016d50:	effffffe 	.word	0xeffffffe

08016d54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016d54:	b480      	push	{r7}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016d5c:	bf00      	nop
 8016d5e:	370c      	adds	r7, #12
 8016d60:	46bd      	mov	sp, r7
 8016d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d66:	4770      	bx	lr

08016d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b083      	sub	sp, #12
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
 8016d70:	460b      	mov	r3, r1
 8016d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016d74:	bf00      	nop
 8016d76:	370c      	adds	r7, #12
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7e:	4770      	bx	lr

08016d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016d84:	b092      	sub	sp, #72	; 0x48
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	689a      	ldr	r2, [r3, #8]
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	691b      	ldr	r3, [r3, #16]
 8016d98:	431a      	orrs	r2, r3
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	695b      	ldr	r3, [r3, #20]
 8016d9e:	431a      	orrs	r2, r3
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	69db      	ldr	r3, [r3, #28]
 8016da4:	4313      	orrs	r3, r2
 8016da6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016da8:	697b      	ldr	r3, [r7, #20]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	4bbe      	ldr	r3, [pc, #760]	; (80170a8 <UART_SetConfig+0x328>)
 8016db0:	4013      	ands	r3, r2
 8016db2:	697a      	ldr	r2, [r7, #20]
 8016db4:	6812      	ldr	r2, [r2, #0]
 8016db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016db8:	430b      	orrs	r3, r1
 8016dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016dc6:	697b      	ldr	r3, [r7, #20]
 8016dc8:	68da      	ldr	r2, [r3, #12]
 8016dca:	697b      	ldr	r3, [r7, #20]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	430a      	orrs	r2, r1
 8016dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	699b      	ldr	r3, [r3, #24]
 8016dd6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	4ab3      	ldr	r2, [pc, #716]	; (80170ac <UART_SetConfig+0x32c>)
 8016dde:	4293      	cmp	r3, r2
 8016de0:	d004      	beq.n	8016dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	6a1b      	ldr	r3, [r3, #32]
 8016de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016de8:	4313      	orrs	r3, r2
 8016dea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	689a      	ldr	r2, [r3, #8]
 8016df2:	4baf      	ldr	r3, [pc, #700]	; (80170b0 <UART_SetConfig+0x330>)
 8016df4:	4013      	ands	r3, r2
 8016df6:	697a      	ldr	r2, [r7, #20]
 8016df8:	6812      	ldr	r2, [r2, #0]
 8016dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016dfc:	430b      	orrs	r3, r1
 8016dfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016e00:	697b      	ldr	r3, [r7, #20]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e06:	f023 010f 	bic.w	r1, r3, #15
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	430a      	orrs	r2, r1
 8016e14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016e16:	697b      	ldr	r3, [r7, #20]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	4aa6      	ldr	r2, [pc, #664]	; (80170b4 <UART_SetConfig+0x334>)
 8016e1c:	4293      	cmp	r3, r2
 8016e1e:	d177      	bne.n	8016f10 <UART_SetConfig+0x190>
 8016e20:	4ba5      	ldr	r3, [pc, #660]	; (80170b8 <UART_SetConfig+0x338>)
 8016e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016e28:	2b28      	cmp	r3, #40	; 0x28
 8016e2a:	d86d      	bhi.n	8016f08 <UART_SetConfig+0x188>
 8016e2c:	a201      	add	r2, pc, #4	; (adr r2, 8016e34 <UART_SetConfig+0xb4>)
 8016e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e32:	bf00      	nop
 8016e34:	08016ed9 	.word	0x08016ed9
 8016e38:	08016f09 	.word	0x08016f09
 8016e3c:	08016f09 	.word	0x08016f09
 8016e40:	08016f09 	.word	0x08016f09
 8016e44:	08016f09 	.word	0x08016f09
 8016e48:	08016f09 	.word	0x08016f09
 8016e4c:	08016f09 	.word	0x08016f09
 8016e50:	08016f09 	.word	0x08016f09
 8016e54:	08016ee1 	.word	0x08016ee1
 8016e58:	08016f09 	.word	0x08016f09
 8016e5c:	08016f09 	.word	0x08016f09
 8016e60:	08016f09 	.word	0x08016f09
 8016e64:	08016f09 	.word	0x08016f09
 8016e68:	08016f09 	.word	0x08016f09
 8016e6c:	08016f09 	.word	0x08016f09
 8016e70:	08016f09 	.word	0x08016f09
 8016e74:	08016ee9 	.word	0x08016ee9
 8016e78:	08016f09 	.word	0x08016f09
 8016e7c:	08016f09 	.word	0x08016f09
 8016e80:	08016f09 	.word	0x08016f09
 8016e84:	08016f09 	.word	0x08016f09
 8016e88:	08016f09 	.word	0x08016f09
 8016e8c:	08016f09 	.word	0x08016f09
 8016e90:	08016f09 	.word	0x08016f09
 8016e94:	08016ef1 	.word	0x08016ef1
 8016e98:	08016f09 	.word	0x08016f09
 8016e9c:	08016f09 	.word	0x08016f09
 8016ea0:	08016f09 	.word	0x08016f09
 8016ea4:	08016f09 	.word	0x08016f09
 8016ea8:	08016f09 	.word	0x08016f09
 8016eac:	08016f09 	.word	0x08016f09
 8016eb0:	08016f09 	.word	0x08016f09
 8016eb4:	08016ef9 	.word	0x08016ef9
 8016eb8:	08016f09 	.word	0x08016f09
 8016ebc:	08016f09 	.word	0x08016f09
 8016ec0:	08016f09 	.word	0x08016f09
 8016ec4:	08016f09 	.word	0x08016f09
 8016ec8:	08016f09 	.word	0x08016f09
 8016ecc:	08016f09 	.word	0x08016f09
 8016ed0:	08016f09 	.word	0x08016f09
 8016ed4:	08016f01 	.word	0x08016f01
 8016ed8:	2301      	movs	r3, #1
 8016eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ede:	e222      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016ee0:	2304      	movs	r3, #4
 8016ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ee6:	e21e      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016ee8:	2308      	movs	r3, #8
 8016eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eee:	e21a      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016ef0:	2310      	movs	r3, #16
 8016ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ef6:	e216      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016ef8:	2320      	movs	r3, #32
 8016efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016efe:	e212      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f00:	2340      	movs	r3, #64	; 0x40
 8016f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f06:	e20e      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f08:	2380      	movs	r3, #128	; 0x80
 8016f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f0e:	e20a      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f10:	697b      	ldr	r3, [r7, #20]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	4a69      	ldr	r2, [pc, #420]	; (80170bc <UART_SetConfig+0x33c>)
 8016f16:	4293      	cmp	r3, r2
 8016f18:	d130      	bne.n	8016f7c <UART_SetConfig+0x1fc>
 8016f1a:	4b67      	ldr	r3, [pc, #412]	; (80170b8 <UART_SetConfig+0x338>)
 8016f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f1e:	f003 0307 	and.w	r3, r3, #7
 8016f22:	2b05      	cmp	r3, #5
 8016f24:	d826      	bhi.n	8016f74 <UART_SetConfig+0x1f4>
 8016f26:	a201      	add	r2, pc, #4	; (adr r2, 8016f2c <UART_SetConfig+0x1ac>)
 8016f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f2c:	08016f45 	.word	0x08016f45
 8016f30:	08016f4d 	.word	0x08016f4d
 8016f34:	08016f55 	.word	0x08016f55
 8016f38:	08016f5d 	.word	0x08016f5d
 8016f3c:	08016f65 	.word	0x08016f65
 8016f40:	08016f6d 	.word	0x08016f6d
 8016f44:	2300      	movs	r3, #0
 8016f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f4a:	e1ec      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f4c:	2304      	movs	r3, #4
 8016f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f52:	e1e8      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f54:	2308      	movs	r3, #8
 8016f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f5a:	e1e4      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f5c:	2310      	movs	r3, #16
 8016f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f62:	e1e0      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f64:	2320      	movs	r3, #32
 8016f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f6a:	e1dc      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f6c:	2340      	movs	r3, #64	; 0x40
 8016f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f72:	e1d8      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f74:	2380      	movs	r3, #128	; 0x80
 8016f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f7a:	e1d4      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016f7c:	697b      	ldr	r3, [r7, #20]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	4a4f      	ldr	r2, [pc, #316]	; (80170c0 <UART_SetConfig+0x340>)
 8016f82:	4293      	cmp	r3, r2
 8016f84:	d130      	bne.n	8016fe8 <UART_SetConfig+0x268>
 8016f86:	4b4c      	ldr	r3, [pc, #304]	; (80170b8 <UART_SetConfig+0x338>)
 8016f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f8a:	f003 0307 	and.w	r3, r3, #7
 8016f8e:	2b05      	cmp	r3, #5
 8016f90:	d826      	bhi.n	8016fe0 <UART_SetConfig+0x260>
 8016f92:	a201      	add	r2, pc, #4	; (adr r2, 8016f98 <UART_SetConfig+0x218>)
 8016f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f98:	08016fb1 	.word	0x08016fb1
 8016f9c:	08016fb9 	.word	0x08016fb9
 8016fa0:	08016fc1 	.word	0x08016fc1
 8016fa4:	08016fc9 	.word	0x08016fc9
 8016fa8:	08016fd1 	.word	0x08016fd1
 8016fac:	08016fd9 	.word	0x08016fd9
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fb6:	e1b6      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016fb8:	2304      	movs	r3, #4
 8016fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fbe:	e1b2      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016fc0:	2308      	movs	r3, #8
 8016fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fc6:	e1ae      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016fc8:	2310      	movs	r3, #16
 8016fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fce:	e1aa      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016fd0:	2320      	movs	r3, #32
 8016fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fd6:	e1a6      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016fd8:	2340      	movs	r3, #64	; 0x40
 8016fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fde:	e1a2      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016fe0:	2380      	movs	r3, #128	; 0x80
 8016fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fe6:	e19e      	b.n	8017326 <UART_SetConfig+0x5a6>
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	4a35      	ldr	r2, [pc, #212]	; (80170c4 <UART_SetConfig+0x344>)
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	d130      	bne.n	8017054 <UART_SetConfig+0x2d4>
 8016ff2:	4b31      	ldr	r3, [pc, #196]	; (80170b8 <UART_SetConfig+0x338>)
 8016ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ff6:	f003 0307 	and.w	r3, r3, #7
 8016ffa:	2b05      	cmp	r3, #5
 8016ffc:	d826      	bhi.n	801704c <UART_SetConfig+0x2cc>
 8016ffe:	a201      	add	r2, pc, #4	; (adr r2, 8017004 <UART_SetConfig+0x284>)
 8017000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017004:	0801701d 	.word	0x0801701d
 8017008:	08017025 	.word	0x08017025
 801700c:	0801702d 	.word	0x0801702d
 8017010:	08017035 	.word	0x08017035
 8017014:	0801703d 	.word	0x0801703d
 8017018:	08017045 	.word	0x08017045
 801701c:	2300      	movs	r3, #0
 801701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017022:	e180      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017024:	2304      	movs	r3, #4
 8017026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801702a:	e17c      	b.n	8017326 <UART_SetConfig+0x5a6>
 801702c:	2308      	movs	r3, #8
 801702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017032:	e178      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017034:	2310      	movs	r3, #16
 8017036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801703a:	e174      	b.n	8017326 <UART_SetConfig+0x5a6>
 801703c:	2320      	movs	r3, #32
 801703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017042:	e170      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017044:	2340      	movs	r3, #64	; 0x40
 8017046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801704a:	e16c      	b.n	8017326 <UART_SetConfig+0x5a6>
 801704c:	2380      	movs	r3, #128	; 0x80
 801704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017052:	e168      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	4a1b      	ldr	r2, [pc, #108]	; (80170c8 <UART_SetConfig+0x348>)
 801705a:	4293      	cmp	r3, r2
 801705c:	d142      	bne.n	80170e4 <UART_SetConfig+0x364>
 801705e:	4b16      	ldr	r3, [pc, #88]	; (80170b8 <UART_SetConfig+0x338>)
 8017060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017062:	f003 0307 	and.w	r3, r3, #7
 8017066:	2b05      	cmp	r3, #5
 8017068:	d838      	bhi.n	80170dc <UART_SetConfig+0x35c>
 801706a:	a201      	add	r2, pc, #4	; (adr r2, 8017070 <UART_SetConfig+0x2f0>)
 801706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017070:	08017089 	.word	0x08017089
 8017074:	08017091 	.word	0x08017091
 8017078:	08017099 	.word	0x08017099
 801707c:	080170a1 	.word	0x080170a1
 8017080:	080170cd 	.word	0x080170cd
 8017084:	080170d5 	.word	0x080170d5
 8017088:	2300      	movs	r3, #0
 801708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801708e:	e14a      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017090:	2304      	movs	r3, #4
 8017092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017096:	e146      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017098:	2308      	movs	r3, #8
 801709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801709e:	e142      	b.n	8017326 <UART_SetConfig+0x5a6>
 80170a0:	2310      	movs	r3, #16
 80170a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170a6:	e13e      	b.n	8017326 <UART_SetConfig+0x5a6>
 80170a8:	cfff69f3 	.word	0xcfff69f3
 80170ac:	58000c00 	.word	0x58000c00
 80170b0:	11fff4ff 	.word	0x11fff4ff
 80170b4:	40011000 	.word	0x40011000
 80170b8:	58024400 	.word	0x58024400
 80170bc:	40004400 	.word	0x40004400
 80170c0:	40004800 	.word	0x40004800
 80170c4:	40004c00 	.word	0x40004c00
 80170c8:	40005000 	.word	0x40005000
 80170cc:	2320      	movs	r3, #32
 80170ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170d2:	e128      	b.n	8017326 <UART_SetConfig+0x5a6>
 80170d4:	2340      	movs	r3, #64	; 0x40
 80170d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170da:	e124      	b.n	8017326 <UART_SetConfig+0x5a6>
 80170dc:	2380      	movs	r3, #128	; 0x80
 80170de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170e2:	e120      	b.n	8017326 <UART_SetConfig+0x5a6>
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	4acb      	ldr	r2, [pc, #812]	; (8017418 <UART_SetConfig+0x698>)
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d176      	bne.n	80171dc <UART_SetConfig+0x45c>
 80170ee:	4bcb      	ldr	r3, [pc, #812]	; (801741c <UART_SetConfig+0x69c>)
 80170f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80170f6:	2b28      	cmp	r3, #40	; 0x28
 80170f8:	d86c      	bhi.n	80171d4 <UART_SetConfig+0x454>
 80170fa:	a201      	add	r2, pc, #4	; (adr r2, 8017100 <UART_SetConfig+0x380>)
 80170fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017100:	080171a5 	.word	0x080171a5
 8017104:	080171d5 	.word	0x080171d5
 8017108:	080171d5 	.word	0x080171d5
 801710c:	080171d5 	.word	0x080171d5
 8017110:	080171d5 	.word	0x080171d5
 8017114:	080171d5 	.word	0x080171d5
 8017118:	080171d5 	.word	0x080171d5
 801711c:	080171d5 	.word	0x080171d5
 8017120:	080171ad 	.word	0x080171ad
 8017124:	080171d5 	.word	0x080171d5
 8017128:	080171d5 	.word	0x080171d5
 801712c:	080171d5 	.word	0x080171d5
 8017130:	080171d5 	.word	0x080171d5
 8017134:	080171d5 	.word	0x080171d5
 8017138:	080171d5 	.word	0x080171d5
 801713c:	080171d5 	.word	0x080171d5
 8017140:	080171b5 	.word	0x080171b5
 8017144:	080171d5 	.word	0x080171d5
 8017148:	080171d5 	.word	0x080171d5
 801714c:	080171d5 	.word	0x080171d5
 8017150:	080171d5 	.word	0x080171d5
 8017154:	080171d5 	.word	0x080171d5
 8017158:	080171d5 	.word	0x080171d5
 801715c:	080171d5 	.word	0x080171d5
 8017160:	080171bd 	.word	0x080171bd
 8017164:	080171d5 	.word	0x080171d5
 8017168:	080171d5 	.word	0x080171d5
 801716c:	080171d5 	.word	0x080171d5
 8017170:	080171d5 	.word	0x080171d5
 8017174:	080171d5 	.word	0x080171d5
 8017178:	080171d5 	.word	0x080171d5
 801717c:	080171d5 	.word	0x080171d5
 8017180:	080171c5 	.word	0x080171c5
 8017184:	080171d5 	.word	0x080171d5
 8017188:	080171d5 	.word	0x080171d5
 801718c:	080171d5 	.word	0x080171d5
 8017190:	080171d5 	.word	0x080171d5
 8017194:	080171d5 	.word	0x080171d5
 8017198:	080171d5 	.word	0x080171d5
 801719c:	080171d5 	.word	0x080171d5
 80171a0:	080171cd 	.word	0x080171cd
 80171a4:	2301      	movs	r3, #1
 80171a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171aa:	e0bc      	b.n	8017326 <UART_SetConfig+0x5a6>
 80171ac:	2304      	movs	r3, #4
 80171ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171b2:	e0b8      	b.n	8017326 <UART_SetConfig+0x5a6>
 80171b4:	2308      	movs	r3, #8
 80171b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171ba:	e0b4      	b.n	8017326 <UART_SetConfig+0x5a6>
 80171bc:	2310      	movs	r3, #16
 80171be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171c2:	e0b0      	b.n	8017326 <UART_SetConfig+0x5a6>
 80171c4:	2320      	movs	r3, #32
 80171c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171ca:	e0ac      	b.n	8017326 <UART_SetConfig+0x5a6>
 80171cc:	2340      	movs	r3, #64	; 0x40
 80171ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171d2:	e0a8      	b.n	8017326 <UART_SetConfig+0x5a6>
 80171d4:	2380      	movs	r3, #128	; 0x80
 80171d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171da:	e0a4      	b.n	8017326 <UART_SetConfig+0x5a6>
 80171dc:	697b      	ldr	r3, [r7, #20]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	4a8f      	ldr	r2, [pc, #572]	; (8017420 <UART_SetConfig+0x6a0>)
 80171e2:	4293      	cmp	r3, r2
 80171e4:	d130      	bne.n	8017248 <UART_SetConfig+0x4c8>
 80171e6:	4b8d      	ldr	r3, [pc, #564]	; (801741c <UART_SetConfig+0x69c>)
 80171e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171ea:	f003 0307 	and.w	r3, r3, #7
 80171ee:	2b05      	cmp	r3, #5
 80171f0:	d826      	bhi.n	8017240 <UART_SetConfig+0x4c0>
 80171f2:	a201      	add	r2, pc, #4	; (adr r2, 80171f8 <UART_SetConfig+0x478>)
 80171f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171f8:	08017211 	.word	0x08017211
 80171fc:	08017219 	.word	0x08017219
 8017200:	08017221 	.word	0x08017221
 8017204:	08017229 	.word	0x08017229
 8017208:	08017231 	.word	0x08017231
 801720c:	08017239 	.word	0x08017239
 8017210:	2300      	movs	r3, #0
 8017212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017216:	e086      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017218:	2304      	movs	r3, #4
 801721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801721e:	e082      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017220:	2308      	movs	r3, #8
 8017222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017226:	e07e      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017228:	2310      	movs	r3, #16
 801722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801722e:	e07a      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017230:	2320      	movs	r3, #32
 8017232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017236:	e076      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017238:	2340      	movs	r3, #64	; 0x40
 801723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801723e:	e072      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017240:	2380      	movs	r3, #128	; 0x80
 8017242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017246:	e06e      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017248:	697b      	ldr	r3, [r7, #20]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	4a75      	ldr	r2, [pc, #468]	; (8017424 <UART_SetConfig+0x6a4>)
 801724e:	4293      	cmp	r3, r2
 8017250:	d130      	bne.n	80172b4 <UART_SetConfig+0x534>
 8017252:	4b72      	ldr	r3, [pc, #456]	; (801741c <UART_SetConfig+0x69c>)
 8017254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017256:	f003 0307 	and.w	r3, r3, #7
 801725a:	2b05      	cmp	r3, #5
 801725c:	d826      	bhi.n	80172ac <UART_SetConfig+0x52c>
 801725e:	a201      	add	r2, pc, #4	; (adr r2, 8017264 <UART_SetConfig+0x4e4>)
 8017260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017264:	0801727d 	.word	0x0801727d
 8017268:	08017285 	.word	0x08017285
 801726c:	0801728d 	.word	0x0801728d
 8017270:	08017295 	.word	0x08017295
 8017274:	0801729d 	.word	0x0801729d
 8017278:	080172a5 	.word	0x080172a5
 801727c:	2300      	movs	r3, #0
 801727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017282:	e050      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017284:	2304      	movs	r3, #4
 8017286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801728a:	e04c      	b.n	8017326 <UART_SetConfig+0x5a6>
 801728c:	2308      	movs	r3, #8
 801728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017292:	e048      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017294:	2310      	movs	r3, #16
 8017296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801729a:	e044      	b.n	8017326 <UART_SetConfig+0x5a6>
 801729c:	2320      	movs	r3, #32
 801729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172a2:	e040      	b.n	8017326 <UART_SetConfig+0x5a6>
 80172a4:	2340      	movs	r3, #64	; 0x40
 80172a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172aa:	e03c      	b.n	8017326 <UART_SetConfig+0x5a6>
 80172ac:	2380      	movs	r3, #128	; 0x80
 80172ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172b2:	e038      	b.n	8017326 <UART_SetConfig+0x5a6>
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	4a5b      	ldr	r2, [pc, #364]	; (8017428 <UART_SetConfig+0x6a8>)
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d130      	bne.n	8017320 <UART_SetConfig+0x5a0>
 80172be:	4b57      	ldr	r3, [pc, #348]	; (801741c <UART_SetConfig+0x69c>)
 80172c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172c2:	f003 0307 	and.w	r3, r3, #7
 80172c6:	2b05      	cmp	r3, #5
 80172c8:	d826      	bhi.n	8017318 <UART_SetConfig+0x598>
 80172ca:	a201      	add	r2, pc, #4	; (adr r2, 80172d0 <UART_SetConfig+0x550>)
 80172cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172d0:	080172e9 	.word	0x080172e9
 80172d4:	080172f1 	.word	0x080172f1
 80172d8:	080172f9 	.word	0x080172f9
 80172dc:	08017301 	.word	0x08017301
 80172e0:	08017309 	.word	0x08017309
 80172e4:	08017311 	.word	0x08017311
 80172e8:	2302      	movs	r3, #2
 80172ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172ee:	e01a      	b.n	8017326 <UART_SetConfig+0x5a6>
 80172f0:	2304      	movs	r3, #4
 80172f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172f6:	e016      	b.n	8017326 <UART_SetConfig+0x5a6>
 80172f8:	2308      	movs	r3, #8
 80172fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172fe:	e012      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017300:	2310      	movs	r3, #16
 8017302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017306:	e00e      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017308:	2320      	movs	r3, #32
 801730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801730e:	e00a      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017310:	2340      	movs	r3, #64	; 0x40
 8017312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017316:	e006      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017318:	2380      	movs	r3, #128	; 0x80
 801731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801731e:	e002      	b.n	8017326 <UART_SetConfig+0x5a6>
 8017320:	2380      	movs	r3, #128	; 0x80
 8017322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	4a3f      	ldr	r2, [pc, #252]	; (8017428 <UART_SetConfig+0x6a8>)
 801732c:	4293      	cmp	r3, r2
 801732e:	f040 80f8 	bne.w	8017522 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017332:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017336:	2b20      	cmp	r3, #32
 8017338:	dc46      	bgt.n	80173c8 <UART_SetConfig+0x648>
 801733a:	2b02      	cmp	r3, #2
 801733c:	f2c0 8082 	blt.w	8017444 <UART_SetConfig+0x6c4>
 8017340:	3b02      	subs	r3, #2
 8017342:	2b1e      	cmp	r3, #30
 8017344:	d87e      	bhi.n	8017444 <UART_SetConfig+0x6c4>
 8017346:	a201      	add	r2, pc, #4	; (adr r2, 801734c <UART_SetConfig+0x5cc>)
 8017348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801734c:	080173cf 	.word	0x080173cf
 8017350:	08017445 	.word	0x08017445
 8017354:	080173d7 	.word	0x080173d7
 8017358:	08017445 	.word	0x08017445
 801735c:	08017445 	.word	0x08017445
 8017360:	08017445 	.word	0x08017445
 8017364:	080173e7 	.word	0x080173e7
 8017368:	08017445 	.word	0x08017445
 801736c:	08017445 	.word	0x08017445
 8017370:	08017445 	.word	0x08017445
 8017374:	08017445 	.word	0x08017445
 8017378:	08017445 	.word	0x08017445
 801737c:	08017445 	.word	0x08017445
 8017380:	08017445 	.word	0x08017445
 8017384:	080173f7 	.word	0x080173f7
 8017388:	08017445 	.word	0x08017445
 801738c:	08017445 	.word	0x08017445
 8017390:	08017445 	.word	0x08017445
 8017394:	08017445 	.word	0x08017445
 8017398:	08017445 	.word	0x08017445
 801739c:	08017445 	.word	0x08017445
 80173a0:	08017445 	.word	0x08017445
 80173a4:	08017445 	.word	0x08017445
 80173a8:	08017445 	.word	0x08017445
 80173ac:	08017445 	.word	0x08017445
 80173b0:	08017445 	.word	0x08017445
 80173b4:	08017445 	.word	0x08017445
 80173b8:	08017445 	.word	0x08017445
 80173bc:	08017445 	.word	0x08017445
 80173c0:	08017445 	.word	0x08017445
 80173c4:	08017437 	.word	0x08017437
 80173c8:	2b40      	cmp	r3, #64	; 0x40
 80173ca:	d037      	beq.n	801743c <UART_SetConfig+0x6bc>
 80173cc:	e03a      	b.n	8017444 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80173ce:	f7fc fcd1 	bl	8013d74 <HAL_RCCEx_GetD3PCLK1Freq>
 80173d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80173d4:	e03c      	b.n	8017450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80173d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80173da:	4618      	mov	r0, r3
 80173dc:	f7fc fce0 	bl	8013da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80173e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80173e4:	e034      	b.n	8017450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80173e6:	f107 0318 	add.w	r3, r7, #24
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7fc fe2c 	bl	8014048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80173f4:	e02c      	b.n	8017450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80173f6:	4b09      	ldr	r3, [pc, #36]	; (801741c <UART_SetConfig+0x69c>)
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	f003 0320 	and.w	r3, r3, #32
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d016      	beq.n	8017430 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8017402:	4b06      	ldr	r3, [pc, #24]	; (801741c <UART_SetConfig+0x69c>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	08db      	lsrs	r3, r3, #3
 8017408:	f003 0303 	and.w	r3, r3, #3
 801740c:	4a07      	ldr	r2, [pc, #28]	; (801742c <UART_SetConfig+0x6ac>)
 801740e:	fa22 f303 	lsr.w	r3, r2, r3
 8017412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017414:	e01c      	b.n	8017450 <UART_SetConfig+0x6d0>
 8017416:	bf00      	nop
 8017418:	40011400 	.word	0x40011400
 801741c:	58024400 	.word	0x58024400
 8017420:	40007800 	.word	0x40007800
 8017424:	40007c00 	.word	0x40007c00
 8017428:	58000c00 	.word	0x58000c00
 801742c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8017430:	4b9d      	ldr	r3, [pc, #628]	; (80176a8 <UART_SetConfig+0x928>)
 8017432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017434:	e00c      	b.n	8017450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017436:	4b9d      	ldr	r3, [pc, #628]	; (80176ac <UART_SetConfig+0x92c>)
 8017438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801743a:	e009      	b.n	8017450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801743c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017442:	e005      	b.n	8017450 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8017444:	2300      	movs	r3, #0
 8017446:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8017448:	2301      	movs	r3, #1
 801744a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801744e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017452:	2b00      	cmp	r3, #0
 8017454:	f000 81de 	beq.w	8017814 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801745c:	4a94      	ldr	r2, [pc, #592]	; (80176b0 <UART_SetConfig+0x930>)
 801745e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017462:	461a      	mov	r2, r3
 8017464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017466:	fbb3 f3f2 	udiv	r3, r3, r2
 801746a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	685a      	ldr	r2, [r3, #4]
 8017470:	4613      	mov	r3, r2
 8017472:	005b      	lsls	r3, r3, #1
 8017474:	4413      	add	r3, r2
 8017476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017478:	429a      	cmp	r2, r3
 801747a:	d305      	bcc.n	8017488 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	685b      	ldr	r3, [r3, #4]
 8017480:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017484:	429a      	cmp	r2, r3
 8017486:	d903      	bls.n	8017490 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8017488:	2301      	movs	r3, #1
 801748a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801748e:	e1c1      	b.n	8017814 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017492:	2200      	movs	r2, #0
 8017494:	60bb      	str	r3, [r7, #8]
 8017496:	60fa      	str	r2, [r7, #12]
 8017498:	697b      	ldr	r3, [r7, #20]
 801749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801749c:	4a84      	ldr	r2, [pc, #528]	; (80176b0 <UART_SetConfig+0x930>)
 801749e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	2200      	movs	r2, #0
 80174a6:	603b      	str	r3, [r7, #0]
 80174a8:	607a      	str	r2, [r7, #4]
 80174aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80174b2:	f7e8 ff65 	bl	8000380 <__aeabi_uldivmod>
 80174b6:	4602      	mov	r2, r0
 80174b8:	460b      	mov	r3, r1
 80174ba:	4610      	mov	r0, r2
 80174bc:	4619      	mov	r1, r3
 80174be:	f04f 0200 	mov.w	r2, #0
 80174c2:	f04f 0300 	mov.w	r3, #0
 80174c6:	020b      	lsls	r3, r1, #8
 80174c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80174cc:	0202      	lsls	r2, r0, #8
 80174ce:	6979      	ldr	r1, [r7, #20]
 80174d0:	6849      	ldr	r1, [r1, #4]
 80174d2:	0849      	lsrs	r1, r1, #1
 80174d4:	2000      	movs	r0, #0
 80174d6:	460c      	mov	r4, r1
 80174d8:	4605      	mov	r5, r0
 80174da:	eb12 0804 	adds.w	r8, r2, r4
 80174de:	eb43 0905 	adc.w	r9, r3, r5
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	685b      	ldr	r3, [r3, #4]
 80174e6:	2200      	movs	r2, #0
 80174e8:	469a      	mov	sl, r3
 80174ea:	4693      	mov	fp, r2
 80174ec:	4652      	mov	r2, sl
 80174ee:	465b      	mov	r3, fp
 80174f0:	4640      	mov	r0, r8
 80174f2:	4649      	mov	r1, r9
 80174f4:	f7e8 ff44 	bl	8000380 <__aeabi_uldivmod>
 80174f8:	4602      	mov	r2, r0
 80174fa:	460b      	mov	r3, r1
 80174fc:	4613      	mov	r3, r2
 80174fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017506:	d308      	bcc.n	801751a <UART_SetConfig+0x79a>
 8017508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801750a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801750e:	d204      	bcs.n	801751a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8017510:	697b      	ldr	r3, [r7, #20]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017516:	60da      	str	r2, [r3, #12]
 8017518:	e17c      	b.n	8017814 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801751a:	2301      	movs	r3, #1
 801751c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017520:	e178      	b.n	8017814 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	69db      	ldr	r3, [r3, #28]
 8017526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801752a:	f040 80c5 	bne.w	80176b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801752e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017532:	2b20      	cmp	r3, #32
 8017534:	dc48      	bgt.n	80175c8 <UART_SetConfig+0x848>
 8017536:	2b00      	cmp	r3, #0
 8017538:	db7b      	blt.n	8017632 <UART_SetConfig+0x8b2>
 801753a:	2b20      	cmp	r3, #32
 801753c:	d879      	bhi.n	8017632 <UART_SetConfig+0x8b2>
 801753e:	a201      	add	r2, pc, #4	; (adr r2, 8017544 <UART_SetConfig+0x7c4>)
 8017540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017544:	080175cf 	.word	0x080175cf
 8017548:	080175d7 	.word	0x080175d7
 801754c:	08017633 	.word	0x08017633
 8017550:	08017633 	.word	0x08017633
 8017554:	080175df 	.word	0x080175df
 8017558:	08017633 	.word	0x08017633
 801755c:	08017633 	.word	0x08017633
 8017560:	08017633 	.word	0x08017633
 8017564:	080175ef 	.word	0x080175ef
 8017568:	08017633 	.word	0x08017633
 801756c:	08017633 	.word	0x08017633
 8017570:	08017633 	.word	0x08017633
 8017574:	08017633 	.word	0x08017633
 8017578:	08017633 	.word	0x08017633
 801757c:	08017633 	.word	0x08017633
 8017580:	08017633 	.word	0x08017633
 8017584:	080175ff 	.word	0x080175ff
 8017588:	08017633 	.word	0x08017633
 801758c:	08017633 	.word	0x08017633
 8017590:	08017633 	.word	0x08017633
 8017594:	08017633 	.word	0x08017633
 8017598:	08017633 	.word	0x08017633
 801759c:	08017633 	.word	0x08017633
 80175a0:	08017633 	.word	0x08017633
 80175a4:	08017633 	.word	0x08017633
 80175a8:	08017633 	.word	0x08017633
 80175ac:	08017633 	.word	0x08017633
 80175b0:	08017633 	.word	0x08017633
 80175b4:	08017633 	.word	0x08017633
 80175b8:	08017633 	.word	0x08017633
 80175bc:	08017633 	.word	0x08017633
 80175c0:	08017633 	.word	0x08017633
 80175c4:	08017625 	.word	0x08017625
 80175c8:	2b40      	cmp	r3, #64	; 0x40
 80175ca:	d02e      	beq.n	801762a <UART_SetConfig+0x8aa>
 80175cc:	e031      	b.n	8017632 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80175ce:	f7fb fc5f 	bl	8012e90 <HAL_RCC_GetPCLK1Freq>
 80175d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80175d4:	e033      	b.n	801763e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80175d6:	f7fb fc71 	bl	8012ebc <HAL_RCC_GetPCLK2Freq>
 80175da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80175dc:	e02f      	b.n	801763e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80175de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7fc fbdc 	bl	8013da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80175e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80175ec:	e027      	b.n	801763e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80175ee:	f107 0318 	add.w	r3, r7, #24
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7fc fd28 	bl	8014048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80175fc:	e01f      	b.n	801763e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80175fe:	4b2d      	ldr	r3, [pc, #180]	; (80176b4 <UART_SetConfig+0x934>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	f003 0320 	and.w	r3, r3, #32
 8017606:	2b00      	cmp	r3, #0
 8017608:	d009      	beq.n	801761e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801760a:	4b2a      	ldr	r3, [pc, #168]	; (80176b4 <UART_SetConfig+0x934>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	08db      	lsrs	r3, r3, #3
 8017610:	f003 0303 	and.w	r3, r3, #3
 8017614:	4a24      	ldr	r2, [pc, #144]	; (80176a8 <UART_SetConfig+0x928>)
 8017616:	fa22 f303 	lsr.w	r3, r2, r3
 801761a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801761c:	e00f      	b.n	801763e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801761e:	4b22      	ldr	r3, [pc, #136]	; (80176a8 <UART_SetConfig+0x928>)
 8017620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017622:	e00c      	b.n	801763e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017624:	4b21      	ldr	r3, [pc, #132]	; (80176ac <UART_SetConfig+0x92c>)
 8017626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017628:	e009      	b.n	801763e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801762a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801762e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017630:	e005      	b.n	801763e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8017632:	2300      	movs	r3, #0
 8017634:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8017636:	2301      	movs	r3, #1
 8017638:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801763c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801763e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017640:	2b00      	cmp	r3, #0
 8017642:	f000 80e7 	beq.w	8017814 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017646:	697b      	ldr	r3, [r7, #20]
 8017648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801764a:	4a19      	ldr	r2, [pc, #100]	; (80176b0 <UART_SetConfig+0x930>)
 801764c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017650:	461a      	mov	r2, r3
 8017652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017654:	fbb3 f3f2 	udiv	r3, r3, r2
 8017658:	005a      	lsls	r2, r3, #1
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	685b      	ldr	r3, [r3, #4]
 801765e:	085b      	lsrs	r3, r3, #1
 8017660:	441a      	add	r2, r3
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	fbb2 f3f3 	udiv	r3, r2, r3
 801766a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801766e:	2b0f      	cmp	r3, #15
 8017670:	d916      	bls.n	80176a0 <UART_SetConfig+0x920>
 8017672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017678:	d212      	bcs.n	80176a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801767c:	b29b      	uxth	r3, r3
 801767e:	f023 030f 	bic.w	r3, r3, #15
 8017682:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017686:	085b      	lsrs	r3, r3, #1
 8017688:	b29b      	uxth	r3, r3
 801768a:	f003 0307 	and.w	r3, r3, #7
 801768e:	b29a      	uxth	r2, r3
 8017690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017692:	4313      	orrs	r3, r2
 8017694:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8017696:	697b      	ldr	r3, [r7, #20]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801769c:	60da      	str	r2, [r3, #12]
 801769e:	e0b9      	b.n	8017814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80176a0:	2301      	movs	r3, #1
 80176a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80176a6:	e0b5      	b.n	8017814 <UART_SetConfig+0xa94>
 80176a8:	03d09000 	.word	0x03d09000
 80176ac:	003d0900 	.word	0x003d0900
 80176b0:	08038bec 	.word	0x08038bec
 80176b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80176b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80176bc:	2b20      	cmp	r3, #32
 80176be:	dc49      	bgt.n	8017754 <UART_SetConfig+0x9d4>
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	db7c      	blt.n	80177be <UART_SetConfig+0xa3e>
 80176c4:	2b20      	cmp	r3, #32
 80176c6:	d87a      	bhi.n	80177be <UART_SetConfig+0xa3e>
 80176c8:	a201      	add	r2, pc, #4	; (adr r2, 80176d0 <UART_SetConfig+0x950>)
 80176ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176ce:	bf00      	nop
 80176d0:	0801775b 	.word	0x0801775b
 80176d4:	08017763 	.word	0x08017763
 80176d8:	080177bf 	.word	0x080177bf
 80176dc:	080177bf 	.word	0x080177bf
 80176e0:	0801776b 	.word	0x0801776b
 80176e4:	080177bf 	.word	0x080177bf
 80176e8:	080177bf 	.word	0x080177bf
 80176ec:	080177bf 	.word	0x080177bf
 80176f0:	0801777b 	.word	0x0801777b
 80176f4:	080177bf 	.word	0x080177bf
 80176f8:	080177bf 	.word	0x080177bf
 80176fc:	080177bf 	.word	0x080177bf
 8017700:	080177bf 	.word	0x080177bf
 8017704:	080177bf 	.word	0x080177bf
 8017708:	080177bf 	.word	0x080177bf
 801770c:	080177bf 	.word	0x080177bf
 8017710:	0801778b 	.word	0x0801778b
 8017714:	080177bf 	.word	0x080177bf
 8017718:	080177bf 	.word	0x080177bf
 801771c:	080177bf 	.word	0x080177bf
 8017720:	080177bf 	.word	0x080177bf
 8017724:	080177bf 	.word	0x080177bf
 8017728:	080177bf 	.word	0x080177bf
 801772c:	080177bf 	.word	0x080177bf
 8017730:	080177bf 	.word	0x080177bf
 8017734:	080177bf 	.word	0x080177bf
 8017738:	080177bf 	.word	0x080177bf
 801773c:	080177bf 	.word	0x080177bf
 8017740:	080177bf 	.word	0x080177bf
 8017744:	080177bf 	.word	0x080177bf
 8017748:	080177bf 	.word	0x080177bf
 801774c:	080177bf 	.word	0x080177bf
 8017750:	080177b1 	.word	0x080177b1
 8017754:	2b40      	cmp	r3, #64	; 0x40
 8017756:	d02e      	beq.n	80177b6 <UART_SetConfig+0xa36>
 8017758:	e031      	b.n	80177be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801775a:	f7fb fb99 	bl	8012e90 <HAL_RCC_GetPCLK1Freq>
 801775e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017760:	e033      	b.n	80177ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017762:	f7fb fbab 	bl	8012ebc <HAL_RCC_GetPCLK2Freq>
 8017766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017768:	e02f      	b.n	80177ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801776a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801776e:	4618      	mov	r0, r3
 8017770:	f7fc fb16 	bl	8013da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8017774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017778:	e027      	b.n	80177ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801777a:	f107 0318 	add.w	r3, r7, #24
 801777e:	4618      	mov	r0, r3
 8017780:	f7fc fc62 	bl	8014048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8017784:	69fb      	ldr	r3, [r7, #28]
 8017786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017788:	e01f      	b.n	80177ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801778a:	4b2d      	ldr	r3, [pc, #180]	; (8017840 <UART_SetConfig+0xac0>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	f003 0320 	and.w	r3, r3, #32
 8017792:	2b00      	cmp	r3, #0
 8017794:	d009      	beq.n	80177aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8017796:	4b2a      	ldr	r3, [pc, #168]	; (8017840 <UART_SetConfig+0xac0>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	08db      	lsrs	r3, r3, #3
 801779c:	f003 0303 	and.w	r3, r3, #3
 80177a0:	4a28      	ldr	r2, [pc, #160]	; (8017844 <UART_SetConfig+0xac4>)
 80177a2:	fa22 f303 	lsr.w	r3, r2, r3
 80177a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80177a8:	e00f      	b.n	80177ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80177aa:	4b26      	ldr	r3, [pc, #152]	; (8017844 <UART_SetConfig+0xac4>)
 80177ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80177ae:	e00c      	b.n	80177ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80177b0:	4b25      	ldr	r3, [pc, #148]	; (8017848 <UART_SetConfig+0xac8>)
 80177b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80177b4:	e009      	b.n	80177ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80177b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80177ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80177bc:	e005      	b.n	80177ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80177be:	2300      	movs	r3, #0
 80177c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80177c2:	2301      	movs	r3, #1
 80177c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80177c8:	bf00      	nop
    }

    if (pclk != 0U)
 80177ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d021      	beq.n	8017814 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177d4:	4a1d      	ldr	r2, [pc, #116]	; (801784c <UART_SetConfig+0xacc>)
 80177d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80177da:	461a      	mov	r2, r3
 80177dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177de:	fbb3 f2f2 	udiv	r2, r3, r2
 80177e2:	697b      	ldr	r3, [r7, #20]
 80177e4:	685b      	ldr	r3, [r3, #4]
 80177e6:	085b      	lsrs	r3, r3, #1
 80177e8:	441a      	add	r2, r3
 80177ea:	697b      	ldr	r3, [r7, #20]
 80177ec:	685b      	ldr	r3, [r3, #4]
 80177ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80177f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80177f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177f6:	2b0f      	cmp	r3, #15
 80177f8:	d909      	bls.n	801780e <UART_SetConfig+0xa8e>
 80177fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017800:	d205      	bcs.n	801780e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8017802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017804:	b29a      	uxth	r2, r3
 8017806:	697b      	ldr	r3, [r7, #20]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	60da      	str	r2, [r3, #12]
 801780c:	e002      	b.n	8017814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801780e:	2301      	movs	r3, #1
 8017810:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8017814:	697b      	ldr	r3, [r7, #20]
 8017816:	2201      	movs	r2, #1
 8017818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	2201      	movs	r2, #1
 8017820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017824:	697b      	ldr	r3, [r7, #20]
 8017826:	2200      	movs	r2, #0
 8017828:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	2200      	movs	r2, #0
 801782e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8017830:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8017834:	4618      	mov	r0, r3
 8017836:	3748      	adds	r7, #72	; 0x48
 8017838:	46bd      	mov	sp, r7
 801783a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801783e:	bf00      	nop
 8017840:	58024400 	.word	0x58024400
 8017844:	03d09000 	.word	0x03d09000
 8017848:	003d0900 	.word	0x003d0900
 801784c:	08038bec 	.word	0x08038bec

08017850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017850:	b480      	push	{r7}
 8017852:	b083      	sub	sp, #12
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801785c:	f003 0301 	and.w	r3, r3, #1
 8017860:	2b00      	cmp	r3, #0
 8017862:	d00a      	beq.n	801787a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	430a      	orrs	r2, r1
 8017878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801787e:	f003 0302 	and.w	r3, r3, #2
 8017882:	2b00      	cmp	r3, #0
 8017884:	d00a      	beq.n	801789c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	685b      	ldr	r3, [r3, #4]
 801788c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	430a      	orrs	r2, r1
 801789a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178a0:	f003 0304 	and.w	r3, r3, #4
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d00a      	beq.n	80178be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	430a      	orrs	r2, r1
 80178bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178c2:	f003 0308 	and.w	r3, r3, #8
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d00a      	beq.n	80178e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	685b      	ldr	r3, [r3, #4]
 80178d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	430a      	orrs	r2, r1
 80178de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178e4:	f003 0310 	and.w	r3, r3, #16
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d00a      	beq.n	8017902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	689b      	ldr	r3, [r3, #8]
 80178f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	430a      	orrs	r2, r1
 8017900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017906:	f003 0320 	and.w	r3, r3, #32
 801790a:	2b00      	cmp	r3, #0
 801790c:	d00a      	beq.n	8017924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	689b      	ldr	r3, [r3, #8]
 8017914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	430a      	orrs	r2, r1
 8017922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801792c:	2b00      	cmp	r3, #0
 801792e:	d01a      	beq.n	8017966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	685b      	ldr	r3, [r3, #4]
 8017936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	430a      	orrs	r2, r1
 8017944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801794a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801794e:	d10a      	bne.n	8017966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	430a      	orrs	r2, r1
 8017964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801796e:	2b00      	cmp	r3, #0
 8017970:	d00a      	beq.n	8017988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	430a      	orrs	r2, r1
 8017986:	605a      	str	r2, [r3, #4]
  }
}
 8017988:	bf00      	nop
 801798a:	370c      	adds	r7, #12
 801798c:	46bd      	mov	sp, r7
 801798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017992:	4770      	bx	lr

08017994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b086      	sub	sp, #24
 8017998:	af02      	add	r7, sp, #8
 801799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2200      	movs	r2, #0
 80179a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80179a4:	f7f4 fafe 	bl	800bfa4 <HAL_GetTick>
 80179a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	f003 0308 	and.w	r3, r3, #8
 80179b4:	2b08      	cmp	r3, #8
 80179b6:	d10e      	bne.n	80179d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80179b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80179bc:	9300      	str	r3, [sp, #0]
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	2200      	movs	r2, #0
 80179c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80179c6:	6878      	ldr	r0, [r7, #4]
 80179c8:	f000 f82f 	bl	8017a2a <UART_WaitOnFlagUntilTimeout>
 80179cc:	4603      	mov	r3, r0
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d001      	beq.n	80179d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80179d2:	2303      	movs	r3, #3
 80179d4:	e025      	b.n	8017a22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	f003 0304 	and.w	r3, r3, #4
 80179e0:	2b04      	cmp	r3, #4
 80179e2:	d10e      	bne.n	8017a02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80179e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80179e8:	9300      	str	r3, [sp, #0]
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	2200      	movs	r2, #0
 80179ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f000 f819 	bl	8017a2a <UART_WaitOnFlagUntilTimeout>
 80179f8:	4603      	mov	r3, r0
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d001      	beq.n	8017a02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80179fe:	2303      	movs	r3, #3
 8017a00:	e00f      	b.n	8017a22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2220      	movs	r2, #32
 8017a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2220      	movs	r2, #32
 8017a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	2200      	movs	r2, #0
 8017a16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017a20:	2300      	movs	r3, #0
}
 8017a22:	4618      	mov	r0, r3
 8017a24:	3710      	adds	r7, #16
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}

08017a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017a2a:	b580      	push	{r7, lr}
 8017a2c:	b09c      	sub	sp, #112	; 0x70
 8017a2e:	af00      	add	r7, sp, #0
 8017a30:	60f8      	str	r0, [r7, #12]
 8017a32:	60b9      	str	r1, [r7, #8]
 8017a34:	603b      	str	r3, [r7, #0]
 8017a36:	4613      	mov	r3, r2
 8017a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017a3a:	e0a9      	b.n	8017b90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a42:	f000 80a5 	beq.w	8017b90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a46:	f7f4 faad 	bl	800bfa4 <HAL_GetTick>
 8017a4a:	4602      	mov	r2, r0
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	1ad3      	subs	r3, r2, r3
 8017a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017a52:	429a      	cmp	r2, r3
 8017a54:	d302      	bcc.n	8017a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8017a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d140      	bne.n	8017ade <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a64:	e853 3f00 	ldrex	r3, [r3]
 8017a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017a70:	667b      	str	r3, [r7, #100]	; 0x64
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	461a      	mov	r2, r3
 8017a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017a7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017a82:	e841 2300 	strex	r3, r2, [r1]
 8017a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d1e6      	bne.n	8017a5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	3308      	adds	r3, #8
 8017a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a98:	e853 3f00 	ldrex	r3, [r3]
 8017a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aa0:	f023 0301 	bic.w	r3, r3, #1
 8017aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	3308      	adds	r3, #8
 8017aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8017ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017ab6:	e841 2300 	strex	r3, r2, [r1]
 8017aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d1e5      	bne.n	8017a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	2220      	movs	r2, #32
 8017ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	2220      	movs	r2, #32
 8017ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8017ada:	2303      	movs	r3, #3
 8017adc:	e069      	b.n	8017bb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	f003 0304 	and.w	r3, r3, #4
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d051      	beq.n	8017b90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	69db      	ldr	r3, [r3, #28]
 8017af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017afa:	d149      	bne.n	8017b90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017b04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b0e:	e853 3f00 	ldrex	r3, [r3]
 8017b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	461a      	mov	r2, r3
 8017b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b24:	637b      	str	r3, [r7, #52]	; 0x34
 8017b26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b2c:	e841 2300 	strex	r3, r2, [r1]
 8017b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1e6      	bne.n	8017b06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	3308      	adds	r3, #8
 8017b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	e853 3f00 	ldrex	r3, [r3]
 8017b46:	613b      	str	r3, [r7, #16]
   return(result);
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	f023 0301 	bic.w	r3, r3, #1
 8017b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	3308      	adds	r3, #8
 8017b56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017b58:	623a      	str	r2, [r7, #32]
 8017b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b5c:	69f9      	ldr	r1, [r7, #28]
 8017b5e:	6a3a      	ldr	r2, [r7, #32]
 8017b60:	e841 2300 	strex	r3, r2, [r1]
 8017b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8017b66:	69bb      	ldr	r3, [r7, #24]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d1e5      	bne.n	8017b38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	2220      	movs	r2, #32
 8017b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	2220      	movs	r2, #32
 8017b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	2220      	movs	r2, #32
 8017b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	2200      	movs	r2, #0
 8017b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8017b8c:	2303      	movs	r3, #3
 8017b8e:	e010      	b.n	8017bb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	69da      	ldr	r2, [r3, #28]
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	4013      	ands	r3, r2
 8017b9a:	68ba      	ldr	r2, [r7, #8]
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	bf0c      	ite	eq
 8017ba0:	2301      	moveq	r3, #1
 8017ba2:	2300      	movne	r3, #0
 8017ba4:	b2db      	uxtb	r3, r3
 8017ba6:	461a      	mov	r2, r3
 8017ba8:	79fb      	ldrb	r3, [r7, #7]
 8017baa:	429a      	cmp	r2, r3
 8017bac:	f43f af46 	beq.w	8017a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017bb0:	2300      	movs	r3, #0
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3770      	adds	r7, #112	; 0x70
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
	...

08017bbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017bbc:	b480      	push	{r7}
 8017bbe:	b0a3      	sub	sp, #140	; 0x8c
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	60f8      	str	r0, [r7, #12]
 8017bc4:	60b9      	str	r1, [r7, #8]
 8017bc6:	4613      	mov	r3, r2
 8017bc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	68ba      	ldr	r2, [r7, #8]
 8017bce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	88fa      	ldrh	r2, [r7, #6]
 8017bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	88fa      	ldrh	r2, [r7, #6]
 8017bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	2200      	movs	r2, #0
 8017be4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	689b      	ldr	r3, [r3, #8]
 8017bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017bee:	d10e      	bne.n	8017c0e <UART_Start_Receive_IT+0x52>
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	691b      	ldr	r3, [r3, #16]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d105      	bne.n	8017c04 <UART_Start_Receive_IT+0x48>
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8017bfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c02:	e02d      	b.n	8017c60 <UART_Start_Receive_IT+0xa4>
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	22ff      	movs	r2, #255	; 0xff
 8017c08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c0c:	e028      	b.n	8017c60 <UART_Start_Receive_IT+0xa4>
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	689b      	ldr	r3, [r3, #8]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d10d      	bne.n	8017c32 <UART_Start_Receive_IT+0x76>
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	691b      	ldr	r3, [r3, #16]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d104      	bne.n	8017c28 <UART_Start_Receive_IT+0x6c>
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	22ff      	movs	r2, #255	; 0xff
 8017c22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c26:	e01b      	b.n	8017c60 <UART_Start_Receive_IT+0xa4>
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	227f      	movs	r2, #127	; 0x7f
 8017c2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c30:	e016      	b.n	8017c60 <UART_Start_Receive_IT+0xa4>
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	689b      	ldr	r3, [r3, #8]
 8017c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017c3a:	d10d      	bne.n	8017c58 <UART_Start_Receive_IT+0x9c>
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	691b      	ldr	r3, [r3, #16]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d104      	bne.n	8017c4e <UART_Start_Receive_IT+0x92>
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	227f      	movs	r2, #127	; 0x7f
 8017c48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c4c:	e008      	b.n	8017c60 <UART_Start_Receive_IT+0xa4>
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	223f      	movs	r2, #63	; 0x3f
 8017c52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c56:	e003      	b.n	8017c60 <UART_Start_Receive_IT+0xa4>
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	2200      	movs	r2, #0
 8017c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	2222      	movs	r2, #34	; 0x22
 8017c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	3308      	adds	r3, #8
 8017c76:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c7a:	e853 3f00 	ldrex	r3, [r3]
 8017c7e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c82:	f043 0301 	orr.w	r3, r3, #1
 8017c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	3308      	adds	r3, #8
 8017c90:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017c94:	673a      	str	r2, [r7, #112]	; 0x70
 8017c96:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c98:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8017c9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017c9c:	e841 2300 	strex	r3, r2, [r1]
 8017ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8017ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d1e3      	bne.n	8017c70 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017cb0:	d153      	bne.n	8017d5a <UART_Start_Receive_IT+0x19e>
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017cb8:	88fa      	ldrh	r2, [r7, #6]
 8017cba:	429a      	cmp	r2, r3
 8017cbc:	d34d      	bcc.n	8017d5a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	689b      	ldr	r3, [r3, #8]
 8017cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017cc6:	d107      	bne.n	8017cd8 <UART_Start_Receive_IT+0x11c>
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	691b      	ldr	r3, [r3, #16]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d103      	bne.n	8017cd8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	4a4b      	ldr	r2, [pc, #300]	; (8017e00 <UART_Start_Receive_IT+0x244>)
 8017cd4:	671a      	str	r2, [r3, #112]	; 0x70
 8017cd6:	e002      	b.n	8017cde <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	4a4a      	ldr	r2, [pc, #296]	; (8017e04 <UART_Start_Receive_IT+0x248>)
 8017cdc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	691b      	ldr	r3, [r3, #16]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d01a      	beq.n	8017d24 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cf6:	e853 3f00 	ldrex	r3, [r3]
 8017cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017d12:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017d16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017d18:	e841 2300 	strex	r3, r2, [r1]
 8017d1c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d1e4      	bne.n	8017cee <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	3308      	adds	r3, #8
 8017d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d2e:	e853 3f00 	ldrex	r3, [r3]
 8017d32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	3308      	adds	r3, #8
 8017d42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017d44:	64ba      	str	r2, [r7, #72]	; 0x48
 8017d46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017d4c:	e841 2300 	strex	r3, r2, [r1]
 8017d50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d1e5      	bne.n	8017d24 <UART_Start_Receive_IT+0x168>
 8017d58:	e04a      	b.n	8017df0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	689b      	ldr	r3, [r3, #8]
 8017d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d62:	d107      	bne.n	8017d74 <UART_Start_Receive_IT+0x1b8>
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	691b      	ldr	r3, [r3, #16]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d103      	bne.n	8017d74 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	4a26      	ldr	r2, [pc, #152]	; (8017e08 <UART_Start_Receive_IT+0x24c>)
 8017d70:	671a      	str	r2, [r3, #112]	; 0x70
 8017d72:	e002      	b.n	8017d7a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	4a25      	ldr	r2, [pc, #148]	; (8017e0c <UART_Start_Receive_IT+0x250>)
 8017d78:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	691b      	ldr	r3, [r3, #16]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d019      	beq.n	8017dbe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d92:	e853 3f00 	ldrex	r3, [r3]
 8017d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8017d9e:	677b      	str	r3, [r7, #116]	; 0x74
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	461a      	mov	r2, r3
 8017da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017da8:	637b      	str	r3, [r7, #52]	; 0x34
 8017daa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017db0:	e841 2300 	strex	r3, r2, [r1]
 8017db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d1e6      	bne.n	8017d8a <UART_Start_Receive_IT+0x1ce>
 8017dbc:	e018      	b.n	8017df0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	e853 3f00 	ldrex	r3, [r3]
 8017dca:	613b      	str	r3, [r7, #16]
   return(result);
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	f043 0320 	orr.w	r3, r3, #32
 8017dd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	461a      	mov	r2, r3
 8017dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ddc:	623b      	str	r3, [r7, #32]
 8017dde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017de0:	69f9      	ldr	r1, [r7, #28]
 8017de2:	6a3a      	ldr	r2, [r7, #32]
 8017de4:	e841 2300 	strex	r3, r2, [r1]
 8017de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8017dea:	69bb      	ldr	r3, [r7, #24]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d1e6      	bne.n	8017dbe <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8017df0:	2300      	movs	r3, #0
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	378c      	adds	r7, #140	; 0x8c
 8017df6:	46bd      	mov	sp, r7
 8017df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfc:	4770      	bx	lr
 8017dfe:	bf00      	nop
 8017e00:	08018519 	.word	0x08018519
 8017e04:	08018221 	.word	0x08018221
 8017e08:	080180bf 	.word	0x080180bf
 8017e0c:	08017f5f 	.word	0x08017f5f

08017e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017e10:	b480      	push	{r7}
 8017e12:	b095      	sub	sp, #84	; 0x54
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e20:	e853 3f00 	ldrex	r3, [r3]
 8017e24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	461a      	mov	r2, r3
 8017e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e36:	643b      	str	r3, [r7, #64]	; 0x40
 8017e38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017e3e:	e841 2300 	strex	r3, r2, [r1]
 8017e42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d1e6      	bne.n	8017e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	3308      	adds	r3, #8
 8017e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e52:	6a3b      	ldr	r3, [r7, #32]
 8017e54:	e853 3f00 	ldrex	r3, [r3]
 8017e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8017e5a:	69fa      	ldr	r2, [r7, #28]
 8017e5c:	4b1e      	ldr	r3, [pc, #120]	; (8017ed8 <UART_EndRxTransfer+0xc8>)
 8017e5e:	4013      	ands	r3, r2
 8017e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	3308      	adds	r3, #8
 8017e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e72:	e841 2300 	strex	r3, r2, [r1]
 8017e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d1e5      	bne.n	8017e4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e82:	2b01      	cmp	r3, #1
 8017e84:	d118      	bne.n	8017eb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	e853 3f00 	ldrex	r3, [r3]
 8017e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8017e94:	68bb      	ldr	r3, [r7, #8]
 8017e96:	f023 0310 	bic.w	r3, r3, #16
 8017e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	461a      	mov	r2, r3
 8017ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ea4:	61bb      	str	r3, [r7, #24]
 8017ea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ea8:	6979      	ldr	r1, [r7, #20]
 8017eaa:	69ba      	ldr	r2, [r7, #24]
 8017eac:	e841 2300 	strex	r3, r2, [r1]
 8017eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8017eb2:	693b      	ldr	r3, [r7, #16]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d1e6      	bne.n	8017e86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	2220      	movs	r2, #32
 8017ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2200      	movs	r2, #0
 8017eca:	671a      	str	r2, [r3, #112]	; 0x70
}
 8017ecc:	bf00      	nop
 8017ece:	3754      	adds	r7, #84	; 0x54
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed6:	4770      	bx	lr
 8017ed8:	effffffe 	.word	0xeffffffe

08017edc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b084      	sub	sp, #16
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ee8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	2200      	movs	r2, #0
 8017eee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017efa:	68f8      	ldr	r0, [r7, #12]
 8017efc:	f7fe ff2a 	bl	8016d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f00:	bf00      	nop
 8017f02:	3710      	adds	r7, #16
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b088      	sub	sp, #32
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	e853 3f00 	ldrex	r3, [r3]
 8017f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017f24:	61fb      	str	r3, [r7, #28]
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	461a      	mov	r2, r3
 8017f2c:	69fb      	ldr	r3, [r7, #28]
 8017f2e:	61bb      	str	r3, [r7, #24]
 8017f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f32:	6979      	ldr	r1, [r7, #20]
 8017f34:	69ba      	ldr	r2, [r7, #24]
 8017f36:	e841 2300 	strex	r3, r2, [r1]
 8017f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d1e6      	bne.n	8017f10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	2220      	movs	r2, #32
 8017f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017f50:	6878      	ldr	r0, [r7, #4]
 8017f52:	f7f2 ff3f 	bl	800add4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f56:	bf00      	nop
 8017f58:	3720      	adds	r7, #32
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}

08017f5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017f5e:	b580      	push	{r7, lr}
 8017f60:	b096      	sub	sp, #88	; 0x58
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017f6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f76:	2b22      	cmp	r3, #34	; 0x22
 8017f78:	f040 8095 	bne.w	80180a6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017f86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8017f8a:	b2d9      	uxtb	r1, r3
 8017f8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8017f90:	b2da      	uxtb	r2, r3
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f96:	400a      	ands	r2, r1
 8017f98:	b2d2      	uxtb	r2, r2
 8017f9a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017fa0:	1c5a      	adds	r2, r3, #1
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017fac:	b29b      	uxth	r3, r3
 8017fae:	3b01      	subs	r3, #1
 8017fb0:	b29a      	uxth	r2, r3
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017fbe:	b29b      	uxth	r3, r3
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d178      	bne.n	80180b6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fcc:	e853 3f00 	ldrex	r3, [r3]
 8017fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017fd8:	653b      	str	r3, [r7, #80]	; 0x50
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	461a      	mov	r2, r3
 8017fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8017fe4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fe6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017fea:	e841 2300 	strex	r3, r2, [r1]
 8017fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d1e6      	bne.n	8017fc4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	3308      	adds	r3, #8
 8017ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018000:	e853 3f00 	ldrex	r3, [r3]
 8018004:	623b      	str	r3, [r7, #32]
   return(result);
 8018006:	6a3b      	ldr	r3, [r7, #32]
 8018008:	f023 0301 	bic.w	r3, r3, #1
 801800c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	3308      	adds	r3, #8
 8018014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018016:	633a      	str	r2, [r7, #48]	; 0x30
 8018018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801801a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801801c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801801e:	e841 2300 	strex	r3, r2, [r1]
 8018022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018026:	2b00      	cmp	r3, #0
 8018028:	d1e5      	bne.n	8017ff6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2220      	movs	r2, #32
 801802e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2200      	movs	r2, #0
 8018036:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801803c:	2b01      	cmp	r3, #1
 801803e:	d12e      	bne.n	801809e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	2200      	movs	r2, #0
 8018044:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801804c:	693b      	ldr	r3, [r7, #16]
 801804e:	e853 3f00 	ldrex	r3, [r3]
 8018052:	60fb      	str	r3, [r7, #12]
   return(result);
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	f023 0310 	bic.w	r3, r3, #16
 801805a:	64bb      	str	r3, [r7, #72]	; 0x48
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	461a      	mov	r2, r3
 8018062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018064:	61fb      	str	r3, [r7, #28]
 8018066:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018068:	69b9      	ldr	r1, [r7, #24]
 801806a:	69fa      	ldr	r2, [r7, #28]
 801806c:	e841 2300 	strex	r3, r2, [r1]
 8018070:	617b      	str	r3, [r7, #20]
   return(result);
 8018072:	697b      	ldr	r3, [r7, #20]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d1e6      	bne.n	8018046 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	69db      	ldr	r3, [r3, #28]
 801807e:	f003 0310 	and.w	r3, r3, #16
 8018082:	2b10      	cmp	r3, #16
 8018084:	d103      	bne.n	801808e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	2210      	movs	r2, #16
 801808c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018094:	4619      	mov	r1, r3
 8018096:	6878      	ldr	r0, [r7, #4]
 8018098:	f7fe fe66 	bl	8016d68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801809c:	e00b      	b.n	80180b6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	f7f2 fe74 	bl	800ad8c <HAL_UART_RxCpltCallback>
}
 80180a4:	e007      	b.n	80180b6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	699a      	ldr	r2, [r3, #24]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	f042 0208 	orr.w	r2, r2, #8
 80180b4:	619a      	str	r2, [r3, #24]
}
 80180b6:	bf00      	nop
 80180b8:	3758      	adds	r7, #88	; 0x58
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd80      	pop	{r7, pc}

080180be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80180be:	b580      	push	{r7, lr}
 80180c0:	b096      	sub	sp, #88	; 0x58
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80180cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180d6:	2b22      	cmp	r3, #34	; 0x22
 80180d8:	f040 8095 	bne.w	8018206 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180ea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80180ec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80180f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80180f4:	4013      	ands	r3, r2
 80180f6:	b29a      	uxth	r2, r3
 80180f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018100:	1c9a      	adds	r2, r3, #2
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801810c:	b29b      	uxth	r3, r3
 801810e:	3b01      	subs	r3, #1
 8018110:	b29a      	uxth	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801811e:	b29b      	uxth	r3, r3
 8018120:	2b00      	cmp	r3, #0
 8018122:	d178      	bne.n	8018216 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801812a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801812c:	e853 3f00 	ldrex	r3, [r3]
 8018130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018138:	64fb      	str	r3, [r7, #76]	; 0x4c
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	461a      	mov	r2, r3
 8018140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018142:	643b      	str	r3, [r7, #64]	; 0x40
 8018144:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801814a:	e841 2300 	strex	r3, r2, [r1]
 801814e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018152:	2b00      	cmp	r3, #0
 8018154:	d1e6      	bne.n	8018124 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	3308      	adds	r3, #8
 801815c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801815e:	6a3b      	ldr	r3, [r7, #32]
 8018160:	e853 3f00 	ldrex	r3, [r3]
 8018164:	61fb      	str	r3, [r7, #28]
   return(result);
 8018166:	69fb      	ldr	r3, [r7, #28]
 8018168:	f023 0301 	bic.w	r3, r3, #1
 801816c:	64bb      	str	r3, [r7, #72]	; 0x48
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	3308      	adds	r3, #8
 8018174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801817a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801817c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801817e:	e841 2300 	strex	r3, r2, [r1]
 8018182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018186:	2b00      	cmp	r3, #0
 8018188:	d1e5      	bne.n	8018156 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2220      	movs	r2, #32
 801818e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2200      	movs	r2, #0
 8018196:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801819c:	2b01      	cmp	r3, #1
 801819e:	d12e      	bne.n	80181fe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2200      	movs	r2, #0
 80181a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	e853 3f00 	ldrex	r3, [r3]
 80181b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	f023 0310 	bic.w	r3, r3, #16
 80181ba:	647b      	str	r3, [r7, #68]	; 0x44
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	461a      	mov	r2, r3
 80181c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181c4:	61bb      	str	r3, [r7, #24]
 80181c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181c8:	6979      	ldr	r1, [r7, #20]
 80181ca:	69ba      	ldr	r2, [r7, #24]
 80181cc:	e841 2300 	strex	r3, r2, [r1]
 80181d0:	613b      	str	r3, [r7, #16]
   return(result);
 80181d2:	693b      	ldr	r3, [r7, #16]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1e6      	bne.n	80181a6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	69db      	ldr	r3, [r3, #28]
 80181de:	f003 0310 	and.w	r3, r3, #16
 80181e2:	2b10      	cmp	r3, #16
 80181e4:	d103      	bne.n	80181ee <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	2210      	movs	r2, #16
 80181ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80181f4:	4619      	mov	r1, r3
 80181f6:	6878      	ldr	r0, [r7, #4]
 80181f8:	f7fe fdb6 	bl	8016d68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80181fc:	e00b      	b.n	8018216 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	f7f2 fdc4 	bl	800ad8c <HAL_UART_RxCpltCallback>
}
 8018204:	e007      	b.n	8018216 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	699a      	ldr	r2, [r3, #24]
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	f042 0208 	orr.w	r2, r2, #8
 8018214:	619a      	str	r2, [r3, #24]
}
 8018216:	bf00      	nop
 8018218:	3758      	adds	r7, #88	; 0x58
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}
	...

08018220 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b0a6      	sub	sp, #152	; 0x98
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801822e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	69db      	ldr	r3, [r3, #28]
 8018238:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	689b      	ldr	r3, [r3, #8]
 801824c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018256:	2b22      	cmp	r3, #34	; 0x22
 8018258:	f040 814d 	bne.w	80184f6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018262:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018266:	e0f4      	b.n	8018452 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801826e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018272:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8018276:	b2d9      	uxtb	r1, r3
 8018278:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801827c:	b2da      	uxtb	r2, r3
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018282:	400a      	ands	r2, r1
 8018284:	b2d2      	uxtb	r2, r2
 8018286:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801828c:	1c5a      	adds	r2, r3, #1
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018298:	b29b      	uxth	r3, r3
 801829a:	3b01      	subs	r3, #1
 801829c:	b29a      	uxth	r2, r3
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	69db      	ldr	r3, [r3, #28]
 80182aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80182ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80182b2:	f003 0307 	and.w	r3, r3, #7
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d053      	beq.n	8018362 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80182ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80182be:	f003 0301 	and.w	r3, r3, #1
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d011      	beq.n	80182ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80182c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80182ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d00b      	beq.n	80182ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	2201      	movs	r2, #1
 80182d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80182e0:	f043 0201 	orr.w	r2, r3, #1
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80182ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80182ee:	f003 0302 	and.w	r3, r3, #2
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d011      	beq.n	801831a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80182f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80182fa:	f003 0301 	and.w	r3, r3, #1
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d00b      	beq.n	801831a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	2202      	movs	r2, #2
 8018308:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018310:	f043 0204 	orr.w	r2, r3, #4
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801831a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801831e:	f003 0304 	and.w	r3, r3, #4
 8018322:	2b00      	cmp	r3, #0
 8018324:	d011      	beq.n	801834a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8018326:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801832a:	f003 0301 	and.w	r3, r3, #1
 801832e:	2b00      	cmp	r3, #0
 8018330:	d00b      	beq.n	801834a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2204      	movs	r2, #4
 8018338:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018340:	f043 0202 	orr.w	r2, r3, #2
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018350:	2b00      	cmp	r3, #0
 8018352:	d006      	beq.n	8018362 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f7fe fcfd 	bl	8016d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2200      	movs	r2, #0
 801835e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018368:	b29b      	uxth	r3, r3
 801836a:	2b00      	cmp	r3, #0
 801836c:	d171      	bne.n	8018452 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018376:	e853 3f00 	ldrex	r3, [r3]
 801837a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801837c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801837e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	461a      	mov	r2, r3
 801838c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018390:	66bb      	str	r3, [r7, #104]	; 0x68
 8018392:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018394:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8018396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018398:	e841 2300 	strex	r3, r2, [r1]
 801839c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801839e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d1e4      	bne.n	801836e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	3308      	adds	r3, #8
 80183aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183ae:	e853 3f00 	ldrex	r3, [r3]
 80183b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80183b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80183b6:	4b56      	ldr	r3, [pc, #344]	; (8018510 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80183b8:	4013      	ands	r3, r2
 80183ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	3308      	adds	r3, #8
 80183c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80183c4:	657a      	str	r2, [r7, #84]	; 0x54
 80183c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80183ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80183cc:	e841 2300 	strex	r3, r2, [r1]
 80183d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80183d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d1e5      	bne.n	80183a4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2220      	movs	r2, #32
 80183dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	2200      	movs	r2, #0
 80183e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183ea:	2b01      	cmp	r3, #1
 80183ec:	d12e      	bne.n	801844c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	2200      	movs	r2, #0
 80183f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183fc:	e853 3f00 	ldrex	r3, [r3]
 8018400:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018404:	f023 0310 	bic.w	r3, r3, #16
 8018408:	67bb      	str	r3, [r7, #120]	; 0x78
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	461a      	mov	r2, r3
 8018410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018412:	643b      	str	r3, [r7, #64]	; 0x40
 8018414:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801841a:	e841 2300 	strex	r3, r2, [r1]
 801841e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018422:	2b00      	cmp	r3, #0
 8018424:	d1e6      	bne.n	80183f4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	69db      	ldr	r3, [r3, #28]
 801842c:	f003 0310 	and.w	r3, r3, #16
 8018430:	2b10      	cmp	r3, #16
 8018432:	d103      	bne.n	801843c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	2210      	movs	r2, #16
 801843a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018442:	4619      	mov	r1, r3
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f7fe fc8f 	bl	8016d68 <HAL_UARTEx_RxEventCallback>
 801844a:	e002      	b.n	8018452 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f7f2 fc9d 	bl	800ad8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018452:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8018456:	2b00      	cmp	r3, #0
 8018458:	d006      	beq.n	8018468 <UART_RxISR_8BIT_FIFOEN+0x248>
 801845a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801845e:	f003 0320 	and.w	r3, r3, #32
 8018462:	2b00      	cmp	r3, #0
 8018464:	f47f af00 	bne.w	8018268 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801846e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018472:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8018476:	2b00      	cmp	r3, #0
 8018478:	d045      	beq.n	8018506 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018480:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8018484:	429a      	cmp	r2, r3
 8018486:	d23e      	bcs.n	8018506 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	3308      	adds	r3, #8
 801848e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018490:	6a3b      	ldr	r3, [r7, #32]
 8018492:	e853 3f00 	ldrex	r3, [r3]
 8018496:	61fb      	str	r3, [r7, #28]
   return(result);
 8018498:	69fb      	ldr	r3, [r7, #28]
 801849a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801849e:	673b      	str	r3, [r7, #112]	; 0x70
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	3308      	adds	r3, #8
 80184a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80184a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80184aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80184ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184b0:	e841 2300 	strex	r3, r2, [r1]
 80184b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80184b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d1e5      	bne.n	8018488 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	4a15      	ldr	r2, [pc, #84]	; (8018514 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80184c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	e853 3f00 	ldrex	r3, [r3]
 80184ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	f043 0320 	orr.w	r3, r3, #32
 80184d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	461a      	mov	r2, r3
 80184de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80184e0:	61bb      	str	r3, [r7, #24]
 80184e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184e4:	6979      	ldr	r1, [r7, #20]
 80184e6:	69ba      	ldr	r2, [r7, #24]
 80184e8:	e841 2300 	strex	r3, r2, [r1]
 80184ec:	613b      	str	r3, [r7, #16]
   return(result);
 80184ee:	693b      	ldr	r3, [r7, #16]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d1e6      	bne.n	80184c2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80184f4:	e007      	b.n	8018506 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	699a      	ldr	r2, [r3, #24]
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	f042 0208 	orr.w	r2, r2, #8
 8018504:	619a      	str	r2, [r3, #24]
}
 8018506:	bf00      	nop
 8018508:	3798      	adds	r7, #152	; 0x98
 801850a:	46bd      	mov	sp, r7
 801850c:	bd80      	pop	{r7, pc}
 801850e:	bf00      	nop
 8018510:	effffffe 	.word	0xeffffffe
 8018514:	08017f5f 	.word	0x08017f5f

08018518 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b0a8      	sub	sp, #160	; 0xa0
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018526:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	69db      	ldr	r3, [r3, #28]
 8018530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	689b      	ldr	r3, [r3, #8]
 8018544:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801854e:	2b22      	cmp	r3, #34	; 0x22
 8018550:	f040 8151 	bne.w	80187f6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801855a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801855e:	e0f8      	b.n	8018752 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018566:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801856e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8018572:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8018576:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801857a:	4013      	ands	r3, r2
 801857c:	b29a      	uxth	r2, r3
 801857e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018582:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018588:	1c9a      	adds	r2, r3, #2
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018594:	b29b      	uxth	r3, r3
 8018596:	3b01      	subs	r3, #1
 8018598:	b29a      	uxth	r2, r3
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	69db      	ldr	r3, [r3, #28]
 80185a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80185aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80185ae:	f003 0307 	and.w	r3, r3, #7
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d053      	beq.n	801865e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80185b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80185ba:	f003 0301 	and.w	r3, r3, #1
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d011      	beq.n	80185e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80185c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80185c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d00b      	beq.n	80185e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	2201      	movs	r2, #1
 80185d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80185dc:	f043 0201 	orr.w	r2, r3, #1
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80185e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80185ea:	f003 0302 	and.w	r3, r3, #2
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d011      	beq.n	8018616 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80185f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80185f6:	f003 0301 	and.w	r3, r3, #1
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d00b      	beq.n	8018616 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	2202      	movs	r2, #2
 8018604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801860c:	f043 0204 	orr.w	r2, r3, #4
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018616:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801861a:	f003 0304 	and.w	r3, r3, #4
 801861e:	2b00      	cmp	r3, #0
 8018620:	d011      	beq.n	8018646 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8018622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018626:	f003 0301 	and.w	r3, r3, #1
 801862a:	2b00      	cmp	r3, #0
 801862c:	d00b      	beq.n	8018646 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2204      	movs	r2, #4
 8018634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801863c:	f043 0202 	orr.w	r2, r3, #2
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801864c:	2b00      	cmp	r3, #0
 801864e:	d006      	beq.n	801865e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f7fe fb7f 	bl	8016d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	2200      	movs	r2, #0
 801865a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018664:	b29b      	uxth	r3, r3
 8018666:	2b00      	cmp	r3, #0
 8018668:	d173      	bne.n	8018752 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018672:	e853 3f00 	ldrex	r3, [r3]
 8018676:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8018678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801867a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801867e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	461a      	mov	r2, r3
 8018688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801868c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801868e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018690:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018692:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018694:	e841 2300 	strex	r3, r2, [r1]
 8018698:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801869a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801869c:	2b00      	cmp	r3, #0
 801869e:	d1e4      	bne.n	801866a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	3308      	adds	r3, #8
 80186a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186aa:	e853 3f00 	ldrex	r3, [r3]
 80186ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80186b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80186b2:	4b57      	ldr	r3, [pc, #348]	; (8018810 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80186b4:	4013      	ands	r3, r2
 80186b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	3308      	adds	r3, #8
 80186c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80186c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80186c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80186ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80186cc:	e841 2300 	strex	r3, r2, [r1]
 80186d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80186d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d1e3      	bne.n	80186a0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2220      	movs	r2, #32
 80186dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	2200      	movs	r2, #0
 80186e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	d12e      	bne.n	801874c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	2200      	movs	r2, #0
 80186f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186fc:	e853 3f00 	ldrex	r3, [r3]
 8018700:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018704:	f023 0310 	bic.w	r3, r3, #16
 8018708:	67fb      	str	r3, [r7, #124]	; 0x7c
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	461a      	mov	r2, r3
 8018710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018712:	647b      	str	r3, [r7, #68]	; 0x44
 8018714:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801871a:	e841 2300 	strex	r3, r2, [r1]
 801871e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018722:	2b00      	cmp	r3, #0
 8018724:	d1e6      	bne.n	80186f4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	69db      	ldr	r3, [r3, #28]
 801872c:	f003 0310 	and.w	r3, r3, #16
 8018730:	2b10      	cmp	r3, #16
 8018732:	d103      	bne.n	801873c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2210      	movs	r2, #16
 801873a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018742:	4619      	mov	r1, r3
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	f7fe fb0f 	bl	8016d68 <HAL_UARTEx_RxEventCallback>
 801874a:	e002      	b.n	8018752 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f7f2 fb1d 	bl	800ad8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018752:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018756:	2b00      	cmp	r3, #0
 8018758:	d006      	beq.n	8018768 <UART_RxISR_16BIT_FIFOEN+0x250>
 801875a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801875e:	f003 0320 	and.w	r3, r3, #32
 8018762:	2b00      	cmp	r3, #0
 8018764:	f47f aefc 	bne.w	8018560 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801876e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018772:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8018776:	2b00      	cmp	r3, #0
 8018778:	d045      	beq.n	8018806 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018780:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8018784:	429a      	cmp	r2, r3
 8018786:	d23e      	bcs.n	8018806 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	3308      	adds	r3, #8
 801878e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018792:	e853 3f00 	ldrex	r3, [r3]
 8018796:	623b      	str	r3, [r7, #32]
   return(result);
 8018798:	6a3b      	ldr	r3, [r7, #32]
 801879a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801879e:	677b      	str	r3, [r7, #116]	; 0x74
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	3308      	adds	r3, #8
 80187a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80187a8:	633a      	str	r2, [r7, #48]	; 0x30
 80187aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80187ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187b0:	e841 2300 	strex	r3, r2, [r1]
 80187b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80187b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d1e5      	bne.n	8018788 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	4a15      	ldr	r2, [pc, #84]	; (8018814 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80187c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	e853 3f00 	ldrex	r3, [r3]
 80187ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	f043 0320 	orr.w	r3, r3, #32
 80187d6:	673b      	str	r3, [r7, #112]	; 0x70
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	461a      	mov	r2, r3
 80187de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80187e0:	61fb      	str	r3, [r7, #28]
 80187e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187e4:	69b9      	ldr	r1, [r7, #24]
 80187e6:	69fa      	ldr	r2, [r7, #28]
 80187e8:	e841 2300 	strex	r3, r2, [r1]
 80187ec:	617b      	str	r3, [r7, #20]
   return(result);
 80187ee:	697b      	ldr	r3, [r7, #20]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d1e6      	bne.n	80187c2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80187f4:	e007      	b.n	8018806 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	699a      	ldr	r2, [r3, #24]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	f042 0208 	orr.w	r2, r2, #8
 8018804:	619a      	str	r2, [r3, #24]
}
 8018806:	bf00      	nop
 8018808:	37a0      	adds	r7, #160	; 0xa0
 801880a:	46bd      	mov	sp, r7
 801880c:	bd80      	pop	{r7, pc}
 801880e:	bf00      	nop
 8018810:	effffffe 	.word	0xeffffffe
 8018814:	080180bf 	.word	0x080180bf

08018818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018818:	b480      	push	{r7}
 801881a:	b083      	sub	sp, #12
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018820:	bf00      	nop
 8018822:	370c      	adds	r7, #12
 8018824:	46bd      	mov	sp, r7
 8018826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882a:	4770      	bx	lr

0801882c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801882c:	b480      	push	{r7}
 801882e:	b083      	sub	sp, #12
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018834:	bf00      	nop
 8018836:	370c      	adds	r7, #12
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr

08018840 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018840:	b480      	push	{r7}
 8018842:	b083      	sub	sp, #12
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018848:	bf00      	nop
 801884a:	370c      	adds	r7, #12
 801884c:	46bd      	mov	sp, r7
 801884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018852:	4770      	bx	lr

08018854 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018862:	2b01      	cmp	r3, #1
 8018864:	d101      	bne.n	801886a <HAL_UARTEx_EnableFifoMode+0x16>
 8018866:	2302      	movs	r3, #2
 8018868:	e02b      	b.n	80188c2 <HAL_UARTEx_EnableFifoMode+0x6e>
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2201      	movs	r2, #1
 801886e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	2224      	movs	r2, #36	; 0x24
 8018876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	681a      	ldr	r2, [r3, #0]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	f022 0201 	bic.w	r2, r2, #1
 8018890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80188a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	68fa      	ldr	r2, [r7, #12]
 80188a8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80188aa:	6878      	ldr	r0, [r7, #4]
 80188ac:	f000 f8c2 	bl	8018a34 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	2220      	movs	r2, #32
 80188b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	2200      	movs	r2, #0
 80188bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80188c0:	2300      	movs	r3, #0
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	3710      	adds	r7, #16
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}

080188ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80188ca:	b480      	push	{r7}
 80188cc:	b085      	sub	sp, #20
 80188ce:	af00      	add	r7, sp, #0
 80188d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80188d8:	2b01      	cmp	r3, #1
 80188da:	d101      	bne.n	80188e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80188dc:	2302      	movs	r3, #2
 80188de:	e027      	b.n	8018930 <HAL_UARTEx_DisableFifoMode+0x66>
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2201      	movs	r2, #1
 80188e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	2224      	movs	r2, #36	; 0x24
 80188ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	681a      	ldr	r2, [r3, #0]
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	f022 0201 	bic.w	r2, r2, #1
 8018906:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801890e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2200      	movs	r2, #0
 8018914:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	68fa      	ldr	r2, [r7, #12]
 801891c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2220      	movs	r2, #32
 8018922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	2200      	movs	r2, #0
 801892a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801892e:	2300      	movs	r3, #0
}
 8018930:	4618      	mov	r0, r3
 8018932:	3714      	adds	r7, #20
 8018934:	46bd      	mov	sp, r7
 8018936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893a:	4770      	bx	lr

0801893c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b084      	sub	sp, #16
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
 8018944:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801894c:	2b01      	cmp	r3, #1
 801894e:	d101      	bne.n	8018954 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018950:	2302      	movs	r3, #2
 8018952:	e02d      	b.n	80189b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2201      	movs	r2, #1
 8018958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2224      	movs	r2, #36	; 0x24
 8018960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	681a      	ldr	r2, [r3, #0]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	f022 0201 	bic.w	r2, r2, #1
 801897a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	689b      	ldr	r3, [r3, #8]
 8018982:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	683a      	ldr	r2, [r7, #0]
 801898c:	430a      	orrs	r2, r1
 801898e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018990:	6878      	ldr	r0, [r7, #4]
 8018992:	f000 f84f 	bl	8018a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	68fa      	ldr	r2, [r7, #12]
 801899c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	2220      	movs	r2, #32
 80189a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2200      	movs	r2, #0
 80189aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80189ae:	2300      	movs	r3, #0
}
 80189b0:	4618      	mov	r0, r3
 80189b2:	3710      	adds	r7, #16
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd80      	pop	{r7, pc}

080189b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b084      	sub	sp, #16
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
 80189c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80189c8:	2b01      	cmp	r3, #1
 80189ca:	d101      	bne.n	80189d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80189cc:	2302      	movs	r3, #2
 80189ce:	e02d      	b.n	8018a2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	2201      	movs	r2, #1
 80189d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	2224      	movs	r2, #36	; 0x24
 80189dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f022 0201 	bic.w	r2, r2, #1
 80189f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	689b      	ldr	r3, [r3, #8]
 80189fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	683a      	ldr	r2, [r7, #0]
 8018a08:	430a      	orrs	r2, r1
 8018a0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f000 f811 	bl	8018a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	68fa      	ldr	r2, [r7, #12]
 8018a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	2220      	movs	r2, #32
 8018a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	2200      	movs	r2, #0
 8018a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018a2a:	2300      	movs	r3, #0
}
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3710      	adds	r7, #16
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}

08018a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018a34:	b480      	push	{r7}
 8018a36:	b085      	sub	sp, #20
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d108      	bne.n	8018a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2201      	movs	r2, #1
 8018a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	2201      	movs	r2, #1
 8018a50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018a54:	e031      	b.n	8018aba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018a56:	2310      	movs	r3, #16
 8018a58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018a5a:	2310      	movs	r3, #16
 8018a5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	689b      	ldr	r3, [r3, #8]
 8018a64:	0e5b      	lsrs	r3, r3, #25
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	f003 0307 	and.w	r3, r3, #7
 8018a6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	689b      	ldr	r3, [r3, #8]
 8018a74:	0f5b      	lsrs	r3, r3, #29
 8018a76:	b2db      	uxtb	r3, r3
 8018a78:	f003 0307 	and.w	r3, r3, #7
 8018a7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018a7e:	7bbb      	ldrb	r3, [r7, #14]
 8018a80:	7b3a      	ldrb	r2, [r7, #12]
 8018a82:	4911      	ldr	r1, [pc, #68]	; (8018ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8018a84:	5c8a      	ldrb	r2, [r1, r2]
 8018a86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018a8a:	7b3a      	ldrb	r2, [r7, #12]
 8018a8c:	490f      	ldr	r1, [pc, #60]	; (8018acc <UARTEx_SetNbDataToProcess+0x98>)
 8018a8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a94:	b29a      	uxth	r2, r3
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018a9c:	7bfb      	ldrb	r3, [r7, #15]
 8018a9e:	7b7a      	ldrb	r2, [r7, #13]
 8018aa0:	4909      	ldr	r1, [pc, #36]	; (8018ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8018aa2:	5c8a      	ldrb	r2, [r1, r2]
 8018aa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018aa8:	7b7a      	ldrb	r2, [r7, #13]
 8018aaa:	4908      	ldr	r1, [pc, #32]	; (8018acc <UARTEx_SetNbDataToProcess+0x98>)
 8018aac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8018ab2:	b29a      	uxth	r2, r3
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018aba:	bf00      	nop
 8018abc:	3714      	adds	r7, #20
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop
 8018ac8:	08038c04 	.word	0x08038c04
 8018acc:	08038c0c 	.word	0x08038c0c

08018ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018ad0:	b084      	sub	sp, #16
 8018ad2:	b580      	push	{r7, lr}
 8018ad4:	b084      	sub	sp, #16
 8018ad6:	af00      	add	r7, sp, #0
 8018ad8:	6078      	str	r0, [r7, #4]
 8018ada:	f107 001c 	add.w	r0, r7, #28
 8018ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae4:	2b01      	cmp	r3, #1
 8018ae6:	d120      	bne.n	8018b2a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	68da      	ldr	r2, [r3, #12]
 8018af8:	4b2a      	ldr	r3, [pc, #168]	; (8018ba4 <USB_CoreInit+0xd4>)
 8018afa:	4013      	ands	r3, r2
 8018afc:	687a      	ldr	r2, [r7, #4]
 8018afe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	68db      	ldr	r3, [r3, #12]
 8018b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8018b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b0e:	2b01      	cmp	r3, #1
 8018b10:	d105      	bne.n	8018b1e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	68db      	ldr	r3, [r3, #12]
 8018b16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f001 fc04 	bl	801a32c <USB_CoreReset>
 8018b24:	4603      	mov	r3, r0
 8018b26:	73fb      	strb	r3, [r7, #15]
 8018b28:	e01a      	b.n	8018b60 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f001 fbf8 	bl	801a32c <USB_CoreReset>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8018b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d106      	bne.n	8018b54 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	639a      	str	r2, [r3, #56]	; 0x38
 8018b52:	e005      	b.n	8018b60 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8018b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b62:	2b01      	cmp	r3, #1
 8018b64:	d116      	bne.n	8018b94 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b6a:	b29a      	uxth	r2, r3
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018b74:	4b0c      	ldr	r3, [pc, #48]	; (8018ba8 <USB_CoreInit+0xd8>)
 8018b76:	4313      	orrs	r3, r2
 8018b78:	687a      	ldr	r2, [r7, #4]
 8018b7a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	689b      	ldr	r3, [r3, #8]
 8018b80:	f043 0206 	orr.w	r2, r3, #6
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	689b      	ldr	r3, [r3, #8]
 8018b8c:	f043 0220 	orr.w	r2, r3, #32
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8018b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	3710      	adds	r7, #16
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018ba0:	b004      	add	sp, #16
 8018ba2:	4770      	bx	lr
 8018ba4:	ffbdffbf 	.word	0xffbdffbf
 8018ba8:	03ee0000 	.word	0x03ee0000

08018bac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8018bac:	b480      	push	{r7}
 8018bae:	b087      	sub	sp, #28
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	60f8      	str	r0, [r7, #12]
 8018bb4:	60b9      	str	r1, [r7, #8]
 8018bb6:	4613      	mov	r3, r2
 8018bb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8018bba:	79fb      	ldrb	r3, [r7, #7]
 8018bbc:	2b02      	cmp	r3, #2
 8018bbe:	d165      	bne.n	8018c8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8018bc0:	68bb      	ldr	r3, [r7, #8]
 8018bc2:	4a41      	ldr	r2, [pc, #260]	; (8018cc8 <USB_SetTurnaroundTime+0x11c>)
 8018bc4:	4293      	cmp	r3, r2
 8018bc6:	d906      	bls.n	8018bd6 <USB_SetTurnaroundTime+0x2a>
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	4a40      	ldr	r2, [pc, #256]	; (8018ccc <USB_SetTurnaroundTime+0x120>)
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	d202      	bcs.n	8018bd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8018bd0:	230f      	movs	r3, #15
 8018bd2:	617b      	str	r3, [r7, #20]
 8018bd4:	e062      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	4a3c      	ldr	r2, [pc, #240]	; (8018ccc <USB_SetTurnaroundTime+0x120>)
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	d306      	bcc.n	8018bec <USB_SetTurnaroundTime+0x40>
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	4a3b      	ldr	r2, [pc, #236]	; (8018cd0 <USB_SetTurnaroundTime+0x124>)
 8018be2:	4293      	cmp	r3, r2
 8018be4:	d202      	bcs.n	8018bec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8018be6:	230e      	movs	r3, #14
 8018be8:	617b      	str	r3, [r7, #20]
 8018bea:	e057      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8018bec:	68bb      	ldr	r3, [r7, #8]
 8018bee:	4a38      	ldr	r2, [pc, #224]	; (8018cd0 <USB_SetTurnaroundTime+0x124>)
 8018bf0:	4293      	cmp	r3, r2
 8018bf2:	d306      	bcc.n	8018c02 <USB_SetTurnaroundTime+0x56>
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	4a37      	ldr	r2, [pc, #220]	; (8018cd4 <USB_SetTurnaroundTime+0x128>)
 8018bf8:	4293      	cmp	r3, r2
 8018bfa:	d202      	bcs.n	8018c02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8018bfc:	230d      	movs	r3, #13
 8018bfe:	617b      	str	r3, [r7, #20]
 8018c00:	e04c      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	4a33      	ldr	r2, [pc, #204]	; (8018cd4 <USB_SetTurnaroundTime+0x128>)
 8018c06:	4293      	cmp	r3, r2
 8018c08:	d306      	bcc.n	8018c18 <USB_SetTurnaroundTime+0x6c>
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	4a32      	ldr	r2, [pc, #200]	; (8018cd8 <USB_SetTurnaroundTime+0x12c>)
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	d802      	bhi.n	8018c18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8018c12:	230c      	movs	r3, #12
 8018c14:	617b      	str	r3, [r7, #20]
 8018c16:	e041      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8018c18:	68bb      	ldr	r3, [r7, #8]
 8018c1a:	4a2f      	ldr	r2, [pc, #188]	; (8018cd8 <USB_SetTurnaroundTime+0x12c>)
 8018c1c:	4293      	cmp	r3, r2
 8018c1e:	d906      	bls.n	8018c2e <USB_SetTurnaroundTime+0x82>
 8018c20:	68bb      	ldr	r3, [r7, #8]
 8018c22:	4a2e      	ldr	r2, [pc, #184]	; (8018cdc <USB_SetTurnaroundTime+0x130>)
 8018c24:	4293      	cmp	r3, r2
 8018c26:	d802      	bhi.n	8018c2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8018c28:	230b      	movs	r3, #11
 8018c2a:	617b      	str	r3, [r7, #20]
 8018c2c:	e036      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	4a2a      	ldr	r2, [pc, #168]	; (8018cdc <USB_SetTurnaroundTime+0x130>)
 8018c32:	4293      	cmp	r3, r2
 8018c34:	d906      	bls.n	8018c44 <USB_SetTurnaroundTime+0x98>
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	4a29      	ldr	r2, [pc, #164]	; (8018ce0 <USB_SetTurnaroundTime+0x134>)
 8018c3a:	4293      	cmp	r3, r2
 8018c3c:	d802      	bhi.n	8018c44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8018c3e:	230a      	movs	r3, #10
 8018c40:	617b      	str	r3, [r7, #20]
 8018c42:	e02b      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	4a26      	ldr	r2, [pc, #152]	; (8018ce0 <USB_SetTurnaroundTime+0x134>)
 8018c48:	4293      	cmp	r3, r2
 8018c4a:	d906      	bls.n	8018c5a <USB_SetTurnaroundTime+0xae>
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	4a25      	ldr	r2, [pc, #148]	; (8018ce4 <USB_SetTurnaroundTime+0x138>)
 8018c50:	4293      	cmp	r3, r2
 8018c52:	d202      	bcs.n	8018c5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8018c54:	2309      	movs	r3, #9
 8018c56:	617b      	str	r3, [r7, #20]
 8018c58:	e020      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8018c5a:	68bb      	ldr	r3, [r7, #8]
 8018c5c:	4a21      	ldr	r2, [pc, #132]	; (8018ce4 <USB_SetTurnaroundTime+0x138>)
 8018c5e:	4293      	cmp	r3, r2
 8018c60:	d306      	bcc.n	8018c70 <USB_SetTurnaroundTime+0xc4>
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	4a20      	ldr	r2, [pc, #128]	; (8018ce8 <USB_SetTurnaroundTime+0x13c>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d802      	bhi.n	8018c70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8018c6a:	2308      	movs	r3, #8
 8018c6c:	617b      	str	r3, [r7, #20]
 8018c6e:	e015      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8018c70:	68bb      	ldr	r3, [r7, #8]
 8018c72:	4a1d      	ldr	r2, [pc, #116]	; (8018ce8 <USB_SetTurnaroundTime+0x13c>)
 8018c74:	4293      	cmp	r3, r2
 8018c76:	d906      	bls.n	8018c86 <USB_SetTurnaroundTime+0xda>
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	4a1c      	ldr	r2, [pc, #112]	; (8018cec <USB_SetTurnaroundTime+0x140>)
 8018c7c:	4293      	cmp	r3, r2
 8018c7e:	d202      	bcs.n	8018c86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8018c80:	2307      	movs	r3, #7
 8018c82:	617b      	str	r3, [r7, #20]
 8018c84:	e00a      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8018c86:	2306      	movs	r3, #6
 8018c88:	617b      	str	r3, [r7, #20]
 8018c8a:	e007      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8018c8c:	79fb      	ldrb	r3, [r7, #7]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d102      	bne.n	8018c98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8018c92:	2309      	movs	r3, #9
 8018c94:	617b      	str	r3, [r7, #20]
 8018c96:	e001      	b.n	8018c9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8018c98:	2309      	movs	r3, #9
 8018c9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	68db      	ldr	r3, [r3, #12]
 8018ca0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	68da      	ldr	r2, [r3, #12]
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	029b      	lsls	r3, r3, #10
 8018cb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8018cb4:	431a      	orrs	r2, r3
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8018cba:	2300      	movs	r3, #0
}
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	371c      	adds	r7, #28
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc6:	4770      	bx	lr
 8018cc8:	00d8acbf 	.word	0x00d8acbf
 8018ccc:	00e4e1c0 	.word	0x00e4e1c0
 8018cd0:	00f42400 	.word	0x00f42400
 8018cd4:	01067380 	.word	0x01067380
 8018cd8:	011a499f 	.word	0x011a499f
 8018cdc:	01312cff 	.word	0x01312cff
 8018ce0:	014ca43f 	.word	0x014ca43f
 8018ce4:	016e3600 	.word	0x016e3600
 8018ce8:	01a6ab1f 	.word	0x01a6ab1f
 8018cec:	01e84800 	.word	0x01e84800

08018cf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8018cf0:	b480      	push	{r7}
 8018cf2:	b083      	sub	sp, #12
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	689b      	ldr	r3, [r3, #8]
 8018cfc:	f043 0201 	orr.w	r2, r3, #1
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8018d04:	2300      	movs	r3, #0
}
 8018d06:	4618      	mov	r0, r3
 8018d08:	370c      	adds	r7, #12
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d10:	4770      	bx	lr

08018d12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8018d12:	b480      	push	{r7}
 8018d14:	b083      	sub	sp, #12
 8018d16:	af00      	add	r7, sp, #0
 8018d18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	689b      	ldr	r3, [r3, #8]
 8018d1e:	f023 0201 	bic.w	r2, r3, #1
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8018d26:	2300      	movs	r3, #0
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	370c      	adds	r7, #12
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d32:	4770      	bx	lr

08018d34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b084      	sub	sp, #16
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
 8018d3c:	460b      	mov	r3, r1
 8018d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8018d40:	2300      	movs	r3, #0
 8018d42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	68db      	ldr	r3, [r3, #12]
 8018d48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8018d50:	78fb      	ldrb	r3, [r7, #3]
 8018d52:	2b01      	cmp	r3, #1
 8018d54:	d115      	bne.n	8018d82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	68db      	ldr	r3, [r3, #12]
 8018d5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8018d62:	2001      	movs	r0, #1
 8018d64:	f7f3 f92a 	bl	800bfbc <HAL_Delay>
      ms++;
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	3301      	adds	r3, #1
 8018d6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f001 fa4b 	bl	801a20a <USB_GetMode>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b01      	cmp	r3, #1
 8018d78:	d01e      	beq.n	8018db8 <USB_SetCurrentMode+0x84>
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	2b31      	cmp	r3, #49	; 0x31
 8018d7e:	d9f0      	bls.n	8018d62 <USB_SetCurrentMode+0x2e>
 8018d80:	e01a      	b.n	8018db8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8018d82:	78fb      	ldrb	r3, [r7, #3]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d115      	bne.n	8018db4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	68db      	ldr	r3, [r3, #12]
 8018d8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8018d94:	2001      	movs	r0, #1
 8018d96:	f7f3 f911 	bl	800bfbc <HAL_Delay>
      ms++;
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	3301      	adds	r3, #1
 8018d9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8018da0:	6878      	ldr	r0, [r7, #4]
 8018da2:	f001 fa32 	bl	801a20a <USB_GetMode>
 8018da6:	4603      	mov	r3, r0
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d005      	beq.n	8018db8 <USB_SetCurrentMode+0x84>
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	2b31      	cmp	r3, #49	; 0x31
 8018db0:	d9f0      	bls.n	8018d94 <USB_SetCurrentMode+0x60>
 8018db2:	e001      	b.n	8018db8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8018db4:	2301      	movs	r3, #1
 8018db6:	e005      	b.n	8018dc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	2b32      	cmp	r3, #50	; 0x32
 8018dbc:	d101      	bne.n	8018dc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8018dbe:	2301      	movs	r3, #1
 8018dc0:	e000      	b.n	8018dc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8018dc2:	2300      	movs	r3, #0
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	3710      	adds	r7, #16
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	bd80      	pop	{r7, pc}

08018dcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018dcc:	b084      	sub	sp, #16
 8018dce:	b580      	push	{r7, lr}
 8018dd0:	b086      	sub	sp, #24
 8018dd2:	af00      	add	r7, sp, #0
 8018dd4:	6078      	str	r0, [r7, #4]
 8018dd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8018dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8018dde:	2300      	movs	r3, #0
 8018de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8018de6:	2300      	movs	r3, #0
 8018de8:	613b      	str	r3, [r7, #16]
 8018dea:	e009      	b.n	8018e00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8018dec:	687a      	ldr	r2, [r7, #4]
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	3340      	adds	r3, #64	; 0x40
 8018df2:	009b      	lsls	r3, r3, #2
 8018df4:	4413      	add	r3, r2
 8018df6:	2200      	movs	r2, #0
 8018df8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8018dfa:	693b      	ldr	r3, [r7, #16]
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	613b      	str	r3, [r7, #16]
 8018e00:	693b      	ldr	r3, [r7, #16]
 8018e02:	2b0e      	cmp	r3, #14
 8018e04:	d9f2      	bls.n	8018dec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8018e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d11c      	bne.n	8018e46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018e12:	685b      	ldr	r3, [r3, #4]
 8018e14:	68fa      	ldr	r2, [r7, #12]
 8018e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018e1a:	f043 0302 	orr.w	r3, r3, #2
 8018e1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	601a      	str	r2, [r3, #0]
 8018e44:	e005      	b.n	8018e52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018e58:	461a      	mov	r2, r3
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018e64:	4619      	mov	r1, r3
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	680b      	ldr	r3, [r1, #0]
 8018e70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e74:	2b01      	cmp	r3, #1
 8018e76:	d10c      	bne.n	8018e92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8018e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d104      	bne.n	8018e88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8018e7e:	2100      	movs	r1, #0
 8018e80:	6878      	ldr	r0, [r7, #4]
 8018e82:	f000 f965 	bl	8019150 <USB_SetDevSpeed>
 8018e86:	e008      	b.n	8018e9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8018e88:	2101      	movs	r1, #1
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 f960 	bl	8019150 <USB_SetDevSpeed>
 8018e90:	e003      	b.n	8018e9a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8018e92:	2103      	movs	r1, #3
 8018e94:	6878      	ldr	r0, [r7, #4]
 8018e96:	f000 f95b 	bl	8019150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8018e9a:	2110      	movs	r1, #16
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f000 f8f3 	bl	8019088 <USB_FlushTxFifo>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d001      	beq.n	8018eac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8018eac:	6878      	ldr	r0, [r7, #4]
 8018eae:	f000 f91f 	bl	80190f0 <USB_FlushRxFifo>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d001      	beq.n	8018ebc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8018eb8:	2301      	movs	r3, #1
 8018eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018ece:	461a      	mov	r2, r3
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018eda:	461a      	mov	r2, r3
 8018edc:	2300      	movs	r3, #0
 8018ede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	613b      	str	r3, [r7, #16]
 8018ee4:	e043      	b.n	8018f6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8018ee6:	693b      	ldr	r3, [r7, #16]
 8018ee8:	015a      	lsls	r2, r3, #5
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	4413      	add	r3, r2
 8018eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018efc:	d118      	bne.n	8018f30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d10a      	bne.n	8018f1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8018f04:	693b      	ldr	r3, [r7, #16]
 8018f06:	015a      	lsls	r2, r3, #5
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	4413      	add	r3, r2
 8018f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f10:	461a      	mov	r2, r3
 8018f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018f16:	6013      	str	r3, [r2, #0]
 8018f18:	e013      	b.n	8018f42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8018f1a:	693b      	ldr	r3, [r7, #16]
 8018f1c:	015a      	lsls	r2, r3, #5
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	4413      	add	r3, r2
 8018f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f26:	461a      	mov	r2, r3
 8018f28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8018f2c:	6013      	str	r3, [r2, #0]
 8018f2e:	e008      	b.n	8018f42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8018f30:	693b      	ldr	r3, [r7, #16]
 8018f32:	015a      	lsls	r2, r3, #5
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	4413      	add	r3, r2
 8018f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f3c:	461a      	mov	r2, r3
 8018f3e:	2300      	movs	r3, #0
 8018f40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8018f42:	693b      	ldr	r3, [r7, #16]
 8018f44:	015a      	lsls	r2, r3, #5
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	4413      	add	r3, r2
 8018f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f4e:	461a      	mov	r2, r3
 8018f50:	2300      	movs	r3, #0
 8018f52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	015a      	lsls	r2, r3, #5
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	4413      	add	r3, r2
 8018f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f60:	461a      	mov	r2, r3
 8018f62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018f66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018f68:	693b      	ldr	r3, [r7, #16]
 8018f6a:	3301      	adds	r3, #1
 8018f6c:	613b      	str	r3, [r7, #16]
 8018f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f70:	693a      	ldr	r2, [r7, #16]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d3b7      	bcc.n	8018ee6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018f76:	2300      	movs	r3, #0
 8018f78:	613b      	str	r3, [r7, #16]
 8018f7a:	e043      	b.n	8019004 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8018f7c:	693b      	ldr	r3, [r7, #16]
 8018f7e:	015a      	lsls	r2, r3, #5
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	4413      	add	r3, r2
 8018f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018f92:	d118      	bne.n	8018fc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8018f94:	693b      	ldr	r3, [r7, #16]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d10a      	bne.n	8018fb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8018f9a:	693b      	ldr	r3, [r7, #16]
 8018f9c:	015a      	lsls	r2, r3, #5
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	4413      	add	r3, r2
 8018fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018fac:	6013      	str	r3, [r2, #0]
 8018fae:	e013      	b.n	8018fd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	015a      	lsls	r2, r3, #5
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	4413      	add	r3, r2
 8018fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fbc:	461a      	mov	r2, r3
 8018fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8018fc2:	6013      	str	r3, [r2, #0]
 8018fc4:	e008      	b.n	8018fd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	015a      	lsls	r2, r3, #5
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	4413      	add	r3, r2
 8018fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fd2:	461a      	mov	r2, r3
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8018fd8:	693b      	ldr	r3, [r7, #16]
 8018fda:	015a      	lsls	r2, r3, #5
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	4413      	add	r3, r2
 8018fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	015a      	lsls	r2, r3, #5
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	4413      	add	r3, r2
 8018ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018ff6:	461a      	mov	r2, r3
 8018ff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018ffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018ffe:	693b      	ldr	r3, [r7, #16]
 8019000:	3301      	adds	r3, #1
 8019002:	613b      	str	r3, [r7, #16]
 8019004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019006:	693a      	ldr	r2, [r7, #16]
 8019008:	429a      	cmp	r2, r3
 801900a:	d3b7      	bcc.n	8018f7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019012:	691b      	ldr	r3, [r3, #16]
 8019014:	68fa      	ldr	r2, [r7, #12]
 8019016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801901a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801901e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2200      	movs	r2, #0
 8019024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801902c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019030:	2b00      	cmp	r3, #0
 8019032:	d105      	bne.n	8019040 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	699b      	ldr	r3, [r3, #24]
 8019038:	f043 0210 	orr.w	r2, r3, #16
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	699a      	ldr	r2, [r3, #24]
 8019044:	4b0e      	ldr	r3, [pc, #56]	; (8019080 <USB_DevInit+0x2b4>)
 8019046:	4313      	orrs	r3, r2
 8019048:	687a      	ldr	r2, [r7, #4]
 801904a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801904c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801904e:	2b00      	cmp	r3, #0
 8019050:	d005      	beq.n	801905e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	699b      	ldr	r3, [r3, #24]
 8019056:	f043 0208 	orr.w	r2, r3, #8
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801905e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019060:	2b01      	cmp	r3, #1
 8019062:	d105      	bne.n	8019070 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	699a      	ldr	r2, [r3, #24]
 8019068:	4b06      	ldr	r3, [pc, #24]	; (8019084 <USB_DevInit+0x2b8>)
 801906a:	4313      	orrs	r3, r2
 801906c:	687a      	ldr	r2, [r7, #4]
 801906e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8019070:	7dfb      	ldrb	r3, [r7, #23]
}
 8019072:	4618      	mov	r0, r3
 8019074:	3718      	adds	r7, #24
 8019076:	46bd      	mov	sp, r7
 8019078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801907c:	b004      	add	sp, #16
 801907e:	4770      	bx	lr
 8019080:	803c3800 	.word	0x803c3800
 8019084:	40000004 	.word	0x40000004

08019088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8019088:	b480      	push	{r7}
 801908a:	b085      	sub	sp, #20
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
 8019090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8019092:	2300      	movs	r3, #0
 8019094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	3301      	adds	r3, #1
 801909a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	4a13      	ldr	r2, [pc, #76]	; (80190ec <USB_FlushTxFifo+0x64>)
 80190a0:	4293      	cmp	r3, r2
 80190a2:	d901      	bls.n	80190a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80190a4:	2303      	movs	r3, #3
 80190a6:	e01b      	b.n	80190e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	691b      	ldr	r3, [r3, #16]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	daf2      	bge.n	8019096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80190b0:	2300      	movs	r3, #0
 80190b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80190b4:	683b      	ldr	r3, [r7, #0]
 80190b6:	019b      	lsls	r3, r3, #6
 80190b8:	f043 0220 	orr.w	r2, r3, #32
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	3301      	adds	r3, #1
 80190c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	4a08      	ldr	r2, [pc, #32]	; (80190ec <USB_FlushTxFifo+0x64>)
 80190ca:	4293      	cmp	r3, r2
 80190cc:	d901      	bls.n	80190d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80190ce:	2303      	movs	r3, #3
 80190d0:	e006      	b.n	80190e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	691b      	ldr	r3, [r3, #16]
 80190d6:	f003 0320 	and.w	r3, r3, #32
 80190da:	2b20      	cmp	r3, #32
 80190dc:	d0f0      	beq.n	80190c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80190de:	2300      	movs	r3, #0
}
 80190e0:	4618      	mov	r0, r3
 80190e2:	3714      	adds	r7, #20
 80190e4:	46bd      	mov	sp, r7
 80190e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ea:	4770      	bx	lr
 80190ec:	00030d40 	.word	0x00030d40

080190f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80190f0:	b480      	push	{r7}
 80190f2:	b085      	sub	sp, #20
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80190f8:	2300      	movs	r3, #0
 80190fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	3301      	adds	r3, #1
 8019100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	4a11      	ldr	r2, [pc, #68]	; (801914c <USB_FlushRxFifo+0x5c>)
 8019106:	4293      	cmp	r3, r2
 8019108:	d901      	bls.n	801910e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801910a:	2303      	movs	r3, #3
 801910c:	e018      	b.n	8019140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	691b      	ldr	r3, [r3, #16]
 8019112:	2b00      	cmp	r3, #0
 8019114:	daf2      	bge.n	80190fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8019116:	2300      	movs	r3, #0
 8019118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	2210      	movs	r2, #16
 801911e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	3301      	adds	r3, #1
 8019124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	4a08      	ldr	r2, [pc, #32]	; (801914c <USB_FlushRxFifo+0x5c>)
 801912a:	4293      	cmp	r3, r2
 801912c:	d901      	bls.n	8019132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801912e:	2303      	movs	r3, #3
 8019130:	e006      	b.n	8019140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	691b      	ldr	r3, [r3, #16]
 8019136:	f003 0310 	and.w	r3, r3, #16
 801913a:	2b10      	cmp	r3, #16
 801913c:	d0f0      	beq.n	8019120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801913e:	2300      	movs	r3, #0
}
 8019140:	4618      	mov	r0, r3
 8019142:	3714      	adds	r7, #20
 8019144:	46bd      	mov	sp, r7
 8019146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914a:	4770      	bx	lr
 801914c:	00030d40 	.word	0x00030d40

08019150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8019150:	b480      	push	{r7}
 8019152:	b085      	sub	sp, #20
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	460b      	mov	r3, r1
 801915a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019166:	681a      	ldr	r2, [r3, #0]
 8019168:	78fb      	ldrb	r3, [r7, #3]
 801916a:	68f9      	ldr	r1, [r7, #12]
 801916c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019170:	4313      	orrs	r3, r2
 8019172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8019174:	2300      	movs	r3, #0
}
 8019176:	4618      	mov	r0, r3
 8019178:	3714      	adds	r7, #20
 801917a:	46bd      	mov	sp, r7
 801917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019180:	4770      	bx	lr

08019182 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8019182:	b480      	push	{r7}
 8019184:	b087      	sub	sp, #28
 8019186:	af00      	add	r7, sp, #0
 8019188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801918e:	693b      	ldr	r3, [r7, #16]
 8019190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019194:	689b      	ldr	r3, [r3, #8]
 8019196:	f003 0306 	and.w	r3, r3, #6
 801919a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d102      	bne.n	80191a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80191a2:	2300      	movs	r3, #0
 80191a4:	75fb      	strb	r3, [r7, #23]
 80191a6:	e00a      	b.n	80191be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	2b02      	cmp	r3, #2
 80191ac:	d002      	beq.n	80191b4 <USB_GetDevSpeed+0x32>
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	2b06      	cmp	r3, #6
 80191b2:	d102      	bne.n	80191ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80191b4:	2302      	movs	r3, #2
 80191b6:	75fb      	strb	r3, [r7, #23]
 80191b8:	e001      	b.n	80191be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80191ba:	230f      	movs	r3, #15
 80191bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80191be:	7dfb      	ldrb	r3, [r7, #23]
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	371c      	adds	r7, #28
 80191c4:	46bd      	mov	sp, r7
 80191c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ca:	4770      	bx	lr

080191cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80191cc:	b480      	push	{r7}
 80191ce:	b085      	sub	sp, #20
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
 80191d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	781b      	ldrb	r3, [r3, #0]
 80191de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	785b      	ldrb	r3, [r3, #1]
 80191e4:	2b01      	cmp	r3, #1
 80191e6:	d139      	bne.n	801925c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80191ee:	69da      	ldr	r2, [r3, #28]
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	f003 030f 	and.w	r3, r3, #15
 80191f8:	2101      	movs	r1, #1
 80191fa:	fa01 f303 	lsl.w	r3, r1, r3
 80191fe:	b29b      	uxth	r3, r3
 8019200:	68f9      	ldr	r1, [r7, #12]
 8019202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019206:	4313      	orrs	r3, r2
 8019208:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801920a:	68bb      	ldr	r3, [r7, #8]
 801920c:	015a      	lsls	r2, r3, #5
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	4413      	add	r3, r2
 8019212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801921c:	2b00      	cmp	r3, #0
 801921e:	d153      	bne.n	80192c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019220:	68bb      	ldr	r3, [r7, #8]
 8019222:	015a      	lsls	r2, r3, #5
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	4413      	add	r3, r2
 8019228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801922c:	681a      	ldr	r2, [r3, #0]
 801922e:	683b      	ldr	r3, [r7, #0]
 8019230:	68db      	ldr	r3, [r3, #12]
 8019232:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	791b      	ldrb	r3, [r3, #4]
 801923a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801923c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	059b      	lsls	r3, r3, #22
 8019242:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019244:	431a      	orrs	r2, r3
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	0159      	lsls	r1, r3, #5
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	440b      	add	r3, r1
 801924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019252:	4619      	mov	r1, r3
 8019254:	4b20      	ldr	r3, [pc, #128]	; (80192d8 <USB_ActivateEndpoint+0x10c>)
 8019256:	4313      	orrs	r3, r2
 8019258:	600b      	str	r3, [r1, #0]
 801925a:	e035      	b.n	80192c8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019262:	69da      	ldr	r2, [r3, #28]
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	781b      	ldrb	r3, [r3, #0]
 8019268:	f003 030f 	and.w	r3, r3, #15
 801926c:	2101      	movs	r1, #1
 801926e:	fa01 f303 	lsl.w	r3, r1, r3
 8019272:	041b      	lsls	r3, r3, #16
 8019274:	68f9      	ldr	r1, [r7, #12]
 8019276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801927a:	4313      	orrs	r3, r2
 801927c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801927e:	68bb      	ldr	r3, [r7, #8]
 8019280:	015a      	lsls	r2, r3, #5
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	4413      	add	r3, r2
 8019286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019290:	2b00      	cmp	r3, #0
 8019292:	d119      	bne.n	80192c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	015a      	lsls	r2, r3, #5
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	4413      	add	r3, r2
 801929c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192a0:	681a      	ldr	r2, [r3, #0]
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	68db      	ldr	r3, [r3, #12]
 80192a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	791b      	ldrb	r3, [r3, #4]
 80192ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80192b0:	430b      	orrs	r3, r1
 80192b2:	431a      	orrs	r2, r3
 80192b4:	68bb      	ldr	r3, [r7, #8]
 80192b6:	0159      	lsls	r1, r3, #5
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	440b      	add	r3, r1
 80192bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192c0:	4619      	mov	r1, r3
 80192c2:	4b05      	ldr	r3, [pc, #20]	; (80192d8 <USB_ActivateEndpoint+0x10c>)
 80192c4:	4313      	orrs	r3, r2
 80192c6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80192c8:	2300      	movs	r3, #0
}
 80192ca:	4618      	mov	r0, r3
 80192cc:	3714      	adds	r7, #20
 80192ce:	46bd      	mov	sp, r7
 80192d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d4:	4770      	bx	lr
 80192d6:	bf00      	nop
 80192d8:	10008000 	.word	0x10008000

080192dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80192dc:	b480      	push	{r7}
 80192de:	b085      	sub	sp, #20
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
 80192e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80192ea:	683b      	ldr	r3, [r7, #0]
 80192ec:	781b      	ldrb	r3, [r3, #0]
 80192ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	785b      	ldrb	r3, [r3, #1]
 80192f4:	2b01      	cmp	r3, #1
 80192f6:	d161      	bne.n	80193bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	015a      	lsls	r2, r3, #5
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	4413      	add	r3, r2
 8019300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801930a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801930e:	d11f      	bne.n	8019350 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	015a      	lsls	r2, r3, #5
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	4413      	add	r3, r2
 8019318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	68ba      	ldr	r2, [r7, #8]
 8019320:	0151      	lsls	r1, r2, #5
 8019322:	68fa      	ldr	r2, [r7, #12]
 8019324:	440a      	add	r2, r1
 8019326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801932a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801932e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8019330:	68bb      	ldr	r3, [r7, #8]
 8019332:	015a      	lsls	r2, r3, #5
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	4413      	add	r3, r2
 8019338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	68ba      	ldr	r2, [r7, #8]
 8019340:	0151      	lsls	r1, r2, #5
 8019342:	68fa      	ldr	r2, [r7, #12]
 8019344:	440a      	add	r2, r1
 8019346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801934a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801934e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	f003 030f 	and.w	r3, r3, #15
 8019360:	2101      	movs	r1, #1
 8019362:	fa01 f303 	lsl.w	r3, r1, r3
 8019366:	b29b      	uxth	r3, r3
 8019368:	43db      	mvns	r3, r3
 801936a:	68f9      	ldr	r1, [r7, #12]
 801936c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019370:	4013      	ands	r3, r2
 8019372:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801937a:	69da      	ldr	r2, [r3, #28]
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	781b      	ldrb	r3, [r3, #0]
 8019380:	f003 030f 	and.w	r3, r3, #15
 8019384:	2101      	movs	r1, #1
 8019386:	fa01 f303 	lsl.w	r3, r1, r3
 801938a:	b29b      	uxth	r3, r3
 801938c:	43db      	mvns	r3, r3
 801938e:	68f9      	ldr	r1, [r7, #12]
 8019390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019394:	4013      	ands	r3, r2
 8019396:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8019398:	68bb      	ldr	r3, [r7, #8]
 801939a:	015a      	lsls	r2, r3, #5
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	4413      	add	r3, r2
 80193a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80193a4:	681a      	ldr	r2, [r3, #0]
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	0159      	lsls	r1, r3, #5
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	440b      	add	r3, r1
 80193ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80193b2:	4619      	mov	r1, r3
 80193b4:	4b35      	ldr	r3, [pc, #212]	; (801948c <USB_DeactivateEndpoint+0x1b0>)
 80193b6:	4013      	ands	r3, r2
 80193b8:	600b      	str	r3, [r1, #0]
 80193ba:	e060      	b.n	801947e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	015a      	lsls	r2, r3, #5
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	4413      	add	r3, r2
 80193c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80193ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80193d2:	d11f      	bne.n	8019414 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80193d4:	68bb      	ldr	r3, [r7, #8]
 80193d6:	015a      	lsls	r2, r3, #5
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	4413      	add	r3, r2
 80193dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	68ba      	ldr	r2, [r7, #8]
 80193e4:	0151      	lsls	r1, r2, #5
 80193e6:	68fa      	ldr	r2, [r7, #12]
 80193e8:	440a      	add	r2, r1
 80193ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80193ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80193f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	015a      	lsls	r2, r3, #5
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	4413      	add	r3, r2
 80193fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	68ba      	ldr	r2, [r7, #8]
 8019404:	0151      	lsls	r1, r2, #5
 8019406:	68fa      	ldr	r2, [r7, #12]
 8019408:	440a      	add	r2, r1
 801940a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801940e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801941a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801941c:	683b      	ldr	r3, [r7, #0]
 801941e:	781b      	ldrb	r3, [r3, #0]
 8019420:	f003 030f 	and.w	r3, r3, #15
 8019424:	2101      	movs	r1, #1
 8019426:	fa01 f303 	lsl.w	r3, r1, r3
 801942a:	041b      	lsls	r3, r3, #16
 801942c:	43db      	mvns	r3, r3
 801942e:	68f9      	ldr	r1, [r7, #12]
 8019430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019434:	4013      	ands	r3, r2
 8019436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801943e:	69da      	ldr	r2, [r3, #28]
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	f003 030f 	and.w	r3, r3, #15
 8019448:	2101      	movs	r1, #1
 801944a:	fa01 f303 	lsl.w	r3, r1, r3
 801944e:	041b      	lsls	r3, r3, #16
 8019450:	43db      	mvns	r3, r3
 8019452:	68f9      	ldr	r1, [r7, #12]
 8019454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019458:	4013      	ands	r3, r2
 801945a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801945c:	68bb      	ldr	r3, [r7, #8]
 801945e:	015a      	lsls	r2, r3, #5
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	4413      	add	r3, r2
 8019464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019468:	681a      	ldr	r2, [r3, #0]
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	0159      	lsls	r1, r3, #5
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	440b      	add	r3, r1
 8019472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019476:	4619      	mov	r1, r3
 8019478:	4b05      	ldr	r3, [pc, #20]	; (8019490 <USB_DeactivateEndpoint+0x1b4>)
 801947a:	4013      	ands	r3, r2
 801947c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801947e:	2300      	movs	r3, #0
}
 8019480:	4618      	mov	r0, r3
 8019482:	3714      	adds	r7, #20
 8019484:	46bd      	mov	sp, r7
 8019486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948a:	4770      	bx	lr
 801948c:	ec337800 	.word	0xec337800
 8019490:	eff37800 	.word	0xeff37800

08019494 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b08a      	sub	sp, #40	; 0x28
 8019498:	af02      	add	r7, sp, #8
 801949a:	60f8      	str	r0, [r7, #12]
 801949c:	60b9      	str	r1, [r7, #8]
 801949e:	4613      	mov	r3, r2
 80194a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80194a6:	68bb      	ldr	r3, [r7, #8]
 80194a8:	781b      	ldrb	r3, [r3, #0]
 80194aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	785b      	ldrb	r3, [r3, #1]
 80194b0:	2b01      	cmp	r3, #1
 80194b2:	f040 8163 	bne.w	801977c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80194b6:	68bb      	ldr	r3, [r7, #8]
 80194b8:	699b      	ldr	r3, [r3, #24]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d132      	bne.n	8019524 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80194be:	69bb      	ldr	r3, [r7, #24]
 80194c0:	015a      	lsls	r2, r3, #5
 80194c2:	69fb      	ldr	r3, [r7, #28]
 80194c4:	4413      	add	r3, r2
 80194c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194ca:	691a      	ldr	r2, [r3, #16]
 80194cc:	69bb      	ldr	r3, [r7, #24]
 80194ce:	0159      	lsls	r1, r3, #5
 80194d0:	69fb      	ldr	r3, [r7, #28]
 80194d2:	440b      	add	r3, r1
 80194d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194d8:	4619      	mov	r1, r3
 80194da:	4ba5      	ldr	r3, [pc, #660]	; (8019770 <USB_EPStartXfer+0x2dc>)
 80194dc:	4013      	ands	r3, r2
 80194de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80194e0:	69bb      	ldr	r3, [r7, #24]
 80194e2:	015a      	lsls	r2, r3, #5
 80194e4:	69fb      	ldr	r3, [r7, #28]
 80194e6:	4413      	add	r3, r2
 80194e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194ec:	691b      	ldr	r3, [r3, #16]
 80194ee:	69ba      	ldr	r2, [r7, #24]
 80194f0:	0151      	lsls	r1, r2, #5
 80194f2:	69fa      	ldr	r2, [r7, #28]
 80194f4:	440a      	add	r2, r1
 80194f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80194fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80194fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019500:	69bb      	ldr	r3, [r7, #24]
 8019502:	015a      	lsls	r2, r3, #5
 8019504:	69fb      	ldr	r3, [r7, #28]
 8019506:	4413      	add	r3, r2
 8019508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801950c:	691a      	ldr	r2, [r3, #16]
 801950e:	69bb      	ldr	r3, [r7, #24]
 8019510:	0159      	lsls	r1, r3, #5
 8019512:	69fb      	ldr	r3, [r7, #28]
 8019514:	440b      	add	r3, r1
 8019516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801951a:	4619      	mov	r1, r3
 801951c:	4b95      	ldr	r3, [pc, #596]	; (8019774 <USB_EPStartXfer+0x2e0>)
 801951e:	4013      	ands	r3, r2
 8019520:	610b      	str	r3, [r1, #16]
 8019522:	e074      	b.n	801960e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019524:	69bb      	ldr	r3, [r7, #24]
 8019526:	015a      	lsls	r2, r3, #5
 8019528:	69fb      	ldr	r3, [r7, #28]
 801952a:	4413      	add	r3, r2
 801952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019530:	691a      	ldr	r2, [r3, #16]
 8019532:	69bb      	ldr	r3, [r7, #24]
 8019534:	0159      	lsls	r1, r3, #5
 8019536:	69fb      	ldr	r3, [r7, #28]
 8019538:	440b      	add	r3, r1
 801953a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801953e:	4619      	mov	r1, r3
 8019540:	4b8c      	ldr	r3, [pc, #560]	; (8019774 <USB_EPStartXfer+0x2e0>)
 8019542:	4013      	ands	r3, r2
 8019544:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019546:	69bb      	ldr	r3, [r7, #24]
 8019548:	015a      	lsls	r2, r3, #5
 801954a:	69fb      	ldr	r3, [r7, #28]
 801954c:	4413      	add	r3, r2
 801954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019552:	691a      	ldr	r2, [r3, #16]
 8019554:	69bb      	ldr	r3, [r7, #24]
 8019556:	0159      	lsls	r1, r3, #5
 8019558:	69fb      	ldr	r3, [r7, #28]
 801955a:	440b      	add	r3, r1
 801955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019560:	4619      	mov	r1, r3
 8019562:	4b83      	ldr	r3, [pc, #524]	; (8019770 <USB_EPStartXfer+0x2dc>)
 8019564:	4013      	ands	r3, r2
 8019566:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8019568:	69bb      	ldr	r3, [r7, #24]
 801956a:	015a      	lsls	r2, r3, #5
 801956c:	69fb      	ldr	r3, [r7, #28]
 801956e:	4413      	add	r3, r2
 8019570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019574:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8019576:	68bb      	ldr	r3, [r7, #8]
 8019578:	6999      	ldr	r1, [r3, #24]
 801957a:	68bb      	ldr	r3, [r7, #8]
 801957c:	68db      	ldr	r3, [r3, #12]
 801957e:	440b      	add	r3, r1
 8019580:	1e59      	subs	r1, r3, #1
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	68db      	ldr	r3, [r3, #12]
 8019586:	fbb1 f3f3 	udiv	r3, r1, r3
 801958a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801958c:	4b7a      	ldr	r3, [pc, #488]	; (8019778 <USB_EPStartXfer+0x2e4>)
 801958e:	400b      	ands	r3, r1
 8019590:	69b9      	ldr	r1, [r7, #24]
 8019592:	0148      	lsls	r0, r1, #5
 8019594:	69f9      	ldr	r1, [r7, #28]
 8019596:	4401      	add	r1, r0
 8019598:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801959c:	4313      	orrs	r3, r2
 801959e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80195a0:	69bb      	ldr	r3, [r7, #24]
 80195a2:	015a      	lsls	r2, r3, #5
 80195a4:	69fb      	ldr	r3, [r7, #28]
 80195a6:	4413      	add	r3, r2
 80195a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80195ac:	691a      	ldr	r2, [r3, #16]
 80195ae:	68bb      	ldr	r3, [r7, #8]
 80195b0:	699b      	ldr	r3, [r3, #24]
 80195b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80195b6:	69b9      	ldr	r1, [r7, #24]
 80195b8:	0148      	lsls	r0, r1, #5
 80195ba:	69f9      	ldr	r1, [r7, #28]
 80195bc:	4401      	add	r1, r0
 80195be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80195c2:	4313      	orrs	r3, r2
 80195c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80195c6:	68bb      	ldr	r3, [r7, #8]
 80195c8:	791b      	ldrb	r3, [r3, #4]
 80195ca:	2b01      	cmp	r3, #1
 80195cc:	d11f      	bne.n	801960e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80195ce:	69bb      	ldr	r3, [r7, #24]
 80195d0:	015a      	lsls	r2, r3, #5
 80195d2:	69fb      	ldr	r3, [r7, #28]
 80195d4:	4413      	add	r3, r2
 80195d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80195da:	691b      	ldr	r3, [r3, #16]
 80195dc:	69ba      	ldr	r2, [r7, #24]
 80195de:	0151      	lsls	r1, r2, #5
 80195e0:	69fa      	ldr	r2, [r7, #28]
 80195e2:	440a      	add	r2, r1
 80195e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80195e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80195ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80195ee:	69bb      	ldr	r3, [r7, #24]
 80195f0:	015a      	lsls	r2, r3, #5
 80195f2:	69fb      	ldr	r3, [r7, #28]
 80195f4:	4413      	add	r3, r2
 80195f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80195fa:	691b      	ldr	r3, [r3, #16]
 80195fc:	69ba      	ldr	r2, [r7, #24]
 80195fe:	0151      	lsls	r1, r2, #5
 8019600:	69fa      	ldr	r2, [r7, #28]
 8019602:	440a      	add	r2, r1
 8019604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801960c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801960e:	79fb      	ldrb	r3, [r7, #7]
 8019610:	2b01      	cmp	r3, #1
 8019612:	d14b      	bne.n	80196ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019614:	68bb      	ldr	r3, [r7, #8]
 8019616:	695b      	ldr	r3, [r3, #20]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d009      	beq.n	8019630 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801961c:	69bb      	ldr	r3, [r7, #24]
 801961e:	015a      	lsls	r2, r3, #5
 8019620:	69fb      	ldr	r3, [r7, #28]
 8019622:	4413      	add	r3, r2
 8019624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019628:	461a      	mov	r2, r3
 801962a:	68bb      	ldr	r3, [r7, #8]
 801962c:	695b      	ldr	r3, [r3, #20]
 801962e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	791b      	ldrb	r3, [r3, #4]
 8019634:	2b01      	cmp	r3, #1
 8019636:	d128      	bne.n	801968a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019638:	69fb      	ldr	r3, [r7, #28]
 801963a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801963e:	689b      	ldr	r3, [r3, #8]
 8019640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019644:	2b00      	cmp	r3, #0
 8019646:	d110      	bne.n	801966a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019648:	69bb      	ldr	r3, [r7, #24]
 801964a:	015a      	lsls	r2, r3, #5
 801964c:	69fb      	ldr	r3, [r7, #28]
 801964e:	4413      	add	r3, r2
 8019650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	69ba      	ldr	r2, [r7, #24]
 8019658:	0151      	lsls	r1, r2, #5
 801965a:	69fa      	ldr	r2, [r7, #28]
 801965c:	440a      	add	r2, r1
 801965e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019666:	6013      	str	r3, [r2, #0]
 8019668:	e00f      	b.n	801968a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801966a:	69bb      	ldr	r3, [r7, #24]
 801966c:	015a      	lsls	r2, r3, #5
 801966e:	69fb      	ldr	r3, [r7, #28]
 8019670:	4413      	add	r3, r2
 8019672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	69ba      	ldr	r2, [r7, #24]
 801967a:	0151      	lsls	r1, r2, #5
 801967c:	69fa      	ldr	r2, [r7, #28]
 801967e:	440a      	add	r2, r1
 8019680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019688:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801968a:	69bb      	ldr	r3, [r7, #24]
 801968c:	015a      	lsls	r2, r3, #5
 801968e:	69fb      	ldr	r3, [r7, #28]
 8019690:	4413      	add	r3, r2
 8019692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	69ba      	ldr	r2, [r7, #24]
 801969a:	0151      	lsls	r1, r2, #5
 801969c:	69fa      	ldr	r2, [r7, #28]
 801969e:	440a      	add	r2, r1
 80196a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80196a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80196a8:	6013      	str	r3, [r2, #0]
 80196aa:	e137      	b.n	801991c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80196ac:	69bb      	ldr	r3, [r7, #24]
 80196ae:	015a      	lsls	r2, r3, #5
 80196b0:	69fb      	ldr	r3, [r7, #28]
 80196b2:	4413      	add	r3, r2
 80196b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	69ba      	ldr	r2, [r7, #24]
 80196bc:	0151      	lsls	r1, r2, #5
 80196be:	69fa      	ldr	r2, [r7, #28]
 80196c0:	440a      	add	r2, r1
 80196c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80196c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80196ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80196cc:	68bb      	ldr	r3, [r7, #8]
 80196ce:	791b      	ldrb	r3, [r3, #4]
 80196d0:	2b01      	cmp	r3, #1
 80196d2:	d015      	beq.n	8019700 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80196d4:	68bb      	ldr	r3, [r7, #8]
 80196d6:	699b      	ldr	r3, [r3, #24]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	f000 811f 	beq.w	801991c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80196de:	69fb      	ldr	r3, [r7, #28]
 80196e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80196e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80196e6:	68bb      	ldr	r3, [r7, #8]
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	f003 030f 	and.w	r3, r3, #15
 80196ee:	2101      	movs	r1, #1
 80196f0:	fa01 f303 	lsl.w	r3, r1, r3
 80196f4:	69f9      	ldr	r1, [r7, #28]
 80196f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80196fa:	4313      	orrs	r3, r2
 80196fc:	634b      	str	r3, [r1, #52]	; 0x34
 80196fe:	e10d      	b.n	801991c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019700:	69fb      	ldr	r3, [r7, #28]
 8019702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019706:	689b      	ldr	r3, [r3, #8]
 8019708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801970c:	2b00      	cmp	r3, #0
 801970e:	d110      	bne.n	8019732 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019710:	69bb      	ldr	r3, [r7, #24]
 8019712:	015a      	lsls	r2, r3, #5
 8019714:	69fb      	ldr	r3, [r7, #28]
 8019716:	4413      	add	r3, r2
 8019718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	69ba      	ldr	r2, [r7, #24]
 8019720:	0151      	lsls	r1, r2, #5
 8019722:	69fa      	ldr	r2, [r7, #28]
 8019724:	440a      	add	r2, r1
 8019726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801972a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801972e:	6013      	str	r3, [r2, #0]
 8019730:	e00f      	b.n	8019752 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8019732:	69bb      	ldr	r3, [r7, #24]
 8019734:	015a      	lsls	r2, r3, #5
 8019736:	69fb      	ldr	r3, [r7, #28]
 8019738:	4413      	add	r3, r2
 801973a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	69ba      	ldr	r2, [r7, #24]
 8019742:	0151      	lsls	r1, r2, #5
 8019744:	69fa      	ldr	r2, [r7, #28]
 8019746:	440a      	add	r2, r1
 8019748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801974c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019750:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8019752:	68bb      	ldr	r3, [r7, #8]
 8019754:	6919      	ldr	r1, [r3, #16]
 8019756:	68bb      	ldr	r3, [r7, #8]
 8019758:	781a      	ldrb	r2, [r3, #0]
 801975a:	68bb      	ldr	r3, [r7, #8]
 801975c:	699b      	ldr	r3, [r3, #24]
 801975e:	b298      	uxth	r0, r3
 8019760:	79fb      	ldrb	r3, [r7, #7]
 8019762:	9300      	str	r3, [sp, #0]
 8019764:	4603      	mov	r3, r0
 8019766:	68f8      	ldr	r0, [r7, #12]
 8019768:	f000 faea 	bl	8019d40 <USB_WritePacket>
 801976c:	e0d6      	b.n	801991c <USB_EPStartXfer+0x488>
 801976e:	bf00      	nop
 8019770:	e007ffff 	.word	0xe007ffff
 8019774:	fff80000 	.word	0xfff80000
 8019778:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801977c:	69bb      	ldr	r3, [r7, #24]
 801977e:	015a      	lsls	r2, r3, #5
 8019780:	69fb      	ldr	r3, [r7, #28]
 8019782:	4413      	add	r3, r2
 8019784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019788:	691a      	ldr	r2, [r3, #16]
 801978a:	69bb      	ldr	r3, [r7, #24]
 801978c:	0159      	lsls	r1, r3, #5
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	440b      	add	r3, r1
 8019792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019796:	4619      	mov	r1, r3
 8019798:	4b63      	ldr	r3, [pc, #396]	; (8019928 <USB_EPStartXfer+0x494>)
 801979a:	4013      	ands	r3, r2
 801979c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801979e:	69bb      	ldr	r3, [r7, #24]
 80197a0:	015a      	lsls	r2, r3, #5
 80197a2:	69fb      	ldr	r3, [r7, #28]
 80197a4:	4413      	add	r3, r2
 80197a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197aa:	691a      	ldr	r2, [r3, #16]
 80197ac:	69bb      	ldr	r3, [r7, #24]
 80197ae:	0159      	lsls	r1, r3, #5
 80197b0:	69fb      	ldr	r3, [r7, #28]
 80197b2:	440b      	add	r3, r1
 80197b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197b8:	4619      	mov	r1, r3
 80197ba:	4b5c      	ldr	r3, [pc, #368]	; (801992c <USB_EPStartXfer+0x498>)
 80197bc:	4013      	ands	r3, r2
 80197be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80197c0:	68bb      	ldr	r3, [r7, #8]
 80197c2:	699b      	ldr	r3, [r3, #24]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d123      	bne.n	8019810 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80197c8:	69bb      	ldr	r3, [r7, #24]
 80197ca:	015a      	lsls	r2, r3, #5
 80197cc:	69fb      	ldr	r3, [r7, #28]
 80197ce:	4413      	add	r3, r2
 80197d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197d4:	691a      	ldr	r2, [r3, #16]
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	68db      	ldr	r3, [r3, #12]
 80197da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80197de:	69b9      	ldr	r1, [r7, #24]
 80197e0:	0148      	lsls	r0, r1, #5
 80197e2:	69f9      	ldr	r1, [r7, #28]
 80197e4:	4401      	add	r1, r0
 80197e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80197ea:	4313      	orrs	r3, r2
 80197ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80197ee:	69bb      	ldr	r3, [r7, #24]
 80197f0:	015a      	lsls	r2, r3, #5
 80197f2:	69fb      	ldr	r3, [r7, #28]
 80197f4:	4413      	add	r3, r2
 80197f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197fa:	691b      	ldr	r3, [r3, #16]
 80197fc:	69ba      	ldr	r2, [r7, #24]
 80197fe:	0151      	lsls	r1, r2, #5
 8019800:	69fa      	ldr	r2, [r7, #28]
 8019802:	440a      	add	r2, r1
 8019804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801980c:	6113      	str	r3, [r2, #16]
 801980e:	e037      	b.n	8019880 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8019810:	68bb      	ldr	r3, [r7, #8]
 8019812:	699a      	ldr	r2, [r3, #24]
 8019814:	68bb      	ldr	r3, [r7, #8]
 8019816:	68db      	ldr	r3, [r3, #12]
 8019818:	4413      	add	r3, r2
 801981a:	1e5a      	subs	r2, r3, #1
 801981c:	68bb      	ldr	r3, [r7, #8]
 801981e:	68db      	ldr	r3, [r3, #12]
 8019820:	fbb2 f3f3 	udiv	r3, r2, r3
 8019824:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	68db      	ldr	r3, [r3, #12]
 801982a:	8afa      	ldrh	r2, [r7, #22]
 801982c:	fb03 f202 	mul.w	r2, r3, r2
 8019830:	68bb      	ldr	r3, [r7, #8]
 8019832:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8019834:	69bb      	ldr	r3, [r7, #24]
 8019836:	015a      	lsls	r2, r3, #5
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	4413      	add	r3, r2
 801983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019840:	691a      	ldr	r2, [r3, #16]
 8019842:	8afb      	ldrh	r3, [r7, #22]
 8019844:	04d9      	lsls	r1, r3, #19
 8019846:	4b3a      	ldr	r3, [pc, #232]	; (8019930 <USB_EPStartXfer+0x49c>)
 8019848:	400b      	ands	r3, r1
 801984a:	69b9      	ldr	r1, [r7, #24]
 801984c:	0148      	lsls	r0, r1, #5
 801984e:	69f9      	ldr	r1, [r7, #28]
 8019850:	4401      	add	r1, r0
 8019852:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019856:	4313      	orrs	r3, r2
 8019858:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801985a:	69bb      	ldr	r3, [r7, #24]
 801985c:	015a      	lsls	r2, r3, #5
 801985e:	69fb      	ldr	r3, [r7, #28]
 8019860:	4413      	add	r3, r2
 8019862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019866:	691a      	ldr	r2, [r3, #16]
 8019868:	68bb      	ldr	r3, [r7, #8]
 801986a:	69db      	ldr	r3, [r3, #28]
 801986c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019870:	69b9      	ldr	r1, [r7, #24]
 8019872:	0148      	lsls	r0, r1, #5
 8019874:	69f9      	ldr	r1, [r7, #28]
 8019876:	4401      	add	r1, r0
 8019878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801987c:	4313      	orrs	r3, r2
 801987e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019880:	79fb      	ldrb	r3, [r7, #7]
 8019882:	2b01      	cmp	r3, #1
 8019884:	d10d      	bne.n	80198a2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	691b      	ldr	r3, [r3, #16]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d009      	beq.n	80198a2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	6919      	ldr	r1, [r3, #16]
 8019892:	69bb      	ldr	r3, [r7, #24]
 8019894:	015a      	lsls	r2, r3, #5
 8019896:	69fb      	ldr	r3, [r7, #28]
 8019898:	4413      	add	r3, r2
 801989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801989e:	460a      	mov	r2, r1
 80198a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80198a2:	68bb      	ldr	r3, [r7, #8]
 80198a4:	791b      	ldrb	r3, [r3, #4]
 80198a6:	2b01      	cmp	r3, #1
 80198a8:	d128      	bne.n	80198fc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80198aa:	69fb      	ldr	r3, [r7, #28]
 80198ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80198b0:	689b      	ldr	r3, [r3, #8]
 80198b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d110      	bne.n	80198dc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80198ba:	69bb      	ldr	r3, [r7, #24]
 80198bc:	015a      	lsls	r2, r3, #5
 80198be:	69fb      	ldr	r3, [r7, #28]
 80198c0:	4413      	add	r3, r2
 80198c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	69ba      	ldr	r2, [r7, #24]
 80198ca:	0151      	lsls	r1, r2, #5
 80198cc:	69fa      	ldr	r2, [r7, #28]
 80198ce:	440a      	add	r2, r1
 80198d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80198d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80198d8:	6013      	str	r3, [r2, #0]
 80198da:	e00f      	b.n	80198fc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80198dc:	69bb      	ldr	r3, [r7, #24]
 80198de:	015a      	lsls	r2, r3, #5
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	4413      	add	r3, r2
 80198e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	69ba      	ldr	r2, [r7, #24]
 80198ec:	0151      	lsls	r1, r2, #5
 80198ee:	69fa      	ldr	r2, [r7, #28]
 80198f0:	440a      	add	r2, r1
 80198f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80198f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80198fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80198fc:	69bb      	ldr	r3, [r7, #24]
 80198fe:	015a      	lsls	r2, r3, #5
 8019900:	69fb      	ldr	r3, [r7, #28]
 8019902:	4413      	add	r3, r2
 8019904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	69ba      	ldr	r2, [r7, #24]
 801990c:	0151      	lsls	r1, r2, #5
 801990e:	69fa      	ldr	r2, [r7, #28]
 8019910:	440a      	add	r2, r1
 8019912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801991a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801991c:	2300      	movs	r3, #0
}
 801991e:	4618      	mov	r0, r3
 8019920:	3720      	adds	r7, #32
 8019922:	46bd      	mov	sp, r7
 8019924:	bd80      	pop	{r7, pc}
 8019926:	bf00      	nop
 8019928:	fff80000 	.word	0xfff80000
 801992c:	e007ffff 	.word	0xe007ffff
 8019930:	1ff80000 	.word	0x1ff80000

08019934 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8019934:	b480      	push	{r7}
 8019936:	b087      	sub	sp, #28
 8019938:	af00      	add	r7, sp, #0
 801993a:	60f8      	str	r0, [r7, #12]
 801993c:	60b9      	str	r1, [r7, #8]
 801993e:	4613      	mov	r3, r2
 8019940:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8019946:	68bb      	ldr	r3, [r7, #8]
 8019948:	781b      	ldrb	r3, [r3, #0]
 801994a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801994c:	68bb      	ldr	r3, [r7, #8]
 801994e:	785b      	ldrb	r3, [r3, #1]
 8019950:	2b01      	cmp	r3, #1
 8019952:	f040 80ce 	bne.w	8019af2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	699b      	ldr	r3, [r3, #24]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d132      	bne.n	80199c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801995e:	693b      	ldr	r3, [r7, #16]
 8019960:	015a      	lsls	r2, r3, #5
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	4413      	add	r3, r2
 8019966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801996a:	691a      	ldr	r2, [r3, #16]
 801996c:	693b      	ldr	r3, [r7, #16]
 801996e:	0159      	lsls	r1, r3, #5
 8019970:	697b      	ldr	r3, [r7, #20]
 8019972:	440b      	add	r3, r1
 8019974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019978:	4619      	mov	r1, r3
 801997a:	4b9a      	ldr	r3, [pc, #616]	; (8019be4 <USB_EP0StartXfer+0x2b0>)
 801997c:	4013      	ands	r3, r2
 801997e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019980:	693b      	ldr	r3, [r7, #16]
 8019982:	015a      	lsls	r2, r3, #5
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	4413      	add	r3, r2
 8019988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801998c:	691b      	ldr	r3, [r3, #16]
 801998e:	693a      	ldr	r2, [r7, #16]
 8019990:	0151      	lsls	r1, r2, #5
 8019992:	697a      	ldr	r2, [r7, #20]
 8019994:	440a      	add	r2, r1
 8019996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801999a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801999e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80199a0:	693b      	ldr	r3, [r7, #16]
 80199a2:	015a      	lsls	r2, r3, #5
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	4413      	add	r3, r2
 80199a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199ac:	691a      	ldr	r2, [r3, #16]
 80199ae:	693b      	ldr	r3, [r7, #16]
 80199b0:	0159      	lsls	r1, r3, #5
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	440b      	add	r3, r1
 80199b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199ba:	4619      	mov	r1, r3
 80199bc:	4b8a      	ldr	r3, [pc, #552]	; (8019be8 <USB_EP0StartXfer+0x2b4>)
 80199be:	4013      	ands	r3, r2
 80199c0:	610b      	str	r3, [r1, #16]
 80199c2:	e04e      	b.n	8019a62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80199c4:	693b      	ldr	r3, [r7, #16]
 80199c6:	015a      	lsls	r2, r3, #5
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	4413      	add	r3, r2
 80199cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199d0:	691a      	ldr	r2, [r3, #16]
 80199d2:	693b      	ldr	r3, [r7, #16]
 80199d4:	0159      	lsls	r1, r3, #5
 80199d6:	697b      	ldr	r3, [r7, #20]
 80199d8:	440b      	add	r3, r1
 80199da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199de:	4619      	mov	r1, r3
 80199e0:	4b81      	ldr	r3, [pc, #516]	; (8019be8 <USB_EP0StartXfer+0x2b4>)
 80199e2:	4013      	ands	r3, r2
 80199e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80199e6:	693b      	ldr	r3, [r7, #16]
 80199e8:	015a      	lsls	r2, r3, #5
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	4413      	add	r3, r2
 80199ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199f2:	691a      	ldr	r2, [r3, #16]
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	0159      	lsls	r1, r3, #5
 80199f8:	697b      	ldr	r3, [r7, #20]
 80199fa:	440b      	add	r3, r1
 80199fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a00:	4619      	mov	r1, r3
 8019a02:	4b78      	ldr	r3, [pc, #480]	; (8019be4 <USB_EP0StartXfer+0x2b0>)
 8019a04:	4013      	ands	r3, r2
 8019a06:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	699a      	ldr	r2, [r3, #24]
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	68db      	ldr	r3, [r3, #12]
 8019a10:	429a      	cmp	r2, r3
 8019a12:	d903      	bls.n	8019a1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8019a14:	68bb      	ldr	r3, [r7, #8]
 8019a16:	68da      	ldr	r2, [r3, #12]
 8019a18:	68bb      	ldr	r3, [r7, #8]
 8019a1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019a1c:	693b      	ldr	r3, [r7, #16]
 8019a1e:	015a      	lsls	r2, r3, #5
 8019a20:	697b      	ldr	r3, [r7, #20]
 8019a22:	4413      	add	r3, r2
 8019a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a28:	691b      	ldr	r3, [r3, #16]
 8019a2a:	693a      	ldr	r2, [r7, #16]
 8019a2c:	0151      	lsls	r1, r2, #5
 8019a2e:	697a      	ldr	r2, [r7, #20]
 8019a30:	440a      	add	r2, r1
 8019a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	015a      	lsls	r2, r3, #5
 8019a40:	697b      	ldr	r3, [r7, #20]
 8019a42:	4413      	add	r3, r2
 8019a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a48:	691a      	ldr	r2, [r3, #16]
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	699b      	ldr	r3, [r3, #24]
 8019a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019a52:	6939      	ldr	r1, [r7, #16]
 8019a54:	0148      	lsls	r0, r1, #5
 8019a56:	6979      	ldr	r1, [r7, #20]
 8019a58:	4401      	add	r1, r0
 8019a5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8019a5e:	4313      	orrs	r3, r2
 8019a60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019a62:	79fb      	ldrb	r3, [r7, #7]
 8019a64:	2b01      	cmp	r3, #1
 8019a66:	d11e      	bne.n	8019aa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019a68:	68bb      	ldr	r3, [r7, #8]
 8019a6a:	695b      	ldr	r3, [r3, #20]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d009      	beq.n	8019a84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8019a70:	693b      	ldr	r3, [r7, #16]
 8019a72:	015a      	lsls	r2, r3, #5
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	4413      	add	r3, r2
 8019a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	68bb      	ldr	r3, [r7, #8]
 8019a80:	695b      	ldr	r3, [r3, #20]
 8019a82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019a84:	693b      	ldr	r3, [r7, #16]
 8019a86:	015a      	lsls	r2, r3, #5
 8019a88:	697b      	ldr	r3, [r7, #20]
 8019a8a:	4413      	add	r3, r2
 8019a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	693a      	ldr	r2, [r7, #16]
 8019a94:	0151      	lsls	r1, r2, #5
 8019a96:	697a      	ldr	r2, [r7, #20]
 8019a98:	440a      	add	r2, r1
 8019a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019aa2:	6013      	str	r3, [r2, #0]
 8019aa4:	e097      	b.n	8019bd6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019aa6:	693b      	ldr	r3, [r7, #16]
 8019aa8:	015a      	lsls	r2, r3, #5
 8019aaa:	697b      	ldr	r3, [r7, #20]
 8019aac:	4413      	add	r3, r2
 8019aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	693a      	ldr	r2, [r7, #16]
 8019ab6:	0151      	lsls	r1, r2, #5
 8019ab8:	697a      	ldr	r2, [r7, #20]
 8019aba:	440a      	add	r2, r1
 8019abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019ac4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8019ac6:	68bb      	ldr	r3, [r7, #8]
 8019ac8:	699b      	ldr	r3, [r3, #24]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	f000 8083 	beq.w	8019bd6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8019ad0:	697b      	ldr	r3, [r7, #20]
 8019ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	781b      	ldrb	r3, [r3, #0]
 8019adc:	f003 030f 	and.w	r3, r3, #15
 8019ae0:	2101      	movs	r1, #1
 8019ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8019ae6:	6979      	ldr	r1, [r7, #20]
 8019ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019aec:	4313      	orrs	r3, r2
 8019aee:	634b      	str	r3, [r1, #52]	; 0x34
 8019af0:	e071      	b.n	8019bd6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	015a      	lsls	r2, r3, #5
 8019af6:	697b      	ldr	r3, [r7, #20]
 8019af8:	4413      	add	r3, r2
 8019afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019afe:	691a      	ldr	r2, [r3, #16]
 8019b00:	693b      	ldr	r3, [r7, #16]
 8019b02:	0159      	lsls	r1, r3, #5
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	440b      	add	r3, r1
 8019b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b0c:	4619      	mov	r1, r3
 8019b0e:	4b36      	ldr	r3, [pc, #216]	; (8019be8 <USB_EP0StartXfer+0x2b4>)
 8019b10:	4013      	ands	r3, r2
 8019b12:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019b14:	693b      	ldr	r3, [r7, #16]
 8019b16:	015a      	lsls	r2, r3, #5
 8019b18:	697b      	ldr	r3, [r7, #20]
 8019b1a:	4413      	add	r3, r2
 8019b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b20:	691a      	ldr	r2, [r3, #16]
 8019b22:	693b      	ldr	r3, [r7, #16]
 8019b24:	0159      	lsls	r1, r3, #5
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	440b      	add	r3, r1
 8019b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b2e:	4619      	mov	r1, r3
 8019b30:	4b2c      	ldr	r3, [pc, #176]	; (8019be4 <USB_EP0StartXfer+0x2b0>)
 8019b32:	4013      	ands	r3, r2
 8019b34:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8019b36:	68bb      	ldr	r3, [r7, #8]
 8019b38:	699b      	ldr	r3, [r3, #24]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d003      	beq.n	8019b46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8019b3e:	68bb      	ldr	r3, [r7, #8]
 8019b40:	68da      	ldr	r2, [r3, #12]
 8019b42:	68bb      	ldr	r3, [r7, #8]
 8019b44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	68da      	ldr	r2, [r3, #12]
 8019b4a:	68bb      	ldr	r3, [r7, #8]
 8019b4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8019b4e:	693b      	ldr	r3, [r7, #16]
 8019b50:	015a      	lsls	r2, r3, #5
 8019b52:	697b      	ldr	r3, [r7, #20]
 8019b54:	4413      	add	r3, r2
 8019b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b5a:	691b      	ldr	r3, [r3, #16]
 8019b5c:	693a      	ldr	r2, [r7, #16]
 8019b5e:	0151      	lsls	r1, r2, #5
 8019b60:	697a      	ldr	r2, [r7, #20]
 8019b62:	440a      	add	r2, r1
 8019b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019b68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019b6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8019b6e:	693b      	ldr	r3, [r7, #16]
 8019b70:	015a      	lsls	r2, r3, #5
 8019b72:	697b      	ldr	r3, [r7, #20]
 8019b74:	4413      	add	r3, r2
 8019b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b7a:	691a      	ldr	r2, [r3, #16]
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	69db      	ldr	r3, [r3, #28]
 8019b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019b84:	6939      	ldr	r1, [r7, #16]
 8019b86:	0148      	lsls	r0, r1, #5
 8019b88:	6979      	ldr	r1, [r7, #20]
 8019b8a:	4401      	add	r1, r0
 8019b8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019b90:	4313      	orrs	r3, r2
 8019b92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8019b94:	79fb      	ldrb	r3, [r7, #7]
 8019b96:	2b01      	cmp	r3, #1
 8019b98:	d10d      	bne.n	8019bb6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	691b      	ldr	r3, [r3, #16]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d009      	beq.n	8019bb6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	6919      	ldr	r1, [r3, #16]
 8019ba6:	693b      	ldr	r3, [r7, #16]
 8019ba8:	015a      	lsls	r2, r3, #5
 8019baa:	697b      	ldr	r3, [r7, #20]
 8019bac:	4413      	add	r3, r2
 8019bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bb2:	460a      	mov	r2, r1
 8019bb4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019bb6:	693b      	ldr	r3, [r7, #16]
 8019bb8:	015a      	lsls	r2, r3, #5
 8019bba:	697b      	ldr	r3, [r7, #20]
 8019bbc:	4413      	add	r3, r2
 8019bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	693a      	ldr	r2, [r7, #16]
 8019bc6:	0151      	lsls	r1, r2, #5
 8019bc8:	697a      	ldr	r2, [r7, #20]
 8019bca:	440a      	add	r2, r1
 8019bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019bd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019bd6:	2300      	movs	r3, #0
}
 8019bd8:	4618      	mov	r0, r3
 8019bda:	371c      	adds	r7, #28
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be2:	4770      	bx	lr
 8019be4:	e007ffff 	.word	0xe007ffff
 8019be8:	fff80000 	.word	0xfff80000

08019bec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019bec:	b480      	push	{r7}
 8019bee:	b087      	sub	sp, #28
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
 8019bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019c02:	683b      	ldr	r3, [r7, #0]
 8019c04:	785b      	ldrb	r3, [r3, #1]
 8019c06:	2b01      	cmp	r3, #1
 8019c08:	d14a      	bne.n	8019ca0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019c0a:	683b      	ldr	r3, [r7, #0]
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	015a      	lsls	r2, r3, #5
 8019c10:	693b      	ldr	r3, [r7, #16]
 8019c12:	4413      	add	r3, r2
 8019c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c22:	f040 8086 	bne.w	8019d32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	781b      	ldrb	r3, [r3, #0]
 8019c2a:	015a      	lsls	r2, r3, #5
 8019c2c:	693b      	ldr	r3, [r7, #16]
 8019c2e:	4413      	add	r3, r2
 8019c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	683a      	ldr	r2, [r7, #0]
 8019c38:	7812      	ldrb	r2, [r2, #0]
 8019c3a:	0151      	lsls	r1, r2, #5
 8019c3c:	693a      	ldr	r2, [r7, #16]
 8019c3e:	440a      	add	r2, r1
 8019c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019c44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019c48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8019c4a:	683b      	ldr	r3, [r7, #0]
 8019c4c:	781b      	ldrb	r3, [r3, #0]
 8019c4e:	015a      	lsls	r2, r3, #5
 8019c50:	693b      	ldr	r3, [r7, #16]
 8019c52:	4413      	add	r3, r2
 8019c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	683a      	ldr	r2, [r7, #0]
 8019c5c:	7812      	ldrb	r2, [r2, #0]
 8019c5e:	0151      	lsls	r1, r2, #5
 8019c60:	693a      	ldr	r2, [r7, #16]
 8019c62:	440a      	add	r2, r1
 8019c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019c6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	3301      	adds	r3, #1
 8019c72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	f242 7210 	movw	r2, #10000	; 0x2710
 8019c7a:	4293      	cmp	r3, r2
 8019c7c:	d902      	bls.n	8019c84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8019c7e:	2301      	movs	r3, #1
 8019c80:	75fb      	strb	r3, [r7, #23]
          break;
 8019c82:	e056      	b.n	8019d32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	781b      	ldrb	r3, [r3, #0]
 8019c88:	015a      	lsls	r2, r3, #5
 8019c8a:	693b      	ldr	r3, [r7, #16]
 8019c8c:	4413      	add	r3, r2
 8019c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c9c:	d0e7      	beq.n	8019c6e <USB_EPStopXfer+0x82>
 8019c9e:	e048      	b.n	8019d32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	781b      	ldrb	r3, [r3, #0]
 8019ca4:	015a      	lsls	r2, r3, #5
 8019ca6:	693b      	ldr	r3, [r7, #16]
 8019ca8:	4413      	add	r3, r2
 8019caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019cb8:	d13b      	bne.n	8019d32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	781b      	ldrb	r3, [r3, #0]
 8019cbe:	015a      	lsls	r2, r3, #5
 8019cc0:	693b      	ldr	r3, [r7, #16]
 8019cc2:	4413      	add	r3, r2
 8019cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	683a      	ldr	r2, [r7, #0]
 8019ccc:	7812      	ldrb	r2, [r2, #0]
 8019cce:	0151      	lsls	r1, r2, #5
 8019cd0:	693a      	ldr	r2, [r7, #16]
 8019cd2:	440a      	add	r2, r1
 8019cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019cdc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	781b      	ldrb	r3, [r3, #0]
 8019ce2:	015a      	lsls	r2, r3, #5
 8019ce4:	693b      	ldr	r3, [r7, #16]
 8019ce6:	4413      	add	r3, r2
 8019ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	683a      	ldr	r2, [r7, #0]
 8019cf0:	7812      	ldrb	r2, [r2, #0]
 8019cf2:	0151      	lsls	r1, r2, #5
 8019cf4:	693a      	ldr	r2, [r7, #16]
 8019cf6:	440a      	add	r2, r1
 8019cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019d00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	3301      	adds	r3, #1
 8019d06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8019d0e:	4293      	cmp	r3, r2
 8019d10:	d902      	bls.n	8019d18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8019d12:	2301      	movs	r3, #1
 8019d14:	75fb      	strb	r3, [r7, #23]
          break;
 8019d16:	e00c      	b.n	8019d32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	781b      	ldrb	r3, [r3, #0]
 8019d1c:	015a      	lsls	r2, r3, #5
 8019d1e:	693b      	ldr	r3, [r7, #16]
 8019d20:	4413      	add	r3, r2
 8019d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019d30:	d0e7      	beq.n	8019d02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8019d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	371c      	adds	r7, #28
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d3e:	4770      	bx	lr

08019d40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8019d40:	b480      	push	{r7}
 8019d42:	b089      	sub	sp, #36	; 0x24
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	60f8      	str	r0, [r7, #12]
 8019d48:	60b9      	str	r1, [r7, #8]
 8019d4a:	4611      	mov	r1, r2
 8019d4c:	461a      	mov	r2, r3
 8019d4e:	460b      	mov	r3, r1
 8019d50:	71fb      	strb	r3, [r7, #7]
 8019d52:	4613      	mov	r3, r2
 8019d54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8019d5a:	68bb      	ldr	r3, [r7, #8]
 8019d5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8019d5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d123      	bne.n	8019dae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8019d66:	88bb      	ldrh	r3, [r7, #4]
 8019d68:	3303      	adds	r3, #3
 8019d6a:	089b      	lsrs	r3, r3, #2
 8019d6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8019d6e:	2300      	movs	r3, #0
 8019d70:	61bb      	str	r3, [r7, #24]
 8019d72:	e018      	b.n	8019da6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8019d74:	79fb      	ldrb	r3, [r7, #7]
 8019d76:	031a      	lsls	r2, r3, #12
 8019d78:	697b      	ldr	r3, [r7, #20]
 8019d7a:	4413      	add	r3, r2
 8019d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d80:	461a      	mov	r2, r3
 8019d82:	69fb      	ldr	r3, [r7, #28]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	3301      	adds	r3, #1
 8019d8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019d8e:	69fb      	ldr	r3, [r7, #28]
 8019d90:	3301      	adds	r3, #1
 8019d92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019d94:	69fb      	ldr	r3, [r7, #28]
 8019d96:	3301      	adds	r3, #1
 8019d98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	3301      	adds	r3, #1
 8019d9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8019da0:	69bb      	ldr	r3, [r7, #24]
 8019da2:	3301      	adds	r3, #1
 8019da4:	61bb      	str	r3, [r7, #24]
 8019da6:	69ba      	ldr	r2, [r7, #24]
 8019da8:	693b      	ldr	r3, [r7, #16]
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d3e2      	bcc.n	8019d74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8019dae:	2300      	movs	r3, #0
}
 8019db0:	4618      	mov	r0, r3
 8019db2:	3724      	adds	r7, #36	; 0x24
 8019db4:	46bd      	mov	sp, r7
 8019db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dba:	4770      	bx	lr

08019dbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8019dbc:	b480      	push	{r7}
 8019dbe:	b08b      	sub	sp, #44	; 0x2c
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	60f8      	str	r0, [r7, #12]
 8019dc4:	60b9      	str	r1, [r7, #8]
 8019dc6:	4613      	mov	r3, r2
 8019dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8019dce:	68bb      	ldr	r3, [r7, #8]
 8019dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8019dd2:	88fb      	ldrh	r3, [r7, #6]
 8019dd4:	089b      	lsrs	r3, r3, #2
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8019dda:	88fb      	ldrh	r3, [r7, #6]
 8019ddc:	f003 0303 	and.w	r3, r3, #3
 8019de0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8019de2:	2300      	movs	r3, #0
 8019de4:	623b      	str	r3, [r7, #32]
 8019de6:	e014      	b.n	8019e12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8019de8:	69bb      	ldr	r3, [r7, #24]
 8019dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019dee:	681a      	ldr	r2, [r3, #0]
 8019df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df2:	601a      	str	r2, [r3, #0]
    pDest++;
 8019df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df6:	3301      	adds	r3, #1
 8019df8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dfc:	3301      	adds	r3, #1
 8019dfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e02:	3301      	adds	r3, #1
 8019e04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e08:	3301      	adds	r3, #1
 8019e0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8019e0c:	6a3b      	ldr	r3, [r7, #32]
 8019e0e:	3301      	adds	r3, #1
 8019e10:	623b      	str	r3, [r7, #32]
 8019e12:	6a3a      	ldr	r2, [r7, #32]
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	429a      	cmp	r2, r3
 8019e18:	d3e6      	bcc.n	8019de8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8019e1a:	8bfb      	ldrh	r3, [r7, #30]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d01e      	beq.n	8019e5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8019e20:	2300      	movs	r3, #0
 8019e22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8019e24:	69bb      	ldr	r3, [r7, #24]
 8019e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e2a:	461a      	mov	r2, r3
 8019e2c:	f107 0310 	add.w	r3, r7, #16
 8019e30:	6812      	ldr	r2, [r2, #0]
 8019e32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8019e34:	693a      	ldr	r2, [r7, #16]
 8019e36:	6a3b      	ldr	r3, [r7, #32]
 8019e38:	b2db      	uxtb	r3, r3
 8019e3a:	00db      	lsls	r3, r3, #3
 8019e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8019e40:	b2da      	uxtb	r2, r3
 8019e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e44:	701a      	strb	r2, [r3, #0]
      i++;
 8019e46:	6a3b      	ldr	r3, [r7, #32]
 8019e48:	3301      	adds	r3, #1
 8019e4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8019e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e4e:	3301      	adds	r3, #1
 8019e50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8019e52:	8bfb      	ldrh	r3, [r7, #30]
 8019e54:	3b01      	subs	r3, #1
 8019e56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8019e58:	8bfb      	ldrh	r3, [r7, #30]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d1ea      	bne.n	8019e34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8019e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019e60:	4618      	mov	r0, r3
 8019e62:	372c      	adds	r7, #44	; 0x2c
 8019e64:	46bd      	mov	sp, r7
 8019e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6a:	4770      	bx	lr

08019e6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019e6c:	b480      	push	{r7}
 8019e6e:	b085      	sub	sp, #20
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
 8019e74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019e80:	683b      	ldr	r3, [r7, #0]
 8019e82:	785b      	ldrb	r3, [r3, #1]
 8019e84:	2b01      	cmp	r3, #1
 8019e86:	d12c      	bne.n	8019ee2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	015a      	lsls	r2, r3, #5
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	4413      	add	r3, r2
 8019e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	db12      	blt.n	8019ec0 <USB_EPSetStall+0x54>
 8019e9a:	68bb      	ldr	r3, [r7, #8]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d00f      	beq.n	8019ec0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8019ea0:	68bb      	ldr	r3, [r7, #8]
 8019ea2:	015a      	lsls	r2, r3, #5
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	4413      	add	r3, r2
 8019ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	68ba      	ldr	r2, [r7, #8]
 8019eb0:	0151      	lsls	r1, r2, #5
 8019eb2:	68fa      	ldr	r2, [r7, #12]
 8019eb4:	440a      	add	r2, r1
 8019eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019eba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8019ebe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	015a      	lsls	r2, r3, #5
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	4413      	add	r3, r2
 8019ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	68ba      	ldr	r2, [r7, #8]
 8019ed0:	0151      	lsls	r1, r2, #5
 8019ed2:	68fa      	ldr	r2, [r7, #12]
 8019ed4:	440a      	add	r2, r1
 8019ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019ede:	6013      	str	r3, [r2, #0]
 8019ee0:	e02b      	b.n	8019f3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	015a      	lsls	r2, r3, #5
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	4413      	add	r3, r2
 8019eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	db12      	blt.n	8019f1a <USB_EPSetStall+0xae>
 8019ef4:	68bb      	ldr	r3, [r7, #8]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d00f      	beq.n	8019f1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8019efa:	68bb      	ldr	r3, [r7, #8]
 8019efc:	015a      	lsls	r2, r3, #5
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	4413      	add	r3, r2
 8019f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	68ba      	ldr	r2, [r7, #8]
 8019f0a:	0151      	lsls	r1, r2, #5
 8019f0c:	68fa      	ldr	r2, [r7, #12]
 8019f0e:	440a      	add	r2, r1
 8019f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8019f18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8019f1a:	68bb      	ldr	r3, [r7, #8]
 8019f1c:	015a      	lsls	r2, r3, #5
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	4413      	add	r3, r2
 8019f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	68ba      	ldr	r2, [r7, #8]
 8019f2a:	0151      	lsls	r1, r2, #5
 8019f2c:	68fa      	ldr	r2, [r7, #12]
 8019f2e:	440a      	add	r2, r1
 8019f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019f38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019f3a:	2300      	movs	r3, #0
}
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3714      	adds	r7, #20
 8019f40:	46bd      	mov	sp, r7
 8019f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f46:	4770      	bx	lr

08019f48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019f48:	b480      	push	{r7}
 8019f4a:	b085      	sub	sp, #20
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
 8019f50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019f56:	683b      	ldr	r3, [r7, #0]
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	785b      	ldrb	r3, [r3, #1]
 8019f60:	2b01      	cmp	r3, #1
 8019f62:	d128      	bne.n	8019fb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	015a      	lsls	r2, r3, #5
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	4413      	add	r3, r2
 8019f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	68ba      	ldr	r2, [r7, #8]
 8019f74:	0151      	lsls	r1, r2, #5
 8019f76:	68fa      	ldr	r2, [r7, #12]
 8019f78:	440a      	add	r2, r1
 8019f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019f82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8019f84:	683b      	ldr	r3, [r7, #0]
 8019f86:	791b      	ldrb	r3, [r3, #4]
 8019f88:	2b03      	cmp	r3, #3
 8019f8a:	d003      	beq.n	8019f94 <USB_EPClearStall+0x4c>
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	791b      	ldrb	r3, [r3, #4]
 8019f90:	2b02      	cmp	r3, #2
 8019f92:	d138      	bne.n	801a006 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8019f94:	68bb      	ldr	r3, [r7, #8]
 8019f96:	015a      	lsls	r2, r3, #5
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	4413      	add	r3, r2
 8019f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	68ba      	ldr	r2, [r7, #8]
 8019fa4:	0151      	lsls	r1, r2, #5
 8019fa6:	68fa      	ldr	r2, [r7, #12]
 8019fa8:	440a      	add	r2, r1
 8019faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019fb2:	6013      	str	r3, [r2, #0]
 8019fb4:	e027      	b.n	801a006 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8019fb6:	68bb      	ldr	r3, [r7, #8]
 8019fb8:	015a      	lsls	r2, r3, #5
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	4413      	add	r3, r2
 8019fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	68ba      	ldr	r2, [r7, #8]
 8019fc6:	0151      	lsls	r1, r2, #5
 8019fc8:	68fa      	ldr	r2, [r7, #12]
 8019fca:	440a      	add	r2, r1
 8019fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019fd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019fd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8019fd6:	683b      	ldr	r3, [r7, #0]
 8019fd8:	791b      	ldrb	r3, [r3, #4]
 8019fda:	2b03      	cmp	r3, #3
 8019fdc:	d003      	beq.n	8019fe6 <USB_EPClearStall+0x9e>
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	791b      	ldrb	r3, [r3, #4]
 8019fe2:	2b02      	cmp	r3, #2
 8019fe4:	d10f      	bne.n	801a006 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8019fe6:	68bb      	ldr	r3, [r7, #8]
 8019fe8:	015a      	lsls	r2, r3, #5
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	4413      	add	r3, r2
 8019fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	68ba      	ldr	r2, [r7, #8]
 8019ff6:	0151      	lsls	r1, r2, #5
 8019ff8:	68fa      	ldr	r2, [r7, #12]
 8019ffa:	440a      	add	r2, r1
 8019ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a004:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801a006:	2300      	movs	r3, #0
}
 801a008:	4618      	mov	r0, r3
 801a00a:	3714      	adds	r7, #20
 801a00c:	46bd      	mov	sp, r7
 801a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a012:	4770      	bx	lr

0801a014 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801a014:	b480      	push	{r7}
 801a016:	b085      	sub	sp, #20
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
 801a01c:	460b      	mov	r3, r1
 801a01e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	68fa      	ldr	r2, [r7, #12]
 801a02e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a032:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a036:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a03e:	681a      	ldr	r2, [r3, #0]
 801a040:	78fb      	ldrb	r3, [r7, #3]
 801a042:	011b      	lsls	r3, r3, #4
 801a044:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801a048:	68f9      	ldr	r1, [r7, #12]
 801a04a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a04e:	4313      	orrs	r3, r2
 801a050:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801a052:	2300      	movs	r3, #0
}
 801a054:	4618      	mov	r0, r3
 801a056:	3714      	adds	r7, #20
 801a058:	46bd      	mov	sp, r7
 801a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a05e:	4770      	bx	lr

0801a060 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a060:	b480      	push	{r7}
 801a062:	b085      	sub	sp, #20
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	68fa      	ldr	r2, [r7, #12]
 801a076:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a07a:	f023 0303 	bic.w	r3, r3, #3
 801a07e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a086:	685b      	ldr	r3, [r3, #4]
 801a088:	68fa      	ldr	r2, [r7, #12]
 801a08a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a08e:	f023 0302 	bic.w	r3, r3, #2
 801a092:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a094:	2300      	movs	r3, #0
}
 801a096:	4618      	mov	r0, r3
 801a098:	3714      	adds	r7, #20
 801a09a:	46bd      	mov	sp, r7
 801a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a0:	4770      	bx	lr

0801a0a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a0a2:	b480      	push	{r7}
 801a0a4:	b085      	sub	sp, #20
 801a0a6:	af00      	add	r7, sp, #0
 801a0a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	68fa      	ldr	r2, [r7, #12]
 801a0b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a0bc:	f023 0303 	bic.w	r3, r3, #3
 801a0c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0c8:	685b      	ldr	r3, [r3, #4]
 801a0ca:	68fa      	ldr	r2, [r7, #12]
 801a0cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a0d0:	f043 0302 	orr.w	r3, r3, #2
 801a0d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a0d6:	2300      	movs	r3, #0
}
 801a0d8:	4618      	mov	r0, r3
 801a0da:	3714      	adds	r7, #20
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e2:	4770      	bx	lr

0801a0e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b085      	sub	sp, #20
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	695b      	ldr	r3, [r3, #20]
 801a0f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	699b      	ldr	r3, [r3, #24]
 801a0f6:	68fa      	ldr	r2, [r7, #12]
 801a0f8:	4013      	ands	r3, r2
 801a0fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801a0fc:	68fb      	ldr	r3, [r7, #12]
}
 801a0fe:	4618      	mov	r0, r3
 801a100:	3714      	adds	r7, #20
 801a102:	46bd      	mov	sp, r7
 801a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a108:	4770      	bx	lr

0801a10a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a10a:	b480      	push	{r7}
 801a10c:	b085      	sub	sp, #20
 801a10e:	af00      	add	r7, sp, #0
 801a110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a11c:	699b      	ldr	r3, [r3, #24]
 801a11e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a126:	69db      	ldr	r3, [r3, #28]
 801a128:	68ba      	ldr	r2, [r7, #8]
 801a12a:	4013      	ands	r3, r2
 801a12c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	0c1b      	lsrs	r3, r3, #16
}
 801a132:	4618      	mov	r0, r3
 801a134:	3714      	adds	r7, #20
 801a136:	46bd      	mov	sp, r7
 801a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13c:	4770      	bx	lr

0801a13e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a13e:	b480      	push	{r7}
 801a140:	b085      	sub	sp, #20
 801a142:	af00      	add	r7, sp, #0
 801a144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a150:	699b      	ldr	r3, [r3, #24]
 801a152:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a15a:	69db      	ldr	r3, [r3, #28]
 801a15c:	68ba      	ldr	r2, [r7, #8]
 801a15e:	4013      	ands	r3, r2
 801a160:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801a162:	68bb      	ldr	r3, [r7, #8]
 801a164:	b29b      	uxth	r3, r3
}
 801a166:	4618      	mov	r0, r3
 801a168:	3714      	adds	r7, #20
 801a16a:	46bd      	mov	sp, r7
 801a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a170:	4770      	bx	lr

0801a172 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a172:	b480      	push	{r7}
 801a174:	b085      	sub	sp, #20
 801a176:	af00      	add	r7, sp, #0
 801a178:	6078      	str	r0, [r7, #4]
 801a17a:	460b      	mov	r3, r1
 801a17c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801a182:	78fb      	ldrb	r3, [r7, #3]
 801a184:	015a      	lsls	r2, r3, #5
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	4413      	add	r3, r2
 801a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a18e:	689b      	ldr	r3, [r3, #8]
 801a190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a198:	695b      	ldr	r3, [r3, #20]
 801a19a:	68ba      	ldr	r2, [r7, #8]
 801a19c:	4013      	ands	r3, r2
 801a19e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a1a0:	68bb      	ldr	r3, [r7, #8]
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3714      	adds	r7, #20
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ac:	4770      	bx	lr

0801a1ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a1ae:	b480      	push	{r7}
 801a1b0:	b087      	sub	sp, #28
 801a1b2:	af00      	add	r7, sp, #0
 801a1b4:	6078      	str	r0, [r7, #4]
 801a1b6:	460b      	mov	r3, r1
 801a1b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801a1be:	697b      	ldr	r3, [r7, #20]
 801a1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1c4:	691b      	ldr	r3, [r3, #16]
 801a1c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801a1c8:	697b      	ldr	r3, [r7, #20]
 801a1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a1d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801a1d2:	78fb      	ldrb	r3, [r7, #3]
 801a1d4:	f003 030f 	and.w	r3, r3, #15
 801a1d8:	68fa      	ldr	r2, [r7, #12]
 801a1da:	fa22 f303 	lsr.w	r3, r2, r3
 801a1de:	01db      	lsls	r3, r3, #7
 801a1e0:	b2db      	uxtb	r3, r3
 801a1e2:	693a      	ldr	r2, [r7, #16]
 801a1e4:	4313      	orrs	r3, r2
 801a1e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801a1e8:	78fb      	ldrb	r3, [r7, #3]
 801a1ea:	015a      	lsls	r2, r3, #5
 801a1ec:	697b      	ldr	r3, [r7, #20]
 801a1ee:	4413      	add	r3, r2
 801a1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1f4:	689b      	ldr	r3, [r3, #8]
 801a1f6:	693a      	ldr	r2, [r7, #16]
 801a1f8:	4013      	ands	r3, r2
 801a1fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a1fc:	68bb      	ldr	r3, [r7, #8]
}
 801a1fe:	4618      	mov	r0, r3
 801a200:	371c      	adds	r7, #28
 801a202:	46bd      	mov	sp, r7
 801a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a208:	4770      	bx	lr

0801a20a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801a20a:	b480      	push	{r7}
 801a20c:	b083      	sub	sp, #12
 801a20e:	af00      	add	r7, sp, #0
 801a210:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	695b      	ldr	r3, [r3, #20]
 801a216:	f003 0301 	and.w	r3, r3, #1
}
 801a21a:	4618      	mov	r0, r3
 801a21c:	370c      	adds	r7, #12
 801a21e:	46bd      	mov	sp, r7
 801a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a224:	4770      	bx	lr
	...

0801a228 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801a228:	b480      	push	{r7}
 801a22a:	b085      	sub	sp, #20
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a23a:	681a      	ldr	r2, [r3, #0]
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a242:	4619      	mov	r1, r3
 801a244:	4b09      	ldr	r3, [pc, #36]	; (801a26c <USB_ActivateSetup+0x44>)
 801a246:	4013      	ands	r3, r2
 801a248:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a250:	685b      	ldr	r3, [r3, #4]
 801a252:	68fa      	ldr	r2, [r7, #12]
 801a254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a25c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a25e:	2300      	movs	r3, #0
}
 801a260:	4618      	mov	r0, r3
 801a262:	3714      	adds	r7, #20
 801a264:	46bd      	mov	sp, r7
 801a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26a:	4770      	bx	lr
 801a26c:	fffff800 	.word	0xfffff800

0801a270 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801a270:	b480      	push	{r7}
 801a272:	b087      	sub	sp, #28
 801a274:	af00      	add	r7, sp, #0
 801a276:	60f8      	str	r0, [r7, #12]
 801a278:	460b      	mov	r3, r1
 801a27a:	607a      	str	r2, [r7, #4]
 801a27c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	333c      	adds	r3, #60	; 0x3c
 801a286:	3304      	adds	r3, #4
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801a28c:	693b      	ldr	r3, [r7, #16]
 801a28e:	4a26      	ldr	r2, [pc, #152]	; (801a328 <USB_EP0_OutStart+0xb8>)
 801a290:	4293      	cmp	r3, r2
 801a292:	d90a      	bls.n	801a2aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a294:	697b      	ldr	r3, [r7, #20]
 801a296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a2a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a2a4:	d101      	bne.n	801a2aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	e037      	b.n	801a31a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801a2aa:	697b      	ldr	r3, [r7, #20]
 801a2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2b0:	461a      	mov	r2, r3
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a2b6:	697b      	ldr	r3, [r7, #20]
 801a2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2bc:	691b      	ldr	r3, [r3, #16]
 801a2be:	697a      	ldr	r2, [r7, #20]
 801a2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a2c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a2c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801a2ca:	697b      	ldr	r3, [r7, #20]
 801a2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2d0:	691b      	ldr	r3, [r3, #16]
 801a2d2:	697a      	ldr	r2, [r7, #20]
 801a2d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a2d8:	f043 0318 	orr.w	r3, r3, #24
 801a2dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801a2de:	697b      	ldr	r3, [r7, #20]
 801a2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2e4:	691b      	ldr	r3, [r3, #16]
 801a2e6:	697a      	ldr	r2, [r7, #20]
 801a2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a2ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801a2f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801a2f2:	7afb      	ldrb	r3, [r7, #11]
 801a2f4:	2b01      	cmp	r3, #1
 801a2f6:	d10f      	bne.n	801a318 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801a2f8:	697b      	ldr	r3, [r7, #20]
 801a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2fe:	461a      	mov	r2, r3
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801a304:	697b      	ldr	r3, [r7, #20]
 801a306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	697a      	ldr	r2, [r7, #20]
 801a30e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a312:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801a316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a318:	2300      	movs	r3, #0
}
 801a31a:	4618      	mov	r0, r3
 801a31c:	371c      	adds	r7, #28
 801a31e:	46bd      	mov	sp, r7
 801a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a324:	4770      	bx	lr
 801a326:	bf00      	nop
 801a328:	4f54300a 	.word	0x4f54300a

0801a32c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801a32c:	b480      	push	{r7}
 801a32e:	b085      	sub	sp, #20
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a334:	2300      	movs	r3, #0
 801a336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	3301      	adds	r3, #1
 801a33c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	4a13      	ldr	r2, [pc, #76]	; (801a390 <USB_CoreReset+0x64>)
 801a342:	4293      	cmp	r3, r2
 801a344:	d901      	bls.n	801a34a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801a346:	2303      	movs	r3, #3
 801a348:	e01b      	b.n	801a382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	691b      	ldr	r3, [r3, #16]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	daf2      	bge.n	801a338 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801a352:	2300      	movs	r3, #0
 801a354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	691b      	ldr	r3, [r3, #16]
 801a35a:	f043 0201 	orr.w	r2, r3, #1
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	3301      	adds	r3, #1
 801a366:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	4a09      	ldr	r2, [pc, #36]	; (801a390 <USB_CoreReset+0x64>)
 801a36c:	4293      	cmp	r3, r2
 801a36e:	d901      	bls.n	801a374 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801a370:	2303      	movs	r3, #3
 801a372:	e006      	b.n	801a382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	691b      	ldr	r3, [r3, #16]
 801a378:	f003 0301 	and.w	r3, r3, #1
 801a37c:	2b01      	cmp	r3, #1
 801a37e:	d0f0      	beq.n	801a362 <USB_CoreReset+0x36>

  return HAL_OK;
 801a380:	2300      	movs	r3, #0
}
 801a382:	4618      	mov	r0, r3
 801a384:	3714      	adds	r7, #20
 801a386:	46bd      	mov	sp, r7
 801a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38c:	4770      	bx	lr
 801a38e:	bf00      	nop
 801a390:	00030d40 	.word	0x00030d40

0801a394 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b084      	sub	sp, #16
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	460b      	mov	r3, r1
 801a39e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a3a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801a3a4:	f002 fc54 	bl	801cc50 <USBD_static_malloc>
 801a3a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d109      	bne.n	801a3c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	32b0      	adds	r2, #176	; 0xb0
 801a3ba:	2100      	movs	r1, #0
 801a3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801a3c0:	2302      	movs	r3, #2
 801a3c2:	e0d4      	b.n	801a56e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801a3c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801a3c8:	2100      	movs	r1, #0
 801a3ca:	68f8      	ldr	r0, [r7, #12]
 801a3cc:	f002 fd42 	bl	801ce54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	32b0      	adds	r2, #176	; 0xb0
 801a3da:	68f9      	ldr	r1, [r7, #12]
 801a3dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	32b0      	adds	r2, #176	; 0xb0
 801a3ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	7c1b      	ldrb	r3, [r3, #16]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d138      	bne.n	801a46e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a3fc:	4b5e      	ldr	r3, [pc, #376]	; (801a578 <USBD_CDC_Init+0x1e4>)
 801a3fe:	7819      	ldrb	r1, [r3, #0]
 801a400:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a404:	2202      	movs	r2, #2
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f002 faff 	bl	801ca0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a40c:	4b5a      	ldr	r3, [pc, #360]	; (801a578 <USBD_CDC_Init+0x1e4>)
 801a40e:	781b      	ldrb	r3, [r3, #0]
 801a410:	f003 020f 	and.w	r2, r3, #15
 801a414:	6879      	ldr	r1, [r7, #4]
 801a416:	4613      	mov	r3, r2
 801a418:	009b      	lsls	r3, r3, #2
 801a41a:	4413      	add	r3, r2
 801a41c:	009b      	lsls	r3, r3, #2
 801a41e:	440b      	add	r3, r1
 801a420:	3324      	adds	r3, #36	; 0x24
 801a422:	2201      	movs	r2, #1
 801a424:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a426:	4b55      	ldr	r3, [pc, #340]	; (801a57c <USBD_CDC_Init+0x1e8>)
 801a428:	7819      	ldrb	r1, [r3, #0]
 801a42a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a42e:	2202      	movs	r2, #2
 801a430:	6878      	ldr	r0, [r7, #4]
 801a432:	f002 faea 	bl	801ca0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a436:	4b51      	ldr	r3, [pc, #324]	; (801a57c <USBD_CDC_Init+0x1e8>)
 801a438:	781b      	ldrb	r3, [r3, #0]
 801a43a:	f003 020f 	and.w	r2, r3, #15
 801a43e:	6879      	ldr	r1, [r7, #4]
 801a440:	4613      	mov	r3, r2
 801a442:	009b      	lsls	r3, r3, #2
 801a444:	4413      	add	r3, r2
 801a446:	009b      	lsls	r3, r3, #2
 801a448:	440b      	add	r3, r1
 801a44a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a44e:	2201      	movs	r2, #1
 801a450:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801a452:	4b4b      	ldr	r3, [pc, #300]	; (801a580 <USBD_CDC_Init+0x1ec>)
 801a454:	781b      	ldrb	r3, [r3, #0]
 801a456:	f003 020f 	and.w	r2, r3, #15
 801a45a:	6879      	ldr	r1, [r7, #4]
 801a45c:	4613      	mov	r3, r2
 801a45e:	009b      	lsls	r3, r3, #2
 801a460:	4413      	add	r3, r2
 801a462:	009b      	lsls	r3, r3, #2
 801a464:	440b      	add	r3, r1
 801a466:	3326      	adds	r3, #38	; 0x26
 801a468:	2210      	movs	r2, #16
 801a46a:	801a      	strh	r2, [r3, #0]
 801a46c:	e035      	b.n	801a4da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a46e:	4b42      	ldr	r3, [pc, #264]	; (801a578 <USBD_CDC_Init+0x1e4>)
 801a470:	7819      	ldrb	r1, [r3, #0]
 801a472:	2340      	movs	r3, #64	; 0x40
 801a474:	2202      	movs	r2, #2
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f002 fac7 	bl	801ca0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a47c:	4b3e      	ldr	r3, [pc, #248]	; (801a578 <USBD_CDC_Init+0x1e4>)
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	f003 020f 	and.w	r2, r3, #15
 801a484:	6879      	ldr	r1, [r7, #4]
 801a486:	4613      	mov	r3, r2
 801a488:	009b      	lsls	r3, r3, #2
 801a48a:	4413      	add	r3, r2
 801a48c:	009b      	lsls	r3, r3, #2
 801a48e:	440b      	add	r3, r1
 801a490:	3324      	adds	r3, #36	; 0x24
 801a492:	2201      	movs	r2, #1
 801a494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a496:	4b39      	ldr	r3, [pc, #228]	; (801a57c <USBD_CDC_Init+0x1e8>)
 801a498:	7819      	ldrb	r1, [r3, #0]
 801a49a:	2340      	movs	r3, #64	; 0x40
 801a49c:	2202      	movs	r2, #2
 801a49e:	6878      	ldr	r0, [r7, #4]
 801a4a0:	f002 fab3 	bl	801ca0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a4a4:	4b35      	ldr	r3, [pc, #212]	; (801a57c <USBD_CDC_Init+0x1e8>)
 801a4a6:	781b      	ldrb	r3, [r3, #0]
 801a4a8:	f003 020f 	and.w	r2, r3, #15
 801a4ac:	6879      	ldr	r1, [r7, #4]
 801a4ae:	4613      	mov	r3, r2
 801a4b0:	009b      	lsls	r3, r3, #2
 801a4b2:	4413      	add	r3, r2
 801a4b4:	009b      	lsls	r3, r3, #2
 801a4b6:	440b      	add	r3, r1
 801a4b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a4bc:	2201      	movs	r2, #1
 801a4be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801a4c0:	4b2f      	ldr	r3, [pc, #188]	; (801a580 <USBD_CDC_Init+0x1ec>)
 801a4c2:	781b      	ldrb	r3, [r3, #0]
 801a4c4:	f003 020f 	and.w	r2, r3, #15
 801a4c8:	6879      	ldr	r1, [r7, #4]
 801a4ca:	4613      	mov	r3, r2
 801a4cc:	009b      	lsls	r3, r3, #2
 801a4ce:	4413      	add	r3, r2
 801a4d0:	009b      	lsls	r3, r3, #2
 801a4d2:	440b      	add	r3, r1
 801a4d4:	3326      	adds	r3, #38	; 0x26
 801a4d6:	2210      	movs	r2, #16
 801a4d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a4da:	4b29      	ldr	r3, [pc, #164]	; (801a580 <USBD_CDC_Init+0x1ec>)
 801a4dc:	7819      	ldrb	r1, [r3, #0]
 801a4de:	2308      	movs	r3, #8
 801a4e0:	2203      	movs	r2, #3
 801a4e2:	6878      	ldr	r0, [r7, #4]
 801a4e4:	f002 fa91 	bl	801ca0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801a4e8:	4b25      	ldr	r3, [pc, #148]	; (801a580 <USBD_CDC_Init+0x1ec>)
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	f003 020f 	and.w	r2, r3, #15
 801a4f0:	6879      	ldr	r1, [r7, #4]
 801a4f2:	4613      	mov	r3, r2
 801a4f4:	009b      	lsls	r3, r3, #2
 801a4f6:	4413      	add	r3, r2
 801a4f8:	009b      	lsls	r3, r3, #2
 801a4fa:	440b      	add	r3, r1
 801a4fc:	3324      	adds	r3, #36	; 0x24
 801a4fe:	2201      	movs	r2, #1
 801a500:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	2200      	movs	r2, #0
 801a506:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a510:	687a      	ldr	r2, [r7, #4]
 801a512:	33b0      	adds	r3, #176	; 0xb0
 801a514:	009b      	lsls	r3, r3, #2
 801a516:	4413      	add	r3, r2
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	2200      	movs	r2, #0
 801a522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	2200      	movs	r2, #0
 801a52a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801a534:	2b00      	cmp	r3, #0
 801a536:	d101      	bne.n	801a53c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801a538:	2302      	movs	r3, #2
 801a53a:	e018      	b.n	801a56e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	7c1b      	ldrb	r3, [r3, #16]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d10a      	bne.n	801a55a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a544:	4b0d      	ldr	r3, [pc, #52]	; (801a57c <USBD_CDC_Init+0x1e8>)
 801a546:	7819      	ldrb	r1, [r3, #0]
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a54e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a552:	6878      	ldr	r0, [r7, #4]
 801a554:	f002 fb48 	bl	801cbe8 <USBD_LL_PrepareReceive>
 801a558:	e008      	b.n	801a56c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a55a:	4b08      	ldr	r3, [pc, #32]	; (801a57c <USBD_CDC_Init+0x1e8>)
 801a55c:	7819      	ldrb	r1, [r3, #0]
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a564:	2340      	movs	r3, #64	; 0x40
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	f002 fb3e 	bl	801cbe8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801a56c:	2300      	movs	r3, #0
}
 801a56e:	4618      	mov	r0, r3
 801a570:	3710      	adds	r7, #16
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}
 801a576:	bf00      	nop
 801a578:	24000097 	.word	0x24000097
 801a57c:	24000098 	.word	0x24000098
 801a580:	24000099 	.word	0x24000099

0801a584 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a584:	b580      	push	{r7, lr}
 801a586:	b082      	sub	sp, #8
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	460b      	mov	r3, r1
 801a58e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801a590:	4b3a      	ldr	r3, [pc, #232]	; (801a67c <USBD_CDC_DeInit+0xf8>)
 801a592:	781b      	ldrb	r3, [r3, #0]
 801a594:	4619      	mov	r1, r3
 801a596:	6878      	ldr	r0, [r7, #4]
 801a598:	f002 fa5d 	bl	801ca56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801a59c:	4b37      	ldr	r3, [pc, #220]	; (801a67c <USBD_CDC_DeInit+0xf8>)
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	f003 020f 	and.w	r2, r3, #15
 801a5a4:	6879      	ldr	r1, [r7, #4]
 801a5a6:	4613      	mov	r3, r2
 801a5a8:	009b      	lsls	r3, r3, #2
 801a5aa:	4413      	add	r3, r2
 801a5ac:	009b      	lsls	r3, r3, #2
 801a5ae:	440b      	add	r3, r1
 801a5b0:	3324      	adds	r3, #36	; 0x24
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801a5b6:	4b32      	ldr	r3, [pc, #200]	; (801a680 <USBD_CDC_DeInit+0xfc>)
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	4619      	mov	r1, r3
 801a5bc:	6878      	ldr	r0, [r7, #4]
 801a5be:	f002 fa4a 	bl	801ca56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801a5c2:	4b2f      	ldr	r3, [pc, #188]	; (801a680 <USBD_CDC_DeInit+0xfc>)
 801a5c4:	781b      	ldrb	r3, [r3, #0]
 801a5c6:	f003 020f 	and.w	r2, r3, #15
 801a5ca:	6879      	ldr	r1, [r7, #4]
 801a5cc:	4613      	mov	r3, r2
 801a5ce:	009b      	lsls	r3, r3, #2
 801a5d0:	4413      	add	r3, r2
 801a5d2:	009b      	lsls	r3, r3, #2
 801a5d4:	440b      	add	r3, r1
 801a5d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a5da:	2200      	movs	r2, #0
 801a5dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801a5de:	4b29      	ldr	r3, [pc, #164]	; (801a684 <USBD_CDC_DeInit+0x100>)
 801a5e0:	781b      	ldrb	r3, [r3, #0]
 801a5e2:	4619      	mov	r1, r3
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f002 fa36 	bl	801ca56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801a5ea:	4b26      	ldr	r3, [pc, #152]	; (801a684 <USBD_CDC_DeInit+0x100>)
 801a5ec:	781b      	ldrb	r3, [r3, #0]
 801a5ee:	f003 020f 	and.w	r2, r3, #15
 801a5f2:	6879      	ldr	r1, [r7, #4]
 801a5f4:	4613      	mov	r3, r2
 801a5f6:	009b      	lsls	r3, r3, #2
 801a5f8:	4413      	add	r3, r2
 801a5fa:	009b      	lsls	r3, r3, #2
 801a5fc:	440b      	add	r3, r1
 801a5fe:	3324      	adds	r3, #36	; 0x24
 801a600:	2200      	movs	r2, #0
 801a602:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801a604:	4b1f      	ldr	r3, [pc, #124]	; (801a684 <USBD_CDC_DeInit+0x100>)
 801a606:	781b      	ldrb	r3, [r3, #0]
 801a608:	f003 020f 	and.w	r2, r3, #15
 801a60c:	6879      	ldr	r1, [r7, #4]
 801a60e:	4613      	mov	r3, r2
 801a610:	009b      	lsls	r3, r3, #2
 801a612:	4413      	add	r3, r2
 801a614:	009b      	lsls	r3, r3, #2
 801a616:	440b      	add	r3, r1
 801a618:	3326      	adds	r3, #38	; 0x26
 801a61a:	2200      	movs	r2, #0
 801a61c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	32b0      	adds	r2, #176	; 0xb0
 801a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d01f      	beq.n	801a670 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a636:	687a      	ldr	r2, [r7, #4]
 801a638:	33b0      	adds	r3, #176	; 0xb0
 801a63a:	009b      	lsls	r3, r3, #2
 801a63c:	4413      	add	r3, r2
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	685b      	ldr	r3, [r3, #4]
 801a642:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	32b0      	adds	r2, #176	; 0xb0
 801a64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a652:	4618      	mov	r0, r3
 801a654:	f002 fb0a 	bl	801cc6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	32b0      	adds	r2, #176	; 0xb0
 801a662:	2100      	movs	r1, #0
 801a664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	2200      	movs	r2, #0
 801a66c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801a670:	2300      	movs	r3, #0
}
 801a672:	4618      	mov	r0, r3
 801a674:	3708      	adds	r7, #8
 801a676:	46bd      	mov	sp, r7
 801a678:	bd80      	pop	{r7, pc}
 801a67a:	bf00      	nop
 801a67c:	24000097 	.word	0x24000097
 801a680:	24000098 	.word	0x24000098
 801a684:	24000099 	.word	0x24000099

0801a688 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b086      	sub	sp, #24
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
 801a690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	32b0      	adds	r2, #176	; 0xb0
 801a69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801a6ae:	693b      	ldr	r3, [r7, #16]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d101      	bne.n	801a6b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801a6b4:	2303      	movs	r3, #3
 801a6b6:	e0bf      	b.n	801a838 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a6b8:	683b      	ldr	r3, [r7, #0]
 801a6ba:	781b      	ldrb	r3, [r3, #0]
 801a6bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d050      	beq.n	801a766 <USBD_CDC_Setup+0xde>
 801a6c4:	2b20      	cmp	r3, #32
 801a6c6:	f040 80af 	bne.w	801a828 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	88db      	ldrh	r3, [r3, #6]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d03a      	beq.n	801a748 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	b25b      	sxtb	r3, r3
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	da1b      	bge.n	801a714 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a6e2:	687a      	ldr	r2, [r7, #4]
 801a6e4:	33b0      	adds	r3, #176	; 0xb0
 801a6e6:	009b      	lsls	r3, r3, #2
 801a6e8:	4413      	add	r3, r2
 801a6ea:	685b      	ldr	r3, [r3, #4]
 801a6ec:	689b      	ldr	r3, [r3, #8]
 801a6ee:	683a      	ldr	r2, [r7, #0]
 801a6f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801a6f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a6f4:	683a      	ldr	r2, [r7, #0]
 801a6f6:	88d2      	ldrh	r2, [r2, #6]
 801a6f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801a6fa:	683b      	ldr	r3, [r7, #0]
 801a6fc:	88db      	ldrh	r3, [r3, #6]
 801a6fe:	2b07      	cmp	r3, #7
 801a700:	bf28      	it	cs
 801a702:	2307      	movcs	r3, #7
 801a704:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801a706:	693b      	ldr	r3, [r7, #16]
 801a708:	89fa      	ldrh	r2, [r7, #14]
 801a70a:	4619      	mov	r1, r3
 801a70c:	6878      	ldr	r0, [r7, #4]
 801a70e:	f001 fd43 	bl	801c198 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801a712:	e090      	b.n	801a836 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	785a      	ldrb	r2, [r3, #1]
 801a718:	693b      	ldr	r3, [r7, #16]
 801a71a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801a71e:	683b      	ldr	r3, [r7, #0]
 801a720:	88db      	ldrh	r3, [r3, #6]
 801a722:	2b3f      	cmp	r3, #63	; 0x3f
 801a724:	d803      	bhi.n	801a72e <USBD_CDC_Setup+0xa6>
 801a726:	683b      	ldr	r3, [r7, #0]
 801a728:	88db      	ldrh	r3, [r3, #6]
 801a72a:	b2da      	uxtb	r2, r3
 801a72c:	e000      	b.n	801a730 <USBD_CDC_Setup+0xa8>
 801a72e:	2240      	movs	r2, #64	; 0x40
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801a736:	6939      	ldr	r1, [r7, #16]
 801a738:	693b      	ldr	r3, [r7, #16]
 801a73a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801a73e:	461a      	mov	r2, r3
 801a740:	6878      	ldr	r0, [r7, #4]
 801a742:	f001 fd55 	bl	801c1f0 <USBD_CtlPrepareRx>
      break;
 801a746:	e076      	b.n	801a836 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	33b0      	adds	r3, #176	; 0xb0
 801a752:	009b      	lsls	r3, r3, #2
 801a754:	4413      	add	r3, r2
 801a756:	685b      	ldr	r3, [r3, #4]
 801a758:	689b      	ldr	r3, [r3, #8]
 801a75a:	683a      	ldr	r2, [r7, #0]
 801a75c:	7850      	ldrb	r0, [r2, #1]
 801a75e:	2200      	movs	r2, #0
 801a760:	6839      	ldr	r1, [r7, #0]
 801a762:	4798      	blx	r3
      break;
 801a764:	e067      	b.n	801a836 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	785b      	ldrb	r3, [r3, #1]
 801a76a:	2b0b      	cmp	r3, #11
 801a76c:	d851      	bhi.n	801a812 <USBD_CDC_Setup+0x18a>
 801a76e:	a201      	add	r2, pc, #4	; (adr r2, 801a774 <USBD_CDC_Setup+0xec>)
 801a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a774:	0801a7a5 	.word	0x0801a7a5
 801a778:	0801a821 	.word	0x0801a821
 801a77c:	0801a813 	.word	0x0801a813
 801a780:	0801a813 	.word	0x0801a813
 801a784:	0801a813 	.word	0x0801a813
 801a788:	0801a813 	.word	0x0801a813
 801a78c:	0801a813 	.word	0x0801a813
 801a790:	0801a813 	.word	0x0801a813
 801a794:	0801a813 	.word	0x0801a813
 801a798:	0801a813 	.word	0x0801a813
 801a79c:	0801a7cf 	.word	0x0801a7cf
 801a7a0:	0801a7f9 	.word	0x0801a7f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7aa:	b2db      	uxtb	r3, r3
 801a7ac:	2b03      	cmp	r3, #3
 801a7ae:	d107      	bne.n	801a7c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801a7b0:	f107 030a 	add.w	r3, r7, #10
 801a7b4:	2202      	movs	r2, #2
 801a7b6:	4619      	mov	r1, r3
 801a7b8:	6878      	ldr	r0, [r7, #4]
 801a7ba:	f001 fced 	bl	801c198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a7be:	e032      	b.n	801a826 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801a7c0:	6839      	ldr	r1, [r7, #0]
 801a7c2:	6878      	ldr	r0, [r7, #4]
 801a7c4:	f001 fc77 	bl	801c0b6 <USBD_CtlError>
            ret = USBD_FAIL;
 801a7c8:	2303      	movs	r3, #3
 801a7ca:	75fb      	strb	r3, [r7, #23]
          break;
 801a7cc:	e02b      	b.n	801a826 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7d4:	b2db      	uxtb	r3, r3
 801a7d6:	2b03      	cmp	r3, #3
 801a7d8:	d107      	bne.n	801a7ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801a7da:	f107 030d 	add.w	r3, r7, #13
 801a7de:	2201      	movs	r2, #1
 801a7e0:	4619      	mov	r1, r3
 801a7e2:	6878      	ldr	r0, [r7, #4]
 801a7e4:	f001 fcd8 	bl	801c198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a7e8:	e01d      	b.n	801a826 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801a7ea:	6839      	ldr	r1, [r7, #0]
 801a7ec:	6878      	ldr	r0, [r7, #4]
 801a7ee:	f001 fc62 	bl	801c0b6 <USBD_CtlError>
            ret = USBD_FAIL;
 801a7f2:	2303      	movs	r3, #3
 801a7f4:	75fb      	strb	r3, [r7, #23]
          break;
 801a7f6:	e016      	b.n	801a826 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7fe:	b2db      	uxtb	r3, r3
 801a800:	2b03      	cmp	r3, #3
 801a802:	d00f      	beq.n	801a824 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801a804:	6839      	ldr	r1, [r7, #0]
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f001 fc55 	bl	801c0b6 <USBD_CtlError>
            ret = USBD_FAIL;
 801a80c:	2303      	movs	r3, #3
 801a80e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801a810:	e008      	b.n	801a824 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801a812:	6839      	ldr	r1, [r7, #0]
 801a814:	6878      	ldr	r0, [r7, #4]
 801a816:	f001 fc4e 	bl	801c0b6 <USBD_CtlError>
          ret = USBD_FAIL;
 801a81a:	2303      	movs	r3, #3
 801a81c:	75fb      	strb	r3, [r7, #23]
          break;
 801a81e:	e002      	b.n	801a826 <USBD_CDC_Setup+0x19e>
          break;
 801a820:	bf00      	nop
 801a822:	e008      	b.n	801a836 <USBD_CDC_Setup+0x1ae>
          break;
 801a824:	bf00      	nop
      }
      break;
 801a826:	e006      	b.n	801a836 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801a828:	6839      	ldr	r1, [r7, #0]
 801a82a:	6878      	ldr	r0, [r7, #4]
 801a82c:	f001 fc43 	bl	801c0b6 <USBD_CtlError>
      ret = USBD_FAIL;
 801a830:	2303      	movs	r3, #3
 801a832:	75fb      	strb	r3, [r7, #23]
      break;
 801a834:	bf00      	nop
  }

  return (uint8_t)ret;
 801a836:	7dfb      	ldrb	r3, [r7, #23]
}
 801a838:	4618      	mov	r0, r3
 801a83a:	3718      	adds	r7, #24
 801a83c:	46bd      	mov	sp, r7
 801a83e:	bd80      	pop	{r7, pc}

0801a840 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b084      	sub	sp, #16
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
 801a848:	460b      	mov	r3, r1
 801a84a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a852:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	32b0      	adds	r2, #176	; 0xb0
 801a85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d101      	bne.n	801a86a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801a866:	2303      	movs	r3, #3
 801a868:	e065      	b.n	801a936 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	32b0      	adds	r2, #176	; 0xb0
 801a874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a878:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801a87a:	78fb      	ldrb	r3, [r7, #3]
 801a87c:	f003 020f 	and.w	r2, r3, #15
 801a880:	6879      	ldr	r1, [r7, #4]
 801a882:	4613      	mov	r3, r2
 801a884:	009b      	lsls	r3, r3, #2
 801a886:	4413      	add	r3, r2
 801a888:	009b      	lsls	r3, r3, #2
 801a88a:	440b      	add	r3, r1
 801a88c:	3318      	adds	r3, #24
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d02f      	beq.n	801a8f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801a894:	78fb      	ldrb	r3, [r7, #3]
 801a896:	f003 020f 	and.w	r2, r3, #15
 801a89a:	6879      	ldr	r1, [r7, #4]
 801a89c:	4613      	mov	r3, r2
 801a89e:	009b      	lsls	r3, r3, #2
 801a8a0:	4413      	add	r3, r2
 801a8a2:	009b      	lsls	r3, r3, #2
 801a8a4:	440b      	add	r3, r1
 801a8a6:	3318      	adds	r3, #24
 801a8a8:	681a      	ldr	r2, [r3, #0]
 801a8aa:	78fb      	ldrb	r3, [r7, #3]
 801a8ac:	f003 010f 	and.w	r1, r3, #15
 801a8b0:	68f8      	ldr	r0, [r7, #12]
 801a8b2:	460b      	mov	r3, r1
 801a8b4:	00db      	lsls	r3, r3, #3
 801a8b6:	440b      	add	r3, r1
 801a8b8:	009b      	lsls	r3, r3, #2
 801a8ba:	4403      	add	r3, r0
 801a8bc:	3348      	adds	r3, #72	; 0x48
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	fbb2 f1f3 	udiv	r1, r2, r3
 801a8c4:	fb01 f303 	mul.w	r3, r1, r3
 801a8c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d112      	bne.n	801a8f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801a8ce:	78fb      	ldrb	r3, [r7, #3]
 801a8d0:	f003 020f 	and.w	r2, r3, #15
 801a8d4:	6879      	ldr	r1, [r7, #4]
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	009b      	lsls	r3, r3, #2
 801a8da:	4413      	add	r3, r2
 801a8dc:	009b      	lsls	r3, r3, #2
 801a8de:	440b      	add	r3, r1
 801a8e0:	3318      	adds	r3, #24
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a8e6:	78f9      	ldrb	r1, [r7, #3]
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	2200      	movs	r2, #0
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f002 f95a 	bl	801cba6 <USBD_LL_Transmit>
 801a8f2:	e01f      	b.n	801a934 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801a8f4:	68bb      	ldr	r3, [r7, #8]
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a902:	687a      	ldr	r2, [r7, #4]
 801a904:	33b0      	adds	r3, #176	; 0xb0
 801a906:	009b      	lsls	r3, r3, #2
 801a908:	4413      	add	r3, r2
 801a90a:	685b      	ldr	r3, [r3, #4]
 801a90c:	691b      	ldr	r3, [r3, #16]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d010      	beq.n	801a934 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a918:	687a      	ldr	r2, [r7, #4]
 801a91a:	33b0      	adds	r3, #176	; 0xb0
 801a91c:	009b      	lsls	r3, r3, #2
 801a91e:	4413      	add	r3, r2
 801a920:	685b      	ldr	r3, [r3, #4]
 801a922:	691b      	ldr	r3, [r3, #16]
 801a924:	68ba      	ldr	r2, [r7, #8]
 801a926:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801a92a:	68ba      	ldr	r2, [r7, #8]
 801a92c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801a930:	78fa      	ldrb	r2, [r7, #3]
 801a932:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801a934:	2300      	movs	r3, #0
}
 801a936:	4618      	mov	r0, r3
 801a938:	3710      	adds	r7, #16
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}

0801a93e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a93e:	b580      	push	{r7, lr}
 801a940:	b084      	sub	sp, #16
 801a942:	af00      	add	r7, sp, #0
 801a944:	6078      	str	r0, [r7, #4]
 801a946:	460b      	mov	r3, r1
 801a948:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	32b0      	adds	r2, #176	; 0xb0
 801a954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a958:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	32b0      	adds	r2, #176	; 0xb0
 801a964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d101      	bne.n	801a970 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801a96c:	2303      	movs	r3, #3
 801a96e:	e01a      	b.n	801a9a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a970:	78fb      	ldrb	r3, [r7, #3]
 801a972:	4619      	mov	r1, r3
 801a974:	6878      	ldr	r0, [r7, #4]
 801a976:	f002 f958 	bl	801cc2a <USBD_LL_GetRxDataSize>
 801a97a:	4602      	mov	r2, r0
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	33b0      	adds	r3, #176	; 0xb0
 801a98c:	009b      	lsls	r3, r3, #2
 801a98e:	4413      	add	r3, r2
 801a990:	685b      	ldr	r3, [r3, #4]
 801a992:	68db      	ldr	r3, [r3, #12]
 801a994:	68fa      	ldr	r2, [r7, #12]
 801a996:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801a99a:	68fa      	ldr	r2, [r7, #12]
 801a99c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801a9a0:	4611      	mov	r1, r2
 801a9a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801a9a4:	2300      	movs	r3, #0
}
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	3710      	adds	r7, #16
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}

0801a9ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a9ae:	b580      	push	{r7, lr}
 801a9b0:	b084      	sub	sp, #16
 801a9b2:	af00      	add	r7, sp, #0
 801a9b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	32b0      	adds	r2, #176	; 0xb0
 801a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d101      	bne.n	801a9d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801a9cc:	2303      	movs	r3, #3
 801a9ce:	e025      	b.n	801aa1c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a9d6:	687a      	ldr	r2, [r7, #4]
 801a9d8:	33b0      	adds	r3, #176	; 0xb0
 801a9da:	009b      	lsls	r3, r3, #2
 801a9dc:	4413      	add	r3, r2
 801a9de:	685b      	ldr	r3, [r3, #4]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d01a      	beq.n	801aa1a <USBD_CDC_EP0_RxReady+0x6c>
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801a9ea:	2bff      	cmp	r3, #255	; 0xff
 801a9ec:	d015      	beq.n	801aa1a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a9f4:	687a      	ldr	r2, [r7, #4]
 801a9f6:	33b0      	adds	r3, #176	; 0xb0
 801a9f8:	009b      	lsls	r3, r3, #2
 801a9fa:	4413      	add	r3, r2
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	689b      	ldr	r3, [r3, #8]
 801aa00:	68fa      	ldr	r2, [r7, #12]
 801aa02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801aa06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801aa08:	68fa      	ldr	r2, [r7, #12]
 801aa0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801aa0e:	b292      	uxth	r2, r2
 801aa10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	22ff      	movs	r2, #255	; 0xff
 801aa16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801aa1a:	2300      	movs	r3, #0
}
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	3710      	adds	r7, #16
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}

0801aa24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b086      	sub	sp, #24
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801aa2c:	2182      	movs	r1, #130	; 0x82
 801aa2e:	4818      	ldr	r0, [pc, #96]	; (801aa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801aa30:	f000 fd09 	bl	801b446 <USBD_GetEpDesc>
 801aa34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801aa36:	2101      	movs	r1, #1
 801aa38:	4815      	ldr	r0, [pc, #84]	; (801aa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801aa3a:	f000 fd04 	bl	801b446 <USBD_GetEpDesc>
 801aa3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801aa40:	2181      	movs	r1, #129	; 0x81
 801aa42:	4813      	ldr	r0, [pc, #76]	; (801aa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801aa44:	f000 fcff 	bl	801b446 <USBD_GetEpDesc>
 801aa48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801aa4a:	697b      	ldr	r3, [r7, #20]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d002      	beq.n	801aa56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801aa50:	697b      	ldr	r3, [r7, #20]
 801aa52:	2210      	movs	r2, #16
 801aa54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801aa56:	693b      	ldr	r3, [r7, #16]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d006      	beq.n	801aa6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801aa5c:	693b      	ldr	r3, [r7, #16]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aa64:	711a      	strb	r2, [r3, #4]
 801aa66:	2200      	movs	r2, #0
 801aa68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d006      	beq.n	801aa7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	2200      	movs	r2, #0
 801aa74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aa78:	711a      	strb	r2, [r3, #4]
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	2243      	movs	r2, #67	; 0x43
 801aa82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801aa84:	4b02      	ldr	r3, [pc, #8]	; (801aa90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801aa86:	4618      	mov	r0, r3
 801aa88:	3718      	adds	r7, #24
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}
 801aa8e:	bf00      	nop
 801aa90:	24000054 	.word	0x24000054

0801aa94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801aa94:	b580      	push	{r7, lr}
 801aa96:	b086      	sub	sp, #24
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801aa9c:	2182      	movs	r1, #130	; 0x82
 801aa9e:	4818      	ldr	r0, [pc, #96]	; (801ab00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801aaa0:	f000 fcd1 	bl	801b446 <USBD_GetEpDesc>
 801aaa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801aaa6:	2101      	movs	r1, #1
 801aaa8:	4815      	ldr	r0, [pc, #84]	; (801ab00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801aaaa:	f000 fccc 	bl	801b446 <USBD_GetEpDesc>
 801aaae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801aab0:	2181      	movs	r1, #129	; 0x81
 801aab2:	4813      	ldr	r0, [pc, #76]	; (801ab00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801aab4:	f000 fcc7 	bl	801b446 <USBD_GetEpDesc>
 801aab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d002      	beq.n	801aac6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801aac0:	697b      	ldr	r3, [r7, #20]
 801aac2:	2210      	movs	r2, #16
 801aac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d006      	beq.n	801aada <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801aacc:	693b      	ldr	r3, [r7, #16]
 801aace:	2200      	movs	r2, #0
 801aad0:	711a      	strb	r2, [r3, #4]
 801aad2:	2200      	movs	r2, #0
 801aad4:	f042 0202 	orr.w	r2, r2, #2
 801aad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d006      	beq.n	801aaee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	2200      	movs	r2, #0
 801aae4:	711a      	strb	r2, [r3, #4]
 801aae6:	2200      	movs	r2, #0
 801aae8:	f042 0202 	orr.w	r2, r2, #2
 801aaec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	2243      	movs	r2, #67	; 0x43
 801aaf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801aaf4:	4b02      	ldr	r3, [pc, #8]	; (801ab00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	3718      	adds	r7, #24
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}
 801aafe:	bf00      	nop
 801ab00:	24000054 	.word	0x24000054

0801ab04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b086      	sub	sp, #24
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801ab0c:	2182      	movs	r1, #130	; 0x82
 801ab0e:	4818      	ldr	r0, [pc, #96]	; (801ab70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801ab10:	f000 fc99 	bl	801b446 <USBD_GetEpDesc>
 801ab14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801ab16:	2101      	movs	r1, #1
 801ab18:	4815      	ldr	r0, [pc, #84]	; (801ab70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801ab1a:	f000 fc94 	bl	801b446 <USBD_GetEpDesc>
 801ab1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801ab20:	2181      	movs	r1, #129	; 0x81
 801ab22:	4813      	ldr	r0, [pc, #76]	; (801ab70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801ab24:	f000 fc8f 	bl	801b446 <USBD_GetEpDesc>
 801ab28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801ab2a:	697b      	ldr	r3, [r7, #20]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d002      	beq.n	801ab36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	2210      	movs	r2, #16
 801ab34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801ab36:	693b      	ldr	r3, [r7, #16]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d006      	beq.n	801ab4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ab3c:	693b      	ldr	r3, [r7, #16]
 801ab3e:	2200      	movs	r2, #0
 801ab40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ab44:	711a      	strb	r2, [r3, #4]
 801ab46:	2200      	movs	r2, #0
 801ab48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ab4a:	68fb      	ldr	r3, [r7, #12]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d006      	beq.n	801ab5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	2200      	movs	r2, #0
 801ab54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ab58:	711a      	strb	r2, [r3, #4]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	2243      	movs	r2, #67	; 0x43
 801ab62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801ab64:	4b02      	ldr	r3, [pc, #8]	; (801ab70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801ab66:	4618      	mov	r0, r3
 801ab68:	3718      	adds	r7, #24
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	bd80      	pop	{r7, pc}
 801ab6e:	bf00      	nop
 801ab70:	24000054 	.word	0x24000054

0801ab74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ab74:	b480      	push	{r7}
 801ab76:	b083      	sub	sp, #12
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	220a      	movs	r2, #10
 801ab80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801ab82:	4b03      	ldr	r3, [pc, #12]	; (801ab90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801ab84:	4618      	mov	r0, r3
 801ab86:	370c      	adds	r7, #12
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8e:	4770      	bx	lr
 801ab90:	24000010 	.word	0x24000010

0801ab94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801ab94:	b480      	push	{r7}
 801ab96:	b083      	sub	sp, #12
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
 801ab9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d101      	bne.n	801aba8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801aba4:	2303      	movs	r3, #3
 801aba6:	e009      	b.n	801abbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801abae:	687a      	ldr	r2, [r7, #4]
 801abb0:	33b0      	adds	r3, #176	; 0xb0
 801abb2:	009b      	lsls	r3, r3, #2
 801abb4:	4413      	add	r3, r2
 801abb6:	683a      	ldr	r2, [r7, #0]
 801abb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801abba:	2300      	movs	r3, #0
}
 801abbc:	4618      	mov	r0, r3
 801abbe:	370c      	adds	r7, #12
 801abc0:	46bd      	mov	sp, r7
 801abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc6:	4770      	bx	lr

0801abc8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801abc8:	b480      	push	{r7}
 801abca:	b087      	sub	sp, #28
 801abcc:	af00      	add	r7, sp, #0
 801abce:	60f8      	str	r0, [r7, #12]
 801abd0:	60b9      	str	r1, [r7, #8]
 801abd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	32b0      	adds	r2, #176	; 0xb0
 801abde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abe2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801abe4:	697b      	ldr	r3, [r7, #20]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d101      	bne.n	801abee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801abea:	2303      	movs	r3, #3
 801abec:	e008      	b.n	801ac00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801abee:	697b      	ldr	r3, [r7, #20]
 801abf0:	68ba      	ldr	r2, [r7, #8]
 801abf2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801abf6:	697b      	ldr	r3, [r7, #20]
 801abf8:	687a      	ldr	r2, [r7, #4]
 801abfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801abfe:	2300      	movs	r3, #0
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	371c      	adds	r7, #28
 801ac04:	46bd      	mov	sp, r7
 801ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac0a:	4770      	bx	lr

0801ac0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801ac0c:	b480      	push	{r7}
 801ac0e:	b085      	sub	sp, #20
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
 801ac14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	32b0      	adds	r2, #176	; 0xb0
 801ac20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d101      	bne.n	801ac30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801ac2c:	2303      	movs	r3, #3
 801ac2e:	e004      	b.n	801ac3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	683a      	ldr	r2, [r7, #0]
 801ac34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801ac38:	2300      	movs	r3, #0
}
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	3714      	adds	r7, #20
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac44:	4770      	bx	lr
	...

0801ac48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b084      	sub	sp, #16
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	32b0      	adds	r2, #176	; 0xb0
 801ac5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	32b0      	adds	r2, #176	; 0xb0
 801ac6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d101      	bne.n	801ac76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801ac72:	2303      	movs	r3, #3
 801ac74:	e018      	b.n	801aca8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	7c1b      	ldrb	r3, [r3, #16]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d10a      	bne.n	801ac94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ac7e:	4b0c      	ldr	r3, [pc, #48]	; (801acb0 <USBD_CDC_ReceivePacket+0x68>)
 801ac80:	7819      	ldrb	r1, [r3, #0]
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ac88:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ac8c:	6878      	ldr	r0, [r7, #4]
 801ac8e:	f001 ffab 	bl	801cbe8 <USBD_LL_PrepareReceive>
 801ac92:	e008      	b.n	801aca6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ac94:	4b06      	ldr	r3, [pc, #24]	; (801acb0 <USBD_CDC_ReceivePacket+0x68>)
 801ac96:	7819      	ldrb	r1, [r3, #0]
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ac9e:	2340      	movs	r3, #64	; 0x40
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f001 ffa1 	bl	801cbe8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801aca6:	2300      	movs	r3, #0
}
 801aca8:	4618      	mov	r0, r3
 801acaa:	3710      	adds	r7, #16
 801acac:	46bd      	mov	sp, r7
 801acae:	bd80      	pop	{r7, pc}
 801acb0:	24000098 	.word	0x24000098

0801acb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b086      	sub	sp, #24
 801acb8:	af00      	add	r7, sp, #0
 801acba:	60f8      	str	r0, [r7, #12]
 801acbc:	60b9      	str	r1, [r7, #8]
 801acbe:	4613      	mov	r3, r2
 801acc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d101      	bne.n	801accc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801acc8:	2303      	movs	r3, #3
 801acca:	e01f      	b.n	801ad0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	2200      	movs	r2, #0
 801acd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	2200      	movs	r2, #0
 801acd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	2200      	movs	r2, #0
 801ace0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d003      	beq.n	801acf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	68ba      	ldr	r2, [r7, #8]
 801acee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	2201      	movs	r2, #1
 801acf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	79fa      	ldrb	r2, [r7, #7]
 801acfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801ad00:	68f8      	ldr	r0, [r7, #12]
 801ad02:	f001 fe17 	bl	801c934 <USBD_LL_Init>
 801ad06:	4603      	mov	r3, r0
 801ad08:	75fb      	strb	r3, [r7, #23]

  return ret;
 801ad0a:	7dfb      	ldrb	r3, [r7, #23]
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	3718      	adds	r7, #24
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd80      	pop	{r7, pc}

0801ad14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b084      	sub	sp, #16
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	6078      	str	r0, [r7, #4]
 801ad1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ad1e:	2300      	movs	r3, #0
 801ad20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d101      	bne.n	801ad2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801ad28:	2303      	movs	r3, #3
 801ad2a:	e025      	b.n	801ad78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	683a      	ldr	r2, [r7, #0]
 801ad30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	32ae      	adds	r2, #174	; 0xae
 801ad3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d00f      	beq.n	801ad68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	32ae      	adds	r2, #174	; 0xae
 801ad52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad58:	f107 020e 	add.w	r2, r7, #14
 801ad5c:	4610      	mov	r0, r2
 801ad5e:	4798      	blx	r3
 801ad60:	4602      	mov	r2, r0
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ad6e:	1c5a      	adds	r2, r3, #1
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801ad76:	2300      	movs	r3, #0
}
 801ad78:	4618      	mov	r0, r3
 801ad7a:	3710      	adds	r7, #16
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	bd80      	pop	{r7, pc}

0801ad80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b082      	sub	sp, #8
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801ad88:	6878      	ldr	r0, [r7, #4]
 801ad8a:	f001 fe23 	bl	801c9d4 <USBD_LL_Start>
 801ad8e:	4603      	mov	r3, r0
}
 801ad90:	4618      	mov	r0, r3
 801ad92:	3708      	adds	r7, #8
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bd80      	pop	{r7, pc}

0801ad98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801ad98:	b480      	push	{r7}
 801ad9a:	b083      	sub	sp, #12
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ada0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	370c      	adds	r7, #12
 801ada6:	46bd      	mov	sp, r7
 801ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adac:	4770      	bx	lr

0801adae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801adae:	b580      	push	{r7, lr}
 801adb0:	b084      	sub	sp, #16
 801adb2:	af00      	add	r7, sp, #0
 801adb4:	6078      	str	r0, [r7, #4]
 801adb6:	460b      	mov	r3, r1
 801adb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801adba:	2300      	movs	r3, #0
 801adbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d009      	beq.n	801addc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	78fa      	ldrb	r2, [r7, #3]
 801add2:	4611      	mov	r1, r2
 801add4:	6878      	ldr	r0, [r7, #4]
 801add6:	4798      	blx	r3
 801add8:	4603      	mov	r3, r0
 801adda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801addc:	7bfb      	ldrb	r3, [r7, #15]
}
 801adde:	4618      	mov	r0, r3
 801ade0:	3710      	adds	r7, #16
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd80      	pop	{r7, pc}

0801ade6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ade6:	b580      	push	{r7, lr}
 801ade8:	b084      	sub	sp, #16
 801adea:	af00      	add	r7, sp, #0
 801adec:	6078      	str	r0, [r7, #4]
 801adee:	460b      	mov	r3, r1
 801adf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801adf2:	2300      	movs	r3, #0
 801adf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801adfc:	685b      	ldr	r3, [r3, #4]
 801adfe:	78fa      	ldrb	r2, [r7, #3]
 801ae00:	4611      	mov	r1, r2
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	4798      	blx	r3
 801ae06:	4603      	mov	r3, r0
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d001      	beq.n	801ae10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801ae0c:	2303      	movs	r3, #3
 801ae0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801ae10:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae12:	4618      	mov	r0, r3
 801ae14:	3710      	adds	r7, #16
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}

0801ae1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801ae1a:	b580      	push	{r7, lr}
 801ae1c:	b084      	sub	sp, #16
 801ae1e:	af00      	add	r7, sp, #0
 801ae20:	6078      	str	r0, [r7, #4]
 801ae22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae2a:	6839      	ldr	r1, [r7, #0]
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	f001 f908 	bl	801c042 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	2201      	movs	r2, #1
 801ae36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801ae40:	461a      	mov	r2, r3
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ae4e:	f003 031f 	and.w	r3, r3, #31
 801ae52:	2b02      	cmp	r3, #2
 801ae54:	d01a      	beq.n	801ae8c <USBD_LL_SetupStage+0x72>
 801ae56:	2b02      	cmp	r3, #2
 801ae58:	d822      	bhi.n	801aea0 <USBD_LL_SetupStage+0x86>
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d002      	beq.n	801ae64 <USBD_LL_SetupStage+0x4a>
 801ae5e:	2b01      	cmp	r3, #1
 801ae60:	d00a      	beq.n	801ae78 <USBD_LL_SetupStage+0x5e>
 801ae62:	e01d      	b.n	801aea0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae6a:	4619      	mov	r1, r3
 801ae6c:	6878      	ldr	r0, [r7, #4]
 801ae6e:	f000 fb5f 	bl	801b530 <USBD_StdDevReq>
 801ae72:	4603      	mov	r3, r0
 801ae74:	73fb      	strb	r3, [r7, #15]
      break;
 801ae76:	e020      	b.n	801aeba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae7e:	4619      	mov	r1, r3
 801ae80:	6878      	ldr	r0, [r7, #4]
 801ae82:	f000 fbc7 	bl	801b614 <USBD_StdItfReq>
 801ae86:	4603      	mov	r3, r0
 801ae88:	73fb      	strb	r3, [r7, #15]
      break;
 801ae8a:	e016      	b.n	801aeba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae92:	4619      	mov	r1, r3
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f000 fc29 	bl	801b6ec <USBD_StdEPReq>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	73fb      	strb	r3, [r7, #15]
      break;
 801ae9e:	e00c      	b.n	801aeba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801aea6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801aeaa:	b2db      	uxtb	r3, r3
 801aeac:	4619      	mov	r1, r3
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f001 fdf0 	bl	801ca94 <USBD_LL_StallEP>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	73fb      	strb	r3, [r7, #15]
      break;
 801aeb8:	bf00      	nop
  }

  return ret;
 801aeba:	7bfb      	ldrb	r3, [r7, #15]
}
 801aebc:	4618      	mov	r0, r3
 801aebe:	3710      	adds	r7, #16
 801aec0:	46bd      	mov	sp, r7
 801aec2:	bd80      	pop	{r7, pc}

0801aec4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801aec4:	b580      	push	{r7, lr}
 801aec6:	b086      	sub	sp, #24
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	60f8      	str	r0, [r7, #12]
 801aecc:	460b      	mov	r3, r1
 801aece:	607a      	str	r2, [r7, #4]
 801aed0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801aed2:	2300      	movs	r3, #0
 801aed4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801aed6:	7afb      	ldrb	r3, [r7, #11]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d16e      	bne.n	801afba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801aee2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801aeea:	2b03      	cmp	r3, #3
 801aeec:	f040 8098 	bne.w	801b020 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801aef0:	693b      	ldr	r3, [r7, #16]
 801aef2:	689a      	ldr	r2, [r3, #8]
 801aef4:	693b      	ldr	r3, [r7, #16]
 801aef6:	68db      	ldr	r3, [r3, #12]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d913      	bls.n	801af24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801aefc:	693b      	ldr	r3, [r7, #16]
 801aefe:	689a      	ldr	r2, [r3, #8]
 801af00:	693b      	ldr	r3, [r7, #16]
 801af02:	68db      	ldr	r3, [r3, #12]
 801af04:	1ad2      	subs	r2, r2, r3
 801af06:	693b      	ldr	r3, [r7, #16]
 801af08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801af0a:	693b      	ldr	r3, [r7, #16]
 801af0c:	68da      	ldr	r2, [r3, #12]
 801af0e:	693b      	ldr	r3, [r7, #16]
 801af10:	689b      	ldr	r3, [r3, #8]
 801af12:	4293      	cmp	r3, r2
 801af14:	bf28      	it	cs
 801af16:	4613      	movcs	r3, r2
 801af18:	461a      	mov	r2, r3
 801af1a:	6879      	ldr	r1, [r7, #4]
 801af1c:	68f8      	ldr	r0, [r7, #12]
 801af1e:	f001 f984 	bl	801c22a <USBD_CtlContinueRx>
 801af22:	e07d      	b.n	801b020 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801af2a:	f003 031f 	and.w	r3, r3, #31
 801af2e:	2b02      	cmp	r3, #2
 801af30:	d014      	beq.n	801af5c <USBD_LL_DataOutStage+0x98>
 801af32:	2b02      	cmp	r3, #2
 801af34:	d81d      	bhi.n	801af72 <USBD_LL_DataOutStage+0xae>
 801af36:	2b00      	cmp	r3, #0
 801af38:	d002      	beq.n	801af40 <USBD_LL_DataOutStage+0x7c>
 801af3a:	2b01      	cmp	r3, #1
 801af3c:	d003      	beq.n	801af46 <USBD_LL_DataOutStage+0x82>
 801af3e:	e018      	b.n	801af72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801af40:	2300      	movs	r3, #0
 801af42:	75bb      	strb	r3, [r7, #22]
            break;
 801af44:	e018      	b.n	801af78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801af4c:	b2db      	uxtb	r3, r3
 801af4e:	4619      	mov	r1, r3
 801af50:	68f8      	ldr	r0, [r7, #12]
 801af52:	f000 fa5e 	bl	801b412 <USBD_CoreFindIF>
 801af56:	4603      	mov	r3, r0
 801af58:	75bb      	strb	r3, [r7, #22]
            break;
 801af5a:	e00d      	b.n	801af78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801af62:	b2db      	uxtb	r3, r3
 801af64:	4619      	mov	r1, r3
 801af66:	68f8      	ldr	r0, [r7, #12]
 801af68:	f000 fa60 	bl	801b42c <USBD_CoreFindEP>
 801af6c:	4603      	mov	r3, r0
 801af6e:	75bb      	strb	r3, [r7, #22]
            break;
 801af70:	e002      	b.n	801af78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801af72:	2300      	movs	r3, #0
 801af74:	75bb      	strb	r3, [r7, #22]
            break;
 801af76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801af78:	7dbb      	ldrb	r3, [r7, #22]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d119      	bne.n	801afb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801af84:	b2db      	uxtb	r3, r3
 801af86:	2b03      	cmp	r3, #3
 801af88:	d113      	bne.n	801afb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801af8a:	7dba      	ldrb	r2, [r7, #22]
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	32ae      	adds	r2, #174	; 0xae
 801af90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af94:	691b      	ldr	r3, [r3, #16]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d00b      	beq.n	801afb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801af9a:	7dba      	ldrb	r2, [r7, #22]
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801afa2:	7dba      	ldrb	r2, [r7, #22]
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	32ae      	adds	r2, #174	; 0xae
 801afa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801afac:	691b      	ldr	r3, [r3, #16]
 801afae:	68f8      	ldr	r0, [r7, #12]
 801afb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801afb2:	68f8      	ldr	r0, [r7, #12]
 801afb4:	f001 f94a 	bl	801c24c <USBD_CtlSendStatus>
 801afb8:	e032      	b.n	801b020 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801afba:	7afb      	ldrb	r3, [r7, #11]
 801afbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	4619      	mov	r1, r3
 801afc4:	68f8      	ldr	r0, [r7, #12]
 801afc6:	f000 fa31 	bl	801b42c <USBD_CoreFindEP>
 801afca:	4603      	mov	r3, r0
 801afcc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801afce:	7dbb      	ldrb	r3, [r7, #22]
 801afd0:	2bff      	cmp	r3, #255	; 0xff
 801afd2:	d025      	beq.n	801b020 <USBD_LL_DataOutStage+0x15c>
 801afd4:	7dbb      	ldrb	r3, [r7, #22]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d122      	bne.n	801b020 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	2b03      	cmp	r3, #3
 801afe4:	d117      	bne.n	801b016 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801afe6:	7dba      	ldrb	r2, [r7, #22]
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	32ae      	adds	r2, #174	; 0xae
 801afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aff0:	699b      	ldr	r3, [r3, #24]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d00f      	beq.n	801b016 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801aff6:	7dba      	ldrb	r2, [r7, #22]
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801affe:	7dba      	ldrb	r2, [r7, #22]
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	32ae      	adds	r2, #174	; 0xae
 801b004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b008:	699b      	ldr	r3, [r3, #24]
 801b00a:	7afa      	ldrb	r2, [r7, #11]
 801b00c:	4611      	mov	r1, r2
 801b00e:	68f8      	ldr	r0, [r7, #12]
 801b010:	4798      	blx	r3
 801b012:	4603      	mov	r3, r0
 801b014:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801b016:	7dfb      	ldrb	r3, [r7, #23]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d001      	beq.n	801b020 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801b01c:	7dfb      	ldrb	r3, [r7, #23]
 801b01e:	e000      	b.n	801b022 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801b020:	2300      	movs	r3, #0
}
 801b022:	4618      	mov	r0, r3
 801b024:	3718      	adds	r7, #24
 801b026:	46bd      	mov	sp, r7
 801b028:	bd80      	pop	{r7, pc}

0801b02a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b02a:	b580      	push	{r7, lr}
 801b02c:	b086      	sub	sp, #24
 801b02e:	af00      	add	r7, sp, #0
 801b030:	60f8      	str	r0, [r7, #12]
 801b032:	460b      	mov	r3, r1
 801b034:	607a      	str	r2, [r7, #4]
 801b036:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801b038:	7afb      	ldrb	r3, [r7, #11]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d16f      	bne.n	801b11e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	3314      	adds	r3, #20
 801b042:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801b04a:	2b02      	cmp	r3, #2
 801b04c:	d15a      	bne.n	801b104 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801b04e:	693b      	ldr	r3, [r7, #16]
 801b050:	689a      	ldr	r2, [r3, #8]
 801b052:	693b      	ldr	r3, [r7, #16]
 801b054:	68db      	ldr	r3, [r3, #12]
 801b056:	429a      	cmp	r2, r3
 801b058:	d914      	bls.n	801b084 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801b05a:	693b      	ldr	r3, [r7, #16]
 801b05c:	689a      	ldr	r2, [r3, #8]
 801b05e:	693b      	ldr	r3, [r7, #16]
 801b060:	68db      	ldr	r3, [r3, #12]
 801b062:	1ad2      	subs	r2, r2, r3
 801b064:	693b      	ldr	r3, [r7, #16]
 801b066:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801b068:	693b      	ldr	r3, [r7, #16]
 801b06a:	689b      	ldr	r3, [r3, #8]
 801b06c:	461a      	mov	r2, r3
 801b06e:	6879      	ldr	r1, [r7, #4]
 801b070:	68f8      	ldr	r0, [r7, #12]
 801b072:	f001 f8ac 	bl	801c1ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b076:	2300      	movs	r3, #0
 801b078:	2200      	movs	r2, #0
 801b07a:	2100      	movs	r1, #0
 801b07c:	68f8      	ldr	r0, [r7, #12]
 801b07e:	f001 fdb3 	bl	801cbe8 <USBD_LL_PrepareReceive>
 801b082:	e03f      	b.n	801b104 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801b084:	693b      	ldr	r3, [r7, #16]
 801b086:	68da      	ldr	r2, [r3, #12]
 801b088:	693b      	ldr	r3, [r7, #16]
 801b08a:	689b      	ldr	r3, [r3, #8]
 801b08c:	429a      	cmp	r2, r3
 801b08e:	d11c      	bne.n	801b0ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801b090:	693b      	ldr	r3, [r7, #16]
 801b092:	685a      	ldr	r2, [r3, #4]
 801b094:	693b      	ldr	r3, [r7, #16]
 801b096:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801b098:	429a      	cmp	r2, r3
 801b09a:	d316      	bcc.n	801b0ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	685a      	ldr	r2, [r3, #4]
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801b0a6:	429a      	cmp	r2, r3
 801b0a8:	d20f      	bcs.n	801b0ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	2100      	movs	r1, #0
 801b0ae:	68f8      	ldr	r0, [r7, #12]
 801b0b0:	f001 f88d 	bl	801c1ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b0bc:	2300      	movs	r3, #0
 801b0be:	2200      	movs	r2, #0
 801b0c0:	2100      	movs	r1, #0
 801b0c2:	68f8      	ldr	r0, [r7, #12]
 801b0c4:	f001 fd90 	bl	801cbe8 <USBD_LL_PrepareReceive>
 801b0c8:	e01c      	b.n	801b104 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b0d0:	b2db      	uxtb	r3, r3
 801b0d2:	2b03      	cmp	r3, #3
 801b0d4:	d10f      	bne.n	801b0f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0dc:	68db      	ldr	r3, [r3, #12]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d009      	beq.n	801b0f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0f0:	68db      	ldr	r3, [r3, #12]
 801b0f2:	68f8      	ldr	r0, [r7, #12]
 801b0f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801b0f6:	2180      	movs	r1, #128	; 0x80
 801b0f8:	68f8      	ldr	r0, [r7, #12]
 801b0fa:	f001 fccb 	bl	801ca94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801b0fe:	68f8      	ldr	r0, [r7, #12]
 801b100:	f001 f8b7 	bl	801c272 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d03a      	beq.n	801b184 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801b10e:	68f8      	ldr	r0, [r7, #12]
 801b110:	f7ff fe42 	bl	801ad98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	2200      	movs	r2, #0
 801b118:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801b11c:	e032      	b.n	801b184 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801b11e:	7afb      	ldrb	r3, [r7, #11]
 801b120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b124:	b2db      	uxtb	r3, r3
 801b126:	4619      	mov	r1, r3
 801b128:	68f8      	ldr	r0, [r7, #12]
 801b12a:	f000 f97f 	bl	801b42c <USBD_CoreFindEP>
 801b12e:	4603      	mov	r3, r0
 801b130:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b132:	7dfb      	ldrb	r3, [r7, #23]
 801b134:	2bff      	cmp	r3, #255	; 0xff
 801b136:	d025      	beq.n	801b184 <USBD_LL_DataInStage+0x15a>
 801b138:	7dfb      	ldrb	r3, [r7, #23]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d122      	bne.n	801b184 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b144:	b2db      	uxtb	r3, r3
 801b146:	2b03      	cmp	r3, #3
 801b148:	d11c      	bne.n	801b184 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801b14a:	7dfa      	ldrb	r2, [r7, #23]
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	32ae      	adds	r2, #174	; 0xae
 801b150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b154:	695b      	ldr	r3, [r3, #20]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d014      	beq.n	801b184 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801b15a:	7dfa      	ldrb	r2, [r7, #23]
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801b162:	7dfa      	ldrb	r2, [r7, #23]
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	32ae      	adds	r2, #174	; 0xae
 801b168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b16c:	695b      	ldr	r3, [r3, #20]
 801b16e:	7afa      	ldrb	r2, [r7, #11]
 801b170:	4611      	mov	r1, r2
 801b172:	68f8      	ldr	r0, [r7, #12]
 801b174:	4798      	blx	r3
 801b176:	4603      	mov	r3, r0
 801b178:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801b17a:	7dbb      	ldrb	r3, [r7, #22]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d001      	beq.n	801b184 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801b180:	7dbb      	ldrb	r3, [r7, #22]
 801b182:	e000      	b.n	801b186 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801b184:	2300      	movs	r3, #0
}
 801b186:	4618      	mov	r0, r3
 801b188:	3718      	adds	r7, #24
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}

0801b18e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b18e:	b580      	push	{r7, lr}
 801b190:	b084      	sub	sp, #16
 801b192:	af00      	add	r7, sp, #0
 801b194:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801b196:	2300      	movs	r3, #0
 801b198:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	2201      	movs	r2, #1
 801b19e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	2200      	movs	r2, #0
 801b1a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d014      	beq.n	801b1f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1d0:	685b      	ldr	r3, [r3, #4]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d00e      	beq.n	801b1f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1dc:	685b      	ldr	r3, [r3, #4]
 801b1de:	687a      	ldr	r2, [r7, #4]
 801b1e0:	6852      	ldr	r2, [r2, #4]
 801b1e2:	b2d2      	uxtb	r2, r2
 801b1e4:	4611      	mov	r1, r2
 801b1e6:	6878      	ldr	r0, [r7, #4]
 801b1e8:	4798      	blx	r3
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d001      	beq.n	801b1f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801b1f0:	2303      	movs	r3, #3
 801b1f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b1f4:	2340      	movs	r3, #64	; 0x40
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	2100      	movs	r1, #0
 801b1fa:	6878      	ldr	r0, [r7, #4]
 801b1fc:	f001 fc05 	bl	801ca0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	2201      	movs	r2, #1
 801b204:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	2240      	movs	r2, #64	; 0x40
 801b20c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b210:	2340      	movs	r3, #64	; 0x40
 801b212:	2200      	movs	r2, #0
 801b214:	2180      	movs	r1, #128	; 0x80
 801b216:	6878      	ldr	r0, [r7, #4]
 801b218:	f001 fbf7 	bl	801ca0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	2201      	movs	r2, #1
 801b220:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	2240      	movs	r2, #64	; 0x40
 801b226:	621a      	str	r2, [r3, #32]

  return ret;
 801b228:	7bfb      	ldrb	r3, [r7, #15]
}
 801b22a:	4618      	mov	r0, r3
 801b22c:	3710      	adds	r7, #16
 801b22e:	46bd      	mov	sp, r7
 801b230:	bd80      	pop	{r7, pc}

0801b232 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b232:	b480      	push	{r7}
 801b234:	b083      	sub	sp, #12
 801b236:	af00      	add	r7, sp, #0
 801b238:	6078      	str	r0, [r7, #4]
 801b23a:	460b      	mov	r3, r1
 801b23c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	78fa      	ldrb	r2, [r7, #3]
 801b242:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b244:	2300      	movs	r3, #0
}
 801b246:	4618      	mov	r0, r3
 801b248:	370c      	adds	r7, #12
 801b24a:	46bd      	mov	sp, r7
 801b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b250:	4770      	bx	lr

0801b252 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b252:	b480      	push	{r7}
 801b254:	b083      	sub	sp, #12
 801b256:	af00      	add	r7, sp, #0
 801b258:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b260:	b2da      	uxtb	r2, r3
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	2204      	movs	r2, #4
 801b26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801b270:	2300      	movs	r3, #0
}
 801b272:	4618      	mov	r0, r3
 801b274:	370c      	adds	r7, #12
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr

0801b27e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b27e:	b480      	push	{r7}
 801b280:	b083      	sub	sp, #12
 801b282:	af00      	add	r7, sp, #0
 801b284:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b28c:	b2db      	uxtb	r3, r3
 801b28e:	2b04      	cmp	r3, #4
 801b290:	d106      	bne.n	801b2a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801b298:	b2da      	uxtb	r2, r3
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801b2a0:	2300      	movs	r3, #0
}
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	370c      	adds	r7, #12
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ac:	4770      	bx	lr

0801b2ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b2ae:	b580      	push	{r7, lr}
 801b2b0:	b082      	sub	sp, #8
 801b2b2:	af00      	add	r7, sp, #0
 801b2b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b2bc:	b2db      	uxtb	r3, r3
 801b2be:	2b03      	cmp	r3, #3
 801b2c0:	d110      	bne.n	801b2e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d00b      	beq.n	801b2e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2d2:	69db      	ldr	r3, [r3, #28]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d005      	beq.n	801b2e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2de:	69db      	ldr	r3, [r3, #28]
 801b2e0:	6878      	ldr	r0, [r7, #4]
 801b2e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801b2e4:	2300      	movs	r3, #0
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	3708      	adds	r7, #8
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	bd80      	pop	{r7, pc}

0801b2ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801b2ee:	b580      	push	{r7, lr}
 801b2f0:	b082      	sub	sp, #8
 801b2f2:	af00      	add	r7, sp, #0
 801b2f4:	6078      	str	r0, [r7, #4]
 801b2f6:	460b      	mov	r3, r1
 801b2f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	32ae      	adds	r2, #174	; 0xae
 801b304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d101      	bne.n	801b310 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801b30c:	2303      	movs	r3, #3
 801b30e:	e01c      	b.n	801b34a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b316:	b2db      	uxtb	r3, r3
 801b318:	2b03      	cmp	r3, #3
 801b31a:	d115      	bne.n	801b348 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	32ae      	adds	r2, #174	; 0xae
 801b326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b32a:	6a1b      	ldr	r3, [r3, #32]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d00b      	beq.n	801b348 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	32ae      	adds	r2, #174	; 0xae
 801b33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b33e:	6a1b      	ldr	r3, [r3, #32]
 801b340:	78fa      	ldrb	r2, [r7, #3]
 801b342:	4611      	mov	r1, r2
 801b344:	6878      	ldr	r0, [r7, #4]
 801b346:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b348:	2300      	movs	r3, #0
}
 801b34a:	4618      	mov	r0, r3
 801b34c:	3708      	adds	r7, #8
 801b34e:	46bd      	mov	sp, r7
 801b350:	bd80      	pop	{r7, pc}

0801b352 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801b352:	b580      	push	{r7, lr}
 801b354:	b082      	sub	sp, #8
 801b356:	af00      	add	r7, sp, #0
 801b358:	6078      	str	r0, [r7, #4]
 801b35a:	460b      	mov	r3, r1
 801b35c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	32ae      	adds	r2, #174	; 0xae
 801b368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d101      	bne.n	801b374 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801b370:	2303      	movs	r3, #3
 801b372:	e01c      	b.n	801b3ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b37a:	b2db      	uxtb	r3, r3
 801b37c:	2b03      	cmp	r3, #3
 801b37e:	d115      	bne.n	801b3ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	32ae      	adds	r2, #174	; 0xae
 801b38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b390:	2b00      	cmp	r3, #0
 801b392:	d00b      	beq.n	801b3ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	32ae      	adds	r2, #174	; 0xae
 801b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3a4:	78fa      	ldrb	r2, [r7, #3]
 801b3a6:	4611      	mov	r1, r2
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b3ac:	2300      	movs	r3, #0
}
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	3708      	adds	r7, #8
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd80      	pop	{r7, pc}

0801b3b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801b3b6:	b480      	push	{r7}
 801b3b8:	b083      	sub	sp, #12
 801b3ba:	af00      	add	r7, sp, #0
 801b3bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b3be:	2300      	movs	r3, #0
}
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	370c      	adds	r7, #12
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ca:	4770      	bx	lr

0801b3cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801b3cc:	b580      	push	{r7, lr}
 801b3ce:	b084      	sub	sp, #16
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	2201      	movs	r2, #1
 801b3dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d00e      	beq.n	801b408 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b3f0:	685b      	ldr	r3, [r3, #4]
 801b3f2:	687a      	ldr	r2, [r7, #4]
 801b3f4:	6852      	ldr	r2, [r2, #4]
 801b3f6:	b2d2      	uxtb	r2, r2
 801b3f8:	4611      	mov	r1, r2
 801b3fa:	6878      	ldr	r0, [r7, #4]
 801b3fc:	4798      	blx	r3
 801b3fe:	4603      	mov	r3, r0
 801b400:	2b00      	cmp	r3, #0
 801b402:	d001      	beq.n	801b408 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801b404:	2303      	movs	r3, #3
 801b406:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801b408:	7bfb      	ldrb	r3, [r7, #15]
}
 801b40a:	4618      	mov	r0, r3
 801b40c:	3710      	adds	r7, #16
 801b40e:	46bd      	mov	sp, r7
 801b410:	bd80      	pop	{r7, pc}

0801b412 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b412:	b480      	push	{r7}
 801b414:	b083      	sub	sp, #12
 801b416:	af00      	add	r7, sp, #0
 801b418:	6078      	str	r0, [r7, #4]
 801b41a:	460b      	mov	r3, r1
 801b41c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b41e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b420:	4618      	mov	r0, r3
 801b422:	370c      	adds	r7, #12
 801b424:	46bd      	mov	sp, r7
 801b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b42a:	4770      	bx	lr

0801b42c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b42c:	b480      	push	{r7}
 801b42e:	b083      	sub	sp, #12
 801b430:	af00      	add	r7, sp, #0
 801b432:	6078      	str	r0, [r7, #4]
 801b434:	460b      	mov	r3, r1
 801b436:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b438:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b43a:	4618      	mov	r0, r3
 801b43c:	370c      	adds	r7, #12
 801b43e:	46bd      	mov	sp, r7
 801b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b444:	4770      	bx	lr

0801b446 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801b446:	b580      	push	{r7, lr}
 801b448:	b086      	sub	sp, #24
 801b44a:	af00      	add	r7, sp, #0
 801b44c:	6078      	str	r0, [r7, #4]
 801b44e:	460b      	mov	r3, r1
 801b450:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801b45a:	2300      	movs	r3, #0
 801b45c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	885b      	ldrh	r3, [r3, #2]
 801b462:	b29a      	uxth	r2, r3
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	781b      	ldrb	r3, [r3, #0]
 801b468:	b29b      	uxth	r3, r3
 801b46a:	429a      	cmp	r2, r3
 801b46c:	d920      	bls.n	801b4b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	781b      	ldrb	r3, [r3, #0]
 801b472:	b29b      	uxth	r3, r3
 801b474:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801b476:	e013      	b.n	801b4a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801b478:	f107 030a 	add.w	r3, r7, #10
 801b47c:	4619      	mov	r1, r3
 801b47e:	6978      	ldr	r0, [r7, #20]
 801b480:	f000 f81b 	bl	801b4ba <USBD_GetNextDesc>
 801b484:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801b486:	697b      	ldr	r3, [r7, #20]
 801b488:	785b      	ldrb	r3, [r3, #1]
 801b48a:	2b05      	cmp	r3, #5
 801b48c:	d108      	bne.n	801b4a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801b48e:	697b      	ldr	r3, [r7, #20]
 801b490:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801b492:	693b      	ldr	r3, [r7, #16]
 801b494:	789b      	ldrb	r3, [r3, #2]
 801b496:	78fa      	ldrb	r2, [r7, #3]
 801b498:	429a      	cmp	r2, r3
 801b49a:	d008      	beq.n	801b4ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801b49c:	2300      	movs	r3, #0
 801b49e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	885b      	ldrh	r3, [r3, #2]
 801b4a4:	b29a      	uxth	r2, r3
 801b4a6:	897b      	ldrh	r3, [r7, #10]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d8e5      	bhi.n	801b478 <USBD_GetEpDesc+0x32>
 801b4ac:	e000      	b.n	801b4b0 <USBD_GetEpDesc+0x6a>
          break;
 801b4ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801b4b0:	693b      	ldr	r3, [r7, #16]
}
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	3718      	adds	r7, #24
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	bd80      	pop	{r7, pc}

0801b4ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801b4ba:	b480      	push	{r7}
 801b4bc:	b085      	sub	sp, #20
 801b4be:	af00      	add	r7, sp, #0
 801b4c0:	6078      	str	r0, [r7, #4]
 801b4c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	881a      	ldrh	r2, [r3, #0]
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	781b      	ldrb	r3, [r3, #0]
 801b4d0:	b29b      	uxth	r3, r3
 801b4d2:	4413      	add	r3, r2
 801b4d4:	b29a      	uxth	r2, r3
 801b4d6:	683b      	ldr	r3, [r7, #0]
 801b4d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	781b      	ldrb	r3, [r3, #0]
 801b4de:	461a      	mov	r2, r3
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	4413      	add	r3, r2
 801b4e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801b4e6:	68fb      	ldr	r3, [r7, #12]
}
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	3714      	adds	r7, #20
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f2:	4770      	bx	lr

0801b4f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801b4f4:	b480      	push	{r7}
 801b4f6:	b087      	sub	sp, #28
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801b500:	697b      	ldr	r3, [r7, #20]
 801b502:	781b      	ldrb	r3, [r3, #0]
 801b504:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801b506:	697b      	ldr	r3, [r7, #20]
 801b508:	3301      	adds	r3, #1
 801b50a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801b50c:	697b      	ldr	r3, [r7, #20]
 801b50e:	781b      	ldrb	r3, [r3, #0]
 801b510:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801b512:	8a3b      	ldrh	r3, [r7, #16]
 801b514:	021b      	lsls	r3, r3, #8
 801b516:	b21a      	sxth	r2, r3
 801b518:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b51c:	4313      	orrs	r3, r2
 801b51e:	b21b      	sxth	r3, r3
 801b520:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801b522:	89fb      	ldrh	r3, [r7, #14]
}
 801b524:	4618      	mov	r0, r3
 801b526:	371c      	adds	r7, #28
 801b528:	46bd      	mov	sp, r7
 801b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52e:	4770      	bx	lr

0801b530 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b530:	b580      	push	{r7, lr}
 801b532:	b084      	sub	sp, #16
 801b534:	af00      	add	r7, sp, #0
 801b536:	6078      	str	r0, [r7, #4]
 801b538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b53a:	2300      	movs	r3, #0
 801b53c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b53e:	683b      	ldr	r3, [r7, #0]
 801b540:	781b      	ldrb	r3, [r3, #0]
 801b542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b546:	2b40      	cmp	r3, #64	; 0x40
 801b548:	d005      	beq.n	801b556 <USBD_StdDevReq+0x26>
 801b54a:	2b40      	cmp	r3, #64	; 0x40
 801b54c:	d857      	bhi.n	801b5fe <USBD_StdDevReq+0xce>
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d00f      	beq.n	801b572 <USBD_StdDevReq+0x42>
 801b552:	2b20      	cmp	r3, #32
 801b554:	d153      	bne.n	801b5fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	32ae      	adds	r2, #174	; 0xae
 801b560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b564:	689b      	ldr	r3, [r3, #8]
 801b566:	6839      	ldr	r1, [r7, #0]
 801b568:	6878      	ldr	r0, [r7, #4]
 801b56a:	4798      	blx	r3
 801b56c:	4603      	mov	r3, r0
 801b56e:	73fb      	strb	r3, [r7, #15]
      break;
 801b570:	e04a      	b.n	801b608 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b572:	683b      	ldr	r3, [r7, #0]
 801b574:	785b      	ldrb	r3, [r3, #1]
 801b576:	2b09      	cmp	r3, #9
 801b578:	d83b      	bhi.n	801b5f2 <USBD_StdDevReq+0xc2>
 801b57a:	a201      	add	r2, pc, #4	; (adr r2, 801b580 <USBD_StdDevReq+0x50>)
 801b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b580:	0801b5d5 	.word	0x0801b5d5
 801b584:	0801b5e9 	.word	0x0801b5e9
 801b588:	0801b5f3 	.word	0x0801b5f3
 801b58c:	0801b5df 	.word	0x0801b5df
 801b590:	0801b5f3 	.word	0x0801b5f3
 801b594:	0801b5b3 	.word	0x0801b5b3
 801b598:	0801b5a9 	.word	0x0801b5a9
 801b59c:	0801b5f3 	.word	0x0801b5f3
 801b5a0:	0801b5cb 	.word	0x0801b5cb
 801b5a4:	0801b5bd 	.word	0x0801b5bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b5a8:	6839      	ldr	r1, [r7, #0]
 801b5aa:	6878      	ldr	r0, [r7, #4]
 801b5ac:	f000 fa3c 	bl	801ba28 <USBD_GetDescriptor>
          break;
 801b5b0:	e024      	b.n	801b5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b5b2:	6839      	ldr	r1, [r7, #0]
 801b5b4:	6878      	ldr	r0, [r7, #4]
 801b5b6:	f000 fba1 	bl	801bcfc <USBD_SetAddress>
          break;
 801b5ba:	e01f      	b.n	801b5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801b5bc:	6839      	ldr	r1, [r7, #0]
 801b5be:	6878      	ldr	r0, [r7, #4]
 801b5c0:	f000 fbe0 	bl	801bd84 <USBD_SetConfig>
 801b5c4:	4603      	mov	r3, r0
 801b5c6:	73fb      	strb	r3, [r7, #15]
          break;
 801b5c8:	e018      	b.n	801b5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b5ca:	6839      	ldr	r1, [r7, #0]
 801b5cc:	6878      	ldr	r0, [r7, #4]
 801b5ce:	f000 fc83 	bl	801bed8 <USBD_GetConfig>
          break;
 801b5d2:	e013      	b.n	801b5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b5d4:	6839      	ldr	r1, [r7, #0]
 801b5d6:	6878      	ldr	r0, [r7, #4]
 801b5d8:	f000 fcb4 	bl	801bf44 <USBD_GetStatus>
          break;
 801b5dc:	e00e      	b.n	801b5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b5de:	6839      	ldr	r1, [r7, #0]
 801b5e0:	6878      	ldr	r0, [r7, #4]
 801b5e2:	f000 fce3 	bl	801bfac <USBD_SetFeature>
          break;
 801b5e6:	e009      	b.n	801b5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b5e8:	6839      	ldr	r1, [r7, #0]
 801b5ea:	6878      	ldr	r0, [r7, #4]
 801b5ec:	f000 fd07 	bl	801bffe <USBD_ClrFeature>
          break;
 801b5f0:	e004      	b.n	801b5fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b5f2:	6839      	ldr	r1, [r7, #0]
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	f000 fd5e 	bl	801c0b6 <USBD_CtlError>
          break;
 801b5fa:	bf00      	nop
      }
      break;
 801b5fc:	e004      	b.n	801b608 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801b5fe:	6839      	ldr	r1, [r7, #0]
 801b600:	6878      	ldr	r0, [r7, #4]
 801b602:	f000 fd58 	bl	801c0b6 <USBD_CtlError>
      break;
 801b606:	bf00      	nop
  }

  return ret;
 801b608:	7bfb      	ldrb	r3, [r7, #15]
}
 801b60a:	4618      	mov	r0, r3
 801b60c:	3710      	adds	r7, #16
 801b60e:	46bd      	mov	sp, r7
 801b610:	bd80      	pop	{r7, pc}
 801b612:	bf00      	nop

0801b614 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b084      	sub	sp, #16
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
 801b61c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b61e:	2300      	movs	r3, #0
 801b620:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b622:	683b      	ldr	r3, [r7, #0]
 801b624:	781b      	ldrb	r3, [r3, #0]
 801b626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b62a:	2b40      	cmp	r3, #64	; 0x40
 801b62c:	d005      	beq.n	801b63a <USBD_StdItfReq+0x26>
 801b62e:	2b40      	cmp	r3, #64	; 0x40
 801b630:	d852      	bhi.n	801b6d8 <USBD_StdItfReq+0xc4>
 801b632:	2b00      	cmp	r3, #0
 801b634:	d001      	beq.n	801b63a <USBD_StdItfReq+0x26>
 801b636:	2b20      	cmp	r3, #32
 801b638:	d14e      	bne.n	801b6d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b640:	b2db      	uxtb	r3, r3
 801b642:	3b01      	subs	r3, #1
 801b644:	2b02      	cmp	r3, #2
 801b646:	d840      	bhi.n	801b6ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b648:	683b      	ldr	r3, [r7, #0]
 801b64a:	889b      	ldrh	r3, [r3, #4]
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	2b01      	cmp	r3, #1
 801b650:	d836      	bhi.n	801b6c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801b652:	683b      	ldr	r3, [r7, #0]
 801b654:	889b      	ldrh	r3, [r3, #4]
 801b656:	b2db      	uxtb	r3, r3
 801b658:	4619      	mov	r1, r3
 801b65a:	6878      	ldr	r0, [r7, #4]
 801b65c:	f7ff fed9 	bl	801b412 <USBD_CoreFindIF>
 801b660:	4603      	mov	r3, r0
 801b662:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b664:	7bbb      	ldrb	r3, [r7, #14]
 801b666:	2bff      	cmp	r3, #255	; 0xff
 801b668:	d01d      	beq.n	801b6a6 <USBD_StdItfReq+0x92>
 801b66a:	7bbb      	ldrb	r3, [r7, #14]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d11a      	bne.n	801b6a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801b670:	7bba      	ldrb	r2, [r7, #14]
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	32ae      	adds	r2, #174	; 0xae
 801b676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b67a:	689b      	ldr	r3, [r3, #8]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d00f      	beq.n	801b6a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801b680:	7bba      	ldrb	r2, [r7, #14]
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801b688:	7bba      	ldrb	r2, [r7, #14]
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	32ae      	adds	r2, #174	; 0xae
 801b68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b692:	689b      	ldr	r3, [r3, #8]
 801b694:	6839      	ldr	r1, [r7, #0]
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	4798      	blx	r3
 801b69a:	4603      	mov	r3, r0
 801b69c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b69e:	e004      	b.n	801b6aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801b6a0:	2303      	movs	r3, #3
 801b6a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b6a4:	e001      	b.n	801b6aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801b6a6:	2303      	movs	r3, #3
 801b6a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	88db      	ldrh	r3, [r3, #6]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d110      	bne.n	801b6d4 <USBD_StdItfReq+0xc0>
 801b6b2:	7bfb      	ldrb	r3, [r7, #15]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d10d      	bne.n	801b6d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801b6b8:	6878      	ldr	r0, [r7, #4]
 801b6ba:	f000 fdc7 	bl	801c24c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b6be:	e009      	b.n	801b6d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801b6c0:	6839      	ldr	r1, [r7, #0]
 801b6c2:	6878      	ldr	r0, [r7, #4]
 801b6c4:	f000 fcf7 	bl	801c0b6 <USBD_CtlError>
          break;
 801b6c8:	e004      	b.n	801b6d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b6ca:	6839      	ldr	r1, [r7, #0]
 801b6cc:	6878      	ldr	r0, [r7, #4]
 801b6ce:	f000 fcf2 	bl	801c0b6 <USBD_CtlError>
          break;
 801b6d2:	e000      	b.n	801b6d6 <USBD_StdItfReq+0xc2>
          break;
 801b6d4:	bf00      	nop
      }
      break;
 801b6d6:	e004      	b.n	801b6e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801b6d8:	6839      	ldr	r1, [r7, #0]
 801b6da:	6878      	ldr	r0, [r7, #4]
 801b6dc:	f000 fceb 	bl	801c0b6 <USBD_CtlError>
      break;
 801b6e0:	bf00      	nop
  }

  return ret;
 801b6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	3710      	adds	r7, #16
 801b6e8:	46bd      	mov	sp, r7
 801b6ea:	bd80      	pop	{r7, pc}

0801b6ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b6ec:	b580      	push	{r7, lr}
 801b6ee:	b084      	sub	sp, #16
 801b6f0:	af00      	add	r7, sp, #0
 801b6f2:	6078      	str	r0, [r7, #4]
 801b6f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801b6fa:	683b      	ldr	r3, [r7, #0]
 801b6fc:	889b      	ldrh	r3, [r3, #4]
 801b6fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	781b      	ldrb	r3, [r3, #0]
 801b704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b708:	2b40      	cmp	r3, #64	; 0x40
 801b70a:	d007      	beq.n	801b71c <USBD_StdEPReq+0x30>
 801b70c:	2b40      	cmp	r3, #64	; 0x40
 801b70e:	f200 817f 	bhi.w	801ba10 <USBD_StdEPReq+0x324>
 801b712:	2b00      	cmp	r3, #0
 801b714:	d02a      	beq.n	801b76c <USBD_StdEPReq+0x80>
 801b716:	2b20      	cmp	r3, #32
 801b718:	f040 817a 	bne.w	801ba10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801b71c:	7bbb      	ldrb	r3, [r7, #14]
 801b71e:	4619      	mov	r1, r3
 801b720:	6878      	ldr	r0, [r7, #4]
 801b722:	f7ff fe83 	bl	801b42c <USBD_CoreFindEP>
 801b726:	4603      	mov	r3, r0
 801b728:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b72a:	7b7b      	ldrb	r3, [r7, #13]
 801b72c:	2bff      	cmp	r3, #255	; 0xff
 801b72e:	f000 8174 	beq.w	801ba1a <USBD_StdEPReq+0x32e>
 801b732:	7b7b      	ldrb	r3, [r7, #13]
 801b734:	2b00      	cmp	r3, #0
 801b736:	f040 8170 	bne.w	801ba1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801b73a:	7b7a      	ldrb	r2, [r7, #13]
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801b742:	7b7a      	ldrb	r2, [r7, #13]
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	32ae      	adds	r2, #174	; 0xae
 801b748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b74c:	689b      	ldr	r3, [r3, #8]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	f000 8163 	beq.w	801ba1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801b754:	7b7a      	ldrb	r2, [r7, #13]
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	32ae      	adds	r2, #174	; 0xae
 801b75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b75e:	689b      	ldr	r3, [r3, #8]
 801b760:	6839      	ldr	r1, [r7, #0]
 801b762:	6878      	ldr	r0, [r7, #4]
 801b764:	4798      	blx	r3
 801b766:	4603      	mov	r3, r0
 801b768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801b76a:	e156      	b.n	801ba1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b76c:	683b      	ldr	r3, [r7, #0]
 801b76e:	785b      	ldrb	r3, [r3, #1]
 801b770:	2b03      	cmp	r3, #3
 801b772:	d008      	beq.n	801b786 <USBD_StdEPReq+0x9a>
 801b774:	2b03      	cmp	r3, #3
 801b776:	f300 8145 	bgt.w	801ba04 <USBD_StdEPReq+0x318>
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	f000 809b 	beq.w	801b8b6 <USBD_StdEPReq+0x1ca>
 801b780:	2b01      	cmp	r3, #1
 801b782:	d03c      	beq.n	801b7fe <USBD_StdEPReq+0x112>
 801b784:	e13e      	b.n	801ba04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b78c:	b2db      	uxtb	r3, r3
 801b78e:	2b02      	cmp	r3, #2
 801b790:	d002      	beq.n	801b798 <USBD_StdEPReq+0xac>
 801b792:	2b03      	cmp	r3, #3
 801b794:	d016      	beq.n	801b7c4 <USBD_StdEPReq+0xd8>
 801b796:	e02c      	b.n	801b7f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b798:	7bbb      	ldrb	r3, [r7, #14]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d00d      	beq.n	801b7ba <USBD_StdEPReq+0xce>
 801b79e:	7bbb      	ldrb	r3, [r7, #14]
 801b7a0:	2b80      	cmp	r3, #128	; 0x80
 801b7a2:	d00a      	beq.n	801b7ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801b7a4:	7bbb      	ldrb	r3, [r7, #14]
 801b7a6:	4619      	mov	r1, r3
 801b7a8:	6878      	ldr	r0, [r7, #4]
 801b7aa:	f001 f973 	bl	801ca94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801b7ae:	2180      	movs	r1, #128	; 0x80
 801b7b0:	6878      	ldr	r0, [r7, #4]
 801b7b2:	f001 f96f 	bl	801ca94 <USBD_LL_StallEP>
 801b7b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b7b8:	e020      	b.n	801b7fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801b7ba:	6839      	ldr	r1, [r7, #0]
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f000 fc7a 	bl	801c0b6 <USBD_CtlError>
              break;
 801b7c2:	e01b      	b.n	801b7fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b7c4:	683b      	ldr	r3, [r7, #0]
 801b7c6:	885b      	ldrh	r3, [r3, #2]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d10e      	bne.n	801b7ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b7cc:	7bbb      	ldrb	r3, [r7, #14]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d00b      	beq.n	801b7ea <USBD_StdEPReq+0xfe>
 801b7d2:	7bbb      	ldrb	r3, [r7, #14]
 801b7d4:	2b80      	cmp	r3, #128	; 0x80
 801b7d6:	d008      	beq.n	801b7ea <USBD_StdEPReq+0xfe>
 801b7d8:	683b      	ldr	r3, [r7, #0]
 801b7da:	88db      	ldrh	r3, [r3, #6]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d104      	bne.n	801b7ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801b7e0:	7bbb      	ldrb	r3, [r7, #14]
 801b7e2:	4619      	mov	r1, r3
 801b7e4:	6878      	ldr	r0, [r7, #4]
 801b7e6:	f001 f955 	bl	801ca94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801b7ea:	6878      	ldr	r0, [r7, #4]
 801b7ec:	f000 fd2e 	bl	801c24c <USBD_CtlSendStatus>

              break;
 801b7f0:	e004      	b.n	801b7fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801b7f2:	6839      	ldr	r1, [r7, #0]
 801b7f4:	6878      	ldr	r0, [r7, #4]
 801b7f6:	f000 fc5e 	bl	801c0b6 <USBD_CtlError>
              break;
 801b7fa:	bf00      	nop
          }
          break;
 801b7fc:	e107      	b.n	801ba0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b804:	b2db      	uxtb	r3, r3
 801b806:	2b02      	cmp	r3, #2
 801b808:	d002      	beq.n	801b810 <USBD_StdEPReq+0x124>
 801b80a:	2b03      	cmp	r3, #3
 801b80c:	d016      	beq.n	801b83c <USBD_StdEPReq+0x150>
 801b80e:	e04b      	b.n	801b8a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b810:	7bbb      	ldrb	r3, [r7, #14]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d00d      	beq.n	801b832 <USBD_StdEPReq+0x146>
 801b816:	7bbb      	ldrb	r3, [r7, #14]
 801b818:	2b80      	cmp	r3, #128	; 0x80
 801b81a:	d00a      	beq.n	801b832 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801b81c:	7bbb      	ldrb	r3, [r7, #14]
 801b81e:	4619      	mov	r1, r3
 801b820:	6878      	ldr	r0, [r7, #4]
 801b822:	f001 f937 	bl	801ca94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801b826:	2180      	movs	r1, #128	; 0x80
 801b828:	6878      	ldr	r0, [r7, #4]
 801b82a:	f001 f933 	bl	801ca94 <USBD_LL_StallEP>
 801b82e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b830:	e040      	b.n	801b8b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801b832:	6839      	ldr	r1, [r7, #0]
 801b834:	6878      	ldr	r0, [r7, #4]
 801b836:	f000 fc3e 	bl	801c0b6 <USBD_CtlError>
              break;
 801b83a:	e03b      	b.n	801b8b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b83c:	683b      	ldr	r3, [r7, #0]
 801b83e:	885b      	ldrh	r3, [r3, #2]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d136      	bne.n	801b8b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b844:	7bbb      	ldrb	r3, [r7, #14]
 801b846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d004      	beq.n	801b858 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801b84e:	7bbb      	ldrb	r3, [r7, #14]
 801b850:	4619      	mov	r1, r3
 801b852:	6878      	ldr	r0, [r7, #4]
 801b854:	f001 f93d 	bl	801cad2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801b858:	6878      	ldr	r0, [r7, #4]
 801b85a:	f000 fcf7 	bl	801c24c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801b85e:	7bbb      	ldrb	r3, [r7, #14]
 801b860:	4619      	mov	r1, r3
 801b862:	6878      	ldr	r0, [r7, #4]
 801b864:	f7ff fde2 	bl	801b42c <USBD_CoreFindEP>
 801b868:	4603      	mov	r3, r0
 801b86a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b86c:	7b7b      	ldrb	r3, [r7, #13]
 801b86e:	2bff      	cmp	r3, #255	; 0xff
 801b870:	d01f      	beq.n	801b8b2 <USBD_StdEPReq+0x1c6>
 801b872:	7b7b      	ldrb	r3, [r7, #13]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d11c      	bne.n	801b8b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801b878:	7b7a      	ldrb	r2, [r7, #13]
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801b880:	7b7a      	ldrb	r2, [r7, #13]
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	32ae      	adds	r2, #174	; 0xae
 801b886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b88a:	689b      	ldr	r3, [r3, #8]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d010      	beq.n	801b8b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801b890:	7b7a      	ldrb	r2, [r7, #13]
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	32ae      	adds	r2, #174	; 0xae
 801b896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b89a:	689b      	ldr	r3, [r3, #8]
 801b89c:	6839      	ldr	r1, [r7, #0]
 801b89e:	6878      	ldr	r0, [r7, #4]
 801b8a0:	4798      	blx	r3
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801b8a6:	e004      	b.n	801b8b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801b8a8:	6839      	ldr	r1, [r7, #0]
 801b8aa:	6878      	ldr	r0, [r7, #4]
 801b8ac:	f000 fc03 	bl	801c0b6 <USBD_CtlError>
              break;
 801b8b0:	e000      	b.n	801b8b4 <USBD_StdEPReq+0x1c8>
              break;
 801b8b2:	bf00      	nop
          }
          break;
 801b8b4:	e0ab      	b.n	801ba0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b8bc:	b2db      	uxtb	r3, r3
 801b8be:	2b02      	cmp	r3, #2
 801b8c0:	d002      	beq.n	801b8c8 <USBD_StdEPReq+0x1dc>
 801b8c2:	2b03      	cmp	r3, #3
 801b8c4:	d032      	beq.n	801b92c <USBD_StdEPReq+0x240>
 801b8c6:	e097      	b.n	801b9f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b8c8:	7bbb      	ldrb	r3, [r7, #14]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d007      	beq.n	801b8de <USBD_StdEPReq+0x1f2>
 801b8ce:	7bbb      	ldrb	r3, [r7, #14]
 801b8d0:	2b80      	cmp	r3, #128	; 0x80
 801b8d2:	d004      	beq.n	801b8de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801b8d4:	6839      	ldr	r1, [r7, #0]
 801b8d6:	6878      	ldr	r0, [r7, #4]
 801b8d8:	f000 fbed 	bl	801c0b6 <USBD_CtlError>
                break;
 801b8dc:	e091      	b.n	801ba02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b8de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	da0b      	bge.n	801b8fe <USBD_StdEPReq+0x212>
 801b8e6:	7bbb      	ldrb	r3, [r7, #14]
 801b8e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b8ec:	4613      	mov	r3, r2
 801b8ee:	009b      	lsls	r3, r3, #2
 801b8f0:	4413      	add	r3, r2
 801b8f2:	009b      	lsls	r3, r3, #2
 801b8f4:	3310      	adds	r3, #16
 801b8f6:	687a      	ldr	r2, [r7, #4]
 801b8f8:	4413      	add	r3, r2
 801b8fa:	3304      	adds	r3, #4
 801b8fc:	e00b      	b.n	801b916 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b8fe:	7bbb      	ldrb	r3, [r7, #14]
 801b900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b904:	4613      	mov	r3, r2
 801b906:	009b      	lsls	r3, r3, #2
 801b908:	4413      	add	r3, r2
 801b90a:	009b      	lsls	r3, r3, #2
 801b90c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801b910:	687a      	ldr	r2, [r7, #4]
 801b912:	4413      	add	r3, r2
 801b914:	3304      	adds	r3, #4
 801b916:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	2200      	movs	r2, #0
 801b91c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	2202      	movs	r2, #2
 801b922:	4619      	mov	r1, r3
 801b924:	6878      	ldr	r0, [r7, #4]
 801b926:	f000 fc37 	bl	801c198 <USBD_CtlSendData>
              break;
 801b92a:	e06a      	b.n	801ba02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b92c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b930:	2b00      	cmp	r3, #0
 801b932:	da11      	bge.n	801b958 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b934:	7bbb      	ldrb	r3, [r7, #14]
 801b936:	f003 020f 	and.w	r2, r3, #15
 801b93a:	6879      	ldr	r1, [r7, #4]
 801b93c:	4613      	mov	r3, r2
 801b93e:	009b      	lsls	r3, r3, #2
 801b940:	4413      	add	r3, r2
 801b942:	009b      	lsls	r3, r3, #2
 801b944:	440b      	add	r3, r1
 801b946:	3324      	adds	r3, #36	; 0x24
 801b948:	881b      	ldrh	r3, [r3, #0]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d117      	bne.n	801b97e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801b94e:	6839      	ldr	r1, [r7, #0]
 801b950:	6878      	ldr	r0, [r7, #4]
 801b952:	f000 fbb0 	bl	801c0b6 <USBD_CtlError>
                  break;
 801b956:	e054      	b.n	801ba02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b958:	7bbb      	ldrb	r3, [r7, #14]
 801b95a:	f003 020f 	and.w	r2, r3, #15
 801b95e:	6879      	ldr	r1, [r7, #4]
 801b960:	4613      	mov	r3, r2
 801b962:	009b      	lsls	r3, r3, #2
 801b964:	4413      	add	r3, r2
 801b966:	009b      	lsls	r3, r3, #2
 801b968:	440b      	add	r3, r1
 801b96a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b96e:	881b      	ldrh	r3, [r3, #0]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d104      	bne.n	801b97e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801b974:	6839      	ldr	r1, [r7, #0]
 801b976:	6878      	ldr	r0, [r7, #4]
 801b978:	f000 fb9d 	bl	801c0b6 <USBD_CtlError>
                  break;
 801b97c:	e041      	b.n	801ba02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b97e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b982:	2b00      	cmp	r3, #0
 801b984:	da0b      	bge.n	801b99e <USBD_StdEPReq+0x2b2>
 801b986:	7bbb      	ldrb	r3, [r7, #14]
 801b988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b98c:	4613      	mov	r3, r2
 801b98e:	009b      	lsls	r3, r3, #2
 801b990:	4413      	add	r3, r2
 801b992:	009b      	lsls	r3, r3, #2
 801b994:	3310      	adds	r3, #16
 801b996:	687a      	ldr	r2, [r7, #4]
 801b998:	4413      	add	r3, r2
 801b99a:	3304      	adds	r3, #4
 801b99c:	e00b      	b.n	801b9b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b99e:	7bbb      	ldrb	r3, [r7, #14]
 801b9a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b9a4:	4613      	mov	r3, r2
 801b9a6:	009b      	lsls	r3, r3, #2
 801b9a8:	4413      	add	r3, r2
 801b9aa:	009b      	lsls	r3, r3, #2
 801b9ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801b9b0:	687a      	ldr	r2, [r7, #4]
 801b9b2:	4413      	add	r3, r2
 801b9b4:	3304      	adds	r3, #4
 801b9b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b9b8:	7bbb      	ldrb	r3, [r7, #14]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d002      	beq.n	801b9c4 <USBD_StdEPReq+0x2d8>
 801b9be:	7bbb      	ldrb	r3, [r7, #14]
 801b9c0:	2b80      	cmp	r3, #128	; 0x80
 801b9c2:	d103      	bne.n	801b9cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	601a      	str	r2, [r3, #0]
 801b9ca:	e00e      	b.n	801b9ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801b9cc:	7bbb      	ldrb	r3, [r7, #14]
 801b9ce:	4619      	mov	r1, r3
 801b9d0:	6878      	ldr	r0, [r7, #4]
 801b9d2:	f001 f89d 	bl	801cb10 <USBD_LL_IsStallEP>
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d003      	beq.n	801b9e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	2201      	movs	r2, #1
 801b9e0:	601a      	str	r2, [r3, #0]
 801b9e2:	e002      	b.n	801b9ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801b9e4:	68bb      	ldr	r3, [r7, #8]
 801b9e6:	2200      	movs	r2, #0
 801b9e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	2202      	movs	r2, #2
 801b9ee:	4619      	mov	r1, r3
 801b9f0:	6878      	ldr	r0, [r7, #4]
 801b9f2:	f000 fbd1 	bl	801c198 <USBD_CtlSendData>
              break;
 801b9f6:	e004      	b.n	801ba02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801b9f8:	6839      	ldr	r1, [r7, #0]
 801b9fa:	6878      	ldr	r0, [r7, #4]
 801b9fc:	f000 fb5b 	bl	801c0b6 <USBD_CtlError>
              break;
 801ba00:	bf00      	nop
          }
          break;
 801ba02:	e004      	b.n	801ba0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801ba04:	6839      	ldr	r1, [r7, #0]
 801ba06:	6878      	ldr	r0, [r7, #4]
 801ba08:	f000 fb55 	bl	801c0b6 <USBD_CtlError>
          break;
 801ba0c:	bf00      	nop
      }
      break;
 801ba0e:	e005      	b.n	801ba1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801ba10:	6839      	ldr	r1, [r7, #0]
 801ba12:	6878      	ldr	r0, [r7, #4]
 801ba14:	f000 fb4f 	bl	801c0b6 <USBD_CtlError>
      break;
 801ba18:	e000      	b.n	801ba1c <USBD_StdEPReq+0x330>
      break;
 801ba1a:	bf00      	nop
  }

  return ret;
 801ba1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba1e:	4618      	mov	r0, r3
 801ba20:	3710      	adds	r7, #16
 801ba22:	46bd      	mov	sp, r7
 801ba24:	bd80      	pop	{r7, pc}
	...

0801ba28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ba28:	b580      	push	{r7, lr}
 801ba2a:	b084      	sub	sp, #16
 801ba2c:	af00      	add	r7, sp, #0
 801ba2e:	6078      	str	r0, [r7, #4]
 801ba30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ba32:	2300      	movs	r3, #0
 801ba34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801ba36:	2300      	movs	r3, #0
 801ba38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801ba3e:	683b      	ldr	r3, [r7, #0]
 801ba40:	885b      	ldrh	r3, [r3, #2]
 801ba42:	0a1b      	lsrs	r3, r3, #8
 801ba44:	b29b      	uxth	r3, r3
 801ba46:	3b01      	subs	r3, #1
 801ba48:	2b06      	cmp	r3, #6
 801ba4a:	f200 8128 	bhi.w	801bc9e <USBD_GetDescriptor+0x276>
 801ba4e:	a201      	add	r2, pc, #4	; (adr r2, 801ba54 <USBD_GetDescriptor+0x2c>)
 801ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba54:	0801ba71 	.word	0x0801ba71
 801ba58:	0801ba89 	.word	0x0801ba89
 801ba5c:	0801bac9 	.word	0x0801bac9
 801ba60:	0801bc9f 	.word	0x0801bc9f
 801ba64:	0801bc9f 	.word	0x0801bc9f
 801ba68:	0801bc3f 	.word	0x0801bc3f
 801ba6c:	0801bc6b 	.word	0x0801bc6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	687a      	ldr	r2, [r7, #4]
 801ba7a:	7c12      	ldrb	r2, [r2, #16]
 801ba7c:	f107 0108 	add.w	r1, r7, #8
 801ba80:	4610      	mov	r0, r2
 801ba82:	4798      	blx	r3
 801ba84:	60f8      	str	r0, [r7, #12]
      break;
 801ba86:	e112      	b.n	801bcae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	7c1b      	ldrb	r3, [r3, #16]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d10d      	bne.n	801baac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ba96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba98:	f107 0208 	add.w	r2, r7, #8
 801ba9c:	4610      	mov	r0, r2
 801ba9e:	4798      	blx	r3
 801baa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	3301      	adds	r3, #1
 801baa6:	2202      	movs	r2, #2
 801baa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801baaa:	e100      	b.n	801bcae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bab4:	f107 0208 	add.w	r2, r7, #8
 801bab8:	4610      	mov	r0, r2
 801baba:	4798      	blx	r3
 801babc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	3301      	adds	r3, #1
 801bac2:	2202      	movs	r2, #2
 801bac4:	701a      	strb	r2, [r3, #0]
      break;
 801bac6:	e0f2      	b.n	801bcae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801bac8:	683b      	ldr	r3, [r7, #0]
 801baca:	885b      	ldrh	r3, [r3, #2]
 801bacc:	b2db      	uxtb	r3, r3
 801bace:	2b05      	cmp	r3, #5
 801bad0:	f200 80ac 	bhi.w	801bc2c <USBD_GetDescriptor+0x204>
 801bad4:	a201      	add	r2, pc, #4	; (adr r2, 801badc <USBD_GetDescriptor+0xb4>)
 801bad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bada:	bf00      	nop
 801badc:	0801baf5 	.word	0x0801baf5
 801bae0:	0801bb29 	.word	0x0801bb29
 801bae4:	0801bb5d 	.word	0x0801bb5d
 801bae8:	0801bb91 	.word	0x0801bb91
 801baec:	0801bbc5 	.word	0x0801bbc5
 801baf0:	0801bbf9 	.word	0x0801bbf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bafa:	685b      	ldr	r3, [r3, #4]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d00b      	beq.n	801bb18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb06:	685b      	ldr	r3, [r3, #4]
 801bb08:	687a      	ldr	r2, [r7, #4]
 801bb0a:	7c12      	ldrb	r2, [r2, #16]
 801bb0c:	f107 0108 	add.w	r1, r7, #8
 801bb10:	4610      	mov	r0, r2
 801bb12:	4798      	blx	r3
 801bb14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb16:	e091      	b.n	801bc3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bb18:	6839      	ldr	r1, [r7, #0]
 801bb1a:	6878      	ldr	r0, [r7, #4]
 801bb1c:	f000 facb 	bl	801c0b6 <USBD_CtlError>
            err++;
 801bb20:	7afb      	ldrb	r3, [r7, #11]
 801bb22:	3301      	adds	r3, #1
 801bb24:	72fb      	strb	r3, [r7, #11]
          break;
 801bb26:	e089      	b.n	801bc3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb2e:	689b      	ldr	r3, [r3, #8]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d00b      	beq.n	801bb4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb3a:	689b      	ldr	r3, [r3, #8]
 801bb3c:	687a      	ldr	r2, [r7, #4]
 801bb3e:	7c12      	ldrb	r2, [r2, #16]
 801bb40:	f107 0108 	add.w	r1, r7, #8
 801bb44:	4610      	mov	r0, r2
 801bb46:	4798      	blx	r3
 801bb48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb4a:	e077      	b.n	801bc3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bb4c:	6839      	ldr	r1, [r7, #0]
 801bb4e:	6878      	ldr	r0, [r7, #4]
 801bb50:	f000 fab1 	bl	801c0b6 <USBD_CtlError>
            err++;
 801bb54:	7afb      	ldrb	r3, [r7, #11]
 801bb56:	3301      	adds	r3, #1
 801bb58:	72fb      	strb	r3, [r7, #11]
          break;
 801bb5a:	e06f      	b.n	801bc3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb62:	68db      	ldr	r3, [r3, #12]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d00b      	beq.n	801bb80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb6e:	68db      	ldr	r3, [r3, #12]
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	7c12      	ldrb	r2, [r2, #16]
 801bb74:	f107 0108 	add.w	r1, r7, #8
 801bb78:	4610      	mov	r0, r2
 801bb7a:	4798      	blx	r3
 801bb7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb7e:	e05d      	b.n	801bc3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bb80:	6839      	ldr	r1, [r7, #0]
 801bb82:	6878      	ldr	r0, [r7, #4]
 801bb84:	f000 fa97 	bl	801c0b6 <USBD_CtlError>
            err++;
 801bb88:	7afb      	ldrb	r3, [r7, #11]
 801bb8a:	3301      	adds	r3, #1
 801bb8c:	72fb      	strb	r3, [r7, #11]
          break;
 801bb8e:	e055      	b.n	801bc3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb96:	691b      	ldr	r3, [r3, #16]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d00b      	beq.n	801bbb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bba2:	691b      	ldr	r3, [r3, #16]
 801bba4:	687a      	ldr	r2, [r7, #4]
 801bba6:	7c12      	ldrb	r2, [r2, #16]
 801bba8:	f107 0108 	add.w	r1, r7, #8
 801bbac:	4610      	mov	r0, r2
 801bbae:	4798      	blx	r3
 801bbb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bbb2:	e043      	b.n	801bc3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bbb4:	6839      	ldr	r1, [r7, #0]
 801bbb6:	6878      	ldr	r0, [r7, #4]
 801bbb8:	f000 fa7d 	bl	801c0b6 <USBD_CtlError>
            err++;
 801bbbc:	7afb      	ldrb	r3, [r7, #11]
 801bbbe:	3301      	adds	r3, #1
 801bbc0:	72fb      	strb	r3, [r7, #11]
          break;
 801bbc2:	e03b      	b.n	801bc3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bbca:	695b      	ldr	r3, [r3, #20]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d00b      	beq.n	801bbe8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bbd6:	695b      	ldr	r3, [r3, #20]
 801bbd8:	687a      	ldr	r2, [r7, #4]
 801bbda:	7c12      	ldrb	r2, [r2, #16]
 801bbdc:	f107 0108 	add.w	r1, r7, #8
 801bbe0:	4610      	mov	r0, r2
 801bbe2:	4798      	blx	r3
 801bbe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bbe6:	e029      	b.n	801bc3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bbe8:	6839      	ldr	r1, [r7, #0]
 801bbea:	6878      	ldr	r0, [r7, #4]
 801bbec:	f000 fa63 	bl	801c0b6 <USBD_CtlError>
            err++;
 801bbf0:	7afb      	ldrb	r3, [r7, #11]
 801bbf2:	3301      	adds	r3, #1
 801bbf4:	72fb      	strb	r3, [r7, #11]
          break;
 801bbf6:	e021      	b.n	801bc3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bbfe:	699b      	ldr	r3, [r3, #24]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d00b      	beq.n	801bc1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bc0a:	699b      	ldr	r3, [r3, #24]
 801bc0c:	687a      	ldr	r2, [r7, #4]
 801bc0e:	7c12      	ldrb	r2, [r2, #16]
 801bc10:	f107 0108 	add.w	r1, r7, #8
 801bc14:	4610      	mov	r0, r2
 801bc16:	4798      	blx	r3
 801bc18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bc1a:	e00f      	b.n	801bc3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bc1c:	6839      	ldr	r1, [r7, #0]
 801bc1e:	6878      	ldr	r0, [r7, #4]
 801bc20:	f000 fa49 	bl	801c0b6 <USBD_CtlError>
            err++;
 801bc24:	7afb      	ldrb	r3, [r7, #11]
 801bc26:	3301      	adds	r3, #1
 801bc28:	72fb      	strb	r3, [r7, #11]
          break;
 801bc2a:	e007      	b.n	801bc3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801bc2c:	6839      	ldr	r1, [r7, #0]
 801bc2e:	6878      	ldr	r0, [r7, #4]
 801bc30:	f000 fa41 	bl	801c0b6 <USBD_CtlError>
          err++;
 801bc34:	7afb      	ldrb	r3, [r7, #11]
 801bc36:	3301      	adds	r3, #1
 801bc38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801bc3a:	bf00      	nop
      }
      break;
 801bc3c:	e037      	b.n	801bcae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	7c1b      	ldrb	r3, [r3, #16]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d109      	bne.n	801bc5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bc4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc4e:	f107 0208 	add.w	r2, r7, #8
 801bc52:	4610      	mov	r0, r2
 801bc54:	4798      	blx	r3
 801bc56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bc58:	e029      	b.n	801bcae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bc5a:	6839      	ldr	r1, [r7, #0]
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f000 fa2a 	bl	801c0b6 <USBD_CtlError>
        err++;
 801bc62:	7afb      	ldrb	r3, [r7, #11]
 801bc64:	3301      	adds	r3, #1
 801bc66:	72fb      	strb	r3, [r7, #11]
      break;
 801bc68:	e021      	b.n	801bcae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	7c1b      	ldrb	r3, [r3, #16]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d10d      	bne.n	801bc8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc7a:	f107 0208 	add.w	r2, r7, #8
 801bc7e:	4610      	mov	r0, r2
 801bc80:	4798      	blx	r3
 801bc82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	3301      	adds	r3, #1
 801bc88:	2207      	movs	r2, #7
 801bc8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bc8c:	e00f      	b.n	801bcae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bc8e:	6839      	ldr	r1, [r7, #0]
 801bc90:	6878      	ldr	r0, [r7, #4]
 801bc92:	f000 fa10 	bl	801c0b6 <USBD_CtlError>
        err++;
 801bc96:	7afb      	ldrb	r3, [r7, #11]
 801bc98:	3301      	adds	r3, #1
 801bc9a:	72fb      	strb	r3, [r7, #11]
      break;
 801bc9c:	e007      	b.n	801bcae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801bc9e:	6839      	ldr	r1, [r7, #0]
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f000 fa08 	bl	801c0b6 <USBD_CtlError>
      err++;
 801bca6:	7afb      	ldrb	r3, [r7, #11]
 801bca8:	3301      	adds	r3, #1
 801bcaa:	72fb      	strb	r3, [r7, #11]
      break;
 801bcac:	bf00      	nop
  }

  if (err != 0U)
 801bcae:	7afb      	ldrb	r3, [r7, #11]
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d11e      	bne.n	801bcf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801bcb4:	683b      	ldr	r3, [r7, #0]
 801bcb6:	88db      	ldrh	r3, [r3, #6]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d016      	beq.n	801bcea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801bcbc:	893b      	ldrh	r3, [r7, #8]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d00e      	beq.n	801bce0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801bcc2:	683b      	ldr	r3, [r7, #0]
 801bcc4:	88da      	ldrh	r2, [r3, #6]
 801bcc6:	893b      	ldrh	r3, [r7, #8]
 801bcc8:	4293      	cmp	r3, r2
 801bcca:	bf28      	it	cs
 801bccc:	4613      	movcs	r3, r2
 801bcce:	b29b      	uxth	r3, r3
 801bcd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bcd2:	893b      	ldrh	r3, [r7, #8]
 801bcd4:	461a      	mov	r2, r3
 801bcd6:	68f9      	ldr	r1, [r7, #12]
 801bcd8:	6878      	ldr	r0, [r7, #4]
 801bcda:	f000 fa5d 	bl	801c198 <USBD_CtlSendData>
 801bcde:	e009      	b.n	801bcf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801bce0:	6839      	ldr	r1, [r7, #0]
 801bce2:	6878      	ldr	r0, [r7, #4]
 801bce4:	f000 f9e7 	bl	801c0b6 <USBD_CtlError>
 801bce8:	e004      	b.n	801bcf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801bcea:	6878      	ldr	r0, [r7, #4]
 801bcec:	f000 faae 	bl	801c24c <USBD_CtlSendStatus>
 801bcf0:	e000      	b.n	801bcf4 <USBD_GetDescriptor+0x2cc>
    return;
 801bcf2:	bf00      	nop
  }
}
 801bcf4:	3710      	adds	r7, #16
 801bcf6:	46bd      	mov	sp, r7
 801bcf8:	bd80      	pop	{r7, pc}
 801bcfa:	bf00      	nop

0801bcfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	b084      	sub	sp, #16
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
 801bd04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bd06:	683b      	ldr	r3, [r7, #0]
 801bd08:	889b      	ldrh	r3, [r3, #4]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d131      	bne.n	801bd72 <USBD_SetAddress+0x76>
 801bd0e:	683b      	ldr	r3, [r7, #0]
 801bd10:	88db      	ldrh	r3, [r3, #6]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d12d      	bne.n	801bd72 <USBD_SetAddress+0x76>
 801bd16:	683b      	ldr	r3, [r7, #0]
 801bd18:	885b      	ldrh	r3, [r3, #2]
 801bd1a:	2b7f      	cmp	r3, #127	; 0x7f
 801bd1c:	d829      	bhi.n	801bd72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	885b      	ldrh	r3, [r3, #2]
 801bd22:	b2db      	uxtb	r3, r3
 801bd24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bd28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bd30:	b2db      	uxtb	r3, r3
 801bd32:	2b03      	cmp	r3, #3
 801bd34:	d104      	bne.n	801bd40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801bd36:	6839      	ldr	r1, [r7, #0]
 801bd38:	6878      	ldr	r0, [r7, #4]
 801bd3a:	f000 f9bc 	bl	801c0b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd3e:	e01d      	b.n	801bd7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	7bfa      	ldrb	r2, [r7, #15]
 801bd44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bd48:	7bfb      	ldrb	r3, [r7, #15]
 801bd4a:	4619      	mov	r1, r3
 801bd4c:	6878      	ldr	r0, [r7, #4]
 801bd4e:	f000 ff0b 	bl	801cb68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801bd52:	6878      	ldr	r0, [r7, #4]
 801bd54:	f000 fa7a 	bl	801c24c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bd58:	7bfb      	ldrb	r3, [r7, #15]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d004      	beq.n	801bd68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	2202      	movs	r2, #2
 801bd62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd66:	e009      	b.n	801bd7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	2201      	movs	r2, #1
 801bd6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd70:	e004      	b.n	801bd7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801bd72:	6839      	ldr	r1, [r7, #0]
 801bd74:	6878      	ldr	r0, [r7, #4]
 801bd76:	f000 f99e 	bl	801c0b6 <USBD_CtlError>
  }
}
 801bd7a:	bf00      	nop
 801bd7c:	bf00      	nop
 801bd7e:	3710      	adds	r7, #16
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bd80      	pop	{r7, pc}

0801bd84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b084      	sub	sp, #16
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
 801bd8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bd8e:	2300      	movs	r3, #0
 801bd90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801bd92:	683b      	ldr	r3, [r7, #0]
 801bd94:	885b      	ldrh	r3, [r3, #2]
 801bd96:	b2da      	uxtb	r2, r3
 801bd98:	4b4e      	ldr	r3, [pc, #312]	; (801bed4 <USBD_SetConfig+0x150>)
 801bd9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801bd9c:	4b4d      	ldr	r3, [pc, #308]	; (801bed4 <USBD_SetConfig+0x150>)
 801bd9e:	781b      	ldrb	r3, [r3, #0]
 801bda0:	2b01      	cmp	r3, #1
 801bda2:	d905      	bls.n	801bdb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801bda4:	6839      	ldr	r1, [r7, #0]
 801bda6:	6878      	ldr	r0, [r7, #4]
 801bda8:	f000 f985 	bl	801c0b6 <USBD_CtlError>
    return USBD_FAIL;
 801bdac:	2303      	movs	r3, #3
 801bdae:	e08c      	b.n	801beca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bdb6:	b2db      	uxtb	r3, r3
 801bdb8:	2b02      	cmp	r3, #2
 801bdba:	d002      	beq.n	801bdc2 <USBD_SetConfig+0x3e>
 801bdbc:	2b03      	cmp	r3, #3
 801bdbe:	d029      	beq.n	801be14 <USBD_SetConfig+0x90>
 801bdc0:	e075      	b.n	801beae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801bdc2:	4b44      	ldr	r3, [pc, #272]	; (801bed4 <USBD_SetConfig+0x150>)
 801bdc4:	781b      	ldrb	r3, [r3, #0]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d020      	beq.n	801be0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801bdca:	4b42      	ldr	r3, [pc, #264]	; (801bed4 <USBD_SetConfig+0x150>)
 801bdcc:	781b      	ldrb	r3, [r3, #0]
 801bdce:	461a      	mov	r2, r3
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801bdd4:	4b3f      	ldr	r3, [pc, #252]	; (801bed4 <USBD_SetConfig+0x150>)
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	4619      	mov	r1, r3
 801bdda:	6878      	ldr	r0, [r7, #4]
 801bddc:	f7fe ffe7 	bl	801adae <USBD_SetClassConfig>
 801bde0:	4603      	mov	r3, r0
 801bde2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801bde4:	7bfb      	ldrb	r3, [r7, #15]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d008      	beq.n	801bdfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801bdea:	6839      	ldr	r1, [r7, #0]
 801bdec:	6878      	ldr	r0, [r7, #4]
 801bdee:	f000 f962 	bl	801c0b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	2202      	movs	r2, #2
 801bdf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801bdfa:	e065      	b.n	801bec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801bdfc:	6878      	ldr	r0, [r7, #4]
 801bdfe:	f000 fa25 	bl	801c24c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	2203      	movs	r2, #3
 801be06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801be0a:	e05d      	b.n	801bec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801be0c:	6878      	ldr	r0, [r7, #4]
 801be0e:	f000 fa1d 	bl	801c24c <USBD_CtlSendStatus>
      break;
 801be12:	e059      	b.n	801bec8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801be14:	4b2f      	ldr	r3, [pc, #188]	; (801bed4 <USBD_SetConfig+0x150>)
 801be16:	781b      	ldrb	r3, [r3, #0]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d112      	bne.n	801be42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	2202      	movs	r2, #2
 801be20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801be24:	4b2b      	ldr	r3, [pc, #172]	; (801bed4 <USBD_SetConfig+0x150>)
 801be26:	781b      	ldrb	r3, [r3, #0]
 801be28:	461a      	mov	r2, r3
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801be2e:	4b29      	ldr	r3, [pc, #164]	; (801bed4 <USBD_SetConfig+0x150>)
 801be30:	781b      	ldrb	r3, [r3, #0]
 801be32:	4619      	mov	r1, r3
 801be34:	6878      	ldr	r0, [r7, #4]
 801be36:	f7fe ffd6 	bl	801ade6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801be3a:	6878      	ldr	r0, [r7, #4]
 801be3c:	f000 fa06 	bl	801c24c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801be40:	e042      	b.n	801bec8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801be42:	4b24      	ldr	r3, [pc, #144]	; (801bed4 <USBD_SetConfig+0x150>)
 801be44:	781b      	ldrb	r3, [r3, #0]
 801be46:	461a      	mov	r2, r3
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	429a      	cmp	r2, r3
 801be4e:	d02a      	beq.n	801bea6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	685b      	ldr	r3, [r3, #4]
 801be54:	b2db      	uxtb	r3, r3
 801be56:	4619      	mov	r1, r3
 801be58:	6878      	ldr	r0, [r7, #4]
 801be5a:	f7fe ffc4 	bl	801ade6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801be5e:	4b1d      	ldr	r3, [pc, #116]	; (801bed4 <USBD_SetConfig+0x150>)
 801be60:	781b      	ldrb	r3, [r3, #0]
 801be62:	461a      	mov	r2, r3
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801be68:	4b1a      	ldr	r3, [pc, #104]	; (801bed4 <USBD_SetConfig+0x150>)
 801be6a:	781b      	ldrb	r3, [r3, #0]
 801be6c:	4619      	mov	r1, r3
 801be6e:	6878      	ldr	r0, [r7, #4]
 801be70:	f7fe ff9d 	bl	801adae <USBD_SetClassConfig>
 801be74:	4603      	mov	r3, r0
 801be76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801be78:	7bfb      	ldrb	r3, [r7, #15]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d00f      	beq.n	801be9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801be7e:	6839      	ldr	r1, [r7, #0]
 801be80:	6878      	ldr	r0, [r7, #4]
 801be82:	f000 f918 	bl	801c0b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	685b      	ldr	r3, [r3, #4]
 801be8a:	b2db      	uxtb	r3, r3
 801be8c:	4619      	mov	r1, r3
 801be8e:	6878      	ldr	r0, [r7, #4]
 801be90:	f7fe ffa9 	bl	801ade6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	2202      	movs	r2, #2
 801be98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801be9c:	e014      	b.n	801bec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801be9e:	6878      	ldr	r0, [r7, #4]
 801bea0:	f000 f9d4 	bl	801c24c <USBD_CtlSendStatus>
      break;
 801bea4:	e010      	b.n	801bec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801bea6:	6878      	ldr	r0, [r7, #4]
 801bea8:	f000 f9d0 	bl	801c24c <USBD_CtlSendStatus>
      break;
 801beac:	e00c      	b.n	801bec8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801beae:	6839      	ldr	r1, [r7, #0]
 801beb0:	6878      	ldr	r0, [r7, #4]
 801beb2:	f000 f900 	bl	801c0b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801beb6:	4b07      	ldr	r3, [pc, #28]	; (801bed4 <USBD_SetConfig+0x150>)
 801beb8:	781b      	ldrb	r3, [r3, #0]
 801beba:	4619      	mov	r1, r3
 801bebc:	6878      	ldr	r0, [r7, #4]
 801bebe:	f7fe ff92 	bl	801ade6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801bec2:	2303      	movs	r3, #3
 801bec4:	73fb      	strb	r3, [r7, #15]
      break;
 801bec6:	bf00      	nop
  }

  return ret;
 801bec8:	7bfb      	ldrb	r3, [r7, #15]
}
 801beca:	4618      	mov	r0, r3
 801becc:	3710      	adds	r7, #16
 801bece:	46bd      	mov	sp, r7
 801bed0:	bd80      	pop	{r7, pc}
 801bed2:	bf00      	nop
 801bed4:	24001b48 	.word	0x24001b48

0801bed8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b082      	sub	sp, #8
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
 801bee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801bee2:	683b      	ldr	r3, [r7, #0]
 801bee4:	88db      	ldrh	r3, [r3, #6]
 801bee6:	2b01      	cmp	r3, #1
 801bee8:	d004      	beq.n	801bef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801beea:	6839      	ldr	r1, [r7, #0]
 801beec:	6878      	ldr	r0, [r7, #4]
 801beee:	f000 f8e2 	bl	801c0b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801bef2:	e023      	b.n	801bf3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801befa:	b2db      	uxtb	r3, r3
 801befc:	2b02      	cmp	r3, #2
 801befe:	dc02      	bgt.n	801bf06 <USBD_GetConfig+0x2e>
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	dc03      	bgt.n	801bf0c <USBD_GetConfig+0x34>
 801bf04:	e015      	b.n	801bf32 <USBD_GetConfig+0x5a>
 801bf06:	2b03      	cmp	r3, #3
 801bf08:	d00b      	beq.n	801bf22 <USBD_GetConfig+0x4a>
 801bf0a:	e012      	b.n	801bf32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	3308      	adds	r3, #8
 801bf16:	2201      	movs	r2, #1
 801bf18:	4619      	mov	r1, r3
 801bf1a:	6878      	ldr	r0, [r7, #4]
 801bf1c:	f000 f93c 	bl	801c198 <USBD_CtlSendData>
        break;
 801bf20:	e00c      	b.n	801bf3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	3304      	adds	r3, #4
 801bf26:	2201      	movs	r2, #1
 801bf28:	4619      	mov	r1, r3
 801bf2a:	6878      	ldr	r0, [r7, #4]
 801bf2c:	f000 f934 	bl	801c198 <USBD_CtlSendData>
        break;
 801bf30:	e004      	b.n	801bf3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801bf32:	6839      	ldr	r1, [r7, #0]
 801bf34:	6878      	ldr	r0, [r7, #4]
 801bf36:	f000 f8be 	bl	801c0b6 <USBD_CtlError>
        break;
 801bf3a:	bf00      	nop
}
 801bf3c:	bf00      	nop
 801bf3e:	3708      	adds	r7, #8
 801bf40:	46bd      	mov	sp, r7
 801bf42:	bd80      	pop	{r7, pc}

0801bf44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	b082      	sub	sp, #8
 801bf48:	af00      	add	r7, sp, #0
 801bf4a:	6078      	str	r0, [r7, #4]
 801bf4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bf54:	b2db      	uxtb	r3, r3
 801bf56:	3b01      	subs	r3, #1
 801bf58:	2b02      	cmp	r3, #2
 801bf5a:	d81e      	bhi.n	801bf9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801bf5c:	683b      	ldr	r3, [r7, #0]
 801bf5e:	88db      	ldrh	r3, [r3, #6]
 801bf60:	2b02      	cmp	r3, #2
 801bf62:	d004      	beq.n	801bf6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801bf64:	6839      	ldr	r1, [r7, #0]
 801bf66:	6878      	ldr	r0, [r7, #4]
 801bf68:	f000 f8a5 	bl	801c0b6 <USBD_CtlError>
        break;
 801bf6c:	e01a      	b.n	801bfa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	2201      	movs	r2, #1
 801bf72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d005      	beq.n	801bf8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	68db      	ldr	r3, [r3, #12]
 801bf82:	f043 0202 	orr.w	r2, r3, #2
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	330c      	adds	r3, #12
 801bf8e:	2202      	movs	r2, #2
 801bf90:	4619      	mov	r1, r3
 801bf92:	6878      	ldr	r0, [r7, #4]
 801bf94:	f000 f900 	bl	801c198 <USBD_CtlSendData>
      break;
 801bf98:	e004      	b.n	801bfa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801bf9a:	6839      	ldr	r1, [r7, #0]
 801bf9c:	6878      	ldr	r0, [r7, #4]
 801bf9e:	f000 f88a 	bl	801c0b6 <USBD_CtlError>
      break;
 801bfa2:	bf00      	nop
  }
}
 801bfa4:	bf00      	nop
 801bfa6:	3708      	adds	r7, #8
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd80      	pop	{r7, pc}

0801bfac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b082      	sub	sp, #8
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
 801bfb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bfb6:	683b      	ldr	r3, [r7, #0]
 801bfb8:	885b      	ldrh	r3, [r3, #2]
 801bfba:	2b01      	cmp	r3, #1
 801bfbc:	d107      	bne.n	801bfce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	2201      	movs	r2, #1
 801bfc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801bfc6:	6878      	ldr	r0, [r7, #4]
 801bfc8:	f000 f940 	bl	801c24c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801bfcc:	e013      	b.n	801bff6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801bfce:	683b      	ldr	r3, [r7, #0]
 801bfd0:	885b      	ldrh	r3, [r3, #2]
 801bfd2:	2b02      	cmp	r3, #2
 801bfd4:	d10b      	bne.n	801bfee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	889b      	ldrh	r3, [r3, #4]
 801bfda:	0a1b      	lsrs	r3, r3, #8
 801bfdc:	b29b      	uxth	r3, r3
 801bfde:	b2da      	uxtb	r2, r3
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801bfe6:	6878      	ldr	r0, [r7, #4]
 801bfe8:	f000 f930 	bl	801c24c <USBD_CtlSendStatus>
}
 801bfec:	e003      	b.n	801bff6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801bfee:	6839      	ldr	r1, [r7, #0]
 801bff0:	6878      	ldr	r0, [r7, #4]
 801bff2:	f000 f860 	bl	801c0b6 <USBD_CtlError>
}
 801bff6:	bf00      	nop
 801bff8:	3708      	adds	r7, #8
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}

0801bffe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bffe:	b580      	push	{r7, lr}
 801c000:	b082      	sub	sp, #8
 801c002:	af00      	add	r7, sp, #0
 801c004:	6078      	str	r0, [r7, #4]
 801c006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c00e:	b2db      	uxtb	r3, r3
 801c010:	3b01      	subs	r3, #1
 801c012:	2b02      	cmp	r3, #2
 801c014:	d80b      	bhi.n	801c02e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	885b      	ldrh	r3, [r3, #2]
 801c01a:	2b01      	cmp	r3, #1
 801c01c:	d10c      	bne.n	801c038 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	2200      	movs	r2, #0
 801c022:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801c026:	6878      	ldr	r0, [r7, #4]
 801c028:	f000 f910 	bl	801c24c <USBD_CtlSendStatus>
      }
      break;
 801c02c:	e004      	b.n	801c038 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801c02e:	6839      	ldr	r1, [r7, #0]
 801c030:	6878      	ldr	r0, [r7, #4]
 801c032:	f000 f840 	bl	801c0b6 <USBD_CtlError>
      break;
 801c036:	e000      	b.n	801c03a <USBD_ClrFeature+0x3c>
      break;
 801c038:	bf00      	nop
  }
}
 801c03a:	bf00      	nop
 801c03c:	3708      	adds	r7, #8
 801c03e:	46bd      	mov	sp, r7
 801c040:	bd80      	pop	{r7, pc}

0801c042 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c042:	b580      	push	{r7, lr}
 801c044:	b084      	sub	sp, #16
 801c046:	af00      	add	r7, sp, #0
 801c048:	6078      	str	r0, [r7, #4]
 801c04a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801c04c:	683b      	ldr	r3, [r7, #0]
 801c04e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	781a      	ldrb	r2, [r3, #0]
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	3301      	adds	r3, #1
 801c05c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	781a      	ldrb	r2, [r3, #0]
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	3301      	adds	r3, #1
 801c06a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801c06c:	68f8      	ldr	r0, [r7, #12]
 801c06e:	f7ff fa41 	bl	801b4f4 <SWAPBYTE>
 801c072:	4603      	mov	r3, r0
 801c074:	461a      	mov	r2, r3
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	3301      	adds	r3, #1
 801c07e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	3301      	adds	r3, #1
 801c084:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801c086:	68f8      	ldr	r0, [r7, #12]
 801c088:	f7ff fa34 	bl	801b4f4 <SWAPBYTE>
 801c08c:	4603      	mov	r3, r0
 801c08e:	461a      	mov	r2, r3
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	3301      	adds	r3, #1
 801c098:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	3301      	adds	r3, #1
 801c09e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801c0a0:	68f8      	ldr	r0, [r7, #12]
 801c0a2:	f7ff fa27 	bl	801b4f4 <SWAPBYTE>
 801c0a6:	4603      	mov	r3, r0
 801c0a8:	461a      	mov	r2, r3
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	80da      	strh	r2, [r3, #6]
}
 801c0ae:	bf00      	nop
 801c0b0:	3710      	adds	r7, #16
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bd80      	pop	{r7, pc}

0801c0b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c0b6:	b580      	push	{r7, lr}
 801c0b8:	b082      	sub	sp, #8
 801c0ba:	af00      	add	r7, sp, #0
 801c0bc:	6078      	str	r0, [r7, #4]
 801c0be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801c0c0:	2180      	movs	r1, #128	; 0x80
 801c0c2:	6878      	ldr	r0, [r7, #4]
 801c0c4:	f000 fce6 	bl	801ca94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801c0c8:	2100      	movs	r1, #0
 801c0ca:	6878      	ldr	r0, [r7, #4]
 801c0cc:	f000 fce2 	bl	801ca94 <USBD_LL_StallEP>
}
 801c0d0:	bf00      	nop
 801c0d2:	3708      	adds	r7, #8
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}

0801c0d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c0d8:	b580      	push	{r7, lr}
 801c0da:	b086      	sub	sp, #24
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	60f8      	str	r0, [r7, #12]
 801c0e0:	60b9      	str	r1, [r7, #8]
 801c0e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c0e4:	2300      	movs	r3, #0
 801c0e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d036      	beq.n	801c15c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801c0f2:	6938      	ldr	r0, [r7, #16]
 801c0f4:	f000 f836 	bl	801c164 <USBD_GetLen>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	3301      	adds	r3, #1
 801c0fc:	b29b      	uxth	r3, r3
 801c0fe:	005b      	lsls	r3, r3, #1
 801c100:	b29a      	uxth	r2, r3
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801c106:	7dfb      	ldrb	r3, [r7, #23]
 801c108:	68ba      	ldr	r2, [r7, #8]
 801c10a:	4413      	add	r3, r2
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	7812      	ldrb	r2, [r2, #0]
 801c110:	701a      	strb	r2, [r3, #0]
  idx++;
 801c112:	7dfb      	ldrb	r3, [r7, #23]
 801c114:	3301      	adds	r3, #1
 801c116:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801c118:	7dfb      	ldrb	r3, [r7, #23]
 801c11a:	68ba      	ldr	r2, [r7, #8]
 801c11c:	4413      	add	r3, r2
 801c11e:	2203      	movs	r2, #3
 801c120:	701a      	strb	r2, [r3, #0]
  idx++;
 801c122:	7dfb      	ldrb	r3, [r7, #23]
 801c124:	3301      	adds	r3, #1
 801c126:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801c128:	e013      	b.n	801c152 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801c12a:	7dfb      	ldrb	r3, [r7, #23]
 801c12c:	68ba      	ldr	r2, [r7, #8]
 801c12e:	4413      	add	r3, r2
 801c130:	693a      	ldr	r2, [r7, #16]
 801c132:	7812      	ldrb	r2, [r2, #0]
 801c134:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801c136:	693b      	ldr	r3, [r7, #16]
 801c138:	3301      	adds	r3, #1
 801c13a:	613b      	str	r3, [r7, #16]
    idx++;
 801c13c:	7dfb      	ldrb	r3, [r7, #23]
 801c13e:	3301      	adds	r3, #1
 801c140:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801c142:	7dfb      	ldrb	r3, [r7, #23]
 801c144:	68ba      	ldr	r2, [r7, #8]
 801c146:	4413      	add	r3, r2
 801c148:	2200      	movs	r2, #0
 801c14a:	701a      	strb	r2, [r3, #0]
    idx++;
 801c14c:	7dfb      	ldrb	r3, [r7, #23]
 801c14e:	3301      	adds	r3, #1
 801c150:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801c152:	693b      	ldr	r3, [r7, #16]
 801c154:	781b      	ldrb	r3, [r3, #0]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d1e7      	bne.n	801c12a <USBD_GetString+0x52>
 801c15a:	e000      	b.n	801c15e <USBD_GetString+0x86>
    return;
 801c15c:	bf00      	nop
  }
}
 801c15e:	3718      	adds	r7, #24
 801c160:	46bd      	mov	sp, r7
 801c162:	bd80      	pop	{r7, pc}

0801c164 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c164:	b480      	push	{r7}
 801c166:	b085      	sub	sp, #20
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c16c:	2300      	movs	r3, #0
 801c16e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801c174:	e005      	b.n	801c182 <USBD_GetLen+0x1e>
  {
    len++;
 801c176:	7bfb      	ldrb	r3, [r7, #15]
 801c178:	3301      	adds	r3, #1
 801c17a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801c17c:	68bb      	ldr	r3, [r7, #8]
 801c17e:	3301      	adds	r3, #1
 801c180:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801c182:	68bb      	ldr	r3, [r7, #8]
 801c184:	781b      	ldrb	r3, [r3, #0]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d1f5      	bne.n	801c176 <USBD_GetLen+0x12>
  }

  return len;
 801c18a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c18c:	4618      	mov	r0, r3
 801c18e:	3714      	adds	r7, #20
 801c190:	46bd      	mov	sp, r7
 801c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c196:	4770      	bx	lr

0801c198 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b084      	sub	sp, #16
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	60f8      	str	r0, [r7, #12]
 801c1a0:	60b9      	str	r1, [r7, #8]
 801c1a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	2202      	movs	r2, #2
 801c1a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	687a      	ldr	r2, [r7, #4]
 801c1b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	687a      	ldr	r2, [r7, #4]
 801c1b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	68ba      	ldr	r2, [r7, #8]
 801c1bc:	2100      	movs	r1, #0
 801c1be:	68f8      	ldr	r0, [r7, #12]
 801c1c0:	f000 fcf1 	bl	801cba6 <USBD_LL_Transmit>

  return USBD_OK;
 801c1c4:	2300      	movs	r3, #0
}
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	3710      	adds	r7, #16
 801c1ca:	46bd      	mov	sp, r7
 801c1cc:	bd80      	pop	{r7, pc}

0801c1ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801c1ce:	b580      	push	{r7, lr}
 801c1d0:	b084      	sub	sp, #16
 801c1d2:	af00      	add	r7, sp, #0
 801c1d4:	60f8      	str	r0, [r7, #12]
 801c1d6:	60b9      	str	r1, [r7, #8]
 801c1d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	68ba      	ldr	r2, [r7, #8]
 801c1de:	2100      	movs	r1, #0
 801c1e0:	68f8      	ldr	r0, [r7, #12]
 801c1e2:	f000 fce0 	bl	801cba6 <USBD_LL_Transmit>

  return USBD_OK;
 801c1e6:	2300      	movs	r3, #0
}
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	3710      	adds	r7, #16
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	bd80      	pop	{r7, pc}

0801c1f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b084      	sub	sp, #16
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	60f8      	str	r0, [r7, #12]
 801c1f8:	60b9      	str	r1, [r7, #8]
 801c1fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	2203      	movs	r2, #3
 801c200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	687a      	ldr	r2, [r7, #4]
 801c208:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	687a      	ldr	r2, [r7, #4]
 801c210:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	68ba      	ldr	r2, [r7, #8]
 801c218:	2100      	movs	r1, #0
 801c21a:	68f8      	ldr	r0, [r7, #12]
 801c21c:	f000 fce4 	bl	801cbe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c220:	2300      	movs	r3, #0
}
 801c222:	4618      	mov	r0, r3
 801c224:	3710      	adds	r7, #16
 801c226:	46bd      	mov	sp, r7
 801c228:	bd80      	pop	{r7, pc}

0801c22a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801c22a:	b580      	push	{r7, lr}
 801c22c:	b084      	sub	sp, #16
 801c22e:	af00      	add	r7, sp, #0
 801c230:	60f8      	str	r0, [r7, #12]
 801c232:	60b9      	str	r1, [r7, #8]
 801c234:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	68ba      	ldr	r2, [r7, #8]
 801c23a:	2100      	movs	r1, #0
 801c23c:	68f8      	ldr	r0, [r7, #12]
 801c23e:	f000 fcd3 	bl	801cbe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c242:	2300      	movs	r3, #0
}
 801c244:	4618      	mov	r0, r3
 801c246:	3710      	adds	r7, #16
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}

0801c24c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b082      	sub	sp, #8
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	2204      	movs	r2, #4
 801c258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c25c:	2300      	movs	r3, #0
 801c25e:	2200      	movs	r2, #0
 801c260:	2100      	movs	r1, #0
 801c262:	6878      	ldr	r0, [r7, #4]
 801c264:	f000 fc9f 	bl	801cba6 <USBD_LL_Transmit>

  return USBD_OK;
 801c268:	2300      	movs	r3, #0
}
 801c26a:	4618      	mov	r0, r3
 801c26c:	3708      	adds	r7, #8
 801c26e:	46bd      	mov	sp, r7
 801c270:	bd80      	pop	{r7, pc}

0801c272 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c272:	b580      	push	{r7, lr}
 801c274:	b082      	sub	sp, #8
 801c276:	af00      	add	r7, sp, #0
 801c278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	2205      	movs	r2, #5
 801c27e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c282:	2300      	movs	r3, #0
 801c284:	2200      	movs	r2, #0
 801c286:	2100      	movs	r1, #0
 801c288:	6878      	ldr	r0, [r7, #4]
 801c28a:	f000 fcad 	bl	801cbe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c28e:	2300      	movs	r3, #0
}
 801c290:	4618      	mov	r0, r3
 801c292:	3708      	adds	r7, #8
 801c294:	46bd      	mov	sp, r7
 801c296:	bd80      	pop	{r7, pc}

0801c298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c29c:	2200      	movs	r2, #0
 801c29e:	4913      	ldr	r1, [pc, #76]	; (801c2ec <MX_USB_DEVICE_Init+0x54>)
 801c2a0:	4813      	ldr	r0, [pc, #76]	; (801c2f0 <MX_USB_DEVICE_Init+0x58>)
 801c2a2:	f7fe fd07 	bl	801acb4 <USBD_Init>
 801c2a6:	4603      	mov	r3, r0
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d001      	beq.n	801c2b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c2ac:	f7ee fdc4 	bl	800ae38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c2b0:	4910      	ldr	r1, [pc, #64]	; (801c2f4 <MX_USB_DEVICE_Init+0x5c>)
 801c2b2:	480f      	ldr	r0, [pc, #60]	; (801c2f0 <MX_USB_DEVICE_Init+0x58>)
 801c2b4:	f7fe fd2e 	bl	801ad14 <USBD_RegisterClass>
 801c2b8:	4603      	mov	r3, r0
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d001      	beq.n	801c2c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c2be:	f7ee fdbb 	bl	800ae38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c2c2:	490d      	ldr	r1, [pc, #52]	; (801c2f8 <MX_USB_DEVICE_Init+0x60>)
 801c2c4:	480a      	ldr	r0, [pc, #40]	; (801c2f0 <MX_USB_DEVICE_Init+0x58>)
 801c2c6:	f7fe fc65 	bl	801ab94 <USBD_CDC_RegisterInterface>
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d001      	beq.n	801c2d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c2d0:	f7ee fdb2 	bl	800ae38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c2d4:	4806      	ldr	r0, [pc, #24]	; (801c2f0 <MX_USB_DEVICE_Init+0x58>)
 801c2d6:	f7fe fd53 	bl	801ad80 <USBD_Start>
 801c2da:	4603      	mov	r3, r0
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d001      	beq.n	801c2e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c2e0:	f7ee fdaa 	bl	800ae38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801c2e4:	f7f5 fe36 	bl	8011f54 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c2e8:	bf00      	nop
 801c2ea:	bd80      	pop	{r7, pc}
 801c2ec:	240000b0 	.word	0x240000b0
 801c2f0:	24001b4c 	.word	0x24001b4c
 801c2f4:	2400001c 	.word	0x2400001c
 801c2f8:	2400009c 	.word	0x2400009c

0801c2fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c300:	2200      	movs	r2, #0
 801c302:	4905      	ldr	r1, [pc, #20]	; (801c318 <CDC_Init_FS+0x1c>)
 801c304:	4805      	ldr	r0, [pc, #20]	; (801c31c <CDC_Init_FS+0x20>)
 801c306:	f7fe fc5f 	bl	801abc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c30a:	4905      	ldr	r1, [pc, #20]	; (801c320 <CDC_Init_FS+0x24>)
 801c30c:	4803      	ldr	r0, [pc, #12]	; (801c31c <CDC_Init_FS+0x20>)
 801c30e:	f7fe fc7d 	bl	801ac0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c312:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c314:	4618      	mov	r0, r3
 801c316:	bd80      	pop	{r7, pc}
 801c318:	24002628 	.word	0x24002628
 801c31c:	24001b4c 	.word	0x24001b4c
 801c320:	24001e28 	.word	0x24001e28

0801c324 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c324:	b480      	push	{r7}
 801c326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c328:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c32a:	4618      	mov	r0, r3
 801c32c:	46bd      	mov	sp, r7
 801c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c332:	4770      	bx	lr

0801c334 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c334:	b480      	push	{r7}
 801c336:	b083      	sub	sp, #12
 801c338:	af00      	add	r7, sp, #0
 801c33a:	4603      	mov	r3, r0
 801c33c:	6039      	str	r1, [r7, #0]
 801c33e:	71fb      	strb	r3, [r7, #7]
 801c340:	4613      	mov	r3, r2
 801c342:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c344:	79fb      	ldrb	r3, [r7, #7]
 801c346:	2b23      	cmp	r3, #35	; 0x23
 801c348:	d84a      	bhi.n	801c3e0 <CDC_Control_FS+0xac>
 801c34a:	a201      	add	r2, pc, #4	; (adr r2, 801c350 <CDC_Control_FS+0x1c>)
 801c34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c350:	0801c3e1 	.word	0x0801c3e1
 801c354:	0801c3e1 	.word	0x0801c3e1
 801c358:	0801c3e1 	.word	0x0801c3e1
 801c35c:	0801c3e1 	.word	0x0801c3e1
 801c360:	0801c3e1 	.word	0x0801c3e1
 801c364:	0801c3e1 	.word	0x0801c3e1
 801c368:	0801c3e1 	.word	0x0801c3e1
 801c36c:	0801c3e1 	.word	0x0801c3e1
 801c370:	0801c3e1 	.word	0x0801c3e1
 801c374:	0801c3e1 	.word	0x0801c3e1
 801c378:	0801c3e1 	.word	0x0801c3e1
 801c37c:	0801c3e1 	.word	0x0801c3e1
 801c380:	0801c3e1 	.word	0x0801c3e1
 801c384:	0801c3e1 	.word	0x0801c3e1
 801c388:	0801c3e1 	.word	0x0801c3e1
 801c38c:	0801c3e1 	.word	0x0801c3e1
 801c390:	0801c3e1 	.word	0x0801c3e1
 801c394:	0801c3e1 	.word	0x0801c3e1
 801c398:	0801c3e1 	.word	0x0801c3e1
 801c39c:	0801c3e1 	.word	0x0801c3e1
 801c3a0:	0801c3e1 	.word	0x0801c3e1
 801c3a4:	0801c3e1 	.word	0x0801c3e1
 801c3a8:	0801c3e1 	.word	0x0801c3e1
 801c3ac:	0801c3e1 	.word	0x0801c3e1
 801c3b0:	0801c3e1 	.word	0x0801c3e1
 801c3b4:	0801c3e1 	.word	0x0801c3e1
 801c3b8:	0801c3e1 	.word	0x0801c3e1
 801c3bc:	0801c3e1 	.word	0x0801c3e1
 801c3c0:	0801c3e1 	.word	0x0801c3e1
 801c3c4:	0801c3e1 	.word	0x0801c3e1
 801c3c8:	0801c3e1 	.word	0x0801c3e1
 801c3cc:	0801c3e1 	.word	0x0801c3e1
 801c3d0:	0801c3e1 	.word	0x0801c3e1
 801c3d4:	0801c3e1 	.word	0x0801c3e1
 801c3d8:	0801c3e1 	.word	0x0801c3e1
 801c3dc:	0801c3e1 	.word	0x0801c3e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c3e0:	bf00      	nop
  }

  return (USBD_OK);
 801c3e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c3e4:	4618      	mov	r0, r3
 801c3e6:	370c      	adds	r7, #12
 801c3e8:	46bd      	mov	sp, r7
 801c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ee:	4770      	bx	lr

0801c3f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c3f0:	b580      	push	{r7, lr}
 801c3f2:	b082      	sub	sp, #8
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	6078      	str	r0, [r7, #4]
 801c3f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c3fa:	6879      	ldr	r1, [r7, #4]
 801c3fc:	4805      	ldr	r0, [pc, #20]	; (801c414 <CDC_Receive_FS+0x24>)
 801c3fe:	f7fe fc05 	bl	801ac0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c402:	4804      	ldr	r0, [pc, #16]	; (801c414 <CDC_Receive_FS+0x24>)
 801c404:	f7fe fc20 	bl	801ac48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c408:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c40a:	4618      	mov	r0, r3
 801c40c:	3708      	adds	r7, #8
 801c40e:	46bd      	mov	sp, r7
 801c410:	bd80      	pop	{r7, pc}
 801c412:	bf00      	nop
 801c414:	24001b4c 	.word	0x24001b4c

0801c418 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c418:	b480      	push	{r7}
 801c41a:	b087      	sub	sp, #28
 801c41c:	af00      	add	r7, sp, #0
 801c41e:	60f8      	str	r0, [r7, #12]
 801c420:	60b9      	str	r1, [r7, #8]
 801c422:	4613      	mov	r3, r2
 801c424:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c426:	2300      	movs	r3, #0
 801c428:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c42a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c42e:	4618      	mov	r0, r3
 801c430:	371c      	adds	r7, #28
 801c432:	46bd      	mov	sp, r7
 801c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c438:	4770      	bx	lr
	...

0801c43c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c43c:	b480      	push	{r7}
 801c43e:	b083      	sub	sp, #12
 801c440:	af00      	add	r7, sp, #0
 801c442:	4603      	mov	r3, r0
 801c444:	6039      	str	r1, [r7, #0]
 801c446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c448:	683b      	ldr	r3, [r7, #0]
 801c44a:	2212      	movs	r2, #18
 801c44c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c44e:	4b03      	ldr	r3, [pc, #12]	; (801c45c <USBD_FS_DeviceDescriptor+0x20>)
}
 801c450:	4618      	mov	r0, r3
 801c452:	370c      	adds	r7, #12
 801c454:	46bd      	mov	sp, r7
 801c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c45a:	4770      	bx	lr
 801c45c:	240000cc 	.word	0x240000cc

0801c460 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c460:	b480      	push	{r7}
 801c462:	b083      	sub	sp, #12
 801c464:	af00      	add	r7, sp, #0
 801c466:	4603      	mov	r3, r0
 801c468:	6039      	str	r1, [r7, #0]
 801c46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c46c:	683b      	ldr	r3, [r7, #0]
 801c46e:	2204      	movs	r2, #4
 801c470:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c472:	4b03      	ldr	r3, [pc, #12]	; (801c480 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c474:	4618      	mov	r0, r3
 801c476:	370c      	adds	r7, #12
 801c478:	46bd      	mov	sp, r7
 801c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c47e:	4770      	bx	lr
 801c480:	240000e0 	.word	0x240000e0

0801c484 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c484:	b580      	push	{r7, lr}
 801c486:	b082      	sub	sp, #8
 801c488:	af00      	add	r7, sp, #0
 801c48a:	4603      	mov	r3, r0
 801c48c:	6039      	str	r1, [r7, #0]
 801c48e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c490:	79fb      	ldrb	r3, [r7, #7]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d105      	bne.n	801c4a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c496:	683a      	ldr	r2, [r7, #0]
 801c498:	4907      	ldr	r1, [pc, #28]	; (801c4b8 <USBD_FS_ProductStrDescriptor+0x34>)
 801c49a:	4808      	ldr	r0, [pc, #32]	; (801c4bc <USBD_FS_ProductStrDescriptor+0x38>)
 801c49c:	f7ff fe1c 	bl	801c0d8 <USBD_GetString>
 801c4a0:	e004      	b.n	801c4ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c4a2:	683a      	ldr	r2, [r7, #0]
 801c4a4:	4904      	ldr	r1, [pc, #16]	; (801c4b8 <USBD_FS_ProductStrDescriptor+0x34>)
 801c4a6:	4805      	ldr	r0, [pc, #20]	; (801c4bc <USBD_FS_ProductStrDescriptor+0x38>)
 801c4a8:	f7ff fe16 	bl	801c0d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c4ac:	4b02      	ldr	r3, [pc, #8]	; (801c4b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801c4ae:	4618      	mov	r0, r3
 801c4b0:	3708      	adds	r7, #8
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bd80      	pop	{r7, pc}
 801c4b6:	bf00      	nop
 801c4b8:	24002e28 	.word	0x24002e28
 801c4bc:	0801e514 	.word	0x0801e514

0801c4c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b082      	sub	sp, #8
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	6039      	str	r1, [r7, #0]
 801c4ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c4cc:	683a      	ldr	r2, [r7, #0]
 801c4ce:	4904      	ldr	r1, [pc, #16]	; (801c4e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801c4d0:	4804      	ldr	r0, [pc, #16]	; (801c4e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c4d2:	f7ff fe01 	bl	801c0d8 <USBD_GetString>
  return USBD_StrDesc;
 801c4d6:	4b02      	ldr	r3, [pc, #8]	; (801c4e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801c4d8:	4618      	mov	r0, r3
 801c4da:	3708      	adds	r7, #8
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bd80      	pop	{r7, pc}
 801c4e0:	24002e28 	.word	0x24002e28
 801c4e4:	0801e52c 	.word	0x0801e52c

0801c4e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b082      	sub	sp, #8
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	6039      	str	r1, [r7, #0]
 801c4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c4f4:	683b      	ldr	r3, [r7, #0]
 801c4f6:	221a      	movs	r2, #26
 801c4f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c4fa:	f000 f843 	bl	801c584 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c4fe:	4b02      	ldr	r3, [pc, #8]	; (801c508 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801c500:	4618      	mov	r0, r3
 801c502:	3708      	adds	r7, #8
 801c504:	46bd      	mov	sp, r7
 801c506:	bd80      	pop	{r7, pc}
 801c508:	240000e4 	.word	0x240000e4

0801c50c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b082      	sub	sp, #8
 801c510:	af00      	add	r7, sp, #0
 801c512:	4603      	mov	r3, r0
 801c514:	6039      	str	r1, [r7, #0]
 801c516:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c518:	79fb      	ldrb	r3, [r7, #7]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d105      	bne.n	801c52a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c51e:	683a      	ldr	r2, [r7, #0]
 801c520:	4907      	ldr	r1, [pc, #28]	; (801c540 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c522:	4808      	ldr	r0, [pc, #32]	; (801c544 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c524:	f7ff fdd8 	bl	801c0d8 <USBD_GetString>
 801c528:	e004      	b.n	801c534 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c52a:	683a      	ldr	r2, [r7, #0]
 801c52c:	4904      	ldr	r1, [pc, #16]	; (801c540 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c52e:	4805      	ldr	r0, [pc, #20]	; (801c544 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c530:	f7ff fdd2 	bl	801c0d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c534:	4b02      	ldr	r3, [pc, #8]	; (801c540 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801c536:	4618      	mov	r0, r3
 801c538:	3708      	adds	r7, #8
 801c53a:	46bd      	mov	sp, r7
 801c53c:	bd80      	pop	{r7, pc}
 801c53e:	bf00      	nop
 801c540:	24002e28 	.word	0x24002e28
 801c544:	0801e540 	.word	0x0801e540

0801c548 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b082      	sub	sp, #8
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	4603      	mov	r3, r0
 801c550:	6039      	str	r1, [r7, #0]
 801c552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c554:	79fb      	ldrb	r3, [r7, #7]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d105      	bne.n	801c566 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c55a:	683a      	ldr	r2, [r7, #0]
 801c55c:	4907      	ldr	r1, [pc, #28]	; (801c57c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c55e:	4808      	ldr	r0, [pc, #32]	; (801c580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c560:	f7ff fdba 	bl	801c0d8 <USBD_GetString>
 801c564:	e004      	b.n	801c570 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c566:	683a      	ldr	r2, [r7, #0]
 801c568:	4904      	ldr	r1, [pc, #16]	; (801c57c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c56a:	4805      	ldr	r0, [pc, #20]	; (801c580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c56c:	f7ff fdb4 	bl	801c0d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c570:	4b02      	ldr	r3, [pc, #8]	; (801c57c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c572:	4618      	mov	r0, r3
 801c574:	3708      	adds	r7, #8
 801c576:	46bd      	mov	sp, r7
 801c578:	bd80      	pop	{r7, pc}
 801c57a:	bf00      	nop
 801c57c:	24002e28 	.word	0x24002e28
 801c580:	0801e54c 	.word	0x0801e54c

0801c584 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b084      	sub	sp, #16
 801c588:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c58a:	4b0f      	ldr	r3, [pc, #60]	; (801c5c8 <Get_SerialNum+0x44>)
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c590:	4b0e      	ldr	r3, [pc, #56]	; (801c5cc <Get_SerialNum+0x48>)
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c596:	4b0e      	ldr	r3, [pc, #56]	; (801c5d0 <Get_SerialNum+0x4c>)
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c59c:	68fa      	ldr	r2, [r7, #12]
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	4413      	add	r3, r2
 801c5a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d009      	beq.n	801c5be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c5aa:	2208      	movs	r2, #8
 801c5ac:	4909      	ldr	r1, [pc, #36]	; (801c5d4 <Get_SerialNum+0x50>)
 801c5ae:	68f8      	ldr	r0, [r7, #12]
 801c5b0:	f000 f814 	bl	801c5dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c5b4:	2204      	movs	r2, #4
 801c5b6:	4908      	ldr	r1, [pc, #32]	; (801c5d8 <Get_SerialNum+0x54>)
 801c5b8:	68b8      	ldr	r0, [r7, #8]
 801c5ba:	f000 f80f 	bl	801c5dc <IntToUnicode>
  }
}
 801c5be:	bf00      	nop
 801c5c0:	3710      	adds	r7, #16
 801c5c2:	46bd      	mov	sp, r7
 801c5c4:	bd80      	pop	{r7, pc}
 801c5c6:	bf00      	nop
 801c5c8:	1ff1e800 	.word	0x1ff1e800
 801c5cc:	1ff1e804 	.word	0x1ff1e804
 801c5d0:	1ff1e808 	.word	0x1ff1e808
 801c5d4:	240000e6 	.word	0x240000e6
 801c5d8:	240000f6 	.word	0x240000f6

0801c5dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c5dc:	b480      	push	{r7}
 801c5de:	b087      	sub	sp, #28
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	60f8      	str	r0, [r7, #12]
 801c5e4:	60b9      	str	r1, [r7, #8]
 801c5e6:	4613      	mov	r3, r2
 801c5e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	75fb      	strb	r3, [r7, #23]
 801c5f2:	e027      	b.n	801c644 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	0f1b      	lsrs	r3, r3, #28
 801c5f8:	2b09      	cmp	r3, #9
 801c5fa:	d80b      	bhi.n	801c614 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	0f1b      	lsrs	r3, r3, #28
 801c600:	b2da      	uxtb	r2, r3
 801c602:	7dfb      	ldrb	r3, [r7, #23]
 801c604:	005b      	lsls	r3, r3, #1
 801c606:	4619      	mov	r1, r3
 801c608:	68bb      	ldr	r3, [r7, #8]
 801c60a:	440b      	add	r3, r1
 801c60c:	3230      	adds	r2, #48	; 0x30
 801c60e:	b2d2      	uxtb	r2, r2
 801c610:	701a      	strb	r2, [r3, #0]
 801c612:	e00a      	b.n	801c62a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	0f1b      	lsrs	r3, r3, #28
 801c618:	b2da      	uxtb	r2, r3
 801c61a:	7dfb      	ldrb	r3, [r7, #23]
 801c61c:	005b      	lsls	r3, r3, #1
 801c61e:	4619      	mov	r1, r3
 801c620:	68bb      	ldr	r3, [r7, #8]
 801c622:	440b      	add	r3, r1
 801c624:	3237      	adds	r2, #55	; 0x37
 801c626:	b2d2      	uxtb	r2, r2
 801c628:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	011b      	lsls	r3, r3, #4
 801c62e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c630:	7dfb      	ldrb	r3, [r7, #23]
 801c632:	005b      	lsls	r3, r3, #1
 801c634:	3301      	adds	r3, #1
 801c636:	68ba      	ldr	r2, [r7, #8]
 801c638:	4413      	add	r3, r2
 801c63a:	2200      	movs	r2, #0
 801c63c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c63e:	7dfb      	ldrb	r3, [r7, #23]
 801c640:	3301      	adds	r3, #1
 801c642:	75fb      	strb	r3, [r7, #23]
 801c644:	7dfa      	ldrb	r2, [r7, #23]
 801c646:	79fb      	ldrb	r3, [r7, #7]
 801c648:	429a      	cmp	r2, r3
 801c64a:	d3d3      	bcc.n	801c5f4 <IntToUnicode+0x18>
  }
}
 801c64c:	bf00      	nop
 801c64e:	bf00      	nop
 801c650:	371c      	adds	r7, #28
 801c652:	46bd      	mov	sp, r7
 801c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c658:	4770      	bx	lr
	...

0801c65c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c65c:	b580      	push	{r7, lr}
 801c65e:	b0b8      	sub	sp, #224	; 0xe0
 801c660:	af00      	add	r7, sp, #0
 801c662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c664:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c668:	2200      	movs	r2, #0
 801c66a:	601a      	str	r2, [r3, #0]
 801c66c:	605a      	str	r2, [r3, #4]
 801c66e:	609a      	str	r2, [r3, #8]
 801c670:	60da      	str	r2, [r3, #12]
 801c672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c674:	f107 0310 	add.w	r3, r7, #16
 801c678:	22bc      	movs	r2, #188	; 0xbc
 801c67a:	2100      	movs	r1, #0
 801c67c:	4618      	mov	r0, r3
 801c67e:	f000 fbe9 	bl	801ce54 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	4a2f      	ldr	r2, [pc, #188]	; (801c744 <HAL_PCD_MspInit+0xe8>)
 801c688:	4293      	cmp	r3, r2
 801c68a:	d156      	bne.n	801c73a <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801c68c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c690:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801c692:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801c696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c69a:	f107 0310 	add.w	r3, r7, #16
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f7f6 fc22 	bl	8012ee8 <HAL_RCCEx_PeriphCLKConfig>
 801c6a4:	4603      	mov	r3, r0
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d001      	beq.n	801c6ae <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 801c6aa:	f7ee fbc5 	bl	800ae38 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801c6ae:	f7f5 fc51 	bl	8011f54 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c6b2:	4b25      	ldr	r3, [pc, #148]	; (801c748 <HAL_PCD_MspInit+0xec>)
 801c6b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c6b8:	4a23      	ldr	r2, [pc, #140]	; (801c748 <HAL_PCD_MspInit+0xec>)
 801c6ba:	f043 0301 	orr.w	r3, r3, #1
 801c6be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801c6c2:	4b21      	ldr	r3, [pc, #132]	; (801c748 <HAL_PCD_MspInit+0xec>)
 801c6c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c6c8:	f003 0301 	and.w	r3, r3, #1
 801c6cc:	60fb      	str	r3, [r7, #12]
 801c6ce:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801c6d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c6d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c6d8:	2302      	movs	r3, #2
 801c6da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6de:	2300      	movs	r3, #0
 801c6e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801c6ea:	230a      	movs	r3, #10
 801c6ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c6f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c6f4:	4619      	mov	r1, r3
 801c6f6:	4815      	ldr	r0, [pc, #84]	; (801c74c <HAL_PCD_MspInit+0xf0>)
 801c6f8:	f7f2 ffa6 	bl	800f648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c6fc:	4b12      	ldr	r3, [pc, #72]	; (801c748 <HAL_PCD_MspInit+0xec>)
 801c6fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c702:	4a11      	ldr	r2, [pc, #68]	; (801c748 <HAL_PCD_MspInit+0xec>)
 801c704:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c708:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801c70c:	4b0e      	ldr	r3, [pc, #56]	; (801c748 <HAL_PCD_MspInit+0xec>)
 801c70e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c716:	60bb      	str	r3, [r7, #8]
 801c718:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 801c71a:	2200      	movs	r2, #0
 801c71c:	2100      	movs	r1, #0
 801c71e:	2062      	movs	r0, #98	; 0x62
 801c720:	f7ef ff3f 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 801c724:	2062      	movs	r0, #98	; 0x62
 801c726:	f7ef ff56 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801c72a:	2200      	movs	r2, #0
 801c72c:	2100      	movs	r1, #0
 801c72e:	2065      	movs	r0, #101	; 0x65
 801c730:	f7ef ff37 	bl	800c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c734:	2065      	movs	r0, #101	; 0x65
 801c736:	f7ef ff4e 	bl	800c5d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c73a:	bf00      	nop
 801c73c:	37e0      	adds	r7, #224	; 0xe0
 801c73e:	46bd      	mov	sp, r7
 801c740:	bd80      	pop	{r7, pc}
 801c742:	bf00      	nop
 801c744:	40080000 	.word	0x40080000
 801c748:	58024400 	.word	0x58024400
 801c74c:	58020000 	.word	0x58020000

0801c750 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c750:	b580      	push	{r7, lr}
 801c752:	b082      	sub	sp, #8
 801c754:	af00      	add	r7, sp, #0
 801c756:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801c764:	4619      	mov	r1, r3
 801c766:	4610      	mov	r0, r2
 801c768:	f7fe fb57 	bl	801ae1a <USBD_LL_SetupStage>
}
 801c76c:	bf00      	nop
 801c76e:	3708      	adds	r7, #8
 801c770:	46bd      	mov	sp, r7
 801c772:	bd80      	pop	{r7, pc}

0801c774 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b082      	sub	sp, #8
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
 801c77c:	460b      	mov	r3, r1
 801c77e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c786:	78fa      	ldrb	r2, [r7, #3]
 801c788:	6879      	ldr	r1, [r7, #4]
 801c78a:	4613      	mov	r3, r2
 801c78c:	00db      	lsls	r3, r3, #3
 801c78e:	4413      	add	r3, r2
 801c790:	009b      	lsls	r3, r3, #2
 801c792:	440b      	add	r3, r1
 801c794:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801c798:	681a      	ldr	r2, [r3, #0]
 801c79a:	78fb      	ldrb	r3, [r7, #3]
 801c79c:	4619      	mov	r1, r3
 801c79e:	f7fe fb91 	bl	801aec4 <USBD_LL_DataOutStage>
}
 801c7a2:	bf00      	nop
 801c7a4:	3708      	adds	r7, #8
 801c7a6:	46bd      	mov	sp, r7
 801c7a8:	bd80      	pop	{r7, pc}

0801c7aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7aa:	b580      	push	{r7, lr}
 801c7ac:	b082      	sub	sp, #8
 801c7ae:	af00      	add	r7, sp, #0
 801c7b0:	6078      	str	r0, [r7, #4]
 801c7b2:	460b      	mov	r3, r1
 801c7b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c7bc:	78fa      	ldrb	r2, [r7, #3]
 801c7be:	6879      	ldr	r1, [r7, #4]
 801c7c0:	4613      	mov	r3, r2
 801c7c2:	00db      	lsls	r3, r3, #3
 801c7c4:	4413      	add	r3, r2
 801c7c6:	009b      	lsls	r3, r3, #2
 801c7c8:	440b      	add	r3, r1
 801c7ca:	334c      	adds	r3, #76	; 0x4c
 801c7cc:	681a      	ldr	r2, [r3, #0]
 801c7ce:	78fb      	ldrb	r3, [r7, #3]
 801c7d0:	4619      	mov	r1, r3
 801c7d2:	f7fe fc2a 	bl	801b02a <USBD_LL_DataInStage>
}
 801c7d6:	bf00      	nop
 801c7d8:	3708      	adds	r7, #8
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bd80      	pop	{r7, pc}

0801c7de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7de:	b580      	push	{r7, lr}
 801c7e0:	b082      	sub	sp, #8
 801c7e2:	af00      	add	r7, sp, #0
 801c7e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	f7fe fd5e 	bl	801b2ae <USBD_LL_SOF>
}
 801c7f2:	bf00      	nop
 801c7f4:	3708      	adds	r7, #8
 801c7f6:	46bd      	mov	sp, r7
 801c7f8:	bd80      	pop	{r7, pc}

0801c7fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7fa:	b580      	push	{r7, lr}
 801c7fc:	b084      	sub	sp, #16
 801c7fe:	af00      	add	r7, sp, #0
 801c800:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c802:	2301      	movs	r3, #1
 801c804:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	68db      	ldr	r3, [r3, #12]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d102      	bne.n	801c814 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801c80e:	2300      	movs	r3, #0
 801c810:	73fb      	strb	r3, [r7, #15]
 801c812:	e008      	b.n	801c826 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	68db      	ldr	r3, [r3, #12]
 801c818:	2b02      	cmp	r3, #2
 801c81a:	d102      	bne.n	801c822 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801c81c:	2301      	movs	r3, #1
 801c81e:	73fb      	strb	r3, [r7, #15]
 801c820:	e001      	b.n	801c826 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801c822:	f7ee fb09 	bl	800ae38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c82c:	7bfa      	ldrb	r2, [r7, #15]
 801c82e:	4611      	mov	r1, r2
 801c830:	4618      	mov	r0, r3
 801c832:	f7fe fcfe 	bl	801b232 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c83c:	4618      	mov	r0, r3
 801c83e:	f7fe fca6 	bl	801b18e <USBD_LL_Reset>
}
 801c842:	bf00      	nop
 801c844:	3710      	adds	r7, #16
 801c846:	46bd      	mov	sp, r7
 801c848:	bd80      	pop	{r7, pc}
	...

0801c84c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c84c:	b580      	push	{r7, lr}
 801c84e:	b082      	sub	sp, #8
 801c850:	af00      	add	r7, sp, #0
 801c852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c85a:	4618      	mov	r0, r3
 801c85c:	f7fe fcf9 	bl	801b252 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	687a      	ldr	r2, [r7, #4]
 801c86c:	6812      	ldr	r2, [r2, #0]
 801c86e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c872:	f043 0301 	orr.w	r3, r3, #1
 801c876:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	6a1b      	ldr	r3, [r3, #32]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d005      	beq.n	801c88c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c880:	4b04      	ldr	r3, [pc, #16]	; (801c894 <HAL_PCD_SuspendCallback+0x48>)
 801c882:	691b      	ldr	r3, [r3, #16]
 801c884:	4a03      	ldr	r2, [pc, #12]	; (801c894 <HAL_PCD_SuspendCallback+0x48>)
 801c886:	f043 0306 	orr.w	r3, r3, #6
 801c88a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801c88c:	bf00      	nop
 801c88e:	3708      	adds	r7, #8
 801c890:	46bd      	mov	sp, r7
 801c892:	bd80      	pop	{r7, pc}
 801c894:	e000ed00 	.word	0xe000ed00

0801c898 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c898:	b580      	push	{r7, lr}
 801c89a:	b082      	sub	sp, #8
 801c89c:	af00      	add	r7, sp, #0
 801c89e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f7fe fce9 	bl	801b27e <USBD_LL_Resume>
}
 801c8ac:	bf00      	nop
 801c8ae:	3708      	adds	r7, #8
 801c8b0:	46bd      	mov	sp, r7
 801c8b2:	bd80      	pop	{r7, pc}

0801c8b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8b4:	b580      	push	{r7, lr}
 801c8b6:	b082      	sub	sp, #8
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	6078      	str	r0, [r7, #4]
 801c8bc:	460b      	mov	r3, r1
 801c8be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c8c6:	78fa      	ldrb	r2, [r7, #3]
 801c8c8:	4611      	mov	r1, r2
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f7fe fd41 	bl	801b352 <USBD_LL_IsoOUTIncomplete>
}
 801c8d0:	bf00      	nop
 801c8d2:	3708      	adds	r7, #8
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b082      	sub	sp, #8
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
 801c8e0:	460b      	mov	r3, r1
 801c8e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c8ea:	78fa      	ldrb	r2, [r7, #3]
 801c8ec:	4611      	mov	r1, r2
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f7fe fcfd 	bl	801b2ee <USBD_LL_IsoINIncomplete>
}
 801c8f4:	bf00      	nop
 801c8f6:	3708      	adds	r7, #8
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	bd80      	pop	{r7, pc}

0801c8fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b082      	sub	sp, #8
 801c900:	af00      	add	r7, sp, #0
 801c902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c90a:	4618      	mov	r0, r3
 801c90c:	f7fe fd53 	bl	801b3b6 <USBD_LL_DevConnected>
}
 801c910:	bf00      	nop
 801c912:	3708      	adds	r7, #8
 801c914:	46bd      	mov	sp, r7
 801c916:	bd80      	pop	{r7, pc}

0801c918 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b082      	sub	sp, #8
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c926:	4618      	mov	r0, r3
 801c928:	f7fe fd50 	bl	801b3cc <USBD_LL_DevDisconnected>
}
 801c92c:	bf00      	nop
 801c92e:	3708      	adds	r7, #8
 801c930:	46bd      	mov	sp, r7
 801c932:	bd80      	pop	{r7, pc}

0801c934 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	b082      	sub	sp, #8
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	781b      	ldrb	r3, [r3, #0]
 801c940:	2b00      	cmp	r3, #0
 801c942:	d13e      	bne.n	801c9c2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801c944:	4a21      	ldr	r2, [pc, #132]	; (801c9cc <USBD_LL_Init+0x98>)
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	4a1f      	ldr	r2, [pc, #124]	; (801c9cc <USBD_LL_Init+0x98>)
 801c950:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c954:	4b1d      	ldr	r3, [pc, #116]	; (801c9cc <USBD_LL_Init+0x98>)
 801c956:	4a1e      	ldr	r2, [pc, #120]	; (801c9d0 <USBD_LL_Init+0x9c>)
 801c958:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801c95a:	4b1c      	ldr	r3, [pc, #112]	; (801c9cc <USBD_LL_Init+0x98>)
 801c95c:	2209      	movs	r2, #9
 801c95e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801c960:	4b1a      	ldr	r3, [pc, #104]	; (801c9cc <USBD_LL_Init+0x98>)
 801c962:	2202      	movs	r2, #2
 801c964:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c966:	4b19      	ldr	r3, [pc, #100]	; (801c9cc <USBD_LL_Init+0x98>)
 801c968:	2200      	movs	r2, #0
 801c96a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c96c:	4b17      	ldr	r3, [pc, #92]	; (801c9cc <USBD_LL_Init+0x98>)
 801c96e:	2202      	movs	r2, #2
 801c970:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c972:	4b16      	ldr	r3, [pc, #88]	; (801c9cc <USBD_LL_Init+0x98>)
 801c974:	2200      	movs	r2, #0
 801c976:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801c978:	4b14      	ldr	r3, [pc, #80]	; (801c9cc <USBD_LL_Init+0x98>)
 801c97a:	2200      	movs	r2, #0
 801c97c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801c97e:	4b13      	ldr	r3, [pc, #76]	; (801c9cc <USBD_LL_Init+0x98>)
 801c980:	2200      	movs	r2, #0
 801c982:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801c984:	4b11      	ldr	r3, [pc, #68]	; (801c9cc <USBD_LL_Init+0x98>)
 801c986:	2200      	movs	r2, #0
 801c988:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801c98a:	4b10      	ldr	r3, [pc, #64]	; (801c9cc <USBD_LL_Init+0x98>)
 801c98c:	2200      	movs	r2, #0
 801c98e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801c990:	4b0e      	ldr	r3, [pc, #56]	; (801c9cc <USBD_LL_Init+0x98>)
 801c992:	2200      	movs	r2, #0
 801c994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801c996:	480d      	ldr	r0, [pc, #52]	; (801c9cc <USBD_LL_Init+0x98>)
 801c998:	f7f3 ffcc 	bl	8010934 <HAL_PCD_Init>
 801c99c:	4603      	mov	r3, r0
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d001      	beq.n	801c9a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801c9a2:	f7ee fa49 	bl	800ae38 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801c9a6:	2180      	movs	r1, #128	; 0x80
 801c9a8:	4808      	ldr	r0, [pc, #32]	; (801c9cc <USBD_LL_Init+0x98>)
 801c9aa:	f7f5 fa58 	bl	8011e5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801c9ae:	2240      	movs	r2, #64	; 0x40
 801c9b0:	2100      	movs	r1, #0
 801c9b2:	4806      	ldr	r0, [pc, #24]	; (801c9cc <USBD_LL_Init+0x98>)
 801c9b4:	f7f5 fa0c 	bl	8011dd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801c9b8:	2280      	movs	r2, #128	; 0x80
 801c9ba:	2101      	movs	r1, #1
 801c9bc:	4803      	ldr	r0, [pc, #12]	; (801c9cc <USBD_LL_Init+0x98>)
 801c9be:	f7f5 fa07 	bl	8011dd0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801c9c2:	2300      	movs	r3, #0
}
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	3708      	adds	r7, #8
 801c9c8:	46bd      	mov	sp, r7
 801c9ca:	bd80      	pop	{r7, pc}
 801c9cc:	24003028 	.word	0x24003028
 801c9d0:	40080000 	.word	0x40080000

0801c9d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b084      	sub	sp, #16
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9dc:	2300      	movs	r3, #0
 801c9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f7f4 f8c6 	bl	8010b7c <HAL_PCD_Start>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c9f4:	7bfb      	ldrb	r3, [r7, #15]
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f000 f942 	bl	801cc80 <USBD_Get_USB_Status>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca00:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca02:	4618      	mov	r0, r3
 801ca04:	3710      	adds	r7, #16
 801ca06:	46bd      	mov	sp, r7
 801ca08:	bd80      	pop	{r7, pc}

0801ca0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ca0a:	b580      	push	{r7, lr}
 801ca0c:	b084      	sub	sp, #16
 801ca0e:	af00      	add	r7, sp, #0
 801ca10:	6078      	str	r0, [r7, #4]
 801ca12:	4608      	mov	r0, r1
 801ca14:	4611      	mov	r1, r2
 801ca16:	461a      	mov	r2, r3
 801ca18:	4603      	mov	r3, r0
 801ca1a:	70fb      	strb	r3, [r7, #3]
 801ca1c:	460b      	mov	r3, r1
 801ca1e:	70bb      	strb	r3, [r7, #2]
 801ca20:	4613      	mov	r3, r2
 801ca22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca24:	2300      	movs	r3, #0
 801ca26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca28:	2300      	movs	r3, #0
 801ca2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ca32:	78bb      	ldrb	r3, [r7, #2]
 801ca34:	883a      	ldrh	r2, [r7, #0]
 801ca36:	78f9      	ldrb	r1, [r7, #3]
 801ca38:	f7f4 fdc4 	bl	80115c4 <HAL_PCD_EP_Open>
 801ca3c:	4603      	mov	r3, r0
 801ca3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca40:	7bfb      	ldrb	r3, [r7, #15]
 801ca42:	4618      	mov	r0, r3
 801ca44:	f000 f91c 	bl	801cc80 <USBD_Get_USB_Status>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca4c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca4e:	4618      	mov	r0, r3
 801ca50:	3710      	adds	r7, #16
 801ca52:	46bd      	mov	sp, r7
 801ca54:	bd80      	pop	{r7, pc}

0801ca56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca56:	b580      	push	{r7, lr}
 801ca58:	b084      	sub	sp, #16
 801ca5a:	af00      	add	r7, sp, #0
 801ca5c:	6078      	str	r0, [r7, #4]
 801ca5e:	460b      	mov	r3, r1
 801ca60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca62:	2300      	movs	r3, #0
 801ca64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca66:	2300      	movs	r3, #0
 801ca68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ca70:	78fa      	ldrb	r2, [r7, #3]
 801ca72:	4611      	mov	r1, r2
 801ca74:	4618      	mov	r0, r3
 801ca76:	f7f4 fe0d 	bl	8011694 <HAL_PCD_EP_Close>
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca7e:	7bfb      	ldrb	r3, [r7, #15]
 801ca80:	4618      	mov	r0, r3
 801ca82:	f000 f8fd 	bl	801cc80 <USBD_Get_USB_Status>
 801ca86:	4603      	mov	r3, r0
 801ca88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca8a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	3710      	adds	r7, #16
 801ca90:	46bd      	mov	sp, r7
 801ca92:	bd80      	pop	{r7, pc}

0801ca94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b084      	sub	sp, #16
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	6078      	str	r0, [r7, #4]
 801ca9c:	460b      	mov	r3, r1
 801ca9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801caa0:	2300      	movs	r3, #0
 801caa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801caa4:	2300      	movs	r3, #0
 801caa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801caae:	78fa      	ldrb	r2, [r7, #3]
 801cab0:	4611      	mov	r1, r2
 801cab2:	4618      	mov	r0, r3
 801cab4:	f7f4 fee5 	bl	8011882 <HAL_PCD_EP_SetStall>
 801cab8:	4603      	mov	r3, r0
 801caba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cabc:	7bfb      	ldrb	r3, [r7, #15]
 801cabe:	4618      	mov	r0, r3
 801cac0:	f000 f8de 	bl	801cc80 <USBD_Get_USB_Status>
 801cac4:	4603      	mov	r3, r0
 801cac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cac8:	7bbb      	ldrb	r3, [r7, #14]
}
 801caca:	4618      	mov	r0, r3
 801cacc:	3710      	adds	r7, #16
 801cace:	46bd      	mov	sp, r7
 801cad0:	bd80      	pop	{r7, pc}

0801cad2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cad2:	b580      	push	{r7, lr}
 801cad4:	b084      	sub	sp, #16
 801cad6:	af00      	add	r7, sp, #0
 801cad8:	6078      	str	r0, [r7, #4]
 801cada:	460b      	mov	r3, r1
 801cadc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cade:	2300      	movs	r3, #0
 801cae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cae2:	2300      	movs	r3, #0
 801cae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801caec:	78fa      	ldrb	r2, [r7, #3]
 801caee:	4611      	mov	r1, r2
 801caf0:	4618      	mov	r0, r3
 801caf2:	f7f4 ff2a 	bl	801194a <HAL_PCD_EP_ClrStall>
 801caf6:	4603      	mov	r3, r0
 801caf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cafa:	7bfb      	ldrb	r3, [r7, #15]
 801cafc:	4618      	mov	r0, r3
 801cafe:	f000 f8bf 	bl	801cc80 <USBD_Get_USB_Status>
 801cb02:	4603      	mov	r3, r0
 801cb04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cb06:	7bbb      	ldrb	r3, [r7, #14]
}
 801cb08:	4618      	mov	r0, r3
 801cb0a:	3710      	adds	r7, #16
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	bd80      	pop	{r7, pc}

0801cb10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cb10:	b480      	push	{r7}
 801cb12:	b085      	sub	sp, #20
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	6078      	str	r0, [r7, #4]
 801cb18:	460b      	mov	r3, r1
 801cb1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cb22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801cb24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	da0b      	bge.n	801cb44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cb2c:	78fb      	ldrb	r3, [r7, #3]
 801cb2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cb32:	68f9      	ldr	r1, [r7, #12]
 801cb34:	4613      	mov	r3, r2
 801cb36:	00db      	lsls	r3, r3, #3
 801cb38:	4413      	add	r3, r2
 801cb3a:	009b      	lsls	r3, r3, #2
 801cb3c:	440b      	add	r3, r1
 801cb3e:	333e      	adds	r3, #62	; 0x3e
 801cb40:	781b      	ldrb	r3, [r3, #0]
 801cb42:	e00b      	b.n	801cb5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cb44:	78fb      	ldrb	r3, [r7, #3]
 801cb46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cb4a:	68f9      	ldr	r1, [r7, #12]
 801cb4c:	4613      	mov	r3, r2
 801cb4e:	00db      	lsls	r3, r3, #3
 801cb50:	4413      	add	r3, r2
 801cb52:	009b      	lsls	r3, r3, #2
 801cb54:	440b      	add	r3, r1
 801cb56:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801cb5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	3714      	adds	r7, #20
 801cb60:	46bd      	mov	sp, r7
 801cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb66:	4770      	bx	lr

0801cb68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b084      	sub	sp, #16
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
 801cb70:	460b      	mov	r3, r1
 801cb72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb74:	2300      	movs	r3, #0
 801cb76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb78:	2300      	movs	r3, #0
 801cb7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cb82:	78fa      	ldrb	r2, [r7, #3]
 801cb84:	4611      	mov	r1, r2
 801cb86:	4618      	mov	r0, r3
 801cb88:	f7f4 fcf7 	bl	801157a <HAL_PCD_SetAddress>
 801cb8c:	4603      	mov	r3, r0
 801cb8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb90:	7bfb      	ldrb	r3, [r7, #15]
 801cb92:	4618      	mov	r0, r3
 801cb94:	f000 f874 	bl	801cc80 <USBD_Get_USB_Status>
 801cb98:	4603      	mov	r3, r0
 801cb9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cb9c:	7bbb      	ldrb	r3, [r7, #14]
}
 801cb9e:	4618      	mov	r0, r3
 801cba0:	3710      	adds	r7, #16
 801cba2:	46bd      	mov	sp, r7
 801cba4:	bd80      	pop	{r7, pc}

0801cba6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cba6:	b580      	push	{r7, lr}
 801cba8:	b086      	sub	sp, #24
 801cbaa:	af00      	add	r7, sp, #0
 801cbac:	60f8      	str	r0, [r7, #12]
 801cbae:	607a      	str	r2, [r7, #4]
 801cbb0:	603b      	str	r3, [r7, #0]
 801cbb2:	460b      	mov	r3, r1
 801cbb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cbb6:	2300      	movs	r3, #0
 801cbb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cbba:	2300      	movs	r3, #0
 801cbbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cbc4:	7af9      	ldrb	r1, [r7, #11]
 801cbc6:	683b      	ldr	r3, [r7, #0]
 801cbc8:	687a      	ldr	r2, [r7, #4]
 801cbca:	f7f4 fe10 	bl	80117ee <HAL_PCD_EP_Transmit>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cbd2:	7dfb      	ldrb	r3, [r7, #23]
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	f000 f853 	bl	801cc80 <USBD_Get_USB_Status>
 801cbda:	4603      	mov	r3, r0
 801cbdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cbde:	7dbb      	ldrb	r3, [r7, #22]
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3718      	adds	r7, #24
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}

0801cbe8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b086      	sub	sp, #24
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	60f8      	str	r0, [r7, #12]
 801cbf0:	607a      	str	r2, [r7, #4]
 801cbf2:	603b      	str	r3, [r7, #0]
 801cbf4:	460b      	mov	r3, r1
 801cbf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cc06:	7af9      	ldrb	r1, [r7, #11]
 801cc08:	683b      	ldr	r3, [r7, #0]
 801cc0a:	687a      	ldr	r2, [r7, #4]
 801cc0c:	f7f4 fd8c 	bl	8011728 <HAL_PCD_EP_Receive>
 801cc10:	4603      	mov	r3, r0
 801cc12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cc14:	7dfb      	ldrb	r3, [r7, #23]
 801cc16:	4618      	mov	r0, r3
 801cc18:	f000 f832 	bl	801cc80 <USBD_Get_USB_Status>
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cc20:	7dbb      	ldrb	r3, [r7, #22]
}
 801cc22:	4618      	mov	r0, r3
 801cc24:	3718      	adds	r7, #24
 801cc26:	46bd      	mov	sp, r7
 801cc28:	bd80      	pop	{r7, pc}

0801cc2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cc2a:	b580      	push	{r7, lr}
 801cc2c:	b082      	sub	sp, #8
 801cc2e:	af00      	add	r7, sp, #0
 801cc30:	6078      	str	r0, [r7, #4]
 801cc32:	460b      	mov	r3, r1
 801cc34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cc3c:	78fa      	ldrb	r2, [r7, #3]
 801cc3e:	4611      	mov	r1, r2
 801cc40:	4618      	mov	r0, r3
 801cc42:	f7f4 fdbc 	bl	80117be <HAL_PCD_EP_GetRxCount>
 801cc46:	4603      	mov	r3, r0
}
 801cc48:	4618      	mov	r0, r3
 801cc4a:	3708      	adds	r7, #8
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bd80      	pop	{r7, pc}

0801cc50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cc50:	b480      	push	{r7}
 801cc52:	b083      	sub	sp, #12
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cc58:	4b03      	ldr	r3, [pc, #12]	; (801cc68 <USBD_static_malloc+0x18>)
}
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	370c      	adds	r7, #12
 801cc5e:	46bd      	mov	sp, r7
 801cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc64:	4770      	bx	lr
 801cc66:	bf00      	nop
 801cc68:	24003534 	.word	0x24003534

0801cc6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cc6c:	b480      	push	{r7}
 801cc6e:	b083      	sub	sp, #12
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]

}
 801cc74:	bf00      	nop
 801cc76:	370c      	adds	r7, #12
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc7e:	4770      	bx	lr

0801cc80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cc80:	b480      	push	{r7}
 801cc82:	b085      	sub	sp, #20
 801cc84:	af00      	add	r7, sp, #0
 801cc86:	4603      	mov	r3, r0
 801cc88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801cc8e:	79fb      	ldrb	r3, [r7, #7]
 801cc90:	2b03      	cmp	r3, #3
 801cc92:	d817      	bhi.n	801ccc4 <USBD_Get_USB_Status+0x44>
 801cc94:	a201      	add	r2, pc, #4	; (adr r2, 801cc9c <USBD_Get_USB_Status+0x1c>)
 801cc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc9a:	bf00      	nop
 801cc9c:	0801ccad 	.word	0x0801ccad
 801cca0:	0801ccb3 	.word	0x0801ccb3
 801cca4:	0801ccb9 	.word	0x0801ccb9
 801cca8:	0801ccbf 	.word	0x0801ccbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ccac:	2300      	movs	r3, #0
 801ccae:	73fb      	strb	r3, [r7, #15]
    break;
 801ccb0:	e00b      	b.n	801ccca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ccb2:	2303      	movs	r3, #3
 801ccb4:	73fb      	strb	r3, [r7, #15]
    break;
 801ccb6:	e008      	b.n	801ccca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ccb8:	2301      	movs	r3, #1
 801ccba:	73fb      	strb	r3, [r7, #15]
    break;
 801ccbc:	e005      	b.n	801ccca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ccbe:	2303      	movs	r3, #3
 801ccc0:	73fb      	strb	r3, [r7, #15]
    break;
 801ccc2:	e002      	b.n	801ccca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ccc4:	2303      	movs	r3, #3
 801ccc6:	73fb      	strb	r3, [r7, #15]
    break;
 801ccc8:	bf00      	nop
  }
  return usb_status;
 801ccca:	7bfb      	ldrb	r3, [r7, #15]
}
 801cccc:	4618      	mov	r0, r3
 801ccce:	3714      	adds	r7, #20
 801ccd0:	46bd      	mov	sp, r7
 801ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccd6:	4770      	bx	lr

0801ccd8 <_ZdlPvj>:
 801ccd8:	f000 b817 	b.w	801cd0a <_ZdlPv>

0801ccdc <_Znwj>:
 801ccdc:	2801      	cmp	r0, #1
 801ccde:	bf38      	it	cc
 801cce0:	2001      	movcc	r0, #1
 801cce2:	b510      	push	{r4, lr}
 801cce4:	4604      	mov	r4, r0
 801cce6:	4620      	mov	r0, r4
 801cce8:	f000 f87c 	bl	801cde4 <malloc>
 801ccec:	b930      	cbnz	r0, 801ccfc <_Znwj+0x20>
 801ccee:	f000 f80f 	bl	801cd10 <_ZSt15get_new_handlerv>
 801ccf2:	b908      	cbnz	r0, 801ccf8 <_Znwj+0x1c>
 801ccf4:	f000 f814 	bl	801cd20 <abort>
 801ccf8:	4780      	blx	r0
 801ccfa:	e7f4      	b.n	801cce6 <_Znwj+0xa>
 801ccfc:	bd10      	pop	{r4, pc}

0801ccfe <_ZSt17__throw_bad_allocv>:
 801ccfe:	b508      	push	{r3, lr}
 801cd00:	f000 f80e 	bl	801cd20 <abort>

0801cd04 <_ZSt20__throw_length_errorPKc>:
 801cd04:	b508      	push	{r3, lr}
 801cd06:	f000 f80b 	bl	801cd20 <abort>

0801cd0a <_ZdlPv>:
 801cd0a:	f000 b873 	b.w	801cdf4 <free>
	...

0801cd10 <_ZSt15get_new_handlerv>:
 801cd10:	4b02      	ldr	r3, [pc, #8]	; (801cd1c <_ZSt15get_new_handlerv+0xc>)
 801cd12:	6818      	ldr	r0, [r3, #0]
 801cd14:	f3bf 8f5b 	dmb	ish
 801cd18:	4770      	bx	lr
 801cd1a:	bf00      	nop
 801cd1c:	24003754 	.word	0x24003754

0801cd20 <abort>:
 801cd20:	b508      	push	{r3, lr}
 801cd22:	2006      	movs	r0, #6
 801cd24:	f000 fca4 	bl	801d670 <raise>
 801cd28:	2001      	movs	r0, #1
 801cd2a:	f7ee fac3 	bl	800b2b4 <_exit>
	...

0801cd30 <__assert_func>:
 801cd30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd32:	4614      	mov	r4, r2
 801cd34:	461a      	mov	r2, r3
 801cd36:	4b09      	ldr	r3, [pc, #36]	; (801cd5c <__assert_func+0x2c>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	4605      	mov	r5, r0
 801cd3c:	68d8      	ldr	r0, [r3, #12]
 801cd3e:	b14c      	cbz	r4, 801cd54 <__assert_func+0x24>
 801cd40:	4b07      	ldr	r3, [pc, #28]	; (801cd60 <__assert_func+0x30>)
 801cd42:	9100      	str	r1, [sp, #0]
 801cd44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cd48:	4906      	ldr	r1, [pc, #24]	; (801cd64 <__assert_func+0x34>)
 801cd4a:	462b      	mov	r3, r5
 801cd4c:	f000 f814 	bl	801cd78 <fiprintf>
 801cd50:	f7ff ffe6 	bl	801cd20 <abort>
 801cd54:	4b04      	ldr	r3, [pc, #16]	; (801cd68 <__assert_func+0x38>)
 801cd56:	461c      	mov	r4, r3
 801cd58:	e7f3      	b.n	801cd42 <__assert_func+0x12>
 801cd5a:	bf00      	nop
 801cd5c:	24000100 	.word	0x24000100
 801cd60:	08038c14 	.word	0x08038c14
 801cd64:	08038c21 	.word	0x08038c21
 801cd68:	08038c4f 	.word	0x08038c4f

0801cd6c <__errno>:
 801cd6c:	4b01      	ldr	r3, [pc, #4]	; (801cd74 <__errno+0x8>)
 801cd6e:	6818      	ldr	r0, [r3, #0]
 801cd70:	4770      	bx	lr
 801cd72:	bf00      	nop
 801cd74:	24000100 	.word	0x24000100

0801cd78 <fiprintf>:
 801cd78:	b40e      	push	{r1, r2, r3}
 801cd7a:	b503      	push	{r0, r1, lr}
 801cd7c:	4601      	mov	r1, r0
 801cd7e:	ab03      	add	r3, sp, #12
 801cd80:	4805      	ldr	r0, [pc, #20]	; (801cd98 <fiprintf+0x20>)
 801cd82:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd86:	6800      	ldr	r0, [r0, #0]
 801cd88:	9301      	str	r3, [sp, #4]
 801cd8a:	f000 f975 	bl	801d078 <_vfiprintf_r>
 801cd8e:	b002      	add	sp, #8
 801cd90:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd94:	b003      	add	sp, #12
 801cd96:	4770      	bx	lr
 801cd98:	24000100 	.word	0x24000100

0801cd9c <__libc_init_array>:
 801cd9c:	b570      	push	{r4, r5, r6, lr}
 801cd9e:	4d0d      	ldr	r5, [pc, #52]	; (801cdd4 <__libc_init_array+0x38>)
 801cda0:	4c0d      	ldr	r4, [pc, #52]	; (801cdd8 <__libc_init_array+0x3c>)
 801cda2:	1b64      	subs	r4, r4, r5
 801cda4:	10a4      	asrs	r4, r4, #2
 801cda6:	2600      	movs	r6, #0
 801cda8:	42a6      	cmp	r6, r4
 801cdaa:	d109      	bne.n	801cdc0 <__libc_init_array+0x24>
 801cdac:	4d0b      	ldr	r5, [pc, #44]	; (801cddc <__libc_init_array+0x40>)
 801cdae:	4c0c      	ldr	r4, [pc, #48]	; (801cde0 <__libc_init_array+0x44>)
 801cdb0:	f001 f812 	bl	801ddd8 <_init>
 801cdb4:	1b64      	subs	r4, r4, r5
 801cdb6:	10a4      	asrs	r4, r4, #2
 801cdb8:	2600      	movs	r6, #0
 801cdba:	42a6      	cmp	r6, r4
 801cdbc:	d105      	bne.n	801cdca <__libc_init_array+0x2e>
 801cdbe:	bd70      	pop	{r4, r5, r6, pc}
 801cdc0:	f855 3b04 	ldr.w	r3, [r5], #4
 801cdc4:	4798      	blx	r3
 801cdc6:	3601      	adds	r6, #1
 801cdc8:	e7ee      	b.n	801cda8 <__libc_init_array+0xc>
 801cdca:	f855 3b04 	ldr.w	r3, [r5], #4
 801cdce:	4798      	blx	r3
 801cdd0:	3601      	adds	r6, #1
 801cdd2:	e7f2      	b.n	801cdba <__libc_init_array+0x1e>
 801cdd4:	08038cf0 	.word	0x08038cf0
 801cdd8:	08038cf0 	.word	0x08038cf0
 801cddc:	08038cf0 	.word	0x08038cf0
 801cde0:	08038cf8 	.word	0x08038cf8

0801cde4 <malloc>:
 801cde4:	4b02      	ldr	r3, [pc, #8]	; (801cdf0 <malloc+0xc>)
 801cde6:	4601      	mov	r1, r0
 801cde8:	6818      	ldr	r0, [r3, #0]
 801cdea:	f000 b8a7 	b.w	801cf3c <_malloc_r>
 801cdee:	bf00      	nop
 801cdf0:	24000100 	.word	0x24000100

0801cdf4 <free>:
 801cdf4:	4b02      	ldr	r3, [pc, #8]	; (801ce00 <free+0xc>)
 801cdf6:	4601      	mov	r1, r0
 801cdf8:	6818      	ldr	r0, [r3, #0]
 801cdfa:	f000 b833 	b.w	801ce64 <_free_r>
 801cdfe:	bf00      	nop
 801ce00:	24000100 	.word	0x24000100

0801ce04 <memcpy>:
 801ce04:	440a      	add	r2, r1
 801ce06:	4291      	cmp	r1, r2
 801ce08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ce0c:	d100      	bne.n	801ce10 <memcpy+0xc>
 801ce0e:	4770      	bx	lr
 801ce10:	b510      	push	{r4, lr}
 801ce12:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce16:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ce1a:	4291      	cmp	r1, r2
 801ce1c:	d1f9      	bne.n	801ce12 <memcpy+0xe>
 801ce1e:	bd10      	pop	{r4, pc}

0801ce20 <memmove>:
 801ce20:	4288      	cmp	r0, r1
 801ce22:	b510      	push	{r4, lr}
 801ce24:	eb01 0402 	add.w	r4, r1, r2
 801ce28:	d902      	bls.n	801ce30 <memmove+0x10>
 801ce2a:	4284      	cmp	r4, r0
 801ce2c:	4623      	mov	r3, r4
 801ce2e:	d807      	bhi.n	801ce40 <memmove+0x20>
 801ce30:	1e43      	subs	r3, r0, #1
 801ce32:	42a1      	cmp	r1, r4
 801ce34:	d008      	beq.n	801ce48 <memmove+0x28>
 801ce36:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ce3e:	e7f8      	b.n	801ce32 <memmove+0x12>
 801ce40:	4402      	add	r2, r0
 801ce42:	4601      	mov	r1, r0
 801ce44:	428a      	cmp	r2, r1
 801ce46:	d100      	bne.n	801ce4a <memmove+0x2a>
 801ce48:	bd10      	pop	{r4, pc}
 801ce4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ce52:	e7f7      	b.n	801ce44 <memmove+0x24>

0801ce54 <memset>:
 801ce54:	4402      	add	r2, r0
 801ce56:	4603      	mov	r3, r0
 801ce58:	4293      	cmp	r3, r2
 801ce5a:	d100      	bne.n	801ce5e <memset+0xa>
 801ce5c:	4770      	bx	lr
 801ce5e:	f803 1b01 	strb.w	r1, [r3], #1
 801ce62:	e7f9      	b.n	801ce58 <memset+0x4>

0801ce64 <_free_r>:
 801ce64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce66:	2900      	cmp	r1, #0
 801ce68:	d044      	beq.n	801cef4 <_free_r+0x90>
 801ce6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ce6e:	9001      	str	r0, [sp, #4]
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	f1a1 0404 	sub.w	r4, r1, #4
 801ce76:	bfb8      	it	lt
 801ce78:	18e4      	addlt	r4, r4, r3
 801ce7a:	f000 fef5 	bl	801dc68 <__malloc_lock>
 801ce7e:	4a1e      	ldr	r2, [pc, #120]	; (801cef8 <_free_r+0x94>)
 801ce80:	9801      	ldr	r0, [sp, #4]
 801ce82:	6813      	ldr	r3, [r2, #0]
 801ce84:	b933      	cbnz	r3, 801ce94 <_free_r+0x30>
 801ce86:	6063      	str	r3, [r4, #4]
 801ce88:	6014      	str	r4, [r2, #0]
 801ce8a:	b003      	add	sp, #12
 801ce8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ce90:	f000 bef0 	b.w	801dc74 <__malloc_unlock>
 801ce94:	42a3      	cmp	r3, r4
 801ce96:	d908      	bls.n	801ceaa <_free_r+0x46>
 801ce98:	6825      	ldr	r5, [r4, #0]
 801ce9a:	1961      	adds	r1, r4, r5
 801ce9c:	428b      	cmp	r3, r1
 801ce9e:	bf01      	itttt	eq
 801cea0:	6819      	ldreq	r1, [r3, #0]
 801cea2:	685b      	ldreq	r3, [r3, #4]
 801cea4:	1949      	addeq	r1, r1, r5
 801cea6:	6021      	streq	r1, [r4, #0]
 801cea8:	e7ed      	b.n	801ce86 <_free_r+0x22>
 801ceaa:	461a      	mov	r2, r3
 801ceac:	685b      	ldr	r3, [r3, #4]
 801ceae:	b10b      	cbz	r3, 801ceb4 <_free_r+0x50>
 801ceb0:	42a3      	cmp	r3, r4
 801ceb2:	d9fa      	bls.n	801ceaa <_free_r+0x46>
 801ceb4:	6811      	ldr	r1, [r2, #0]
 801ceb6:	1855      	adds	r5, r2, r1
 801ceb8:	42a5      	cmp	r5, r4
 801ceba:	d10b      	bne.n	801ced4 <_free_r+0x70>
 801cebc:	6824      	ldr	r4, [r4, #0]
 801cebe:	4421      	add	r1, r4
 801cec0:	1854      	adds	r4, r2, r1
 801cec2:	42a3      	cmp	r3, r4
 801cec4:	6011      	str	r1, [r2, #0]
 801cec6:	d1e0      	bne.n	801ce8a <_free_r+0x26>
 801cec8:	681c      	ldr	r4, [r3, #0]
 801ceca:	685b      	ldr	r3, [r3, #4]
 801cecc:	6053      	str	r3, [r2, #4]
 801cece:	4421      	add	r1, r4
 801ced0:	6011      	str	r1, [r2, #0]
 801ced2:	e7da      	b.n	801ce8a <_free_r+0x26>
 801ced4:	d902      	bls.n	801cedc <_free_r+0x78>
 801ced6:	230c      	movs	r3, #12
 801ced8:	6003      	str	r3, [r0, #0]
 801ceda:	e7d6      	b.n	801ce8a <_free_r+0x26>
 801cedc:	6825      	ldr	r5, [r4, #0]
 801cede:	1961      	adds	r1, r4, r5
 801cee0:	428b      	cmp	r3, r1
 801cee2:	bf04      	itt	eq
 801cee4:	6819      	ldreq	r1, [r3, #0]
 801cee6:	685b      	ldreq	r3, [r3, #4]
 801cee8:	6063      	str	r3, [r4, #4]
 801ceea:	bf04      	itt	eq
 801ceec:	1949      	addeq	r1, r1, r5
 801ceee:	6021      	streq	r1, [r4, #0]
 801cef0:	6054      	str	r4, [r2, #4]
 801cef2:	e7ca      	b.n	801ce8a <_free_r+0x26>
 801cef4:	b003      	add	sp, #12
 801cef6:	bd30      	pop	{r4, r5, pc}
 801cef8:	24003758 	.word	0x24003758

0801cefc <sbrk_aligned>:
 801cefc:	b570      	push	{r4, r5, r6, lr}
 801cefe:	4e0e      	ldr	r6, [pc, #56]	; (801cf38 <sbrk_aligned+0x3c>)
 801cf00:	460c      	mov	r4, r1
 801cf02:	6831      	ldr	r1, [r6, #0]
 801cf04:	4605      	mov	r5, r0
 801cf06:	b911      	cbnz	r1, 801cf0e <sbrk_aligned+0x12>
 801cf08:	f000 fb7a 	bl	801d600 <_sbrk_r>
 801cf0c:	6030      	str	r0, [r6, #0]
 801cf0e:	4621      	mov	r1, r4
 801cf10:	4628      	mov	r0, r5
 801cf12:	f000 fb75 	bl	801d600 <_sbrk_r>
 801cf16:	1c43      	adds	r3, r0, #1
 801cf18:	d00a      	beq.n	801cf30 <sbrk_aligned+0x34>
 801cf1a:	1cc4      	adds	r4, r0, #3
 801cf1c:	f024 0403 	bic.w	r4, r4, #3
 801cf20:	42a0      	cmp	r0, r4
 801cf22:	d007      	beq.n	801cf34 <sbrk_aligned+0x38>
 801cf24:	1a21      	subs	r1, r4, r0
 801cf26:	4628      	mov	r0, r5
 801cf28:	f000 fb6a 	bl	801d600 <_sbrk_r>
 801cf2c:	3001      	adds	r0, #1
 801cf2e:	d101      	bne.n	801cf34 <sbrk_aligned+0x38>
 801cf30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801cf34:	4620      	mov	r0, r4
 801cf36:	bd70      	pop	{r4, r5, r6, pc}
 801cf38:	2400375c 	.word	0x2400375c

0801cf3c <_malloc_r>:
 801cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf40:	1ccd      	adds	r5, r1, #3
 801cf42:	f025 0503 	bic.w	r5, r5, #3
 801cf46:	3508      	adds	r5, #8
 801cf48:	2d0c      	cmp	r5, #12
 801cf4a:	bf38      	it	cc
 801cf4c:	250c      	movcc	r5, #12
 801cf4e:	2d00      	cmp	r5, #0
 801cf50:	4607      	mov	r7, r0
 801cf52:	db01      	blt.n	801cf58 <_malloc_r+0x1c>
 801cf54:	42a9      	cmp	r1, r5
 801cf56:	d905      	bls.n	801cf64 <_malloc_r+0x28>
 801cf58:	230c      	movs	r3, #12
 801cf5a:	603b      	str	r3, [r7, #0]
 801cf5c:	2600      	movs	r6, #0
 801cf5e:	4630      	mov	r0, r6
 801cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf64:	4e2e      	ldr	r6, [pc, #184]	; (801d020 <_malloc_r+0xe4>)
 801cf66:	f000 fe7f 	bl	801dc68 <__malloc_lock>
 801cf6a:	6833      	ldr	r3, [r6, #0]
 801cf6c:	461c      	mov	r4, r3
 801cf6e:	bb34      	cbnz	r4, 801cfbe <_malloc_r+0x82>
 801cf70:	4629      	mov	r1, r5
 801cf72:	4638      	mov	r0, r7
 801cf74:	f7ff ffc2 	bl	801cefc <sbrk_aligned>
 801cf78:	1c43      	adds	r3, r0, #1
 801cf7a:	4604      	mov	r4, r0
 801cf7c:	d14d      	bne.n	801d01a <_malloc_r+0xde>
 801cf7e:	6834      	ldr	r4, [r6, #0]
 801cf80:	4626      	mov	r6, r4
 801cf82:	2e00      	cmp	r6, #0
 801cf84:	d140      	bne.n	801d008 <_malloc_r+0xcc>
 801cf86:	6823      	ldr	r3, [r4, #0]
 801cf88:	4631      	mov	r1, r6
 801cf8a:	4638      	mov	r0, r7
 801cf8c:	eb04 0803 	add.w	r8, r4, r3
 801cf90:	f000 fb36 	bl	801d600 <_sbrk_r>
 801cf94:	4580      	cmp	r8, r0
 801cf96:	d13a      	bne.n	801d00e <_malloc_r+0xd2>
 801cf98:	6821      	ldr	r1, [r4, #0]
 801cf9a:	3503      	adds	r5, #3
 801cf9c:	1a6d      	subs	r5, r5, r1
 801cf9e:	f025 0503 	bic.w	r5, r5, #3
 801cfa2:	3508      	adds	r5, #8
 801cfa4:	2d0c      	cmp	r5, #12
 801cfa6:	bf38      	it	cc
 801cfa8:	250c      	movcc	r5, #12
 801cfaa:	4629      	mov	r1, r5
 801cfac:	4638      	mov	r0, r7
 801cfae:	f7ff ffa5 	bl	801cefc <sbrk_aligned>
 801cfb2:	3001      	adds	r0, #1
 801cfb4:	d02b      	beq.n	801d00e <_malloc_r+0xd2>
 801cfb6:	6823      	ldr	r3, [r4, #0]
 801cfb8:	442b      	add	r3, r5
 801cfba:	6023      	str	r3, [r4, #0]
 801cfbc:	e00e      	b.n	801cfdc <_malloc_r+0xa0>
 801cfbe:	6822      	ldr	r2, [r4, #0]
 801cfc0:	1b52      	subs	r2, r2, r5
 801cfc2:	d41e      	bmi.n	801d002 <_malloc_r+0xc6>
 801cfc4:	2a0b      	cmp	r2, #11
 801cfc6:	d916      	bls.n	801cff6 <_malloc_r+0xba>
 801cfc8:	1961      	adds	r1, r4, r5
 801cfca:	42a3      	cmp	r3, r4
 801cfcc:	6025      	str	r5, [r4, #0]
 801cfce:	bf18      	it	ne
 801cfd0:	6059      	strne	r1, [r3, #4]
 801cfd2:	6863      	ldr	r3, [r4, #4]
 801cfd4:	bf08      	it	eq
 801cfd6:	6031      	streq	r1, [r6, #0]
 801cfd8:	5162      	str	r2, [r4, r5]
 801cfda:	604b      	str	r3, [r1, #4]
 801cfdc:	4638      	mov	r0, r7
 801cfde:	f104 060b 	add.w	r6, r4, #11
 801cfe2:	f000 fe47 	bl	801dc74 <__malloc_unlock>
 801cfe6:	f026 0607 	bic.w	r6, r6, #7
 801cfea:	1d23      	adds	r3, r4, #4
 801cfec:	1af2      	subs	r2, r6, r3
 801cfee:	d0b6      	beq.n	801cf5e <_malloc_r+0x22>
 801cff0:	1b9b      	subs	r3, r3, r6
 801cff2:	50a3      	str	r3, [r4, r2]
 801cff4:	e7b3      	b.n	801cf5e <_malloc_r+0x22>
 801cff6:	6862      	ldr	r2, [r4, #4]
 801cff8:	42a3      	cmp	r3, r4
 801cffa:	bf0c      	ite	eq
 801cffc:	6032      	streq	r2, [r6, #0]
 801cffe:	605a      	strne	r2, [r3, #4]
 801d000:	e7ec      	b.n	801cfdc <_malloc_r+0xa0>
 801d002:	4623      	mov	r3, r4
 801d004:	6864      	ldr	r4, [r4, #4]
 801d006:	e7b2      	b.n	801cf6e <_malloc_r+0x32>
 801d008:	4634      	mov	r4, r6
 801d00a:	6876      	ldr	r6, [r6, #4]
 801d00c:	e7b9      	b.n	801cf82 <_malloc_r+0x46>
 801d00e:	230c      	movs	r3, #12
 801d010:	603b      	str	r3, [r7, #0]
 801d012:	4638      	mov	r0, r7
 801d014:	f000 fe2e 	bl	801dc74 <__malloc_unlock>
 801d018:	e7a1      	b.n	801cf5e <_malloc_r+0x22>
 801d01a:	6025      	str	r5, [r4, #0]
 801d01c:	e7de      	b.n	801cfdc <_malloc_r+0xa0>
 801d01e:	bf00      	nop
 801d020:	24003758 	.word	0x24003758

0801d024 <__sfputc_r>:
 801d024:	6893      	ldr	r3, [r2, #8]
 801d026:	3b01      	subs	r3, #1
 801d028:	2b00      	cmp	r3, #0
 801d02a:	b410      	push	{r4}
 801d02c:	6093      	str	r3, [r2, #8]
 801d02e:	da08      	bge.n	801d042 <__sfputc_r+0x1e>
 801d030:	6994      	ldr	r4, [r2, #24]
 801d032:	42a3      	cmp	r3, r4
 801d034:	db01      	blt.n	801d03a <__sfputc_r+0x16>
 801d036:	290a      	cmp	r1, #10
 801d038:	d103      	bne.n	801d042 <__sfputc_r+0x1e>
 801d03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d03e:	f000 bb33 	b.w	801d6a8 <__swbuf_r>
 801d042:	6813      	ldr	r3, [r2, #0]
 801d044:	1c58      	adds	r0, r3, #1
 801d046:	6010      	str	r0, [r2, #0]
 801d048:	7019      	strb	r1, [r3, #0]
 801d04a:	4608      	mov	r0, r1
 801d04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d050:	4770      	bx	lr

0801d052 <__sfputs_r>:
 801d052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d054:	4606      	mov	r6, r0
 801d056:	460f      	mov	r7, r1
 801d058:	4614      	mov	r4, r2
 801d05a:	18d5      	adds	r5, r2, r3
 801d05c:	42ac      	cmp	r4, r5
 801d05e:	d101      	bne.n	801d064 <__sfputs_r+0x12>
 801d060:	2000      	movs	r0, #0
 801d062:	e007      	b.n	801d074 <__sfputs_r+0x22>
 801d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d068:	463a      	mov	r2, r7
 801d06a:	4630      	mov	r0, r6
 801d06c:	f7ff ffda 	bl	801d024 <__sfputc_r>
 801d070:	1c43      	adds	r3, r0, #1
 801d072:	d1f3      	bne.n	801d05c <__sfputs_r+0xa>
 801d074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d078 <_vfiprintf_r>:
 801d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d07c:	460d      	mov	r5, r1
 801d07e:	b09d      	sub	sp, #116	; 0x74
 801d080:	4614      	mov	r4, r2
 801d082:	4698      	mov	r8, r3
 801d084:	4606      	mov	r6, r0
 801d086:	b118      	cbz	r0, 801d090 <_vfiprintf_r+0x18>
 801d088:	6983      	ldr	r3, [r0, #24]
 801d08a:	b90b      	cbnz	r3, 801d090 <_vfiprintf_r+0x18>
 801d08c:	f000 fce6 	bl	801da5c <__sinit>
 801d090:	4b89      	ldr	r3, [pc, #548]	; (801d2b8 <_vfiprintf_r+0x240>)
 801d092:	429d      	cmp	r5, r3
 801d094:	d11b      	bne.n	801d0ce <_vfiprintf_r+0x56>
 801d096:	6875      	ldr	r5, [r6, #4]
 801d098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d09a:	07d9      	lsls	r1, r3, #31
 801d09c:	d405      	bmi.n	801d0aa <_vfiprintf_r+0x32>
 801d09e:	89ab      	ldrh	r3, [r5, #12]
 801d0a0:	059a      	lsls	r2, r3, #22
 801d0a2:	d402      	bmi.n	801d0aa <_vfiprintf_r+0x32>
 801d0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0a6:	f000 fd77 	bl	801db98 <__retarget_lock_acquire_recursive>
 801d0aa:	89ab      	ldrh	r3, [r5, #12]
 801d0ac:	071b      	lsls	r3, r3, #28
 801d0ae:	d501      	bpl.n	801d0b4 <_vfiprintf_r+0x3c>
 801d0b0:	692b      	ldr	r3, [r5, #16]
 801d0b2:	b9eb      	cbnz	r3, 801d0f0 <_vfiprintf_r+0x78>
 801d0b4:	4629      	mov	r1, r5
 801d0b6:	4630      	mov	r0, r6
 801d0b8:	f000 fb48 	bl	801d74c <__swsetup_r>
 801d0bc:	b1c0      	cbz	r0, 801d0f0 <_vfiprintf_r+0x78>
 801d0be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0c0:	07dc      	lsls	r4, r3, #31
 801d0c2:	d50e      	bpl.n	801d0e2 <_vfiprintf_r+0x6a>
 801d0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d0c8:	b01d      	add	sp, #116	; 0x74
 801d0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0ce:	4b7b      	ldr	r3, [pc, #492]	; (801d2bc <_vfiprintf_r+0x244>)
 801d0d0:	429d      	cmp	r5, r3
 801d0d2:	d101      	bne.n	801d0d8 <_vfiprintf_r+0x60>
 801d0d4:	68b5      	ldr	r5, [r6, #8]
 801d0d6:	e7df      	b.n	801d098 <_vfiprintf_r+0x20>
 801d0d8:	4b79      	ldr	r3, [pc, #484]	; (801d2c0 <_vfiprintf_r+0x248>)
 801d0da:	429d      	cmp	r5, r3
 801d0dc:	bf08      	it	eq
 801d0de:	68f5      	ldreq	r5, [r6, #12]
 801d0e0:	e7da      	b.n	801d098 <_vfiprintf_r+0x20>
 801d0e2:	89ab      	ldrh	r3, [r5, #12]
 801d0e4:	0598      	lsls	r0, r3, #22
 801d0e6:	d4ed      	bmi.n	801d0c4 <_vfiprintf_r+0x4c>
 801d0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0ea:	f000 fd56 	bl	801db9a <__retarget_lock_release_recursive>
 801d0ee:	e7e9      	b.n	801d0c4 <_vfiprintf_r+0x4c>
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	9309      	str	r3, [sp, #36]	; 0x24
 801d0f4:	2320      	movs	r3, #32
 801d0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0fe:	2330      	movs	r3, #48	; 0x30
 801d100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d2c4 <_vfiprintf_r+0x24c>
 801d104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d108:	f04f 0901 	mov.w	r9, #1
 801d10c:	4623      	mov	r3, r4
 801d10e:	469a      	mov	sl, r3
 801d110:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d114:	b10a      	cbz	r2, 801d11a <_vfiprintf_r+0xa2>
 801d116:	2a25      	cmp	r2, #37	; 0x25
 801d118:	d1f9      	bne.n	801d10e <_vfiprintf_r+0x96>
 801d11a:	ebba 0b04 	subs.w	fp, sl, r4
 801d11e:	d00b      	beq.n	801d138 <_vfiprintf_r+0xc0>
 801d120:	465b      	mov	r3, fp
 801d122:	4622      	mov	r2, r4
 801d124:	4629      	mov	r1, r5
 801d126:	4630      	mov	r0, r6
 801d128:	f7ff ff93 	bl	801d052 <__sfputs_r>
 801d12c:	3001      	adds	r0, #1
 801d12e:	f000 80aa 	beq.w	801d286 <_vfiprintf_r+0x20e>
 801d132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d134:	445a      	add	r2, fp
 801d136:	9209      	str	r2, [sp, #36]	; 0x24
 801d138:	f89a 3000 	ldrb.w	r3, [sl]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	f000 80a2 	beq.w	801d286 <_vfiprintf_r+0x20e>
 801d142:	2300      	movs	r3, #0
 801d144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d14c:	f10a 0a01 	add.w	sl, sl, #1
 801d150:	9304      	str	r3, [sp, #16]
 801d152:	9307      	str	r3, [sp, #28]
 801d154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d158:	931a      	str	r3, [sp, #104]	; 0x68
 801d15a:	4654      	mov	r4, sl
 801d15c:	2205      	movs	r2, #5
 801d15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d162:	4858      	ldr	r0, [pc, #352]	; (801d2c4 <_vfiprintf_r+0x24c>)
 801d164:	f7e3 f8bc 	bl	80002e0 <memchr>
 801d168:	9a04      	ldr	r2, [sp, #16]
 801d16a:	b9d8      	cbnz	r0, 801d1a4 <_vfiprintf_r+0x12c>
 801d16c:	06d1      	lsls	r1, r2, #27
 801d16e:	bf44      	itt	mi
 801d170:	2320      	movmi	r3, #32
 801d172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d176:	0713      	lsls	r3, r2, #28
 801d178:	bf44      	itt	mi
 801d17a:	232b      	movmi	r3, #43	; 0x2b
 801d17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d180:	f89a 3000 	ldrb.w	r3, [sl]
 801d184:	2b2a      	cmp	r3, #42	; 0x2a
 801d186:	d015      	beq.n	801d1b4 <_vfiprintf_r+0x13c>
 801d188:	9a07      	ldr	r2, [sp, #28]
 801d18a:	4654      	mov	r4, sl
 801d18c:	2000      	movs	r0, #0
 801d18e:	f04f 0c0a 	mov.w	ip, #10
 801d192:	4621      	mov	r1, r4
 801d194:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d198:	3b30      	subs	r3, #48	; 0x30
 801d19a:	2b09      	cmp	r3, #9
 801d19c:	d94e      	bls.n	801d23c <_vfiprintf_r+0x1c4>
 801d19e:	b1b0      	cbz	r0, 801d1ce <_vfiprintf_r+0x156>
 801d1a0:	9207      	str	r2, [sp, #28]
 801d1a2:	e014      	b.n	801d1ce <_vfiprintf_r+0x156>
 801d1a4:	eba0 0308 	sub.w	r3, r0, r8
 801d1a8:	fa09 f303 	lsl.w	r3, r9, r3
 801d1ac:	4313      	orrs	r3, r2
 801d1ae:	9304      	str	r3, [sp, #16]
 801d1b0:	46a2      	mov	sl, r4
 801d1b2:	e7d2      	b.n	801d15a <_vfiprintf_r+0xe2>
 801d1b4:	9b03      	ldr	r3, [sp, #12]
 801d1b6:	1d19      	adds	r1, r3, #4
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	9103      	str	r1, [sp, #12]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	bfbb      	ittet	lt
 801d1c0:	425b      	neglt	r3, r3
 801d1c2:	f042 0202 	orrlt.w	r2, r2, #2
 801d1c6:	9307      	strge	r3, [sp, #28]
 801d1c8:	9307      	strlt	r3, [sp, #28]
 801d1ca:	bfb8      	it	lt
 801d1cc:	9204      	strlt	r2, [sp, #16]
 801d1ce:	7823      	ldrb	r3, [r4, #0]
 801d1d0:	2b2e      	cmp	r3, #46	; 0x2e
 801d1d2:	d10c      	bne.n	801d1ee <_vfiprintf_r+0x176>
 801d1d4:	7863      	ldrb	r3, [r4, #1]
 801d1d6:	2b2a      	cmp	r3, #42	; 0x2a
 801d1d8:	d135      	bne.n	801d246 <_vfiprintf_r+0x1ce>
 801d1da:	9b03      	ldr	r3, [sp, #12]
 801d1dc:	1d1a      	adds	r2, r3, #4
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	9203      	str	r2, [sp, #12]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	bfb8      	it	lt
 801d1e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d1ea:	3402      	adds	r4, #2
 801d1ec:	9305      	str	r3, [sp, #20]
 801d1ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d2d4 <_vfiprintf_r+0x25c>
 801d1f2:	7821      	ldrb	r1, [r4, #0]
 801d1f4:	2203      	movs	r2, #3
 801d1f6:	4650      	mov	r0, sl
 801d1f8:	f7e3 f872 	bl	80002e0 <memchr>
 801d1fc:	b140      	cbz	r0, 801d210 <_vfiprintf_r+0x198>
 801d1fe:	2340      	movs	r3, #64	; 0x40
 801d200:	eba0 000a 	sub.w	r0, r0, sl
 801d204:	fa03 f000 	lsl.w	r0, r3, r0
 801d208:	9b04      	ldr	r3, [sp, #16]
 801d20a:	4303      	orrs	r3, r0
 801d20c:	3401      	adds	r4, #1
 801d20e:	9304      	str	r3, [sp, #16]
 801d210:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d214:	482c      	ldr	r0, [pc, #176]	; (801d2c8 <_vfiprintf_r+0x250>)
 801d216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d21a:	2206      	movs	r2, #6
 801d21c:	f7e3 f860 	bl	80002e0 <memchr>
 801d220:	2800      	cmp	r0, #0
 801d222:	d03f      	beq.n	801d2a4 <_vfiprintf_r+0x22c>
 801d224:	4b29      	ldr	r3, [pc, #164]	; (801d2cc <_vfiprintf_r+0x254>)
 801d226:	bb1b      	cbnz	r3, 801d270 <_vfiprintf_r+0x1f8>
 801d228:	9b03      	ldr	r3, [sp, #12]
 801d22a:	3307      	adds	r3, #7
 801d22c:	f023 0307 	bic.w	r3, r3, #7
 801d230:	3308      	adds	r3, #8
 801d232:	9303      	str	r3, [sp, #12]
 801d234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d236:	443b      	add	r3, r7
 801d238:	9309      	str	r3, [sp, #36]	; 0x24
 801d23a:	e767      	b.n	801d10c <_vfiprintf_r+0x94>
 801d23c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d240:	460c      	mov	r4, r1
 801d242:	2001      	movs	r0, #1
 801d244:	e7a5      	b.n	801d192 <_vfiprintf_r+0x11a>
 801d246:	2300      	movs	r3, #0
 801d248:	3401      	adds	r4, #1
 801d24a:	9305      	str	r3, [sp, #20]
 801d24c:	4619      	mov	r1, r3
 801d24e:	f04f 0c0a 	mov.w	ip, #10
 801d252:	4620      	mov	r0, r4
 801d254:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d258:	3a30      	subs	r2, #48	; 0x30
 801d25a:	2a09      	cmp	r2, #9
 801d25c:	d903      	bls.n	801d266 <_vfiprintf_r+0x1ee>
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d0c5      	beq.n	801d1ee <_vfiprintf_r+0x176>
 801d262:	9105      	str	r1, [sp, #20]
 801d264:	e7c3      	b.n	801d1ee <_vfiprintf_r+0x176>
 801d266:	fb0c 2101 	mla	r1, ip, r1, r2
 801d26a:	4604      	mov	r4, r0
 801d26c:	2301      	movs	r3, #1
 801d26e:	e7f0      	b.n	801d252 <_vfiprintf_r+0x1da>
 801d270:	ab03      	add	r3, sp, #12
 801d272:	9300      	str	r3, [sp, #0]
 801d274:	462a      	mov	r2, r5
 801d276:	4b16      	ldr	r3, [pc, #88]	; (801d2d0 <_vfiprintf_r+0x258>)
 801d278:	a904      	add	r1, sp, #16
 801d27a:	4630      	mov	r0, r6
 801d27c:	f3af 8000 	nop.w
 801d280:	4607      	mov	r7, r0
 801d282:	1c78      	adds	r0, r7, #1
 801d284:	d1d6      	bne.n	801d234 <_vfiprintf_r+0x1bc>
 801d286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d288:	07d9      	lsls	r1, r3, #31
 801d28a:	d405      	bmi.n	801d298 <_vfiprintf_r+0x220>
 801d28c:	89ab      	ldrh	r3, [r5, #12]
 801d28e:	059a      	lsls	r2, r3, #22
 801d290:	d402      	bmi.n	801d298 <_vfiprintf_r+0x220>
 801d292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d294:	f000 fc81 	bl	801db9a <__retarget_lock_release_recursive>
 801d298:	89ab      	ldrh	r3, [r5, #12]
 801d29a:	065b      	lsls	r3, r3, #25
 801d29c:	f53f af12 	bmi.w	801d0c4 <_vfiprintf_r+0x4c>
 801d2a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d2a2:	e711      	b.n	801d0c8 <_vfiprintf_r+0x50>
 801d2a4:	ab03      	add	r3, sp, #12
 801d2a6:	9300      	str	r3, [sp, #0]
 801d2a8:	462a      	mov	r2, r5
 801d2aa:	4b09      	ldr	r3, [pc, #36]	; (801d2d0 <_vfiprintf_r+0x258>)
 801d2ac:	a904      	add	r1, sp, #16
 801d2ae:	4630      	mov	r0, r6
 801d2b0:	f000 f880 	bl	801d3b4 <_printf_i>
 801d2b4:	e7e4      	b.n	801d280 <_vfiprintf_r+0x208>
 801d2b6:	bf00      	nop
 801d2b8:	08038ca8 	.word	0x08038ca8
 801d2bc:	08038cc8 	.word	0x08038cc8
 801d2c0:	08038c88 	.word	0x08038c88
 801d2c4:	08038c54 	.word	0x08038c54
 801d2c8:	08038c5e 	.word	0x08038c5e
 801d2cc:	00000000 	.word	0x00000000
 801d2d0:	0801d053 	.word	0x0801d053
 801d2d4:	08038c5a 	.word	0x08038c5a

0801d2d8 <_printf_common>:
 801d2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2dc:	4616      	mov	r6, r2
 801d2de:	4699      	mov	r9, r3
 801d2e0:	688a      	ldr	r2, [r1, #8]
 801d2e2:	690b      	ldr	r3, [r1, #16]
 801d2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d2e8:	4293      	cmp	r3, r2
 801d2ea:	bfb8      	it	lt
 801d2ec:	4613      	movlt	r3, r2
 801d2ee:	6033      	str	r3, [r6, #0]
 801d2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d2f4:	4607      	mov	r7, r0
 801d2f6:	460c      	mov	r4, r1
 801d2f8:	b10a      	cbz	r2, 801d2fe <_printf_common+0x26>
 801d2fa:	3301      	adds	r3, #1
 801d2fc:	6033      	str	r3, [r6, #0]
 801d2fe:	6823      	ldr	r3, [r4, #0]
 801d300:	0699      	lsls	r1, r3, #26
 801d302:	bf42      	ittt	mi
 801d304:	6833      	ldrmi	r3, [r6, #0]
 801d306:	3302      	addmi	r3, #2
 801d308:	6033      	strmi	r3, [r6, #0]
 801d30a:	6825      	ldr	r5, [r4, #0]
 801d30c:	f015 0506 	ands.w	r5, r5, #6
 801d310:	d106      	bne.n	801d320 <_printf_common+0x48>
 801d312:	f104 0a19 	add.w	sl, r4, #25
 801d316:	68e3      	ldr	r3, [r4, #12]
 801d318:	6832      	ldr	r2, [r6, #0]
 801d31a:	1a9b      	subs	r3, r3, r2
 801d31c:	42ab      	cmp	r3, r5
 801d31e:	dc26      	bgt.n	801d36e <_printf_common+0x96>
 801d320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d324:	1e13      	subs	r3, r2, #0
 801d326:	6822      	ldr	r2, [r4, #0]
 801d328:	bf18      	it	ne
 801d32a:	2301      	movne	r3, #1
 801d32c:	0692      	lsls	r2, r2, #26
 801d32e:	d42b      	bmi.n	801d388 <_printf_common+0xb0>
 801d330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d334:	4649      	mov	r1, r9
 801d336:	4638      	mov	r0, r7
 801d338:	47c0      	blx	r8
 801d33a:	3001      	adds	r0, #1
 801d33c:	d01e      	beq.n	801d37c <_printf_common+0xa4>
 801d33e:	6823      	ldr	r3, [r4, #0]
 801d340:	68e5      	ldr	r5, [r4, #12]
 801d342:	6832      	ldr	r2, [r6, #0]
 801d344:	f003 0306 	and.w	r3, r3, #6
 801d348:	2b04      	cmp	r3, #4
 801d34a:	bf08      	it	eq
 801d34c:	1aad      	subeq	r5, r5, r2
 801d34e:	68a3      	ldr	r3, [r4, #8]
 801d350:	6922      	ldr	r2, [r4, #16]
 801d352:	bf0c      	ite	eq
 801d354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d358:	2500      	movne	r5, #0
 801d35a:	4293      	cmp	r3, r2
 801d35c:	bfc4      	itt	gt
 801d35e:	1a9b      	subgt	r3, r3, r2
 801d360:	18ed      	addgt	r5, r5, r3
 801d362:	2600      	movs	r6, #0
 801d364:	341a      	adds	r4, #26
 801d366:	42b5      	cmp	r5, r6
 801d368:	d11a      	bne.n	801d3a0 <_printf_common+0xc8>
 801d36a:	2000      	movs	r0, #0
 801d36c:	e008      	b.n	801d380 <_printf_common+0xa8>
 801d36e:	2301      	movs	r3, #1
 801d370:	4652      	mov	r2, sl
 801d372:	4649      	mov	r1, r9
 801d374:	4638      	mov	r0, r7
 801d376:	47c0      	blx	r8
 801d378:	3001      	adds	r0, #1
 801d37a:	d103      	bne.n	801d384 <_printf_common+0xac>
 801d37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d384:	3501      	adds	r5, #1
 801d386:	e7c6      	b.n	801d316 <_printf_common+0x3e>
 801d388:	18e1      	adds	r1, r4, r3
 801d38a:	1c5a      	adds	r2, r3, #1
 801d38c:	2030      	movs	r0, #48	; 0x30
 801d38e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d392:	4422      	add	r2, r4
 801d394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d39c:	3302      	adds	r3, #2
 801d39e:	e7c7      	b.n	801d330 <_printf_common+0x58>
 801d3a0:	2301      	movs	r3, #1
 801d3a2:	4622      	mov	r2, r4
 801d3a4:	4649      	mov	r1, r9
 801d3a6:	4638      	mov	r0, r7
 801d3a8:	47c0      	blx	r8
 801d3aa:	3001      	adds	r0, #1
 801d3ac:	d0e6      	beq.n	801d37c <_printf_common+0xa4>
 801d3ae:	3601      	adds	r6, #1
 801d3b0:	e7d9      	b.n	801d366 <_printf_common+0x8e>
	...

0801d3b4 <_printf_i>:
 801d3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3b8:	7e0f      	ldrb	r7, [r1, #24]
 801d3ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d3bc:	2f78      	cmp	r7, #120	; 0x78
 801d3be:	4691      	mov	r9, r2
 801d3c0:	4680      	mov	r8, r0
 801d3c2:	460c      	mov	r4, r1
 801d3c4:	469a      	mov	sl, r3
 801d3c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d3ca:	d807      	bhi.n	801d3dc <_printf_i+0x28>
 801d3cc:	2f62      	cmp	r7, #98	; 0x62
 801d3ce:	d80a      	bhi.n	801d3e6 <_printf_i+0x32>
 801d3d0:	2f00      	cmp	r7, #0
 801d3d2:	f000 80d8 	beq.w	801d586 <_printf_i+0x1d2>
 801d3d6:	2f58      	cmp	r7, #88	; 0x58
 801d3d8:	f000 80a3 	beq.w	801d522 <_printf_i+0x16e>
 801d3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d3e4:	e03a      	b.n	801d45c <_printf_i+0xa8>
 801d3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d3ea:	2b15      	cmp	r3, #21
 801d3ec:	d8f6      	bhi.n	801d3dc <_printf_i+0x28>
 801d3ee:	a101      	add	r1, pc, #4	; (adr r1, 801d3f4 <_printf_i+0x40>)
 801d3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d3f4:	0801d44d 	.word	0x0801d44d
 801d3f8:	0801d461 	.word	0x0801d461
 801d3fc:	0801d3dd 	.word	0x0801d3dd
 801d400:	0801d3dd 	.word	0x0801d3dd
 801d404:	0801d3dd 	.word	0x0801d3dd
 801d408:	0801d3dd 	.word	0x0801d3dd
 801d40c:	0801d461 	.word	0x0801d461
 801d410:	0801d3dd 	.word	0x0801d3dd
 801d414:	0801d3dd 	.word	0x0801d3dd
 801d418:	0801d3dd 	.word	0x0801d3dd
 801d41c:	0801d3dd 	.word	0x0801d3dd
 801d420:	0801d56d 	.word	0x0801d56d
 801d424:	0801d491 	.word	0x0801d491
 801d428:	0801d54f 	.word	0x0801d54f
 801d42c:	0801d3dd 	.word	0x0801d3dd
 801d430:	0801d3dd 	.word	0x0801d3dd
 801d434:	0801d58f 	.word	0x0801d58f
 801d438:	0801d3dd 	.word	0x0801d3dd
 801d43c:	0801d491 	.word	0x0801d491
 801d440:	0801d3dd 	.word	0x0801d3dd
 801d444:	0801d3dd 	.word	0x0801d3dd
 801d448:	0801d557 	.word	0x0801d557
 801d44c:	682b      	ldr	r3, [r5, #0]
 801d44e:	1d1a      	adds	r2, r3, #4
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	602a      	str	r2, [r5, #0]
 801d454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d45c:	2301      	movs	r3, #1
 801d45e:	e0a3      	b.n	801d5a8 <_printf_i+0x1f4>
 801d460:	6820      	ldr	r0, [r4, #0]
 801d462:	6829      	ldr	r1, [r5, #0]
 801d464:	0606      	lsls	r6, r0, #24
 801d466:	f101 0304 	add.w	r3, r1, #4
 801d46a:	d50a      	bpl.n	801d482 <_printf_i+0xce>
 801d46c:	680e      	ldr	r6, [r1, #0]
 801d46e:	602b      	str	r3, [r5, #0]
 801d470:	2e00      	cmp	r6, #0
 801d472:	da03      	bge.n	801d47c <_printf_i+0xc8>
 801d474:	232d      	movs	r3, #45	; 0x2d
 801d476:	4276      	negs	r6, r6
 801d478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d47c:	485e      	ldr	r0, [pc, #376]	; (801d5f8 <_printf_i+0x244>)
 801d47e:	230a      	movs	r3, #10
 801d480:	e019      	b.n	801d4b6 <_printf_i+0x102>
 801d482:	680e      	ldr	r6, [r1, #0]
 801d484:	602b      	str	r3, [r5, #0]
 801d486:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d48a:	bf18      	it	ne
 801d48c:	b236      	sxthne	r6, r6
 801d48e:	e7ef      	b.n	801d470 <_printf_i+0xbc>
 801d490:	682b      	ldr	r3, [r5, #0]
 801d492:	6820      	ldr	r0, [r4, #0]
 801d494:	1d19      	adds	r1, r3, #4
 801d496:	6029      	str	r1, [r5, #0]
 801d498:	0601      	lsls	r1, r0, #24
 801d49a:	d501      	bpl.n	801d4a0 <_printf_i+0xec>
 801d49c:	681e      	ldr	r6, [r3, #0]
 801d49e:	e002      	b.n	801d4a6 <_printf_i+0xf2>
 801d4a0:	0646      	lsls	r6, r0, #25
 801d4a2:	d5fb      	bpl.n	801d49c <_printf_i+0xe8>
 801d4a4:	881e      	ldrh	r6, [r3, #0]
 801d4a6:	4854      	ldr	r0, [pc, #336]	; (801d5f8 <_printf_i+0x244>)
 801d4a8:	2f6f      	cmp	r7, #111	; 0x6f
 801d4aa:	bf0c      	ite	eq
 801d4ac:	2308      	moveq	r3, #8
 801d4ae:	230a      	movne	r3, #10
 801d4b0:	2100      	movs	r1, #0
 801d4b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d4b6:	6865      	ldr	r5, [r4, #4]
 801d4b8:	60a5      	str	r5, [r4, #8]
 801d4ba:	2d00      	cmp	r5, #0
 801d4bc:	bfa2      	ittt	ge
 801d4be:	6821      	ldrge	r1, [r4, #0]
 801d4c0:	f021 0104 	bicge.w	r1, r1, #4
 801d4c4:	6021      	strge	r1, [r4, #0]
 801d4c6:	b90e      	cbnz	r6, 801d4cc <_printf_i+0x118>
 801d4c8:	2d00      	cmp	r5, #0
 801d4ca:	d04d      	beq.n	801d568 <_printf_i+0x1b4>
 801d4cc:	4615      	mov	r5, r2
 801d4ce:	fbb6 f1f3 	udiv	r1, r6, r3
 801d4d2:	fb03 6711 	mls	r7, r3, r1, r6
 801d4d6:	5dc7      	ldrb	r7, [r0, r7]
 801d4d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d4dc:	4637      	mov	r7, r6
 801d4de:	42bb      	cmp	r3, r7
 801d4e0:	460e      	mov	r6, r1
 801d4e2:	d9f4      	bls.n	801d4ce <_printf_i+0x11a>
 801d4e4:	2b08      	cmp	r3, #8
 801d4e6:	d10b      	bne.n	801d500 <_printf_i+0x14c>
 801d4e8:	6823      	ldr	r3, [r4, #0]
 801d4ea:	07de      	lsls	r6, r3, #31
 801d4ec:	d508      	bpl.n	801d500 <_printf_i+0x14c>
 801d4ee:	6923      	ldr	r3, [r4, #16]
 801d4f0:	6861      	ldr	r1, [r4, #4]
 801d4f2:	4299      	cmp	r1, r3
 801d4f4:	bfde      	ittt	le
 801d4f6:	2330      	movle	r3, #48	; 0x30
 801d4f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d4fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d500:	1b52      	subs	r2, r2, r5
 801d502:	6122      	str	r2, [r4, #16]
 801d504:	f8cd a000 	str.w	sl, [sp]
 801d508:	464b      	mov	r3, r9
 801d50a:	aa03      	add	r2, sp, #12
 801d50c:	4621      	mov	r1, r4
 801d50e:	4640      	mov	r0, r8
 801d510:	f7ff fee2 	bl	801d2d8 <_printf_common>
 801d514:	3001      	adds	r0, #1
 801d516:	d14c      	bne.n	801d5b2 <_printf_i+0x1fe>
 801d518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d51c:	b004      	add	sp, #16
 801d51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d522:	4835      	ldr	r0, [pc, #212]	; (801d5f8 <_printf_i+0x244>)
 801d524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d528:	6829      	ldr	r1, [r5, #0]
 801d52a:	6823      	ldr	r3, [r4, #0]
 801d52c:	f851 6b04 	ldr.w	r6, [r1], #4
 801d530:	6029      	str	r1, [r5, #0]
 801d532:	061d      	lsls	r5, r3, #24
 801d534:	d514      	bpl.n	801d560 <_printf_i+0x1ac>
 801d536:	07df      	lsls	r7, r3, #31
 801d538:	bf44      	itt	mi
 801d53a:	f043 0320 	orrmi.w	r3, r3, #32
 801d53e:	6023      	strmi	r3, [r4, #0]
 801d540:	b91e      	cbnz	r6, 801d54a <_printf_i+0x196>
 801d542:	6823      	ldr	r3, [r4, #0]
 801d544:	f023 0320 	bic.w	r3, r3, #32
 801d548:	6023      	str	r3, [r4, #0]
 801d54a:	2310      	movs	r3, #16
 801d54c:	e7b0      	b.n	801d4b0 <_printf_i+0xfc>
 801d54e:	6823      	ldr	r3, [r4, #0]
 801d550:	f043 0320 	orr.w	r3, r3, #32
 801d554:	6023      	str	r3, [r4, #0]
 801d556:	2378      	movs	r3, #120	; 0x78
 801d558:	4828      	ldr	r0, [pc, #160]	; (801d5fc <_printf_i+0x248>)
 801d55a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d55e:	e7e3      	b.n	801d528 <_printf_i+0x174>
 801d560:	0659      	lsls	r1, r3, #25
 801d562:	bf48      	it	mi
 801d564:	b2b6      	uxthmi	r6, r6
 801d566:	e7e6      	b.n	801d536 <_printf_i+0x182>
 801d568:	4615      	mov	r5, r2
 801d56a:	e7bb      	b.n	801d4e4 <_printf_i+0x130>
 801d56c:	682b      	ldr	r3, [r5, #0]
 801d56e:	6826      	ldr	r6, [r4, #0]
 801d570:	6961      	ldr	r1, [r4, #20]
 801d572:	1d18      	adds	r0, r3, #4
 801d574:	6028      	str	r0, [r5, #0]
 801d576:	0635      	lsls	r5, r6, #24
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	d501      	bpl.n	801d580 <_printf_i+0x1cc>
 801d57c:	6019      	str	r1, [r3, #0]
 801d57e:	e002      	b.n	801d586 <_printf_i+0x1d2>
 801d580:	0670      	lsls	r0, r6, #25
 801d582:	d5fb      	bpl.n	801d57c <_printf_i+0x1c8>
 801d584:	8019      	strh	r1, [r3, #0]
 801d586:	2300      	movs	r3, #0
 801d588:	6123      	str	r3, [r4, #16]
 801d58a:	4615      	mov	r5, r2
 801d58c:	e7ba      	b.n	801d504 <_printf_i+0x150>
 801d58e:	682b      	ldr	r3, [r5, #0]
 801d590:	1d1a      	adds	r2, r3, #4
 801d592:	602a      	str	r2, [r5, #0]
 801d594:	681d      	ldr	r5, [r3, #0]
 801d596:	6862      	ldr	r2, [r4, #4]
 801d598:	2100      	movs	r1, #0
 801d59a:	4628      	mov	r0, r5
 801d59c:	f7e2 fea0 	bl	80002e0 <memchr>
 801d5a0:	b108      	cbz	r0, 801d5a6 <_printf_i+0x1f2>
 801d5a2:	1b40      	subs	r0, r0, r5
 801d5a4:	6060      	str	r0, [r4, #4]
 801d5a6:	6863      	ldr	r3, [r4, #4]
 801d5a8:	6123      	str	r3, [r4, #16]
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d5b0:	e7a8      	b.n	801d504 <_printf_i+0x150>
 801d5b2:	6923      	ldr	r3, [r4, #16]
 801d5b4:	462a      	mov	r2, r5
 801d5b6:	4649      	mov	r1, r9
 801d5b8:	4640      	mov	r0, r8
 801d5ba:	47d0      	blx	sl
 801d5bc:	3001      	adds	r0, #1
 801d5be:	d0ab      	beq.n	801d518 <_printf_i+0x164>
 801d5c0:	6823      	ldr	r3, [r4, #0]
 801d5c2:	079b      	lsls	r3, r3, #30
 801d5c4:	d413      	bmi.n	801d5ee <_printf_i+0x23a>
 801d5c6:	68e0      	ldr	r0, [r4, #12]
 801d5c8:	9b03      	ldr	r3, [sp, #12]
 801d5ca:	4298      	cmp	r0, r3
 801d5cc:	bfb8      	it	lt
 801d5ce:	4618      	movlt	r0, r3
 801d5d0:	e7a4      	b.n	801d51c <_printf_i+0x168>
 801d5d2:	2301      	movs	r3, #1
 801d5d4:	4632      	mov	r2, r6
 801d5d6:	4649      	mov	r1, r9
 801d5d8:	4640      	mov	r0, r8
 801d5da:	47d0      	blx	sl
 801d5dc:	3001      	adds	r0, #1
 801d5de:	d09b      	beq.n	801d518 <_printf_i+0x164>
 801d5e0:	3501      	adds	r5, #1
 801d5e2:	68e3      	ldr	r3, [r4, #12]
 801d5e4:	9903      	ldr	r1, [sp, #12]
 801d5e6:	1a5b      	subs	r3, r3, r1
 801d5e8:	42ab      	cmp	r3, r5
 801d5ea:	dcf2      	bgt.n	801d5d2 <_printf_i+0x21e>
 801d5ec:	e7eb      	b.n	801d5c6 <_printf_i+0x212>
 801d5ee:	2500      	movs	r5, #0
 801d5f0:	f104 0619 	add.w	r6, r4, #25
 801d5f4:	e7f5      	b.n	801d5e2 <_printf_i+0x22e>
 801d5f6:	bf00      	nop
 801d5f8:	08038c65 	.word	0x08038c65
 801d5fc:	08038c76 	.word	0x08038c76

0801d600 <_sbrk_r>:
 801d600:	b538      	push	{r3, r4, r5, lr}
 801d602:	4d06      	ldr	r5, [pc, #24]	; (801d61c <_sbrk_r+0x1c>)
 801d604:	2300      	movs	r3, #0
 801d606:	4604      	mov	r4, r0
 801d608:	4608      	mov	r0, r1
 801d60a:	602b      	str	r3, [r5, #0]
 801d60c:	f7ed feca 	bl	800b3a4 <_sbrk>
 801d610:	1c43      	adds	r3, r0, #1
 801d612:	d102      	bne.n	801d61a <_sbrk_r+0x1a>
 801d614:	682b      	ldr	r3, [r5, #0]
 801d616:	b103      	cbz	r3, 801d61a <_sbrk_r+0x1a>
 801d618:	6023      	str	r3, [r4, #0]
 801d61a:	bd38      	pop	{r3, r4, r5, pc}
 801d61c:	24003764 	.word	0x24003764

0801d620 <_raise_r>:
 801d620:	291f      	cmp	r1, #31
 801d622:	b538      	push	{r3, r4, r5, lr}
 801d624:	4604      	mov	r4, r0
 801d626:	460d      	mov	r5, r1
 801d628:	d904      	bls.n	801d634 <_raise_r+0x14>
 801d62a:	2316      	movs	r3, #22
 801d62c:	6003      	str	r3, [r0, #0]
 801d62e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d632:	bd38      	pop	{r3, r4, r5, pc}
 801d634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d636:	b112      	cbz	r2, 801d63e <_raise_r+0x1e>
 801d638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d63c:	b94b      	cbnz	r3, 801d652 <_raise_r+0x32>
 801d63e:	4620      	mov	r0, r4
 801d640:	f000 f830 	bl	801d6a4 <_getpid_r>
 801d644:	462a      	mov	r2, r5
 801d646:	4601      	mov	r1, r0
 801d648:	4620      	mov	r0, r4
 801d64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d64e:	f000 b817 	b.w	801d680 <_kill_r>
 801d652:	2b01      	cmp	r3, #1
 801d654:	d00a      	beq.n	801d66c <_raise_r+0x4c>
 801d656:	1c59      	adds	r1, r3, #1
 801d658:	d103      	bne.n	801d662 <_raise_r+0x42>
 801d65a:	2316      	movs	r3, #22
 801d65c:	6003      	str	r3, [r0, #0]
 801d65e:	2001      	movs	r0, #1
 801d660:	e7e7      	b.n	801d632 <_raise_r+0x12>
 801d662:	2400      	movs	r4, #0
 801d664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d668:	4628      	mov	r0, r5
 801d66a:	4798      	blx	r3
 801d66c:	2000      	movs	r0, #0
 801d66e:	e7e0      	b.n	801d632 <_raise_r+0x12>

0801d670 <raise>:
 801d670:	4b02      	ldr	r3, [pc, #8]	; (801d67c <raise+0xc>)
 801d672:	4601      	mov	r1, r0
 801d674:	6818      	ldr	r0, [r3, #0]
 801d676:	f7ff bfd3 	b.w	801d620 <_raise_r>
 801d67a:	bf00      	nop
 801d67c:	24000100 	.word	0x24000100

0801d680 <_kill_r>:
 801d680:	b538      	push	{r3, r4, r5, lr}
 801d682:	4d07      	ldr	r5, [pc, #28]	; (801d6a0 <_kill_r+0x20>)
 801d684:	2300      	movs	r3, #0
 801d686:	4604      	mov	r4, r0
 801d688:	4608      	mov	r0, r1
 801d68a:	4611      	mov	r1, r2
 801d68c:	602b      	str	r3, [r5, #0]
 801d68e:	f7ed fe01 	bl	800b294 <_kill>
 801d692:	1c43      	adds	r3, r0, #1
 801d694:	d102      	bne.n	801d69c <_kill_r+0x1c>
 801d696:	682b      	ldr	r3, [r5, #0]
 801d698:	b103      	cbz	r3, 801d69c <_kill_r+0x1c>
 801d69a:	6023      	str	r3, [r4, #0]
 801d69c:	bd38      	pop	{r3, r4, r5, pc}
 801d69e:	bf00      	nop
 801d6a0:	24003764 	.word	0x24003764

0801d6a4 <_getpid_r>:
 801d6a4:	f7ed bdee 	b.w	800b284 <_getpid>

0801d6a8 <__swbuf_r>:
 801d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6aa:	460e      	mov	r6, r1
 801d6ac:	4614      	mov	r4, r2
 801d6ae:	4605      	mov	r5, r0
 801d6b0:	b118      	cbz	r0, 801d6ba <__swbuf_r+0x12>
 801d6b2:	6983      	ldr	r3, [r0, #24]
 801d6b4:	b90b      	cbnz	r3, 801d6ba <__swbuf_r+0x12>
 801d6b6:	f000 f9d1 	bl	801da5c <__sinit>
 801d6ba:	4b21      	ldr	r3, [pc, #132]	; (801d740 <__swbuf_r+0x98>)
 801d6bc:	429c      	cmp	r4, r3
 801d6be:	d12b      	bne.n	801d718 <__swbuf_r+0x70>
 801d6c0:	686c      	ldr	r4, [r5, #4]
 801d6c2:	69a3      	ldr	r3, [r4, #24]
 801d6c4:	60a3      	str	r3, [r4, #8]
 801d6c6:	89a3      	ldrh	r3, [r4, #12]
 801d6c8:	071a      	lsls	r2, r3, #28
 801d6ca:	d52f      	bpl.n	801d72c <__swbuf_r+0x84>
 801d6cc:	6923      	ldr	r3, [r4, #16]
 801d6ce:	b36b      	cbz	r3, 801d72c <__swbuf_r+0x84>
 801d6d0:	6923      	ldr	r3, [r4, #16]
 801d6d2:	6820      	ldr	r0, [r4, #0]
 801d6d4:	1ac0      	subs	r0, r0, r3
 801d6d6:	6963      	ldr	r3, [r4, #20]
 801d6d8:	b2f6      	uxtb	r6, r6
 801d6da:	4283      	cmp	r3, r0
 801d6dc:	4637      	mov	r7, r6
 801d6de:	dc04      	bgt.n	801d6ea <__swbuf_r+0x42>
 801d6e0:	4621      	mov	r1, r4
 801d6e2:	4628      	mov	r0, r5
 801d6e4:	f000 f926 	bl	801d934 <_fflush_r>
 801d6e8:	bb30      	cbnz	r0, 801d738 <__swbuf_r+0x90>
 801d6ea:	68a3      	ldr	r3, [r4, #8]
 801d6ec:	3b01      	subs	r3, #1
 801d6ee:	60a3      	str	r3, [r4, #8]
 801d6f0:	6823      	ldr	r3, [r4, #0]
 801d6f2:	1c5a      	adds	r2, r3, #1
 801d6f4:	6022      	str	r2, [r4, #0]
 801d6f6:	701e      	strb	r6, [r3, #0]
 801d6f8:	6963      	ldr	r3, [r4, #20]
 801d6fa:	3001      	adds	r0, #1
 801d6fc:	4283      	cmp	r3, r0
 801d6fe:	d004      	beq.n	801d70a <__swbuf_r+0x62>
 801d700:	89a3      	ldrh	r3, [r4, #12]
 801d702:	07db      	lsls	r3, r3, #31
 801d704:	d506      	bpl.n	801d714 <__swbuf_r+0x6c>
 801d706:	2e0a      	cmp	r6, #10
 801d708:	d104      	bne.n	801d714 <__swbuf_r+0x6c>
 801d70a:	4621      	mov	r1, r4
 801d70c:	4628      	mov	r0, r5
 801d70e:	f000 f911 	bl	801d934 <_fflush_r>
 801d712:	b988      	cbnz	r0, 801d738 <__swbuf_r+0x90>
 801d714:	4638      	mov	r0, r7
 801d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d718:	4b0a      	ldr	r3, [pc, #40]	; (801d744 <__swbuf_r+0x9c>)
 801d71a:	429c      	cmp	r4, r3
 801d71c:	d101      	bne.n	801d722 <__swbuf_r+0x7a>
 801d71e:	68ac      	ldr	r4, [r5, #8]
 801d720:	e7cf      	b.n	801d6c2 <__swbuf_r+0x1a>
 801d722:	4b09      	ldr	r3, [pc, #36]	; (801d748 <__swbuf_r+0xa0>)
 801d724:	429c      	cmp	r4, r3
 801d726:	bf08      	it	eq
 801d728:	68ec      	ldreq	r4, [r5, #12]
 801d72a:	e7ca      	b.n	801d6c2 <__swbuf_r+0x1a>
 801d72c:	4621      	mov	r1, r4
 801d72e:	4628      	mov	r0, r5
 801d730:	f000 f80c 	bl	801d74c <__swsetup_r>
 801d734:	2800      	cmp	r0, #0
 801d736:	d0cb      	beq.n	801d6d0 <__swbuf_r+0x28>
 801d738:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d73c:	e7ea      	b.n	801d714 <__swbuf_r+0x6c>
 801d73e:	bf00      	nop
 801d740:	08038ca8 	.word	0x08038ca8
 801d744:	08038cc8 	.word	0x08038cc8
 801d748:	08038c88 	.word	0x08038c88

0801d74c <__swsetup_r>:
 801d74c:	4b32      	ldr	r3, [pc, #200]	; (801d818 <__swsetup_r+0xcc>)
 801d74e:	b570      	push	{r4, r5, r6, lr}
 801d750:	681d      	ldr	r5, [r3, #0]
 801d752:	4606      	mov	r6, r0
 801d754:	460c      	mov	r4, r1
 801d756:	b125      	cbz	r5, 801d762 <__swsetup_r+0x16>
 801d758:	69ab      	ldr	r3, [r5, #24]
 801d75a:	b913      	cbnz	r3, 801d762 <__swsetup_r+0x16>
 801d75c:	4628      	mov	r0, r5
 801d75e:	f000 f97d 	bl	801da5c <__sinit>
 801d762:	4b2e      	ldr	r3, [pc, #184]	; (801d81c <__swsetup_r+0xd0>)
 801d764:	429c      	cmp	r4, r3
 801d766:	d10f      	bne.n	801d788 <__swsetup_r+0x3c>
 801d768:	686c      	ldr	r4, [r5, #4]
 801d76a:	89a3      	ldrh	r3, [r4, #12]
 801d76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d770:	0719      	lsls	r1, r3, #28
 801d772:	d42c      	bmi.n	801d7ce <__swsetup_r+0x82>
 801d774:	06dd      	lsls	r5, r3, #27
 801d776:	d411      	bmi.n	801d79c <__swsetup_r+0x50>
 801d778:	2309      	movs	r3, #9
 801d77a:	6033      	str	r3, [r6, #0]
 801d77c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d780:	81a3      	strh	r3, [r4, #12]
 801d782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d786:	e03e      	b.n	801d806 <__swsetup_r+0xba>
 801d788:	4b25      	ldr	r3, [pc, #148]	; (801d820 <__swsetup_r+0xd4>)
 801d78a:	429c      	cmp	r4, r3
 801d78c:	d101      	bne.n	801d792 <__swsetup_r+0x46>
 801d78e:	68ac      	ldr	r4, [r5, #8]
 801d790:	e7eb      	b.n	801d76a <__swsetup_r+0x1e>
 801d792:	4b24      	ldr	r3, [pc, #144]	; (801d824 <__swsetup_r+0xd8>)
 801d794:	429c      	cmp	r4, r3
 801d796:	bf08      	it	eq
 801d798:	68ec      	ldreq	r4, [r5, #12]
 801d79a:	e7e6      	b.n	801d76a <__swsetup_r+0x1e>
 801d79c:	0758      	lsls	r0, r3, #29
 801d79e:	d512      	bpl.n	801d7c6 <__swsetup_r+0x7a>
 801d7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d7a2:	b141      	cbz	r1, 801d7b6 <__swsetup_r+0x6a>
 801d7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7a8:	4299      	cmp	r1, r3
 801d7aa:	d002      	beq.n	801d7b2 <__swsetup_r+0x66>
 801d7ac:	4630      	mov	r0, r6
 801d7ae:	f7ff fb59 	bl	801ce64 <_free_r>
 801d7b2:	2300      	movs	r3, #0
 801d7b4:	6363      	str	r3, [r4, #52]	; 0x34
 801d7b6:	89a3      	ldrh	r3, [r4, #12]
 801d7b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d7bc:	81a3      	strh	r3, [r4, #12]
 801d7be:	2300      	movs	r3, #0
 801d7c0:	6063      	str	r3, [r4, #4]
 801d7c2:	6923      	ldr	r3, [r4, #16]
 801d7c4:	6023      	str	r3, [r4, #0]
 801d7c6:	89a3      	ldrh	r3, [r4, #12]
 801d7c8:	f043 0308 	orr.w	r3, r3, #8
 801d7cc:	81a3      	strh	r3, [r4, #12]
 801d7ce:	6923      	ldr	r3, [r4, #16]
 801d7d0:	b94b      	cbnz	r3, 801d7e6 <__swsetup_r+0x9a>
 801d7d2:	89a3      	ldrh	r3, [r4, #12]
 801d7d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d7dc:	d003      	beq.n	801d7e6 <__swsetup_r+0x9a>
 801d7de:	4621      	mov	r1, r4
 801d7e0:	4630      	mov	r0, r6
 801d7e2:	f000 fa01 	bl	801dbe8 <__smakebuf_r>
 801d7e6:	89a0      	ldrh	r0, [r4, #12]
 801d7e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7ec:	f010 0301 	ands.w	r3, r0, #1
 801d7f0:	d00a      	beq.n	801d808 <__swsetup_r+0xbc>
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	60a3      	str	r3, [r4, #8]
 801d7f6:	6963      	ldr	r3, [r4, #20]
 801d7f8:	425b      	negs	r3, r3
 801d7fa:	61a3      	str	r3, [r4, #24]
 801d7fc:	6923      	ldr	r3, [r4, #16]
 801d7fe:	b943      	cbnz	r3, 801d812 <__swsetup_r+0xc6>
 801d800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d804:	d1ba      	bne.n	801d77c <__swsetup_r+0x30>
 801d806:	bd70      	pop	{r4, r5, r6, pc}
 801d808:	0781      	lsls	r1, r0, #30
 801d80a:	bf58      	it	pl
 801d80c:	6963      	ldrpl	r3, [r4, #20]
 801d80e:	60a3      	str	r3, [r4, #8]
 801d810:	e7f4      	b.n	801d7fc <__swsetup_r+0xb0>
 801d812:	2000      	movs	r0, #0
 801d814:	e7f7      	b.n	801d806 <__swsetup_r+0xba>
 801d816:	bf00      	nop
 801d818:	24000100 	.word	0x24000100
 801d81c:	08038ca8 	.word	0x08038ca8
 801d820:	08038cc8 	.word	0x08038cc8
 801d824:	08038c88 	.word	0x08038c88

0801d828 <__sflush_r>:
 801d828:	898a      	ldrh	r2, [r1, #12]
 801d82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d82e:	4605      	mov	r5, r0
 801d830:	0710      	lsls	r0, r2, #28
 801d832:	460c      	mov	r4, r1
 801d834:	d458      	bmi.n	801d8e8 <__sflush_r+0xc0>
 801d836:	684b      	ldr	r3, [r1, #4]
 801d838:	2b00      	cmp	r3, #0
 801d83a:	dc05      	bgt.n	801d848 <__sflush_r+0x20>
 801d83c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d83e:	2b00      	cmp	r3, #0
 801d840:	dc02      	bgt.n	801d848 <__sflush_r+0x20>
 801d842:	2000      	movs	r0, #0
 801d844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d84a:	2e00      	cmp	r6, #0
 801d84c:	d0f9      	beq.n	801d842 <__sflush_r+0x1a>
 801d84e:	2300      	movs	r3, #0
 801d850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d854:	682f      	ldr	r7, [r5, #0]
 801d856:	602b      	str	r3, [r5, #0]
 801d858:	d032      	beq.n	801d8c0 <__sflush_r+0x98>
 801d85a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d85c:	89a3      	ldrh	r3, [r4, #12]
 801d85e:	075a      	lsls	r2, r3, #29
 801d860:	d505      	bpl.n	801d86e <__sflush_r+0x46>
 801d862:	6863      	ldr	r3, [r4, #4]
 801d864:	1ac0      	subs	r0, r0, r3
 801d866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d868:	b10b      	cbz	r3, 801d86e <__sflush_r+0x46>
 801d86a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d86c:	1ac0      	subs	r0, r0, r3
 801d86e:	2300      	movs	r3, #0
 801d870:	4602      	mov	r2, r0
 801d872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d874:	6a21      	ldr	r1, [r4, #32]
 801d876:	4628      	mov	r0, r5
 801d878:	47b0      	blx	r6
 801d87a:	1c43      	adds	r3, r0, #1
 801d87c:	89a3      	ldrh	r3, [r4, #12]
 801d87e:	d106      	bne.n	801d88e <__sflush_r+0x66>
 801d880:	6829      	ldr	r1, [r5, #0]
 801d882:	291d      	cmp	r1, #29
 801d884:	d82c      	bhi.n	801d8e0 <__sflush_r+0xb8>
 801d886:	4a2a      	ldr	r2, [pc, #168]	; (801d930 <__sflush_r+0x108>)
 801d888:	40ca      	lsrs	r2, r1
 801d88a:	07d6      	lsls	r6, r2, #31
 801d88c:	d528      	bpl.n	801d8e0 <__sflush_r+0xb8>
 801d88e:	2200      	movs	r2, #0
 801d890:	6062      	str	r2, [r4, #4]
 801d892:	04d9      	lsls	r1, r3, #19
 801d894:	6922      	ldr	r2, [r4, #16]
 801d896:	6022      	str	r2, [r4, #0]
 801d898:	d504      	bpl.n	801d8a4 <__sflush_r+0x7c>
 801d89a:	1c42      	adds	r2, r0, #1
 801d89c:	d101      	bne.n	801d8a2 <__sflush_r+0x7a>
 801d89e:	682b      	ldr	r3, [r5, #0]
 801d8a0:	b903      	cbnz	r3, 801d8a4 <__sflush_r+0x7c>
 801d8a2:	6560      	str	r0, [r4, #84]	; 0x54
 801d8a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d8a6:	602f      	str	r7, [r5, #0]
 801d8a8:	2900      	cmp	r1, #0
 801d8aa:	d0ca      	beq.n	801d842 <__sflush_r+0x1a>
 801d8ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d8b0:	4299      	cmp	r1, r3
 801d8b2:	d002      	beq.n	801d8ba <__sflush_r+0x92>
 801d8b4:	4628      	mov	r0, r5
 801d8b6:	f7ff fad5 	bl	801ce64 <_free_r>
 801d8ba:	2000      	movs	r0, #0
 801d8bc:	6360      	str	r0, [r4, #52]	; 0x34
 801d8be:	e7c1      	b.n	801d844 <__sflush_r+0x1c>
 801d8c0:	6a21      	ldr	r1, [r4, #32]
 801d8c2:	2301      	movs	r3, #1
 801d8c4:	4628      	mov	r0, r5
 801d8c6:	47b0      	blx	r6
 801d8c8:	1c41      	adds	r1, r0, #1
 801d8ca:	d1c7      	bne.n	801d85c <__sflush_r+0x34>
 801d8cc:	682b      	ldr	r3, [r5, #0]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d0c4      	beq.n	801d85c <__sflush_r+0x34>
 801d8d2:	2b1d      	cmp	r3, #29
 801d8d4:	d001      	beq.n	801d8da <__sflush_r+0xb2>
 801d8d6:	2b16      	cmp	r3, #22
 801d8d8:	d101      	bne.n	801d8de <__sflush_r+0xb6>
 801d8da:	602f      	str	r7, [r5, #0]
 801d8dc:	e7b1      	b.n	801d842 <__sflush_r+0x1a>
 801d8de:	89a3      	ldrh	r3, [r4, #12]
 801d8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8e4:	81a3      	strh	r3, [r4, #12]
 801d8e6:	e7ad      	b.n	801d844 <__sflush_r+0x1c>
 801d8e8:	690f      	ldr	r7, [r1, #16]
 801d8ea:	2f00      	cmp	r7, #0
 801d8ec:	d0a9      	beq.n	801d842 <__sflush_r+0x1a>
 801d8ee:	0793      	lsls	r3, r2, #30
 801d8f0:	680e      	ldr	r6, [r1, #0]
 801d8f2:	bf08      	it	eq
 801d8f4:	694b      	ldreq	r3, [r1, #20]
 801d8f6:	600f      	str	r7, [r1, #0]
 801d8f8:	bf18      	it	ne
 801d8fa:	2300      	movne	r3, #0
 801d8fc:	eba6 0807 	sub.w	r8, r6, r7
 801d900:	608b      	str	r3, [r1, #8]
 801d902:	f1b8 0f00 	cmp.w	r8, #0
 801d906:	dd9c      	ble.n	801d842 <__sflush_r+0x1a>
 801d908:	6a21      	ldr	r1, [r4, #32]
 801d90a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d90c:	4643      	mov	r3, r8
 801d90e:	463a      	mov	r2, r7
 801d910:	4628      	mov	r0, r5
 801d912:	47b0      	blx	r6
 801d914:	2800      	cmp	r0, #0
 801d916:	dc06      	bgt.n	801d926 <__sflush_r+0xfe>
 801d918:	89a3      	ldrh	r3, [r4, #12]
 801d91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d91e:	81a3      	strh	r3, [r4, #12]
 801d920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d924:	e78e      	b.n	801d844 <__sflush_r+0x1c>
 801d926:	4407      	add	r7, r0
 801d928:	eba8 0800 	sub.w	r8, r8, r0
 801d92c:	e7e9      	b.n	801d902 <__sflush_r+0xda>
 801d92e:	bf00      	nop
 801d930:	20400001 	.word	0x20400001

0801d934 <_fflush_r>:
 801d934:	b538      	push	{r3, r4, r5, lr}
 801d936:	690b      	ldr	r3, [r1, #16]
 801d938:	4605      	mov	r5, r0
 801d93a:	460c      	mov	r4, r1
 801d93c:	b913      	cbnz	r3, 801d944 <_fflush_r+0x10>
 801d93e:	2500      	movs	r5, #0
 801d940:	4628      	mov	r0, r5
 801d942:	bd38      	pop	{r3, r4, r5, pc}
 801d944:	b118      	cbz	r0, 801d94e <_fflush_r+0x1a>
 801d946:	6983      	ldr	r3, [r0, #24]
 801d948:	b90b      	cbnz	r3, 801d94e <_fflush_r+0x1a>
 801d94a:	f000 f887 	bl	801da5c <__sinit>
 801d94e:	4b14      	ldr	r3, [pc, #80]	; (801d9a0 <_fflush_r+0x6c>)
 801d950:	429c      	cmp	r4, r3
 801d952:	d11b      	bne.n	801d98c <_fflush_r+0x58>
 801d954:	686c      	ldr	r4, [r5, #4]
 801d956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d0ef      	beq.n	801d93e <_fflush_r+0xa>
 801d95e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d960:	07d0      	lsls	r0, r2, #31
 801d962:	d404      	bmi.n	801d96e <_fflush_r+0x3a>
 801d964:	0599      	lsls	r1, r3, #22
 801d966:	d402      	bmi.n	801d96e <_fflush_r+0x3a>
 801d968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d96a:	f000 f915 	bl	801db98 <__retarget_lock_acquire_recursive>
 801d96e:	4628      	mov	r0, r5
 801d970:	4621      	mov	r1, r4
 801d972:	f7ff ff59 	bl	801d828 <__sflush_r>
 801d976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d978:	07da      	lsls	r2, r3, #31
 801d97a:	4605      	mov	r5, r0
 801d97c:	d4e0      	bmi.n	801d940 <_fflush_r+0xc>
 801d97e:	89a3      	ldrh	r3, [r4, #12]
 801d980:	059b      	lsls	r3, r3, #22
 801d982:	d4dd      	bmi.n	801d940 <_fflush_r+0xc>
 801d984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d986:	f000 f908 	bl	801db9a <__retarget_lock_release_recursive>
 801d98a:	e7d9      	b.n	801d940 <_fflush_r+0xc>
 801d98c:	4b05      	ldr	r3, [pc, #20]	; (801d9a4 <_fflush_r+0x70>)
 801d98e:	429c      	cmp	r4, r3
 801d990:	d101      	bne.n	801d996 <_fflush_r+0x62>
 801d992:	68ac      	ldr	r4, [r5, #8]
 801d994:	e7df      	b.n	801d956 <_fflush_r+0x22>
 801d996:	4b04      	ldr	r3, [pc, #16]	; (801d9a8 <_fflush_r+0x74>)
 801d998:	429c      	cmp	r4, r3
 801d99a:	bf08      	it	eq
 801d99c:	68ec      	ldreq	r4, [r5, #12]
 801d99e:	e7da      	b.n	801d956 <_fflush_r+0x22>
 801d9a0:	08038ca8 	.word	0x08038ca8
 801d9a4:	08038cc8 	.word	0x08038cc8
 801d9a8:	08038c88 	.word	0x08038c88

0801d9ac <std>:
 801d9ac:	2300      	movs	r3, #0
 801d9ae:	b510      	push	{r4, lr}
 801d9b0:	4604      	mov	r4, r0
 801d9b2:	e9c0 3300 	strd	r3, r3, [r0]
 801d9b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d9ba:	6083      	str	r3, [r0, #8]
 801d9bc:	8181      	strh	r1, [r0, #12]
 801d9be:	6643      	str	r3, [r0, #100]	; 0x64
 801d9c0:	81c2      	strh	r2, [r0, #14]
 801d9c2:	6183      	str	r3, [r0, #24]
 801d9c4:	4619      	mov	r1, r3
 801d9c6:	2208      	movs	r2, #8
 801d9c8:	305c      	adds	r0, #92	; 0x5c
 801d9ca:	f7ff fa43 	bl	801ce54 <memset>
 801d9ce:	4b05      	ldr	r3, [pc, #20]	; (801d9e4 <std+0x38>)
 801d9d0:	6263      	str	r3, [r4, #36]	; 0x24
 801d9d2:	4b05      	ldr	r3, [pc, #20]	; (801d9e8 <std+0x3c>)
 801d9d4:	62a3      	str	r3, [r4, #40]	; 0x28
 801d9d6:	4b05      	ldr	r3, [pc, #20]	; (801d9ec <std+0x40>)
 801d9d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d9da:	4b05      	ldr	r3, [pc, #20]	; (801d9f0 <std+0x44>)
 801d9dc:	6224      	str	r4, [r4, #32]
 801d9de:	6323      	str	r3, [r4, #48]	; 0x30
 801d9e0:	bd10      	pop	{r4, pc}
 801d9e2:	bf00      	nop
 801d9e4:	0801dc81 	.word	0x0801dc81
 801d9e8:	0801dca3 	.word	0x0801dca3
 801d9ec:	0801dcdb 	.word	0x0801dcdb
 801d9f0:	0801dcff 	.word	0x0801dcff

0801d9f4 <_cleanup_r>:
 801d9f4:	4901      	ldr	r1, [pc, #4]	; (801d9fc <_cleanup_r+0x8>)
 801d9f6:	f000 b8af 	b.w	801db58 <_fwalk_reent>
 801d9fa:	bf00      	nop
 801d9fc:	0801d935 	.word	0x0801d935

0801da00 <__sfmoreglue>:
 801da00:	b570      	push	{r4, r5, r6, lr}
 801da02:	2268      	movs	r2, #104	; 0x68
 801da04:	1e4d      	subs	r5, r1, #1
 801da06:	4355      	muls	r5, r2
 801da08:	460e      	mov	r6, r1
 801da0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801da0e:	f7ff fa95 	bl	801cf3c <_malloc_r>
 801da12:	4604      	mov	r4, r0
 801da14:	b140      	cbz	r0, 801da28 <__sfmoreglue+0x28>
 801da16:	2100      	movs	r1, #0
 801da18:	e9c0 1600 	strd	r1, r6, [r0]
 801da1c:	300c      	adds	r0, #12
 801da1e:	60a0      	str	r0, [r4, #8]
 801da20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801da24:	f7ff fa16 	bl	801ce54 <memset>
 801da28:	4620      	mov	r0, r4
 801da2a:	bd70      	pop	{r4, r5, r6, pc}

0801da2c <__sfp_lock_acquire>:
 801da2c:	4801      	ldr	r0, [pc, #4]	; (801da34 <__sfp_lock_acquire+0x8>)
 801da2e:	f000 b8b3 	b.w	801db98 <__retarget_lock_acquire_recursive>
 801da32:	bf00      	nop
 801da34:	24003761 	.word	0x24003761

0801da38 <__sfp_lock_release>:
 801da38:	4801      	ldr	r0, [pc, #4]	; (801da40 <__sfp_lock_release+0x8>)
 801da3a:	f000 b8ae 	b.w	801db9a <__retarget_lock_release_recursive>
 801da3e:	bf00      	nop
 801da40:	24003761 	.word	0x24003761

0801da44 <__sinit_lock_acquire>:
 801da44:	4801      	ldr	r0, [pc, #4]	; (801da4c <__sinit_lock_acquire+0x8>)
 801da46:	f000 b8a7 	b.w	801db98 <__retarget_lock_acquire_recursive>
 801da4a:	bf00      	nop
 801da4c:	24003762 	.word	0x24003762

0801da50 <__sinit_lock_release>:
 801da50:	4801      	ldr	r0, [pc, #4]	; (801da58 <__sinit_lock_release+0x8>)
 801da52:	f000 b8a2 	b.w	801db9a <__retarget_lock_release_recursive>
 801da56:	bf00      	nop
 801da58:	24003762 	.word	0x24003762

0801da5c <__sinit>:
 801da5c:	b510      	push	{r4, lr}
 801da5e:	4604      	mov	r4, r0
 801da60:	f7ff fff0 	bl	801da44 <__sinit_lock_acquire>
 801da64:	69a3      	ldr	r3, [r4, #24]
 801da66:	b11b      	cbz	r3, 801da70 <__sinit+0x14>
 801da68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da6c:	f7ff bff0 	b.w	801da50 <__sinit_lock_release>
 801da70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801da74:	6523      	str	r3, [r4, #80]	; 0x50
 801da76:	4b13      	ldr	r3, [pc, #76]	; (801dac4 <__sinit+0x68>)
 801da78:	4a13      	ldr	r2, [pc, #76]	; (801dac8 <__sinit+0x6c>)
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	62a2      	str	r2, [r4, #40]	; 0x28
 801da7e:	42a3      	cmp	r3, r4
 801da80:	bf04      	itt	eq
 801da82:	2301      	moveq	r3, #1
 801da84:	61a3      	streq	r3, [r4, #24]
 801da86:	4620      	mov	r0, r4
 801da88:	f000 f820 	bl	801dacc <__sfp>
 801da8c:	6060      	str	r0, [r4, #4]
 801da8e:	4620      	mov	r0, r4
 801da90:	f000 f81c 	bl	801dacc <__sfp>
 801da94:	60a0      	str	r0, [r4, #8]
 801da96:	4620      	mov	r0, r4
 801da98:	f000 f818 	bl	801dacc <__sfp>
 801da9c:	2200      	movs	r2, #0
 801da9e:	60e0      	str	r0, [r4, #12]
 801daa0:	2104      	movs	r1, #4
 801daa2:	6860      	ldr	r0, [r4, #4]
 801daa4:	f7ff ff82 	bl	801d9ac <std>
 801daa8:	68a0      	ldr	r0, [r4, #8]
 801daaa:	2201      	movs	r2, #1
 801daac:	2109      	movs	r1, #9
 801daae:	f7ff ff7d 	bl	801d9ac <std>
 801dab2:	68e0      	ldr	r0, [r4, #12]
 801dab4:	2202      	movs	r2, #2
 801dab6:	2112      	movs	r1, #18
 801dab8:	f7ff ff78 	bl	801d9ac <std>
 801dabc:	2301      	movs	r3, #1
 801dabe:	61a3      	str	r3, [r4, #24]
 801dac0:	e7d2      	b.n	801da68 <__sinit+0xc>
 801dac2:	bf00      	nop
 801dac4:	08038c50 	.word	0x08038c50
 801dac8:	0801d9f5 	.word	0x0801d9f5

0801dacc <__sfp>:
 801dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dace:	4607      	mov	r7, r0
 801dad0:	f7ff ffac 	bl	801da2c <__sfp_lock_acquire>
 801dad4:	4b1e      	ldr	r3, [pc, #120]	; (801db50 <__sfp+0x84>)
 801dad6:	681e      	ldr	r6, [r3, #0]
 801dad8:	69b3      	ldr	r3, [r6, #24]
 801dada:	b913      	cbnz	r3, 801dae2 <__sfp+0x16>
 801dadc:	4630      	mov	r0, r6
 801dade:	f7ff ffbd 	bl	801da5c <__sinit>
 801dae2:	3648      	adds	r6, #72	; 0x48
 801dae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dae8:	3b01      	subs	r3, #1
 801daea:	d503      	bpl.n	801daf4 <__sfp+0x28>
 801daec:	6833      	ldr	r3, [r6, #0]
 801daee:	b30b      	cbz	r3, 801db34 <__sfp+0x68>
 801daf0:	6836      	ldr	r6, [r6, #0]
 801daf2:	e7f7      	b.n	801dae4 <__sfp+0x18>
 801daf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801daf8:	b9d5      	cbnz	r5, 801db30 <__sfp+0x64>
 801dafa:	4b16      	ldr	r3, [pc, #88]	; (801db54 <__sfp+0x88>)
 801dafc:	60e3      	str	r3, [r4, #12]
 801dafe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801db02:	6665      	str	r5, [r4, #100]	; 0x64
 801db04:	f000 f847 	bl	801db96 <__retarget_lock_init_recursive>
 801db08:	f7ff ff96 	bl	801da38 <__sfp_lock_release>
 801db0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801db10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801db14:	6025      	str	r5, [r4, #0]
 801db16:	61a5      	str	r5, [r4, #24]
 801db18:	2208      	movs	r2, #8
 801db1a:	4629      	mov	r1, r5
 801db1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801db20:	f7ff f998 	bl	801ce54 <memset>
 801db24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801db28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801db2c:	4620      	mov	r0, r4
 801db2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db30:	3468      	adds	r4, #104	; 0x68
 801db32:	e7d9      	b.n	801dae8 <__sfp+0x1c>
 801db34:	2104      	movs	r1, #4
 801db36:	4638      	mov	r0, r7
 801db38:	f7ff ff62 	bl	801da00 <__sfmoreglue>
 801db3c:	4604      	mov	r4, r0
 801db3e:	6030      	str	r0, [r6, #0]
 801db40:	2800      	cmp	r0, #0
 801db42:	d1d5      	bne.n	801daf0 <__sfp+0x24>
 801db44:	f7ff ff78 	bl	801da38 <__sfp_lock_release>
 801db48:	230c      	movs	r3, #12
 801db4a:	603b      	str	r3, [r7, #0]
 801db4c:	e7ee      	b.n	801db2c <__sfp+0x60>
 801db4e:	bf00      	nop
 801db50:	08038c50 	.word	0x08038c50
 801db54:	ffff0001 	.word	0xffff0001

0801db58 <_fwalk_reent>:
 801db58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db5c:	4606      	mov	r6, r0
 801db5e:	4688      	mov	r8, r1
 801db60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801db64:	2700      	movs	r7, #0
 801db66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801db6a:	f1b9 0901 	subs.w	r9, r9, #1
 801db6e:	d505      	bpl.n	801db7c <_fwalk_reent+0x24>
 801db70:	6824      	ldr	r4, [r4, #0]
 801db72:	2c00      	cmp	r4, #0
 801db74:	d1f7      	bne.n	801db66 <_fwalk_reent+0xe>
 801db76:	4638      	mov	r0, r7
 801db78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db7c:	89ab      	ldrh	r3, [r5, #12]
 801db7e:	2b01      	cmp	r3, #1
 801db80:	d907      	bls.n	801db92 <_fwalk_reent+0x3a>
 801db82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801db86:	3301      	adds	r3, #1
 801db88:	d003      	beq.n	801db92 <_fwalk_reent+0x3a>
 801db8a:	4629      	mov	r1, r5
 801db8c:	4630      	mov	r0, r6
 801db8e:	47c0      	blx	r8
 801db90:	4307      	orrs	r7, r0
 801db92:	3568      	adds	r5, #104	; 0x68
 801db94:	e7e9      	b.n	801db6a <_fwalk_reent+0x12>

0801db96 <__retarget_lock_init_recursive>:
 801db96:	4770      	bx	lr

0801db98 <__retarget_lock_acquire_recursive>:
 801db98:	4770      	bx	lr

0801db9a <__retarget_lock_release_recursive>:
 801db9a:	4770      	bx	lr

0801db9c <__swhatbuf_r>:
 801db9c:	b570      	push	{r4, r5, r6, lr}
 801db9e:	460e      	mov	r6, r1
 801dba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dba4:	2900      	cmp	r1, #0
 801dba6:	b096      	sub	sp, #88	; 0x58
 801dba8:	4614      	mov	r4, r2
 801dbaa:	461d      	mov	r5, r3
 801dbac:	da08      	bge.n	801dbc0 <__swhatbuf_r+0x24>
 801dbae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	602a      	str	r2, [r5, #0]
 801dbb6:	061a      	lsls	r2, r3, #24
 801dbb8:	d410      	bmi.n	801dbdc <__swhatbuf_r+0x40>
 801dbba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dbbe:	e00e      	b.n	801dbde <__swhatbuf_r+0x42>
 801dbc0:	466a      	mov	r2, sp
 801dbc2:	f000 f8c3 	bl	801dd4c <_fstat_r>
 801dbc6:	2800      	cmp	r0, #0
 801dbc8:	dbf1      	blt.n	801dbae <__swhatbuf_r+0x12>
 801dbca:	9a01      	ldr	r2, [sp, #4]
 801dbcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dbd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dbd4:	425a      	negs	r2, r3
 801dbd6:	415a      	adcs	r2, r3
 801dbd8:	602a      	str	r2, [r5, #0]
 801dbda:	e7ee      	b.n	801dbba <__swhatbuf_r+0x1e>
 801dbdc:	2340      	movs	r3, #64	; 0x40
 801dbde:	2000      	movs	r0, #0
 801dbe0:	6023      	str	r3, [r4, #0]
 801dbe2:	b016      	add	sp, #88	; 0x58
 801dbe4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dbe8 <__smakebuf_r>:
 801dbe8:	898b      	ldrh	r3, [r1, #12]
 801dbea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dbec:	079d      	lsls	r5, r3, #30
 801dbee:	4606      	mov	r6, r0
 801dbf0:	460c      	mov	r4, r1
 801dbf2:	d507      	bpl.n	801dc04 <__smakebuf_r+0x1c>
 801dbf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dbf8:	6023      	str	r3, [r4, #0]
 801dbfa:	6123      	str	r3, [r4, #16]
 801dbfc:	2301      	movs	r3, #1
 801dbfe:	6163      	str	r3, [r4, #20]
 801dc00:	b002      	add	sp, #8
 801dc02:	bd70      	pop	{r4, r5, r6, pc}
 801dc04:	ab01      	add	r3, sp, #4
 801dc06:	466a      	mov	r2, sp
 801dc08:	f7ff ffc8 	bl	801db9c <__swhatbuf_r>
 801dc0c:	9900      	ldr	r1, [sp, #0]
 801dc0e:	4605      	mov	r5, r0
 801dc10:	4630      	mov	r0, r6
 801dc12:	f7ff f993 	bl	801cf3c <_malloc_r>
 801dc16:	b948      	cbnz	r0, 801dc2c <__smakebuf_r+0x44>
 801dc18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc1c:	059a      	lsls	r2, r3, #22
 801dc1e:	d4ef      	bmi.n	801dc00 <__smakebuf_r+0x18>
 801dc20:	f023 0303 	bic.w	r3, r3, #3
 801dc24:	f043 0302 	orr.w	r3, r3, #2
 801dc28:	81a3      	strh	r3, [r4, #12]
 801dc2a:	e7e3      	b.n	801dbf4 <__smakebuf_r+0xc>
 801dc2c:	4b0d      	ldr	r3, [pc, #52]	; (801dc64 <__smakebuf_r+0x7c>)
 801dc2e:	62b3      	str	r3, [r6, #40]	; 0x28
 801dc30:	89a3      	ldrh	r3, [r4, #12]
 801dc32:	6020      	str	r0, [r4, #0]
 801dc34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc38:	81a3      	strh	r3, [r4, #12]
 801dc3a:	9b00      	ldr	r3, [sp, #0]
 801dc3c:	6163      	str	r3, [r4, #20]
 801dc3e:	9b01      	ldr	r3, [sp, #4]
 801dc40:	6120      	str	r0, [r4, #16]
 801dc42:	b15b      	cbz	r3, 801dc5c <__smakebuf_r+0x74>
 801dc44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc48:	4630      	mov	r0, r6
 801dc4a:	f000 f891 	bl	801dd70 <_isatty_r>
 801dc4e:	b128      	cbz	r0, 801dc5c <__smakebuf_r+0x74>
 801dc50:	89a3      	ldrh	r3, [r4, #12]
 801dc52:	f023 0303 	bic.w	r3, r3, #3
 801dc56:	f043 0301 	orr.w	r3, r3, #1
 801dc5a:	81a3      	strh	r3, [r4, #12]
 801dc5c:	89a0      	ldrh	r0, [r4, #12]
 801dc5e:	4305      	orrs	r5, r0
 801dc60:	81a5      	strh	r5, [r4, #12]
 801dc62:	e7cd      	b.n	801dc00 <__smakebuf_r+0x18>
 801dc64:	0801d9f5 	.word	0x0801d9f5

0801dc68 <__malloc_lock>:
 801dc68:	4801      	ldr	r0, [pc, #4]	; (801dc70 <__malloc_lock+0x8>)
 801dc6a:	f7ff bf95 	b.w	801db98 <__retarget_lock_acquire_recursive>
 801dc6e:	bf00      	nop
 801dc70:	24003760 	.word	0x24003760

0801dc74 <__malloc_unlock>:
 801dc74:	4801      	ldr	r0, [pc, #4]	; (801dc7c <__malloc_unlock+0x8>)
 801dc76:	f7ff bf90 	b.w	801db9a <__retarget_lock_release_recursive>
 801dc7a:	bf00      	nop
 801dc7c:	24003760 	.word	0x24003760

0801dc80 <__sread>:
 801dc80:	b510      	push	{r4, lr}
 801dc82:	460c      	mov	r4, r1
 801dc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc88:	f000 f894 	bl	801ddb4 <_read_r>
 801dc8c:	2800      	cmp	r0, #0
 801dc8e:	bfab      	itete	ge
 801dc90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dc92:	89a3      	ldrhlt	r3, [r4, #12]
 801dc94:	181b      	addge	r3, r3, r0
 801dc96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dc9a:	bfac      	ite	ge
 801dc9c:	6563      	strge	r3, [r4, #84]	; 0x54
 801dc9e:	81a3      	strhlt	r3, [r4, #12]
 801dca0:	bd10      	pop	{r4, pc}

0801dca2 <__swrite>:
 801dca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dca6:	461f      	mov	r7, r3
 801dca8:	898b      	ldrh	r3, [r1, #12]
 801dcaa:	05db      	lsls	r3, r3, #23
 801dcac:	4605      	mov	r5, r0
 801dcae:	460c      	mov	r4, r1
 801dcb0:	4616      	mov	r6, r2
 801dcb2:	d505      	bpl.n	801dcc0 <__swrite+0x1e>
 801dcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcb8:	2302      	movs	r3, #2
 801dcba:	2200      	movs	r2, #0
 801dcbc:	f000 f868 	bl	801dd90 <_lseek_r>
 801dcc0:	89a3      	ldrh	r3, [r4, #12]
 801dcc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dcc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dcca:	81a3      	strh	r3, [r4, #12]
 801dccc:	4632      	mov	r2, r6
 801dcce:	463b      	mov	r3, r7
 801dcd0:	4628      	mov	r0, r5
 801dcd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dcd6:	f000 b817 	b.w	801dd08 <_write_r>

0801dcda <__sseek>:
 801dcda:	b510      	push	{r4, lr}
 801dcdc:	460c      	mov	r4, r1
 801dcde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dce2:	f000 f855 	bl	801dd90 <_lseek_r>
 801dce6:	1c43      	adds	r3, r0, #1
 801dce8:	89a3      	ldrh	r3, [r4, #12]
 801dcea:	bf15      	itete	ne
 801dcec:	6560      	strne	r0, [r4, #84]	; 0x54
 801dcee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dcf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dcf6:	81a3      	strheq	r3, [r4, #12]
 801dcf8:	bf18      	it	ne
 801dcfa:	81a3      	strhne	r3, [r4, #12]
 801dcfc:	bd10      	pop	{r4, pc}

0801dcfe <__sclose>:
 801dcfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd02:	f000 b813 	b.w	801dd2c <_close_r>
	...

0801dd08 <_write_r>:
 801dd08:	b538      	push	{r3, r4, r5, lr}
 801dd0a:	4d07      	ldr	r5, [pc, #28]	; (801dd28 <_write_r+0x20>)
 801dd0c:	4604      	mov	r4, r0
 801dd0e:	4608      	mov	r0, r1
 801dd10:	4611      	mov	r1, r2
 801dd12:	2200      	movs	r2, #0
 801dd14:	602a      	str	r2, [r5, #0]
 801dd16:	461a      	mov	r2, r3
 801dd18:	f7ed faf3 	bl	800b302 <_write>
 801dd1c:	1c43      	adds	r3, r0, #1
 801dd1e:	d102      	bne.n	801dd26 <_write_r+0x1e>
 801dd20:	682b      	ldr	r3, [r5, #0]
 801dd22:	b103      	cbz	r3, 801dd26 <_write_r+0x1e>
 801dd24:	6023      	str	r3, [r4, #0]
 801dd26:	bd38      	pop	{r3, r4, r5, pc}
 801dd28:	24003764 	.word	0x24003764

0801dd2c <_close_r>:
 801dd2c:	b538      	push	{r3, r4, r5, lr}
 801dd2e:	4d06      	ldr	r5, [pc, #24]	; (801dd48 <_close_r+0x1c>)
 801dd30:	2300      	movs	r3, #0
 801dd32:	4604      	mov	r4, r0
 801dd34:	4608      	mov	r0, r1
 801dd36:	602b      	str	r3, [r5, #0]
 801dd38:	f7ed faff 	bl	800b33a <_close>
 801dd3c:	1c43      	adds	r3, r0, #1
 801dd3e:	d102      	bne.n	801dd46 <_close_r+0x1a>
 801dd40:	682b      	ldr	r3, [r5, #0]
 801dd42:	b103      	cbz	r3, 801dd46 <_close_r+0x1a>
 801dd44:	6023      	str	r3, [r4, #0]
 801dd46:	bd38      	pop	{r3, r4, r5, pc}
 801dd48:	24003764 	.word	0x24003764

0801dd4c <_fstat_r>:
 801dd4c:	b538      	push	{r3, r4, r5, lr}
 801dd4e:	4d07      	ldr	r5, [pc, #28]	; (801dd6c <_fstat_r+0x20>)
 801dd50:	2300      	movs	r3, #0
 801dd52:	4604      	mov	r4, r0
 801dd54:	4608      	mov	r0, r1
 801dd56:	4611      	mov	r1, r2
 801dd58:	602b      	str	r3, [r5, #0]
 801dd5a:	f7ed fafa 	bl	800b352 <_fstat>
 801dd5e:	1c43      	adds	r3, r0, #1
 801dd60:	d102      	bne.n	801dd68 <_fstat_r+0x1c>
 801dd62:	682b      	ldr	r3, [r5, #0]
 801dd64:	b103      	cbz	r3, 801dd68 <_fstat_r+0x1c>
 801dd66:	6023      	str	r3, [r4, #0]
 801dd68:	bd38      	pop	{r3, r4, r5, pc}
 801dd6a:	bf00      	nop
 801dd6c:	24003764 	.word	0x24003764

0801dd70 <_isatty_r>:
 801dd70:	b538      	push	{r3, r4, r5, lr}
 801dd72:	4d06      	ldr	r5, [pc, #24]	; (801dd8c <_isatty_r+0x1c>)
 801dd74:	2300      	movs	r3, #0
 801dd76:	4604      	mov	r4, r0
 801dd78:	4608      	mov	r0, r1
 801dd7a:	602b      	str	r3, [r5, #0]
 801dd7c:	f7ed faf9 	bl	800b372 <_isatty>
 801dd80:	1c43      	adds	r3, r0, #1
 801dd82:	d102      	bne.n	801dd8a <_isatty_r+0x1a>
 801dd84:	682b      	ldr	r3, [r5, #0]
 801dd86:	b103      	cbz	r3, 801dd8a <_isatty_r+0x1a>
 801dd88:	6023      	str	r3, [r4, #0]
 801dd8a:	bd38      	pop	{r3, r4, r5, pc}
 801dd8c:	24003764 	.word	0x24003764

0801dd90 <_lseek_r>:
 801dd90:	b538      	push	{r3, r4, r5, lr}
 801dd92:	4d07      	ldr	r5, [pc, #28]	; (801ddb0 <_lseek_r+0x20>)
 801dd94:	4604      	mov	r4, r0
 801dd96:	4608      	mov	r0, r1
 801dd98:	4611      	mov	r1, r2
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	602a      	str	r2, [r5, #0]
 801dd9e:	461a      	mov	r2, r3
 801dda0:	f7ed faf2 	bl	800b388 <_lseek>
 801dda4:	1c43      	adds	r3, r0, #1
 801dda6:	d102      	bne.n	801ddae <_lseek_r+0x1e>
 801dda8:	682b      	ldr	r3, [r5, #0]
 801ddaa:	b103      	cbz	r3, 801ddae <_lseek_r+0x1e>
 801ddac:	6023      	str	r3, [r4, #0]
 801ddae:	bd38      	pop	{r3, r4, r5, pc}
 801ddb0:	24003764 	.word	0x24003764

0801ddb4 <_read_r>:
 801ddb4:	b538      	push	{r3, r4, r5, lr}
 801ddb6:	4d07      	ldr	r5, [pc, #28]	; (801ddd4 <_read_r+0x20>)
 801ddb8:	4604      	mov	r4, r0
 801ddba:	4608      	mov	r0, r1
 801ddbc:	4611      	mov	r1, r2
 801ddbe:	2200      	movs	r2, #0
 801ddc0:	602a      	str	r2, [r5, #0]
 801ddc2:	461a      	mov	r2, r3
 801ddc4:	f7ed fa80 	bl	800b2c8 <_read>
 801ddc8:	1c43      	adds	r3, r0, #1
 801ddca:	d102      	bne.n	801ddd2 <_read_r+0x1e>
 801ddcc:	682b      	ldr	r3, [r5, #0]
 801ddce:	b103      	cbz	r3, 801ddd2 <_read_r+0x1e>
 801ddd0:	6023      	str	r3, [r4, #0]
 801ddd2:	bd38      	pop	{r3, r4, r5, pc}
 801ddd4:	24003764 	.word	0x24003764

0801ddd8 <_init>:
 801ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddda:	bf00      	nop
 801dddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ddde:	bc08      	pop	{r3}
 801dde0:	469e      	mov	lr, r3
 801dde2:	4770      	bx	lr

0801dde4 <_fini>:
 801dde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dde6:	bf00      	nop
 801dde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ddea:	bc08      	pop	{r3}
 801ddec:	469e      	mov	lr, r3
 801ddee:	4770      	bx	lr
