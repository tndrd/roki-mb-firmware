
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001aef8  0801dce0  0801dce0  0002dce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08038bd8  08038bd8  00048bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08038be0  08038be0  00048be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08038be8  08038be8  00048be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08038bf0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003600  24000168  08038d54  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003768  08038d54  00053768  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00051caf  00000000  00000000  00050192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007625  00000000  00000000  000a1e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003660  00000000  00000000  000a9468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000033e0  00000000  00000000  000acac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000454ee  00000000  00000000  000afea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ac89  00000000  00000000  000f5396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00190246  00000000  00000000  0013001f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002c0265  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f844  00000000  00000000  002c02b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000168 	.word	0x24000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801dcc8 	.word	0x0801dcc8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400016c 	.word	0x2400016c
 80002dc:	0801dcc8 	.word	0x0801dcc8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d105      	bne.n	80006a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80006a0:	210c      	movs	r1, #12
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80006a4:	f01c fabc 	bl	801cc20 <__assert_func>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0801dce0 	.word	0x0801dce0
 80006b8:	0801dcec 	.word	0x0801dcec
 80006bc:	0801dd18 	.word	0x0801dd18

080006c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80006d2:	230c      	movs	r3, #12
 80006d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 faab 	bl	8000c3c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b99      	ldr	r3, [pc, #612]	; (8000958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80006f4:	4a99      	ldr	r2, [pc, #612]	; (800095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80006f6:	499a      	ldr	r1, [pc, #616]	; (8000960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80006f8:	2001      	movs	r0, #1
 80006fa:	f008 fc2a 	bl	8008f52 <bhy2_init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e11d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f008 fc04 	bl	8008f22 <bhy2_soft_reset>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 800072a:	2302      	movs	r3, #2
 800072c:	e10f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	f107 0316 	add.w	r3, r7, #22
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 fadf 	bl	8008cfa <bhy2_get_product_id>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 800074c:	2303      	movs	r3, #3
 800074e:	e0fe      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	2b89      	cmp	r3, #137	; 0x89
 8000754:	d001      	beq.n	800075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8000756:	2304      	movs	r3, #4
 8000758:	e0f9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f008 fb71 	bl	8008e48 <bhy2_set_host_interrupt_ctrl>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8000776:	2305      	movs	r3, #5
 8000778:	e0e9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f107 0313 	add.w	r3, r7, #19
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f008 fb7c 	bl	8008e80 <bhy2_get_host_interrupt_ctrl>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8000798:	2306      	movs	r3, #6
 800079a:	e0d8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fba1 	bl	8008eea <bhy2_set_host_intf_ctrl>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	e0c8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 facc 	bl	8008d62 <bhy2_get_boot_status>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	e0b7      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80007de:	7cbb      	ldrb	r3, [r7, #18]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	e0b0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	495c      	ldr	r1, [pc, #368]	; (8000964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80007f2:	485d      	ldr	r0, [pc, #372]	; (8000968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80007f4:	f008 faf1 	bl	8008dda <bhy2_upload_firmware_to_ram>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8000808:	2309      	movs	r3, #9
 800080a:	e0a0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	f107 0311 	add.w	r3, r7, #17
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f008 fc83 	bl	8009120 <bhy2_get_error_value>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 800082a:	230a      	movs	r3, #10
 800082c:	e08f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8000834:	230b      	movs	r3, #11
 8000836:	e08a      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4618      	mov	r0, r3
 800083c:	f008 faec 	bl	8008e18 <bhy2_boot_from_ram>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8000850:	230c      	movs	r3, #12
 8000852:	e07c      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f107 0311 	add.w	r3, r7, #17
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f008 fc5f 	bl	8009120 <bhy2_get_error_value>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8000872:	230d      	movs	r3, #13
 8000874:	e06b      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 800087c:	230e      	movs	r3, #14
 800087e:	e066      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f008 fa50 	bl	8008d2e <bhy2_get_kernel_version>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	e055      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	e050      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80008b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	492d      	ldr	r1, [pc, #180]	; (800096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f008 fb74 	bl	8008fa6 <bhy2_register_fifo_parse_callback>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80008ce:	2311      	movs	r3, #17
 80008d0:	e03d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f98b 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 80008de:	4604      	mov	r4, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f991 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80008ec:	4601      	mov	r1, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f008 f8af 	bl	8008a56 <bhy2_get_and_process_fifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8000908:	2312      	movs	r3, #18
 800090a:	e020      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fb78 	bl	8009004 <bhy2_update_virtual_sensor_list>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8000924:	2310      	movs	r3, #16
 8000926:	e012      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f008 f9c0 	bl	8008cb8 <bhy2_set_virt_sensor_cfg>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8000948:	2311      	movs	r3, #17
 800094a:	e000      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08000e0d 	.word	0x08000e0d
 800095c:	08000d89 	.word	0x08000d89
 8000960:	08000d0d 	.word	0x08000d0d
 8000964:	0001a66c 	.word	0x0001a66c
 8000968:	0801e44c 	.word	0x0801e44c
 800096c:	08000a11 	.word	0x08000a11

08000970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f008 fa96 	bl	8008eb6 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d01d      	beq.n	80009cc <_ZN10BHYWrapper4PollEv+0x5c>
		assert(
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f92c 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 800099c:	4604      	mov	r4, r0
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f932 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80009aa:	4601      	mov	r1, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f008 f850 	bl	8008a56 <bhy2_get_and_process_fifo>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <_ZN10BHYWrapper4PollEv+0x58>
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <_ZN10BHYWrapper4PollEv+0x68>)
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <_ZN10BHYWrapper4PollEv+0x6c>)
 80009c0:	2166      	movs	r1, #102	; 0x66
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <_ZN10BHYWrapper4PollEv+0x70>)
 80009c4:	f01c f92c 	bl	801cc20 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		return true;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <_ZN10BHYWrapper4PollEv+0x5e>
	}

	return false;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	0801dd34 	.word	0x0801dd34
 80009dc:	0801dd88 	.word	0x0801dd88
 80009e0:	0801dd18 	.word	0x0801dd18

080009e4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80009e4:	b4b0      	push	{r4, r5, r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f6:	4615      	mov	r5, r2
 80009f8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80009fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	602b      	str	r3, [r5, #0]
}
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bcb0      	pop	{r4, r5, r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8000a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a14:	b08e      	sub	sp, #56	; 0x38
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d105      	bne.n	8000a32 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8000a26:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8000a28:	4a40      	ldr	r2, [pc, #256]	; (8000b2c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8000a2a:	2177      	movs	r1, #119	; 0x77
 8000a2c:	4840      	ldr	r0, [pc, #256]	; (8000b30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8000a2e:	f01c f8f7 	bl	801cc20 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8000a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a34:	3308      	adds	r3, #8
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	2b0b      	cmp	r3, #11
 8000a42:	d167      	bne.n	8000b14 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f107 0214 	add.w	r2, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f009 fced 	bl	800a42e <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	f04f 0a00 	mov.w	sl, #0
 8000a6c:	f04f 0b00 	mov.w	fp, #0
 8000a70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000a74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000a78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000a7c:	4652      	mov	r2, sl
 8000a7e:	465b      	mov	r3, fp
 8000a80:	ebb2 0800 	subs.w	r8, r2, r0
 8000a84:	eb63 0901 	sbc.w	r9, r3, r1
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000a94:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000a98:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000a9c:	ebb2 0408 	subs.w	r4, r2, r8
 8000aa0:	eb63 0509 	sbc.w	r5, r3, r9
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	00eb      	lsls	r3, r5, #3
 8000aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab2:	00e2      	lsls	r2, r4, #3
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	1823      	adds	r3, r4, r0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	eb45 0301 	adc.w	r3, r5, r1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ac6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8000aca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ace:	a314      	add	r3, pc, #80	; (adr r3, 8000b20 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	f7ff fc54 	bl	8000380 <__aeabi_uldivmod>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ade:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8000ae0:	6a3a      	ldr	r2, [r7, #32]
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8000af2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8000afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8000b02:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b08:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8000b0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	80da      	strh	r2, [r3, #6]
 8000b12:	e000      	b.n	8000b16 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8000b14:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000b1e:	bf00      	nop
 8000b20:	3b9aca00 	.word	0x3b9aca00
 8000b24:	00000000 	.word	0x00000000
 8000b28:	0801dda0 	.word	0x0801dda0
 8000b2c:	0801dda8 	.word	0x0801dda8
 8000b30:	0801dd18 	.word	0x0801dd18
 8000b34:	3b9aca00 	.word	0x3b9aca00

08000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	assert(dest);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b4e:	2190      	movs	r1, #144	; 0x90
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b52:	f01c f865 	bl	801cc20 <__assert_func>
	assert(size);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b60:	2191      	movs	r1, #145	; 0x91
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b64:	f01c f85c 	bl	801cc20 <__assert_func>

	uint8_t *ptr = dest;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
	 /*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	7c1a      	ldrb	r2, [r3, #16]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2211      	movs	r2, #17
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0801ddf4 	.word	0x0801ddf4
 8000be8:	0801ddfc 	.word	0x0801ddfc
 8000bec:	0801dd18 	.word	0x0801dd18
 8000bf0:	0801de38 	.word	0x0801de38

08000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f811 	bl	8000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	24000184 	.word	0x24000184

08000c5c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f013 fd1f 	bl	80146b4 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f014 fba8 	bl	80153d0 <HAL_SPI_GetState>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <_Z11spiTransmitPht+0x36>
 8000c90:	e7f1      	b.n	8000c76 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	b25b      	sxtb	r3, r3
  }
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000184 	.word	0x24000184

08000cb4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f013 fe3d 	bl	8014948 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f014 fb7c 	bl	80153d0 <HAL_SPI_GetState>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d000      	beq.n	8000cea <_Z9spiReceivPht+0x36>
 8000ce8:	e7f1      	b.n	8000cce <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2301      	moveq	r3, #1
 8000cf8:	2300      	movne	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	b25b      	sxtb	r3, r3
  }
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000184 	.word	0x24000184

08000d0c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d22:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000d24:	f107 030f 	add.w	r3, r7, #15
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff96 	bl	8000c5c <_Z11spiTransmitPht>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf0c      	ite	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	2300      	movne	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8000d40:	f06f 0301 	mvn.w	r3, #1
 8000d44:	e019      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f7ff ffb1 	bl	8000cb4 <_Z9spiReceivPht>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d68:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e005      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d74:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8000d76:	f06f 0301 	mvn.w	r3, #1
  }
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58021000 	.word	0x58021000

08000d88 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b40      	cmp	r3, #64	; 0x40
 8000d9c:	d902      	bls.n	8000da4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8000d9e:	f06f 0303 	mvn.w	r3, #3
 8000da2:	e028      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f01b ff9f 	bl	801ccf4 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dbc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000dca:	f7ff ff47 	bl	8000c5c <_Z11spiTransmitPht>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de4:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e005      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df0:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000188 	.word	0x24000188
 8000e04:	24000189 	.word	0x24000189
 8000e08:	58021000 	.word	0x58021000

08000e0c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e1c:	d308      	bcc.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <_Z13bhy2_delay_usmPv+0x44>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00b f83f 	bl	800beac <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8000e2e:	e00b      	b.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8000e44:	bf00      	nop
    while( us-- ) {
 8000e46:	e7f3      	b.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
  }
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	10624dd3 	.word	0x10624dd3

08000e54 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e90:	d205      	bcs.n	8000e9e <_ZSt16__deque_buf_sizej+0x1c>
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	e000      	b.n	8000ea0 <_ZSt16__deque_buf_sizej+0x1e>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_ZN11QueueSender11MessageMode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;

		static uint8_t Serialize(Type mode) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
			return mode;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
		}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
			return val;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
		}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_ZN11QueueSender9ErrorCode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Success = 0;
		static constexpr Type Timeout = 1;
		static constexpr Type Unknown = 2;

		static uint8_t Serialize(Type error) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
			return error;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
		}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d105      	bne.n	8000f10 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8000f08:	2163      	movs	r1, #99	; 0x63
 8000f0a:	4814      	ldr	r0, [pc, #80]	; (8000f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8000f0c:	f01b fe88 	bl	801cc20 <__assert_func>
			assert(*ptr);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d105      	bne.n	8000f24 <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8000f1c:	2164      	movs	r1, #100	; 0x64
 8000f1e:	480f      	ldr	r0, [pc, #60]	; (8000f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8000f20:	f01b fe7e 	bl	801cc20 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	8812      	ldrh	r2, [r2, #0]
 8000f2c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1c9a      	adds	r2, r3, #2
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	8852      	ldrh	r2, [r2, #2]
 8000f40:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1c9a      	adds	r2, r3, #2
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	601a      	str	r2, [r3, #0]
		}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0801de40 	.word	0x0801de40
 8000f58:	0801de44 	.word	0x0801de44
 8000f5c:	0801de74 	.word	0x0801de74
 8000f60:	0801de90 	.word	0x0801de90

08000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fb60 	bl	8002634 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fbcc 	bl	8002726 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fbf5 	bl	8002790 <_ZNSaIhED1Ev>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fbd8 	bl	8002770 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffeb 	bl	8000fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN7RequestC1Ev>:
struct Request {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffeb 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN7RequestD1Ev>:
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fbe5 	bl	80027d8 <_ZNSt6vectorIhSaIhEED1Ev>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff9c 	bl	8000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3328      	adds	r3, #40	; 0x28
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fb64 	bl	80026fe <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3350      	adds	r3, #80	; 0x50
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffd2 	bl	8000fe4 <_ZN7RequestC1Ev>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3368      	adds	r3, #104	; 0x68
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffb8 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	675a      	str	r2, [r3, #116]	; 0x74
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	679a      	str	r2, [r3, #120]	; 0x78
		assert(uart != NULL);
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d105      	bne.n	8001078 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x6c>)
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x70>)
 8001070:	2173      	movs	r1, #115	; 0x73
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x74>)
 8001074:	f01b fdd4 	bl	801cc20 <__assert_func>
	}
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0801de98 	.word	0x0801de98
 8001088:	0801dea8 	.word	0x0801dea8
 800108c:	0801de74 	.word	0x0801de74

08001090 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8001094:	2301      	movs	r3, #1
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZN7RequestaSEOS_>:
struct Request {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fbe2 	bl	800287a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	7c1a      	ldrb	r2, [r3, #16]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	741a      	strb	r2, [r3, #16]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	7c5a      	ldrb	r2, [r3, #17]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	745a      	strb	r2, [r3, #17]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN8ResponceD1Ev>:
struct Responce {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fb78 	bl	80027d8 <_ZNSt6vectorIhSaIhEED1Ev>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 80010f2:	b590      	push	{r4, r7, lr}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	7c1b      	ldrb	r3, [r3, #16]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fedf 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8001106:	4603      	mov	r3, r0
 8001108:	2b02      	cmp	r3, #2
 800110a:	d031      	beq.n	8001170 <_ZN11QueueSender10AddRequestEO7Request+0x7e>
 800110c:	2b02      	cmp	r3, #2
 800110e:	dc45      	bgt.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <_ZN11QueueSender10AddRequestEO7Request+0x3a>
 8001114:	2b01      	cmp	r3, #1
 8001116:	d141      	bne.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
		case MessageMode::Async:
			Requests.emplace_back(std::move(request));
 8001118:	687c      	ldr	r4, [r7, #4]
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f001 fb77 	bl	800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	4620      	mov	r0, r4
 8001126:	f001 fb7d 	bl	8002824 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 800112a:	e037      	b.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
		case MessageMode::Sync:
			if (!HasPriorityRequest) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d02e      	beq.n	800119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>
				PriorityRequest = std::move(request);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f001 fb63 	bl	800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001148:	4603      	mov	r3, r0
 800114a:	4619      	mov	r1, r3
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff ffa7 	bl	80010a0 <_ZN7RequestaSEOS_>
				HasPriorityRequest = true;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

				if (Requests.empty()) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fba1 	bl	80028a4 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d018      	beq.n	800119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>
					ProcessPriorityRequest();
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f899 	bl	80012a0 <_ZN11QueueSender22ProcessPriorityRequestEv>
				}
			}
			break;
 800116e:	e014      	b.n	800119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>

		case MessageMode::Info:
			Responces.emplace(CreateInfoResponce());
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f9d9 	bl	8001534 <_ZNK11QueueSender18CreateInfoResponceEv>
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	4620      	mov	r0, r4
 800118a:	f001 fb9d 	bl	80028c8 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffa0 	bl	80010d8 <_ZN8ResponceD1Ev>
			break;
 8001198:	e000      	b.n	800119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
			break;
 800119a:	bf00      	nop
		}
	}
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}

080011a4 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3328      	adds	r3, #40	; 0x28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fb9b 	bl	80028ec <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f083 0301 	eor.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
	}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fbad 	bl	8002936 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ffe5 	bl	80011c6 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZN8ResponceC1EOS_>:
struct Responce {
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffe5 	bl	80011e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	7b1a      	ldrb	r2, [r3, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	731a      	strb	r2, [r3, #12]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	7b5a      	ldrb	r2, [r3, #13]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	735a      	strb	r2, [r3, #13]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	7b9a      	ldrb	r2, [r3, #14]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	739a      	strb	r2, [r3, #14]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f7ff ffaa 	bl	80011a4 <_ZNK11QueueSender11HasResponceEv>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <_ZN11QueueSender11GetResponceEv+0x22>
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_ZN11QueueSender11GetResponceEv+0x54>)
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <_ZN11QueueSender11GetResponceEv+0x58>)
 800125a:	2191      	movs	r1, #145	; 0x91
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <_ZN11QueueSender11GetResponceEv+0x5c>)
 800125e:	f01b fcdf 	bl	801cc20 <__assert_func>
		auto responce = std::move(Responces.front());
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3328      	adds	r3, #40	; 0x28
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fb4d 	bl	8002906 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fb56 	bl	8002920 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffc4 	bl	8001206 <_ZN8ResponceC1EOS_>
		Responces.pop();
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3328      	adds	r3, #40	; 0x28
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fb72 	bl	800296c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 8001288:	bf00      	nop
	}
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	0801dee0 	.word	0x0801dee0
 8001298:	0801def0 	.word	0x0801def0
 800129c:	0801de74 	.word	0x0801de74

080012a0 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8086 	beq.w	80013c4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80012be:	f083 0301 	eor.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d07d      	beq.n	80013c4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
			HasPriorityRequest = false;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			WaitResponce = true;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 80012d8:	b662      	cpsie	i
}
 80012da:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3350      	adds	r3, #80	; 0x50
 80012e0:	623b      	str	r3, [r7, #32]
			auto &data = request.Data;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	61fb      	str	r3, [r7, #28]

			assert(
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	7c1b      	ldrb	r3, [r3, #16]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fdea 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <_ZN11QueueSender22ProcessPriorityRequestEv+0x62>
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x130>)
 80012f8:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x134>)
 80012fa:	21a1      	movs	r1, #161	; 0xa1
 80012fc:	4836      	ldr	r0, [pc, #216]	; (80013d8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x138>)
 80012fe:	f01b fc8f 	bl	801cc20 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);

			CurrentResponceBuffer.resize(request.ResponceSize);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f001 fb38 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001318:	69f8      	ldr	r0, [r7, #28]
 800131a:	f001 fb67 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 800131e:	4605      	mov	r5, r0
 8001320:	69f8      	ldr	r0, [r7, #28]
 8001322:	f001 fb72 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800132e:	4629      	mov	r1, r5
 8001330:	4620      	mov	r0, r4
 8001332:	f014 ff29 	bl	8016188 <HAL_UART_Transmit>

			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3368      	adds	r3, #104	; 0x68
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fb54 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 8001344:	4605      	mov	r5, r0
					CurrentResponceBuffer.data(), CurrentResponceBuffer.size(),
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3368      	adds	r3, #104	; 0x68
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fb5d 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001350:	4603      	mov	r3, r0
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8001352:	b29a      	uxth	r2, r3
					TimeoutS);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8001358:	4629      	mov	r1, r5
 800135a:	4620      	mov	r0, r4
 800135c:	f014 ffaa 	bl	80162b4 <HAL_UART_Receive>
 8001360:	4603      	mov	r3, r0
 8001362:	76fb      	strb	r3, [r7, #27]
			WaitResponce = false;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

			ErrorCode::Type error;

			if (ret == HAL_OK)
 800136c:	7efb      	ldrb	r3, [r7, #27]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <_ZN11QueueSender22ProcessPriorityRequestEv+0xda>
				error = ErrorCode::Success;
 8001372:	2300      	movs	r3, #0
 8001374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001378:	e009      	b.n	800138e <_ZN11QueueSender22ProcessPriorityRequestEv+0xee>
			else if (ret == HAL_TIMEOUT)
 800137a:	7efb      	ldrb	r3, [r7, #27]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d103      	bne.n	8001388 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe8>
				error = ErrorCode::Timeout;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001386:	e002      	b.n	800138e <_ZN11QueueSender22ProcessPriorityRequestEv+0xee>
			else
				error = ErrorCode::Unknown;
 8001388:	2302      	movs	r3, #2
 800138a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			Responces.emplace(
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f103 0428 	add.w	r4, r3, #40	; 0x28
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800139a:	f107 0008 	add.w	r0, r7, #8
 800139e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2300      	movs	r3, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f000 f89d 	bl	80014e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
			Responces.emplace(
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	4620      	mov	r0, r4
 80013b4:	f001 fa88 	bl	80028c8 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe8b 	bl	80010d8 <_ZN8ResponceD1Ev>
							error));
 80013c2:	e001      	b.n	80013c8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x128>
  __ASM volatile ("cpsie i" : : : "memory");
 80013c4:	b662      	cpsie	i
}
 80013c6:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdb0      	pop	{r4, r5, r7, pc}
 80013d0:	0801df14 	.word	0x0801df14
 80013d4:	0801df54 	.word	0x0801df54
 80013d8:	0801de74 	.word	0x0801de74

080013dc <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
		__disable_irq();
		if (!Requests.empty() && !WaitResponce) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fa5a 	bl	80028a4 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f083 0301 	eor.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d009      	beq.n	8001410 <_ZN11QueueSender15ProcessRequestsEv+0x34>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <_ZN11QueueSender15ProcessRequestsEv+0x34>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <_ZN11QueueSender15ProcessRequestsEv+0x36>
 8001410:	2300      	movs	r3, #0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d04d      	beq.n	80014b2 <_ZN11QueueSender15ProcessRequestsEv+0xd6>
			WaitResponce = true;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 800141e:	b662      	cpsie	i
}
 8001420:	bf00      	nop
			__enable_irq();

			auto &request = Requests.front();
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	f001 faff 	bl	8002a28 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 800142a:	60f8      	str	r0, [r7, #12]
			auto &data = request.Data;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	60bb      	str	r3, [r7, #8]

			assert(
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	7c1b      	ldrb	r3, [r3, #16]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd45 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d005      	beq.n	800144c <_ZN11QueueSender15ProcessRequestsEv+0x70>
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <_ZN11QueueSender15ProcessRequestsEv+0xe4>)
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <_ZN11QueueSender15ProcessRequestsEv+0xe8>)
 8001444:	21c7      	movs	r1, #199	; 0xc7
 8001446:	4820      	ldr	r0, [pc, #128]	; (80014c8 <_ZN11QueueSender15ProcessRequestsEv+0xec>)
 8001448:	f01b fbea 	bl	801cc20 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			CurrentResponceBuffer.resize(request.ResponceSize);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f001 fa93 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>

			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3368      	adds	r3, #104	; 0x68
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fac0 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 800146c:	4605      	mov	r5, r0
					CurrentResponceBuffer.size());
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3368      	adds	r3, #104	; 0x68
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fac9 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001478:	4603      	mov	r3, r0
			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4629      	mov	r1, r5
 8001480:	4620      	mov	r0, r4
 8001482:	f014 ffeb 	bl	801645c <HAL_UART_Receive_IT>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f001 faae 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 8001490:	4605      	mov	r5, r0
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f001 fab9 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014a0:	4629      	mov	r1, r5
 80014a2:	4620      	mov	r0, r4
 80014a4:	f014 fe70 	bl	8016188 <HAL_UART_Transmit>

			Requests.pop_front();
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fad0 	bl	8002a50 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
		} else {
			__enable_irq();
		}
	}
 80014b0:	e001      	b.n	80014b6 <_ZN11QueueSender15ProcessRequestsEv+0xda>
  __ASM volatile ("cpsie i" : : : "memory");
 80014b2:	b662      	cpsie	i
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
 80014be:	bf00      	nop
 80014c0:	0801df80 	.word	0x0801df80
 80014c4:	0801dfc4 	.word	0x0801dfc4
 80014c8:	0801de74 	.word	0x0801de74

080014cc <_ZN8ResponceC1Ev>:
struct Responce {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd77 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	70fb      	strb	r3, [r7, #3]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7ff ffe9 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.Data = data;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fad2 	bl	8002aa8 <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	731a      	strb	r2, [r3, #12]
		responce.Error = ErrorCode::Serialize(error);
 800150a:	7e3b      	ldrb	r3, [r7, #24]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fce5 	bl	8000edc <_ZN11QueueSender9ErrorCode9SerializeEh>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	739a      	strb	r2, [r3, #14]
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fcc5 	bl	8000eac <_ZN11QueueSender11MessageMode9SerializeEh>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	735a      	strb	r2, [r3, #13]
		return responce;
 800152a:	bf00      	nop
	}
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af02      	add	r7, sp, #8
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
		std::vector<uint8_t> data;
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd41 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
		data.resize(Info::Size);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2104      	movs	r1, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fa18 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = data.data();
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fa47 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 800155e:	4603      	mov	r3, r0
 8001560:	60fb      	str	r3, [r7, #12]
		GetInfo().SerializeTo(&ptr);
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f000 f82b 	bl	80015be <_ZNK11QueueSender7GetInfoEv>
 8001568:	4603      	mov	r3, r0
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fcbc 	bl	8000ef4 <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f107 0210 	add.w	r2, r7, #16
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2302      	movs	r3, #2
 8001588:	6839      	ldr	r1, [r7, #0]
 800158a:	f7ff ffac 	bl	80014e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
		std::vector<uint8_t> data;
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f920 	bl	80027d8 <_ZNSt6vectorIhSaIhEED1Ev>
		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 8001598:	bf00      	nop
	}
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
		WaitResponce = false;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
		return {Requests.size(), Responces.size()};
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fb5c 	bl	8002c86 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	81bb      	strh	r3, [r7, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3328      	adds	r3, #40	; 0x28
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fb66 	bl	8002caa <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	81fb      	strh	r3, [r7, #14]
 80015e4:	2300      	movs	r3, #0
 80015e6:	89ba      	ldrh	r2, [r7, #12]
 80015e8:	f362 030f 	bfi	r3, r2, #0, #16
 80015ec:	89fa      	ldrh	r2, [r7, #14]
 80015ee:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f001 f848 	bl	800269a <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fb4e 	bl	8002cc4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3334      	adds	r3, #52	; 0x34
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fcd9 	bl	8000fe4 <_ZN7RequestC1Ev>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3348      	adds	r3, #72	; 0x48
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fcc7 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 800165a:	f240 1111 	movw	r1, #273	; 0x111
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x64>)
 8001660:	f01b fade 	bl	801cc20 <__assert_func>
	}
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	0801de98 	.word	0x0801de98
 8001674:	0801dfe8 	.word	0x0801dfe8
 8001678:	0801de74 	.word	0x0801de74

0800167c <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3328      	adds	r3, #40	; 0x28
 8001692:	2201      	movs	r2, #1
 8001694:	4619      	mov	r1, r3
 8001696:	f014 fee1 	bl	801645c <HAL_UART_Receive_IT>
	}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fb1d 	bl	8002cec <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f083 0301 	eor.w	r3, r3, #1
 80016b8:	b2db      	uxtb	r3, r3
	}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 80016c2:	b590      	push	{r4, r7, lr}
 80016c4:	b097      	sub	sp, #92	; 0x5c
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d100      	bne.n	80016d8 <_ZN13HeadInterface4SendERK8Responce+0x16>
 80016d6:	e7f9      	b.n	80016cc <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 f995 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80016e0:	4603      	mov	r3, r0
 80016e2:	3306      	adds	r3, #6
 80016e4:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3348      	adds	r3, #72	; 0x48
 80016ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 f949 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3348      	adds	r3, #72	; 0x48
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 f978 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 80016fc:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 80016fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	653a      	str	r2, [r7, #80]	; 0x50
 8001704:	22ff      	movs	r2, #255	; 0xff
 8001706:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8001708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	653a      	str	r2, [r7, #80]	; 0x50
 800170e:	22aa      	movs	r2, #170	; 0xaa
 8001710:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8001712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	653a      	str	r2, [r7, #80]	; 0x50
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	7b12      	ldrb	r2, [r2, #12]
 800171c:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 800171e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	653a      	str	r2, [r7, #80]	; 0x50
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	7b52      	ldrb	r2, [r2, #13]
 8001728:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 800172a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	653a      	str	r2, [r7, #80]	; 0x50
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	7b92      	ldrb	r2, [r2, #14]
 8001734:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fae4 	bl	8002d06 <_ZNKSt6vectorIhSaIhEE4dataEv>
 800173e:	4604      	mov	r4, r0
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f001 f961 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4621      	mov	r1, r4
 800174e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001750:	f01b fad0 	bl	801ccf4 <memcpy>

		ptr += responce.Data.size();
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f957 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800175c:	4602      	mov	r2, r0
 800175e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001760:	4413      	add	r3, r2
 8001762:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 8001764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001766:	22af      	movs	r2, #175	; 0xaf
 8001768:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3348      	adds	r3, #72	; 0x48
 8001776:	4618      	mov	r0, r3
 8001778:	f001 f947 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800177c:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3348      	adds	r3, #72	; 0x48
 8001782:	4618      	mov	r0, r3
 8001784:	f001 f932 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 8001788:	4601      	mov	r1, r0
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001790:	4618      	mov	r0, r3
 8001792:	f01b faaf 	bl	801ccf4 <memcpy>

		auto ret = HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3348      	adds	r3, #72	; 0x48
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 f924 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 80017a4:	4601      	mov	r1, r0
 80017a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a8:	b29a      	uxth	r2, r3
				sz, TimeoutS);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		auto ret = HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 80017ae:	4620      	mov	r0, r4
 80017b0:	f014 fcea 	bl	8016188 <HAL_UART_Transmit>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		TransmitComplete = true;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		auto t = ret;
 80017c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80017c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	}
 80017ca:	bf00      	nop
 80017cc:	375c      	adds	r7, #92	; 0x5c
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}

080017d2 <_ZN7RequestC1EOS_>:
struct Request {
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fcff 	bl	80011e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	7c1a      	ldrb	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	741a      	strb	r2, [r3, #16]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	7c5a      	ldrb	r2, [r3, #17]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	745a      	strb	r2, [r3, #17]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8001816:	6838      	ldr	r0, [r7, #0]
 8001818:	f7ff ff43 	bl	80016a2 <_ZNK13HeadInterface10HasRequestEv>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <_ZN13HeadInterface10GetRequestEv+0x24>
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <_ZN13HeadInterface10GetRequestEv+0x50>)
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8001826:	f240 1143 	movw	r1, #323	; 0x143
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <_ZN13HeadInterface10GetRequestEv+0x58>)
 800182c:	f01b f9f8 	bl	801cc20 <__assert_func>
		auto request = std::move(Requests.front());
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fa76 	bl	8002d24 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 8001838:	4603      	mov	r3, r0
 800183a:	4618      	mov	r0, r3
 800183c:	f000 ffe7 	bl	800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffc4 	bl	80017d2 <_ZN7RequestC1EOS_>
		Requests.pop();
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fa76 	bl	8002d3e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8001852:	bf00      	nop
	}
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	0801e024 	.word	0x0801e024
 8001860:	0801e034 	.word	0x0801e034
 8001864:	0801de74 	.word	0x0801de74

08001868 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	2b07      	cmp	r3, #7
 8001892:	f200 80d6 	bhi.w	8001a42 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018bd 	.word	0x080018bd
 80018a0:	080018e7 	.word	0x080018e7
 80018a4:	08001911 	.word	0x08001911
 80018a8:	08001935 	.word	0x08001935
 80018ac:	0800196b 	.word	0x0800196b
 80018b0:	0800198f 	.word	0x0800198f
 80018b4:	080019c1 	.word	0x080019c1
 80018b8:	080019d9 	.word	0x080019d9
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018c2:	2bff      	cmp	r3, #255	; 0xff
 80018c4:	d10b      	bne.n	80018de <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3328      	adds	r3, #40	; 0x28
 80018d4:	2201      	movs	r2, #1
 80018d6:	4619      	mov	r1, r3
 80018d8:	f014 fdc0 	bl	801645c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 80018dc:	e0b5      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fecc 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80018e4:	e0b1      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018ec:	2baa      	cmp	r3, #170	; 0xaa
 80018ee:	d10b      	bne.n	8001908 <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3328      	adds	r3, #40	; 0x28
 80018fe:	2201      	movs	r2, #1
 8001900:	4619      	mov	r1, r3
 8001902:	f014 fdab 	bl	801645c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8001906:	e0a0      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff feb7 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 800190e:	e09c      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2203      	movs	r2, #3
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3328      	adds	r3, #40	; 0x28
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f014 fd95 	bl	801645c <HAL_UART_Receive_IT>
			break;
 8001932:	e08a      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f001 f819 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2204      	movs	r2, #4
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3328      	adds	r3, #40	; 0x28
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	f014 fd7a 	bl	801645c <HAL_UART_Receive_IT>
			break;
 8001968:	e06f      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3328      	adds	r3, #40	; 0x28
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	f014 fd68 	bl	801645c <HAL_UART_Receive_IT>
			break;
 800198c:	e05d      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2206      	movs	r2, #6
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3334      	adds	r3, #52	; 0x34
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 f81f 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 80019ae:	4601      	mov	r1, r0
					RequestSize);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	4620      	mov	r0, r4
 80019ba:	f014 fd4f 	bl	801645c <HAL_UART_Receive_IT>
			break;
 80019be:	e044      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2207      	movs	r2, #7
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3328      	adds	r3, #40	; 0x28
 80019ce:	2201      	movs	r2, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	f014 fd43 	bl	801645c <HAL_UART_Receive_IT>
			break;
 80019d6:	e038      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019de:	2baf      	cmp	r3, #175	; 0xaf
 80019e0:	d12b      	bne.n	8001a3a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.push(std::move(CurrentRequest));
 80019e2:	687c      	ldr	r4, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3334      	adds	r3, #52	; 0x34
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 ff10 	bl	800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4619      	mov	r1, r3
 80019f2:	4620      	mov	r0, r4
 80019f4:	f001 f9af 	bl	8002d56 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>
				CurrentRequest = { };
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fad3 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff fb38 	bl	80010a0 <_ZN7RequestaSEOS_>
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fae2 	bl	8000ffe <_ZN7RequestD1Ev>
			}
			ResetReadState();
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fe1e 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001a40:	e003      	b.n	8001a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fe1a 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	bf00      	nop

08001a54 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8001a66:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8001a68:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001a6c:	4819      	ldr	r0, [pc, #100]	; (8001ad4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8001a6e:	f01b f8d7 	bl	801cc20 <__assert_func>
			assert(*ptr);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8001a7e:	f240 119d 	movw	r1, #413	; 0x19d
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8001a84:	f01b f8cc 	bl	801cc20 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	8812      	ldrh	r2, [r2, #0]
 8001a90:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	1c9a      	adds	r2, r3, #2
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	8852      	ldrh	r2, [r2, #2]
 8001aa4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1c9a      	adds	r2, r3, #2
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	8892      	ldrh	r2, [r2, #4]
 8001ab8:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c9a      	adds	r2, r3, #2
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	601a      	str	r2, [r3, #0]
		}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	0801de40 	.word	0x0801de40
 8001ad0:	0801e058 	.word	0x0801e058
 8001ad4:	0801de74 	.word	0x0801de74
 8001ad8:	0801de90 	.word	0x0801de90

08001adc <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001af6:	f001 f940 	bl	8002d7a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 f94a 	bl	8002db0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
	}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:
	void Remove() {
		FrameQueue.pop_back();
		FirstSeq++;
	}

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 f95e 	bl	8002df4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e038      	b.n	8001bb4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d30b      	bcc.n	8001b64 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 f962 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d901      	bls.n	8001b68 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e020      	b.n	8001bb4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8001b72:	68fc      	ldr	r4, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 f94e 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	440b      	add	r3, r1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f001 f955 	bl	8002e3c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f107 0414 	add.w	r4, r7, #20
 8001b98:	461d      	mov	r5, r3
 8001b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	f107 0414 	add.w	r4, r7, #20
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	602b      	str	r3, [r5, #0]
		return true;
 8001bb2:	2301      	movs	r3, #1
	}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}

08001bbc <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	801a      	strh	r2, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 f920 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	805a      	strh	r2, [r3, #2]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	809a      	strh	r2, [r3, #4]
	}
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type FrameBySeq = 0;
		static constexpr Type Info = 1;
		static constexpr Type LatestFrame = 2;
		static constexpr Type Reset = 3;

		static uint8_t Serialize(Type mode) {
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
			return mode;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
		}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
			return meta;
 8001c14:	79fb      	ldrb	r3, [r7, #7]
		}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type UnknownMode = 2;
		static constexpr Type BadRequest = 3;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7c1b      	ldrb	r3, [r3, #16]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ffe7 	bl	8001c0a <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 8001c44:	4a2c      	ldr	r2, [pc, #176]	; (8001cf8 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 8001c46:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8001c4a:	482c      	ldr	r0, [pc, #176]	; (8001cfc <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 8001c4c:	f01a ffe8 	bl	801cc20 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff fc3b 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff ffc8 	bl	8001bf2 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2111      	movs	r1, #17
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fe88 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fec7 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	739a      	strb	r2, [r3, #14]
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 f836 	bl	8002d06 <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8001ca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca2:	f107 0218 	add.w	r2, r7, #24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f7ff ff3b 	bl	8001b24 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8001cb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cb8:	f083 0301 	eor.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa6>
			responce.Error = ErrorCodes::FrameUnavailable;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	739a      	strb	r2, [r3, #14]
			return responce;
 8001cc8:	e00f      	b.n	8001cea <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fe8d 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	f107 0217 	add.w	r2, r7, #23
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe ff2b 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	739a      	strb	r2, [r3, #14]

		return responce;
 8001ce8:	bf00      	nop
	}
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	3730      	adds	r7, #48	; 0x30
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	0801e090 	.word	0x0801e090
 8001cf8:	0801e0d8 	.word	0x0801e0d8
 8001cfc:	0801de74 	.word	0x0801de74

08001d00 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7c1b      	ldrb	r3, [r3, #16]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff79 	bl	8001c0a <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d006      	beq.n	8001d2c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa8>)
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 8001d22:	f240 210f 	movw	r1, #527	; 0x20f
 8001d26:	4822      	ldr	r0, [pc, #136]	; (8001db0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 8001d28:	f01a ff7a 	bl	801cc20 <__assert_func>

		Responce responce;
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff fbcd 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff ff5a 	bl	8001bf2 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2106      	movs	r1, #6
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fe1a 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fe59 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	739a      	strb	r2, [r3, #14]
		}

		uint8_t *ptr = responce.Data.data();
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fe3b 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 8001d76:	4603      	mov	r3, r0
 8001d78:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff1b 	bl	8001bbc <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 8001d86:	f107 021c 	add.w	r2, r7, #28
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fe5f 	bl	8001a54 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	739a      	strb	r2, [r3, #14]

		return responce;
 8001d9c:	bf00      	nop
	}
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	0801e12c 	.word	0x0801e12c
 8001dac:	0801e16c 	.word	0x0801e16c
 8001db0:	0801de74 	.word	0x0801de74

08001db4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
		assert(
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7c1b      	ldrb	r3, [r3, #16]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff1f 	bl	8001c0a <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d006      	beq.n	8001de0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 8001dd4:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 8001dd6:	f240 2125 	movw	r1, #549	; 0x225
 8001dda:	4821      	ldr	r0, [pc, #132]	; (8001e60 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 8001ddc:	f01a ff20 	bl	801cc20 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7ff fb73 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff ff00 	bl	8001bf2 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2111      	movs	r1, #17
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fdc0 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fdff 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	739a      	strb	r2, [r3, #14]
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fddb 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 fddb 	bl	80029ec <_ZNSt6vectorIhSaIhEE4dataEv>
 8001e36:	4601      	mov	r1, r0
 8001e38:	f107 0213 	add.w	r2, r7, #19
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fe79 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	739a      	strb	r2, [r3, #14]

		return responce;
 8001e4c:	bf00      	nop
	}
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	0801e1bc 	.word	0x0801e1bc
 8001e5c:	0801e204 	.word	0x0801e204
 8001e60:	0801de74 	.word	0x0801de74

08001e64 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>:

	Responce DoReset(const Request &request, IMUFrameContainer &container) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
		assert(
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7c1b      	ldrb	r3, [r3, #16]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fec7 	bl	8001c0a <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d006      	beq.n	8001e90 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x2c>
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x84>)
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x88>)
 8001e86:	f240 213d 	movw	r1, #573	; 0x23d
 8001e8a:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x8c>)
 8001e8c:	f01a fec8 	bl	801cc20 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff fb1b 	bl	80014cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f7ff fea8 	bl	8001bf2 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fd68 	bl	8002984 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fda7 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	739a      	strb	r2, [r3, #14]
		}

		container.Reset();
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f7ff fe02 	bl	8001adc <_ZN17IMUFrameContainer5ResetEv>
		responce.Error = ErrorCodes::Success;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	739a      	strb	r2, [r3, #14]

		return responce;
 8001ede:	bf00      	nop
	}
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0801e254 	.word	0x0801e254
 8001eec:	0801e298 	.word	0x0801e298
 8001ef0:	0801de74 	.word	0x0801de74

08001ef4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU) {
		assert(request.PeripheryID == Periphery::Imu);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7c5b      	ldrb	r3, [r3, #17]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d006      	beq.n	8001f18 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x24>
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x9c>)
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001f0e:	f240 2153 	movw	r1, #595	; 0x253
 8001f12:	4821      	ldr	r0, [pc, #132]	; (8001f98 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001f14:	f01a fe84 	bl	801cc20 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7c1b      	ldrb	r3, [r3, #16]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fe74 	bl	8001c0a <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d827      	bhi.n	8001f78 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x84>
 8001f28:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x3c>)
 8001f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2e:	bf00      	nop
 8001f30:	08001f41 	.word	0x08001f41
 8001f34:	08001f4f 	.word	0x08001f4f
 8001f38:	08001f5d 	.word	0x08001f5d
 8001f3c:	08001f6b 	.word	0x08001f6b
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	f7ff fe6c 	bl	8001c24 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8001f4c:	e01b      	b.n	8001f86 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Info:
			return GetInfo(request, container);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	f7ff fed3 	bl	8001d00 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8001f5a:	e014      	b.n	8001f86 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	f7ff ff26 	bl	8001db4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8001f68:	e00d      	b.n	8001f86 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Reset:
			return DoReset(request, container);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	f7ff ff77 	bl	8001e64 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>
 8001f76:	e006      	b.n	8001f86 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		default:
			assert(0 && "Unknown Mode");
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa8>)
 8001f7a:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001f7c:	f240 215f 	movw	r1, #607	; 0x25f
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001f82:	f01a fe4d 	bl	801cc20 <__assert_func>
		}
	}
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	0801e2e0 	.word	0x0801e2e0
 8001f94:	0801e308 	.word	0x0801e308
 8001f98:	0801de74 	.word	0x0801de74
 8001f9c:	0801e364 	.word	0x0801e364

08001fa0 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3348      	adds	r3, #72	; 0x48
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fc13 	bl	80027d8 <_ZNSt6vectorIhSaIhEED1Ev>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3334      	adds	r3, #52	; 0x34
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f821 	bl	8000ffe <_ZN7RequestD1Ev>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fb1b 	bl	80015fa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3368      	adds	r3, #104	; 0x68
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fbfc 	bl	80027d8 <_ZNSt6vectorIhSaIhEED1Ev>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3350      	adds	r3, #80	; 0x50
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f80a 	bl	8000ffe <_ZN7RequestD1Ev>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3328      	adds	r3, #40	; 0x28
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe ffc5 	bl	8000f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fb4f 	bl	800269a <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 ff30 	bl	8002e76 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffeb 	bl	8002006 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZN17IMUFrameContainerD1Ev>:
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 ff42 	bl	8002edc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_ZN18MotherboardContextC1E17MotherboardConfig>:

	//SystemStateFactory SysState;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8002062:	b084      	sub	sp, #16
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	f107 0014 	add.w	r0, r7, #20
 8002070:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		HeadService{conf.HeadServiceUart, conf.HeadTimeout},
		HeadStream{conf.HeadStreamUart, conf.HeadTimeout},
		Body{conf.BodyUart, conf.BodyTimeout},
		FrameContainer{},
		IMU{conf.IMUSpi},
		IMUHandler{} {}
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6979      	ldr	r1, [r7, #20]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff faca 	bl	8001614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3360      	adds	r3, #96	; 0x60
 8002084:	69b9      	ldr	r1, [r7, #24]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fac3 	bl	8001614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	33c0      	adds	r3, #192	; 0xc0
 8002092:	6a39      	ldr	r1, [r7, #32]
 8002094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe ffbe 	bl	8001018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80020a2:	2230      	movs	r2, #48	; 0x30
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f01a fe4c 	bl	801cd44 <memset>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ffb4 	bl	8002020 <_ZN17IMUFrameContainerC1Ev>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80020be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fade 	bl	8000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020e0:	b004      	add	sp, #16
 80020e2:	4770      	bx	lr

080020e4 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fde8 	bl	8002cc4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3334      	adds	r3, #52	; 0x34
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe ff73 	bl	8000fe4 <_ZN7RequestC1Ev>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3348      	adds	r3, #72	; 0x48
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe ff61 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ff1d 	bl	8000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3328      	adds	r3, #40	; 0x28
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fae5 	bl	80026fe <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3350      	adds	r3, #80	; 0x50
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe ff53 	bl	8000fe4 <_ZN7RequestC1Ev>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3368      	adds	r3, #104	; 0x68
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff39 	bl	8000fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ffb9 	bl	80020e4 <_ZN13HeadInterfaceC1Ev>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3360      	adds	r3, #96	; 0x60
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffb4 	bl	80020e4 <_ZN13HeadInterfaceC1Ev>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	33c0      	adds	r3, #192	; 0xc0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffca 	bl	800211a <_ZN11QueueSenderC1Ev>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff47 	bl	8002020 <_ZN17IMUFrameContainerC1Ev>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	2200      	movs	r2, #0
 800219a:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff46 	bl	8002048 <_ZN17IMUFrameContainerD1Ev>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	33c0      	adds	r3, #192	; 0xc0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff04 	bl	8001fce <_ZN11QueueSenderD1Ev>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fee8 	bl	8001fa0 <_ZN13HeadInterfaceD1Ev>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fee4 	bl	8001fa0 <_ZN13HeadInterfaceD1Ev>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fe97 	bl	8002f26 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ffe5 	bl	80021e2 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3334      	adds	r3, #52	; 0x34
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7fe ff2d 	bl	80010a0 <_ZN7RequestaSEOS_>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3348      	adds	r3, #72	; 0x48
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f000 fb11 	bl	800287a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	659a      	str	r2, [r3, #88]	; 0x58
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fe5c 	bl	8002f4c <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fe39 	bl	8002f26 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3328      	adds	r3, #40	; 0x28
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f7ff ffdc 	bl	800227e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	3350      	adds	r3, #80	; 0x50
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe fee4 	bl	80010a0 <_ZN7RequestaSEOS_>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3368      	adds	r3, #104	; 0x68
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f000 fabc 	bl	800287a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	675a      	str	r2, [r3, #116]	; 0x74
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	679a      	str	r2, [r3, #120]	; 0x78
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fe20 	bl	8002f72 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_ZN18MotherboardContextaSEOS_>:
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff50 	bl	8002202 <_ZN13HeadInterfaceaSEOS_>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	3360      	adds	r3, #96	; 0x60
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f7ff ff47 	bl	8002202 <_ZN13HeadInterfaceaSEOS_>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	33c0      	adds	r3, #192	; 0xc0
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f7ff ff8c 	bl	800229e <_ZN11QueueSenderaSEOS_>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f7ff ffc1 	bl	800231c <_ZN17IMUFrameContaineraSEOS_>
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f502 70b8 	add.w	r0, r2, #368	; 0x170
 80023a2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80023a6:	f241 1250 	movw	r2, #4432	; 0x1150
 80023aa:	4619      	mov	r1, r3
 80023ac:	f01a fca2 	bl	801ccf4 <memcpy>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	f893 22c1 	ldrb.w	r2, [r3, #705]	; 0x2c1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 80023d0:	b084      	sub	sp, #16
 80023d2:	b5b0      	push	{r4, r5, r7, lr}
 80023d4:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 80023d8:	b086      	sub	sp, #24
 80023da:	af04      	add	r7, sp, #16
 80023dc:	f241 24d8 	movw	r4, #4824	; 0x12d8
 80023e0:	443c      	add	r4, r7
 80023e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 80023e6:	4c1e      	ldr	r4, [pc, #120]	; (8002460 <MotherboardInit+0x90>)
 80023e8:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80023ec:	4423      	add	r3, r4
 80023ee:	19dc      	adds	r4, r3, r7
 80023f0:	466d      	mov	r5, sp
 80023f2:	f241 23e4 	movw	r3, #4836	; 0x12e4
 80023f6:	443b      	add	r3, r7
 80023f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002400:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8002404:	443b      	add	r3, r7
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff fe2a 	bl	8002062 <_ZN18MotherboardContextC1E17MotherboardConfig>
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <MotherboardInit+0x90>)
 8002410:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8002414:	f103 0308 	add.w	r3, r3, #8
 8002418:	443b      	add	r3, r7
 800241a:	4619      	mov	r1, r3
 800241c:	4811      	ldr	r0, [pc, #68]	; (8002464 <MotherboardInit+0x94>)
 800241e:	f7ff ff95 	bl	800234c <_ZN18MotherboardContextaSEOS_>
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <MotherboardInit+0x90>)
 8002424:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8002428:	f103 0308 	add.w	r3, r3, #8
 800242c:	443b      	add	r3, r7
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff feba 	bl	80021a8 <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <MotherboardInit+0x94>)
 8002436:	f7ff f921 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 800243a:	480b      	ldr	r0, [pc, #44]	; (8002468 <MotherboardInit+0x98>)
 800243c:	f7ff f91e 	bl	800167c <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8002440:	2100      	movs	r1, #0
 8002442:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800246c <MotherboardInit+0x9c>
 8002446:	480a      	ldr	r0, [pc, #40]	; (8002470 <MotherboardInit+0xa0>)
 8002448:	f7fe f93a 	bl	80006c0 <_ZN10BHYWrapper4InitEfm>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800245c:	b004      	add	sp, #16
 800245e:	4770      	bx	lr
 8002460:	ffffed38 	.word	0xffffed38
 8002464:	240001d0 	.word	0x240001d0
 8002468:	24000230 	.word	0x24000230
 800246c:	44480000 	.word	0x44480000
 8002470:	24000340 	.word	0x24000340

08002474 <MotherboardTick>:

int MotherboardTick() {
 8002474:	b580      	push	{r7, lr}
 8002476:	b090      	sub	sp, #64	; 0x40
 8002478:	af02      	add	r7, sp, #8
	if (mbctx.UpdateIMU)
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <MotherboardTick+0xcc>)
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 8002488:	482e      	ldr	r0, [pc, #184]	; (8002544 <MotherboardTick+0xd0>)
 800248a:	f7fe fa71 	bl	8000970 <_ZN10BHYWrapper4PollEv>
 800248e:	4603      	mov	r3, r0
 8002490:	f083 0301 	eor.w	r3, r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <MotherboardTick+0xcc>)
 8002498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249c:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1

	if (mbctx.HeadService.HasRequest()) {
 80024a0:	4827      	ldr	r0, [pc, #156]	; (8002540 <MotherboardTick+0xcc>)
 80024a2:	f7ff f8fe 	bl	80016a2 <_ZNK13HeadInterface10HasRequestEv>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d02d      	beq.n	8002508 <MotherboardTick+0x94>
		auto request = mbctx.HeadService.GetRequest();
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	4924      	ldr	r1, [pc, #144]	; (8002540 <MotherboardTick+0xcc>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f9ab 	bl	800180c <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 80024b6:	7d7b      	ldrb	r3, [r7, #21]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <MotherboardTick+0x4e>
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d00a      	beq.n	80024d6 <MotherboardTick+0x62>
 80024c0:	e01e      	b.n	8002500 <MotherboardTick+0x8c>
		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f9a2 	bl	800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	481e      	ldr	r0, [pc, #120]	; (8002548 <MotherboardTick+0xd4>)
 80024d0:	f7fe fe0f 	bl	80010f2 <_ZN11QueueSender10AddRequestEO7Request>
			break;
 80024d4:	e014      	b.n	8002500 <MotherboardTick+0x8c>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request,
 80024d6:	f107 0018 	add.w	r0, r7, #24
 80024da:	1d3a      	adds	r2, r7, #4
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <MotherboardTick+0xd0>)
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MotherboardTick+0xd8>)
 80024e2:	491b      	ldr	r1, [pc, #108]	; (8002550 <MotherboardTick+0xdc>)
 80024e4:	f7ff fd06 	bl	8001ef4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>
			mbctx.HeadService.Send(
 80024e8:	f107 0318 	add.w	r3, r7, #24
 80024ec:	4619      	mov	r1, r3
 80024ee:	4814      	ldr	r0, [pc, #80]	; (8002540 <MotherboardTick+0xcc>)
 80024f0:	f7ff f8e7 	bl	80016c2 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request,
 80024f4:	f107 0318 	add.w	r3, r7, #24
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fded 	bl	80010d8 <_ZN8ResponceD1Ev>
							mbctx.FrameContainer, mbctx.IMU));
			break;
 80024fe:	bf00      	nop
		auto request = mbctx.HeadService.GetRequest();
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fd7b 	bl	8000ffe <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 8002508:	480f      	ldr	r0, [pc, #60]	; (8002548 <MotherboardTick+0xd4>)
 800250a:	f7fe fe4b 	bl	80011a4 <_ZNK11QueueSender11HasResponceEv>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <MotherboardTick+0xc2>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 8002514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002518:	490b      	ldr	r1, [pc, #44]	; (8002548 <MotherboardTick+0xd4>)
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fe90 	bl	8001240 <_ZN11QueueSender11GetResponceEv>
 8002520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <MotherboardTick+0xcc>)
 8002528:	f7ff f8cb 	bl	80016c2 <_ZN13HeadInterface4SendERK8Responce>
 800252c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fdd1 	bl	80010d8 <_ZN8ResponceD1Ev>
	}

	return 0;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3738      	adds	r7, #56	; 0x38
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	240001d0 	.word	0x240001d0
 8002544:	24000340 	.word	0x24000340
 8002548:	24000290 	.word	0x24000290
 800254c:	2400030c 	.word	0x2400030c
 8002550:	24001490 	.word	0x24001490

08002554 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4906      	ldr	r1, [pc, #24]	; (8002578 <MotherboardOnStrobe+0x24>)
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fa40 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MotherboardOnStrobe+0x28>)
 800256a:	f7ff facd 	bl	8001b08 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	24000340 	.word	0x24000340
 800257c:	2400030c 	.word	0x2400030c

08002580 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <MotherboardOnBodyRecieveComplete+0x10>)
 8002586:	f7ff f80c 	bl	80015a2 <_ZN11QueueSender16ProcessResponcesEv>
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	24000290 	.word	0x24000290

08002594 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 800259a:	f7ff f973 	bl	8001884 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	240001d0 	.word	0x240001d0

080025a8 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 80025ae:	f7ff f969 	bl	8001884 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	24000230 	.word	0x24000230

080025bc <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <MotherboardOnHeadServiceTransmitComplete+0x10>)
 80025c2:	f7ff f951 	bl	8001868 <_ZN13HeadInterface14FinishTransmitEv>
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	240001d0 	.word	0x240001d0

080025d0 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 80025d6:	f7ff f947 	bl	8001868 <_ZN13HeadInterface14FinishTransmitEv>
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	24000230 	.word	0x24000230

080025e4 <MotherboardOnBodyTimerTick>:

void MotherboardOnBodyTimerTick() {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessPriorityRequest();
 80025e8:	4803      	ldr	r0, [pc, #12]	; (80025f8 <MotherboardOnBodyTimerTick+0x14>)
 80025ea:	f7fe fe59 	bl	80012a0 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 80025ee:	4802      	ldr	r0, [pc, #8]	; (80025f8 <MotherboardOnBodyTimerTick+0x14>)
 80025f0:	f7fe fef4 	bl	80013dc <_ZN11QueueSender15ProcessRequestsEv>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	24000290 	.word	0x24000290

080025fc <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <MotherboardOnImuTimerTick+0x1c>)
 8002602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002606:	2201      	movs	r2, #1
 8002608:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	240001d0 	.word	0x240001d0

0800261c <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fcc7 	bl	8002fb8 <_ZNSaI7RequestED1Ev>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fcaa 	bl	8002f98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002644:	2100      	movs	r1, #0
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fcc2 	bl	8002fd0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d010      	beq.n	8002688 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800266e:	3304      	adds	r3, #4
 8002670:	461a      	mov	r2, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fd12 	bl	800309c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	461a      	mov	r2, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fd24 	bl	80030d0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ffc6 	bl	800261c <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800269a:	b580      	push	{r7, lr}
 800269c:	b08a      	sub	sp, #40	; 0x28
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fd2d 	bl	8003108 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80026ae:	f107 0318 	add.w	r3, r7, #24
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fd36 	bl	8003126 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fd41 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f107 0218 	add.w	r2, r7, #24
 80026c8:	f107 0108 	add.w	r1, r7, #8
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fd60 	bl	8003192 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ffbe 	bl	8002656 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4618      	mov	r0, r3
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fd7a 	bl	80031e8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	: c() { }
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	2328      	movs	r3, #40	; 0x28
 800270c:	461a      	mov	r2, r3
 800270e:	2100      	movs	r1, #0
 8002710:	f01a fb18 	bl	801cd44 <memset>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ffe4 	bl	80026e4 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 8002726:	b580      	push	{r7, lr}
 8002728:	b08a      	sub	sp, #40	; 0x28
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fd8a 	bl	800324e <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 800273a:	f107 0318 	add.w	r3, r7, #24
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fd93 	bl	800326c <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fd9e 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800274e:	4603      	mov	r3, r0
 8002750:	f107 0218 	add.w	r2, r7, #24
 8002754:	f107 0108 	add.w	r1, r7, #8
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fdbd 	bl	80032d8 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd52 	bl	800320a <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	3728      	adds	r7, #40	; 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fdcc 	bl	8003316 <_ZNSaIhEC1Ev>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fdd4 	bl	800332e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fddc 	bl	8003356 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80027be:	461a      	mov	r2, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fdd3 	bl	800336c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fbe5 	bl	8000f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681c      	ldr	r4, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fdd1 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80027f0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80027f2:	461a      	mov	r2, r3
 80027f4:	4629      	mov	r1, r5
 80027f6:	4620      	mov	r0, r4
 80027f8:	f000 fdd6 	bl	80033a8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ffd2 	bl	80027a8 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bdb0      	pop	{r4, r5, r7, pc}

0800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 8002838:	429a      	cmp	r2, r3
 800283a:	d012      	beq.n	8002862 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800283c:	687c      	ldr	r4, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699d      	ldr	r5, [r3, #24]
 8002842:	6838      	ldr	r0, [r7, #0]
 8002844:	f000 fdbe 	bl	80033c4 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4629      	mov	r1, r5
 800284e:	4620      	mov	r0, r4
 8002850:	f000 fdc3 	bl	80033da <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f103 0214 	add.w	r2, r3, #20
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8002860:	e007      	b.n	8002872 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8002862:	6838      	ldr	r0, [r7, #0]
 8002864:	f000 fdae 	bl	80033c4 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002868:	4603      	mov	r3, r0
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fdc7 	bl	8003400 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bdb0      	pop	{r4, r5, r7, pc}

0800287a <_ZNSt6vectorIhSaIhEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f000 fdfd 	bl	8003488 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 800288e:	4603      	mov	r3, r0
 8002890:	4622      	mov	r2, r4
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fe02 	bl	800349e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 800289a:	687b      	ldr	r3, [r7, #4]
      }
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}

080028a4 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f103 0218 	add.w	r2, r3, #24
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3308      	adds	r3, #8
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 fe2e 	bl	800351a <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80028be:	4603      	mov	r3, r0
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
	{ return c.emplace_back(std::forward<_Args>(__args)...); }
#else
      template<typename... _Args>
	void
	emplace(_Args&&... __args)
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 80028d2:	687c      	ldr	r4, [r7, #4]
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f000 fe34 	bl	8003542 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80028da:	4603      	mov	r3, r0
 80028dc:	4619      	mov	r1, r3
 80028de:	4620      	mov	r0, r4
 80028e0:	f000 fe3a 	bl	8003558 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}

080028ec <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fe59 	bl	80035ae <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	return c.front();
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fe5e 	bl	80035d2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 8002916:	4603      	mov	r3, r0
      }
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8002936:	b590      	push	{r4, r7, lr}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8002940:	6838      	ldr	r0, [r7, #0]
 8002942:	f000 fe5a 	bl	80035fa <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8002946:	4603      	mov	r3, r0
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fe60 	bl	8003610 <_ZNSaIhEC1ERKS_>
 8002950:	687c      	ldr	r4, [r7, #4]
 8002952:	6838      	ldr	r0, [r7, #0]
 8002954:	f000 fe51 	bl	80035fa <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8002958:	4603      	mov	r3, r0
 800295a:	4619      	mov	r1, r3
 800295c:	4620      	mov	r0, r4
 800295e:	f000 fe65 	bl	800362c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bd90      	pop	{r4, r7, pc}

0800296c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fe7b 	bl	8003672 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f83b 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002994:	4602      	mov	r2, r0
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	4293      	cmp	r3, r2
 800299a:	bf8c      	ite	hi
 800299c:	2301      	movhi	r3, #1
 800299e:	2300      	movls	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f82f 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80029ac:	4602      	mov	r2, r0
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fe97 	bl	80036e8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 80029ba:	e013      	b.n	80029e4 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f824 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80029c2:	4602      	mov	r2, r0
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	bf34      	ite	cc
 80029ca:	2301      	movcc	r3, #1
 80029cc:	2300      	movcs	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 ff3a 	bl	8003858 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 ff4c 	bl	8003898 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fb66 	bl	8003108 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8002a3c:	f107 0308 	add.w	r3, r7, #8
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 ff35 	bl	80038b0 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 8002a46:	4603      	mov	r3, r0
      }
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d011      	beq.n	8002a8a <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fb6b 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 ff26 	bl	80038c8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f103 0214 	add.w	r2, r3, #20
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8002a88:	e002      	b.n	8002a90 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 ff29 	bl	80038e2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8002aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	f000 80e0 	beq.w	8002c7c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8002abc:	f7ff ffec 	bl	8002a98 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d042      	beq.n	8002b4c <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8002ac6:	f7fe fae3 	bl	8001090 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f083 0301 	eor.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fc5a 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 ff25 	bl	8003932 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4619      	mov	r1, r3
 8002aec:	4620      	mov	r0, r4
 8002aee:	f000 ff2b 	bl	8003948 <_ZStneRKSaIhES1_>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 8002afc:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 ff2c 	bl	8003960 <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f000 fc27 	bl	800336c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fc2d 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b38:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fef8 	bl	8003932 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b42:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8002b44:	4619      	mov	r1, r3
 8002b46:	4620      	mov	r0, r4
 8002b48:	f000 ff18 	bl	800397c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f7ff ff5c 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002b52:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 ff1f 	bl	8003998 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	bf8c      	ite	hi
 8002b62:	2301      	movhi	r3, #1
 8002b64:	2300      	movls	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d030      	beq.n	8002bce <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8002b6c:	6838      	ldr	r0, [r7, #0]
 8002b6e:	f000 ff22 	bl	80039b6 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002b72:	4604      	mov	r4, r0
 8002b74:	6838      	ldr	r0, [r7, #0]
 8002b76:	f000 ff2e 	bl	80039d6 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 ff39 	bl	80039f8 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8002b86:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681c      	ldr	r4, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fbfd 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b98:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f000 fc02 	bl	80033a8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f000 fbd9 	bl	800336c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	441a      	add	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e050      	b.n	8002c70 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff1b 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	bf94      	ite	ls
 8002bdc:	2301      	movls	r3, #1
 8002bde:	2300      	movhi	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d020      	beq.n	8002c28 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002be6:	6838      	ldr	r0, [r7, #0]
 8002be8:	f000 fee5 	bl	80039b6 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002bec:	4604      	mov	r4, r0
 8002bee:	6838      	ldr	r0, [r7, #0]
 8002bf0:	f000 fef1 	bl	80039d6 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 ff1a 	bl	8003a30 <_ZNSt6vectorIhSaIhEE5beginEv>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4629      	mov	r1, r5
 8002c02:	4620      	mov	r0, r4
 8002c04:	f000 ff24 	bl	8003a50 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 ff38 	bl	8003a80 <_ZNSt6vectorIhSaIhEE3endEv>
 8002c10:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fbbc 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002c1a:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4629      	mov	r1, r5
 8002c20:	4620      	mov	r0, r4
 8002c22:	f000 ff3e 	bl	8003aa2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8002c26:	e023      	b.n	8002c70 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681d      	ldr	r5, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681c      	ldr	r4, [r3, #0]
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff feea 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	18e1      	adds	r1, r4, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4628      	mov	r0, r5
 8002c42:	f000 ff3c 	bl	8003abe <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681c      	ldr	r4, [r3, #0]
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fedd 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fb97 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002c64:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002c66:	4632      	mov	r2, r6
 8002c68:	4629      	mov	r1, r5
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 ff3f 	bl	8003aee <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	441a      	add	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8002c7c:	687b      	ldr	r3, [r7, #4]
    }
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c86 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f103 0218 	add.w	r2, r3, #24
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3308      	adds	r3, #8
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f000 ff38 	bl	8003b10 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>:
      size() const
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 ff57 	bl	8003b68 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	: c() { }
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	2328      	movs	r3, #40	; 0x28
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f01a f835 	bl	801cd44 <memset>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f941 	bl	8000f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fdd4 	bl	80028a4 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fdbf 	bl	8003898 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	return c.front();
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fe7a 	bl	8002a28 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8002d34:	4603      	mov	r3, r0
      }
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fe81 	bl	8002a50 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>:
      push(value_type&& __x)
 8002d56:	b590      	push	{r4, r7, lr}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002d60:	687c      	ldr	r4, [r7, #4]
 8002d62:	6838      	ldr	r0, [r7, #0]
 8002d64:	f7ff fd53 	bl	800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f000 ff0d 	bl	8003b8c <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}

08002d7a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 8002d7a:	b5b0      	push	{r4, r5, r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 ff0f 	bl	8003bae <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8002d90:	4604      	mov	r4, r0
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ff16 	bl	8003bc6 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	4621      	mov	r1, r4
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 ff25 	bl	8003bf0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 8002da6:	68fb      	ldr	r3, [r7, #12]
      }
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}

08002db0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
      push_front(const value_type& __x)
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d00e      	beq.n	8002de4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8002dc6:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8002dcc:	3b14      	subs	r3, #20
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f000 ff72 	bl	8003cba <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f1a3 0214 	sub.w	r2, r3, #20
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
      }
 8002de2:	e003      	b.n	8002dec <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8002de4:	6839      	ldr	r1, [r7, #0]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 ff7a 	bl	8003ce0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f103 0218 	add.w	r2, r3, #24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3308      	adds	r3, #8
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 ffba 	bl	8003d82 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 0218 	add.w	r2, r3, #24
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3308      	adds	r3, #8
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f000 ffbd 	bl	8003dac <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3308      	adds	r3, #8
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ffd8 	bl	8003e04 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8002e54:	4603      	mov	r3, r0
      }
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fff2 	bl	8003e50 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 ffd5 	bl	8003e30 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002e86:	2100      	movs	r1, #0
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 ffed 	bl	8003e68 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f001 f83d 	bl	8003f34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f001 f84f 	bl	8003f68 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ffc6 	bl	8002e5e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 f858 	bl	8003fa0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8002ef0:	f107 0318 	add.w	r3, r7, #24
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f861 	bl	8003fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 ff34 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f107 0218 	add.w	r2, r7, #24
 8002f0a:	f107 0108 	add.w	r1, r7, #8
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f001 f880 	bl	8004014 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ffbe 	bl	8002e98 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002f26:	b590      	push	{r4, r7, lr}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002f30:	6838      	ldr	r0, [r7, #0]
 8002f32:	f001 f87c 	bl	800402e <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4622      	mov	r2, r4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f001 f881 	bl	8004044 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002f42:	687b      	ldr	r3, [r7, #4]
      }
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd90      	pop	{r4, r7, pc}

08002f4c <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	f001 f895 	bl	8004086 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4622      	mov	r2, r4
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f001 f89a 	bl	800409c <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002f68:	687b      	ldr	r3, [r7, #4]
      }
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}

08002f72 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002f72:	b590      	push	{r4, r7, lr}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002f7c:	6838      	ldr	r0, [r7, #0]
 8002f7e:	f001 f8ae 	bl	80040de <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4622      	mov	r2, r4
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f001 f8b3 	bl	80040f4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8002f8e:	687b      	ldr	r3, [r7, #4]
      }
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}

08002f98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f001 f8c8 	bl	8004136 <_ZNSaI7RequestEC1Ev>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f8d0 	bl	800414e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZNSaI7RequestED1Ev>:
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f001 f8dd 	bl	8004180 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002fda:	2014      	movs	r0, #20
 8002fdc:	f7fd ff51 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fe8:	3301      	adds	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002fec:	2308      	movs	r3, #8
 8002fee:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	f107 0210 	add.w	r2, r7, #16
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f8c8 	bl	8004196 <_ZSt3maxIjERKT_S2_S2_>
 8003006:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f001 f8d2 	bl	80041be <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 800301a:	4602      	mov	r2, r0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	1acb      	subs	r3, r1, r3
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003030:	4413      	add	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	69b9      	ldr	r1, [r7, #24]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f001 f8d8 	bl	80041f8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3308      	adds	r3, #8
 800304c:	69b9      	ldr	r1, [r7, #24]
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f8ec 	bl	800422c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f103 0218 	add.w	r2, r3, #24
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3b04      	subs	r3, #4
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f001 f8e3 	bl	800422c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003072:	2014      	movs	r0, #20
 8003074:	f7fd ff05 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003078:	4602      	mov	r2, r0
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003080:	fb01 f202 	mul.w	r2, r1, r2
 8003084:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
    }
 8003094:	bf00      	nop
 8003096:	3724      	adds	r7, #36	; 0x24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}

0800309c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d209      	bcs.n	80030c8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f001 f8d2 	bl	8004264 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3304      	adds	r3, #4
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e7f1      	b.n	80030ac <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	68f9      	ldr	r1, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f8d1 	bl	800428a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 f8e7 	bl	80042c4 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 f8d6 	bl	80042ac <_ZNSaIP7RequestED1Ev>
      }
 8003100:	bf00      	nop
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	3308      	adds	r3, #8
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f81e 	bl	800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	3318      	adds	r3, #24
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f80f 	bl	800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8003192:	b580      	push	{r7, lr}
 8003194:	b08c      	sub	sp, #48	; 0x30
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffd7 	bl	800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80031ac:	f107 0320 	add.w	r3, r7, #32
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffd1 	bl	800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80031b8:	f107 0220 	add.w	r2, r7, #32
 80031bc:	f107 0310 	add.w	r3, r7, #16
 80031c0:	4619      	mov	r1, r3
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f001 f88d 	bl	80042e2 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 80031c8:	bf00      	nop
 80031ca:	3730      	adds	r7, #48	; 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f001 f8f0 	bl	80043be <_ZNSaI8ResponceED1Ev>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f8d3 	bl	800439e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80031f8:	2100      	movs	r1, #0
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f001 f8eb 	bl	80043d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003222:	3304      	adds	r3, #4
 8003224:	461a      	mov	r2, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f001 f938 	bl	800449c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	461a      	mov	r2, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f001 f94a 	bl	80044d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ffc6 	bl	80031d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	3308      	adds	r3, #8
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f81e 	bl	80032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	3318      	adds	r3, #24
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f80f 	bl	80032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 80032e6:	f107 0310 	add.w	r3, r7, #16
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ffd7 	bl	80032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80032f2:	f107 0320 	add.w	r3, r7, #32
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ffd1 	bl	80032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80032fe:	f107 0220 	add.w	r2, r7, #32
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	4619      	mov	r1, r3
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f001 f8fd 	bl	8004508 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 800330e:	bf00      	nop
 8003310:	3730      	adds	r7, #48	; 0x30
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f001 f94d 	bl	80045be <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
	{ }
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
	if (__p)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f001 f925 	bl	80045d4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f001 f91b 	bl	80045f2 <_ZSt8_DestroyIPhEvT_S1_>
    }
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffec 	bl	80033c4 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f001 f90a 	bl	800460c <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fc3b 	bl	8002c86 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8003410:	4604      	mov	r4, r0
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 f912 	bl	800463c <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8003418:	4603      	mov	r3, r0
 800341a:	429c      	cmp	r4, r3
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003428:	4816      	ldr	r0, [pc, #88]	; (8003484 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 800342a:	f019 fbe3 	bl	801cbf4 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800342e:	2101      	movs	r1, #1
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f001 f914 	bl	800465e <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	1d1c      	adds	r4, r3, #4
 800343e:	4610      	mov	r0, r2
 8003440:	f001 f928 	bl	8004694 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8003444:	4603      	mov	r3, r0
 8003446:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8003448:	687c      	ldr	r4, [r7, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699d      	ldr	r5, [r3, #24]
 800344e:	6838      	ldr	r0, [r7, #0]
 8003450:	f7ff ffb8 	bl	80033c4 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	4629      	mov	r1, r5
 800345a:	4620      	mov	r0, r4
 800345c:	f7ff ffbd 	bl	80033da <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f103 0218 	add.w	r2, r3, #24
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fedc 	bl	800422c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bdb0      	pop	{r4, r5, r7, pc}
 8003484:	0801e378 	.word	0x0801e378

08003488 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800349e:	b590      	push	{r4, r7, lr}
 80034a0:	b089      	sub	sp, #36	; 0x24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	f107 031c 	add.w	r3, r7, #28
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f900 	bl	80046b8 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 80034b8:	f107 021c 	add.w	r2, r7, #28
 80034bc:	f107 0310 	add.w	r3, r7, #16
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f909 	bl	80046da <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f95f 	bl	8002790 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f90d 	bl	80046f8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	f107 0310 	add.w	r3, r7, #16
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 f906 	bl	80046f8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff4f 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80034f4:	4604      	mov	r4, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff4a 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80034fe:	4603      	mov	r3, r0
 8003500:	4619      	mov	r1, r3
 8003502:	4620      	mov	r0, r4
 8003504:	f001 f916 	bl	8004734 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f963 	bl	80027d8 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 8003512:	bf00      	nop
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 800356c:	429a      	cmp	r2, r3
 800356e:	d012      	beq.n	8003596 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 8003570:	687c      	ldr	r4, [r7, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699d      	ldr	r5, [r3, #24]
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f7ff ffe3 	bl	8003542 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	4629      	mov	r1, r5
 8003582:	4620      	mov	r0, r4
 8003584:	f001 f8e4 	bl	8004750 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f103 0210 	add.w	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
      }
 8003594:	e007      	b.n	80035a6 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f7ff ffd3 	bl	8003542 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 800359c:	4603      	mov	r3, r0
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f001 f8e9 	bl	8004778 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bdb0      	pop	{r4, r5, r7, pc}

080035ae <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f103 0218 	add.w	r2, r3, #24
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3308      	adds	r3, #8
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f001 f91c 	bl	8004800 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
	return *begin();
 80035da:	f107 0308 	add.w	r3, r7, #8
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fe34 	bl	800324e <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80035e6:	f107 0308 	add.w	r3, r7, #8
 80035ea:	4618      	mov	r0, r3
 80035ec:	f001 f91c 	bl	8004828 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 80035f0:	4603      	mov	r3, r0
      }
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f001 f90f 	bl	8004840 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8003684:	429a      	cmp	r2, r3
 8003686:	d011      	beq.n	80036ac <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fdfd 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f001 f8dd 	bl	8004858 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f103 0210 	add.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	609a      	str	r2, [r3, #8]
      }
 80036aa:	e002      	b.n	80036b2 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f001 f8e0 	bl	8004872 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f805 	bl	80036d0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80036c6:	4603      	mov	r3, r0
      }
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80036d8:	2301      	movs	r3, #1
      }
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80a8 	beq.w	800384a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff f985 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003700:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800370c:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f001 f8d7 	bl	80048c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003714:	4602      	mov	r2, r0
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4293      	cmp	r3, r2
 800371a:	d808      	bhi.n	800372e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 f8d0 	bl	80048c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003722:	4602      	mov	r2, r0
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	429a      	cmp	r2, r3
 800372c:	d901      	bls.n	8003732 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d30f      	bcc.n	800375e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fe24 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800374a:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800374c:	461a      	mov	r2, r3
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	4620      	mov	r0, r4
 8003752:	f001 f8c7 	bl	80048e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8003756:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800375c:	e075      	b.n	800384a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 800375e:	4a3d      	ldr	r2, [pc, #244]	; (8003854 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f001 f8cd 	bl	8004902 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8003768:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f90e 	bl	8004990 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003774:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003776:	f7ff ffa0 	bl	80036ba <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01b      	beq.n	80037b8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fe02 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800378e:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003790:	461a      	mov	r2, r3
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	4620      	mov	r0, r4
 8003796:	f001 f8a5 	bl	80048e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681c      	ldr	r4, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fdf4 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80037aa:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4629      	mov	r1, r5
 80037b0:	4620      	mov	r0, r4
 80037b2:	f001 f901 	bl	80049b8 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 80037b6:	e02e      	b.n	8003816 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fde4 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80037ca:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80037cc:	461a      	mov	r2, r3
 80037ce:	6839      	ldr	r1, [r7, #0]
 80037d0:	4620      	mov	r0, r4
 80037d2:	f001 f887 	bl	80048e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681c      	ldr	r4, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fdd2 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80037ee:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4629      	mov	r1, r5
 80037f4:	4620      	mov	r0, r4
 80037f6:	f001 f8f3 	bl	80049e0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681c      	ldr	r4, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fdc4 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800380a:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800380c:	461a      	mov	r2, r3
 800380e:	4629      	mov	r1, r5
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff fdc9 	bl	80033a8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8003826:	461a      	mov	r2, r3
 8003828:	f7ff fda0 	bl	800336c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4413      	add	r3, r2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	441a      	add	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	441a      	add	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]
    }
 800384a:	bf00      	nop
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bdb0      	pop	{r4, r5, r7, pc}
 8003852:	bf00      	nop
 8003854:	0801e3a8 	.word	0x0801e3a8

08003858 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00e      	beq.n	8003890 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fd8a 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800387e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003880:	461a      	mov	r2, r3
 8003882:	4621      	mov	r1, r4
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	f7ff fd8f 	bl	80033a8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	605a      	str	r2, [r3, #4]
      }
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f001 f89c 	bl	8004a12 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fc29 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7ff ffe4 	bl	80038c8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 fcab 	bl	8004264 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f103 0208 	add.w	r2, r3, #8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	3304      	adds	r3, #4
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f000 fc85 	bl	800422c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
    }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
      { return false; }
 8003952:	2300      	movs	r3, #0
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff72 	bl	8003858 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8003986:	461a      	mov	r2, r3
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 f84d 	bl	8004a2a <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f83b 	bl	8004a42 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	1d1a      	adds	r2, r3, #4
 80039e2:	f107 030c 	add.w	r3, r7, #12
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 f82a 	bl	8004a42 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 ffc0 	bl	8004990 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003a10:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fcbc 	bl	8003392 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003a1a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f001 f81e 	bl	8004a62 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8003a26:	697b      	ldr	r3, [r7, #20]
	}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f81f 	bl	8004a84 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f001 f821 	bl	8004aa4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8003a62:	4604      	mov	r4, r0
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	f001 f81d 	bl	8004aa4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4620      	mov	r0, r4
 8003a72:	f001 f822 	bl	8004aba <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 8003a76:	4603      	mov	r3, r0
    }
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd90      	pop	{r4, r7, pc}

08003a80 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	f107 030c 	add.w	r3, r7, #12
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fff6 	bl	8004a84 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f001 f823 	bl	8004afc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8003abe:	b590      	push	{r4, r7, lr}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 f823 	bl	8004b16 <_ZSt12__miter_baseIPhET_S1_>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	68b8      	ldr	r0, [r7, #8]
 8003ad4:	f001 f81f 	bl	8004b16 <_ZSt12__miter_baseIPhET_S1_>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4619      	mov	r1, r3
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f001 f824 	bl	8004b2c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8003ae4:	4603      	mov	r3, r0
    }
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}

08003aee <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f001 f836 	bl	8004b72 <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003b1a:	f001 f83c 	bl	8004b96 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	109b      	asrs	r3, r3, #2
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6811      	ldr	r1, [r2, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6852      	ldr	r2, [r2, #4]
 8003b3c:	1a8a      	subs	r2, r1, r2
 8003b3e:	1092      	asrs	r2, r2, #2
 8003b40:	4908      	ldr	r1, [pc, #32]	; (8003b64 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8003b42:	fb01 f202 	mul.w	r2, r1, r2
 8003b46:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	6891      	ldr	r1, [r2, #8]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	1a8a      	subs	r2, r1, r2
 8003b52:	1092      	asrs	r2, r2, #2
 8003b54:	4903      	ldr	r1, [pc, #12]	; (8003b64 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8003b56:	fb01 f202 	mul.w	r2, r1, r2
 8003b5a:	4413      	add	r3, r2
      }
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	cccccccd 	.word	0xcccccccd

08003b68 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f103 0218 	add.w	r2, r3, #24
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f001 f812 	bl	8004ba6 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	f7fe fe39 	bl	800280e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fe fe3f 	bl	8002824 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003bc6:	b590      	push	{r4, r7, lr}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ffed 	bl	8003bae <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f001 f809 	bl	8004bee <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4423      	add	r3, r4
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd90      	pop	{r4, r7, pc}

08003bf0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	b09f      	sub	sp, #124	; 0x7c
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 ffff 	bl	8004c06 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff f903 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bf8c      	ite	hi
 8003c1a:	2301      	movhi	r3, #1
 8003c1c:	2300      	movls	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d031      	beq.n	8003c88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff f8f5 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fff9 	bl	8004c2e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8003c3c:	68bc      	ldr	r4, [r7, #8]
 8003c3e:	697d      	ldr	r5, [r7, #20]
 8003c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f9aa 	bl	8003fa0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8003c4c:	f107 0018 	add.w	r0, r7, #24
 8003c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c54:	462a      	mov	r2, r5
 8003c56:	4621      	mov	r1, r4
 8003c58:	f000 fffc 	bl	8004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003c5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f9ab 	bl	8003fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8003c68:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f810 	bl	8004c94 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003c74:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003c78:	f88d 6000 	strb.w	r6, [sp]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4622      	mov	r2, r4
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f001 f812 	bl	8004caa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	}
 8003c86:	e014      	b.n	8003cb2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8003c88:	68bc      	ldr	r4, [r7, #8]
 8003c8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f985 	bl	8003fa0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8003c96:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003c9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	f000 ffd7 	bl	8004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8003ca6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003caa:	4619      	mov	r1, r3
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f001 f879 	bl	8004da4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8003cb2:	bf00      	nop
 8003cb4:	3774      	adds	r7, #116	; 0x74
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cba <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f001 f89f 	bl	8004e0a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f001 f8a4 	bl	8004e20 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003ce0:	b5b0      	push	{r4, r5, r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff f894 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f001 f8ad 	bl	8004e52 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	429c      	cmp	r4, r3
 8003cfc:	bf0c      	ite	eq
 8003cfe:	2301      	moveq	r3, #1
 8003d00:	2300      	movne	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003d08:	4817      	ldr	r0, [pc, #92]	; (8003d68 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8003d0a:	f018 ff73 	bl	801cbf4 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8003d0e:	2101      	movs	r1, #1
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f001 f8af 	bl	8004e74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	1f1c      	subs	r4, r3, #4
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f001 f8c0 	bl	8004ea4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8003d24:	4603      	mov	r3, r0
 8003d26:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	3b04      	subs	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f001 f8c6 	bl	8004ec8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f1a3 0214 	sub.w	r2, r3, #20
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8003d48:	687c      	ldr	r4, [r7, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689d      	ldr	r5, [r3, #8]
 8003d4e:	6838      	ldr	r0, [r7, #0]
 8003d50:	f001 f85b 	bl	8004e0a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff ffad 	bl	8003cba <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
      }
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bdb0      	pop	{r4, r5, r7, pc}
 8003d68:	0801e378 	.word	0x0801e378

08003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003db6:	f001 f8b6 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	109b      	asrs	r3, r3, #2
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6811      	ldr	r1, [r2, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6852      	ldr	r2, [r2, #4]
 8003dd8:	1a8a      	subs	r2, r1, r2
 8003dda:	1092      	asrs	r2, r2, #2
 8003ddc:	4908      	ldr	r1, [pc, #32]	; (8003e00 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8003dde:	fb01 f202 	mul.w	r2, r1, r2
 8003de2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	6891      	ldr	r1, [r2, #8]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	1a8a      	subs	r2, r1, r2
 8003dee:	1092      	asrs	r2, r2, #2
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8003df2:	fb01 f202 	mul.w	r2, r1, r2
 8003df6:	4413      	add	r3, r2
      }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	cccccccd 	.word	0xcccccccd

08003e04 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 f88d 	bl	8004f36 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8003e1c:	f107 0308 	add.w	r3, r7, #8
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f89b 	bl	8004f5c <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8003e26:	4603      	mov	r3, r0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 f89b 	bl	8004f74 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f8a3 	bl	8004f8c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f001 f8b0 	bl	8004fbe <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003e72:	2014      	movs	r0, #20
 8003e74:	f7fd f805 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003e84:	2308      	movs	r3, #8
 8003e86:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	f107 0210 	add.w	r2, r7, #16
 8003e92:	f107 030c 	add.w	r3, r7, #12
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f97c 	bl	8004196 <_ZSt3maxIjERKT_S2_S2_>
 8003e9e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f001 f891 	bl	8004fd4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	1acb      	subs	r3, r1, r3
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003ec8:	4413      	add	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f001 f897 	bl	800500e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 ffee 	bl	8004ec8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f103 0218 	add.w	r2, r3, #24
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3b04      	subs	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f000 ffe5 	bl	8004ec8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003f0a:	2014      	movs	r0, #20
 8003f0c:	f7fc ffb9 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003f10:	4602      	mov	r2, r0
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f18:	fb01 f202 	mul.w	r2, r1, r2
 8003f1c:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
    }
 8003f2c:	bf00      	nop
 8003f2e:	3724      	adds	r7, #36	; 0x24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd90      	pop	{r4, r7, pc}

08003f34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d209      	bcs.n	8003f60 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4619      	mov	r1, r3
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 ffd4 	bl	8004f00 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e7f1      	b.n	8003f44 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	68f9      	ldr	r1, [r7, #12]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 f861 	bl	8005042 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 f877 	bl	800507c <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003f8e:	f107 0314 	add.w	r3, r7, #20
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 f866 	bl	8005064 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f813 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f804 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 8004014:	b480      	push	{r7}
 8004016:	b08d      	sub	sp, #52	; 0x34
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
      }
 8004022:	bf00      	nop
 8004024:	3734      	adds	r7, #52	; 0x34
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f001 f81f 	bl	800509a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 800405c:	68b8      	ldr	r0, [r7, #8]
 800405e:	f001 f829 	bl	80050b4 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff f86d 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800406a:	4604      	mov	r4, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff f868 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004074:	4603      	mov	r3, r0
 8004076:	4619      	mov	r1, r3
 8004078:	4620      	mov	r0, r4
 800407a:	f001 f82f 	bl	80050dc <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}

08004086 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f822 	bl	80050f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 80040b4:	68b8      	ldr	r0, [r7, #8]
 80040b6:	f001 f82c 	bl	8005112 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff f8e4 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80040c2:	4604      	mov	r4, r0
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff f8df 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80040cc:	4603      	mov	r3, r0
 80040ce:	4619      	mov	r1, r3
 80040d0:	4620      	mov	r0, r4
 80040d2:	f001 f832 	bl	800513a <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd90      	pop	{r4, r7, pc}

080040de <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f001 f825 	bl	8005156 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 800410c:	68b8      	ldr	r0, [r7, #8]
 800410e:	f001 f82f 	bl	8005170 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fe29 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 800411a:	4604      	mov	r4, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fe24 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004124:	4603      	mov	r3, r0
 8004126:	4619      	mov	r1, r3
 8004128:	4620      	mov	r0, r4
 800412a:	f001 f835 	bl	8005198 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}

08004136 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f001 f838 	bl	80051b4 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3308      	adds	r3, #8
 8004166:	4618      	mov	r0, r3
 8004168:	f001 f82f 	bl	80051ca <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3318      	adds	r3, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f001 f82a 	bl	80051ca <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d201      	bcs.n	80041b0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	e000      	b.n	80041b2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80041b0:	687b      	ldr	r3, [r7, #4]
    }
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80041be:	b590      	push	{r4, r7, lr}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80041c8:	f107 030c 	add.w	r3, r7, #12
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f85b 	bl	800428a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 f80c 	bl	80051f8 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 80041e0:	4604      	mov	r4, r0
 80041e2:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80041e4:	f107 030c 	add.w	r3, r7, #12
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f85f 	bl	80042ac <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80041ee:	4623      	mov	r3, r4
      }
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}

080041f8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d209      	bcs.n	8004224 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fa3f 	bl	8004694 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8004216:	4602      	mov	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3304      	adds	r3, #4
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e7f1      	b.n	8004208 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685c      	ldr	r4, [r3, #4]
 8004248:	f000 fca5 	bl	8004b96 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 800424c:	4602      	mov	r2, r0
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	18e2      	adds	r2, r4, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
      }
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bd90      	pop	{r4, r7, pc}

08004264 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800426e:	687c      	ldr	r4, [r7, #4]
 8004270:	2014      	movs	r0, #20
 8004272:	f7fc fe06 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	4620      	mov	r0, r4
 800427e:	f000 ffca 	bl	8005216 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bd90      	pop	{r4, r7, pc}

0800428a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004294:	6838      	ldr	r0, [r7, #0]
 8004296:	f000 ffcd 	bl	8005234 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800429a:	4603      	mov	r3, r0
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 ffd3 	bl	800524a <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 ffd5 	bl	8005264 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 ffd0 	bl	800527a <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 80042e2:	b5b0      	push	{r4, r5, r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	3304      	adds	r3, #4
 80042f4:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d219      	bcs.n	8004334 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681d      	ldr	r5, [r3, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681c      	ldr	r4, [r3, #0]
 8004308:	f000 ffc7 	bl	800529a <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 800430c:	4602      	mov	r2, r0
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe ff12 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004320:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8004322:	461a      	mov	r2, r3
 8004324:	4621      	mov	r1, r4
 8004326:	4628      	mov	r0, r5
 8004328:	f000 ffbf 	bl	80052aa <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3304      	adds	r3, #4
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e7e0      	b.n	80042f6 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d01c      	beq.n	800437a <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	681c      	ldr	r4, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fefa 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004350:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004352:	461a      	mov	r2, r3
 8004354:	4629      	mov	r1, r5
 8004356:	4620      	mov	r0, r4
 8004358:	f000 ffa7 	bl	80052aa <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685c      	ldr	r4, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe feec 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800436c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800436e:	461a      	mov	r2, r3
 8004370:	4629      	mov	r1, r5
 8004372:	4620      	mov	r0, r4
 8004374:	f000 ff99 	bl	80052aa <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8004378:	e00d      	b.n	8004396 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	681c      	ldr	r4, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fedd 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800438a:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800438c:	461a      	mov	r2, r3
 800438e:	4629      	mov	r1, r5
 8004390:	4620      	mov	r0, r4
 8004392:	f000 ff8a 	bl	80052aa <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bdb0      	pop	{r4, r5, r7, pc}

0800439e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 ff8d 	bl	80052c6 <_ZNSaI8ResponceEC1Ev>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ff95 	bl	80052de <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZNSaI8ResponceED1Ev>:
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 ffa2 	bl	8005310 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80043d6:	b590      	push	{r4, r7, lr}
 80043d8:	b089      	sub	sp, #36	; 0x24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80043e0:	2010      	movs	r0, #16
 80043e2:	f7fc fd4e 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80043e6:	4602      	mov	r2, r0
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80043f2:	2308      	movs	r3, #8
 80043f4:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3302      	adds	r3, #2
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	f107 0210 	add.w	r2, r7, #16
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fec5 	bl	8004196 <_ZSt3maxIjERKT_S2_S2_>
 800440c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 ff83 	bl	8005326 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8004420:	4602      	mov	r2, r0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	1acb      	subs	r3, r1, r3
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004436:	4413      	add	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4413      	add	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 ff89 	bl	8005360 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3308      	adds	r3, #8
 8004452:	69b9      	ldr	r1, [r7, #24]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 ff9d 	bl	8005394 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f103 0218 	add.w	r2, r3, #24
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3b04      	subs	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 ff94 	bl	8005394 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004478:	2010      	movs	r0, #16
 800447a:	f7fc fd02 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800447e:	4602      	mov	r2, r0
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	fbb3 f1f2 	udiv	r1, r3, r2
 8004486:	fb01 f202 	mul.w	r2, r1, r2
 800448a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
    }
 8004494:	bf00      	nop
 8004496:	3724      	adds	r7, #36	; 0x24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd90      	pop	{r4, r7, pc}

0800449c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d209      	bcs.n	80044c8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4619      	mov	r1, r3
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 ff83 	bl	80053c6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3304      	adds	r3, #4
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e7f1      	b.n	80044ac <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80044c8:	bf00      	nop
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 ff82 	bl	80053ec <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 ff98 	bl	8005426 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ff87 	bl	800540e <_ZNSaIP8ResponceED1Ev>
      }
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	3304      	adds	r3, #4
 800451a:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	429a      	cmp	r2, r3
 8004524:	d216      	bcs.n	8004554 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681c      	ldr	r4, [r3, #0]
 800452e:	f000 ff89 	bl	8005444 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 8004532:	4603      	mov	r3, r0
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fea5 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004540:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8004542:	461a      	mov	r2, r3
 8004544:	4621      	mov	r1, r4
 8004546:	4628      	mov	r0, r5
 8004548:	f000 ff84 	bl	8005454 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3304      	adds	r3, #4
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e7e3      	b.n	800451c <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d01c      	beq.n	800459a <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	681c      	ldr	r4, [r3, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe fe8d 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004570:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004572:	461a      	mov	r2, r3
 8004574:	4629      	mov	r1, r5
 8004576:	4620      	mov	r0, r4
 8004578:	f000 ff6c 	bl	8005454 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685c      	ldr	r4, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fe7f 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800458c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800458e:	461a      	mov	r2, r3
 8004590:	4629      	mov	r1, r5
 8004592:	4620      	mov	r0, r4
 8004594:	f000 ff5e 	bl	8005454 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8004598:	e00d      	b.n	80045b6 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	681c      	ldr	r4, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe fe70 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80045aa:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80045ac:	461a      	mov	r2, r3
 80045ae:	4629      	mov	r1, r5
 80045b0:	4620      	mov	r0, r4
 80045b2:	f000 ff4f 	bl	8005454 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bdb0      	pop	{r4, r5, r7, pc}

080045be <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 ff43 	bl	8005470 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 ff44 	bl	800548c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fe fed3 	bl	80033c4 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 800461e:	4604      	mov	r4, r0
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4619      	mov	r1, r3
 8004624:	2014      	movs	r0, #20
 8004626:	f7fc fc20 	bl	8000e6a <_ZnwjPv>
 800462a:	4603      	mov	r3, r0
 800462c:	4621      	mov	r1, r4
 800462e:	4618      	mov	r0, r3
 8004630:	f7fd f8cf 	bl	80017d2 <_ZN7RequestC1EOS_>
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	bd90      	pop	{r4, r7, pc}

0800463c <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fdf4 	bl	8005234 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800464c:	4603      	mov	r3, r0
 800464e:	4618      	mov	r0, r3
 8004650:	f000 ff27 	bl	80054a2 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 8004654:	4603      	mov	r3, r0
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	6809      	ldr	r1, [r1, #0]
 8004678:	1a41      	subs	r1, r0, r1
 800467a:	1089      	asrs	r1, r1, #2
 800467c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800467e:	429a      	cmp	r2, r3
 8004680:	d904      	bls.n	800468c <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004682:	2200      	movs	r2, #0
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 ff25 	bl	80054d6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800469c:	687c      	ldr	r4, [r7, #4]
 800469e:	2014      	movs	r0, #20
 80046a0:	f7fc fbef 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4619      	mov	r1, r3
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 ffae 	bl	800560a <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 80046ae:	4603      	mov	r3, r0
      }
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd90      	pop	{r4, r7, pc}

080046b8 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80046c2:	6838      	ldr	r0, [r7, #0]
 80046c4:	f7ff f935 	bl	8003932 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fe ff9f 	bl	8003610 <_ZNSaIhEC1ERKS_>
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 ff9d 	bl	8005628 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8004702:	f107 030c 	add.w	r3, r7, #12
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fe11 	bl	800332e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 ff97 	bl	8005646 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 ff93 	bl	8005646 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8004720:	f107 030c 	add.w	r3, r7, #12
 8004724:	4619      	mov	r1, r3
 8004726:	6838      	ldr	r0, [r7, #0]
 8004728:	f000 ff8d 	bl	8005646 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 800472c:	bf00      	nop
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 800473e:	461a      	mov	r2, r3
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ff96 	bl	8005674 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fe fef0 	bl	8003542 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8004762:	4603      	mov	r3, r0
 8004764:	461a      	mov	r2, r3
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 ff90 	bl	800568e <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004778:	b5b0      	push	{r4, r5, r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff f9f0 	bl	8003b68 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8004788:	4604      	mov	r4, r0
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 ff97 	bl	80056be <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 8004790:	4603      	mov	r3, r0
 8004792:	429c      	cmp	r4, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80047a0:	4816      	ldr	r0, [pc, #88]	; (80047fc <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 80047a2:	f018 fa27 	bl	801cbf4 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80047a6:	2101      	movs	r1, #1
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 ff99 	bl	80056e0 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	1d1c      	adds	r4, r3, #4
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 ffad 	bl	8005716 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80047c0:	687c      	ldr	r4, [r7, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699d      	ldr	r5, [r3, #24]
 80047c6:	6838      	ldr	r0, [r7, #0]
 80047c8:	f7fe febb 	bl	8003542 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	4629      	mov	r1, r5
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7ff ffbc 	bl	8004750 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f103 0218 	add.w	r2, r3, #24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fdd4 	bl	8005394 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	619a      	str	r2, [r3, #24]
      }
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bdb0      	pop	{r4, r5, r7, pc}
 80047fc:	0801e378 	.word	0x0801e378

08004800 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	bf0c      	ite	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	2300      	movne	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8004862:	6839      	ldr	r1, [r7, #0]
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 ff68 	bl	800573a <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fd04 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f7ff ffe4 	bl	8004858 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f000 fd94 	bl	80053c6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f103 0208 	add.w	r2, r3, #8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f000 fd71 	bl	8005394 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
    }
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff f830 	bl	8003932 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 ff3c 	bl	8005752 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 80048da:	4603      	mov	r3, r0
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 ff47 	bl	8005786 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 80048f8:	4603      	mov	r3, r0
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8004902:	b590      	push	{r4, r7, lr}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ffd7 	bl	80048c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004914:	4604      	mov	r4, r0
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7fe f877 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800491c:	4603      	mov	r3, r0
 800491e:	1ae2      	subs	r2, r4, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	bf34      	ite	cc
 8004926:	2301      	movcc	r3, #1
 8004928:	2300      	movcs	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f018 f95f 	bl	801cbf4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7fe f867 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800493c:	4604      	mov	r4, r0
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7fe f863 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004944:	4603      	mov	r3, r0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	f107 0208 	add.w	r2, r7, #8
 800494c:	f107 0310 	add.w	r3, r7, #16
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fc1f 	bl	8004196 <_ZSt3maxIjERKT_S2_S2_>
 8004958:	4603      	mov	r3, r0
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4423      	add	r3, r4
 800495e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7fe f852 	bl	8002a0a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004966:	4602      	mov	r2, r0
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	4293      	cmp	r3, r2
 800496c:	d306      	bcc.n	800497c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ffa7 	bl	80048c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004974:	4602      	mov	r2, r0
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4293      	cmp	r3, r2
 800497a:	d904      	bls.n	8004986 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7ff ffa0 	bl	80048c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004982:	4603      	mov	r3, r0
 8004984:	e000      	b.n	8004988 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8004986:	697b      	ldr	r3, [r7, #20]
      }
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd90      	pop	{r4, r7, pc}

08004990 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fefe 	bl	80057a6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80049aa:	4603      	mov	r3, r0
 80049ac:	e000      	b.n	80049b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80049ae:	2300      	movs	r3, #0
      }
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80049c6:	f88d 4000 	strb.w	r4, [sp]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fef7 	bl	80057c4 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 80049d6:	4603      	mov	r3, r0
      }
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}

080049e0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fefa 	bl	80057e8 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80049f4:	4604      	mov	r4, r0
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f000 fef6 	bl	80057e8 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80049fc:	4601      	mov	r1, r0
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 feff 	bl	8005806 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8004a08:	4603      	mov	r3, r0
    }
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd90      	pop	{r4, r7, pc}

08004a12 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7fc faee 	bl	8000ffe <_ZN7RequestD1Ev>
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	713a      	strb	r2, [r7, #4]
    { }
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fed7 	bl	8005828 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004aba:	b5b0      	push	{r4, r5, r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fec0 	bl	800584c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004acc:	4604      	mov	r4, r0
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f000 febc 	bl	800584c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fec6 	bl	8005868 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f000 fece 	bl	8005884 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fed9 	bl	80058a4 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 8004af2:	4603      	mov	r3, r0
    }
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bdb0      	pop	{r4, r5, r7, pc}

08004afc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fee0 	bl	80058ce <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004b2c:	b5b0      	push	{r4, r5, r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fed3 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 8004b3e:	4604      	mov	r4, r0
 8004b40:	68b8      	ldr	r0, [r7, #8]
 8004b42:	f000 fecf 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 8004b46:	4605      	mov	r5, r0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 feca 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	4629      	mov	r1, r5
 8004b56:	4620      	mov	r0, r4
 8004b58:	f000 fecf 	bl	80058fa <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fed9 	bl	800591a <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8004b68:	4603      	mov	r3, r0
    }
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bdb0      	pop	{r4, r5, r7, pc}

08004b72 <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fed3 	bl	8005932 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8004b8c:	4603      	mov	r3, r0
    }
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004b96:	b580      	push	{r7, lr}
 8004b98:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004b9a:	2014      	movs	r0, #20
 8004b9c:	f7fc f971 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8004bb0:	f000 fecf 	bl	8005952 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	109b      	asrs	r3, r3, #2
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6811      	ldr	r1, [r2, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6852      	ldr	r2, [r2, #4]
 8004bd2:	1a8a      	subs	r2, r1, r2
 8004bd4:	1112      	asrs	r2, r2, #4
 8004bd6:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	6891      	ldr	r1, [r2, #8]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	1a8a      	subs	r2, r1, r2
 8004be2:	1112      	asrs	r2, r2, #4
 8004be4:	4413      	add	r3, r2
      }
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004c06:	b5b0      	push	{r4, r5, r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004c10:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 f83d 	bl	8004c94 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8004c1a:	462a      	mov	r2, r5
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 fea0 	bl	8005964 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8004c24:	4603      	mov	r3, r0
    }
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bdb0      	pop	{r4, r5, r7, pc}

08004c2e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8004c2e:	b590      	push	{r4, r7, lr}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f829 	bl	8004c94 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8004c42:	4622      	mov	r2, r4
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fea2 	bl	8005990 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}

08004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004c62:	68b8      	ldr	r0, [r7, #8]
 8004c64:	f000 feaa 	bl	80059bc <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fea6 	bl	80059bc <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8004c70:	4605      	mov	r5, r0
 8004c72:	f107 0310 	add.w	r3, r7, #16
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff f9af 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f107 0310 	add.w	r3, r7, #16
 8004c84:	462a      	mov	r2, r5
 8004c86:	4621      	mov	r1, r4
 8004c88:	f000 fea3 	bl	80059d2 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bdb0      	pop	{r4, r5, r7, pc}

08004c94 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004c9c:	bf00      	nop
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8004caa:	b590      	push	{r4, r7, lr}
 8004cac:	b0a5      	sub	sp, #148	; 0x94
 8004cae:	af02      	add	r7, sp, #8
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ffa3 	bl	8004c06 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d126      	bne.n	8004d20 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8004cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fea9 	bl	8005a34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8004ce2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004ce6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff f975 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff f839 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004cfa:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8004cfc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004d00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d04:	9200      	str	r2, [sp, #0]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	f000 febd 	bl	8005a88 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f103 0408 	add.w	r4, r3, #8
 8004d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004d1e:	e03d      	b.n	8004d9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d127      	bne.n	8004d7c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 febe 	bl	8005ab8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8004d42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff f947 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff f80b 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004d56:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8004d58:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004d5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d60:	9200      	str	r2, [sp, #0]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	f000 fe8f 	bl	8005a88 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f103 0418 	add.w	r4, r3, #24
 8004d70:	f107 0314 	add.w	r3, r7, #20
 8004d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004d7a:	e00f      	b.n	8004d9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8004d7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff f92a 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8004d88:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 feb8 	bl	8005b0c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8004d9c:	bf00      	nop
 8004d9e:	378c      	adds	r7, #140	; 0x8c
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd90      	pop	{r4, r7, pc}

08004da4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b08b      	sub	sp, #44	; 0x2c
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8004dae:	f107 0308 	add.w	r3, r7, #8
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff f911 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8004dba:	f107 0318 	add.w	r3, r7, #24
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff f8fc 	bl	8003fbe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe ffcf 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f107 0218 	add.w	r2, r7, #24
 8004dd4:	f107 0108 	add.w	r1, r7, #8
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff f91b 	bl	8004014 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8004dea:	3304      	adds	r3, #4
 8004dec:	461a      	mov	r2, r3
 8004dee:	f7ff f8a1 	bl	8003f34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	f103 0418 	add.w	r4, r3, #24
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004e02:	bf00      	nop
 8004e04:	372c      	adds	r7, #44	; 0x2c
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd90      	pop	{r4, r7, pc}

08004e0a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff ffec 	bl	8004e0a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e32:	4605      	mov	r5, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4619      	mov	r1, r3
 8004e38:	2014      	movs	r0, #20
 8004e3a:	f7fc f816 	bl	8000e6a <_ZnwjPv>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	461c      	mov	r4, r3
 8004e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bdb0      	pop	{r4, r5, r7, pc}

08004e52 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 f962 	bl	8006126 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f944 	bl	80060f2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d904      	bls.n	8004e9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8004e92:	2201      	movs	r2, #1
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 f950 	bl	800613c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004eac:	687c      	ldr	r4, [r7, #4]
 8004eae:	2014      	movs	r0, #20
 8004eb0:	f7fb ffe7 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f001 f9d9 	bl	8006270 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 8004ebe:	4603      	mov	r3, r0
      }
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd90      	pop	{r4, r7, pc}

08004ec8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685c      	ldr	r4, [r3, #4]
 8004ee4:	f000 f81f 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	18e2      	adds	r2, r4, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
      }
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd90      	pop	{r4, r7, pc}

08004f00 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004f0a:	687c      	ldr	r4, [r7, #4]
 8004f0c:	2014      	movs	r0, #20
 8004f0e:	f7fb ffb8 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f001 f9b8 	bl	800628e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd90      	pop	{r4, r7, pc}

08004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004f26:	b580      	push	{r7, lr}
 8004f28:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004f2a:	2014      	movs	r0, #20
 8004f2c:	f7fb ffa9 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4618      	mov	r0, r3
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff f849 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f001 f9ad 	bl	80062ac <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 8004f52:	bf00      	nop
      }
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 f9f9 	bl	8006374 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f9f0 	bl	800638a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3318      	adds	r3, #24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f001 f9eb 	bl	800638a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f82c 	bl	8005042 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004fea:	f107 030c 	add.w	r3, r7, #12
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 f9e1 	bl	80063b8 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004ffa:	f107 030c 	add.w	r3, r7, #12
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f830 	bl	8005064 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005004:	4623      	mov	r3, r4
      }
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}

0800500e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d209      	bcs.n	800503a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff ff3c 	bl	8004ea4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 800502c:	4602      	mov	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3304      	adds	r3, #4
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e7f1      	b.n	800501e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800504c:	6838      	ldr	r0, [r7, #0]
 800504e:	f001 f86a 	bl	8006126 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8005052:	4603      	mov	r3, r0
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 f9bd 	bl	80063d6 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f001 f9bf 	bl	80063f0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f001 f9ba 	bl	8006406 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 f9c5 	bl	8006436 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80050bc:	f107 0308 	add.w	r3, r7, #8
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe f820 	bl	8003108 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80050c8:	f107 0308 	add.w	r3, r7, #8
 80050cc:	4619      	mov	r1, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 f9e4 	bl	800649c <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80050d4:	bf00      	nop
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80050e6:	461a      	mov	r2, r3
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 fa09 	bl	8006502 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 fa09 	bl	800651c <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 800511a:	f107 0308 	add.w	r3, r7, #8
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe f894 	bl	800324e <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8005126:	f107 0308 	add.w	r3, r7, #8
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 fa28 	bl	8006582 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8005132:	bf00      	nop
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8005144:	461a      	mov	r2, r3
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f001 fa4d 	bl	80065e8 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f001 fa4d 	bl	8006602 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8005178:	f107 0308 	add.w	r3, r7, #8
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe ff0e 	bl	8003fa0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8005184:	f107 0308 	add.w	r3, r7, #8
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fe0a 	bl	8004da4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8005190:	bf00      	nop
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80051a2:	461a      	mov	r2, r3
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f001 fa5e 	bl	8006668 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005202:	2200      	movs	r2, #0
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f001 fa3b 	bl	8006682 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 800520c:	4603      	mov	r3, r0
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f001 fa49 	bl	80066be <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 fa45 	bl	80066e4 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4619      	mov	r1, r3
 800528c:	68b8      	ldr	r0, [r7, #8]
 800528e:	f017 fc9b 	bl	801cbc8 <_ZdlPvj>
      }
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800529a:	b580      	push	{r7, lr}
 800529c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800529e:	2014      	movs	r0, #20
 80052a0:	f7fb fdef 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80052a4:	4603      	mov	r3, r0
 80052a6:	4618      	mov	r0, r3
 80052a8:	bd80      	pop	{r7, pc}

080052aa <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f001 fa1e 	bl	80066fa <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f001 fa20 	bl	8006714 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3308      	adds	r3, #8
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fa17 	bl	800672a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3318      	adds	r3, #24
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fa12 	bl	800672a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005326:	b590      	push	{r4, r7, lr}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005330:	f107 030c 	add.w	r3, r7, #12
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f858 	bl	80053ec <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800533c:	f107 030c 	add.w	r3, r7, #12
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f001 fa08 	bl	8006758 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 8005348:	4604      	mov	r4, r0
 800534a:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800534c:	f107 030c 	add.w	r3, r7, #12
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f85c 	bl	800540e <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005356:	4623      	mov	r3, r4
      }
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}

08005360 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d209      	bcs.n	800538c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f9cc 	bl	8005716 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 800537e:	4602      	mov	r2, r0
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	3304      	adds	r3, #4
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e7f1      	b.n	8005370 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 800538c:	bf00      	nop
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685c      	ldr	r4, [r3, #4]
 80053b0:	f000 facf 	bl	8005952 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 80053b4:	4603      	mov	r3, r0
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	18e2      	adds	r2, r4, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	609a      	str	r2, [r3, #8]
      }
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd90      	pop	{r4, r7, pc}

080053c6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80053c6:	b590      	push	{r4, r7, lr}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80053d0:	687c      	ldr	r4, [r7, #4]
 80053d2:	2010      	movs	r0, #16
 80053d4:	f7fb fd55 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	4620      	mov	r0, r4
 80053e0:	f001 f9c9 	bl	8006776 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}

080053ec <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80053f6:	6838      	ldr	r0, [r7, #0]
 80053f8:	f001 f9cc 	bl	8006794 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80053fc:	4603      	mov	r3, r0
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f001 f9d2 	bl	80067aa <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 f9d4 	bl	80067c4 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f001 f9cf 	bl	80067da <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005448:	2010      	movs	r0, #16
 800544a:	f7fb fd1a 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800544e:	4603      	mov	r3, r0
 8005450:	4618      	mov	r0, r3
 8005452:	bd80      	pop	{r7, pc}

08005454 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f001 f9c9 	bl	80067fa <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	68b8      	ldr	r0, [r7, #8]
 8005480:	f017 fba2 	bl	801cbc8 <_ZdlPvj>
      }
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80054aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80054ae:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 f9af 	bl	8006814 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 80054b6:	4603      	mov	r3, r0
 80054b8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80054ba:	f107 0208 	add.w	r2, r7, #8
 80054be:	f107 030c 	add.w	r3, r7, #12
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 f9b1 	bl	800682c <_ZSt3minIjERKT_S2_S2_>
 80054ca:	4603      	mov	r3, r0
 80054cc:	681b      	ldr	r3, [r3, #0]
      }
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80054d6:	b590      	push	{r4, r7, lr}
 80054d8:	b08b      	sub	sp, #44	; 0x2c
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	109b      	asrs	r3, r3, #2
 80054f0:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80054f2:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	4413      	add	r3, r2
 80054fa:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	429a      	cmp	r2, r3
 8005506:	d92d      	bls.n	8005564 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	1acb      	subs	r3, r1, r3
 8005514:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005516:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	e000      	b.n	8005526 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8005524:	2300      	movs	r3, #0
 8005526:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005528:	4413      	add	r3, r2
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	429a      	cmp	r2, r3
 8005534:	d209      	bcs.n	800554a <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800553e:	3304      	adds	r3, #4
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	4619      	mov	r1, r3
 8005544:	f001 f986 	bl	8006854 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8005548:	e048      	b.n	80055dc <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005552:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	4413      	add	r3, r2
 800555c:	461a      	mov	r2, r3
 800555e:	f001 f991 	bl	8006884 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 8005562:	e03b      	b.n	80055dc <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3304      	adds	r3, #4
 800556c:	f107 0208 	add.w	r2, r7, #8
 8005570:	4611      	mov	r1, r2
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fe0f 	bl	8004196 <_ZSt3maxIjERKT_S2_S2_>
 8005578:	4603      	mov	r3, r0
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800557e:	3302      	adds	r3, #2
 8005580:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fe19 	bl	80041be <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 800558c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	085b      	lsrs	r3, r3, #1
 8005596:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	e000      	b.n	80055a6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80055a4:	2300      	movs	r3, #0
 80055a6:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4413      	add	r3, r2
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80055b6:	3304      	adds	r3, #4
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	4619      	mov	r1, r3
 80055bc:	f001 f94a 	bl	8006854 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6819      	ldr	r1, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f7fd fd80 	bl	80030d0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3308      	adds	r3, #8
 80055e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fe22 	bl	800422c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f103 0018 	add.w	r0, r3, #24
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	4413      	add	r3, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	f7fe fe15 	bl	800422c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8005602:	bf00      	nop
 8005604:	372c      	adds	r7, #44	; 0x2c
 8005606:	46bd      	mov	sp, r7
 8005608:	bd90      	pop	{r4, r7, pc}

0800560a <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005614:	2200      	movs	r2, #0
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 f94b 	bl	80068b4 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 800561e:	4603      	mov	r3, r0
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6839      	ldr	r1, [r7, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f001 f95d 	bl	80068f6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	609a      	str	r2, [r3, #8]
	}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f001 f94a 	bl	800691a <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800568e:	b590      	push	{r4, r7, lr}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fd ff51 	bl	8003542 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80056a0:	4604      	mov	r4, r0
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2010      	movs	r0, #16
 80056a8:	f7fb fbdf 	bl	8000e6a <_ZnwjPv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	4621      	mov	r1, r4
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fb fda8 	bl	8001206 <_ZN8ResponceC1EOS_>
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd90      	pop	{r4, r7, pc}

080056be <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 f863 	bl	8006794 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80056ce:	4603      	mov	r3, r0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f92d 	bl	8006930 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 80056d6:	4603      	mov	r3, r0
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	6809      	ldr	r1, [r1, #0]
 80056fa:	1a41      	subs	r1, r0, r1
 80056fc:	1089      	asrs	r1, r1, #2
 80056fe:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005700:	429a      	cmp	r2, r3
 8005702:	d904      	bls.n	800570e <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8005704:	2200      	movs	r2, #0
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 f92b 	bl	8006964 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8005716:	b590      	push	{r4, r7, lr}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800571e:	687c      	ldr	r4, [r7, #4]
 8005720:	2010      	movs	r0, #16
 8005722:	f7fb fbae 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	4620      	mov	r0, r4
 800572c:	f001 f9b4 	bl	8006a98 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 8005730:	4603      	mov	r3, r0
      }
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	bd90      	pop	{r4, r7, pc}

0800573a <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005744:	6838      	ldr	r0, [r7, #0]
 8005746:	f7fb fcc7 	bl	80010d8 <_ZN8ResponceD1Ev>
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800575a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800575e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 f9a8 	bl	8006ab6 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8005766:	4603      	mov	r3, r0
 8005768:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800576a:	f107 0208 	add.w	r2, r7, #8
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	4611      	mov	r1, r2
 8005774:	4618      	mov	r0, r3
 8005776:	f001 f859 	bl	800682c <_ZSt3minIjERKT_S2_S2_>
 800577a:	4603      	mov	r3, r0
 800577c:	681b      	ldr	r3, [r3, #0]
      }
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 f999 	bl	8006ace <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 800579c:	4603      	mov	r3, r0
    }
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80057b0:	2200      	movs	r2, #0
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 f99d 	bl	8006af4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80057ba:	4603      	mov	r3, r0
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f001 f9a7 	bl	8006b2c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80057de:	4603      	mov	r3, r0
      }
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 f9b5 	bl	8006b66 <_ZNSt13move_iteratorIPhEC1ES0_>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f001 f9b6 	bl	8006b8a <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800581e:	4603      	mov	r3, r0
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005834:	2301      	movs	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f001 f9b6 	bl	8006bae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8005842:	4603      	mov	r3, r0
    }
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005854:	1d3b      	adds	r3, r7, #4
 8005856:	4618      	mov	r0, r3
 8005858:	f001 f9b9 	bl	8006bce <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 800585c:	4603      	mov	r3, r0
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f9b6 	bl	8006be4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005878:	4603      	mov	r3, r0
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 f9b0 	bl	8006bfa <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 800589a:	4603      	mov	r3, r0
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ffda 	bl	8005868 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80058b4:	4602      	mov	r2, r0
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	1a9a      	subs	r2, r3, r2
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 f9ab 	bl	8006c1a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
    { return __it; }
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f001 f99c 	bl	8006c48 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8005910:	4603      	mov	r3, r0
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fe f8bb 	bl	8003abe <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8005948:	4603      	mov	r3, r0
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005952:	b580      	push	{r7, lr}
 8005954:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005956:	2010      	movs	r0, #16
 8005958:	f7fb fa93 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800595c:	4603      	mov	r3, r0
 800595e:	4618      	mov	r0, r3
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	109b      	asrs	r3, r3, #2
 8005978:	4a04      	ldr	r2, [pc, #16]	; (800598c <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 800597a:	fb02 f303 	mul.w	r3, r2, r3
    }
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	cccccccd 	.word	0xcccccccd

08005990 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	713a      	strb	r2, [r7, #4]
	__i += __n;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	18ca      	adds	r2, r1, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]
    }
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80059d2:	b5b0      	push	{r4, r5, r7, lr}
 80059d4:	b090      	sub	sp, #64	; 0x40
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80059e0:	68b8      	ldr	r0, [r7, #8]
 80059e2:	f001 f941 	bl	8006c68 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80059e6:	4604      	mov	r4, r0
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 f93d 	bl	8006c68 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80059ee:	4605      	mov	r5, r0
 80059f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe faf0 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80059fc:	f107 0320 	add.w	r3, r7, #32
 8005a00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f939 	bl	8006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8005a0c:	f107 0010 	add.w	r0, r7, #16
 8005a10:	f107 0320 	add.w	r3, r7, #32
 8005a14:	462a      	mov	r2, r5
 8005a16:	4621      	mov	r1, r4
 8005a18:	f001 f952 	bl	8006cc0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f107 0210 	add.w	r2, r7, #16
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 f99d 	bl	8006d64 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	3740      	adds	r7, #64	; 0x40
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	109b      	asrs	r3, r3, #2
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8005a52:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d906      	bls.n	8005a6a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	4619      	mov	r1, r3
 8005a64:	68b8      	ldr	r0, [r7, #8]
 8005a66:	f001 f98b 	bl	8006d80 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f103 0108 	add.w	r1, r3, #8
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f9c9 	bl	8006e0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	cccccccd 	.word	0xcccccccd

08005a88 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005a96:	f107 0310 	add.w	r3, r7, #16
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fa9d 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	f001 f9c1 	bl	8006e32 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	109b      	asrs	r3, r3, #2
 8005ad0:	4a0d      	ldr	r2, [pc, #52]	; (8005b08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8005ad8:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d906      	bls.n	8005af0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68b8      	ldr	r0, [r7, #8]
 8005aec:	f001 f9bc 	bl	8006e68 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f103 0118 	add.w	r1, r3, #24
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fa1b 	bl	8004f36 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	cccccccd 	.word	0xcccccccd

08005b0c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
      deque<_Tp, _Alloc>::
 8005b0c:	b5b0      	push	{r4, r5, r7, lr}
 8005b0e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8005b12:	af04      	add	r7, sp, #16
 8005b14:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8005b18:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8005b1c:	6020      	str	r0, [r4, #0]
 8005b1e:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8005b22:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8005b26:	6001      	str	r1, [r0, #0]
 8005b28:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005b2c:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005b30:	600a      	str	r2, [r1, #0]
 8005b32:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005b36:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005b3a:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8005b3c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b40:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f103 0208 	add.w	r2, r3, #8
 8005b4a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b4e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005b52:	4611      	mov	r1, r2
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	f7fe f929 	bl	8003dac <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8005b5a:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 8005b5e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b62:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	f7fd f956 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8005b6c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8005b70:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005b74:	085a      	lsrs	r2, r3, #1
 8005b76:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	f240 8158 	bls.w	8005e30 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8005b80:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b84:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8005b88:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b8c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b90:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	f7ff ff4d 	bl	8005a34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8005b9a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b9e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f103 0208 	add.w	r2, r3, #8
 8005ba8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fa14 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8005bb4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bb8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f103 0108 	add.w	r1, r3, #8
 8005bc2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bc6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005bca:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff f9b1 	bl	8004f36 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8005bd4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bd8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005be2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005be6:	4614      	mov	r4, r2
 8005be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 8005bee:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005bf2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f2c0 8098 	blt.w	8005d2c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 8005bfc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c00:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f103 0108 	add.w	r1, r3, #8
 8005c0a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005c0e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff f98d 	bl	8004f36 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8005c1c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c20:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f103 0208 	add.w	r2, r3, #8
 8005c2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe f9d3 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005c36:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005c3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe f9cb 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005c46:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005c4a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe f9c3 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						_M_get_Tp_allocator());
 8005c56:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c5a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe f883 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8005c66:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8005c68:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c6c:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8005c70:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005c78:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8005c7c:	9400      	str	r4, [sp, #0]
 8005c7e:	f001 f937 	bl	8006ef0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 8005c82:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c86:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005c90:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005c94:	f103 0408 	add.w	r4, r3, #8
 8005c98:	4613      	mov	r3, r2
 8005c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8005ca0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005ca4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe f996 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005cb0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cb4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005cb8:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7fe f98c 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005cc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005cc8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe f984 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005cd4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cd8:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8005cdc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005ce0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005ce4:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8005ce8:	f001 f93b 	bl	8006f62 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8005cec:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005cf0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cf4:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8005cf8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cfc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	f001 f883 	bl	8006e0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8005d06:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d0a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8005d0e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005d12:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005d16:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005d1a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005d1e:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	6809      	ldr	r1, [r1, #0]
 8005d26:	f7fe ff95 	bl	8004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8005d2a:	e1dd      	b.n	80060e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 8005d2c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d30:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d34:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005d38:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8005d40:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005d44:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005d48:	1ad2      	subs	r2, r2, r3
 8005d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 f93c 	bl	8006fce <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005d56:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d5a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f103 0208 	add.w	r2, r3, #8
 8005d64:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe f936 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005d70:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d74:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005d78:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7fe f92c 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005d84:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d88:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d8c:	681c      	ldr	r4, [r3, #0]
 8005d8e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005d92:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fe f91f 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 8005d9e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005da2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd ffdf 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8005dae:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005db0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005db4:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8005db8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005dbc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005dc0:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8005dc4:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8005dc8:	9202      	str	r2, [sp, #8]
 8005dca:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8005dce:	9201      	str	r2, [sp, #4]
 8005dd0:	9400      	str	r4, [sp, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	f001 f90d 	bl	8006ff4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 8005dda:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005dde:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005de8:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005dec:	f103 0408 	add.w	r4, r3, #8
 8005df0:	4613      	mov	r3, r2
 8005df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8005df8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005dfc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005e00:	681c      	ldr	r4, [r3, #0]
 8005e02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005e06:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe f8e5 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005e12:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e16:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8005e1a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005e1e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005e22:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	4621      	mov	r1, r4
 8005e2a:	f7fe ff13 	bl	8004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8005e2e:	e15b      	b.n	80060e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8005e30:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e34:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8005e38:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e3c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e40:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005e44:	6819      	ldr	r1, [r3, #0]
 8005e46:	f7ff fe37 	bl	8005ab8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 8005e4a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e4e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f103 0218 	add.w	r2, r3, #24
 8005e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe f8bc 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8005e64:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8005e68:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8005e72:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e76:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f103 0118 	add.w	r1, r3, #24
 8005e80:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e88:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 ffbd 	bl	8006e0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8005e92:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e96:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ea0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8005eac:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005eb0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	f340 8096 	ble.w	8005fe6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8005eba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ebe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f103 0118 	add.w	r1, r3, #24
 8005ec8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005ecc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ed0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 ff99 	bl	8006e0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8005eda:	f107 0218 	add.w	r2, r7, #24
 8005ede:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f879 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8005eea:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005eee:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005ef8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe f86c 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8005f04:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f08:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005f12:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe f85f 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 8005f1e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f22:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fd ff1f 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8005f2e:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8005f30:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f34:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8005f38:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005f3c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8005f40:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8005f44:	9400      	str	r4, [sp, #0]
 8005f46:	f000 ffd3 	bl	8006ef0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 8005f4a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f4e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005f58:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8005f5c:	f103 0418 	add.w	r4, r3, #24
 8005f60:	4613      	mov	r3, r2
 8005f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8005f68:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005f6c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005f70:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8005f74:	6819      	ldr	r1, [r3, #0]
 8005f76:	4610      	mov	r0, r2
 8005f78:	f7fe f830 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005f7c:	f107 0218 	add.w	r2, r7, #24
 8005f80:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe f828 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005f8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f90:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe f820 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005f9c:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8005fa0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005fa4:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8005fa8:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8005fac:	f001 f862 	bl	8007074 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 8005fb0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005fb4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005fb8:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fe f80c 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8005fc4:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8005fc8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8005fcc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005fd0:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005fd4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005fd8:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	6809      	ldr	r1, [r1, #0]
 8005fe0:	f7fe fe38 	bl	8004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8005fe4:	e080      	b.n	80060e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8005fe6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005fea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005fee:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005ff2:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 8005ffa:	f107 0314 	add.w	r3, r7, #20
 8005ffe:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8006002:	4618      	mov	r0, r3
 8006004:	f000 ffe3 	bl	8006fce <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8006008:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800600c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8006010:	681c      	ldr	r4, [r3, #0]
 8006012:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006016:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800601a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	4610      	mov	r0, r2
 8006022:	f7fd ffdb 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 8006026:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800602a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8006034:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd ffce 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 8006040:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006044:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 800604e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd ffc1 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 800605a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800605e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f7fd fe81 	bl	8003d6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 800606a:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 800606c:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8006070:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8006074:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8006078:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 800607c:	9302      	str	r3, [sp, #8]
 800607e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	460b      	mov	r3, r1
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	4621      	mov	r1, r4
 8006090:	f001 f826 	bl	80070e0 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8006094:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006098:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80060a2:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80060a6:	f103 0418 	add.w	r4, r3, #24
 80060aa:	4613      	mov	r3, r2
 80060ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 80060b2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80060b6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80060ba:	681c      	ldr	r4, [r3, #0]
 80060bc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80060c0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80060c4:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fd ff86 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80060d0:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 80060d4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80060d8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80060dc:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 80060e0:	4622      	mov	r2, r4
 80060e2:	6809      	ldr	r1, [r1, #0]
 80060e4:	f7fe fdb6 	bl	8004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80060e8:	bf00      	nop
 80060ea:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bdb0      	pop	{r4, r5, r7, pc}

080060f2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80060fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80060fe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 f82d 	bl	8007160 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 8006106:	4603      	mov	r3, r0
 8006108:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800610a:	f107 0208 	add.w	r2, r7, #8
 800610e:	f107 030c 	add.w	r3, r7, #12
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fb89 	bl	800682c <_ZSt3minIjERKT_S2_S2_>
 800611a:	4603      	mov	r3, r0
 800611c:	681b      	ldr	r3, [r3, #0]
      }
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b08b      	sub	sp, #44	; 0x2c
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	109b      	asrs	r3, r3, #2
 8006156:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006158:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	4413      	add	r3, r2
 8006160:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	429a      	cmp	r2, r3
 800616c:	d92d      	bls.n	80061ca <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	1acb      	subs	r3, r1, r3
 800617a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800617c:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	e000      	b.n	800618c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 800618a:	2300      	movs	r3, #0
 800618c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800618e:	4413      	add	r3, r2
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	429a      	cmp	r2, r3
 800619a:	d209      	bcs.n	80061b0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80061a4:	3304      	adds	r3, #4
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	4619      	mov	r1, r3
 80061aa:	f000 ffe5 	bl	8007178 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80061ae:	e048      	b.n	8006242 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80061b8:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80061be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c0:	4413      	add	r3, r2
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 fff0 	bl	80071a8 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80061c8:	e03b      	b.n	8006242 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3304      	adds	r3, #4
 80061d2:	f107 0208 	add.w	r2, r7, #8
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fd ffdc 	bl	8004196 <_ZSt3maxIjERKT_S2_S2_>
 80061de:	4603      	mov	r3, r0
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80061e4:	3302      	adds	r3, #2
 80061e6:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	69b9      	ldr	r1, [r7, #24]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fef1 	bl	8004fd4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80061f2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	e000      	b.n	800620c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 800620a:	2300      	movs	r3, #0
 800620c:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800621c:	3304      	adds	r3, #4
 800621e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006220:	4619      	mov	r1, r3
 8006222:	f000 ffa9 	bl	8007178 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6819      	ldr	r1, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	461a      	mov	r2, r3
 8006232:	f7fd fe99 	bl	8003f68 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3308      	adds	r3, #8
 8006246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe fe3d 	bl	8004ec8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f103 0018 	add.w	r0, r3, #24
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006260:	4413      	add	r3, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f7fe fe30 	bl	8004ec8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8006268:	bf00      	nop
 800626a:	372c      	adds	r7, #44	; 0x2c
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}

08006270 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800627a:	2200      	movs	r2, #0
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 ffaa 	bl	80071d8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8006284:	4603      	mov	r3, r0
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 ffbb 	bl	800721a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	109b      	asrs	r3, r3, #2
 80062c2:	4a2b      	ldr	r2, [pc, #172]	; (8006370 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	4413      	add	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	db08      	blt.n	80062e8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80062d6:	f7fe fe26 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80062da:	4603      	mov	r3, r0
 80062dc:	461a      	mov	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	da01      	bge.n	80062e8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 80062e8:	2300      	movs	r3, #0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6819      	ldr	r1, [r3, #0]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	18ca      	adds	r2, r1, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e02f      	b.n	8006364 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	dd07      	ble.n	800631a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 800630a:	f7fe fe0c 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	fb93 f3f2 	sdiv	r3, r3, r2
 8006318:	e007      	b.n	800632a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 800631e:	f7fe fe02 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8006322:	4603      	mov	r3, r0
 8006324:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8006328:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 800632a:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7fe fdc5 	bl	8004ec8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8006342:	f7fe fdf0 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	461a      	mov	r2, r3
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	18e2      	adds	r2, r4, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
	return *this;
 8006364:	687b      	ldr	r3, [r7, #4]
      }
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}
 800636e:	bf00      	nop
 8006370:	cccccccd 	.word	0xcccccccd

08006374 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	605a      	str	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80063c2:	2200      	movs	r2, #0
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 ff3a 	bl	8007240 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 ff4b 	bl	800727c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4619      	mov	r1, r3
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f016 fbd5 	bl	801cbc8 <_ZdlPvj>
      }
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006426:	b580      	push	{r7, lr}
 8006428:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800642a:	2014      	movs	r0, #20
 800642c:	f7fa fd29 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8006430:	4603      	mov	r3, r0
 8006432:	4618      	mov	r0, r3
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006436:	b5b0      	push	{r4, r5, r7, lr}
 8006438:	b08c      	sub	sp, #48	; 0x30
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ff26 	bl	8007292 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006446:	4602      	mov	r2, r0
 8006448:	f107 0308 	add.w	r3, r7, #8
 800644c:	4611      	mov	r1, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f000 ff4e 	bl	80072f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8006454:	6838      	ldr	r0, [r7, #0]
 8006456:	f000 ff1c 	bl	8007292 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800645a:	4602      	mov	r2, r0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	461c      	mov	r4, r3
 8006460:	4615      	mov	r5, r2
 8006462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800646e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	4618      	mov	r0, r3
 8006478:	f000 ff0b 	bl	8007292 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800647c:	4602      	mov	r2, r0
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	461c      	mov	r4, r3
 8006482:	4615      	mov	r5, r2
 8006484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006490:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8006494:	bf00      	nop
 8006496:	3730      	adds	r7, #48	; 0x30
 8006498:	46bd      	mov	sp, r7
 800649a:	bdb0      	pop	{r4, r5, r7, pc}

0800649c <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b08b      	sub	sp, #44	; 0x2c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fc fe54 	bl	800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80064b2:	f107 0318 	add.w	r3, r7, #24
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fc fe34 	bl	8003126 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fc fe3f 	bl	8003144 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f107 0218 	add.w	r2, r7, #24
 80064cc:	f107 0108 	add.w	r1, r7, #8
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7fc fe5e 	bl	8003192 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80064e2:	3304      	adds	r3, #4
 80064e4:	461a      	mov	r2, r3
 80064e6:	f7fc fdd9 	bl	800309c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	f103 0418 	add.w	r4, r3, #24
 80064f2:	4613      	mov	r3, r2
 80064f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80064fa:	bf00      	nop
 80064fc:	372c      	adds	r7, #44	; 0x2c
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd90      	pop	{r4, r7, pc}

08006502 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800650e:	68b8      	ldr	r0, [r7, #8]
 8006510:	f000 ff0d 	bl	800732e <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 800651c:	b5b0      	push	{r4, r5, r7, lr}
 800651e:	b08c      	sub	sp, #48	; 0x30
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 ff0c 	bl	8007344 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800652c:	4602      	mov	r2, r0
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f000 ff34 	bl	80073a2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 800653a:	6838      	ldr	r0, [r7, #0]
 800653c:	f000 ff02 	bl	8007344 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006540:	4602      	mov	r2, r0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	461c      	mov	r4, r3
 8006546:	4615      	mov	r5, r2
 8006548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800654a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800654c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800654e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006550:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006554:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006558:	f107 0308 	add.w	r3, r7, #8
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fef1 	bl	8007344 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	461c      	mov	r4, r3
 8006568:	4615      	mov	r5, r2
 800656a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800656c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006576:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 800657a:	bf00      	nop
 800657c:	3730      	adds	r7, #48	; 0x30
 800657e:	46bd      	mov	sp, r7
 8006580:	bdb0      	pop	{r4, r5, r7, pc}

08006582 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8006582:	b590      	push	{r4, r7, lr}
 8006584:	b08b      	sub	sp, #44	; 0x2c
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 800658c:	f107 0308 	add.w	r3, r7, #8
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fc fe84 	bl	80032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8006598:	f107 0318 	add.w	r3, r7, #24
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fc fe64 	bl	800326c <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fc fe6f 	bl	800328a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f107 0218 	add.w	r2, r7, #24
 80065b2:	f107 0108 	add.w	r1, r7, #8
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fc fe8e 	bl	80032d8 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80065c8:	3304      	adds	r3, #4
 80065ca:	461a      	mov	r2, r3
 80065cc:	f7fd ff66 	bl	800449c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	f103 0418 	add.w	r4, r3, #24
 80065d8:	4613      	mov	r3, r2
 80065da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80065e0:	bf00      	nop
 80065e2:	372c      	adds	r7, #44	; 0x2c
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}

080065e8 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80065f4:	68b8      	ldr	r0, [r7, #8]
 80065f6:	f000 fef3 	bl	80073e0 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8006602:	b5b0      	push	{r4, r5, r7, lr}
 8006604:	b08c      	sub	sp, #48	; 0x30
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fef2 	bl	80073f6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8006612:	4602      	mov	r2, r0
 8006614:	f107 0308 	add.w	r3, r7, #8
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f000 ff1a 	bl	8007454 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8006620:	6838      	ldr	r0, [r7, #0]
 8006622:	f000 fee8 	bl	80073f6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8006626:	4602      	mov	r2, r0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	461c      	mov	r4, r3
 800662c:	4615      	mov	r5, r2
 800662e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006636:	e895 0003 	ldmia.w	r5, {r0, r1}
 800663a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800663e:	f107 0308 	add.w	r3, r7, #8
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fed7 	bl	80073f6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8006648:	4602      	mov	r2, r0
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	461c      	mov	r4, r3
 800664e:	4615      	mov	r5, r2
 8006650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006658:	e895 0003 	ldmia.w	r5, {r0, r1}
 800665c:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8006660:	bf00      	nop
 8006662:	3730      	adds	r7, #48	; 0x30
 8006664:	46bd      	mov	sp, r7
 8006666:	bdb0      	pop	{r4, r5, r7, pc}

08006668 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8006674:	68b8      	ldr	r0, [r7, #8]
 8006676:	f000 ff0c 	bl	8007492 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 ff0a 	bl	80074a8 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 8006694:	4602      	mov	r2, r0
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4293      	cmp	r3, r2
 800669a:	bf8c      	ite	hi
 800669c:	2301      	movhi	r3, #1
 800669e:	2300      	movls	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80066a6:	f016 faa2 	bl	801cbee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f016 fa8c 	bl	801cbcc <_Znwj>
 80066b4:	4603      	mov	r3, r0
      }
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4619      	mov	r1, r3
 80066d6:	68b8      	ldr	r0, [r7, #8]
 80066d8:	f016 fa76 	bl	801cbc8 <_ZdlPvj>
      }
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 feda 	bl	80074c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	609a      	str	r2, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	60da      	str	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006762:	2200      	movs	r2, #0
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fec2 	bl	80074f0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 800676c:	4603      	mov	r3, r0
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fed0 	bl	800752c <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fec9 	bl	800754c <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4619      	mov	r1, r3
 80067ec:	68b8      	ldr	r0, [r7, #8]
 80067ee:	f016 f9eb 	bl	801cbc8 <_ZdlPvj>
      }
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 feab 	bl	8007562 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 feb8 	bl	8007592 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 8006822:	4603      	mov	r3, r0
      }
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d201      	bcs.n	8006846 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	e000      	b.n	8006848 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006846:	687b      	ldr	r3, [r7, #4]
    }
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fea2 	bl	80075aa <_ZSt12__miter_baseIPP7RequestET_S3_>
 8006866:	4604      	mov	r4, r0
 8006868:	68b8      	ldr	r0, [r7, #8]
 800686a:	f000 fe9e 	bl	80075aa <_ZSt12__miter_baseIPP7RequestET_S3_>
 800686e:	4603      	mov	r3, r0
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4619      	mov	r1, r3
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fea3 	bl	80075c0 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 800687a:	4603      	mov	r3, r0
    }
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	bd90      	pop	{r4, r7, pc}

08006884 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fe8a 	bl	80075aa <_ZSt12__miter_baseIPP7RequestET_S3_>
 8006896:	4604      	mov	r4, r0
 8006898:	68b8      	ldr	r0, [r7, #8]
 800689a:	f000 fe86 	bl	80075aa <_ZSt12__miter_baseIPP7RequestET_S3_>
 800689e:	4603      	mov	r3, r0
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4619      	mov	r1, r3
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 feae 	bl	8007606 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80068aa:	4603      	mov	r3, r0
    }
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd90      	pop	{r4, r7, pc}

080068b4 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fec3 	bl	800764c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4293      	cmp	r3, r2
 80068cc:	bf8c      	ite	hi
 80068ce:	2301      	movhi	r3, #1
 80068d0:	2300      	movls	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80068d8:	f016 f989 	bl	801cbee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f016 f970 	bl	801cbcc <_Znwj>
 80068ec:	4603      	mov	r3, r0
      }
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fc fe84 	bl	8003610 <_ZNSaIhEC1ERKS_>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4618      	mov	r0, r3
 800690c:	f7fc fd0f 	bl	800332e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006938:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800693c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fe92 	bl	8007668 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 8006944:	4603      	mov	r3, r0
 8006946:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006948:	f107 0208 	add.w	r2, r7, #8
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff ff6a 	bl	800682c <_ZSt3minIjERKT_S2_S2_>
 8006958:	4603      	mov	r3, r0
 800695a:	681b      	ldr	r3, [r3, #0]
      }
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b08b      	sub	sp, #44	; 0x2c
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	109b      	asrs	r3, r3, #2
 800697e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006980:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6a3a      	ldr	r2, [r7, #32]
 8006986:	4413      	add	r3, r2
 8006988:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	429a      	cmp	r2, r3
 8006994:	d92d      	bls.n	80069f2 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	1acb      	subs	r3, r1, r3
 80069a2:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80069a4:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	e000      	b.n	80069b4 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 80069b2:	2300      	movs	r3, #0
 80069b4:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80069b6:	4413      	add	r3, r2
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d209      	bcs.n	80069d8 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80069cc:	3304      	adds	r3, #4
 80069ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d0:	4619      	mov	r1, r3
 80069d2:	f000 fe55 	bl	8007680 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 80069d6:	e048      	b.n	8006a6a <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80069e0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	4413      	add	r3, r2
 80069ea:	461a      	mov	r2, r3
 80069ec:	f000 fe60 	bl	80076b0 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 80069f0:	e03b      	b.n	8006a6a <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3304      	adds	r3, #4
 80069fa:	f107 0208 	add.w	r2, r7, #8
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fd fbc8 	bl	8004196 <_ZSt3maxIjERKT_S2_S2_>
 8006a06:	4603      	mov	r3, r0
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	69b9      	ldr	r1, [r7, #24]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fc86 	bl	8005326 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8006a1a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	e000      	b.n	8006a34 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8006a32:	2300      	movs	r3, #0
 8006a34:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4413      	add	r3, r2
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006a44:	3304      	adds	r3, #4
 8006a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f000 fe19 	bl	8007680 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6819      	ldr	r1, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f7fd fd39 	bl	80044d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fc8f 	bl	8005394 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f103 0018 	add.w	r0, r3, #24
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a88:	4413      	add	r3, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	f7fe fc82 	bl	8005394 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8006a90:	bf00      	nop
 8006a92:	372c      	adds	r7, #44	; 0x2c
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd90      	pop	{r4, r7, pc}

08006a98 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fe1a 	bl	80076e0 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8006aac:	4603      	mov	r3, r0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fe2c 	bl	800771c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8006ac4:	4603      	mov	r3, r0
      }
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
 8006adc:	f107 030f 	add.w	r3, r7, #15
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fe25 	bl	8007734 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8006aea:	4603      	mov	r3, r0
	}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fe32 	bl	800776a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	bf8c      	ite	hi
 8006b0e:	2301      	movhi	r3, #1
 8006b10:	2300      	movls	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006b18:	f016 f869 	bl	801cbee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006b1c:	68b8      	ldr	r0, [r7, #8]
 8006b1e:	f016 f855 	bl	801cbcc <_Znwj>
 8006b22:	4603      	mov	r3, r0
      }
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7fe fed2 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 8006b40:	4604      	mov	r4, r0
 8006b42:	68b8      	ldr	r0, [r7, #8]
 8006b44:	f7fe fece 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 8006b48:	4605      	mov	r5, r0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fe feca 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 8006b50:	4602      	mov	r2, r0
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	4629      	mov	r1, r5
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fe13 	bl	8007782 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006b5c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bdb0      	pop	{r4, r5, r7, pc}

08006b66 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006b70:	463b      	mov	r3, r7
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fe20 	bl	80077b8 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fe15 	bl	80077ce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8006ba4:	4603      	mov	r3, r0
    }
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fe15 	bl	80077ee <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fe07 	bl	800781e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006c10:	4603      	mov	r3, r0
    }
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	f107 020c 	add.w	r2, r7, #12
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fd ff23 	bl	8004a84 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fde0 	bl	800781e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006c5e:	4603      	mov	r3, r0
    }
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
    { return __it; }
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fd f9a6 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	da01      	bge.n	8006cb2 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	e000      	b.n	8006cb4 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8006cb2:	687b      	ldr	r3, [r7, #4]
    }
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	109b      	asrs	r3, r3, #2
 8006cd6:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
 8006cdc:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	dd34      	ble.n	8006d4e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	109b      	asrs	r3, r3, #2
 8006cf0:	4a1b      	ldr	r2, [pc, #108]	; (8006d60 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	f107 0218 	add.w	r2, r7, #24
 8006cfc:	f107 0314 	add.w	r3, r7, #20
 8006d00:	4611      	mov	r1, r2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff ffc8 	bl	8006c98 <_ZSt3minIiERKT_S2_S2_>
 8006d08:	4603      	mov	r3, r0
	  const difference_type __clen
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	1899      	adds	r1, r3, r2
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	68b8      	ldr	r0, [r7, #8]
 8006d26:	f000 fd94 	bl	8007852 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	461a      	mov	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8006d3c:	69f9      	ldr	r1, [r7, #28]
 8006d3e:	6838      	ldr	r0, [r7, #0]
 8006d40:	f7ff fab4 	bl	80062ac <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8006d4c:	e7c7      	b.n	8006cde <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7fd f943 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	cccccccd 	.word	0xcccccccd

08006d64 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
    { return __res; }
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7fd f932 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fe f861 	bl	8004e52 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8006d90:	4604      	mov	r4, r0
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fc f840 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	1ae3      	subs	r3, r4, r3
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	bf8c      	ite	hi
 8006da2:	2301      	movhi	r3, #1
 8006da4:	2300      	movls	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8006dac:	4816      	ldr	r0, [pc, #88]	; (8006e08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8006dae:	f015 ff21 	bl	801cbf4 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006db2:	f7ff fb38 	bl	8006426 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006db6:	4602      	mov	r2, r0
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4413      	add	r3, r2
 8006dbc:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006dbe:	f7ff fb32 	bl	8006426 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006dc2:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006dc4:	fbb4 f3f3 	udiv	r3, r4, r3
 8006dc8:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe f851 	bl	8004e74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d80f      	bhi.n	8006dfe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695a      	ldr	r2, [r3, #20]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	425b      	negs	r3, r3
 8006dea:	18d4      	adds	r4, r2, r3
 8006dec:	4608      	mov	r0, r1
 8006dee:	f7fe f859 	bl	8004ea4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8006df2:	4603      	mov	r3, r0
 8006df4:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e7eb      	b.n	8006dd6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd90      	pop	{r4, r7, pc}
 8006e06:	bf00      	nop
 8006e08:	0801e3c4 	.word	0x0801e3c4

08006e0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7fd f8de 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fd25 	bl	8007872 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8006e28:	bf00      	nop
      }
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b08a      	sub	sp, #40	; 0x28
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8006e46:	f107 0314 	add.w	r3, r7, #20
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fd f8c5 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	f000 fd19 	bl	8007892 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	3728      	adds	r7, #40	; 0x28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fd ffed 	bl	8004e52 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8006e78:	4604      	mov	r4, r0
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fb ffcc 	bl	8002e18 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8006e80:	4603      	mov	r3, r0
 8006e82:	1ae3      	subs	r3, r4, r3
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	bf8c      	ite	hi
 8006e8a:	2301      	movhi	r3, #1
 8006e8c:	2300      	movls	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8006e94:	4815      	ldr	r0, [pc, #84]	; (8006eec <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8006e96:	f015 fead 	bl	801cbf4 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006e9a:	f7ff fac4 	bl	8006426 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006ea6:	f7ff fabe 	bl	8006426 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8006eaa:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006eac:	fbb4 f3f3 	udiv	r3, r4, r3
 8006eb0:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fd04 	bl	80078c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006eba:	2301      	movs	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d80e      	bhi.n	8006ee4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	18d4      	adds	r4, r2, r3
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	f7fd ffe6 	bl	8004ea4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e7ec      	b.n	8006ebe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd90      	pop	{r4, r7, pc}
 8006eec:	0801e3e4 	.word	0x0801e3e4

08006ef0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b09b      	sub	sp, #108	; 0x6c
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 8006efe:	f107 0320 	add.w	r3, r7, #32
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fd f869 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006f0a:	f107 0310 	add.w	r3, r7, #16
 8006f0e:	f107 0220 	add.w	r2, r7, #32
 8006f12:	4611      	mov	r1, r2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fcef 	bl	80078f8 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8006f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fd f85b 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fce1 	bl	80078f8 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8006f36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd f84d 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006f48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f4c:	f107 0110 	add.w	r1, r7, #16
 8006f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	4623      	mov	r3, r4
 8006f56:	f000 fcf8 	bl	800794a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	3764      	adds	r7, #100	; 0x64
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd90      	pop	{r4, r7, pc}

08006f62 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move(_II __first, _II __last, _OI __result)
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b098      	sub	sp, #96	; 0x60
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8006f70:	f107 0320 	add.w	r3, r7, #32
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fd f830 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006f7c:	f107 0310 	add.w	r3, r7, #16
 8006f80:	f107 0220 	add.w	r2, r7, #32
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fd05 	bl	8007996 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8006f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fd f822 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fcf7 	bl	8007996 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8006fa8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fd f814 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006fba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fbe:	f107 0110 	add.w	r1, r7, #16
 8006fc2:	f000 fcf5 	bl	80079b0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	3760      	adds	r7, #96	; 0x60
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8006fce:	b590      	push	{r4, r7, lr}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fd fe59 	bl	8004c94 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	68f9      	ldr	r1, [r7, #12]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fe fcd2 	bl	8005990 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd90      	pop	{r4, r7, pc}

08006ff4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8006ff4:	b590      	push	{r4, r7, lr}
 8006ff6:	b0a3      	sub	sp, #140	; 0x8c
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8007002:	f107 0320 	add.w	r3, r7, #32
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fc ffe7 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800700e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4618      	mov	r0, r3
 8007016:	f7fc ffe1 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800701a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800701e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007022:	4618      	mov	r0, r3
 8007024:	f7fc ffda 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007028:	f107 0010 	add.w	r0, r7, #16
 800702c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007030:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007034:	f107 0120 	add.w	r1, r7, #32
 8007038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4623      	mov	r3, r4
 8007040:	f7ff ff56 	bl	8006ef0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8007044:	f107 0210 	add.w	r2, r7, #16
 8007048:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f7fc ffc4 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800705a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	f7fe fd0e 	bl	8005a88 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
    }
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	3784      	adds	r7, #132	; 0x84
 8007070:	46bd      	mov	sp, r7
 8007072:	bd90      	pop	{r4, r7, pc}

08007074 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8007074:	b580      	push	{r7, lr}
 8007076:	b098      	sub	sp, #96	; 0x60
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
					       __result);
 8007082:	f107 0320 	add.w	r3, r7, #32
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	4618      	mov	r0, r3
 800708a:	f7fc ffa7 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800708e:	f107 0310 	add.w	r3, r7, #16
 8007092:	f107 0220 	add.w	r2, r7, #32
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fc7c 	bl	8007996 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 800709e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fc ff99 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80070aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fc6e 	bl	8007996 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80070ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fc ff8b 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80070d0:	f107 0110 	add.w	r1, r7, #16
 80070d4:	f000 fcb2 	bl	8007a3c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	3760      	adds	r7, #96	; 0x60
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b0a3      	sub	sp, #140	; 0x8c
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 80070ee:	f107 0320 	add.w	r3, r7, #32
 80070f2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fc ff70 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80070fc:	f107 0010 	add.w	r0, r7, #16
 8007100:	f107 0220 	add.w	r2, r7, #32
 8007104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	4613      	mov	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	f7fe fcba 	bl	8005a88 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8007114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fc ff5e 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007120:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007124:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007128:	4618      	mov	r0, r3
 800712a:	f7fc ff57 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800712e:	f107 0210 	add.w	r2, r7, #16
 8007132:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007136:	4611      	mov	r1, r2
 8007138:	4618      	mov	r0, r3
 800713a:	f7fc ff4f 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007144:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007148:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800714c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4623      	mov	r3, r4
 8007154:	f7ff fecc 	bl	8006ef0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	3784      	adds	r7, #132	; 0x84
 800715c:	46bd      	mov	sp, r7
 800715e:	bd90      	pop	{r4, r7, pc}

08007160 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fcad 	bl	8007ac8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 800716e:	4603      	mov	r3, r0
      }
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fcab 	bl	8007ae0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 800718a:	4604      	mov	r4, r0
 800718c:	68b8      	ldr	r0, [r7, #8]
 800718e:	f000 fca7 	bl	8007ae0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007192:	4603      	mov	r3, r0
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4619      	mov	r1, r3
 8007198:	4620      	mov	r0, r4
 800719a:	f000 fcac 	bl	8007af6 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 800719e:	4603      	mov	r3, r0
    }
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd90      	pop	{r4, r7, pc}

080071a8 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80071a8:	b590      	push	{r4, r7, lr}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 fc93 	bl	8007ae0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80071ba:	4604      	mov	r4, r0
 80071bc:	68b8      	ldr	r0, [r7, #8]
 80071be:	f000 fc8f 	bl	8007ae0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80071c2:	4603      	mov	r3, r0
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fcb7 	bl	8007b3c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80071ce:	4603      	mov	r3, r0
    }
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}

080071d8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fccd 	bl	8007b84 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4293      	cmp	r3, r2
 80071f0:	bf8c      	ite	hi
 80071f2:	2301      	movhi	r3, #1
 80071f4:	2300      	movls	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80071fc:	f015 fcf7 	bl	801cbee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f015 fcde 	bl	801cbcc <_Znwj>
 8007210:	4603      	mov	r3, r0
      }
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4619      	mov	r1, r3
 8007232:	68b8      	ldr	r0, [r7, #8]
 8007234:	f015 fcc8 	bl	801cbc8 <_ZdlPvj>
      }
 8007238:	bf00      	nop
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fca7 	bl	8007ba0 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8007252:	4602      	mov	r2, r0
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4293      	cmp	r3, r2
 8007258:	bf8c      	ite	hi
 800725a:	2301      	movhi	r3, #1
 800725c:	2300      	movls	r3, #0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007264:	f015 fcc3 	bl	801cbee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f015 fcad 	bl	801cbcc <_Znwj>
 8007272:	4603      	mov	r3, r0
      }
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f103 0208 	add.w	r2, r3, #8
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7fb ff43 	bl	800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f103 0218 	add.w	r2, r3, #24
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	3318      	adds	r3, #24
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f7fb ff3a 	bl	800315a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80072f0:	b5b0      	push	{r4, r5, r7, lr}
 80072f2:	b08c      	sub	sp, #48	; 0x30
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff ffd3 	bl	80072a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f7fc ff21 	bl	800414e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	461d      	mov	r5, r3
 8007310:	f107 0408 	add.w	r4, r7, #8
 8007314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800731a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800731c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007320:	e885 0003 	stmia.w	r5, {r0, r1}
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4618      	mov	r0, r3
 8007328:	3730      	adds	r7, #48	; 0x30
 800732a:	46bd      	mov	sp, r7
 800732c:	bdb0      	pop	{r4, r5, r7, pc}

0800732e <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	605a      	str	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f103 0208 	add.w	r2, r3, #8
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7fb ff8d 	bl	80032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f103 0218 	add.w	r2, r3, #24
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	3318      	adds	r3, #24
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f7fb ff84 	bl	80032a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80073a2:	b5b0      	push	{r4, r5, r7, lr}
 80073a4:	b08c      	sub	sp, #48	; 0x30
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff ffd3 	bl	800735a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fd ff90 	bl	80052de <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	461d      	mov	r5, r3
 80073c2:	f107 0408 	add.w	r4, r7, #8
 80073c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4618      	mov	r0, r3
 80073da:	3730      	adds	r7, #48	; 0x30
 80073dc:	46bd      	mov	sp, r7
 80073de:	bdb0      	pop	{r4, r5, r7, pc}

080073e0 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	605a      	str	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f103 0208 	add.w	r2, r3, #8
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f7fc fdd2 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f103 0218 	add.w	r2, r3, #24
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	3318      	adds	r3, #24
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7fc fdc9 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8007454:	b5b0      	push	{r4, r5, r7, lr}
 8007456:	b08c      	sub	sp, #48	; 0x30
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ffd3 	bl	800740c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f7fd fd8e 	bl	8004f8c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	461d      	mov	r5, r3
 8007474:	f107 0408 	add.w	r4, r7, #8
 8007478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800747a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800747c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800747e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007484:	e885 0003 	stmia.w	r5, {r0, r1}
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4618      	mov	r0, r3
 800748c:	3730      	adds	r7, #48	; 0x30
 800748e:	46bd      	mov	sp, r7
 8007490:	bdb0      	pop	{r4, r5, r7, pc}

08007492 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80074b0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d00a      	beq.n	80074e8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fb70 	bl	8007bb8 <_ZSt11__addressofI7RequestEPT_RS1_>
 80074d8:	4603      	mov	r3, r0
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fb77 	bl	8007bce <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3314      	adds	r3, #20
 80074e4:	607b      	str	r3, [r7, #4]
 80074e6:	e7f0      	b.n	80074ca <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fb71 	bl	8007be4 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 8007502:	4602      	mov	r2, r0
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4293      	cmp	r3, r2
 8007508:	bf8c      	ite	hi
 800750a:	2301      	movhi	r3, #1
 800750c:	2300      	movls	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007514:	f015 fb6b 	bl	801cbee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4618      	mov	r0, r3
 800751e:	f015 fb55 	bl	801cbcc <_Znwj>
 8007522:	4603      	mov	r3, r0
      }
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	68b8      	ldr	r0, [r7, #8]
 8007540:	f015 fb42 	bl	801cbc8 <_ZdlPvj>
      }
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d00a      	beq.n	800758a <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fb41 	bl	8007bfc <_ZSt11__addressofI8ResponceEPT_RS1_>
 800757a:	4603      	mov	r3, r0
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fb48 	bl	8007c12 <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3310      	adds	r3, #16
 8007586:	607b      	str	r3, [r7, #4]
 8007588:	e7f0      	b.n	800756c <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f856 	bl	800764c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 80075a0:	4603      	mov	r3, r0
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80075c0:	b5b0      	push	{r4, r5, r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fb2b 	bl	8007c28 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80075d2:	4604      	mov	r4, r0
 80075d4:	68b8      	ldr	r0, [r7, #8]
 80075d6:	f000 fb27 	bl	8007c28 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80075da:	4605      	mov	r5, r0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fb22 	bl	8007c28 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	4629      	mov	r1, r5
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 fb27 	bl	8007c3e <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80075f0:	4602      	mov	r2, r0
 80075f2:	1d3b      	adds	r3, r7, #4
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fb31 	bl	8007c5e <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 80075fc:	4603      	mov	r3, r0
    }
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bdb0      	pop	{r4, r5, r7, pc}

08007606 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007606:	b5b0      	push	{r4, r5, r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fb08 	bl	8007c28 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007618:	4604      	mov	r4, r0
 800761a:	68b8      	ldr	r0, [r7, #8]
 800761c:	f000 fb04 	bl	8007c28 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007620:	4605      	mov	r5, r0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 faff 	bl	8007c28 <_ZSt12__niter_baseIPP7RequestET_S3_>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	4629      	mov	r1, r5
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fb20 	bl	8007c76 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007636:	4602      	mov	r2, r0
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fb0e 	bl	8007c5e <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8007642:	4603      	mov	r3, r0
    }
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bdb0      	pop	{r4, r5, r7, pc}

0800764c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007654:	4b03      	ldr	r3, [pc, #12]	; (8007664 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	06666666 	.word	0x06666666

08007668 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fb10 	bl	8007c96 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 8007676:	4603      	mov	r3, r0
      }
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007680:	b590      	push	{r4, r7, lr}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb0e 	bl	8007cae <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8007692:	4604      	mov	r4, r0
 8007694:	68b8      	ldr	r0, [r7, #8]
 8007696:	f000 fb0a 	bl	8007cae <_ZSt12__miter_baseIPP8ResponceET_S3_>
 800769a:	4603      	mov	r3, r0
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4619      	mov	r1, r3
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 fb0f 	bl	8007cc4 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80076a6:	4603      	mov	r3, r0
    }
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd90      	pop	{r4, r7, pc}

080076b0 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 faf6 	bl	8007cae <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80076c2:	4604      	mov	r4, r0
 80076c4:	68b8      	ldr	r0, [r7, #8]
 80076c6:	f000 faf2 	bl	8007cae <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80076ca:	4603      	mov	r3, r0
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4619      	mov	r1, r3
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 fb1a 	bl	8007d0a <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80076d6:	4603      	mov	r3, r0
    }
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd90      	pop	{r4, r7, pc}

080076e0 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fb2f 	bl	8007d50 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 80076f2:	4602      	mov	r2, r0
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4293      	cmp	r3, r2
 80076f8:	bf8c      	ite	hi
 80076fa:	2301      	movhi	r3, #1
 80076fc:	2300      	movls	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007704:	f015 fa73 	bl	801cbee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f015 fa5d 	bl	801cbcc <_Znwj>
 8007712:	4603      	mov	r3, r0
      }
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f820 	bl	800776a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 800772a:	4603      	mov	r3, r0
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8007734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8007740:	68fc      	ldr	r4, [r7, #12]
 8007742:	68b8      	ldr	r0, [r7, #8]
 8007744:	f7f9 fb86 	bl	8000e54 <_ZSt17__size_to_integerj>
 8007748:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 800774a:	f107 030c 	add.w	r3, r7, #12
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fb0a 	bl	8007d68 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8007754:	4633      	mov	r3, r6
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4629      	mov	r1, r5
 800775a:	4620      	mov	r0, r4
 800775c:	f000 fb0f 	bl	8007d7e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8007760:	4603      	mov	r3, r0
    }
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800776a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007772:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd05      	ble.n	80077aa <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f015 fab3 	bl	801cd10 <memmove>
      return __result + __count;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	4413      	add	r3, r2
    }
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fae8 	bl	8007db4 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80077e4:	4603      	mov	r3, r0
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80077ee:	b590      	push	{r4, r7, lr}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7fd f952 	bl	8004aa4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8007800:	4604      	mov	r4, r0
 8007802:	68b8      	ldr	r0, [r7, #8]
 8007804:	f7fd f94e 	bl	8004aa4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8007808:	4603      	mov	r3, r0
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	4619      	mov	r1, r3
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fae8 	bl	8007de4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8007814:	4603      	mov	r3, r0
    }
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bd90      	pop	{r4, r7, pc}

0800781e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	60f8      	str	r0, [r7, #12]
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	461a      	mov	r2, r3
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f015 fa66 	bl	801cd10 <memmove>
	  return __result + _Num;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4413      	add	r3, r2
	}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fae1 	bl	8007e2a <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8007868:	4603      	mov	r3, r0
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	425b      	negs	r3, r3
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fe fd12 	bl	80062ac <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 8007888:	4603      	mov	r3, r0
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007892:	b580      	push	{r7, lr}
 8007894:	b088      	sub	sp, #32
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80078a0:	f107 0310 	add.w	r3, r7, #16
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fc fb98 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f107 0310 	add.w	r3, r7, #16
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	f7fd f9cd 	bl	8004c54 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	6809      	ldr	r1, [r1, #0]
 80078dc:	1a41      	subs	r1, r0, r1
 80078de:	1089      	asrs	r1, r1, #2
 80078e0:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d904      	bls.n	80078f0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80078e6:	2200      	movs	r2, #0
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fe fc26 	bl	800613c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
    make_move_iterator(_Iterator __i)
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8007902:	6838      	ldr	r0, [r7, #0]
 8007904:	f000 faa1 	bl	8007e4a <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8007908:	4602      	mov	r2, r0
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	4611      	mov	r1, r2
 8007910:	4618      	mov	r0, r3
 8007912:	f7fc fb63 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa9f 	bl	8007e60 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	4611      	mov	r1, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f7fc fb4e 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800794a:	b580      	push	{r7, lr}
 800794c:	b090      	sub	sp, #64	; 0x40
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
 8007956:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007958:	f107 0310 	add.w	r3, r7, #16
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff ffe3 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007964:	f107 0320 	add.w	r3, r7, #32
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff ffdd 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fc fb30 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007982:	f107 0220 	add.w	r2, r7, #32
 8007986:	f107 0110 	add.w	r1, r7, #16
 800798a:	f000 fa7c 	bl	8007e86 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	3740      	adds	r7, #64	; 0x40
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
    { return __it; }
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fc fb1a 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b0a0      	sub	sp, #128	; 0x80
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80079be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fc fb09 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80079ca:	f107 0320 	add.w	r3, r7, #32
 80079ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff f952 	bl	8006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80079da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fc fafb 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80079e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff f944 	bl	8006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80079f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fc faed 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007a02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007a06:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff f936 	bl	8006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007a12:	f107 0010 	add.w	r0, r7, #16
 8007a16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007a1a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a1e:	f107 0120 	add.w	r1, r7, #32
 8007a22:	f000 fa59 	bl	8007ed8 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f107 0210 	add.w	r2, r7, #16
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff f998 	bl	8006d64 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	3780      	adds	r7, #128	; 0x80
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b0a0      	sub	sp, #128	; 0x80
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8007a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fc fac3 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007a56:	f107 0320 	add.w	r3, r7, #32
 8007a5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007a5e:	4611      	mov	r1, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff f90c 	bl	8006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007a66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fc fab5 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007a72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff f8fe 	bl	8006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007a82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fc faa7 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007a8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007a92:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007a96:	4611      	mov	r1, r2
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff f8f0 	bl	8006c7e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8007a9e:	f107 0010 	add.w	r0, r7, #16
 8007aa2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007aa6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007aaa:	f107 0120 	add.w	r1, r7, #32
 8007aae:	f000 fa39 	bl	8007f24 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f107 0210 	add.w	r2, r7, #16
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff f952 	bl	8006d64 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	3780      	adds	r7, #128	; 0x80
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f857 	bl	8007b84 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007af6:	b5b0      	push	{r4, r5, r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fa34 	bl	8007f70 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	68b8      	ldr	r0, [r7, #8]
 8007b0c:	f000 fa30 	bl	8007f70 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007b10:	4605      	mov	r5, r0
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fa2b 	bl	8007f70 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fa30 	bl	8007f86 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8007b26:	4602      	mov	r2, r0
 8007b28:	1d3b      	adds	r3, r7, #4
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fa3a 	bl	8007fa6 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8007b32:	4603      	mov	r3, r0
    }
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bdb0      	pop	{r4, r5, r7, pc}

08007b3c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007b3c:	b5b0      	push	{r4, r5, r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fa11 	bl	8007f70 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	68b8      	ldr	r0, [r7, #8]
 8007b52:	f000 fa0d 	bl	8007f70 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007b56:	4605      	mov	r5, r0
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 fa08 	bl	8007f70 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	4629      	mov	r1, r5
 8007b66:	4620      	mov	r0, r4
 8007b68:	f000 fa29 	bl	8007fbe <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	1d3b      	adds	r3, r7, #4
 8007b70:	4611      	mov	r1, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fa17 	bl	8007fa6 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8007b78:	4603      	mov	r3, r0
    }
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b84 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b8c:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
      }
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	06666666 	.word	0x06666666

08007ba0 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007ba8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7f9 fa11 	bl	8000ffe <_ZN7RequestD1Ev>
    }
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007bec:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7f9 fa5c 	bl	80010d8 <_ZN8ResponceD1Ev>
    }
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f9c5 	bl	8007fde <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007c54:	4603      	mov	r3, r0
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f9b9 	bl	8007ffe <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f856 	bl	8007d50 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007cc4:	b5b0      	push	{r4, r5, r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 f9a4 	bl	800801e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	68b8      	ldr	r0, [r7, #8]
 8007cda:	f000 f9a0 	bl	800801e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007cde:	4605      	mov	r5, r0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f99b 	bl	800801e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	461a      	mov	r2, r3
 8007cec:	4629      	mov	r1, r5
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 f9a0 	bl	8008034 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f9aa 	bl	8008054 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8007d00:	4603      	mov	r3, r0
    }
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bdb0      	pop	{r4, r5, r7, pc}

08007d0a <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007d0a:	b5b0      	push	{r4, r5, r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 f981 	bl	800801e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	68b8      	ldr	r0, [r7, #8]
 8007d20:	f000 f97d 	bl	800801e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007d24:	4605      	mov	r5, r0
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 f978 	bl	800801e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	461a      	mov	r2, r3
 8007d32:	4629      	mov	r1, r5
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 f999 	bl	800806c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	1d3b      	adds	r3, r7, #4
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 f987 	bl	8008054 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8007d46:	4603      	mov	r3, r0
    }
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bdb0      	pop	{r4, r5, r7, pc}

08007d50 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007d58:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007d70:	bf00      	nop
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	e00a      	b.n	8007dac <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f973 	bl	800808c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4413      	add	r3, r2
    }
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007db4:	b590      	push	{r4, r7, lr}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f972 	bl	80080aa <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	68b8      	ldr	r0, [r7, #8]
 8007dca:	f000 f96e 	bl	80080aa <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 f979 	bl	80080cc <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8007dda:	4603      	mov	r3, r0
    }
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}

08007de4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007de4:	b5b0      	push	{r4, r5, r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7fd fd2b 	bl	800584c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007df6:	4604      	mov	r4, r0
 8007df8:	68b8      	ldr	r0, [r7, #8]
 8007dfa:	f7fd fd27 	bl	800584c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007dfe:	4605      	mov	r5, r0
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fd fd6e 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7fd fd38 	bl	8005884 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8007e14:	4602      	mov	r2, r0
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fd fd7d 	bl	800591a <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007e20:	4603      	mov	r3, r0
    }
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bdb0      	pop	{r4, r5, r7, pc}

08007e2a <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f96a 	bl	8008114 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8007e40:	4603      	mov	r3, r0
    }
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007e6a:	687c      	ldr	r4, [r7, #4]
 8007e6c:	6838      	ldr	r0, [r7, #0]
 8007e6e:	f7ff ffec 	bl	8007e4a <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4619      	mov	r1, r3
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7fc f8b0 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd90      	pop	{r4, r7, pc}

08007e86 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b092      	sub	sp, #72	; 0x48
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007e94:	2301      	movs	r3, #1
 8007e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8007e9a:	f107 0314 	add.w	r3, r7, #20
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fd42 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fd3c 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8007eb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fc f88f 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ec4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007ec8:	f107 0114 	add.w	r1, r7, #20
 8007ecc:	f000 f94c 	bl	8008168 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	3748      	adds	r7, #72	; 0x48
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b090      	sub	sp, #64	; 0x40
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8007ee6:	f107 0310 	add.w	r3, r7, #16
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fc f875 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007ef2:	f107 0320 	add.w	r3, r7, #32
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fc f86f 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007efe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fc f869 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f10:	f107 0220 	add.w	r2, r7, #32
 8007f14:	f107 0110 	add.w	r1, r7, #16
 8007f18:	f000 f94c 	bl	80081b4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	3740      	adds	r7, #64	; 0x40
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b090      	sub	sp, #64	; 0x40
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8007f32:	f107 0310 	add.w	r3, r7, #16
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fc f84f 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007f3e:	f107 0320 	add.w	r3, r7, #32
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fc f849 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fc f843 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f5c:	f107 0220 	add.w	r2, r7, #32
 8007f60:	f107 0110 	add.w	r1, r7, #16
 8007f64:	f000 f9a1 	bl	80082aa <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	3740      	adds	r7, #64	; 0x40
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	68b9      	ldr	r1, [r7, #8]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 fa02 	bl	80083a0 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f9f6 	bl	80083c0 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f9f6 	bl	80083e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 8007ff4:	4603      	mov	r3, r0
    }
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fa03 	bl	800841a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 8008014:	4603      	mov	r3, r0
    }
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fa0a 	bl	800845e <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 800804a:	4603      	mov	r3, r0
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f9fe 	bl	800847e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8008082:	4603      	mov	r3, r0
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 f9fe 	bl	800849e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80080b2:	1d3b      	adds	r3, r7, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fa0c 	bl	80084d2 <_ZNKSt13move_iteratorIPhE4baseEv>
 80080ba:	4603      	mov	r3, r0
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fc fd2a 	bl	8004b16 <_ZSt12__miter_baseIPhET_S1_>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80080cc:	b5b0      	push	{r4, r5, r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7fd fc03 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 80080de:	4604      	mov	r4, r0
 80080e0:	68b8      	ldr	r0, [r7, #8]
 80080e2:	f7fd fbff 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 80080e6:	4605      	mov	r5, r0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fd fbfa 	bl	80058e4 <_ZSt12__niter_baseIPhET_S1_>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	4629      	mov	r1, r5
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 f9f7 	bl	80084ea <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 80080fc:	4602      	mov	r2, r0
 80080fe:	1d3b      	adds	r3, r7, #4
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fd fc09 	bl	800591a <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8008108:	4603      	mov	r3, r0
    }
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008114 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	109b      	asrs	r3, r3, #2
 8008128:	4a0e      	ldr	r2, [pc, #56]	; (8008164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 800812a:	fb02 f303 	mul.w	r3, r2, r3
 800812e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	461a      	mov	r2, r3
 8008142:	68f9      	ldr	r1, [r7, #12]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f014 fde3 	bl	801cd10 <memmove>
	  return __result + _Num;
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	461a      	mov	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4413      	add	r3, r2
	}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	cccccccd 	.word	0xcccccccd

08008168 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008168:	b580      	push	{r7, lr}
 800816a:	b090      	sub	sp, #64	; 0x40
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8008176:	f107 0310 	add.w	r3, r7, #16
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fbd4 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8008182:	f107 0320 	add.w	r3, r7, #32
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff fbce 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 800818e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f7fb ff21 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081a0:	f107 0220 	add.w	r2, r7, #32
 80081a4:	f107 0110 	add.w	r1, r7, #16
 80081a8:	f000 f9af 	bl	800850a <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	3740      	adds	r7, #64	; 0x40
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 80081b4:	b5b0      	push	{r4, r5, r7, lr}
 80081b6:	b09e      	sub	sp, #120	; 0x78
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d058      	beq.n	8008280 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	681c      	ldr	r4, [r3, #0]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	689d      	ldr	r5, [r3, #8]
 80081d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fb fefd 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80081e2:	f107 0014 	add.w	r0, r7, #20
 80081e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ea:	462a      	mov	r2, r5
 80081ec:	4621      	mov	r1, r4
 80081ee:	f000 f9c3 	bl	8008578 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	461c      	mov	r4, r3
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	3304      	adds	r3, #4
 8008206:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800820e:	429a      	cmp	r2, r3
 8008210:	d024      	beq.n	800825c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 8008212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008218:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 800821a:	f7fc fe84 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 800821e:	4602      	mov	r2, r0
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
	    __result
 8008228:	441c      	add	r4, r3
 800822a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f7fb fed3 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008236:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800823a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800823e:	4622      	mov	r2, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f000 f999 	bl	8008578 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	461c      	mov	r4, r3
 800824a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800824e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8008254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008256:	3304      	adds	r3, #4
 8008258:	677b      	str	r3, [r7, #116]	; 0x74
 800825a:	e7d5      	b.n	8008208 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685c      	ldr	r4, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681d      	ldr	r5, [r3, #0]
 8008264:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f7fb feb6 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008276:	462a      	mov	r2, r5
 8008278:	4621      	mov	r1, r4
 800827a:	f000 f97d 	bl	8008578 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 800827e:	e010      	b.n	80082a2 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	681c      	ldr	r4, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681d      	ldr	r5, [r3, #0]
 8008288:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7fb fea4 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800829a:	462a      	mov	r2, r5
 800829c:	4621      	mov	r1, r4
 800829e:	f000 f96b 	bl	8008578 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	3778      	adds	r7, #120	; 0x78
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bdb0      	pop	{r4, r5, r7, pc}

080082aa <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 80082aa:	b5b0      	push	{r4, r5, r7, lr}
 80082ac:	b09e      	sub	sp, #120	; 0x78
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d058      	beq.n	8008376 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685c      	ldr	r4, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681d      	ldr	r5, [r3, #0]
 80082cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fb fe82 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80082d8:	f107 0014 	add.w	r0, r7, #20
 80082dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e0:	462a      	mov	r2, r5
 80082e2:	4621      	mov	r1, r4
 80082e4:	f000 f99a 	bl	800861c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	461c      	mov	r4, r3
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	3b04      	subs	r3, #4
 80082fc:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008304:	429a      	cmp	r2, r3
 8008306:	d024      	beq.n	8008352 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8008308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800830a:	681d      	ldr	r5, [r3, #0]
 800830c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800830e:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 8008310:	f7fc fe09 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8008314:	4602      	mov	r2, r0
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 800831e:	441c      	add	r4, r3
 8008320:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f7fb fe58 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800832c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008330:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008334:	4622      	mov	r2, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f000 f970 	bl	800861c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	461c      	mov	r4, r3
 8008340:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008346:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 800834a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800834c:	3b04      	subs	r3, #4
 800834e:	677b      	str	r3, [r7, #116]	; 0x74
 8008350:	e7d5      	b.n	80082fe <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	681c      	ldr	r4, [r3, #0]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	689d      	ldr	r5, [r3, #8]
 800835a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f7fb fe3b 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800836c:	462a      	mov	r2, r5
 800836e:	4621      	mov	r1, r4
 8008370:	f000 f954 	bl	800861c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8008374:	e010      	b.n	8008398 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	681c      	ldr	r4, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f7fb fe29 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008390:	462a      	mov	r2, r5
 8008392:	4621      	mov	r1, r4
 8008394:	f000 f942 	bl	800861c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	3778      	adds	r7, #120	; 0x78
 800839c:	46bd      	mov	sp, r7
 800839e:	bdb0      	pop	{r4, r5, r7, pc}

080083a0 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 f999 	bl	80086e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 80083b6:	4603      	mov	r3, r0
    }
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 f9a6 	bl	8008722 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 80083d6:	4603      	mov	r3, r0
    }
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	109b      	asrs	r3, r3, #2
 80083f4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d006      	beq.n	800840a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	461a      	mov	r2, r3
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f014 fc83 	bl	801cd10 <memmove>
	  return __result + _Num;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4413      	add	r3, r2
	}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800841a:	b580      	push	{r7, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	109b      	asrs	r3, r3, #2
 800842e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	425b      	negs	r3, r3
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	18d0      	adds	r0, r2, r3
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	461a      	mov	r2, r3
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	f014 fc62 	bl	801cd10 <memmove>
	  return __result - _Num;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	425b      	negs	r3, r3
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	4413      	add	r3, r2
	}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f979 	bl	8008766 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 8008474:	4603      	mov	r3, r0
    }
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f986 	bl	80087a0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 8008494:	4603      	mov	r3, r0
    }
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4619      	mov	r1, r3
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f014 fc3d 	bl	801cd44 <memset>
    }
 80084ca:	bf00      	nop
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f972 	bl	80087e4 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8008500:	4603      	mov	r3, r0
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 800850a:	b580      	push	{r7, lr}
 800850c:	b098      	sub	sp, #96	; 0x60
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008518:	f107 0320 	add.w	r3, r7, #32
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff fa03 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	f107 0220 	add.w	r2, r7, #32
 800852c:	4611      	mov	r1, r2
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f968 	bl	8008804 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008534:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4618      	mov	r0, r3
 800853c:	f7ff f9f5 	bl	800792a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8008540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008544:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008548:	4611      	mov	r1, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f95a 	bl	8008804 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008550:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f7fb fd40 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008562:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008566:	f107 0110 	add.w	r1, r7, #16
 800856a:	f7ff fa21 	bl	80079b0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	3760      	adds	r7, #96	; 0x60
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	109b      	asrs	r3, r3, #2
 800858e:	4a22      	ldr	r2, [pc, #136]	; (8008618 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8008590:	fb02 f303 	mul.w	r3, r2, r3
 8008594:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	dd34      	ble.n	8008606 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	109b      	asrs	r3, r3, #2
 80085a8:	4a1b      	ldr	r2, [pc, #108]	; (8008618 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 80085aa:	fb02 f303 	mul.w	r3, r2, r3
 80085ae:	61bb      	str	r3, [r7, #24]
 80085b0:	f107 0218 	add.w	r2, r7, #24
 80085b4:	f107 0314 	add.w	r3, r7, #20
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fb6c 	bl	8006c98 <_ZSt3minIiERKT_S2_S2_>
 80085c0:	4603      	mov	r3, r0
	  const difference_type __clen
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	4613      	mov	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	1899      	adds	r1, r3, r2
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	68b8      	ldr	r0, [r7, #8]
 80085de:	f000 f927 	bl	8008830 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	461a      	mov	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 80085f4:	69f9      	ldr	r1, [r7, #28]
 80085f6:	6838      	ldr	r0, [r7, #0]
 80085f8:	f7fd fe58 	bl	80062ac <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8008604:	e7c7      	b.n	8008596 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7fb fce7 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	3720      	adds	r7, #32
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	cccccccd 	.word	0xcccccccd

0800861c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	109b      	asrs	r3, r3, #2
 8008632:	4a2c      	ldr	r2, [pc, #176]	; (80086e4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8008634:	fb02 f303 	mul.w	r3, r2, r3
 8008638:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	dd49      	ble.n	80086d4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	109b      	asrs	r3, r3, #2
 800864c:	4a25      	ldr	r2, [pc, #148]	; (80086e4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 800864e:	fb02 f303 	mul.w	r3, r2, r3
 8008652:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10f      	bne.n	8008680 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 8008660:	f7fc fc61 	bl	8004f26 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8008664:	4603      	mov	r3, r0
 8008666:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	3b04      	subs	r3, #4
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	4619      	mov	r1, r3
 8008674:	460b      	mov	r3, r1
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 8008680:	f107 0210 	add.w	r2, r7, #16
 8008684:	f107 0314 	add.w	r3, r7, #20
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fb04 	bl	8006c98 <_ZSt3minIiERKT_S2_S2_>
 8008690:	4603      	mov	r3, r0
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	425b      	negs	r3, r3
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4413      	add	r3, r2
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f8d0 	bl	8008850 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	425b      	negs	r3, r3
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 80086c2:	69b9      	ldr	r1, [r7, #24]
 80086c4:	6838      	ldr	r0, [r7, #0]
 80086c6:	f7ff f8d4 	bl	8007872 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80086d2:	e7b2      	b.n	800863a <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7fb fc80 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	cccccccd 	.word	0xcccccccd

080086e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	109b      	asrs	r3, r3, #2
 80086fc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d006      	beq.n	8008712 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	461a      	mov	r2, r3
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f014 faff 	bl	801cd10 <memmove>
	  return __result + _Num;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4413      	add	r3, r2
	}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	109b      	asrs	r3, r3, #2
 8008736:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	425b      	negs	r3, r3
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	18d0      	adds	r0, r2, r3
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	461a      	mov	r2, r3
 800874e:	68f9      	ldr	r1, [r7, #12]
 8008750:	f014 fade 	bl	801cd10 <memmove>
	  return __result - _Num;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	425b      	negs	r3, r3
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	4413      	add	r3, r2
	}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	109b      	asrs	r3, r3, #2
 800877a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d006      	beq.n	8008790 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	461a      	mov	r2, r3
 8008788:	68f9      	ldr	r1, [r7, #12]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f014 fac0 	bl	801cd10 <memmove>
	  return __result + _Num;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	4413      	add	r3, r2
	}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	109b      	asrs	r3, r3, #2
 80087b4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	425b      	negs	r3, r3
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	18d0      	adds	r0, r2, r3
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	461a      	mov	r2, r3
 80087cc:	68f9      	ldr	r1, [r7, #12]
 80087ce:	f014 fa9f 	bl	801cd10 <memmove>
	  return __result - _Num;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	425b      	negs	r3, r3
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	4413      	add	r3, r2
	}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f83b 	bl	8008870 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80087fa:	4603      	mov	r3, r0
    }
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
    { return __miter_base(__it.base()); }
 800880e:	f107 0308 	add.w	r3, r7, #8
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f845 	bl	80088a4 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f107 0208 	add.w	r2, r7, #8
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff f8b7 	bl	8007996 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f83d 	bl	80088c0 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8008846:	4603      	mov	r3, r0
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f83d 	bl	80088e0 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8008866:	4603      	mov	r3, r0
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	461a      	mov	r2, r3
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f014 fa3d 	bl	801cd10 <memmove>
	  return __result + _Num;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	4413      	add	r3, r2
	}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fb fb92 	bl	8003fdc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f815 	bl	8008900 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80088d6:	4603      	mov	r3, r0
    }
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f82f 	bl	8008954 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80088f6:	4603      	mov	r3, r0
    }
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	109b      	asrs	r3, r3, #2
 8008914:	4a0e      	ldr	r2, [pc, #56]	; (8008950 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d009      	beq.n	8008936 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	461a      	mov	r2, r3
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f014 f9ed 	bl	801cd10 <memmove>
	  return __result + _Num;
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	461a      	mov	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4413      	add	r3, r2
	}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	cccccccd 	.word	0xcccccccd

08008954 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	109b      	asrs	r3, r3, #2
 8008968:	4a11      	ldr	r2, [pc, #68]	; (80089b0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 800896a:	fb02 f303 	mul.w	r3, r2, r3
 800896e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d010      	beq.n	8008998 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	425b      	negs	r3, r3
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	18d0      	adds	r0, r2, r3
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	461a      	mov	r2, r3
 8008992:	68f9      	ldr	r1, [r7, #12]
 8008994:	f014 f9bc 	bl	801cd10 <memmove>
	  return __result - _Num;
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	425b      	negs	r3, r3
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
	}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	cccccccd 	.word	0xcccccccd

080089b4 <_Z41__static_initialization_and_destruction_0ii>:
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d107      	bne.n	80089d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d102      	bne.n	80089d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 80089ce:	4809      	ldr	r0, [pc, #36]	; (80089f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80089d0:	f7f9 fbc7 	bl	8002162 <_ZN18MotherboardContextC1Ev>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d107      	bne.n	80089ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d102      	bne.n	80089ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80089e4:	4803      	ldr	r0, [pc, #12]	; (80089f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80089e6:	f7f9 fbdf 	bl	80021a8 <_ZN18MotherboardContextD1Ev>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	240001d0 	.word	0x240001d0

080089f8 <_GLOBAL__sub_I_MotherboardInit>:
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a00:	2001      	movs	r0, #1
 8008a02:	f7ff ffd7 	bl	80089b4 <_Z41__static_initialization_and_destruction_0ii>
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <_GLOBAL__sub_D_MotherboardInit>:
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a10:	2000      	movs	r0, #0
 8008a12:	f7ff ffcf 	bl	80089b4 <_Z41__static_initialization_and_destruction_0ii>
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607b      	str	r3, [r7, #4]
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]
 8008a26:	4613      	mov	r3, r2
 8008a28:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d008      	beq.n	8008a46 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8008a34:	89ba      	ldrh	r2, [r7, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	7bf8      	ldrb	r0, [r7, #15]
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	f001 f925 	bl	8009c8a <bhy2_hif_get_regs>
 8008a40:	4603      	mov	r3, r0
 8008a42:	75fb      	strb	r3, [r7, #23]
 8008a44:	e001      	b.n	8008a4a <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008a46:	23ff      	movs	r3, #255	; 0xff
 8008a48:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8008a56:	b590      	push	{r4, r7, lr}
 8008a58:	b08f      	sub	sp, #60	; 0x3c
 8008a5a:	af02      	add	r7, sp, #8
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <bhy2_get_and_process_fifo+0x1c>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d102      	bne.n	8008a78 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 8008a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a76:	e11b      	b.n	8008cb0 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8008a7e:	f06f 0305 	mvn.w	r3, #5
 8008a82:	e115      	b.n	8008cb0 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	2100      	movs	r1, #0
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f014 f95b 	bl	801cd44 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	2214      	movs	r2, #20
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f014 f954 	bl	801cd44 <memset>

    fifos.buffer = work_buffer;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 fa5f 	bl	8009f70 <bhy2_hif_get_interrupt_status>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8008ab8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8008ac0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008ac4:	e0f4      	b.n	8008cb0 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008aca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008ad2:	e042      	b.n	8008b5a <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ad8:	f003 0306 	and.w	r3, r3, #6
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d00e      	beq.n	8008afe <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ae4:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d008      	beq.n	8008afe <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008af0:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008af4:	2b06      	cmp	r3, #6
 8008af6:	d002      	beq.n	8008afe <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d020      	beq.n	8008b40 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8008b08:	6a3a      	ldr	r2, [r7, #32]
 8008b0a:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008b0c:	1ad1      	subs	r1, r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f107 0214 	add.w	r2, r7, #20
 8008b14:	f102 0408 	add.w	r4, r2, #8
 8008b18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	4623      	mov	r3, r4
 8008b20:	f001 fad7 	bl	800a0d2 <bhy2_hif_get_wakeup_fifo>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8008b2a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8008b32:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008b36:	e0bb      	b.n	8008cb0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	4413      	add	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	4619      	mov	r1, r3
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f000 fbad 	bl	80092a8 <parse_fifo>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <bhy2_get_and_process_fifo+0x112>
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <bhy2_get_and_process_fifo+0x11a>
 8008b68:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0b1      	beq.n	8008ad4 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008b74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008b7c:	e042      	b.n	8008c04 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8008b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b82:	f003 0318 	and.w	r3, r3, #24
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d00e      	beq.n	8008ba8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b8e:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8008b92:	2b10      	cmp	r3, #16
 8008b94:	d008      	beq.n	8008ba8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b9a:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008b9e:	2b18      	cmp	r3, #24
 8008ba0:	d002      	beq.n	8008ba8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d020      	beq.n	8008bea <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008bb2:	6a3a      	ldr	r2, [r7, #32]
 8008bb4:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008bb6:	1ad1      	subs	r1, r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f107 0214 	add.w	r2, r7, #20
 8008bbe:	f102 0408 	add.w	r4, r2, #8
 8008bc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	4623      	mov	r3, r4
 8008bca:	f001 fa98 	bl	800a0fe <bhy2_hif_get_nonwakeup_fifo>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008bd4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8008bdc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008be0:	e066      	b.n	8008cb0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	4413      	add	r3, r2
 8008be8:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8008bea:	f107 0314 	add.w	r3, r7, #20
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	f000 fb58 	bl	80092a8 <parse_fifo>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d102      	bne.n	8008c12 <bhy2_get_and_process_fifo+0x1bc>
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <bhy2_get_and_process_fifo+0x1c4>
 8008c12:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0b1      	beq.n	8008b7e <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008c1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008c26:	e036      	b.n	8008c96 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8008c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <bhy2_get_and_process_fifo+0x1e4>
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d020      	beq.n	8008c7c <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008c44:	6a3a      	ldr	r2, [r7, #32]
 8008c46:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008c48:	1ad1      	subs	r1, r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f107 0214 	add.w	r2, r7, #20
 8008c50:	f102 0408 	add.w	r4, r2, #8
 8008c54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	f001 fab0 	bl	800a1c0 <bhy2_hif_get_status_fifo_async>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008c66:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8008c6e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c72:	e01d      	b.n	8008cb0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	4413      	add	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8008c7c:	f107 0314 	add.w	r3, r7, #20
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	4619      	mov	r1, r3
 8008c84:	2002      	movs	r0, #2
 8008c86:	f000 fb0f 	bl	80092a8 <parse_fifo>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d102      	bne.n	8008ca4 <bhy2_get_and_process_fifo+0x24e>
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <bhy2_get_and_process_fifo+0x256>
 8008ca4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0bd      	beq.n	8008c28 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8008cac:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3734      	adds	r7, #52	; 0x34
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd90      	pop	{r4, r7, pc}

08008cb8 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8008cc4:	6079      	str	r1, [r7, #4]
 8008cc6:	603a      	str	r2, [r7, #0]
 8008cc8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	ed97 0a02 	vldr	s0, [r7, #8]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 fa84 	bl	800a1ec <bhy2_hif_exec_sensor_conf_cmd>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75fb      	strb	r3, [r7, #23]
 8008ce8:	e001      	b.n	8008cee <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008cea:	23ff      	movs	r3, #255	; 0xff
 8008cec:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d007      	beq.n	8008d1e <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 f8e8 	bl	8009ee8 <bhy2_hif_get_product_id>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
 8008d1c:	e001      	b.n	8008d22 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008d1e:	23ff      	movs	r3, #255	; 0xff
 8008d20:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 f8de 	bl	8009f08 <bhy2_hif_get_kernel_version>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]
 8008d50:	e001      	b.n	8008d56 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008d52:	23ff      	movs	r3, #255	; 0xff
 8008d54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d007      	beq.n	8008d86 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 f8e8 	bl	8009f50 <bhy2_hif_get_boot_status>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]
 8008d84:	e001      	b.n	8008d8a <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008d86:	23ff      	movs	r3, #255	; 0xff
 8008d88:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b086      	sub	sp, #24
 8008d9a:	af02      	add	r7, sp, #8
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00d      	beq.n	8008dca <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	f107 0208 	add.w	r2, r7, #8
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	4613      	mov	r3, r2
 8008db8:	2220      	movs	r2, #32
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	f240 101f 	movw	r0, #287	; 0x11f
 8008dc0:	f001 f80a 	bl	8009dd8 <bhy2_hif_get_parameter>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
 8008dc8:	e001      	b.n	8008dce <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008dca:	23ff      	movs	r3, #255	; 0xff
 8008dcc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b086      	sub	sp, #24
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <bhy2_upload_firmware_to_ram+0x1c>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d102      	bne.n	8008dfc <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8008df6:	23ff      	movs	r3, #255	; 0xff
 8008df8:	75fb      	strb	r3, [r7, #23]
 8008dfa:	e007      	b.n	8008e0c <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	68b9      	ldr	r1, [r7, #8]
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f001 f90d 	bl	800a022 <bhy2_hif_upload_firmware_to_ram>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e2a:	23ff      	movs	r3, #255	; 0xff
 8008e2c:	73fb      	strb	r3, [r7, #15]
 8008e2e:	e005      	b.n	8008e3c <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 f932 	bl	800a09c <bhy2_hif_boot_program_ram>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	6039      	str	r1, [r7, #0]
 8008e52:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e5e:	23ff      	movs	r3, #255	; 0xff
 8008e60:	73fb      	strb	r3, [r7, #15]
 8008e62:	e007      	b.n	8008e74 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	1df9      	adds	r1, r7, #7
 8008e68:	2201      	movs	r2, #1
 8008e6a:	2007      	movs	r0, #7
 8008e6c:	f000 ff45 	bl	8009cfa <bhy2_hif_set_regs>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e94:	23ff      	movs	r3, #255	; 0xff
 8008e96:	73fb      	strb	r3, [r7, #15]
 8008e98:	e007      	b.n	8008eaa <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	2007      	movs	r0, #7
 8008ea2:	f000 fef2 	bl	8009c8a <bhy2_hif_get_regs>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008eca:	23ff      	movs	r3, #255	; 0xff
 8008ecc:	73fb      	strb	r3, [r7, #15]
 8008ece:	e006      	b.n	8008ede <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f84b 	bl	8009f70 <bhy2_hif_get_interrupt_status>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	6039      	str	r1, [r7, #0]
 8008ef4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d102      	bne.n	8008f06 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f00:	23ff      	movs	r3, #255	; 0xff
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	e007      	b.n	8008f16 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	1df9      	adds	r1, r7, #7
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	2006      	movs	r0, #6
 8008f0e:	f000 fef4 	bl	8009cfa <bhy2_hif_set_regs>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f34:	23ff      	movs	r3, #255	; 0xff
 8008f36:	73fb      	strb	r3, [r7, #15]
 8008f38:	e005      	b.n	8008f46 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 f827 	bl	8009f90 <bhy2_hif_reset>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b08a      	sub	sp, #40	; 0x28
 8008f56:	af04      	add	r7, sp, #16
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d014      	beq.n	8008f96 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8008f6c:	f640 1238 	movw	r2, #2360	; 0x938
 8008f70:	2100      	movs	r1, #0
 8008f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f74:	f013 fee6 	bl	801cd44 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	7bf8      	ldrb	r0, [r7, #15]
 8008f7c:	9302      	str	r3, [sp, #8]
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	f000 fe3e 	bl	8009c0c <bhy2_hif_init>
 8008f90:	4603      	mov	r3, r0
 8008f92:	75fb      	strb	r3, [r7, #23]
 8008f94:	e001      	b.n	8008f9a <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008f96:	23ff      	movs	r3, #255	; 0xff
 8008f98:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b087      	sub	sp, #28
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <bhy2_register_fifo_parse_callback+0x20>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8008fc6:	23ff      	movs	r3, #255	; 0xff
 8008fc8:	75fb      	strb	r3, [r7, #23]
 8008fca:	e013      	b.n	8008ff4 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8008fcc:	7bfa      	ldrb	r2, [r7, #15]
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3318      	adds	r3, #24
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8008fe0:	7bfa      	ldrb	r2, [r7, #15]
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	4413      	add	r3, r2
 8008fea:	440b      	add	r3, r1
 8008fec:	3318      	adds	r3, #24
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8008ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b092      	sub	sp, #72	; 0x48
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d103      	bne.n	800901a <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8009012:	23ff      	movs	r3, #255	; 0xff
 8009014:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009018:	e079      	b.n	800910e <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 800901a:	f107 0308 	add.w	r3, r7, #8
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff feb8 	bl	8008d96 <bhy2_get_virt_sensor_list>
 8009026:	4603      	mov	r3, r0
 8009028:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 800902c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009030:	2b00      	cmp	r3, #0
 8009032:	d16c      	bne.n	800910e <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 800903a:	2301      	movs	r3, #1
 800903c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009040:	e041      	b.n	80090c6 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8009042:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009046:	08db      	lsrs	r3, r3, #3
 8009048:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 800904c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	2201      	movs	r2, #1
 8009056:	fa02 f303 	lsl.w	r3, r2, r3
 800905a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 800905e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009062:	3348      	adds	r3, #72	; 0x48
 8009064:	443b      	add	r3, r7
 8009066:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 800906a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800906e:	4013      	ands	r3, r2
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d022      	beq.n	80090bc <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800907c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009080:	4618      	mov	r0, r3
 8009082:	f001 f8e6 	bl	800a252 <bhy2_hif_get_sensor_info>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 800908c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009090:	2b00      	cmp	r3, #0
 8009092:	d113      	bne.n	80090bc <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8009094:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d103      	bne.n	80090a4 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 800909c:	23f8      	movs	r3, #248	; 0xf8
 800909e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 80090a2:	e018      	b.n	80090d6 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 80090a4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80090a8:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	4413      	add	r3, r2
 80090b4:	440b      	add	r3, r1
 80090b6:	331c      	adds	r3, #28
 80090b8:	4602      	mov	r2, r0
 80090ba:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 80090bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090c0:	3301      	adds	r3, #1
 80090c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80090c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090ca:	2bf4      	cmp	r3, #244	; 0xf4
 80090cc:	d803      	bhi.n	80090d6 <bhy2_update_virtual_sensor_list+0xd2>
 80090ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0b5      	beq.n	8009042 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80090d6:	23ff      	movs	r3, #255	; 0xff
 80090d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80090dc:	e013      	b.n	8009106 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80090de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090e2:	3bf5      	subs	r3, #245	; 0xf5
 80090e4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80090e8:	490c      	ldr	r1, [pc, #48]	; (800911c <bhy2_update_virtual_sensor_list+0x118>)
 80090ea:	5cc8      	ldrb	r0, [r1, r3]
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	4613      	mov	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	4413      	add	r3, r2
 80090f4:	440b      	add	r3, r1
 80090f6:	331c      	adds	r3, #28
 80090f8:	4602      	mov	r2, r0
 80090fa:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80090fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009100:	3b01      	subs	r3, #1
 8009102:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009106:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800910a:	2bf4      	cmp	r3, #244	; 0xf4
 800910c:	d8e7      	bhi.n	80090de <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 800910e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009112:	4618      	mov	r0, r3
 8009114:	3748      	adds	r7, #72	; 0x48
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	08038ab8 	.word	0x08038ab8

08009120 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <bhy2_get_error_value+0x1a>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 800913a:	23ff      	movs	r3, #255	; 0xff
 800913c:	73fb      	strb	r3, [r7, #15]
 800913e:	e007      	b.n	8009150 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2201      	movs	r2, #1
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	202e      	movs	r0, #46	; 0x2e
 8009148:	f7ff fc66 	bl	8008a18 <bhy2_get_regs>
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d04e      	beq.n	8009212 <get_callback_info+0xb6>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d04b      	beq.n	8009212 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 800917a:	7bfa      	ldrb	r2, [r7, #15]
 800917c:	68b8      	ldr	r0, [r7, #8]
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4413      	add	r3, r2
 8009186:	440b      	add	r3, r1
 8009188:	3318      	adds	r3, #24
 800918a:	4602      	mov	r2, r0
 800918c:	3304      	adds	r3, #4
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	6859      	ldr	r1, [r3, #4]
 8009192:	6010      	str	r0, [r2, #0]
 8009194:	6051      	str	r1, [r2, #4]
 8009196:	7a1b      	ldrb	r3, [r3, #8]
 8009198:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	2bf4      	cmp	r3, #244	; 0xf4
 800919e:	d91b      	bls.n	80091d8 <get_callback_info+0x7c>
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d117      	bne.n	80091d8 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	705a      	strb	r2, [r3, #1]
 80091ae:	2200      	movs	r2, #0
 80091b0:	709a      	strb	r2, [r3, #2]
 80091b2:	2200      	movs	r2, #0
 80091b4:	70da      	strb	r2, [r3, #3]
 80091b6:	2200      	movs	r2, #0
 80091b8:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	715a      	strb	r2, [r3, #5]
 80091c0:	2200      	movs	r2, #0
 80091c2:	719a      	strb	r2, [r3, #6]
 80091c4:	2200      	movs	r2, #0
 80091c6:	71da      	strb	r2, [r3, #7]
 80091c8:	2200      	movs	r2, #0
 80091ca:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	3bf5      	subs	r3, #245	; 0xf5
 80091d0:	4a16      	ldr	r2, [pc, #88]	; (800922c <get_callback_info+0xd0>)
 80091d2:	5cd2      	ldrb	r2, [r2, r3]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d11c      	bne.n	8009218 <get_callback_info+0xbc>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d118      	bne.n	8009218 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2200      	movs	r2, #0
 80091ea:	705a      	strb	r2, [r3, #1]
 80091ec:	2200      	movs	r2, #0
 80091ee:	709a      	strb	r2, [r3, #2]
 80091f0:	2200      	movs	r2, #0
 80091f2:	70da      	strb	r2, [r3, #3]
 80091f4:	2200      	movs	r2, #0
 80091f6:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2200      	movs	r2, #0
 80091fc:	715a      	strb	r2, [r3, #5]
 80091fe:	2200      	movs	r2, #0
 8009200:	719a      	strb	r2, [r3, #6]
 8009202:	2200      	movs	r2, #0
 8009204:	71da      	strb	r2, [r3, #7]
 8009206:	2200      	movs	r2, #0
 8009208:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2201      	movs	r2, #1
 800920e:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8009210:	e002      	b.n	8009218 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009212:	23ff      	movs	r3, #255	; 0xff
 8009214:	75fb      	strb	r3, [r7, #23]
 8009216:	e000      	b.n	800921a <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8009218:	bf00      	nop
    }

    return rslt;
 800921a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800921e:	4618      	mov	r0, r3
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	08038ab8 	.word	0x08038ab8

08009230 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	460b      	mov	r3, r1
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	7afb      	ldrb	r3, [r7, #11]
 8009244:	441a      	add	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d803      	bhi.n	8009256 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	701a      	strb	r2, [r3, #0]
 8009254:	e002      	b.n	800925c <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 800926a:	b480      	push	{r7}
 800926c:	b087      	sub	sp, #28
 800926e:	af00      	add	r7, sp, #0
 8009270:	4603      	mov	r3, r0
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	607a      	str	r2, [r7, #4]
 8009276:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d808      	bhi.n	8009294 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	441a      	add	r2, r3
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e001      	b.n	8009298 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8009294:	23f9      	movs	r3, #249	; 0xf9
 8009296:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800929c:	4618      	mov	r0, r3
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	b099      	sub	sp, #100	; 0x64
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	4603      	mov	r3, r0
 80092b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80092b4:	627a      	str	r2, [r7, #36]	; 0x24
 80092b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80092d2:	e16a      	b.n	80095aa <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	691a      	ldr	r2, [r3, #16]
 80092de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e0:	4413      	add	r3, r2
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80092e8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80092ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff ffb9 	bl	800926a <get_time_stamp>
 80092f8:	4603      	mov	r3, r0
 80092fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 80092fe:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <parse_fifo+0x64>
        {
            return rslt;
 8009306:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800930a:	e191      	b.n	8009630 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 800930c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009310:	2b00      	cmp	r3, #0
 8009312:	d025      	beq.n	8009360 <parse_fifo+0xb8>
 8009314:	2b00      	cmp	r3, #0
 8009316:	f2c0 80f6 	blt.w	8009506 <parse_fifo+0x25e>
 800931a:	2bff      	cmp	r3, #255	; 0xff
 800931c:	f300 80f3 	bgt.w	8009506 <parse_fifo+0x25e>
 8009320:	2bf5      	cmp	r3, #245	; 0xf5
 8009322:	f2c0 80f0 	blt.w	8009506 <parse_fifo+0x25e>
 8009326:	3bf5      	subs	r3, #245	; 0xf5
 8009328:	2b0a      	cmp	r3, #10
 800932a:	f200 80ec 	bhi.w	8009506 <parse_fifo+0x25e>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <parse_fifo+0x8c>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	0800936d 	.word	0x0800936d
 8009338:	080093d5 	.word	0x080093d5
 800933c:	08009453 	.word	0x08009453
 8009340:	08009507 	.word	0x08009507
 8009344:	08009507 	.word	0x08009507
 8009348:	08009507 	.word	0x08009507
 800934c:	0800936d 	.word	0x0800936d
 8009350:	080093d5 	.word	0x080093d5
 8009354:	08009453 	.word	0x08009453
 8009358:	08009507 	.word	0x08009507
 800935c:	08009361 	.word	0x08009361
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	601a      	str	r2, [r3, #0]
                break;
 800936a:	e11e      	b.n	80095aa <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 800936c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009370:	461a      	mov	r2, r3
 8009372:	2102      	movs	r1, #2
 8009374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009376:	f7ff ff5b 	bl	8009230 <get_buffer_status>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009380:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <parse_fifo+0xe6>
                {
                    return rslt;
 8009388:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800938c:	e150      	b.n	8009630 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800938e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009392:	2b00      	cmp	r3, #0
 8009394:	d000      	beq.n	8009398 <parse_fifo+0xf0>
                {
                    break;
 8009396:	e108      	b.n	80095aa <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8009398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a4:	3301      	adds	r3, #1
 80093a6:	4413      	add	r3, r2
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2200      	movs	r2, #0
 80093ae:	469a      	mov	sl, r3
 80093b0:	4693      	mov	fp, r2
 80093b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b4:	eb10 020a 	adds.w	r2, r0, sl
 80093b8:	61ba      	str	r2, [r7, #24]
 80093ba:	eb41 020b 	adc.w	r2, r1, fp
 80093be:	61fa      	str	r2, [r7, #28]
 80093c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80093c4:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	1c9a      	adds	r2, r3, #2
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	601a      	str	r2, [r3, #0]
                break;
 80093d2:	e0ea      	b.n	80095aa <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 80093d4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80093d8:	461a      	mov	r2, r3
 80093da:	2103      	movs	r1, #3
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f7ff ff27 	bl	8009230 <get_buffer_status>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80093e8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <parse_fifo+0x14e>
                {
                    return rslt;
 80093f0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80093f4:	e11c      	b.n	8009630 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80093f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d000      	beq.n	8009400 <parse_fifo+0x158>
                {
                    break;
 80093fe:	e0d4      	b.n	80095aa <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 8009400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009402:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	691a      	ldr	r2, [r3, #16]
 800940a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800940c:	3301      	adds	r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b21c      	sxth	r4, r3
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	691a      	ldr	r2, [r3, #16]
 8009418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800941a:	3302      	adds	r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	b21b      	sxth	r3, r3
 8009424:	4323      	orrs	r3, r4
 8009426:	b21b      	sxth	r3, r3
 8009428:	b29b      	uxth	r3, r3
 800942a:	b29b      	uxth	r3, r3
 800942c:	2200      	movs	r2, #0
 800942e:	461d      	mov	r5, r3
 8009430:	4616      	mov	r6, r2
 8009432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009434:	1942      	adds	r2, r0, r5
 8009436:	613a      	str	r2, [r7, #16]
 8009438:	eb41 0206 	adc.w	r2, r1, r6
 800943c:	617a      	str	r2, [r7, #20]
 800943e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009442:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	1cda      	adds	r2, r3, #3
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	601a      	str	r2, [r3, #0]
                break;
 8009450:	e0ab      	b.n	80095aa <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 8009452:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009456:	461a      	mov	r2, r3
 8009458:	2106      	movs	r1, #6
 800945a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945c:	f7ff fee8 	bl	8009230 <get_buffer_status>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009466:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <parse_fifo+0x1cc>
                {
                    return rslt;
 800946e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009472:	e0dd      	b.n	8009630 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009478:	2b00      	cmp	r3, #0
 800947a:	d000      	beq.n	800947e <parse_fifo+0x1d6>
                {
                    break;
 800947c:	e095      	b.n	80095aa <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009484:	3301      	adds	r3, #1
 8009486:	4413      	add	r3, r2
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	4619      	mov	r1, r3
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	691a      	ldr	r2, [r3, #16]
 8009490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009492:	3302      	adds	r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	4319      	orrs	r1, r3
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094a2:	3303      	adds	r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	4319      	orrs	r1, r3
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	691a      	ldr	r2, [r3, #16]
 80094b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b2:	3304      	adds	r3, #4
 80094b4:	4413      	add	r3, r2
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	061b      	lsls	r3, r3, #24
 80094ba:	430b      	orrs	r3, r1
 80094bc:	2200      	movs	r2, #0
 80094be:	4698      	mov	r8, r3
 80094c0:	4691      	mov	r9, r2
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094c8:	3305      	adds	r3, #5
 80094ca:	4413      	add	r3, r2
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2200      	movs	r2, #0
 80094d2:	60bb      	str	r3, [r7, #8]
 80094d4:	60fa      	str	r2, [r7, #12]
 80094d6:	f04f 0200 	mov.w	r2, #0
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	68b9      	ldr	r1, [r7, #8]
 80094e0:	000b      	movs	r3, r1
 80094e2:	2200      	movs	r2, #0
 80094e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094e6:	ea48 0002 	orr.w	r0, r8, r2
 80094ea:	6038      	str	r0, [r7, #0]
 80094ec:	ea49 0303 	orr.w	r3, r9, r3
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80094f6:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80094fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	1d9a      	adds	r2, r3, #6
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	601a      	str	r2, [r3, #0]
                break;
 8009504:	e051      	b.n	80095aa <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8009506:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800950a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800950e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fe23 	bl	800915c <get_callback_info>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 800951c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <parse_fifo+0x282>
                {
                    return rslt;
 8009524:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009528:	e082      	b.n	8009630 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 800952a:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800952e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009532:	461a      	mov	r2, r3
 8009534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009536:	f7ff fe7b 	bl	8009230 <get_buffer_status>
 800953a:	4603      	mov	r3, r0
 800953c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009540:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <parse_fifo+0x2a6>
                {
                    return rslt;
 8009548:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800954c:	e070      	b.n	8009630 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800954e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009552:	2b00      	cmp	r3, #0
 8009554:	d000      	beq.n	8009558 <parse_fifo+0x2b0>
                {
                    break;
 8009556:	e028      	b.n	80095aa <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8009558:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01c      	beq.n	800959a <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009566:	3301      	adds	r3, #1
 8009568:	4413      	add	r3, r2
 800956a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 800956c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009570:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 8009574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009576:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8009578:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800957c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8009580:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009584:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8009588:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 800958c:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8009590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009594:	4611      	mov	r1, r2
 8009596:	4618      	mov	r0, r3
 8009598:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80095a2:	441a      	add	r2, r3
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	601a      	str	r2, [r3, #0]
                break;
 80095a8:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d204      	bcs.n	80095c0 <parse_fifo+0x318>
 80095b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f43f ae8a 	beq.w	80092d4 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d031      	beq.n	800962c <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d202      	bcs.n	80095da <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 80095d4:	f06f 0301 	mvn.w	r3, #1
 80095d8:	e02a      	b.n	8009630 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	1ad2      	subs	r2, r2, r3
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01d      	beq.n	800962c <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80095f0:	2300      	movs	r3, #0
 80095f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80095f6:	e013      	b.n	8009620 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009604:	440b      	add	r3, r1
 8009606:	441a      	add	r2, r3
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	6919      	ldr	r1, [r3, #16]
 800960c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009610:	440b      	add	r3, r1
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8009616:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800961a:	3301      	adds	r3, #1
 800961c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009620:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d3e5      	bcc.n	80095f8 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 800962c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009630:	4618      	mov	r0, r3
 8009632:	3764      	adds	r7, #100	; 0x64
 8009634:	46bd      	mov	sp, r7
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	bf00      	nop

0800963c <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 800963c:	b590      	push	{r4, r7, lr}
 800963e:	b0cf      	sub	sp, #316	; 0x13c
 8009640:	af00      	add	r7, sp, #0
 8009642:	4604      	mov	r4, r0
 8009644:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009648:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 800964c:	6001      	str	r1, [r0, #0]
 800964e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8009652:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8009656:	600a      	str	r2, [r1, #0]
 8009658:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800965c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009666:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800966a:	4622      	mov	r2, r4
 800966c:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 8009674:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 81af 	beq.w	80099dc <bhy2_hif_exec_cmd_generic+0x3a0>
 800967e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009682:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <bhy2_hif_exec_cmd_generic+0x60>
 800968c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 81a0 	beq.w	80099dc <bhy2_hif_exec_cmd_generic+0x3a0>
 800969c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d007      	beq.n	80096b4 <bhy2_hif_exec_cmd_generic+0x78>
 80096a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096a8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8194 	beq.w	80099dc <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 80096b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 8188 	beq.w	80099d0 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 80096c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4413      	add	r3, r2
 80096d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 80096d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d007      	beq.n	80096ec <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 80096dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80096e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096e4:	4413      	add	r3, r2
 80096e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80096ea:	e003      	b.n	80096f4 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 80096f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d006      	beq.n	800970e <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 8009700:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009704:	089b      	lsrs	r3, r3, #2
 8009706:	3301      	adds	r3, #1
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800970e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009712:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	b2da      	uxtb	r2, r3
 800971a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800971e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009722:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8009724:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009728:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	b29b      	uxth	r3, r3
 8009732:	b2da      	uxtb	r2, r3
 8009734:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009738:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800973c:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 800973e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009742:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d113      	bne.n	8009774 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 800974c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009750:	089b      	lsrs	r3, r3, #2
 8009752:	b2da      	uxtb	r2, r3
 8009754:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009758:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800975c:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 800975e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009762:	089b      	lsrs	r3, r3, #2
 8009764:	0a1b      	lsrs	r3, r3, #8
 8009766:	b2da      	uxtb	r2, r3
 8009768:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800976c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009770:	70da      	strb	r2, [r3, #3]
 8009772:	e010      	b.n	8009796 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 8009774:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009778:	b2da      	uxtb	r2, r3
 800977a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800977e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009782:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8009784:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009788:	0a1b      	lsrs	r3, r3, #8
 800978a:	b2da      	uxtb	r2, r3
 800978c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009790:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009794:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 8009796:	2304      	movs	r3, #4
 8009798:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 800979c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 80097a4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80097a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80097ac:	4413      	add	r3, r2
 80097ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 80097b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 80097ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80097c4:	429a      	cmp	r2, r3
 80097c6:	f240 80f9 	bls.w	80099bc <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 80097ca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80097d4:	e0f2      	b.n	80099bc <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 80097d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80097da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80097de:	4413      	add	r3, r2
 80097e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d20b      	bcs.n	8009800 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80097e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80097f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80097f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80097fe:	e020      	b.n	8009842 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 8009800:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009804:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009808:	4413      	add	r3, r2
 800980a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800980e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8009816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d006      	beq.n	8009830 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 8009822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009826:	089b      	lsrs	r3, r3, #2
 8009828:	3301      	adds	r3, #1
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8009830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009838:	d903      	bls.n	8009842 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 800983a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800983e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 8009842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009846:	2b00      	cmp	r3, #0
 8009848:	d07e      	beq.n	8009948 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 800984a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800984e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009858:	4413      	add	r3, r2
 800985a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800985e:	429a      	cmp	r2, r3
 8009860:	d315      	bcc.n	800988e <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 8009862:	f107 0214 	add.w	r2, r7, #20
 8009866:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800986a:	18d0      	adds	r0, r2, r3
 800986c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009870:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800987a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800987e:	6812      	ldr	r2, [r2, #0]
 8009880:	4413      	add	r3, r2
 8009882:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009886:	4619      	mov	r1, r3
 8009888:	f013 fa34 	bl	801ccf4 <memcpy>
 800988c:	e05c      	b.n	8009948 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 800988e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009892:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009896:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d93b      	bls.n	8009918 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 80098a0:	f107 0214 	add.w	r2, r7, #20
 80098a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80098a8:	18d0      	adds	r0, r2, r3
 80098aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80098ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80098b8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	18d1      	adds	r1, r2, r3
 80098c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80098c8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	461a      	mov	r2, r3
 80098d2:	f013 fa0f 	bl	801ccf4 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 80098d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80098da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098de:	441a      	add	r2, r3
 80098e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	f107 0214 	add.w	r2, r7, #20
 80098f0:	18d0      	adds	r0, r2, r3
 80098f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009900:	1ad2      	subs	r2, r2, r3
 8009902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009906:	441a      	add	r2, r3
 8009908:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800990c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009910:	6819      	ldr	r1, [r3, #0]
 8009912:	f013 f9ef 	bl	801ccf4 <memcpy>
 8009916:	e017      	b.n	8009948 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8009918:	f107 0214 	add.w	r2, r7, #20
 800991c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009920:	18d0      	adds	r0, r2, r3
 8009922:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009926:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009936:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	4413      	add	r3, r2
 800993e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009942:	4619      	mov	r1, r3
 8009944:	f013 f9d6 	bl	801ccf4 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8009948:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800994c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009950:	4413      	add	r3, r2
 8009952:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009956:	429a      	cmp	r2, r3
 8009958:	d012      	beq.n	8009980 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 800995a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800995e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009962:	4413      	add	r3, r2
 8009964:	f107 0214 	add.w	r2, r7, #20
 8009968:	18d0      	adds	r0, r2, r3
 800996a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800996e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009972:	4413      	add	r3, r2
 8009974:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009978:	461a      	mov	r2, r3
 800997a:	2100      	movs	r1, #0
 800997c:	f013 f9e2 	bl	801cd44 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8009980:	f107 0114 	add.w	r1, r7, #20
 8009984:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009988:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800998c:	2000      	movs	r0, #0
 800998e:	f000 f9b4 	bl	8009cfa <bhy2_hif_set_regs>
 8009992:	4603      	mov	r3, r0
 8009994:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8009998:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 800999c:	2b00      	cmp	r3, #0
 800999e:	d11b      	bne.n	80099d8 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 80099a6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80099aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 80099b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80099bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00f      	beq.n	80099e4 <bhy2_hif_exec_cmd_generic+0x3a8>
 80099c4:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f43f af04 	beq.w	80097d6 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 80099ce:	e009      	b.n	80099e4 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 80099d0:	23fe      	movs	r3, #254	; 0xfe
 80099d2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 80099d6:	e005      	b.n	80099e4 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 80099d8:	bf00      	nop
        if (hif->read_write_len != 0)
 80099da:	e003      	b.n	80099e4 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80099dc:	23ff      	movs	r3, #255	; 0xff
 80099de:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80099e2:	e000      	b.n	80099e6 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 80099e4:	bf00      	nop
    }

    return rslt;
 80099e6:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd90      	pop	{r4, r7, pc}

080099f4 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80099fc:	2300      	movs	r3, #0
 80099fe:	81fb      	strh	r3, [r7, #14]
 8009a00:	e027      	b.n	8009a52 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8009a02:	f107 030c 	add.w	r3, r7, #12
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fab1 	bl	8009f70 <bhy2_hif_get_interrupt_status>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8009a12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d115      	bne.n	8009a46 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8009a1a:	7b3b      	ldrb	r3, [r7, #12]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	737b      	strb	r3, [r7, #13]
                break;
 8009a28:	e017      	b.n	8009a5a <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009a30:	f000 f99b 	bl	8009d6a <bhy2_hif_delay_us>
 8009a34:	4603      	mov	r3, r0
 8009a36:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8009a38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8009a40:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a44:	e00b      	b.n	8009a5e <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8009a46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a4a:	e008      	b.n	8009a5e <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8009a4c:	89fb      	ldrh	r3, [r7, #14]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	81fb      	strh	r3, [r7, #14]
 8009a52:	89fb      	ldrh	r3, [r7, #14]
 8009a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a58:	d3d3      	bcc.n	8009a02 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8009a5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8009a6e:	2300      	movs	r3, #0
 8009a70:	81fb      	strh	r3, [r7, #14]
 8009a72:	e02f      	b.n	8009ad4 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a7a:	f000 f976 	bl	8009d6a <bhy2_hif_delay_us>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8009a82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	da02      	bge.n	8009a90 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8009a8a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a8e:	e02d      	b.n	8009aec <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8009a90:	f107 010c 	add.w	r1, r7, #12
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	2025      	movs	r0, #37	; 0x25
 8009a9a:	f000 f8f6 	bl	8009c8a <bhy2_hif_get_regs>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8009aa2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	da02      	bge.n	8009ab0 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8009aaa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009aae:	e01d      	b.n	8009aec <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8009ab0:	7b3b      	ldrb	r3, [r7, #12]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <bhy2_hif_check_boot_status_ram+0x68>
 8009aba:	7b3b      	ldrb	r3, [r7, #12]
 8009abc:	f003 0320 	and.w	r3, r3, #32
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8009ac4:	7b3b      	ldrb	r3, [r7, #12]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d006      	beq.n	8009adc <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8009ace:	89fb      	ldrh	r3, [r7, #14]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	81fb      	strh	r3, [r7, #14]
 8009ad4:	89fb      	ldrh	r3, [r7, #14]
 8009ad6:	2b63      	cmp	r3, #99	; 0x63
 8009ad8:	d9cc      	bls.n	8009a74 <bhy2_hif_check_boot_status_ram+0xe>
 8009ada:	e000      	b.n	8009ade <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8009adc:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8009ade:	89fb      	ldrh	r3, [r7, #14]
 8009ae0:	2b64      	cmp	r3, #100	; 0x64
 8009ae2:	d102      	bne.n	8009aea <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8009ae4:	f06f 0304 	mvn.w	r3, #4
 8009ae8:	e000      	b.n	8009aec <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08a      	sub	sp, #40	; 0x28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d072      	beq.n	8009bf6 <bhy2_hif_get_fifo+0x102>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d06f      	beq.n	8009bf6 <bhy2_hif_get_fifo+0x102>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d06c      	beq.n	8009bf6 <bhy2_hif_get_fifo+0x102>
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d069      	beq.n	8009bf6 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8009b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d114      	bne.n	8009b5a <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8009b30:	f107 0114 	add.w	r1, r7, #20
 8009b34:	7bf8      	ldrb	r0, [r7, #15]
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	2202      	movs	r2, #2
 8009b3a:	f000 f8a6 	bl	8009c8a <bhy2_hif_get_regs>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8009b44:	7d3b      	ldrb	r3, [r7, #20]
 8009b46:	b21a      	sxth	r2, r3
 8009b48:	7d7b      	ldrb	r3, [r7, #21]
 8009b4a:	021b      	lsls	r3, r3, #8
 8009b4c:	b21b      	sxth	r3, r3
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	b21b      	sxth	r3, r3
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	461a      	mov	r2, r3
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d04d      	beq.n	8009bfe <bhy2_hif_get_fifo+0x10a>
 8009b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d149      	bne.n	8009bfe <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d203      	bcs.n	8009b7c <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e003      	b.n	8009b84 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	623b      	str	r3, [r7, #32]
            offset = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8009b8e:	e016      	b.n	8009bbe <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	18d1      	adds	r1, r2, r3
 8009b96:	7bf8      	ldrb	r0, [r7, #15]
 8009b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	f000 f875 	bl	8009c8a <bhy2_hif_get_regs>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8009ba6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10c      	bne.n	8009bc8 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8009bae:	6a3a      	ldr	r2, [r7, #32]
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8009bb6:	69fa      	ldr	r2, [r7, #28]
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	4413      	add	r3, r2
 8009bbc:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8009bbe:	6a3a      	ldr	r2, [r7, #32]
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d8e4      	bhi.n	8009b90 <bhy2_hif_get_fifo+0x9c>
 8009bc6:	e000      	b.n	8009bca <bhy2_hif_get_fifo+0xd6>
                    break;
 8009bc8:	bf00      	nop
            }

            if (read_len != 0)
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00a      	beq.n	8009be6 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	18d1      	adds	r1, r2, r3
 8009bd6:	7bf8      	ldrb	r0, [r7, #15]
 8009bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bda:	6a3a      	ldr	r2, [r7, #32]
 8009bdc:	f000 f855 	bl	8009c8a <bhy2_hif_get_regs>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009bf4:	e003      	b.n	8009bfe <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009bf6:	23ff      	movs	r3, #255	; 0xff
 8009bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bfc:	e000      	b.n	8009c00 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009bfe:	bf00      	nop
    }

    return rslt;
 8009c00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3728      	adds	r7, #40	; 0x28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	607a      	str	r2, [r7, #4]
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d027      	beq.n	8009c76 <bhy2_hif_init+0x6a>
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d024      	beq.n	8009c76 <bhy2_hif_init+0x6a>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d021      	beq.n	8009c76 <bhy2_hif_init+0x6a>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01e      	beq.n	8009c76 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8009c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4e:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	7bfa      	ldrb	r2, [r7, #15]
 8009c54:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	f003 0303 	and.w	r3, r3, #3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	089b      	lsrs	r3, r3, #2
 8009c64:	3301      	adds	r3, #1
 8009c66:	009a      	lsls	r2, r3, #2
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009c6c:	e005      	b.n	8009c7a <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	6a3a      	ldr	r2, [r7, #32]
 8009c72:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009c74:	e001      	b.n	8009c7a <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009c76:	23ff      	movs	r3, #255	; 0xff
 8009c78:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009c8a:	b590      	push	{r4, r7, lr}
 8009c8c:	b087      	sub	sp, #28
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d022      	beq.n	8009cea <bhy2_hif_get_regs+0x60>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01e      	beq.n	8009cea <bhy2_hif_get_regs+0x60>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01b      	beq.n	8009cea <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	7b1b      	ldrb	r3, [r3, #12]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d103      	bne.n	8009cc2 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cc0:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	681c      	ldr	r4, [r3, #0]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	7bf8      	ldrb	r0, [r7, #15]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	47a0      	blx	r4
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009ce4:	23fd      	movs	r3, #253	; 0xfd
 8009ce6:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009ce8:	e001      	b.n	8009cee <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009cea:	23ff      	movs	r3, #255	; 0xff
 8009cec:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd90      	pop	{r4, r7, pc}

08009cfa <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009cfa:	b590      	push	{r4, r7, lr}
 8009cfc:	b087      	sub	sp, #28
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d022      	beq.n	8009d5a <bhy2_hif_set_regs+0x60>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01e      	beq.n	8009d5a <bhy2_hif_set_regs+0x60>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01b      	beq.n	8009d5a <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	7b1b      	ldrb	r3, [r3, #12]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d103      	bne.n	8009d32 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d30:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685c      	ldr	r4, [r3, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	7bf8      	ldrb	r0, [r7, #15]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	47a0      	blx	r4
 8009d42:	4603      	mov	r3, r0
 8009d44:	461a      	mov	r2, r3
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009d54:	23fd      	movs	r3, #253	; 0xfd
 8009d56:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009d58:	e001      	b.n	8009d5e <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d5a:	23ff      	movs	r3, #255	; 0xff
 8009d5c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	371c      	adds	r7, #28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd90      	pop	{r4, r7, pc}

08009d6a <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <bhy2_hif_delay_us+0x2c>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d007      	beq.n	8009d96 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	6912      	ldr	r2, [r2, #16]
 8009d8e:	4611      	mov	r1, r2
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	4798      	blx	r3
 8009d94:	e001      	b.n	8009d9a <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d96:	23ff      	movs	r3, #255	; 0xff
 8009d98:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b088      	sub	sp, #32
 8009daa:	af04      	add	r7, sp, #16
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	4603      	mov	r3, r0
 8009db4:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8009db6:	89f8      	ldrh	r0, [r7, #14]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	9302      	str	r3, [sp, #8]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	f7ff fc37 	bl	800963c <bhy2_hif_exec_cmd_generic>
 8009dce:	4603      	mov	r3, r0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	4603      	mov	r3, r0
 8009de6:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d06e      	beq.n	8009ed4 <bhy2_hif_get_parameter+0xfc>
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d06b      	beq.n	8009ed4 <bhy2_hif_get_parameter+0xfc>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d068      	beq.n	8009ed4 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009e08:	f107 0113 	add.w	r1, r7, #19
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	2006      	movs	r0, #6
 8009e12:	f7ff ff3a 	bl	8009c8a <bhy2_hif_get_regs>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d15b      	bne.n	8009eda <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8009e22:	7cfb      	ldrb	r3, [r7, #19]
 8009e24:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8009e26:	7cfb      	ldrb	r3, [r7, #19]
 8009e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8009e30:	7cfb      	ldrb	r3, [r7, #19]
 8009e32:	7dba      	ldrb	r2, [r7, #22]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d008      	beq.n	8009e4a <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009e38:	f107 0113 	add.w	r1, r7, #19
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	2006      	movs	r0, #6
 8009e42:	f7ff ff5a 	bl	8009cfa <bhy2_hif_set_regs>
 8009e46:	4603      	mov	r3, r0
 8009e48:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8009e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d143      	bne.n	8009eda <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8009e52:	89fb      	ldrh	r3, [r7, #14]
 8009e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e58:	b298      	uxth	r0, r3
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2100      	movs	r1, #0
 8009e60:	f7ff ffa1 	bl	8009da6 <bhy2_hif_exec_cmd>
 8009e64:	4603      	mov	r3, r0
 8009e66:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8009e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d134      	bne.n	8009eda <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8009e70:	6a38      	ldr	r0, [r7, #32]
 8009e72:	f7ff fdbf 	bl	80099f4 <bhy2_wait_status_ready>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8009e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d12b      	bne.n	8009eda <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8009e82:	f107 0014 	add.w	r0, r7, #20
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	f000 f94b 	bl	800a12a <bhy2_hif_get_status_fifo>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8009e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d11c      	bne.n	8009eda <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8009ea0:	7cfb      	ldrb	r3, [r7, #19]
 8009ea2:	7dba      	ldrb	r2, [r7, #22]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d00a      	beq.n	8009ebe <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8009ea8:	7dbb      	ldrb	r3, [r7, #22]
 8009eaa:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009eac:	f107 0113 	add.w	r1, r7, #19
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	2006      	movs	r0, #6
 8009eb6:	f7ff ff20 	bl	8009cfa <bhy2_hif_set_regs>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8009ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d109      	bne.n	8009eda <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8009ec6:	8abb      	ldrh	r3, [r7, #20]
 8009ec8:	89fa      	ldrh	r2, [r7, #14]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d005      	beq.n	8009eda <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8009ece:	23fb      	movs	r3, #251	; 0xfb
 8009ed0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009ed2:	e002      	b.n	8009eda <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009ed4:	23ff      	movs	r3, #255	; 0xff
 8009ed6:	75fb      	strb	r3, [r7, #23]
 8009ed8:	e000      	b.n	8009edc <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8009eda:	bf00      	nop
    }

    return rslt;
 8009edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	201c      	movs	r0, #28
 8009efa:	f7ff fec6 	bl	8009c8a <bhy2_hif_get_regs>
 8009efe:	4603      	mov	r3, r0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d013      	beq.n	8009f40 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8009f18:	f107 010c 	add.w	r1, r7, #12
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	2020      	movs	r0, #32
 8009f22:	f7ff feb2 	bl	8009c8a <bhy2_hif_get_regs>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8009f2a:	7b3b      	ldrb	r3, [r7, #12]
 8009f2c:	b21a      	sxth	r2, r3
 8009f2e:	7b7b      	ldrb	r3, [r7, #13]
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	4313      	orrs	r3, r2
 8009f36:	b21b      	sxth	r3, r3
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	801a      	strh	r2, [r3, #0]
 8009f3e:	e001      	b.n	8009f44 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009f40:	23ff      	movs	r3, #255	; 0xff
 8009f42:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	2025      	movs	r0, #37	; 0x25
 8009f62:	f7ff fe92 	bl	8009c8a <bhy2_hif_get_regs>
 8009f66:	4603      	mov	r3, r0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	202d      	movs	r0, #45	; 0x2d
 8009f82:	f7ff fe82 	bl	8009c8a <bhy2_hif_get_regs>
 8009f86:	4603      	mov	r3, r0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8009fa0:	230f      	movs	r3, #15
 8009fa2:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8009fa4:	f107 010b 	add.w	r1, r7, #11
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	2014      	movs	r0, #20
 8009fae:	f7ff fea4 	bl	8009cfa <bhy2_hif_set_regs>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8009fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d12b      	bne.n	800a016 <bhy2_hif_reset+0x86>
    {
        while (count--)
 8009fbe:	e01c      	b.n	8009ffa <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8009fc0:	6879      	ldr	r1, [r7, #4]
 8009fc2:	f242 7010 	movw	r0, #10000	; 0x2710
 8009fc6:	f7ff fed0 	bl	8009d6a <bhy2_hif_delay_us>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8009fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d111      	bne.n	8009ffa <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8009fd6:	f107 010a 	add.w	r1, r7, #10
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	2025      	movs	r0, #37	; 0x25
 8009fe0:	f7ff fe53 	bl	8009c8a <bhy2_hif_get_regs>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8009fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d104      	bne.n	8009ffa <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8009ff0:	7abb      	ldrb	r3, [r7, #10]
 8009ff2:	f003 0310 	and.w	r3, r3, #16
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d105      	bne.n	800a006 <bhy2_hif_reset+0x76>
        while (count--)
 8009ffa:	89bb      	ldrh	r3, [r7, #12]
 8009ffc:	1e5a      	subs	r2, r3, #1
 8009ffe:	81ba      	strh	r2, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1dd      	bne.n	8009fc0 <bhy2_hif_reset+0x30>
 800a004:	e000      	b.n	800a008 <bhy2_hif_reset+0x78>
                    {
                        break;
 800a006:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 800a008:	7abb      	ldrb	r3, [r7, #10]
 800a00a:	f003 0310 	and.w	r3, r3, #16
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 800a012:	23fb      	movs	r3, #251	; 0xfb
 800a014:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800a016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d027      	beq.n	800a088 <bhy2_hif_upload_firmware_to_ram+0x66>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d024      	beq.n	800a088 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	b21a      	sxth	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3301      	adds	r3, #1
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	021b      	lsls	r3, r3, #8
 800a04c:	b21b      	sxth	r3, r3
 800a04e:	4313      	orrs	r3, r2
 800a050:	b21b      	sxth	r3, r3
 800a052:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 800a054:	8abb      	ldrh	r3, [r7, #20]
 800a056:	f246 622b 	movw	r2, #26155	; 0x662b
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d002      	beq.n	800a064 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 800a05e:	23fc      	movs	r3, #252	; 0xfc
 800a060:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 800a062:	e014      	b.n	800a08e <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	68f9      	ldr	r1, [r7, #12]
 800a06a:	2002      	movs	r0, #2
 800a06c:	f7ff fe9b 	bl	8009da6 <bhy2_hif_exec_cmd>
 800a070:	4603      	mov	r3, r0
 800a072:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 800a074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d108      	bne.n	800a08e <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff fcf2 	bl	8009a66 <bhy2_hif_check_boot_status_ram>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 800a086:	e002      	b.n	800a08e <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a088:	23ff      	movs	r3, #255	; 0xff
 800a08a:	75fb      	strb	r3, [r7, #23]
 800a08c:	e000      	b.n	800a090 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 800a08e:	bf00      	nop
    }

    return rslt;
 800a090:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	2003      	movs	r0, #3
 800a0ac:	f7ff fe7b 	bl	8009da6 <bhy2_hif_exec_cmd>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 800a0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d104      	bne.n	800a0c6 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff fcd2 	bl	8009a66 <bhy2_hif_check_boot_status_ram>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af02      	add	r7, sp, #8
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
 800a0de:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	f7ff fd00 	bl	8009af4 <bhy2_hif_get_fifo>
 800a0f4:	4603      	mov	r3, r0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b086      	sub	sp, #24
 800a102:	af02      	add	r7, sp, #8
 800a104:	60f8      	str	r0, [r7, #12]
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	607a      	str	r2, [r7, #4]
 800a10a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	2002      	movs	r0, #2
 800a11c:	f7ff fcea 	bl	8009af4 <bhy2_hif_get_fifo>
 800a120:	4603      	mov	r3, r0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b086      	sub	sp, #24
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	607a      	str	r2, [r7, #4]
 800a136:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 800a138:	f107 0110 	add.w	r1, r7, #16
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	2204      	movs	r2, #4
 800a140:	2003      	movs	r0, #3
 800a142:	f7ff fda2 	bl	8009c8a <bhy2_hif_get_regs>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 800a14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d130      	bne.n	800a1b4 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 800a152:	7c3b      	ldrb	r3, [r7, #16]
 800a154:	b21a      	sxth	r2, r3
 800a156:	f107 0310 	add.w	r3, r7, #16
 800a15a:	3301      	adds	r3, #1
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	b21b      	sxth	r3, r3
 800a162:	4313      	orrs	r3, r2
 800a164:	b21b      	sxth	r3, r3
 800a166:	b29a      	uxth	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 800a16c:	7cbb      	ldrb	r3, [r7, #18]
 800a16e:	b21a      	sxth	r2, r3
 800a170:	f107 0310 	add.w	r3, r7, #16
 800a174:	3302      	adds	r3, #2
 800a176:	3301      	adds	r3, #1
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	b21b      	sxth	r3, r3
 800a17e:	4313      	orrs	r3, r2
 800a180:	b21b      	sxth	r3, r3
 800a182:	b29b      	uxth	r3, r3
 800a184:	461a      	mov	r2, r3
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d010      	beq.n	800a1b4 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d202      	bcs.n	800a1a2 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 800a19c:	23fa      	movs	r3, #250	; 0xfa
 800a19e:	75fb      	strb	r3, [r7, #23]
 800a1a0:	e008      	b.n	800a1b4 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	68b9      	ldr	r1, [r7, #8]
 800a1aa:	2003      	movs	r0, #3
 800a1ac:	f7ff fd6d 	bl	8009c8a <bhy2_hif_get_regs>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800a1b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	2003      	movs	r0, #3
 800a1de:	f7ff fc89 	bl	8009af4 <bhy2_hif_get_fifo>
 800a1e2:	4603      	mov	r3, r0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	ed87 0a02 	vstr	s0, [r7, #8]
 800a1f8:	6079      	str	r1, [r7, #4]
 800a1fa:	603a      	str	r2, [r7, #0]
 800a1fc:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	0a1b      	lsrs	r3, r3, #8
 800a210:	b2db      	uxtb	r3, r3
 800a212:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	0c1b      	lsrs	r3, r3, #16
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	0e1b      	lsrs	r3, r3, #24
 800a220:	b2db      	uxtb	r3, r3
 800a222:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	b2db      	uxtb	r3, r3
 800a228:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	0c1b      	lsrs	r3, r3, #16
 800a236:	b2db      	uxtb	r3, r3
 800a238:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800a23a:	f107 0118 	add.w	r1, r7, #24
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2208      	movs	r2, #8
 800a242:	200d      	movs	r0, #13
 800a244:	f7ff fdaf 	bl	8009da6 <bhy2_hif_exec_cmd>
 800a248:	4603      	mov	r3, r0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b090      	sub	sp, #64	; 0x40
 800a256:	af02      	add	r7, sp, #8
 800a258:	4603      	mov	r3, r0
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
 800a25e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 80da 	beq.w	800a41c <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	2bf5      	cmp	r3, #245	; 0xf5
 800a26c:	d903      	bls.n	800a276 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 800a26e:	23fe      	movs	r3, #254	; 0xfe
 800a270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a274:	e0d5      	b.n	800a422 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a27e:	b298      	uxth	r0, r3
 800a280:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a284:	f107 0114 	add.w	r1, r7, #20
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	4613      	mov	r3, r2
 800a28e:	221c      	movs	r2, #28
 800a290:	f7ff fda2 	bl	8009dd8 <bhy2_hif_get_parameter>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 800a29a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f040 80bf 	bne.w	800a422 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	2b1c      	cmp	r3, #28
 800a2a8:	d003      	beq.n	800a2b2 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 800a2aa:	23fe      	movs	r3, #254	; 0xfe
 800a2ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a2b0:	e0b7      	b.n	800a422 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 800a2b2:	7d3a      	ldrb	r2, [r7, #20]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 800a2b8:	7d7a      	ldrb	r2, [r7, #21]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 800a2be:	7dba      	ldrb	r2, [r7, #22]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 800a2c4:	7dfa      	ldrb	r2, [r7, #23]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800a2ca:	7e3a      	ldrb	r2, [r7, #24]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 800a2d0:	7e7a      	ldrb	r2, [r7, #25]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 800a2d6:	7eba      	ldrb	r2, [r7, #26]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800a2dc:	7efa      	ldrb	r2, [r7, #27]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 800a2e2:	7f3a      	ldrb	r2, [r7, #28]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 800a2e8:	7f7a      	ldrb	r2, [r7, #29]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800a2ee:	7fba      	ldrb	r2, [r7, #30]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 800a2f4:	7ffa      	ldrb	r2, [r7, #31]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800a2fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 800a302:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800a30a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 800a312:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800a31a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 800a322:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800a32a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 800a332:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800a33a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 800a342:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 800a34a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 800a352:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 800a35a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	791b      	ldrb	r3, [r3, #4]
 800a366:	b21a      	sxth	r2, r3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	795b      	ldrb	r3, [r3, #5]
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	b21b      	sxth	r3, r3
 800a370:	4313      	orrs	r3, r2
 800a372:	b21b      	sxth	r3, r3
 800a374:	b29a      	uxth	r2, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	799b      	ldrb	r3, [r3, #6]
 800a37e:	b21a      	sxth	r2, r3
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	79db      	ldrb	r3, [r3, #7]
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	b21b      	sxth	r3, r3
 800a388:	4313      	orrs	r3, r2
 800a38a:	b21b      	sxth	r3, r3
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	7a1b      	ldrb	r3, [r3, #8]
 800a396:	461a      	mov	r2, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	7a5b      	ldrb	r3, [r3, #9]
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	7a9b      	ldrb	r3, [r3, #10]
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	7adb      	ldrb	r3, [r3, #11]
 800a3ac:	061b      	lsls	r3, r3, #24
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	7b1b      	ldrb	r3, [r3, #12]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	7b5b      	ldrb	r3, [r3, #13]
 800a3be:	021b      	lsls	r3, r3, #8
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	7b9b      	ldrb	r3, [r3, #14]
 800a3c6:	041b      	lsls	r3, r3, #16
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	7bdb      	ldrb	r3, [r3, #15]
 800a3ce:	061b      	lsls	r3, r3, #24
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	7c1b      	ldrb	r3, [r3, #16]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	7c5b      	ldrb	r3, [r3, #17]
 800a3e0:	021b      	lsls	r3, r3, #8
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	7c9b      	ldrb	r3, [r3, #18]
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	7cdb      	ldrb	r3, [r3, #19]
 800a3f0:	061b      	lsls	r3, r3, #24
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	7e1b      	ldrb	r3, [r3, #24]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	7e5b      	ldrb	r3, [r3, #25]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	431a      	orrs	r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	7e9b      	ldrb	r3, [r3, #26]
 800a40a:	041b      	lsls	r3, r3, #16
 800a40c:	431a      	orrs	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	7edb      	ldrb	r3, [r3, #27]
 800a412:	061b      	lsls	r3, r3, #24
 800a414:	431a      	orrs	r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	619a      	str	r2, [r3, #24]
 800a41a:	e002      	b.n	800a422 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a41c:	23ff      	movs	r3, #255	; 0xff
 800a41e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800a422:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a426:	4618      	mov	r0, r3
 800a428:	3738      	adds	r7, #56	; 0x38
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	b21a      	sxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3301      	adds	r3, #1
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	b21b      	sxth	r3, r3
 800a448:	4313      	orrs	r3, r2
 800a44a:	b21a      	sxth	r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3302      	adds	r3, #2
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b21a      	sxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3303      	adds	r3, #3
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	b21b      	sxth	r3, r3
 800a462:	4313      	orrs	r3, r2
 800a464:	b21a      	sxth	r2, r3
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3304      	adds	r3, #4
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	b21a      	sxth	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3305      	adds	r3, #5
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	b21b      	sxth	r3, r3
 800a47c:	4313      	orrs	r3, r2
 800a47e:	b21a      	sxth	r2, r3
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3306      	adds	r3, #6
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	b21a      	sxth	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3307      	adds	r3, #7
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	b21b      	sxth	r3, r3
 800a496:	4313      	orrs	r3, r2
 800a498:	b21a      	sxth	r2, r3
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	b21a      	sxth	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3309      	adds	r3, #9
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	b21b      	sxth	r3, r3
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	b21b      	sxth	r3, r3
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	811a      	strh	r2, [r3, #8]
}
 800a4ba:	bf00      	nop
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
	...

0800a4c8 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800a4cc:	4b12      	ldr	r3, [pc, #72]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4ce:	4a13      	ldr	r2, [pc, #76]	; (800a51c <MX_COMP2_Init+0x54>)
 800a4d0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800a4d2:	4b11      	ldr	r3, [pc, #68]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a4d8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800a4da:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a4e0:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800a4e6:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800a4f2:	4b09      	ldr	r3, [pc, #36]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800a4f8:	4b07      	ldr	r3, [pc, #28]	; (800a518 <MX_COMP2_Init+0x50>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800a4fe:	4b06      	ldr	r3, [pc, #24]	; (800a518 <MX_COMP2_Init+0x50>)
 800a500:	2211      	movs	r2, #17
 800a502:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800a504:	4804      	ldr	r0, [pc, #16]	; (800a518 <MX_COMP2_Init+0x50>)
 800a506:	f001 fd01 	bl	800bf0c <HAL_COMP_Init>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 800a510:	f000 fc0c 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800a514:	bf00      	nop
 800a516:	bd80      	pop	{r7, pc}
 800a518:	24001498 	.word	0x24001498
 800a51c:	58003810 	.word	0x58003810

0800a520 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08a      	sub	sp, #40	; 0x28
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a528:	f107 0314 	add.w	r3, r7, #20
 800a52c:	2200      	movs	r2, #0
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	605a      	str	r2, [r3, #4]
 800a532:	609a      	str	r2, [r3, #8]
 800a534:	60da      	str	r2, [r3, #12]
 800a536:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a1c      	ldr	r2, [pc, #112]	; (800a5b0 <HAL_COMP_MspInit+0x90>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d132      	bne.n	800a5a8 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800a542:	4b1c      	ldr	r3, [pc, #112]	; (800a5b4 <HAL_COMP_MspInit+0x94>)
 800a544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a548:	4a1a      	ldr	r2, [pc, #104]	; (800a5b4 <HAL_COMP_MspInit+0x94>)
 800a54a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a54e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a552:	4b18      	ldr	r3, [pc, #96]	; (800a5b4 <HAL_COMP_MspInit+0x94>)
 800a554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a560:	4b14      	ldr	r3, [pc, #80]	; (800a5b4 <HAL_COMP_MspInit+0x94>)
 800a562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a566:	4a13      	ldr	r2, [pc, #76]	; (800a5b4 <HAL_COMP_MspInit+0x94>)
 800a568:	f043 0310 	orr.w	r3, r3, #16
 800a56c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a570:	4b10      	ldr	r3, [pc, #64]	; (800a5b4 <HAL_COMP_MspInit+0x94>)
 800a572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a576:	f003 0310 	and.w	r3, r3, #16
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a57e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a584:	2303      	movs	r3, #3
 800a586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a588:	2300      	movs	r3, #0
 800a58a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	4619      	mov	r1, r3
 800a592:	4809      	ldr	r0, [pc, #36]	; (800a5b8 <HAL_COMP_MspInit+0x98>)
 800a594:	f004 ffd0 	bl	800f538 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	2089      	movs	r0, #137	; 0x89
 800a59e:	f001 ff78 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800a5a2:	2089      	movs	r0, #137	; 0x89
 800a5a4:	f001 ff8f 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 800a5a8:	bf00      	nop
 800a5aa:	3728      	adds	r7, #40	; 0x28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	58003810 	.word	0x58003810
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	58021000 	.word	0x58021000

0800a5bc <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	; 0x28
 800a5c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a5c2:	1d3b      	adds	r3, r7, #4
 800a5c4:	2224      	movs	r2, #36	; 0x24
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f012 fbbb 	bl	801cd44 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a5ce:	4b12      	ldr	r3, [pc, #72]	; (800a618 <MX_DAC1_Init+0x5c>)
 800a5d0:	4a12      	ldr	r2, [pc, #72]	; (800a61c <MX_DAC1_Init+0x60>)
 800a5d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a5d4:	4810      	ldr	r0, [pc, #64]	; (800a618 <MX_DAC1_Init+0x5c>)
 800a5d6:	f001 ff90 	bl	800c4fa <HAL_DAC_Init>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a5e0:	f000 fba4 	bl	800ad2c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a5f8:	1d3b      	adds	r3, r7, #4
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4806      	ldr	r0, [pc, #24]	; (800a618 <MX_DAC1_Init+0x5c>)
 800a600:	f002 f814 	bl	800c62c <HAL_DAC_ConfigChannel>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800a60a:	f000 fb8f 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a60e:	bf00      	nop
 800a610:	3728      	adds	r7, #40	; 0x28
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	240014c4 	.word	0x240014c4
 800a61c:	40007400 	.word	0x40007400

0800a620 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a0b      	ldr	r2, [pc, #44]	; (800a65c <HAL_DAC_MspInit+0x3c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d10e      	bne.n	800a650 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a632:	4b0b      	ldr	r3, [pc, #44]	; (800a660 <HAL_DAC_MspInit+0x40>)
 800a634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a638:	4a09      	ldr	r2, [pc, #36]	; (800a660 <HAL_DAC_MspInit+0x40>)
 800a63a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a63e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a642:	4b07      	ldr	r3, [pc, #28]	; (800a660 <HAL_DAC_MspInit+0x40>)
 800a644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800a650:	bf00      	nop
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	40007400 	.word	0x40007400
 800a660:	58024400 	.word	0x58024400

0800a664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a66a:	4b19      	ldr	r3, [pc, #100]	; (800a6d0 <MX_DMA_Init+0x6c>)
 800a66c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a670:	4a17      	ldr	r2, [pc, #92]	; (800a6d0 <MX_DMA_Init+0x6c>)
 800a672:	f043 0301 	orr.w	r3, r3, #1
 800a676:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a67a:	4b15      	ldr	r3, [pc, #84]	; (800a6d0 <MX_DMA_Init+0x6c>)
 800a67c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	607b      	str	r3, [r7, #4]
 800a686:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a688:	2200      	movs	r2, #0
 800a68a:	2100      	movs	r1, #0
 800a68c:	200b      	movs	r0, #11
 800a68e:	f001 ff00 	bl	800c492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a692:	200b      	movs	r0, #11
 800a694:	f001 ff17 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a698:	2200      	movs	r2, #0
 800a69a:	2100      	movs	r1, #0
 800a69c:	200c      	movs	r0, #12
 800a69e:	f001 fef8 	bl	800c492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a6a2:	200c      	movs	r0, #12
 800a6a4:	f001 ff0f 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	200f      	movs	r0, #15
 800a6ae:	f001 fef0 	bl	800c492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a6b2:	200f      	movs	r0, #15
 800a6b4:	f001 ff07 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	2010      	movs	r0, #16
 800a6be:	f001 fee8 	bl	800c492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a6c2:	2010      	movs	r0, #16
 800a6c4:	f001 feff 	bl	800c4c6 <HAL_NVIC_EnableIRQ>

}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	58024400 	.word	0x58024400

0800a6d4 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08a      	sub	sp, #40	; 0x28
 800a6d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6da:	f107 0314 	add.w	r3, r7, #20
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	605a      	str	r2, [r3, #4]
 800a6e4:	609a      	str	r2, [r3, #8]
 800a6e6:	60da      	str	r2, [r3, #12]
 800a6e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6ea:	4b3b      	ldr	r3, [pc, #236]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a6ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6f0:	4a39      	ldr	r2, [pc, #228]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a6f2:	f043 0304 	orr.w	r3, r3, #4
 800a6f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6fa:	4b37      	ldr	r3, [pc, #220]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a6fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	613b      	str	r3, [r7, #16]
 800a706:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a708:	4b33      	ldr	r3, [pc, #204]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a70a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a70e:	4a32      	ldr	r2, [pc, #200]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a710:	f043 0301 	orr.w	r3, r3, #1
 800a714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a718:	4b2f      	ldr	r3, [pc, #188]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a71a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a726:	4b2c      	ldr	r3, [pc, #176]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a72c:	4a2a      	ldr	r2, [pc, #168]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a72e:	f043 0310 	orr.w	r3, r3, #16
 800a732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a736:	4b28      	ldr	r3, [pc, #160]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a73c:	f003 0310 	and.w	r3, r3, #16
 800a740:	60bb      	str	r3, [r7, #8]
 800a742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a744:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a74a:	4a23      	ldr	r2, [pc, #140]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a74c:	f043 0302 	orr.w	r3, r3, #2
 800a750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a754:	4b20      	ldr	r3, [pc, #128]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	607b      	str	r3, [r7, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a762:	4b1d      	ldr	r3, [pc, #116]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a768:	4a1b      	ldr	r2, [pc, #108]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a76a:	f043 0308 	orr.w	r3, r3, #8
 800a76e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a772:	4b19      	ldr	r3, [pc, #100]	; (800a7d8 <MX_GPIO_Init+0x104>)
 800a774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a778:	f003 0308 	and.w	r3, r3, #8
 800a77c:	603b      	str	r3, [r7, #0]
 800a77e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 800a780:	2200      	movs	r2, #0
 800a782:	2101      	movs	r1, #1
 800a784:	4815      	ldr	r0, [pc, #84]	; (800a7dc <MX_GPIO_Init+0x108>)
 800a786:	f005 f887 	bl	800f898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800a78a:	2200      	movs	r2, #0
 800a78c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a790:	4813      	ldr	r0, [pc, #76]	; (800a7e0 <MX_GPIO_Init+0x10c>)
 800a792:	f005 f881 	bl	800f898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 800a796:	2301      	movs	r3, #1
 800a798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a79a:	2301      	movs	r3, #1
 800a79c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a79e:	2302      	movs	r3, #2
 800a7a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 800a7a6:	f107 0314 	add.w	r3, r7, #20
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	480b      	ldr	r0, [pc, #44]	; (800a7dc <MX_GPIO_Init+0x108>)
 800a7ae:	f004 fec3 	bl	800f538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800a7b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a7bc:	2302      	movs	r3, #2
 800a7be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800a7c4:	f107 0314 	add.w	r3, r7, #20
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <MX_GPIO_Init+0x10c>)
 800a7cc:	f004 feb4 	bl	800f538 <HAL_GPIO_Init>

}
 800a7d0:	bf00      	nop
 800a7d2:	3728      	adds	r7, #40	; 0x28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	58020800 	.word	0x58020800
 800a7e0:	58021000 	.word	0x58021000

0800a7e4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a7e8:	4b1b      	ldr	r3, [pc, #108]	; (800a858 <MX_I2C2_Init+0x74>)
 800a7ea:	4a1c      	ldr	r2, [pc, #112]	; (800a85c <MX_I2C2_Init+0x78>)
 800a7ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800a7ee:	4b1a      	ldr	r3, [pc, #104]	; (800a858 <MX_I2C2_Init+0x74>)
 800a7f0:	4a1b      	ldr	r2, [pc, #108]	; (800a860 <MX_I2C2_Init+0x7c>)
 800a7f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a7f4:	4b18      	ldr	r3, [pc, #96]	; (800a858 <MX_I2C2_Init+0x74>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a7fa:	4b17      	ldr	r3, [pc, #92]	; (800a858 <MX_I2C2_Init+0x74>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a800:	4b15      	ldr	r3, [pc, #84]	; (800a858 <MX_I2C2_Init+0x74>)
 800a802:	2200      	movs	r2, #0
 800a804:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a806:	4b14      	ldr	r3, [pc, #80]	; (800a858 <MX_I2C2_Init+0x74>)
 800a808:	2200      	movs	r2, #0
 800a80a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a80c:	4b12      	ldr	r3, [pc, #72]	; (800a858 <MX_I2C2_Init+0x74>)
 800a80e:	2200      	movs	r2, #0
 800a810:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a812:	4b11      	ldr	r3, [pc, #68]	; (800a858 <MX_I2C2_Init+0x74>)
 800a814:	2200      	movs	r2, #0
 800a816:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a818:	4b0f      	ldr	r3, [pc, #60]	; (800a858 <MX_I2C2_Init+0x74>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a81e:	480e      	ldr	r0, [pc, #56]	; (800a858 <MX_I2C2_Init+0x74>)
 800a820:	f005 f854 	bl	800f8cc <HAL_I2C_Init>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a82a:	f000 fa7f 	bl	800ad2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a82e:	2100      	movs	r1, #0
 800a830:	4809      	ldr	r0, [pc, #36]	; (800a858 <MX_I2C2_Init+0x74>)
 800a832:	f005 ff60 	bl	80106f6 <HAL_I2CEx_ConfigAnalogFilter>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a83c:	f000 fa76 	bl	800ad2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a840:	2100      	movs	r1, #0
 800a842:	4805      	ldr	r0, [pc, #20]	; (800a858 <MX_I2C2_Init+0x74>)
 800a844:	f005 ffa2 	bl	801078c <HAL_I2CEx_ConfigDigitalFilter>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a84e:	f000 fa6d 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a852:	bf00      	nop
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	240014d8 	.word	0x240014d8
 800a85c:	40005800 	.word	0x40005800
 800a860:	00b03fdb 	.word	0x00b03fdb

0800a864 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b0b8      	sub	sp, #224	; 0xe0
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a86c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	605a      	str	r2, [r3, #4]
 800a876:	609a      	str	r2, [r3, #8]
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a87c:	f107 0310 	add.w	r3, r7, #16
 800a880:	22bc      	movs	r2, #188	; 0xbc
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f012 fa5d 	bl	801cd44 <memset>
  if(i2cHandle->Instance==I2C2)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a5a      	ldr	r2, [pc, #360]	; (800a9f8 <HAL_I2C_MspInit+0x194>)
 800a890:	4293      	cmp	r3, r2
 800a892:	f040 80ad 	bne.w	800a9f0 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a896:	2308      	movs	r3, #8
 800a898:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a8a0:	f107 0310 	add.w	r3, r7, #16
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f008 fa97 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800a8b0:	f000 fa3c 	bl	800ad2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8b4:	4b51      	ldr	r3, [pc, #324]	; (800a9fc <HAL_I2C_MspInit+0x198>)
 800a8b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8ba:	4a50      	ldr	r2, [pc, #320]	; (800a9fc <HAL_I2C_MspInit+0x198>)
 800a8bc:	f043 0302 	orr.w	r3, r3, #2
 800a8c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8c4:	4b4d      	ldr	r3, [pc, #308]	; (800a9fc <HAL_I2C_MspInit+0x198>)
 800a8c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a8d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a8d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8da:	2312      	movs	r3, #18
 800a8dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4841      	ldr	r0, [pc, #260]	; (800aa00 <HAL_I2C_MspInit+0x19c>)
 800a8fa:	f004 fe1d 	bl	800f538 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a8fe:	4b3f      	ldr	r3, [pc, #252]	; (800a9fc <HAL_I2C_MspInit+0x198>)
 800a900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a904:	4a3d      	ldr	r2, [pc, #244]	; (800a9fc <HAL_I2C_MspInit+0x198>)
 800a906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a90a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a90e:	4b3b      	ldr	r3, [pc, #236]	; (800a9fc <HAL_I2C_MspInit+0x198>)
 800a910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a918:	60bb      	str	r3, [r7, #8]
 800a91a:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 800a91c:	4b39      	ldr	r3, [pc, #228]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a91e:	4a3a      	ldr	r2, [pc, #232]	; (800aa08 <HAL_I2C_MspInit+0x1a4>)
 800a920:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800a922:	4b38      	ldr	r3, [pc, #224]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a924:	2223      	movs	r2, #35	; 0x23
 800a926:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a928:	4b36      	ldr	r3, [pc, #216]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a92e:	4b35      	ldr	r3, [pc, #212]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a930:	2200      	movs	r2, #0
 800a932:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a934:	4b33      	ldr	r3, [pc, #204]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a93a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a93c:	4b31      	ldr	r3, [pc, #196]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a93e:	2200      	movs	r2, #0
 800a940:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a942:	4b30      	ldr	r3, [pc, #192]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a944:	2200      	movs	r2, #0
 800a946:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800a948:	4b2e      	ldr	r3, [pc, #184]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a94e:	4b2d      	ldr	r3, [pc, #180]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a950:	2200      	movs	r2, #0
 800a952:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a954:	4b2b      	ldr	r3, [pc, #172]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a956:	2200      	movs	r2, #0
 800a958:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800a95a:	482a      	ldr	r0, [pc, #168]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a95c:	f001 ff96 	bl	800c88c <HAL_DMA_Init>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 800a966:	f000 f9e1 	bl	800ad2c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a25      	ldr	r2, [pc, #148]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a96e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a970:	4a24      	ldr	r2, [pc, #144]	; (800aa04 <HAL_I2C_MspInit+0x1a0>)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800a976:	4b25      	ldr	r3, [pc, #148]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a978:	4a25      	ldr	r2, [pc, #148]	; (800aa10 <HAL_I2C_MspInit+0x1ac>)
 800a97a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800a97c:	4b23      	ldr	r3, [pc, #140]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a97e:	2224      	movs	r2, #36	; 0x24
 800a980:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a982:	4b22      	ldr	r3, [pc, #136]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a984:	2240      	movs	r2, #64	; 0x40
 800a986:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a988:	4b20      	ldr	r3, [pc, #128]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a98e:	4b1f      	ldr	r3, [pc, #124]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a994:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a996:	4b1d      	ldr	r3, [pc, #116]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a99c:	4b1b      	ldr	r3, [pc, #108]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800a9a2:	4b1a      	ldr	r3, [pc, #104]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a9a8:	4b18      	ldr	r3, [pc, #96]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9ae:	4b17      	ldr	r3, [pc, #92]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800a9b4:	4815      	ldr	r0, [pc, #84]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a9b6:	f001 ff69 	bl	800c88c <HAL_DMA_Init>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 800a9c0:	f000 f9b4 	bl	800ad2c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a9c8:	639a      	str	r2, [r3, #56]	; 0x38
 800a9ca:	4a10      	ldr	r2, [pc, #64]	; (800aa0c <HAL_I2C_MspInit+0x1a8>)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2021      	movs	r0, #33	; 0x21
 800a9d6:	f001 fd5c 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a9da:	2021      	movs	r0, #33	; 0x21
 800a9dc:	f001 fd73 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	2022      	movs	r0, #34	; 0x22
 800a9e6:	f001 fd54 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a9ea:	2022      	movs	r0, #34	; 0x22
 800a9ec:	f001 fd6b 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a9f0:	bf00      	nop
 800a9f2:	37e0      	adds	r7, #224	; 0xe0
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	40005800 	.word	0x40005800
 800a9fc:	58024400 	.word	0x58024400
 800aa00:	58020400 	.word	0x58020400
 800aa04:	24001524 	.word	0x24001524
 800aa08:	40020010 	.word	0x40020010
 800aa0c:	2400159c 	.word	0x2400159c
 800aa10:	40020028 	.word	0x40020028

0800aa14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aa1a:	f001 f9b5 	bl	800bd88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aa1e:	f000 f865 	bl	800aaec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aa22:	f7ff fe57 	bl	800a6d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800aa26:	f7ff fe1d 	bl	800a664 <MX_DMA_Init>
  MX_I2C2_Init();
 800aa2a:	f7ff fedb 	bl	800a7e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800aa2e:	f000 f983 	bl	800ad38 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800aa32:	f011 fba9 	bl	801c188 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800aa36:	f000 ff31 	bl	800b89c <MX_USART2_UART_Init>
  MX_UART4_Init();
 800aa3a:	f000 fe39 	bl	800b6b0 <MX_UART4_Init>
  MX_UART7_Init();
 800aa3e:	f000 fe89 	bl	800b754 <MX_UART7_Init>
  MX_UART8_Init();
 800aa42:	f000 fed5 	bl	800b7f0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800aa46:	f000 ff75 	bl	800b934 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800aa4a:	f000 fd31 	bl	800b4b0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800aa4e:	f000 fce1 	bl	800b414 <MX_TIM2_Init>
  MX_TIM4_Init();
 800aa52:	f000 fd7b 	bl	800b54c <MX_TIM4_Init>
  MX_COMP2_Init();
 800aa56:	f7ff fd37 	bl	800a4c8 <MX_COMP2_Init>
  MX_DAC1_Init();
 800aa5a:	f7ff fdaf 	bl	800a5bc <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800aa5e:	2100      	movs	r1, #0
 800aa60:	481a      	ldr	r0, [pc, #104]	; (800aacc <main+0xb8>)
 800aa62:	f001 fd6c 	bl	800c53e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 800aa66:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4817      	ldr	r0, [pc, #92]	; (800aacc <main+0xb8>)
 800aa70:	f001 fdb7 	bl	800c5e2 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 800aa74:	4816      	ldr	r0, [pc, #88]	; (800aad0 <main+0xbc>)
 800aa76:	f00a fe9b 	bl	80157b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800aa7a:	4816      	ldr	r0, [pc, #88]	; (800aad4 <main+0xc0>)
 800aa7c:	f00a fe98 	bl	80157b0 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 800aa80:	4815      	ldr	r0, [pc, #84]	; (800aad8 <main+0xc4>)
 800aa82:	f001 fb6d 	bl	800c160 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 800aa86:	4b15      	ldr	r3, [pc, #84]	; (800aadc <main+0xc8>)
 800aa88:	603b      	str	r3, [r7, #0]
	config.HeadStreamUart = &huart4;
 800aa8a:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <main+0xcc>)
 800aa8c:	607b      	str	r3, [r7, #4]

	config.HeadTimeout = 10;
 800aa8e:	230a      	movs	r3, #10
 800aa90:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 800aa92:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <main+0xd0>)
 800aa94:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 800aa96:	230a      	movs	r3, #10
 800aa98:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 800aa9a:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <main+0xd4>)
 800aa9c:	617b      	str	r3, [r7, #20]

	if (MotherboardInit(config))
 800aa9e:	466a      	mov	r2, sp
 800aaa0:	f107 0310 	add.w	r3, r7, #16
 800aaa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aaa8:	e882 0003 	stmia.w	r2, {r0, r1}
 800aaac:	463b      	mov	r3, r7
 800aaae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aab0:	f7f7 fc8e 	bl	80023d0 <MotherboardInit>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <main+0xaa>
		return 1;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e002      	b.n	800aac4 <main+0xb0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 800aabe:	f7f7 fcd9 	bl	8002474 <MotherboardTick>
 800aac2:	e7fc      	b.n	800aabe <main+0xaa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	240014c4 	.word	0x240014c4
 800aad0:	240017dc 	.word	0x240017dc
 800aad4:	24001790 	.word	0x24001790
 800aad8:	24001498 	.word	0x24001498
 800aadc:	24001ab4 	.word	0x24001ab4
 800aae0:	24001874 	.word	0x24001874
 800aae4:	24001994 	.word	0x24001994
 800aae8:	24001614 	.word	0x24001614

0800aaec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b09e      	sub	sp, #120	; 0x78
 800aaf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800aaf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaf6:	224c      	movs	r2, #76	; 0x4c
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4618      	mov	r0, r3
 800aafc:	f012 f922 	bl	801cd44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ab00:	f107 030c 	add.w	r3, r7, #12
 800ab04:	2220      	movs	r2, #32
 800ab06:	2100      	movs	r1, #0
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f012 f91b 	bl	801cd44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ab0e:	2002      	movs	r0, #2
 800ab10:	f007 f95e 	bl	8011dd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab14:	2300      	movs	r3, #0
 800ab16:	60bb      	str	r3, [r7, #8]
 800ab18:	4b4d      	ldr	r3, [pc, #308]	; (800ac50 <SystemClock_Config+0x164>)
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	4a4c      	ldr	r2, [pc, #304]	; (800ac50 <SystemClock_Config+0x164>)
 800ab1e:	f023 0301 	bic.w	r3, r3, #1
 800ab22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab24:	4b4a      	ldr	r3, [pc, #296]	; (800ac50 <SystemClock_Config+0x164>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	60bb      	str	r3, [r7, #8]
 800ab2e:	4b49      	ldr	r3, [pc, #292]	; (800ac54 <SystemClock_Config+0x168>)
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	4a48      	ldr	r2, [pc, #288]	; (800ac54 <SystemClock_Config+0x168>)
 800ab34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab38:	6193      	str	r3, [r2, #24]
 800ab3a:	4b46      	ldr	r3, [pc, #280]	; (800ac54 <SystemClock_Config+0x168>)
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab42:	60bb      	str	r3, [r7, #8]
 800ab44:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ab46:	bf00      	nop
 800ab48:	4b42      	ldr	r3, [pc, #264]	; (800ac54 <SystemClock_Config+0x168>)
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab54:	d1f8      	bne.n	800ab48 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab56:	4b40      	ldr	r3, [pc, #256]	; (800ac58 <SystemClock_Config+0x16c>)
 800ab58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab5c:	4a3e      	ldr	r2, [pc, #248]	; (800ac58 <SystemClock_Config+0x16c>)
 800ab5e:	f043 0302 	orr.w	r3, r3, #2
 800ab62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ab66:	4b3c      	ldr	r3, [pc, #240]	; (800ac58 <SystemClock_Config+0x16c>)
 800ab68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	607b      	str	r3, [r7, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800ab74:	2300      	movs	r3, #0
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	4b36      	ldr	r3, [pc, #216]	; (800ac54 <SystemClock_Config+0x168>)
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	4a35      	ldr	r2, [pc, #212]	; (800ac54 <SystemClock_Config+0x168>)
 800ab7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab82:	6193      	str	r3, [r2, #24]
 800ab84:	4b33      	ldr	r3, [pc, #204]	; (800ac54 <SystemClock_Config+0x168>)
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab8c:	603b      	str	r3, [r7, #0]
 800ab8e:	4b30      	ldr	r3, [pc, #192]	; (800ac50 <SystemClock_Config+0x164>)
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	4a2f      	ldr	r2, [pc, #188]	; (800ac50 <SystemClock_Config+0x164>)
 800ab94:	f043 0301 	orr.w	r3, r3, #1
 800ab98:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab9a:	4b2d      	ldr	r3, [pc, #180]	; (800ac50 <SystemClock_Config+0x164>)
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800aba6:	bf00      	nop
 800aba8:	4b2a      	ldr	r3, [pc, #168]	; (800ac54 <SystemClock_Config+0x168>)
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abb4:	d1f8      	bne.n	800aba8 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800abb6:	4b28      	ldr	r3, [pc, #160]	; (800ac58 <SystemClock_Config+0x16c>)
 800abb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abba:	4a27      	ldr	r2, [pc, #156]	; (800ac58 <SystemClock_Config+0x16c>)
 800abbc:	f023 0303 	bic.w	r3, r3, #3
 800abc0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800abc2:	2322      	movs	r3, #34	; 0x22
 800abc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800abc6:	2301      	movs	r3, #1
 800abc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800abca:	2340      	movs	r3, #64	; 0x40
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800abce:	2301      	movs	r3, #1
 800abd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800abd2:	2302      	movs	r3, #2
 800abd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800abd6:	2300      	movs	r3, #0
 800abd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800abda:	2304      	movs	r3, #4
 800abdc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800abde:	233c      	movs	r3, #60	; 0x3c
 800abe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800abe2:	2302      	movs	r3, #2
 800abe4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800abe6:	2305      	movs	r3, #5
 800abe8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800abea:	2302      	movs	r3, #2
 800abec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800abee:	230c      	movs	r3, #12
 800abf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800abfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abfe:	4618      	mov	r0, r3
 800ac00:	f007 f930 	bl	8011e64 <HAL_RCC_OscConfig>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <SystemClock_Config+0x122>
  {
    Error_Handler();
 800ac0a:	f000 f88f 	bl	800ad2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ac0e:	233f      	movs	r3, #63	; 0x3f
 800ac10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ac12:	2303      	movs	r3, #3
 800ac14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ac16:	2300      	movs	r3, #0
 800ac18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ac1a:	2308      	movs	r3, #8
 800ac1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ac1e:	2340      	movs	r3, #64	; 0x40
 800ac20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ac22:	2340      	movs	r3, #64	; 0x40
 800ac24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ac26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ac2c:	2340      	movs	r3, #64	; 0x40
 800ac2e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ac30:	f107 030c 	add.w	r3, r7, #12
 800ac34:	2104      	movs	r1, #4
 800ac36:	4618      	mov	r0, r3
 800ac38:	f007 fd42 	bl	80126c0 <HAL_RCC_ClockConfig>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800ac42:	f000 f873 	bl	800ad2c <Error_Handler>
  }
}
 800ac46:	bf00      	nop
 800ac48:	3778      	adds	r7, #120	; 0x78
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	58000400 	.word	0x58000400
 800ac54:	58024800 	.word	0x58024800
 800ac58:	58024400 	.word	0x58024400

0800ac5c <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a04      	ldr	r2, [pc, #16]	; (800ac7c <HAL_COMP_TriggerCallback+0x20>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d101      	bne.n	800ac72 <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 800ac6e:	f7f7 fc71 	bl	8002554 <MotherboardOnStrobe>
	}
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	58003810 	.word	0x58003810

0800ac80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a0b      	ldr	r2, [pc, #44]	; (800acbc <HAL_UART_RxCpltCallback+0x3c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d101      	bne.n	800ac96 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 800ac92:	f7f7 fc7f 	bl	8002594 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a09      	ldr	r2, [pc, #36]	; (800acc0 <HAL_UART_RxCpltCallback+0x40>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d101      	bne.n	800aca4 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 800aca0:	f7f7 fc82 	bl	80025a8 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a06      	ldr	r2, [pc, #24]	; (800acc4 <HAL_UART_RxCpltCallback+0x44>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d101      	bne.n	800acb2 <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 800acae:	f7f7 fc67 	bl	8002580 <MotherboardOnBodyRecieveComplete>
	}
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	40004800 	.word	0x40004800
 800acc0:	40004c00 	.word	0x40004c00
 800acc4:	40007c00 	.word	0x40007c00

0800acc8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a07      	ldr	r2, [pc, #28]	; (800acf4 <HAL_UART_TxCpltCallback+0x2c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d101      	bne.n	800acde <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 800acda:	f7f7 fc6f 	bl	80025bc <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a05      	ldr	r2, [pc, #20]	; (800acf8 <HAL_UART_TxCpltCallback+0x30>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d101      	bne.n	800acec <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 800ace8:	f7f7 fc72 	bl	80025d0 <MotherboardOnHeadStreamTransmitComplete>
	}
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	40004800 	.word	0x40004800
 800acf8:	40004c00 	.word	0x40004c00

0800acfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a07      	ldr	r2, [pc, #28]	; (800ad28 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d101      	bne.n	800ad12 <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 800ad0e:	f7f7 fc69 	bl	80025e4 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1a:	d101      	bne.n	800ad20 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 800ad1c:	f7f7 fc6e 	bl	80025fc <MotherboardOnImuTimerTick>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	40000400 	.word	0x40000400

0800ad2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ad30:	b672      	cpsid	i
}
 800ad32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800ad34:	e7fe      	b.n	800ad34 <Error_Handler+0x8>
	...

0800ad38 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800ad3c:	4b28      	ldr	r3, [pc, #160]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad3e:	4a29      	ldr	r2, [pc, #164]	; (800ade4 <MX_SPI1_Init+0xac>)
 800ad40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ad42:	4b27      	ldr	r3, [pc, #156]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ad48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ad4a:	4b25      	ldr	r3, [pc, #148]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ad50:	4b23      	ldr	r3, [pc, #140]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad52:	2207      	movs	r2, #7
 800ad54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ad56:	4b22      	ldr	r3, [pc, #136]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ad5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ad5e:	4b20      	ldr	r3, [pc, #128]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ad66:	4b1e      	ldr	r3, [pc, #120]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ad6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ad6e:	4b1c      	ldr	r3, [pc, #112]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ad74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ad7c:	4b18      	ldr	r3, [pc, #96]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad82:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800ad88:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ad94:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800ad96:	4b12      	ldr	r3, [pc, #72]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800ad9c:	4b10      	ldr	r3, [pc, #64]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ada2:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ada8:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800adaa:	2200      	movs	r2, #0
 800adac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800adae:	4b0c      	ldr	r3, [pc, #48]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800adb4:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800adba:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800adc0:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800adc6:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800adc8:	2200      	movs	r2, #0
 800adca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800adcc:	4804      	ldr	r0, [pc, #16]	; (800ade0 <MX_SPI1_Init+0xa8>)
 800adce:	f009 fb6b 	bl	80144a8 <HAL_SPI_Init>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800add8:	f7ff ffa8 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800addc:	bf00      	nop
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	24001614 	.word	0x24001614
 800ade4:	40013000 	.word	0x40013000

0800ade8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b0b8      	sub	sp, #224	; 0xe0
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800adf4:	2200      	movs	r2, #0
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	605a      	str	r2, [r3, #4]
 800adfa:	609a      	str	r2, [r3, #8]
 800adfc:	60da      	str	r2, [r3, #12]
 800adfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ae00:	f107 0310 	add.w	r3, r7, #16
 800ae04:	22bc      	movs	r2, #188	; 0xbc
 800ae06:	2100      	movs	r1, #0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f011 ff9b 	bl	801cd44 <memset>
  if(spiHandle->Instance==SPI1)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a60      	ldr	r2, [pc, #384]	; (800af94 <HAL_SPI_MspInit+0x1ac>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	f040 80b8 	bne.w	800af8a <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800ae1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800ae20:	2320      	movs	r3, #32
 800ae22:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 800ae24:	2381      	movs	r3, #129	; 0x81
 800ae26:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800ae30:	2302      	movs	r3, #2
 800ae32:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800ae34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae38:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800ae42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae46:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ae48:	f107 0310 	add.w	r3, r7, #16
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f007 ffc3 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800ae58:	f7ff ff68 	bl	800ad2c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ae5c:	4b4e      	ldr	r3, [pc, #312]	; (800af98 <HAL_SPI_MspInit+0x1b0>)
 800ae5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae62:	4a4d      	ldr	r2, [pc, #308]	; (800af98 <HAL_SPI_MspInit+0x1b0>)
 800ae64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ae6c:	4b4a      	ldr	r3, [pc, #296]	; (800af98 <HAL_SPI_MspInit+0x1b0>)
 800ae6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae7a:	4b47      	ldr	r3, [pc, #284]	; (800af98 <HAL_SPI_MspInit+0x1b0>)
 800ae7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae80:	4a45      	ldr	r2, [pc, #276]	; (800af98 <HAL_SPI_MspInit+0x1b0>)
 800ae82:	f043 0301 	orr.w	r3, r3, #1
 800ae86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae8a:	4b43      	ldr	r3, [pc, #268]	; (800af98 <HAL_SPI_MspInit+0x1b0>)
 800ae8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	60bb      	str	r3, [r7, #8]
 800ae96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ae98:	23e0      	movs	r3, #224	; 0xe0
 800ae9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea4:	2300      	movs	r3, #0
 800aea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800aeb0:	2305      	movs	r3, #5
 800aeb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aeb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aeba:	4619      	mov	r1, r3
 800aebc:	4837      	ldr	r0, [pc, #220]	; (800af9c <HAL_SPI_MspInit+0x1b4>)
 800aebe:	f004 fb3b 	bl	800f538 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 800aec2:	4b37      	ldr	r3, [pc, #220]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aec4:	4a37      	ldr	r2, [pc, #220]	; (800afa4 <HAL_SPI_MspInit+0x1bc>)
 800aec6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800aec8:	4b35      	ldr	r3, [pc, #212]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aeca:	2226      	movs	r2, #38	; 0x26
 800aecc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aece:	4b34      	ldr	r3, [pc, #208]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aed0:	2240      	movs	r2, #64	; 0x40
 800aed2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aed4:	4b32      	ldr	r3, [pc, #200]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aeda:	4b31      	ldr	r3, [pc, #196]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aedc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aee0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aee2:	4b2f      	ldr	r3, [pc, #188]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aee8:	4b2d      	ldr	r3, [pc, #180]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800aeee:	4b2c      	ldr	r3, [pc, #176]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800aef4:	4b2a      	ldr	r3, [pc, #168]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aef6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aefa:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aefc:	4b28      	ldr	r3, [pc, #160]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800aefe:	2200      	movs	r2, #0
 800af00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800af02:	4827      	ldr	r0, [pc, #156]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800af04:	f001 fcc2 	bl	800c88c <HAL_DMA_Init>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800af0e:	f7ff ff0d 	bl	800ad2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a22      	ldr	r2, [pc, #136]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800af16:	679a      	str	r2, [r3, #120]	; 0x78
 800af18:	4a21      	ldr	r2, [pc, #132]	; (800afa0 <HAL_SPI_MspInit+0x1b8>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 800af1e:	4b22      	ldr	r3, [pc, #136]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af20:	4a22      	ldr	r2, [pc, #136]	; (800afac <HAL_SPI_MspInit+0x1c4>)
 800af22:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800af24:	4b20      	ldr	r3, [pc, #128]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af26:	2225      	movs	r2, #37	; 0x25
 800af28:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af2a:	4b1f      	ldr	r3, [pc, #124]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af2c:	2200      	movs	r2, #0
 800af2e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800af30:	4b1d      	ldr	r3, [pc, #116]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af32:	2200      	movs	r2, #0
 800af34:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800af36:	4b1c      	ldr	r3, [pc, #112]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af3c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af3e:	4b1a      	ldr	r3, [pc, #104]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af40:	2200      	movs	r2, #0
 800af42:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af44:	4b18      	ldr	r3, [pc, #96]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af46:	2200      	movs	r2, #0
 800af48:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800af4a:	4b17      	ldr	r3, [pc, #92]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800af50:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af56:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af58:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800af5e:	4812      	ldr	r0, [pc, #72]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af60:	f001 fc94 	bl	800c88c <HAL_DMA_Init>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 800af6a:	f7ff fedf 	bl	800ad2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a0d      	ldr	r2, [pc, #52]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af72:	67da      	str	r2, [r3, #124]	; 0x7c
 800af74:	4a0c      	ldr	r2, [pc, #48]	; (800afa8 <HAL_SPI_MspInit+0x1c0>)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800af7a:	2200      	movs	r2, #0
 800af7c:	2100      	movs	r1, #0
 800af7e:	2023      	movs	r0, #35	; 0x23
 800af80:	f001 fa87 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800af84:	2023      	movs	r0, #35	; 0x23
 800af86:	f001 fa9e 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800af8a:	bf00      	nop
 800af8c:	37e0      	adds	r7, #224	; 0xe0
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	40013000 	.word	0x40013000
 800af98:	58024400 	.word	0x58024400
 800af9c:	58020000 	.word	0x58020000
 800afa0:	2400169c 	.word	0x2400169c
 800afa4:	40020070 	.word	0x40020070
 800afa8:	24001714 	.word	0x24001714
 800afac:	40020088 	.word	0x40020088

0800afb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afb6:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <HAL_MspInit+0x30>)
 800afb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afbc:	4a08      	ldr	r2, [pc, #32]	; (800afe0 <HAL_MspInit+0x30>)
 800afbe:	f043 0302 	orr.w	r3, r3, #2
 800afc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800afc6:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <HAL_MspInit+0x30>)
 800afc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	607b      	str	r3, [r7, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	58024400 	.word	0x58024400

0800afe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800afe8:	e7fe      	b.n	800afe8 <NMI_Handler+0x4>

0800afea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800afea:	b480      	push	{r7}
 800afec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800afee:	e7fe      	b.n	800afee <HardFault_Handler+0x4>

0800aff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aff4:	e7fe      	b.n	800aff4 <MemManage_Handler+0x4>

0800aff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aff6:	b480      	push	{r7}
 800aff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800affa:	e7fe      	b.n	800affa <BusFault_Handler+0x4>

0800affc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b000:	e7fe      	b.n	800b000 <UsageFault_Handler+0x4>

0800b002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b002:	b480      	push	{r7}
 800b004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b006:	bf00      	nop
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b01e:	b480      	push	{r7}
 800b020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b022:	bf00      	nop
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b030:	f000 ff1c 	bl	800be6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b034:	bf00      	nop
 800b036:	bd80      	pop	{r7, pc}

0800b038 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800b03c:	4802      	ldr	r0, [pc, #8]	; (800b048 <DMA1_Stream0_IRQHandler+0x10>)
 800b03e:	f002 ff4f 	bl	800dee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b042:	bf00      	nop
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	24001524 	.word	0x24001524

0800b04c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800b050:	4802      	ldr	r0, [pc, #8]	; (800b05c <DMA1_Stream1_IRQHandler+0x10>)
 800b052:	f002 ff45 	bl	800dee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b056:	bf00      	nop
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	2400159c 	.word	0x2400159c

0800b060 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b064:	4802      	ldr	r0, [pc, #8]	; (800b070 <DMA1_Stream4_IRQHandler+0x10>)
 800b066:	f002 ff3b 	bl	800dee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b06a:	bf00      	nop
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	2400169c 	.word	0x2400169c

0800b074 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800b078:	4802      	ldr	r0, [pc, #8]	; (800b084 <DMA1_Stream5_IRQHandler+0x10>)
 800b07a:	f002 ff31 	bl	800dee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800b07e:	bf00      	nop
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	24001714 	.word	0x24001714

0800b088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b08c:	4802      	ldr	r0, [pc, #8]	; (800b098 <TIM2_IRQHandler+0x10>)
 800b08e:	f00a fc07 	bl	80158a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b092:	bf00      	nop
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	24001790 	.word	0x24001790

0800b09c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b0a0:	4802      	ldr	r0, [pc, #8]	; (800b0ac <TIM3_IRQHandler+0x10>)
 800b0a2:	f00a fbfd 	bl	80158a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b0a6:	bf00      	nop
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	240017dc 	.word	0x240017dc

0800b0b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b0b4:	4802      	ldr	r0, [pc, #8]	; (800b0c0 <TIM4_IRQHandler+0x10>)
 800b0b6:	f00a fbf3 	bl	80158a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	24001828 	.word	0x24001828

0800b0c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b0c8:	4802      	ldr	r0, [pc, #8]	; (800b0d4 <I2C2_EV_IRQHandler+0x10>)
 800b0ca:	f004 fc8f 	bl	800f9ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b0ce:	bf00      	nop
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	240014d8 	.word	0x240014d8

0800b0d8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800b0dc:	4802      	ldr	r0, [pc, #8]	; (800b0e8 <I2C2_ER_IRQHandler+0x10>)
 800b0de:	f004 fc9f 	bl	800fa20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800b0e2:	bf00      	nop
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	240014d8 	.word	0x240014d8

0800b0ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800b0f0:	4802      	ldr	r0, [pc, #8]	; (800b0fc <SPI1_IRQHandler+0x10>)
 800b0f2:	f009 ff5b 	bl	8014fac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800b0f6:	bf00      	nop
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	24001614 	.word	0x24001614

0800b100 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b104:	4802      	ldr	r0, [pc, #8]	; (800b110 <USART3_IRQHandler+0x10>)
 800b106:	f00b f9ff 	bl	8016508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b10a:	bf00      	nop
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	24001ab4 	.word	0x24001ab4

0800b114 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b118:	4802      	ldr	r0, [pc, #8]	; (800b124 <UART4_IRQHandler+0x10>)
 800b11a:	f00b f9f5 	bl	8016508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b11e:	bf00      	nop
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	24001874 	.word	0x24001874

0800b128 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800b12c:	4802      	ldr	r0, [pc, #8]	; (800b138 <UART8_IRQHandler+0x10>)
 800b12e:	f00b f9eb 	bl	8016508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800b132:	bf00      	nop
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	24001994 	.word	0x24001994

0800b13c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b140:	4802      	ldr	r0, [pc, #8]	; (800b14c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800b142:	f005 fcc6 	bl	8010ad2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800b146:	bf00      	nop
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	24003028 	.word	0x24003028

0800b150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b154:	4802      	ldr	r0, [pc, #8]	; (800b160 <OTG_FS_IRQHandler+0x10>)
 800b156:	f005 fcbc 	bl	8010ad2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b15a:	bf00      	nop
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	24003028 	.word	0x24003028

0800b164 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 800b168:	4802      	ldr	r0, [pc, #8]	; (800b174 <COMP1_IRQHandler+0x10>)
 800b16a:	f001 f843 	bl	800c1f4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800b16e:	bf00      	nop
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	24001498 	.word	0x24001498

0800b178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b178:	b480      	push	{r7}
 800b17a:	af00      	add	r7, sp, #0
	return 1;
 800b17c:	2301      	movs	r3, #1
}
 800b17e:	4618      	mov	r0, r3
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <_kill>:

int _kill(int pid, int sig)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b192:	f011 fd63 	bl	801cc5c <__errno>
 800b196:	4603      	mov	r3, r0
 800b198:	2216      	movs	r2, #22
 800b19a:	601a      	str	r2, [r3, #0]
	return -1;
 800b19c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <_exit>:

void _exit (int status)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b1b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff ffe7 	bl	800b188 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b1ba:	e7fe      	b.n	800b1ba <_exit+0x12>

0800b1bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	e00a      	b.n	800b1e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b1ce:	f3af 8000 	nop.w
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	60ba      	str	r2, [r7, #8]
 800b1da:	b2ca      	uxtb	r2, r1
 800b1dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	dbf0      	blt.n	800b1ce <_read+0x12>
	}

return len;
 800b1ec:	687b      	ldr	r3, [r7, #4]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b086      	sub	sp, #24
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	e009      	b.n	800b21c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	60ba      	str	r2, [r7, #8]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	3301      	adds	r3, #1
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	429a      	cmp	r2, r3
 800b222:	dbf1      	blt.n	800b208 <_write+0x12>
	}
	return len;
 800b224:	687b      	ldr	r3, [r7, #4]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <_close>:

int _close(int file)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
	return -1;
 800b236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b246:	b480      	push	{r7}
 800b248:	b083      	sub	sp, #12
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b256:	605a      	str	r2, [r3, #4]
	return 0;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <_isatty>:

int _isatty(int file)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
	return 1;
 800b26e:	2301      	movs	r3, #1
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
	return 0;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b2a0:	4a14      	ldr	r2, [pc, #80]	; (800b2f4 <_sbrk+0x5c>)
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <_sbrk+0x60>)
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b2ac:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <_sbrk+0x64>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d102      	bne.n	800b2ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b2b4:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <_sbrk+0x64>)
 800b2b6:	4a12      	ldr	r2, [pc, #72]	; (800b300 <_sbrk+0x68>)
 800b2b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b2ba:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <_sbrk+0x64>)
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d207      	bcs.n	800b2d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b2c8:	f011 fcc8 	bl	801cc5c <__errno>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	220c      	movs	r2, #12
 800b2d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2d6:	e009      	b.n	800b2ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b2d8:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <_sbrk+0x64>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b2de:	4b07      	ldr	r3, [pc, #28]	; (800b2fc <_sbrk+0x64>)
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	4a05      	ldr	r2, [pc, #20]	; (800b2fc <_sbrk+0x64>)
 800b2e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	24080000 	.word	0x24080000
 800b2f8:	00000400 	.word	0x00000400
 800b2fc:	2400178c 	.word	0x2400178c
 800b300:	24003768 	.word	0x24003768

0800b304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b304:	b480      	push	{r7}
 800b306:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b308:	4b37      	ldr	r3, [pc, #220]	; (800b3e8 <SystemInit+0xe4>)
 800b30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b30e:	4a36      	ldr	r2, [pc, #216]	; (800b3e8 <SystemInit+0xe4>)
 800b310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b318:	4b34      	ldr	r3, [pc, #208]	; (800b3ec <SystemInit+0xe8>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 030f 	and.w	r3, r3, #15
 800b320:	2b06      	cmp	r3, #6
 800b322:	d807      	bhi.n	800b334 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b324:	4b31      	ldr	r3, [pc, #196]	; (800b3ec <SystemInit+0xe8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f023 030f 	bic.w	r3, r3, #15
 800b32c:	4a2f      	ldr	r2, [pc, #188]	; (800b3ec <SystemInit+0xe8>)
 800b32e:	f043 0307 	orr.w	r3, r3, #7
 800b332:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b334:	4b2e      	ldr	r3, [pc, #184]	; (800b3f0 <SystemInit+0xec>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a2d      	ldr	r2, [pc, #180]	; (800b3f0 <SystemInit+0xec>)
 800b33a:	f043 0301 	orr.w	r3, r3, #1
 800b33e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b340:	4b2b      	ldr	r3, [pc, #172]	; (800b3f0 <SystemInit+0xec>)
 800b342:	2200      	movs	r2, #0
 800b344:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b346:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <SystemInit+0xec>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	4929      	ldr	r1, [pc, #164]	; (800b3f0 <SystemInit+0xec>)
 800b34c:	4b29      	ldr	r3, [pc, #164]	; (800b3f4 <SystemInit+0xf0>)
 800b34e:	4013      	ands	r3, r2
 800b350:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b352:	4b26      	ldr	r3, [pc, #152]	; (800b3ec <SystemInit+0xe8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0308 	and.w	r3, r3, #8
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d007      	beq.n	800b36e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b35e:	4b23      	ldr	r3, [pc, #140]	; (800b3ec <SystemInit+0xe8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f023 030f 	bic.w	r3, r3, #15
 800b366:	4a21      	ldr	r2, [pc, #132]	; (800b3ec <SystemInit+0xe8>)
 800b368:	f043 0307 	orr.w	r3, r3, #7
 800b36c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b36e:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <SystemInit+0xec>)
 800b370:	2200      	movs	r2, #0
 800b372:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b374:	4b1e      	ldr	r3, [pc, #120]	; (800b3f0 <SystemInit+0xec>)
 800b376:	2200      	movs	r2, #0
 800b378:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b37a:	4b1d      	ldr	r3, [pc, #116]	; (800b3f0 <SystemInit+0xec>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b380:	4b1b      	ldr	r3, [pc, #108]	; (800b3f0 <SystemInit+0xec>)
 800b382:	4a1d      	ldr	r2, [pc, #116]	; (800b3f8 <SystemInit+0xf4>)
 800b384:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b386:	4b1a      	ldr	r3, [pc, #104]	; (800b3f0 <SystemInit+0xec>)
 800b388:	4a1c      	ldr	r2, [pc, #112]	; (800b3fc <SystemInit+0xf8>)
 800b38a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b38c:	4b18      	ldr	r3, [pc, #96]	; (800b3f0 <SystemInit+0xec>)
 800b38e:	4a1c      	ldr	r2, [pc, #112]	; (800b400 <SystemInit+0xfc>)
 800b390:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b392:	4b17      	ldr	r3, [pc, #92]	; (800b3f0 <SystemInit+0xec>)
 800b394:	2200      	movs	r2, #0
 800b396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b398:	4b15      	ldr	r3, [pc, #84]	; (800b3f0 <SystemInit+0xec>)
 800b39a:	4a19      	ldr	r2, [pc, #100]	; (800b400 <SystemInit+0xfc>)
 800b39c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b39e:	4b14      	ldr	r3, [pc, #80]	; (800b3f0 <SystemInit+0xec>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b3a4:	4b12      	ldr	r3, [pc, #72]	; (800b3f0 <SystemInit+0xec>)
 800b3a6:	4a16      	ldr	r2, [pc, #88]	; (800b400 <SystemInit+0xfc>)
 800b3a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b3aa:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <SystemInit+0xec>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b3b0:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <SystemInit+0xec>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a0e      	ldr	r2, [pc, #56]	; (800b3f0 <SystemInit+0xec>)
 800b3b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b3bc:	4b0c      	ldr	r3, [pc, #48]	; (800b3f0 <SystemInit+0xec>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b3c2:	4b10      	ldr	r3, [pc, #64]	; (800b404 <SystemInit+0x100>)
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <SystemInit+0x104>)
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ce:	d202      	bcs.n	800b3d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b3d0:	4b0e      	ldr	r3, [pc, #56]	; (800b40c <SystemInit+0x108>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b3d6:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <SystemInit+0x10c>)
 800b3d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b3dc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b3de:	bf00      	nop
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	e000ed00 	.word	0xe000ed00
 800b3ec:	52002000 	.word	0x52002000
 800b3f0:	58024400 	.word	0x58024400
 800b3f4:	eaf6ed7f 	.word	0xeaf6ed7f
 800b3f8:	02020200 	.word	0x02020200
 800b3fc:	01ff0000 	.word	0x01ff0000
 800b400:	01010280 	.word	0x01010280
 800b404:	5c001000 	.word	0x5c001000
 800b408:	ffff0000 	.word	0xffff0000
 800b40c:	51008108 	.word	0x51008108
 800b410:	52004000 	.word	0x52004000

0800b414 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b41a:	f107 0310 	add.w	r3, r7, #16
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	605a      	str	r2, [r3, #4]
 800b424:	609a      	str	r2, [r3, #8]
 800b426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b428:	1d3b      	adds	r3, r7, #4
 800b42a:	2200      	movs	r2, #0
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	605a      	str	r2, [r3, #4]
 800b430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b432:	4b1e      	ldr	r3, [pc, #120]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 800b43a:	4b1c      	ldr	r3, [pc, #112]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b43c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b442:	4b1a      	ldr	r3, [pc, #104]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b444:	2200      	movs	r2, #0
 800b446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800b448:	4b18      	ldr	r3, [pc, #96]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b44a:	2264      	movs	r2, #100	; 0x64
 800b44c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b44e:	4b17      	ldr	r3, [pc, #92]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b450:	2200      	movs	r2, #0
 800b452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b454:	4b15      	ldr	r3, [pc, #84]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b456:	2200      	movs	r2, #0
 800b458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b45a:	4814      	ldr	r0, [pc, #80]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b45c:	f00a f951 	bl	8015702 <HAL_TIM_Base_Init>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b466:	f7ff fc61 	bl	800ad2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b46e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b470:	f107 0310 	add.w	r3, r7, #16
 800b474:	4619      	mov	r1, r3
 800b476:	480d      	ldr	r0, [pc, #52]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b478:	f00a fb32 	bl	8015ae0 <HAL_TIM_ConfigClockSource>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b482:	f7ff fc53 	bl	800ad2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b486:	2300      	movs	r3, #0
 800b488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b48e:	1d3b      	adds	r3, r7, #4
 800b490:	4619      	mov	r1, r3
 800b492:	4806      	ldr	r0, [pc, #24]	; (800b4ac <MX_TIM2_Init+0x98>)
 800b494:	f00a fd7c 	bl	8015f90 <HAL_TIMEx_MasterConfigSynchronization>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b49e:	f7ff fc45 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b4a2:	bf00      	nop
 800b4a4:	3720      	adds	r7, #32
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	24001790 	.word	0x24001790

0800b4b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b4b6:	f107 0310 	add.w	r3, r7, #16
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	605a      	str	r2, [r3, #4]
 800b4c0:	609a      	str	r2, [r3, #8]
 800b4c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4c4:	1d3b      	adds	r3, r7, #4
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	605a      	str	r2, [r3, #4]
 800b4cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b4ce:	4b1d      	ldr	r3, [pc, #116]	; (800b544 <MX_TIM3_Init+0x94>)
 800b4d0:	4a1d      	ldr	r2, [pc, #116]	; (800b548 <MX_TIM3_Init+0x98>)
 800b4d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 800b4d4:	4b1b      	ldr	r3, [pc, #108]	; (800b544 <MX_TIM3_Init+0x94>)
 800b4d6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b4da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4dc:	4b19      	ldr	r3, [pc, #100]	; (800b544 <MX_TIM3_Init+0x94>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800b4e2:	4b18      	ldr	r3, [pc, #96]	; (800b544 <MX_TIM3_Init+0x94>)
 800b4e4:	2264      	movs	r2, #100	; 0x64
 800b4e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4e8:	4b16      	ldr	r3, [pc, #88]	; (800b544 <MX_TIM3_Init+0x94>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4ee:	4b15      	ldr	r3, [pc, #84]	; (800b544 <MX_TIM3_Init+0x94>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b4f4:	4813      	ldr	r0, [pc, #76]	; (800b544 <MX_TIM3_Init+0x94>)
 800b4f6:	f00a f904 	bl	8015702 <HAL_TIM_Base_Init>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b500:	f7ff fc14 	bl	800ad2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b508:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b50a:	f107 0310 	add.w	r3, r7, #16
 800b50e:	4619      	mov	r1, r3
 800b510:	480c      	ldr	r0, [pc, #48]	; (800b544 <MX_TIM3_Init+0x94>)
 800b512:	f00a fae5 	bl	8015ae0 <HAL_TIM_ConfigClockSource>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b51c:	f7ff fc06 	bl	800ad2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b520:	2300      	movs	r3, #0
 800b522:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b528:	1d3b      	adds	r3, r7, #4
 800b52a:	4619      	mov	r1, r3
 800b52c:	4805      	ldr	r0, [pc, #20]	; (800b544 <MX_TIM3_Init+0x94>)
 800b52e:	f00a fd2f 	bl	8015f90 <HAL_TIMEx_MasterConfigSynchronization>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d001      	beq.n	800b53c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b538:	f7ff fbf8 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b53c:	bf00      	nop
 800b53e:	3720      	adds	r7, #32
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	240017dc 	.word	0x240017dc
 800b548:	40000400 	.word	0x40000400

0800b54c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b552:	f107 0310 	add.w	r3, r7, #16
 800b556:	2200      	movs	r2, #0
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	605a      	str	r2, [r3, #4]
 800b55c:	609a      	str	r2, [r3, #8]
 800b55e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b560:	1d3b      	adds	r3, r7, #4
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	605a      	str	r2, [r3, #4]
 800b568:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b56a:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b56c:	4a1d      	ldr	r2, [pc, #116]	; (800b5e4 <MX_TIM4_Init+0x98>)
 800b56e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 800b570:	4b1b      	ldr	r3, [pc, #108]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b572:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b576:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b578:	4b19      	ldr	r3, [pc, #100]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800b57e:	4b18      	ldr	r3, [pc, #96]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b580:	2264      	movs	r2, #100	; 0x64
 800b582:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b584:	4b16      	ldr	r3, [pc, #88]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b586:	2200      	movs	r2, #0
 800b588:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b58a:	4b15      	ldr	r3, [pc, #84]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b590:	4813      	ldr	r0, [pc, #76]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b592:	f00a f8b6 	bl	8015702 <HAL_TIM_Base_Init>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800b59c:	f7ff fbc6 	bl	800ad2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b5a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b5a6:	f107 0310 	add.w	r3, r7, #16
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	480c      	ldr	r0, [pc, #48]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b5ae:	f00a fa97 	bl	8015ae0 <HAL_TIM_ConfigClockSource>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800b5b8:	f7ff fbb8 	bl	800ad2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b5c4:	1d3b      	adds	r3, r7, #4
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	4805      	ldr	r0, [pc, #20]	; (800b5e0 <MX_TIM4_Init+0x94>)
 800b5ca:	f00a fce1 	bl	8015f90 <HAL_TIMEx_MasterConfigSynchronization>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800b5d4:	f7ff fbaa 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b5d8:	bf00      	nop
 800b5da:	3720      	adds	r7, #32
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	24001828 	.word	0x24001828
 800b5e4:	40000800 	.word	0x40000800

0800b5e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f8:	d117      	bne.n	800b62a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b5fa:	4b2a      	ldr	r3, [pc, #168]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b5fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b600:	4a28      	ldr	r2, [pc, #160]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b602:	f043 0301 	orr.w	r3, r3, #1
 800b606:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b60a:	4b26      	ldr	r3, [pc, #152]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b60c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	617b      	str	r3, [r7, #20]
 800b616:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b618:	2200      	movs	r2, #0
 800b61a:	2100      	movs	r1, #0
 800b61c:	201c      	movs	r0, #28
 800b61e:	f000 ff38 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b622:	201c      	movs	r0, #28
 800b624:	f000 ff4f 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800b628:	e038      	b.n	800b69c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a1e      	ldr	r2, [pc, #120]	; (800b6a8 <HAL_TIM_Base_MspInit+0xc0>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d117      	bne.n	800b664 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b634:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b63a:	4a1a      	ldr	r2, [pc, #104]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b63c:	f043 0302 	orr.w	r3, r3, #2
 800b640:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b644:	4b17      	ldr	r3, [pc, #92]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b652:	2200      	movs	r2, #0
 800b654:	2100      	movs	r1, #0
 800b656:	201d      	movs	r0, #29
 800b658:	f000 ff1b 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b65c:	201d      	movs	r0, #29
 800b65e:	f000 ff32 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
}
 800b662:	e01b      	b.n	800b69c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a10      	ldr	r2, [pc, #64]	; (800b6ac <HAL_TIM_Base_MspInit+0xc4>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d116      	bne.n	800b69c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b66e:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b674:	4a0b      	ldr	r2, [pc, #44]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b676:	f043 0304 	orr.w	r3, r3, #4
 800b67a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b67e:	4b09      	ldr	r3, [pc, #36]	; (800b6a4 <HAL_TIM_Base_MspInit+0xbc>)
 800b680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b68c:	2200      	movs	r2, #0
 800b68e:	2100      	movs	r1, #0
 800b690:	201e      	movs	r0, #30
 800b692:	f000 fefe 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b696:	201e      	movs	r0, #30
 800b698:	f000 ff15 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
}
 800b69c:	bf00      	nop
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	58024400 	.word	0x58024400
 800b6a8:	40000400 	.word	0x40000400
 800b6ac:	40000800 	.word	0x40000800

0800b6b0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800b6b4:	4b25      	ldr	r3, [pc, #148]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6b6:	4a26      	ldr	r2, [pc, #152]	; (800b750 <MX_UART4_Init+0xa0>)
 800b6b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b6ba:	4b24      	ldr	r3, [pc, #144]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b6c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800b6c2:	4b22      	ldr	r3, [pc, #136]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b6c8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b6ca:	4b20      	ldr	r3, [pc, #128]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800b6d0:	4b1e      	ldr	r3, [pc, #120]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b6d8:	4b1c      	ldr	r3, [pc, #112]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6da:	220c      	movs	r2, #12
 800b6dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b6de:	4b1b      	ldr	r3, [pc, #108]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b6e4:	4b19      	ldr	r3, [pc, #100]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b6ea:	4b18      	ldr	r3, [pc, #96]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b6f0:	4b16      	ldr	r3, [pc, #88]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b6f6:	4b15      	ldr	r3, [pc, #84]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b6fc:	4b13      	ldr	r3, [pc, #76]	; (800b74c <MX_UART4_Init+0x9c>)
 800b6fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b702:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b704:	4811      	ldr	r0, [pc, #68]	; (800b74c <MX_UART4_Init+0x9c>)
 800b706:	f00a fcef 	bl	80160e8 <HAL_UART_Init>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 800b710:	f7ff fb0c 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b714:	2100      	movs	r1, #0
 800b716:	480d      	ldr	r0, [pc, #52]	; (800b74c <MX_UART4_Init+0x9c>)
 800b718:	f00d f888 	bl	801882c <HAL_UARTEx_SetTxFifoThreshold>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 800b722:	f7ff fb03 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b726:	2100      	movs	r1, #0
 800b728:	4808      	ldr	r0, [pc, #32]	; (800b74c <MX_UART4_Init+0x9c>)
 800b72a:	f00d f8bd 	bl	80188a8 <HAL_UARTEx_SetRxFifoThreshold>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 800b734:	f7ff fafa 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800b738:	4804      	ldr	r0, [pc, #16]	; (800b74c <MX_UART4_Init+0x9c>)
 800b73a:	f00d f83e 	bl	80187ba <HAL_UARTEx_DisableFifoMode>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 800b744:	f7ff faf2 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800b748:	bf00      	nop
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	24001874 	.word	0x24001874
 800b750:	40004c00 	.word	0x40004c00

0800b754 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800b758:	4b22      	ldr	r3, [pc, #136]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b75a:	4a23      	ldr	r2, [pc, #140]	; (800b7e8 <MX_UART7_Init+0x94>)
 800b75c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 800b75e:	4b21      	ldr	r3, [pc, #132]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b760:	4a22      	ldr	r2, [pc, #136]	; (800b7ec <MX_UART7_Init+0x98>)
 800b762:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800b764:	4b1f      	ldr	r3, [pc, #124]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b766:	2200      	movs	r2, #0
 800b768:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800b76a:	4b1e      	ldr	r3, [pc, #120]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800b770:	4b1c      	ldr	r3, [pc, #112]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b772:	2200      	movs	r2, #0
 800b774:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800b776:	4b1b      	ldr	r3, [pc, #108]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b778:	220c      	movs	r2, #12
 800b77a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b77c:	4b19      	ldr	r3, [pc, #100]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b77e:	2200      	movs	r2, #0
 800b780:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800b782:	4b18      	ldr	r3, [pc, #96]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b784:	2200      	movs	r2, #0
 800b786:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b788:	4b16      	ldr	r3, [pc, #88]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b78e:	4b15      	ldr	r3, [pc, #84]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b790:	2200      	movs	r2, #0
 800b792:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b794:	4b13      	ldr	r3, [pc, #76]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b796:	2200      	movs	r2, #0
 800b798:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800b79a:	4812      	ldr	r0, [pc, #72]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b79c:	f00a fca4 	bl	80160e8 <HAL_UART_Init>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800b7a6:	f7ff fac1 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	480d      	ldr	r0, [pc, #52]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b7ae:	f00d f83d 	bl	801882c <HAL_UARTEx_SetTxFifoThreshold>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <MX_UART7_Init+0x68>
  {
    Error_Handler();
 800b7b8:	f7ff fab8 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4809      	ldr	r0, [pc, #36]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b7c0:	f00d f872 	bl	80188a8 <HAL_UARTEx_SetRxFifoThreshold>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800b7ca:	f7ff faaf 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800b7ce:	4805      	ldr	r0, [pc, #20]	; (800b7e4 <MX_UART7_Init+0x90>)
 800b7d0:	f00c fff3 	bl	80187ba <HAL_UARTEx_DisableFifoMode>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800b7da:	f7ff faa7 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800b7de:	bf00      	nop
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	24001904 	.word	0x24001904
 800b7e8:	40007800 	.word	0x40007800
 800b7ec:	001312d0 	.word	0x001312d0

0800b7f0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800b7f4:	4b26      	ldr	r3, [pc, #152]	; (800b890 <MX_UART8_Init+0xa0>)
 800b7f6:	4a27      	ldr	r2, [pc, #156]	; (800b894 <MX_UART8_Init+0xa4>)
 800b7f8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 800b7fa:	4b25      	ldr	r3, [pc, #148]	; (800b890 <MX_UART8_Init+0xa0>)
 800b7fc:	4a26      	ldr	r2, [pc, #152]	; (800b898 <MX_UART8_Init+0xa8>)
 800b7fe:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 800b800:	4b23      	ldr	r3, [pc, #140]	; (800b890 <MX_UART8_Init+0xa0>)
 800b802:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b806:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800b808:	4b21      	ldr	r3, [pc, #132]	; (800b890 <MX_UART8_Init+0xa0>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 800b80e:	4b20      	ldr	r3, [pc, #128]	; (800b890 <MX_UART8_Init+0xa0>)
 800b810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b814:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800b816:	4b1e      	ldr	r3, [pc, #120]	; (800b890 <MX_UART8_Init+0xa0>)
 800b818:	220c      	movs	r2, #12
 800b81a:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b81c:	4b1c      	ldr	r3, [pc, #112]	; (800b890 <MX_UART8_Init+0xa0>)
 800b81e:	2200      	movs	r2, #0
 800b820:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800b822:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <MX_UART8_Init+0xa0>)
 800b824:	2200      	movs	r2, #0
 800b826:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b828:	4b19      	ldr	r3, [pc, #100]	; (800b890 <MX_UART8_Init+0xa0>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b82e:	4b18      	ldr	r3, [pc, #96]	; (800b890 <MX_UART8_Init+0xa0>)
 800b830:	2200      	movs	r2, #0
 800b832:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b834:	4b16      	ldr	r3, [pc, #88]	; (800b890 <MX_UART8_Init+0xa0>)
 800b836:	2220      	movs	r2, #32
 800b838:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b83a:	4b15      	ldr	r3, [pc, #84]	; (800b890 <MX_UART8_Init+0xa0>)
 800b83c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b840:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800b842:	4813      	ldr	r0, [pc, #76]	; (800b890 <MX_UART8_Init+0xa0>)
 800b844:	f00a fc50 	bl	80160e8 <HAL_UART_Init>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 800b84e:	f7ff fa6d 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b852:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b856:	480e      	ldr	r0, [pc, #56]	; (800b890 <MX_UART8_Init+0xa0>)
 800b858:	f00c ffe8 	bl	801882c <HAL_UARTEx_SetTxFifoThreshold>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 800b862:	f7ff fa63 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b866:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b86a:	4809      	ldr	r0, [pc, #36]	; (800b890 <MX_UART8_Init+0xa0>)
 800b86c:	f00d f81c 	bl	80188a8 <HAL_UARTEx_SetRxFifoThreshold>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 800b876:	f7ff fa59 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 800b87a:	4805      	ldr	r0, [pc, #20]	; (800b890 <MX_UART8_Init+0xa0>)
 800b87c:	f00c ff62 	bl	8018744 <HAL_UARTEx_EnableFifoMode>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 800b886:	f7ff fa51 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800b88a:	bf00      	nop
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	24001994 	.word	0x24001994
 800b894:	40007c00 	.word	0x40007c00
 800b898:	001312d0 	.word	0x001312d0

0800b89c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b8a0:	4b22      	ldr	r3, [pc, #136]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8a2:	4a23      	ldr	r2, [pc, #140]	; (800b930 <MX_USART2_UART_Init+0x94>)
 800b8a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b8a6:	4b21      	ldr	r3, [pc, #132]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b8ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b8ae:	4b1f      	ldr	r3, [pc, #124]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b8b4:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b8ba:	4b1c      	ldr	r3, [pc, #112]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b8c0:	4b1a      	ldr	r3, [pc, #104]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8c2:	220c      	movs	r2, #12
 800b8c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b8c6:	4b19      	ldr	r3, [pc, #100]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b8cc:	4b17      	ldr	r3, [pc, #92]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b8d2:	4b16      	ldr	r3, [pc, #88]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b8d8:	4b14      	ldr	r3, [pc, #80]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b8e4:	4811      	ldr	r0, [pc, #68]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8e6:	f00a fbff 	bl	80160e8 <HAL_UART_Init>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800b8f0:	f7ff fa1c 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	480d      	ldr	r0, [pc, #52]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b8f8:	f00c ff98 	bl	801882c <HAL_UARTEx_SetTxFifoThreshold>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800b902:	f7ff fa13 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b906:	2100      	movs	r1, #0
 800b908:	4808      	ldr	r0, [pc, #32]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b90a:	f00c ffcd 	bl	80188a8 <HAL_UARTEx_SetRxFifoThreshold>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800b914:	f7ff fa0a 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800b918:	4804      	ldr	r0, [pc, #16]	; (800b92c <MX_USART2_UART_Init+0x90>)
 800b91a:	f00c ff4e 	bl	80187ba <HAL_UARTEx_DisableFifoMode>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800b924:	f7ff fa02 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b928:	bf00      	nop
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	24001a24 	.word	0x24001a24
 800b930:	40004400 	.word	0x40004400

0800b934 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b938:	4b26      	ldr	r3, [pc, #152]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b93a:	4a27      	ldr	r2, [pc, #156]	; (800b9d8 <MX_USART3_UART_Init+0xa4>)
 800b93c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800b93e:	4b25      	ldr	r3, [pc, #148]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800b946:	4b23      	ldr	r3, [pc, #140]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b94c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b94e:	4b21      	ldr	r3, [pc, #132]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b950:	2200      	movs	r2, #0
 800b952:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800b954:	4b1f      	ldr	r3, [pc, #124]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b95a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b95c:	4b1d      	ldr	r3, [pc, #116]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b95e:	220c      	movs	r2, #12
 800b960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b962:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b964:	2200      	movs	r2, #0
 800b966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b968:	4b1a      	ldr	r3, [pc, #104]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b96e:	4b19      	ldr	r3, [pc, #100]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b970:	2200      	movs	r2, #0
 800b972:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b974:	4b17      	ldr	r3, [pc, #92]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b976:	2200      	movs	r2, #0
 800b978:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b97a:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b97c:	2220      	movs	r2, #32
 800b97e:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b980:	4b14      	ldr	r3, [pc, #80]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b986:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b988:	4812      	ldr	r0, [pc, #72]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b98a:	f00a fbad 	bl	80160e8 <HAL_UART_Init>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 800b994:	f7ff f9ca 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b998:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b99c:	480d      	ldr	r0, [pc, #52]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b99e:	f00c ff45 	bl	801882c <HAL_UARTEx_SetTxFifoThreshold>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 800b9a8:	f7ff f9c0 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b9ac:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b9b0:	4808      	ldr	r0, [pc, #32]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b9b2:	f00c ff79 	bl	80188a8 <HAL_UARTEx_SetRxFifoThreshold>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800b9bc:	f7ff f9b6 	bl	800ad2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800b9c0:	4804      	ldr	r0, [pc, #16]	; (800b9d4 <MX_USART3_UART_Init+0xa0>)
 800b9c2:	f00c febf 	bl	8018744 <HAL_UARTEx_EnableFifoMode>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 800b9cc:	f7ff f9ae 	bl	800ad2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b9d0:	bf00      	nop
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	24001ab4 	.word	0x24001ab4
 800b9d8:	40004800 	.word	0x40004800

0800b9dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b0c0      	sub	sp, #256	; 0x100
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	605a      	str	r2, [r3, #4]
 800b9ee:	609a      	str	r2, [r3, #8]
 800b9f0:	60da      	str	r2, [r3, #12]
 800b9f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b9f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9f8:	22bc      	movs	r2, #188	; 0xbc
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f011 f9a1 	bl	801cd44 <memset>
  if(uartHandle->Instance==UART4)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4ac2      	ldr	r2, [pc, #776]	; (800bd10 <HAL_UART_MspInit+0x334>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d14a      	bne.n	800baa2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800ba10:	2300      	movs	r3, #0
 800ba12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ba16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f007 f9dc 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800ba26:	f7ff f981 	bl	800ad2c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ba2a:	4bba      	ldr	r3, [pc, #744]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800ba2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba30:	4ab8      	ldr	r2, [pc, #736]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800ba32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ba3a:	4bb6      	ldr	r3, [pc, #728]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800ba3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba46:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba48:	4bb2      	ldr	r3, [pc, #712]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800ba4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba4e:	4ab1      	ldr	r2, [pc, #708]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800ba50:	f043 0301 	orr.w	r3, r3, #1
 800ba54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ba58:	4bae      	ldr	r3, [pc, #696]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800ba5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ba66:	2303      	movs	r3, #3
 800ba68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba72:	2300      	movs	r3, #0
 800ba74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800ba7e:	2308      	movs	r3, #8
 800ba80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800ba88:	4619      	mov	r1, r3
 800ba8a:	48a3      	ldr	r0, [pc, #652]	; (800bd18 <HAL_UART_MspInit+0x33c>)
 800ba8c:	f003 fd54 	bl	800f538 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800ba90:	2200      	movs	r2, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	2034      	movs	r0, #52	; 0x34
 800ba96:	f000 fcfc 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800ba9a:	2034      	movs	r0, #52	; 0x34
 800ba9c:	f000 fd13 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800baa0:	e130      	b.n	800bd04 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a9d      	ldr	r2, [pc, #628]	; (800bd1c <HAL_UART_MspInit+0x340>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d143      	bne.n	800bb34 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800baac:	2302      	movs	r3, #2
 800baae:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800baba:	4618      	mov	r0, r3
 800babc:	f007 f98c 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <HAL_UART_MspInit+0xee>
      Error_Handler();
 800bac6:	f7ff f931 	bl	800ad2c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800baca:	4b92      	ldr	r3, [pc, #584]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bacc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bad0:	4a90      	ldr	r2, [pc, #576]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bad6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bada:	4b8e      	ldr	r3, [pc, #568]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800badc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bae0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bae8:	4b8a      	ldr	r3, [pc, #552]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800baea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800baee:	4a89      	ldr	r2, [pc, #548]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800baf0:	f043 0310 	orr.w	r3, r3, #16
 800baf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800baf8:	4b86      	ldr	r3, [pc, #536]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bafa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bafe:	f003 0310 	and.w	r3, r3, #16
 800bb02:	623b      	str	r3, [r7, #32]
 800bb04:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800bb06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800bb0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb14:	2300      	movs	r3, #0
 800bb16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800bb20:	2307      	movs	r3, #7
 800bb22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bb26:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	487c      	ldr	r0, [pc, #496]	; (800bd20 <HAL_UART_MspInit+0x344>)
 800bb2e:	f003 fd03 	bl	800f538 <HAL_GPIO_Init>
}
 800bb32:	e0e7      	b.n	800bd04 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a7a      	ldr	r2, [pc, #488]	; (800bd24 <HAL_UART_MspInit+0x348>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d14a      	bne.n	800bbd4 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800bb3e:	2302      	movs	r3, #2
 800bb40:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bb42:	2300      	movs	r3, #0
 800bb44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f007 f943 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <HAL_UART_MspInit+0x180>
      Error_Handler();
 800bb58:	f7ff f8e8 	bl	800ad2c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800bb5c:	4b6d      	ldr	r3, [pc, #436]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bb5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb62:	4a6c      	ldr	r2, [pc, #432]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bb64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bb6c:	4b69      	ldr	r3, [pc, #420]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bb6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bb7a:	4b66      	ldr	r3, [pc, #408]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bb7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb80:	4a64      	ldr	r2, [pc, #400]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bb82:	f043 0310 	orr.w	r3, r3, #16
 800bb86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bb8a:	4b62      	ldr	r3, [pc, #392]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bb8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb90:	f003 0310 	and.w	r3, r3, #16
 800bb94:	61bb      	str	r3, [r7, #24]
 800bb96:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb9e:	2302      	movs	r3, #2
 800bba0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800bbb0:	2308      	movs	r3, #8
 800bbb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bbb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4858      	ldr	r0, [pc, #352]	; (800bd20 <HAL_UART_MspInit+0x344>)
 800bbbe:	f003 fcbb 	bl	800f538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	2053      	movs	r0, #83	; 0x53
 800bbc8:	f000 fc63 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800bbcc:	2053      	movs	r0, #83	; 0x53
 800bbce:	f000 fc7a 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
}
 800bbd2:	e097      	b.n	800bd04 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a53      	ldr	r2, [pc, #332]	; (800bd28 <HAL_UART_MspInit+0x34c>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d142      	bne.n	800bc64 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800bbde:	2302      	movs	r3, #2
 800bbe0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bbe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbec:	4618      	mov	r0, r3
 800bbee:	f007 f8f3 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <HAL_UART_MspInit+0x220>
      Error_Handler();
 800bbf8:	f7ff f898 	bl	800ad2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800bbfc:	4b45      	ldr	r3, [pc, #276]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bbfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc02:	4a44      	ldr	r2, [pc, #272]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bc0c:	4b41      	ldr	r3, [pc, #260]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc1a:	4b3e      	ldr	r3, [pc, #248]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc20:	4a3c      	ldr	r2, [pc, #240]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc2a:	4b3a      	ldr	r3, [pc, #232]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	613b      	str	r3, [r7, #16]
 800bc36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bc38:	230c      	movs	r3, #12
 800bc3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc3e:	2302      	movs	r3, #2
 800bc40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bc50:	2307      	movs	r3, #7
 800bc52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	482e      	ldr	r0, [pc, #184]	; (800bd18 <HAL_UART_MspInit+0x33c>)
 800bc5e:	f003 fc6b 	bl	800f538 <HAL_GPIO_Init>
}
 800bc62:	e04f      	b.n	800bd04 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a30      	ldr	r2, [pc, #192]	; (800bd2c <HAL_UART_MspInit+0x350>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d14a      	bne.n	800bd04 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800bc6e:	2302      	movs	r3, #2
 800bc70:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bc72:	2300      	movs	r3, #0
 800bc74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bc78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f007 f8ab 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 800bc88:	f7ff f850 	bl	800ad2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800bc8c:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc92:	4a20      	ldr	r2, [pc, #128]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bc9c:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bc9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bcaa:	4b1a      	ldr	r3, [pc, #104]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bcac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcb0:	4a18      	ldr	r2, [pc, #96]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bcb2:	f043 0308 	orr.w	r3, r3, #8
 800bcb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bcba:	4b16      	ldr	r3, [pc, #88]	; (800bd14 <HAL_UART_MspInit+0x338>)
 800bcbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcc0:	f003 0308 	and.w	r3, r3, #8
 800bcc4:	60bb      	str	r3, [r7, #8]
 800bcc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bcc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bccc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bce2:	2307      	movs	r3, #7
 800bce4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bce8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bcec:	4619      	mov	r1, r3
 800bcee:	4810      	ldr	r0, [pc, #64]	; (800bd30 <HAL_UART_MspInit+0x354>)
 800bcf0:	f003 fc22 	bl	800f538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	2027      	movs	r0, #39	; 0x27
 800bcfa:	f000 fbca 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800bcfe:	2027      	movs	r0, #39	; 0x27
 800bd00:	f000 fbe1 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
}
 800bd04:	bf00      	nop
 800bd06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	40004c00 	.word	0x40004c00
 800bd14:	58024400 	.word	0x58024400
 800bd18:	58020000 	.word	0x58020000
 800bd1c:	40007800 	.word	0x40007800
 800bd20:	58021000 	.word	0x58021000
 800bd24:	40007c00 	.word	0x40007c00
 800bd28:	40004400 	.word	0x40004400
 800bd2c:	40004800 	.word	0x40004800
 800bd30:	58020c00 	.word	0x58020c00

0800bd34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800bd34:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800bd38:	f7ff fae4 	bl	800b304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bd3c:	480c      	ldr	r0, [pc, #48]	; (800bd70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800bd3e:	490d      	ldr	r1, [pc, #52]	; (800bd74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800bd40:	4a0d      	ldr	r2, [pc, #52]	; (800bd78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800bd42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bd44:	e002      	b.n	800bd4c <LoopCopyDataInit>

0800bd46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bd46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bd48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bd4a:	3304      	adds	r3, #4

0800bd4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd50:	d3f9      	bcc.n	800bd46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd52:	4a0a      	ldr	r2, [pc, #40]	; (800bd7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800bd54:	4c0a      	ldr	r4, [pc, #40]	; (800bd80 <LoopFillZerobss+0x22>)
  movs r3, #0
 800bd56:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd58:	e001      	b.n	800bd5e <LoopFillZerobss>

0800bd5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd5c:	3204      	adds	r2, #4

0800bd5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd60:	d3fb      	bcc.n	800bd5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bd62:	f010 ff93 	bl	801cc8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd66:	f7fe fe55 	bl	800aa14 <main>
  bx  lr
 800bd6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bd6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800bd70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800bd74:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 800bd78:	08038bf0 	.word	0x08038bf0
  ldr r2, =_sbss
 800bd7c:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 800bd80:	24003768 	.word	0x24003768

0800bd84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bd84:	e7fe      	b.n	800bd84 <ADC3_IRQHandler>
	...

0800bd88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bd8e:	2003      	movs	r0, #3
 800bd90:	f000 fb74 	bl	800c47c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bd94:	f006 fe4a 	bl	8012a2c <HAL_RCC_GetSysClockFreq>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	4b15      	ldr	r3, [pc, #84]	; (800bdf0 <HAL_Init+0x68>)
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	0a1b      	lsrs	r3, r3, #8
 800bda0:	f003 030f 	and.w	r3, r3, #15
 800bda4:	4913      	ldr	r1, [pc, #76]	; (800bdf4 <HAL_Init+0x6c>)
 800bda6:	5ccb      	ldrb	r3, [r1, r3]
 800bda8:	f003 031f 	and.w	r3, r3, #31
 800bdac:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <HAL_Init+0x68>)
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	4a0e      	ldr	r2, [pc, #56]	; (800bdf4 <HAL_Init+0x6c>)
 800bdbc:	5cd3      	ldrb	r3, [r2, r3]
 800bdbe:	f003 031f 	and.w	r3, r3, #31
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc8:	4a0b      	ldr	r2, [pc, #44]	; (800bdf8 <HAL_Init+0x70>)
 800bdca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bdcc:	4a0b      	ldr	r2, [pc, #44]	; (800bdfc <HAL_Init+0x74>)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bdd2:	200f      	movs	r0, #15
 800bdd4:	f000 f814 	bl	800be00 <HAL_InitTick>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e002      	b.n	800bde8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bde2:	f7ff f8e5 	bl	800afb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	58024400 	.word	0x58024400
 800bdf4:	08038ac4 	.word	0x08038ac4
 800bdf8:	24000004 	.word	0x24000004
 800bdfc:	24000000 	.word	0x24000000

0800be00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800be08:	4b15      	ldr	r3, [pc, #84]	; (800be60 <HAL_InitTick+0x60>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e021      	b.n	800be58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800be14:	4b13      	ldr	r3, [pc, #76]	; (800be64 <HAL_InitTick+0x64>)
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b11      	ldr	r3, [pc, #68]	; (800be60 <HAL_InitTick+0x60>)
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	4619      	mov	r1, r3
 800be1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be22:	fbb3 f3f1 	udiv	r3, r3, r1
 800be26:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 fb59 	bl	800c4e2 <HAL_SYSTICK_Config>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e00e      	b.n	800be58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b0f      	cmp	r3, #15
 800be3e:	d80a      	bhi.n	800be56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800be40:	2200      	movs	r2, #0
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be48:	f000 fb23 	bl	800c492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800be4c:	4a06      	ldr	r2, [pc, #24]	; (800be68 <HAL_InitTick+0x68>)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	e000      	b.n	800be58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	2400000c 	.word	0x2400000c
 800be64:	24000000 	.word	0x24000000
 800be68:	24000008 	.word	0x24000008

0800be6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800be70:	4b06      	ldr	r3, [pc, #24]	; (800be8c <HAL_IncTick+0x20>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	4b06      	ldr	r3, [pc, #24]	; (800be90 <HAL_IncTick+0x24>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4413      	add	r3, r2
 800be7c:	4a04      	ldr	r2, [pc, #16]	; (800be90 <HAL_IncTick+0x24>)
 800be7e:	6013      	str	r3, [r2, #0]
}
 800be80:	bf00      	nop
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	2400000c 	.word	0x2400000c
 800be90:	24001b44 	.word	0x24001b44

0800be94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800be94:	b480      	push	{r7}
 800be96:	af00      	add	r7, sp, #0
  return uwTick;
 800be98:	4b03      	ldr	r3, [pc, #12]	; (800bea8 <HAL_GetTick+0x14>)
 800be9a:	681b      	ldr	r3, [r3, #0]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	24001b44 	.word	0x24001b44

0800beac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800beb4:	f7ff ffee 	bl	800be94 <HAL_GetTick>
 800beb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bec4:	d005      	beq.n	800bed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bec6:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <HAL_Delay+0x44>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4413      	add	r3, r2
 800bed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bed2:	bf00      	nop
 800bed4:	f7ff ffde 	bl	800be94 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d8f7      	bhi.n	800bed4 <HAL_Delay+0x28>
  {
  }
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	2400000c 	.word	0x2400000c

0800bef4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800bef4:	b480      	push	{r7}
 800bef6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800bef8:	4b03      	ldr	r3, [pc, #12]	; (800bf08 <HAL_GetREVID+0x14>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	0c1b      	lsrs	r3, r3, #16
}
 800befe:	4618      	mov	r0, r3
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	5c001000 	.word	0x5c001000

0800bf0c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d102      	bne.n	800bf28 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	77fb      	strb	r3, [r7, #31]
 800bf26:	e10e      	b.n	800c146 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf36:	d102      	bne.n	800bf3e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	77fb      	strb	r3, [r7, #31]
 800bf3c:	e103      	b.n	800c146 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d109      	bne.n	800bf5e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7fe fae1 	bl	800a520 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0304 	and.w	r3, r3, #4
 800bf68:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bf72:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800bf78:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800bf7e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800bf84:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	4b6e      	ldr	r3, [pc, #440]	; (800c150 <HAL_COMP_Init+0x244>)
 800bf96:	4013      	ands	r3, r2
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	6812      	ldr	r2, [r2, #0]
 800bf9c:	6979      	ldr	r1, [r7, #20]
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	2b10      	cmp	r3, #16
 800bfa8:	d108      	bne.n	800bfbc <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f042 0210 	orr.w	r2, r2, #16
 800bfb8:	601a      	str	r2, [r3, #0]
 800bfba:	e007      	b.n	800bfcc <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0210 	bic.w	r2, r2, #16
 800bfca:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0304 	and.w	r3, r3, #4
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d016      	beq.n	800c008 <HAL_COMP_Init+0xfc>
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d013      	beq.n	800c008 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bfe0:	4b5c      	ldr	r3, [pc, #368]	; (800c154 <HAL_COMP_Init+0x248>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	099b      	lsrs	r3, r3, #6
 800bfe6:	4a5c      	ldr	r2, [pc, #368]	; (800c158 <HAL_COMP_Init+0x24c>)
 800bfe8:	fba2 2303 	umull	r2, r3, r2, r3
 800bfec:	099b      	lsrs	r3, r3, #6
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	4613      	mov	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800bffa:	e002      	b.n	800c002 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3b01      	subs	r3, #1
 800c000:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1f9      	bne.n	800bffc <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a53      	ldr	r2, [pc, #332]	; (800c15c <HAL_COMP_Init+0x250>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d102      	bne.n	800c018 <HAL_COMP_Init+0x10c>
 800c012:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c016:	e001      	b.n	800c01c <HAL_COMP_Init+0x110>
 800c018:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c01c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	f003 0303 	and.w	r3, r3, #3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d06d      	beq.n	800c106 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	f003 0310 	and.w	r3, r3, #16
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800c036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	4313      	orrs	r3, r2
 800c044:	600b      	str	r3, [r1, #0]
 800c046:	e008      	b.n	800c05a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800c048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	43db      	mvns	r3, r3
 800c052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c056:	4013      	ands	r3, r2
 800c058:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	f003 0320 	and.w	r3, r3, #32
 800c062:	2b00      	cmp	r3, #0
 800c064:	d008      	beq.n	800c078 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800c066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	4313      	orrs	r3, r2
 800c074:	604b      	str	r3, [r1, #4]
 800c076:	e008      	b.n	800c08a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800c078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	43db      	mvns	r3, r3
 800c082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c086:	4013      	ands	r3, r2
 800c088:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800c08a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	f003 0302 	and.w	r3, r3, #2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00a      	beq.n	800c0b6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800c0a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c0a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c0b4:	e00a      	b.n	800c0cc <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800c0b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	43db      	mvns	r3, r3
 800c0c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a1b      	ldr	r3, [r3, #32]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00a      	beq.n	800c0ee <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800c0d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0dc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c0e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800c0ec:	e021      	b.n	800c132 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800c0ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	43db      	mvns	r3, r3
 800c0fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0fe:	4013      	ands	r3, r2
 800c100:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800c104:	e015      	b.n	800c132 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800c106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c10a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	43db      	mvns	r3, r3
 800c112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c116:	4013      	ands	r3, r2
 800c118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800c11c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c120:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	43db      	mvns	r3, r3
 800c128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c12c:	4013      	ands	r3, r2
 800c12e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d103      	bne.n	800c146 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 800c146:	7ffb      	ldrb	r3, [r7, #31]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	f0e8cce1 	.word	0xf0e8cce1
 800c154:	24000000 	.word	0x24000000
 800c158:	053e2d63 	.word	0x053e2d63
 800c15c:	5800380c 	.word	0x5800380c

0800c160 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800c168:	2300      	movs	r3, #0
 800c16a:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d102      	bne.n	800c17c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	73fb      	strb	r3, [r7, #15]
 800c17a:	e030      	b.n	800c1de <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c18a:	d102      	bne.n	800c192 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	73fb      	strb	r3, [r7, #15]
 800c190:	e025      	b.n	800c1de <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d11d      	bne.n	800c1da <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f042 0201 	orr.w	r2, r2, #1
 800c1ac:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c1b6:	4b0d      	ldr	r3, [pc, #52]	; (800c1ec <HAL_COMP_Start+0x8c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	099b      	lsrs	r3, r3, #6
 800c1bc:	4a0c      	ldr	r2, [pc, #48]	; (800c1f0 <HAL_COMP_Start+0x90>)
 800c1be:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c2:	099b      	lsrs	r3, r3, #6
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800c1ca:	e002      	b.n	800c1d2 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1f9      	bne.n	800c1cc <HAL_COMP_Start+0x6c>
 800c1d8:	e001      	b.n	800c1de <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	24000000 	.word	0x24000000
 800c1f0:	053e2d63 	.word	0x053e2d63

0800c1f4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a33      	ldr	r2, [pc, #204]	; (800c2d0 <HAL_COMP_IRQHandler+0xdc>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d102      	bne.n	800c20c <HAL_COMP_IRQHandler+0x18>
 800c206:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c20a:	e001      	b.n	800c210 <HAL_COMP_IRQHandler+0x1c>
 800c20c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c210:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800c212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4013      	ands	r3, r2
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d014      	beq.n	800c24c <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800c222:	4b2c      	ldr	r3, [pc, #176]	; (800c2d4 <HAL_COMP_IRQHandler+0xe0>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 0310 	and.w	r3, r3, #16
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d006      	beq.n	800c23c <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800c22e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c232:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800c236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c23a:	e004      	b.n	800c246 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 800c23c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f7fe fd08 	bl	800ac5c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c256:	2b40      	cmp	r3, #64	; 0x40
 800c258:	d136      	bne.n	800c2c8 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800c25a:	4b1f      	ldr	r3, [pc, #124]	; (800c2d8 <HAL_COMP_IRQHandler+0xe4>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c266:	d101      	bne.n	800c26c <HAL_COMP_IRQHandler+0x78>
 800c268:	2301      	movs	r3, #1
 800c26a:	e000      	b.n	800c26e <HAL_COMP_IRQHandler+0x7a>
 800c26c:	2300      	movs	r3, #0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800c272:	4b19      	ldr	r3, [pc, #100]	; (800c2d8 <HAL_COMP_IRQHandler+0xe4>)
 800c274:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c278:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c288:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 800c28a:	4b13      	ldr	r3, [pc, #76]	; (800c2d8 <HAL_COMP_IRQHandler+0xe4>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c296:	d101      	bne.n	800c29c <HAL_COMP_IRQHandler+0xa8>
 800c298:	2301      	movs	r3, #1
 800c29a:	e000      	b.n	800c29e <HAL_COMP_IRQHandler+0xaa>
 800c29c:	2300      	movs	r3, #0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00b      	beq.n	800c2ba <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800c2a2:	4b0d      	ldr	r3, [pc, #52]	; (800c2d8 <HAL_COMP_IRQHandler+0xe4>)
 800c2a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c2a8:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2b8:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7fe fcca 	bl	800ac5c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	5800380c 	.word	0x5800380c
 800c2d4:	58003810 	.word	0x58003810
 800c2d8:	58003800 	.word	0x58003800

0800c2dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f003 0307 	and.w	r3, r3, #7
 800c2ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c2ec:	4b0b      	ldr	r3, [pc, #44]	; (800c31c <__NVIC_SetPriorityGrouping+0x40>)
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c304:	4b06      	ldr	r3, [pc, #24]	; (800c320 <__NVIC_SetPriorityGrouping+0x44>)
 800c306:	4313      	orrs	r3, r2
 800c308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c30a:	4a04      	ldr	r2, [pc, #16]	; (800c31c <__NVIC_SetPriorityGrouping+0x40>)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	60d3      	str	r3, [r2, #12]
}
 800c310:	bf00      	nop
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	e000ed00 	.word	0xe000ed00
 800c320:	05fa0000 	.word	0x05fa0000

0800c324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c324:	b480      	push	{r7}
 800c326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c328:	4b04      	ldr	r3, [pc, #16]	; (800c33c <__NVIC_GetPriorityGrouping+0x18>)
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	0a1b      	lsrs	r3, r3, #8
 800c32e:	f003 0307 	and.w	r3, r3, #7
}
 800c332:	4618      	mov	r0, r3
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	e000ed00 	.word	0xe000ed00

0800c340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c34a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	db0b      	blt.n	800c36a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c352:	88fb      	ldrh	r3, [r7, #6]
 800c354:	f003 021f 	and.w	r2, r3, #31
 800c358:	4907      	ldr	r1, [pc, #28]	; (800c378 <__NVIC_EnableIRQ+0x38>)
 800c35a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c35e:	095b      	lsrs	r3, r3, #5
 800c360:	2001      	movs	r0, #1
 800c362:	fa00 f202 	lsl.w	r2, r0, r2
 800c366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c36a:	bf00      	nop
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	e000e100 	.word	0xe000e100

0800c37c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	6039      	str	r1, [r7, #0]
 800c386:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	db0a      	blt.n	800c3a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	b2da      	uxtb	r2, r3
 800c394:	490c      	ldr	r1, [pc, #48]	; (800c3c8 <__NVIC_SetPriority+0x4c>)
 800c396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c39a:	0112      	lsls	r2, r2, #4
 800c39c:	b2d2      	uxtb	r2, r2
 800c39e:	440b      	add	r3, r1
 800c3a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c3a4:	e00a      	b.n	800c3bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	4908      	ldr	r1, [pc, #32]	; (800c3cc <__NVIC_SetPriority+0x50>)
 800c3ac:	88fb      	ldrh	r3, [r7, #6]
 800c3ae:	f003 030f 	and.w	r3, r3, #15
 800c3b2:	3b04      	subs	r3, #4
 800c3b4:	0112      	lsls	r2, r2, #4
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	440b      	add	r3, r1
 800c3ba:	761a      	strb	r2, [r3, #24]
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	e000e100 	.word	0xe000e100
 800c3cc:	e000ed00 	.word	0xe000ed00

0800c3d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b089      	sub	sp, #36	; 0x24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	f1c3 0307 	rsb	r3, r3, #7
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	bf28      	it	cs
 800c3ee:	2304      	movcs	r3, #4
 800c3f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	2b06      	cmp	r3, #6
 800c3f8:	d902      	bls.n	800c400 <NVIC_EncodePriority+0x30>
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	3b03      	subs	r3, #3
 800c3fe:	e000      	b.n	800c402 <NVIC_EncodePriority+0x32>
 800c400:	2300      	movs	r3, #0
 800c402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	fa02 f303 	lsl.w	r3, r2, r3
 800c40e:	43da      	mvns	r2, r3
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	401a      	ands	r2, r3
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	fa01 f303 	lsl.w	r3, r1, r3
 800c422:	43d9      	mvns	r1, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c428:	4313      	orrs	r3, r2
         );
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3724      	adds	r7, #36	; 0x24
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
	...

0800c438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3b01      	subs	r3, #1
 800c444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c448:	d301      	bcc.n	800c44e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c44a:	2301      	movs	r3, #1
 800c44c:	e00f      	b.n	800c46e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c44e:	4a0a      	ldr	r2, [pc, #40]	; (800c478 <SysTick_Config+0x40>)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3b01      	subs	r3, #1
 800c454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c456:	210f      	movs	r1, #15
 800c458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c45c:	f7ff ff8e 	bl	800c37c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c460:	4b05      	ldr	r3, [pc, #20]	; (800c478 <SysTick_Config+0x40>)
 800c462:	2200      	movs	r2, #0
 800c464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c466:	4b04      	ldr	r3, [pc, #16]	; (800c478 <SysTick_Config+0x40>)
 800c468:	2207      	movs	r2, #7
 800c46a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	e000e010 	.word	0xe000e010

0800c47c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff ff29 	bl	800c2dc <__NVIC_SetPriorityGrouping>
}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b086      	sub	sp, #24
 800c496:	af00      	add	r7, sp, #0
 800c498:	4603      	mov	r3, r0
 800c49a:	60b9      	str	r1, [r7, #8]
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c4a0:	f7ff ff40 	bl	800c324 <__NVIC_GetPriorityGrouping>
 800c4a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	6978      	ldr	r0, [r7, #20]
 800c4ac:	f7ff ff90 	bl	800c3d0 <NVIC_EncodePriority>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7ff ff5f 	bl	800c37c <__NVIC_SetPriority>
}
 800c4be:	bf00      	nop
 800c4c0:	3718      	adds	r7, #24
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b082      	sub	sp, #8
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c4d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff ff33 	bl	800c340 <__NVIC_EnableIRQ>
}
 800c4da:	bf00      	nop
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7ff ffa4 	bl	800c438 <SysTick_Config>
 800c4f0:	4603      	mov	r3, r0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e014      	b.n	800c536 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	791b      	ldrb	r3, [r3, #4]
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	d105      	bne.n	800c522 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7fe f87f 	bl	800a620 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2202      	movs	r2, #2
 800c526:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800c53e:	b480      	push	{r7}
 800c540:	b083      	sub	sp, #12
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	795b      	ldrb	r3, [r3, #5]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d101      	bne.n	800c554 <HAL_DAC_Start+0x16>
 800c550:	2302      	movs	r3, #2
 800c552:	e040      	b.n	800c5d6 <HAL_DAC_Start+0x98>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2202      	movs	r2, #2
 800c55e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6819      	ldr	r1, [r3, #0]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	f003 0310 	and.w	r3, r3, #16
 800c56c:	2201      	movs	r2, #1
 800c56e:	409a      	lsls	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	430a      	orrs	r2, r1
 800c576:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10f      	bne.n	800c59e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d11d      	bne.n	800c5c8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685a      	ldr	r2, [r3, #4]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0201 	orr.w	r2, r2, #1
 800c59a:	605a      	str	r2, [r3, #4]
 800c59c:	e014      	b.n	800c5c8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	f003 0310 	and.w	r3, r3, #16
 800c5ae:	2102      	movs	r1, #2
 800c5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d107      	bne.n	800c5c8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f042 0202 	orr.w	r2, r2, #2
 800c5c6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b087      	sub	sp, #28
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	60b9      	str	r1, [r7, #8]
 800c5ec:	607a      	str	r2, [r7, #4]
 800c5ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d105      	bne.n	800c60c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4413      	add	r3, r2
 800c606:	3308      	adds	r3, #8
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	e004      	b.n	800c616 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4413      	add	r3, r2
 800c612:	3314      	adds	r3, #20
 800c614:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	461a      	mov	r2, r3
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	371c      	adds	r7, #28
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	795b      	ldrb	r3, [r3, #5]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d101      	bne.n	800c644 <HAL_DAC_ConfigChannel+0x18>
 800c640:	2302      	movs	r3, #2
 800c642:	e11d      	b.n	800c880 <HAL_DAC_ConfigChannel+0x254>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2201      	movs	r2, #1
 800c648:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2202      	movs	r2, #2
 800c64e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b04      	cmp	r3, #4
 800c656:	d174      	bne.n	800c742 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800c658:	f7ff fc1c 	bl	800be94 <HAL_GetTick>
 800c65c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d134      	bne.n	800c6ce <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c664:	e011      	b.n	800c68a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c666:	f7ff fc15 	bl	800be94 <HAL_GetTick>
 800c66a:	4602      	mov	r2, r0
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	2b01      	cmp	r3, #1
 800c672:	d90a      	bls.n	800c68a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	f043 0208 	orr.w	r2, r3, #8
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2203      	movs	r2, #3
 800c684:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	e0fa      	b.n	800c880 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c690:	4b7d      	ldr	r3, [pc, #500]	; (800c888 <HAL_DAC_ConfigChannel+0x25c>)
 800c692:	4013      	ands	r3, r2
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1e6      	bne.n	800c666 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800c698:	2001      	movs	r0, #1
 800c69a:	f7ff fc07 	bl	800beac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	6992      	ldr	r2, [r2, #24]
 800c6a6:	641a      	str	r2, [r3, #64]	; 0x40
 800c6a8:	e01e      	b.n	800c6e8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c6aa:	f7ff fbf3 	bl	800be94 <HAL_GetTick>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d90a      	bls.n	800c6ce <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f043 0208 	orr.w	r2, r3, #8
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2203      	movs	r2, #3
 800c6c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	e0d8      	b.n	800c880 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dbe8      	blt.n	800c6aa <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800c6d8:	2001      	movs	r0, #1
 800c6da:	f7ff fbe7 	bl	800beac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68ba      	ldr	r2, [r7, #8]
 800c6e4:	6992      	ldr	r2, [r2, #24]
 800c6e6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f003 0310 	and.w	r3, r3, #16
 800c6f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6fc:	43db      	mvns	r3, r3
 800c6fe:	ea02 0103 	and.w	r1, r2, r3
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	69da      	ldr	r2, [r3, #28]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f003 0310 	and.w	r3, r3, #16
 800c70c:	409a      	lsls	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f003 0310 	and.w	r3, r3, #16
 800c722:	21ff      	movs	r1, #255	; 0xff
 800c724:	fa01 f303 	lsl.w	r3, r1, r3
 800c728:	43db      	mvns	r3, r3
 800c72a:	ea02 0103 	and.w	r1, r2, r3
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	6a1a      	ldr	r2, [r3, #32]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f003 0310 	and.w	r3, r3, #16
 800c738:	409a      	lsls	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	430a      	orrs	r2, r1
 800c740:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d11d      	bne.n	800c786 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c750:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f003 0310 	and.w	r3, r3, #16
 800c758:	221f      	movs	r2, #31
 800c75a:	fa02 f303 	lsl.w	r3, r2, r3
 800c75e:	43db      	mvns	r3, r3
 800c760:	697a      	ldr	r2, [r7, #20]
 800c762:	4013      	ands	r3, r2
 800c764:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f003 0310 	and.w	r3, r3, #16
 800c772:	693a      	ldr	r2, [r7, #16]
 800c774:	fa02 f303 	lsl.w	r3, r2, r3
 800c778:	697a      	ldr	r2, [r7, #20]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f003 0310 	and.w	r3, r3, #16
 800c794:	2207      	movs	r2, #7
 800c796:	fa02 f303 	lsl.w	r3, r2, r3
 800c79a:	43db      	mvns	r3, r3
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	4013      	ands	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d102      	bne.n	800c7b0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e00f      	b.n	800c7d0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d102      	bne.n	800c7be <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	61fb      	str	r3, [r7, #28]
 800c7bc:	e008      	b.n	800c7d0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d102      	bne.n	800c7cc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	61fb      	str	r3, [r7, #28]
 800c7ca:	e001      	b.n	800c7d0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	69fa      	ldr	r2, [r7, #28]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f003 0310 	and.w	r3, r3, #16
 800c7e6:	693a      	ldr	r2, [r7, #16]
 800c7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6819      	ldr	r1, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f003 0310 	and.w	r3, r3, #16
 800c806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c80a:	fa02 f303 	lsl.w	r3, r2, r3
 800c80e:	43da      	mvns	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	400a      	ands	r2, r1
 800c816:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f003 0310 	and.w	r3, r3, #16
 800c826:	f640 72fe 	movw	r2, #4094	; 0xffe
 800c82a:	fa02 f303 	lsl.w	r3, r2, r3
 800c82e:	43db      	mvns	r3, r3
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	4013      	ands	r3, r2
 800c834:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f003 0310 	and.w	r3, r3, #16
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	fa02 f303 	lsl.w	r3, r2, r3
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6819      	ldr	r1, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f003 0310 	and.w	r3, r3, #16
 800c862:	22c0      	movs	r2, #192	; 0xc0
 800c864:	fa02 f303 	lsl.w	r3, r2, r3
 800c868:	43da      	mvns	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	400a      	ands	r2, r1
 800c870:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2201      	movs	r2, #1
 800c876:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3720      	adds	r7, #32
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	20008000 	.word	0x20008000

0800c88c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800c894:	f7ff fafe 	bl	800be94 <HAL_GetTick>
 800c898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e316      	b.n	800ced2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a66      	ldr	r2, [pc, #408]	; (800ca44 <HAL_DMA_Init+0x1b8>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d04a      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a65      	ldr	r2, [pc, #404]	; (800ca48 <HAL_DMA_Init+0x1bc>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d045      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a63      	ldr	r2, [pc, #396]	; (800ca4c <HAL_DMA_Init+0x1c0>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d040      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a62      	ldr	r2, [pc, #392]	; (800ca50 <HAL_DMA_Init+0x1c4>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d03b      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a60      	ldr	r2, [pc, #384]	; (800ca54 <HAL_DMA_Init+0x1c8>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d036      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a5f      	ldr	r2, [pc, #380]	; (800ca58 <HAL_DMA_Init+0x1cc>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d031      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a5d      	ldr	r2, [pc, #372]	; (800ca5c <HAL_DMA_Init+0x1d0>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d02c      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a5c      	ldr	r2, [pc, #368]	; (800ca60 <HAL_DMA_Init+0x1d4>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d027      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a5a      	ldr	r2, [pc, #360]	; (800ca64 <HAL_DMA_Init+0x1d8>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d022      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a59      	ldr	r2, [pc, #356]	; (800ca68 <HAL_DMA_Init+0x1dc>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d01d      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a57      	ldr	r2, [pc, #348]	; (800ca6c <HAL_DMA_Init+0x1e0>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d018      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a56      	ldr	r2, [pc, #344]	; (800ca70 <HAL_DMA_Init+0x1e4>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d013      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a54      	ldr	r2, [pc, #336]	; (800ca74 <HAL_DMA_Init+0x1e8>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d00e      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a53      	ldr	r2, [pc, #332]	; (800ca78 <HAL_DMA_Init+0x1ec>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d009      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a51      	ldr	r2, [pc, #324]	; (800ca7c <HAL_DMA_Init+0x1f0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d004      	beq.n	800c944 <HAL_DMA_Init+0xb8>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a50      	ldr	r2, [pc, #320]	; (800ca80 <HAL_DMA_Init+0x1f4>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d101      	bne.n	800c948 <HAL_DMA_Init+0xbc>
 800c944:	2301      	movs	r3, #1
 800c946:	e000      	b.n	800c94a <HAL_DMA_Init+0xbe>
 800c948:	2300      	movs	r3, #0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 813b 	beq.w	800cbc6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2202      	movs	r2, #2
 800c954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a37      	ldr	r2, [pc, #220]	; (800ca44 <HAL_DMA_Init+0x1b8>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d04a      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a36      	ldr	r2, [pc, #216]	; (800ca48 <HAL_DMA_Init+0x1bc>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d045      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a34      	ldr	r2, [pc, #208]	; (800ca4c <HAL_DMA_Init+0x1c0>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d040      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a33      	ldr	r2, [pc, #204]	; (800ca50 <HAL_DMA_Init+0x1c4>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d03b      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a31      	ldr	r2, [pc, #196]	; (800ca54 <HAL_DMA_Init+0x1c8>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d036      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a30      	ldr	r2, [pc, #192]	; (800ca58 <HAL_DMA_Init+0x1cc>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d031      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a2e      	ldr	r2, [pc, #184]	; (800ca5c <HAL_DMA_Init+0x1d0>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d02c      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a2d      	ldr	r2, [pc, #180]	; (800ca60 <HAL_DMA_Init+0x1d4>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d027      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a2b      	ldr	r2, [pc, #172]	; (800ca64 <HAL_DMA_Init+0x1d8>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d022      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a2a      	ldr	r2, [pc, #168]	; (800ca68 <HAL_DMA_Init+0x1dc>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d01d      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a28      	ldr	r2, [pc, #160]	; (800ca6c <HAL_DMA_Init+0x1e0>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d018      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a27      	ldr	r2, [pc, #156]	; (800ca70 <HAL_DMA_Init+0x1e4>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d013      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a25      	ldr	r2, [pc, #148]	; (800ca74 <HAL_DMA_Init+0x1e8>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00e      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a24      	ldr	r2, [pc, #144]	; (800ca78 <HAL_DMA_Init+0x1ec>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d009      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a22      	ldr	r2, [pc, #136]	; (800ca7c <HAL_DMA_Init+0x1f0>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d004      	beq.n	800ca00 <HAL_DMA_Init+0x174>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a21      	ldr	r2, [pc, #132]	; (800ca80 <HAL_DMA_Init+0x1f4>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d108      	bne.n	800ca12 <HAL_DMA_Init+0x186>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f022 0201 	bic.w	r2, r2, #1
 800ca0e:	601a      	str	r2, [r3, #0]
 800ca10:	e007      	b.n	800ca22 <HAL_DMA_Init+0x196>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f022 0201 	bic.w	r2, r2, #1
 800ca20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ca22:	e02f      	b.n	800ca84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ca24:	f7ff fa36 	bl	800be94 <HAL_GetTick>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	2b05      	cmp	r3, #5
 800ca30:	d928      	bls.n	800ca84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2220      	movs	r2, #32
 800ca36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2203      	movs	r2, #3
 800ca3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e246      	b.n	800ced2 <HAL_DMA_Init+0x646>
 800ca44:	40020010 	.word	0x40020010
 800ca48:	40020028 	.word	0x40020028
 800ca4c:	40020040 	.word	0x40020040
 800ca50:	40020058 	.word	0x40020058
 800ca54:	40020070 	.word	0x40020070
 800ca58:	40020088 	.word	0x40020088
 800ca5c:	400200a0 	.word	0x400200a0
 800ca60:	400200b8 	.word	0x400200b8
 800ca64:	40020410 	.word	0x40020410
 800ca68:	40020428 	.word	0x40020428
 800ca6c:	40020440 	.word	0x40020440
 800ca70:	40020458 	.word	0x40020458
 800ca74:	40020470 	.word	0x40020470
 800ca78:	40020488 	.word	0x40020488
 800ca7c:	400204a0 	.word	0x400204a0
 800ca80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1c8      	bne.n	800ca24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	4b83      	ldr	r3, [pc, #524]	; (800ccac <HAL_DMA_Init+0x420>)
 800ca9e:	4013      	ands	r3, r2
 800caa0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800caaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cab6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cac2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6a1b      	ldr	r3, [r3, #32]
 800cac8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	4313      	orrs	r3, r2
 800cace:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	2b04      	cmp	r3, #4
 800cad6:	d107      	bne.n	800cae8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae0:	4313      	orrs	r3, r2
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800cae8:	4b71      	ldr	r3, [pc, #452]	; (800ccb0 <HAL_DMA_Init+0x424>)
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	4b71      	ldr	r3, [pc, #452]	; (800ccb4 <HAL_DMA_Init+0x428>)
 800caee:	4013      	ands	r3, r2
 800caf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caf4:	d328      	bcc.n	800cb48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	2b28      	cmp	r3, #40	; 0x28
 800cafc:	d903      	bls.n	800cb06 <HAL_DMA_Init+0x27a>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	2b2e      	cmp	r3, #46	; 0x2e
 800cb04:	d917      	bls.n	800cb36 <HAL_DMA_Init+0x2aa>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	2b3e      	cmp	r3, #62	; 0x3e
 800cb0c:	d903      	bls.n	800cb16 <HAL_DMA_Init+0x28a>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	2b42      	cmp	r3, #66	; 0x42
 800cb14:	d90f      	bls.n	800cb36 <HAL_DMA_Init+0x2aa>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	2b46      	cmp	r3, #70	; 0x46
 800cb1c:	d903      	bls.n	800cb26 <HAL_DMA_Init+0x29a>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	2b48      	cmp	r3, #72	; 0x48
 800cb24:	d907      	bls.n	800cb36 <HAL_DMA_Init+0x2aa>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	2b4e      	cmp	r3, #78	; 0x4e
 800cb2c:	d905      	bls.n	800cb3a <HAL_DMA_Init+0x2ae>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	2b52      	cmp	r3, #82	; 0x52
 800cb34:	d801      	bhi.n	800cb3a <HAL_DMA_Init+0x2ae>
 800cb36:	2301      	movs	r3, #1
 800cb38:	e000      	b.n	800cb3c <HAL_DMA_Init+0x2b0>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d003      	beq.n	800cb48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	f023 0307 	bic.w	r3, r3, #7
 800cb5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6e:	2b04      	cmp	r3, #4
 800cb70:	d117      	bne.n	800cba2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00e      	beq.n	800cba2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f002 fb4d 	bl	800f224 <DMA_CheckFifoParam>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d008      	beq.n	800cba2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2240      	movs	r2, #64	; 0x40
 800cb94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e197      	b.n	800ced2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f002 fa88 	bl	800f0c0 <DMA_CalcBaseAndBitshift>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbb8:	f003 031f 	and.w	r3, r3, #31
 800cbbc:	223f      	movs	r2, #63	; 0x3f
 800cbbe:	409a      	lsls	r2, r3
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	609a      	str	r2, [r3, #8]
 800cbc4:	e0cd      	b.n	800cd62 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a3b      	ldr	r2, [pc, #236]	; (800ccb8 <HAL_DMA_Init+0x42c>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d022      	beq.n	800cc16 <HAL_DMA_Init+0x38a>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a39      	ldr	r2, [pc, #228]	; (800ccbc <HAL_DMA_Init+0x430>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d01d      	beq.n	800cc16 <HAL_DMA_Init+0x38a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a38      	ldr	r2, [pc, #224]	; (800ccc0 <HAL_DMA_Init+0x434>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d018      	beq.n	800cc16 <HAL_DMA_Init+0x38a>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a36      	ldr	r2, [pc, #216]	; (800ccc4 <HAL_DMA_Init+0x438>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d013      	beq.n	800cc16 <HAL_DMA_Init+0x38a>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a35      	ldr	r2, [pc, #212]	; (800ccc8 <HAL_DMA_Init+0x43c>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d00e      	beq.n	800cc16 <HAL_DMA_Init+0x38a>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a33      	ldr	r2, [pc, #204]	; (800cccc <HAL_DMA_Init+0x440>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d009      	beq.n	800cc16 <HAL_DMA_Init+0x38a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a32      	ldr	r2, [pc, #200]	; (800ccd0 <HAL_DMA_Init+0x444>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d004      	beq.n	800cc16 <HAL_DMA_Init+0x38a>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a30      	ldr	r2, [pc, #192]	; (800ccd4 <HAL_DMA_Init+0x448>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d101      	bne.n	800cc1a <HAL_DMA_Init+0x38e>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e000      	b.n	800cc1c <HAL_DMA_Init+0x390>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 8097 	beq.w	800cd50 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a24      	ldr	r2, [pc, #144]	; (800ccb8 <HAL_DMA_Init+0x42c>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d021      	beq.n	800cc70 <HAL_DMA_Init+0x3e4>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a22      	ldr	r2, [pc, #136]	; (800ccbc <HAL_DMA_Init+0x430>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d01c      	beq.n	800cc70 <HAL_DMA_Init+0x3e4>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a21      	ldr	r2, [pc, #132]	; (800ccc0 <HAL_DMA_Init+0x434>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d017      	beq.n	800cc70 <HAL_DMA_Init+0x3e4>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a1f      	ldr	r2, [pc, #124]	; (800ccc4 <HAL_DMA_Init+0x438>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d012      	beq.n	800cc70 <HAL_DMA_Init+0x3e4>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a1e      	ldr	r2, [pc, #120]	; (800ccc8 <HAL_DMA_Init+0x43c>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00d      	beq.n	800cc70 <HAL_DMA_Init+0x3e4>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a1c      	ldr	r2, [pc, #112]	; (800cccc <HAL_DMA_Init+0x440>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d008      	beq.n	800cc70 <HAL_DMA_Init+0x3e4>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a1b      	ldr	r2, [pc, #108]	; (800ccd0 <HAL_DMA_Init+0x444>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d003      	beq.n	800cc70 <HAL_DMA_Init+0x3e4>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a19      	ldr	r2, [pc, #100]	; (800ccd4 <HAL_DMA_Init+0x448>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2202      	movs	r2, #2
 800cc76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	4b12      	ldr	r3, [pc, #72]	; (800ccd8 <HAL_DMA_Init+0x44c>)
 800cc8e:	4013      	ands	r3, r2
 800cc90:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	2b40      	cmp	r3, #64	; 0x40
 800cc98:	d020      	beq.n	800ccdc <HAL_DMA_Init+0x450>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	2b80      	cmp	r3, #128	; 0x80
 800cca0:	d102      	bne.n	800cca8 <HAL_DMA_Init+0x41c>
 800cca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cca6:	e01a      	b.n	800ccde <HAL_DMA_Init+0x452>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	e018      	b.n	800ccde <HAL_DMA_Init+0x452>
 800ccac:	fe10803f 	.word	0xfe10803f
 800ccb0:	5c001000 	.word	0x5c001000
 800ccb4:	ffff0000 	.word	0xffff0000
 800ccb8:	58025408 	.word	0x58025408
 800ccbc:	5802541c 	.word	0x5802541c
 800ccc0:	58025430 	.word	0x58025430
 800ccc4:	58025444 	.word	0x58025444
 800ccc8:	58025458 	.word	0x58025458
 800cccc:	5802546c 	.word	0x5802546c
 800ccd0:	58025480 	.word	0x58025480
 800ccd4:	58025494 	.word	0x58025494
 800ccd8:	fffe000f 	.word	0xfffe000f
 800ccdc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	68d2      	ldr	r2, [r2, #12]
 800cce2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cce4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ccec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ccf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ccfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800cd04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800cd0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	697a      	ldr	r2, [r7, #20]
 800cd1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	461a      	mov	r2, r3
 800cd22:	4b6e      	ldr	r3, [pc, #440]	; (800cedc <HAL_DMA_Init+0x650>)
 800cd24:	4413      	add	r3, r2
 800cd26:	4a6e      	ldr	r2, [pc, #440]	; (800cee0 <HAL_DMA_Init+0x654>)
 800cd28:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2c:	091b      	lsrs	r3, r3, #4
 800cd2e:	009a      	lsls	r2, r3, #2
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f002 f9c3 	bl	800f0c0 <DMA_CalcBaseAndBitshift>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd42:	f003 031f 	and.w	r3, r3, #31
 800cd46:	2201      	movs	r2, #1
 800cd48:	409a      	lsls	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	e008      	b.n	800cd62 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2240      	movs	r2, #64	; 0x40
 800cd54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2203      	movs	r2, #3
 800cd5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e0b7      	b.n	800ced2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a5f      	ldr	r2, [pc, #380]	; (800cee4 <HAL_DMA_Init+0x658>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d072      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a5d      	ldr	r2, [pc, #372]	; (800cee8 <HAL_DMA_Init+0x65c>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d06d      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a5c      	ldr	r2, [pc, #368]	; (800ceec <HAL_DMA_Init+0x660>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d068      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a5a      	ldr	r2, [pc, #360]	; (800cef0 <HAL_DMA_Init+0x664>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d063      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a59      	ldr	r2, [pc, #356]	; (800cef4 <HAL_DMA_Init+0x668>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d05e      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a57      	ldr	r2, [pc, #348]	; (800cef8 <HAL_DMA_Init+0x66c>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d059      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a56      	ldr	r2, [pc, #344]	; (800cefc <HAL_DMA_Init+0x670>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d054      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a54      	ldr	r2, [pc, #336]	; (800cf00 <HAL_DMA_Init+0x674>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d04f      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a53      	ldr	r2, [pc, #332]	; (800cf04 <HAL_DMA_Init+0x678>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d04a      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a51      	ldr	r2, [pc, #324]	; (800cf08 <HAL_DMA_Init+0x67c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d045      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a50      	ldr	r2, [pc, #320]	; (800cf0c <HAL_DMA_Init+0x680>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d040      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a4e      	ldr	r2, [pc, #312]	; (800cf10 <HAL_DMA_Init+0x684>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d03b      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a4d      	ldr	r2, [pc, #308]	; (800cf14 <HAL_DMA_Init+0x688>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d036      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a4b      	ldr	r2, [pc, #300]	; (800cf18 <HAL_DMA_Init+0x68c>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d031      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a4a      	ldr	r2, [pc, #296]	; (800cf1c <HAL_DMA_Init+0x690>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d02c      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a48      	ldr	r2, [pc, #288]	; (800cf20 <HAL_DMA_Init+0x694>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d027      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a47      	ldr	r2, [pc, #284]	; (800cf24 <HAL_DMA_Init+0x698>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d022      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a45      	ldr	r2, [pc, #276]	; (800cf28 <HAL_DMA_Init+0x69c>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d01d      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a44      	ldr	r2, [pc, #272]	; (800cf2c <HAL_DMA_Init+0x6a0>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d018      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a42      	ldr	r2, [pc, #264]	; (800cf30 <HAL_DMA_Init+0x6a4>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d013      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a41      	ldr	r2, [pc, #260]	; (800cf34 <HAL_DMA_Init+0x6a8>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d00e      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a3f      	ldr	r2, [pc, #252]	; (800cf38 <HAL_DMA_Init+0x6ac>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d009      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a3e      	ldr	r2, [pc, #248]	; (800cf3c <HAL_DMA_Init+0x6b0>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d004      	beq.n	800ce52 <HAL_DMA_Init+0x5c6>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a3c      	ldr	r2, [pc, #240]	; (800cf40 <HAL_DMA_Init+0x6b4>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d101      	bne.n	800ce56 <HAL_DMA_Init+0x5ca>
 800ce52:	2301      	movs	r3, #1
 800ce54:	e000      	b.n	800ce58 <HAL_DMA_Init+0x5cc>
 800ce56:	2300      	movs	r3, #0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d032      	beq.n	800cec2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f002 fa5d 	bl	800f31c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	2b80      	cmp	r3, #128	; 0x80
 800ce68:	d102      	bne.n	800ce70 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	685a      	ldr	r2, [r3, #4]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ce84:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d010      	beq.n	800ceb0 <HAL_DMA_Init+0x624>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	2b08      	cmp	r3, #8
 800ce94:	d80c      	bhi.n	800ceb0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f002 fada 	bl	800f450 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ceac:	605a      	str	r2, [r3, #4]
 800ceae:	e008      	b.n	800cec2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	a7fdabf8 	.word	0xa7fdabf8
 800cee0:	cccccccd 	.word	0xcccccccd
 800cee4:	40020010 	.word	0x40020010
 800cee8:	40020028 	.word	0x40020028
 800ceec:	40020040 	.word	0x40020040
 800cef0:	40020058 	.word	0x40020058
 800cef4:	40020070 	.word	0x40020070
 800cef8:	40020088 	.word	0x40020088
 800cefc:	400200a0 	.word	0x400200a0
 800cf00:	400200b8 	.word	0x400200b8
 800cf04:	40020410 	.word	0x40020410
 800cf08:	40020428 	.word	0x40020428
 800cf0c:	40020440 	.word	0x40020440
 800cf10:	40020458 	.word	0x40020458
 800cf14:	40020470 	.word	0x40020470
 800cf18:	40020488 	.word	0x40020488
 800cf1c:	400204a0 	.word	0x400204a0
 800cf20:	400204b8 	.word	0x400204b8
 800cf24:	58025408 	.word	0x58025408
 800cf28:	5802541c 	.word	0x5802541c
 800cf2c:	58025430 	.word	0x58025430
 800cf30:	58025444 	.word	0x58025444
 800cf34:	58025458 	.word	0x58025458
 800cf38:	5802546c 	.word	0x5802546c
 800cf3c:	58025480 	.word	0x58025480
 800cf40:	58025494 	.word	0x58025494

0800cf44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e226      	b.n	800d3ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d101      	bne.n	800cf6e <HAL_DMA_Start_IT+0x2a>
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	e21f      	b.n	800d3ae <HAL_DMA_Start_IT+0x46a>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	f040 820a 	bne.w	800d398 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2202      	movs	r2, #2
 800cf88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a68      	ldr	r2, [pc, #416]	; (800d138 <HAL_DMA_Start_IT+0x1f4>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d04a      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a66      	ldr	r2, [pc, #408]	; (800d13c <HAL_DMA_Start_IT+0x1f8>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d045      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a65      	ldr	r2, [pc, #404]	; (800d140 <HAL_DMA_Start_IT+0x1fc>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d040      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a63      	ldr	r2, [pc, #396]	; (800d144 <HAL_DMA_Start_IT+0x200>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d03b      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a62      	ldr	r2, [pc, #392]	; (800d148 <HAL_DMA_Start_IT+0x204>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d036      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a60      	ldr	r2, [pc, #384]	; (800d14c <HAL_DMA_Start_IT+0x208>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d031      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a5f      	ldr	r2, [pc, #380]	; (800d150 <HAL_DMA_Start_IT+0x20c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d02c      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a5d      	ldr	r2, [pc, #372]	; (800d154 <HAL_DMA_Start_IT+0x210>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d027      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a5c      	ldr	r2, [pc, #368]	; (800d158 <HAL_DMA_Start_IT+0x214>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d022      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a5a      	ldr	r2, [pc, #360]	; (800d15c <HAL_DMA_Start_IT+0x218>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d01d      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a59      	ldr	r2, [pc, #356]	; (800d160 <HAL_DMA_Start_IT+0x21c>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d018      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a57      	ldr	r2, [pc, #348]	; (800d164 <HAL_DMA_Start_IT+0x220>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d013      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a56      	ldr	r2, [pc, #344]	; (800d168 <HAL_DMA_Start_IT+0x224>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d00e      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a54      	ldr	r2, [pc, #336]	; (800d16c <HAL_DMA_Start_IT+0x228>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d009      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a53      	ldr	r2, [pc, #332]	; (800d170 <HAL_DMA_Start_IT+0x22c>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d004      	beq.n	800d032 <HAL_DMA_Start_IT+0xee>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a51      	ldr	r2, [pc, #324]	; (800d174 <HAL_DMA_Start_IT+0x230>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d108      	bne.n	800d044 <HAL_DMA_Start_IT+0x100>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f022 0201 	bic.w	r2, r2, #1
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	e007      	b.n	800d054 <HAL_DMA_Start_IT+0x110>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0201 	bic.w	r2, r2, #1
 800d052:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	68b9      	ldr	r1, [r7, #8]
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f001 fe84 	bl	800ed68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a34      	ldr	r2, [pc, #208]	; (800d138 <HAL_DMA_Start_IT+0x1f4>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d04a      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a33      	ldr	r2, [pc, #204]	; (800d13c <HAL_DMA_Start_IT+0x1f8>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d045      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a31      	ldr	r2, [pc, #196]	; (800d140 <HAL_DMA_Start_IT+0x1fc>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d040      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a30      	ldr	r2, [pc, #192]	; (800d144 <HAL_DMA_Start_IT+0x200>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d03b      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a2e      	ldr	r2, [pc, #184]	; (800d148 <HAL_DMA_Start_IT+0x204>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d036      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a2d      	ldr	r2, [pc, #180]	; (800d14c <HAL_DMA_Start_IT+0x208>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d031      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a2b      	ldr	r2, [pc, #172]	; (800d150 <HAL_DMA_Start_IT+0x20c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d02c      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a2a      	ldr	r2, [pc, #168]	; (800d154 <HAL_DMA_Start_IT+0x210>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d027      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a28      	ldr	r2, [pc, #160]	; (800d158 <HAL_DMA_Start_IT+0x214>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d022      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a27      	ldr	r2, [pc, #156]	; (800d15c <HAL_DMA_Start_IT+0x218>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d01d      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a25      	ldr	r2, [pc, #148]	; (800d160 <HAL_DMA_Start_IT+0x21c>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d018      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a24      	ldr	r2, [pc, #144]	; (800d164 <HAL_DMA_Start_IT+0x220>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d013      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a22      	ldr	r2, [pc, #136]	; (800d168 <HAL_DMA_Start_IT+0x224>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d00e      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a21      	ldr	r2, [pc, #132]	; (800d16c <HAL_DMA_Start_IT+0x228>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d009      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a1f      	ldr	r2, [pc, #124]	; (800d170 <HAL_DMA_Start_IT+0x22c>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d004      	beq.n	800d100 <HAL_DMA_Start_IT+0x1bc>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a1e      	ldr	r2, [pc, #120]	; (800d174 <HAL_DMA_Start_IT+0x230>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d101      	bne.n	800d104 <HAL_DMA_Start_IT+0x1c0>
 800d100:	2301      	movs	r3, #1
 800d102:	e000      	b.n	800d106 <HAL_DMA_Start_IT+0x1c2>
 800d104:	2300      	movs	r3, #0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d036      	beq.n	800d178 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f023 021e 	bic.w	r2, r3, #30
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f042 0216 	orr.w	r2, r2, #22
 800d11c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d122:	2b00      	cmp	r3, #0
 800d124:	d03e      	beq.n	800d1a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f042 0208 	orr.w	r2, r2, #8
 800d134:	601a      	str	r2, [r3, #0]
 800d136:	e035      	b.n	800d1a4 <HAL_DMA_Start_IT+0x260>
 800d138:	40020010 	.word	0x40020010
 800d13c:	40020028 	.word	0x40020028
 800d140:	40020040 	.word	0x40020040
 800d144:	40020058 	.word	0x40020058
 800d148:	40020070 	.word	0x40020070
 800d14c:	40020088 	.word	0x40020088
 800d150:	400200a0 	.word	0x400200a0
 800d154:	400200b8 	.word	0x400200b8
 800d158:	40020410 	.word	0x40020410
 800d15c:	40020428 	.word	0x40020428
 800d160:	40020440 	.word	0x40020440
 800d164:	40020458 	.word	0x40020458
 800d168:	40020470 	.word	0x40020470
 800d16c:	40020488 	.word	0x40020488
 800d170:	400204a0 	.word	0x400204a0
 800d174:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f023 020e 	bic.w	r2, r3, #14
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 020a 	orr.w	r2, r2, #10
 800d18a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d190:	2b00      	cmp	r3, #0
 800d192:	d007      	beq.n	800d1a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0204 	orr.w	r2, r2, #4
 800d1a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a83      	ldr	r2, [pc, #524]	; (800d3b8 <HAL_DMA_Start_IT+0x474>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d072      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a82      	ldr	r2, [pc, #520]	; (800d3bc <HAL_DMA_Start_IT+0x478>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d06d      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a80      	ldr	r2, [pc, #512]	; (800d3c0 <HAL_DMA_Start_IT+0x47c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d068      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a7f      	ldr	r2, [pc, #508]	; (800d3c4 <HAL_DMA_Start_IT+0x480>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d063      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a7d      	ldr	r2, [pc, #500]	; (800d3c8 <HAL_DMA_Start_IT+0x484>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d05e      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a7c      	ldr	r2, [pc, #496]	; (800d3cc <HAL_DMA_Start_IT+0x488>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d059      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a7a      	ldr	r2, [pc, #488]	; (800d3d0 <HAL_DMA_Start_IT+0x48c>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d054      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a79      	ldr	r2, [pc, #484]	; (800d3d4 <HAL_DMA_Start_IT+0x490>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d04f      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a77      	ldr	r2, [pc, #476]	; (800d3d8 <HAL_DMA_Start_IT+0x494>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d04a      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a76      	ldr	r2, [pc, #472]	; (800d3dc <HAL_DMA_Start_IT+0x498>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d045      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a74      	ldr	r2, [pc, #464]	; (800d3e0 <HAL_DMA_Start_IT+0x49c>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d040      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a73      	ldr	r2, [pc, #460]	; (800d3e4 <HAL_DMA_Start_IT+0x4a0>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d03b      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a71      	ldr	r2, [pc, #452]	; (800d3e8 <HAL_DMA_Start_IT+0x4a4>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d036      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a70      	ldr	r2, [pc, #448]	; (800d3ec <HAL_DMA_Start_IT+0x4a8>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d031      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a6e      	ldr	r2, [pc, #440]	; (800d3f0 <HAL_DMA_Start_IT+0x4ac>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d02c      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a6d      	ldr	r2, [pc, #436]	; (800d3f4 <HAL_DMA_Start_IT+0x4b0>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d027      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a6b      	ldr	r2, [pc, #428]	; (800d3f8 <HAL_DMA_Start_IT+0x4b4>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d022      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a6a      	ldr	r2, [pc, #424]	; (800d3fc <HAL_DMA_Start_IT+0x4b8>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d01d      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a68      	ldr	r2, [pc, #416]	; (800d400 <HAL_DMA_Start_IT+0x4bc>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d018      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a67      	ldr	r2, [pc, #412]	; (800d404 <HAL_DMA_Start_IT+0x4c0>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d013      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a65      	ldr	r2, [pc, #404]	; (800d408 <HAL_DMA_Start_IT+0x4c4>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d00e      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a64      	ldr	r2, [pc, #400]	; (800d40c <HAL_DMA_Start_IT+0x4c8>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d009      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a62      	ldr	r2, [pc, #392]	; (800d410 <HAL_DMA_Start_IT+0x4cc>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d004      	beq.n	800d294 <HAL_DMA_Start_IT+0x350>
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a61      	ldr	r2, [pc, #388]	; (800d414 <HAL_DMA_Start_IT+0x4d0>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d101      	bne.n	800d298 <HAL_DMA_Start_IT+0x354>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <HAL_DMA_Start_IT+0x356>
 800d298:	2300      	movs	r3, #0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d01a      	beq.n	800d2d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d007      	beq.n	800d2bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d007      	beq.n	800d2d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a37      	ldr	r2, [pc, #220]	; (800d3b8 <HAL_DMA_Start_IT+0x474>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d04a      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a36      	ldr	r2, [pc, #216]	; (800d3bc <HAL_DMA_Start_IT+0x478>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d045      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a34      	ldr	r2, [pc, #208]	; (800d3c0 <HAL_DMA_Start_IT+0x47c>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d040      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a33      	ldr	r2, [pc, #204]	; (800d3c4 <HAL_DMA_Start_IT+0x480>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d03b      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a31      	ldr	r2, [pc, #196]	; (800d3c8 <HAL_DMA_Start_IT+0x484>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d036      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a30      	ldr	r2, [pc, #192]	; (800d3cc <HAL_DMA_Start_IT+0x488>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d031      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a2e      	ldr	r2, [pc, #184]	; (800d3d0 <HAL_DMA_Start_IT+0x48c>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d02c      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a2d      	ldr	r2, [pc, #180]	; (800d3d4 <HAL_DMA_Start_IT+0x490>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d027      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a2b      	ldr	r2, [pc, #172]	; (800d3d8 <HAL_DMA_Start_IT+0x494>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d022      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a2a      	ldr	r2, [pc, #168]	; (800d3dc <HAL_DMA_Start_IT+0x498>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d01d      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a28      	ldr	r2, [pc, #160]	; (800d3e0 <HAL_DMA_Start_IT+0x49c>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d018      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a27      	ldr	r2, [pc, #156]	; (800d3e4 <HAL_DMA_Start_IT+0x4a0>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d013      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a25      	ldr	r2, [pc, #148]	; (800d3e8 <HAL_DMA_Start_IT+0x4a4>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d00e      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a24      	ldr	r2, [pc, #144]	; (800d3ec <HAL_DMA_Start_IT+0x4a8>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d009      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a22      	ldr	r2, [pc, #136]	; (800d3f0 <HAL_DMA_Start_IT+0x4ac>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d004      	beq.n	800d374 <HAL_DMA_Start_IT+0x430>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a21      	ldr	r2, [pc, #132]	; (800d3f4 <HAL_DMA_Start_IT+0x4b0>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d108      	bne.n	800d386 <HAL_DMA_Start_IT+0x442>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f042 0201 	orr.w	r2, r2, #1
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	e012      	b.n	800d3ac <HAL_DMA_Start_IT+0x468>
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f042 0201 	orr.w	r2, r2, #1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	e009      	b.n	800d3ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d39e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3718      	adds	r7, #24
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	40020010 	.word	0x40020010
 800d3bc:	40020028 	.word	0x40020028
 800d3c0:	40020040 	.word	0x40020040
 800d3c4:	40020058 	.word	0x40020058
 800d3c8:	40020070 	.word	0x40020070
 800d3cc:	40020088 	.word	0x40020088
 800d3d0:	400200a0 	.word	0x400200a0
 800d3d4:	400200b8 	.word	0x400200b8
 800d3d8:	40020410 	.word	0x40020410
 800d3dc:	40020428 	.word	0x40020428
 800d3e0:	40020440 	.word	0x40020440
 800d3e4:	40020458 	.word	0x40020458
 800d3e8:	40020470 	.word	0x40020470
 800d3ec:	40020488 	.word	0x40020488
 800d3f0:	400204a0 	.word	0x400204a0
 800d3f4:	400204b8 	.word	0x400204b8
 800d3f8:	58025408 	.word	0x58025408
 800d3fc:	5802541c 	.word	0x5802541c
 800d400:	58025430 	.word	0x58025430
 800d404:	58025444 	.word	0x58025444
 800d408:	58025458 	.word	0x58025458
 800d40c:	5802546c 	.word	0x5802546c
 800d410:	58025480 	.word	0x58025480
 800d414:	58025494 	.word	0x58025494

0800d418 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800d420:	f7fe fd38 	bl	800be94 <HAL_GetTick>
 800d424:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e2dc      	b.n	800d9ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d008      	beq.n	800d44e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2280      	movs	r2, #128	; 0x80
 800d440:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e2cd      	b.n	800d9ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a76      	ldr	r2, [pc, #472]	; (800d62c <HAL_DMA_Abort+0x214>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d04a      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a74      	ldr	r2, [pc, #464]	; (800d630 <HAL_DMA_Abort+0x218>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d045      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a73      	ldr	r2, [pc, #460]	; (800d634 <HAL_DMA_Abort+0x21c>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d040      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a71      	ldr	r2, [pc, #452]	; (800d638 <HAL_DMA_Abort+0x220>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d03b      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a70      	ldr	r2, [pc, #448]	; (800d63c <HAL_DMA_Abort+0x224>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d036      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a6e      	ldr	r2, [pc, #440]	; (800d640 <HAL_DMA_Abort+0x228>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d031      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a6d      	ldr	r2, [pc, #436]	; (800d644 <HAL_DMA_Abort+0x22c>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d02c      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a6b      	ldr	r2, [pc, #428]	; (800d648 <HAL_DMA_Abort+0x230>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d027      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a6a      	ldr	r2, [pc, #424]	; (800d64c <HAL_DMA_Abort+0x234>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d022      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a68      	ldr	r2, [pc, #416]	; (800d650 <HAL_DMA_Abort+0x238>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d01d      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a67      	ldr	r2, [pc, #412]	; (800d654 <HAL_DMA_Abort+0x23c>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d018      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a65      	ldr	r2, [pc, #404]	; (800d658 <HAL_DMA_Abort+0x240>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d013      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a64      	ldr	r2, [pc, #400]	; (800d65c <HAL_DMA_Abort+0x244>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d00e      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a62      	ldr	r2, [pc, #392]	; (800d660 <HAL_DMA_Abort+0x248>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d009      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a61      	ldr	r2, [pc, #388]	; (800d664 <HAL_DMA_Abort+0x24c>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d004      	beq.n	800d4ee <HAL_DMA_Abort+0xd6>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a5f      	ldr	r2, [pc, #380]	; (800d668 <HAL_DMA_Abort+0x250>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d101      	bne.n	800d4f2 <HAL_DMA_Abort+0xda>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e000      	b.n	800d4f4 <HAL_DMA_Abort+0xdc>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d013      	beq.n	800d520 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f022 021e 	bic.w	r2, r2, #30
 800d506:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	695a      	ldr	r2, [r3, #20]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d516:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	617b      	str	r3, [r7, #20]
 800d51e:	e00a      	b.n	800d536 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f022 020e 	bic.w	r2, r2, #14
 800d52e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a3c      	ldr	r2, [pc, #240]	; (800d62c <HAL_DMA_Abort+0x214>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d072      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a3a      	ldr	r2, [pc, #232]	; (800d630 <HAL_DMA_Abort+0x218>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d06d      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a39      	ldr	r2, [pc, #228]	; (800d634 <HAL_DMA_Abort+0x21c>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d068      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a37      	ldr	r2, [pc, #220]	; (800d638 <HAL_DMA_Abort+0x220>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d063      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a36      	ldr	r2, [pc, #216]	; (800d63c <HAL_DMA_Abort+0x224>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d05e      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a34      	ldr	r2, [pc, #208]	; (800d640 <HAL_DMA_Abort+0x228>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d059      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a33      	ldr	r2, [pc, #204]	; (800d644 <HAL_DMA_Abort+0x22c>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d054      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a31      	ldr	r2, [pc, #196]	; (800d648 <HAL_DMA_Abort+0x230>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d04f      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a30      	ldr	r2, [pc, #192]	; (800d64c <HAL_DMA_Abort+0x234>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d04a      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a2e      	ldr	r2, [pc, #184]	; (800d650 <HAL_DMA_Abort+0x238>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d045      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a2d      	ldr	r2, [pc, #180]	; (800d654 <HAL_DMA_Abort+0x23c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d040      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a2b      	ldr	r2, [pc, #172]	; (800d658 <HAL_DMA_Abort+0x240>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d03b      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a2a      	ldr	r2, [pc, #168]	; (800d65c <HAL_DMA_Abort+0x244>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d036      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a28      	ldr	r2, [pc, #160]	; (800d660 <HAL_DMA_Abort+0x248>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d031      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a27      	ldr	r2, [pc, #156]	; (800d664 <HAL_DMA_Abort+0x24c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d02c      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a25      	ldr	r2, [pc, #148]	; (800d668 <HAL_DMA_Abort+0x250>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d027      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a24      	ldr	r2, [pc, #144]	; (800d66c <HAL_DMA_Abort+0x254>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d022      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a22      	ldr	r2, [pc, #136]	; (800d670 <HAL_DMA_Abort+0x258>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d01d      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a21      	ldr	r2, [pc, #132]	; (800d674 <HAL_DMA_Abort+0x25c>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d018      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a1f      	ldr	r2, [pc, #124]	; (800d678 <HAL_DMA_Abort+0x260>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d013      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a1e      	ldr	r2, [pc, #120]	; (800d67c <HAL_DMA_Abort+0x264>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d00e      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a1c      	ldr	r2, [pc, #112]	; (800d680 <HAL_DMA_Abort+0x268>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d009      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a1b      	ldr	r2, [pc, #108]	; (800d684 <HAL_DMA_Abort+0x26c>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d004      	beq.n	800d626 <HAL_DMA_Abort+0x20e>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a19      	ldr	r2, [pc, #100]	; (800d688 <HAL_DMA_Abort+0x270>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d132      	bne.n	800d68c <HAL_DMA_Abort+0x274>
 800d626:	2301      	movs	r3, #1
 800d628:	e031      	b.n	800d68e <HAL_DMA_Abort+0x276>
 800d62a:	bf00      	nop
 800d62c:	40020010 	.word	0x40020010
 800d630:	40020028 	.word	0x40020028
 800d634:	40020040 	.word	0x40020040
 800d638:	40020058 	.word	0x40020058
 800d63c:	40020070 	.word	0x40020070
 800d640:	40020088 	.word	0x40020088
 800d644:	400200a0 	.word	0x400200a0
 800d648:	400200b8 	.word	0x400200b8
 800d64c:	40020410 	.word	0x40020410
 800d650:	40020428 	.word	0x40020428
 800d654:	40020440 	.word	0x40020440
 800d658:	40020458 	.word	0x40020458
 800d65c:	40020470 	.word	0x40020470
 800d660:	40020488 	.word	0x40020488
 800d664:	400204a0 	.word	0x400204a0
 800d668:	400204b8 	.word	0x400204b8
 800d66c:	58025408 	.word	0x58025408
 800d670:	5802541c 	.word	0x5802541c
 800d674:	58025430 	.word	0x58025430
 800d678:	58025444 	.word	0x58025444
 800d67c:	58025458 	.word	0x58025458
 800d680:	5802546c 	.word	0x5802546c
 800d684:	58025480 	.word	0x58025480
 800d688:	58025494 	.word	0x58025494
 800d68c:	2300      	movs	r3, #0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d007      	beq.n	800d6a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d69c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a6d      	ldr	r2, [pc, #436]	; (800d85c <HAL_DMA_Abort+0x444>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d04a      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a6b      	ldr	r2, [pc, #428]	; (800d860 <HAL_DMA_Abort+0x448>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d045      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a6a      	ldr	r2, [pc, #424]	; (800d864 <HAL_DMA_Abort+0x44c>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d040      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a68      	ldr	r2, [pc, #416]	; (800d868 <HAL_DMA_Abort+0x450>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d03b      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a67      	ldr	r2, [pc, #412]	; (800d86c <HAL_DMA_Abort+0x454>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d036      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a65      	ldr	r2, [pc, #404]	; (800d870 <HAL_DMA_Abort+0x458>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d031      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a64      	ldr	r2, [pc, #400]	; (800d874 <HAL_DMA_Abort+0x45c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d02c      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a62      	ldr	r2, [pc, #392]	; (800d878 <HAL_DMA_Abort+0x460>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d027      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a61      	ldr	r2, [pc, #388]	; (800d87c <HAL_DMA_Abort+0x464>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d022      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a5f      	ldr	r2, [pc, #380]	; (800d880 <HAL_DMA_Abort+0x468>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d01d      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a5e      	ldr	r2, [pc, #376]	; (800d884 <HAL_DMA_Abort+0x46c>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d018      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a5c      	ldr	r2, [pc, #368]	; (800d888 <HAL_DMA_Abort+0x470>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d013      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a5b      	ldr	r2, [pc, #364]	; (800d88c <HAL_DMA_Abort+0x474>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d00e      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a59      	ldr	r2, [pc, #356]	; (800d890 <HAL_DMA_Abort+0x478>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d009      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a58      	ldr	r2, [pc, #352]	; (800d894 <HAL_DMA_Abort+0x47c>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d004      	beq.n	800d742 <HAL_DMA_Abort+0x32a>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a56      	ldr	r2, [pc, #344]	; (800d898 <HAL_DMA_Abort+0x480>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d108      	bne.n	800d754 <HAL_DMA_Abort+0x33c>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f022 0201 	bic.w	r2, r2, #1
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	e007      	b.n	800d764 <HAL_DMA_Abort+0x34c>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f022 0201 	bic.w	r2, r2, #1
 800d762:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d764:	e013      	b.n	800d78e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d766:	f7fe fb95 	bl	800be94 <HAL_GetTick>
 800d76a:	4602      	mov	r2, r0
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	2b05      	cmp	r3, #5
 800d772:	d90c      	bls.n	800d78e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2220      	movs	r2, #32
 800d778:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2203      	movs	r2, #3
 800d77e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e12d      	b.n	800d9ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1e5      	bne.n	800d766 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a2f      	ldr	r2, [pc, #188]	; (800d85c <HAL_DMA_Abort+0x444>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d04a      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a2d      	ldr	r2, [pc, #180]	; (800d860 <HAL_DMA_Abort+0x448>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d045      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a2c      	ldr	r2, [pc, #176]	; (800d864 <HAL_DMA_Abort+0x44c>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d040      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a2a      	ldr	r2, [pc, #168]	; (800d868 <HAL_DMA_Abort+0x450>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d03b      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a29      	ldr	r2, [pc, #164]	; (800d86c <HAL_DMA_Abort+0x454>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d036      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a27      	ldr	r2, [pc, #156]	; (800d870 <HAL_DMA_Abort+0x458>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d031      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a26      	ldr	r2, [pc, #152]	; (800d874 <HAL_DMA_Abort+0x45c>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d02c      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a24      	ldr	r2, [pc, #144]	; (800d878 <HAL_DMA_Abort+0x460>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d027      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a23      	ldr	r2, [pc, #140]	; (800d87c <HAL_DMA_Abort+0x464>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d022      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a21      	ldr	r2, [pc, #132]	; (800d880 <HAL_DMA_Abort+0x468>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d01d      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a20      	ldr	r2, [pc, #128]	; (800d884 <HAL_DMA_Abort+0x46c>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d018      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a1e      	ldr	r2, [pc, #120]	; (800d888 <HAL_DMA_Abort+0x470>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d013      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a1d      	ldr	r2, [pc, #116]	; (800d88c <HAL_DMA_Abort+0x474>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d00e      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a1b      	ldr	r2, [pc, #108]	; (800d890 <HAL_DMA_Abort+0x478>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d009      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a1a      	ldr	r2, [pc, #104]	; (800d894 <HAL_DMA_Abort+0x47c>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d004      	beq.n	800d83a <HAL_DMA_Abort+0x422>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a18      	ldr	r2, [pc, #96]	; (800d898 <HAL_DMA_Abort+0x480>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d101      	bne.n	800d83e <HAL_DMA_Abort+0x426>
 800d83a:	2301      	movs	r3, #1
 800d83c:	e000      	b.n	800d840 <HAL_DMA_Abort+0x428>
 800d83e:	2300      	movs	r3, #0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d02b      	beq.n	800d89c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d848:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d84e:	f003 031f 	and.w	r3, r3, #31
 800d852:	223f      	movs	r2, #63	; 0x3f
 800d854:	409a      	lsls	r2, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	609a      	str	r2, [r3, #8]
 800d85a:	e02a      	b.n	800d8b2 <HAL_DMA_Abort+0x49a>
 800d85c:	40020010 	.word	0x40020010
 800d860:	40020028 	.word	0x40020028
 800d864:	40020040 	.word	0x40020040
 800d868:	40020058 	.word	0x40020058
 800d86c:	40020070 	.word	0x40020070
 800d870:	40020088 	.word	0x40020088
 800d874:	400200a0 	.word	0x400200a0
 800d878:	400200b8 	.word	0x400200b8
 800d87c:	40020410 	.word	0x40020410
 800d880:	40020428 	.word	0x40020428
 800d884:	40020440 	.word	0x40020440
 800d888:	40020458 	.word	0x40020458
 800d88c:	40020470 	.word	0x40020470
 800d890:	40020488 	.word	0x40020488
 800d894:	400204a0 	.word	0x400204a0
 800d898:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8a6:	f003 031f 	and.w	r3, r3, #31
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	409a      	lsls	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a4f      	ldr	r2, [pc, #316]	; (800d9f4 <HAL_DMA_Abort+0x5dc>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d072      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a4d      	ldr	r2, [pc, #308]	; (800d9f8 <HAL_DMA_Abort+0x5e0>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d06d      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a4c      	ldr	r2, [pc, #304]	; (800d9fc <HAL_DMA_Abort+0x5e4>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d068      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a4a      	ldr	r2, [pc, #296]	; (800da00 <HAL_DMA_Abort+0x5e8>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d063      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a49      	ldr	r2, [pc, #292]	; (800da04 <HAL_DMA_Abort+0x5ec>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d05e      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a47      	ldr	r2, [pc, #284]	; (800da08 <HAL_DMA_Abort+0x5f0>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d059      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a46      	ldr	r2, [pc, #280]	; (800da0c <HAL_DMA_Abort+0x5f4>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d054      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a44      	ldr	r2, [pc, #272]	; (800da10 <HAL_DMA_Abort+0x5f8>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d04f      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a43      	ldr	r2, [pc, #268]	; (800da14 <HAL_DMA_Abort+0x5fc>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d04a      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a41      	ldr	r2, [pc, #260]	; (800da18 <HAL_DMA_Abort+0x600>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d045      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a40      	ldr	r2, [pc, #256]	; (800da1c <HAL_DMA_Abort+0x604>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d040      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a3e      	ldr	r2, [pc, #248]	; (800da20 <HAL_DMA_Abort+0x608>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d03b      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a3d      	ldr	r2, [pc, #244]	; (800da24 <HAL_DMA_Abort+0x60c>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d036      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a3b      	ldr	r2, [pc, #236]	; (800da28 <HAL_DMA_Abort+0x610>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d031      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a3a      	ldr	r2, [pc, #232]	; (800da2c <HAL_DMA_Abort+0x614>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d02c      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a38      	ldr	r2, [pc, #224]	; (800da30 <HAL_DMA_Abort+0x618>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d027      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a37      	ldr	r2, [pc, #220]	; (800da34 <HAL_DMA_Abort+0x61c>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d022      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a35      	ldr	r2, [pc, #212]	; (800da38 <HAL_DMA_Abort+0x620>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d01d      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a34      	ldr	r2, [pc, #208]	; (800da3c <HAL_DMA_Abort+0x624>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d018      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a32      	ldr	r2, [pc, #200]	; (800da40 <HAL_DMA_Abort+0x628>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d013      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a31      	ldr	r2, [pc, #196]	; (800da44 <HAL_DMA_Abort+0x62c>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d00e      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a2f      	ldr	r2, [pc, #188]	; (800da48 <HAL_DMA_Abort+0x630>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d009      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a2e      	ldr	r2, [pc, #184]	; (800da4c <HAL_DMA_Abort+0x634>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d004      	beq.n	800d9a2 <HAL_DMA_Abort+0x58a>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a2c      	ldr	r2, [pc, #176]	; (800da50 <HAL_DMA_Abort+0x638>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d101      	bne.n	800d9a6 <HAL_DMA_Abort+0x58e>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e000      	b.n	800d9a8 <HAL_DMA_Abort+0x590>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d015      	beq.n	800d9d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d9b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00c      	beq.n	800d9d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d9cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d9d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3718      	adds	r7, #24
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	40020010 	.word	0x40020010
 800d9f8:	40020028 	.word	0x40020028
 800d9fc:	40020040 	.word	0x40020040
 800da00:	40020058 	.word	0x40020058
 800da04:	40020070 	.word	0x40020070
 800da08:	40020088 	.word	0x40020088
 800da0c:	400200a0 	.word	0x400200a0
 800da10:	400200b8 	.word	0x400200b8
 800da14:	40020410 	.word	0x40020410
 800da18:	40020428 	.word	0x40020428
 800da1c:	40020440 	.word	0x40020440
 800da20:	40020458 	.word	0x40020458
 800da24:	40020470 	.word	0x40020470
 800da28:	40020488 	.word	0x40020488
 800da2c:	400204a0 	.word	0x400204a0
 800da30:	400204b8 	.word	0x400204b8
 800da34:	58025408 	.word	0x58025408
 800da38:	5802541c 	.word	0x5802541c
 800da3c:	58025430 	.word	0x58025430
 800da40:	58025444 	.word	0x58025444
 800da44:	58025458 	.word	0x58025458
 800da48:	5802546c 	.word	0x5802546c
 800da4c:	58025480 	.word	0x58025480
 800da50:	58025494 	.word	0x58025494

0800da54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d101      	bne.n	800da66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e237      	b.n	800ded6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b02      	cmp	r3, #2
 800da70:	d004      	beq.n	800da7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2280      	movs	r2, #128	; 0x80
 800da76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	e22c      	b.n	800ded6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a5c      	ldr	r2, [pc, #368]	; (800dbf4 <HAL_DMA_Abort_IT+0x1a0>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d04a      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a5b      	ldr	r2, [pc, #364]	; (800dbf8 <HAL_DMA_Abort_IT+0x1a4>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d045      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a59      	ldr	r2, [pc, #356]	; (800dbfc <HAL_DMA_Abort_IT+0x1a8>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d040      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a58      	ldr	r2, [pc, #352]	; (800dc00 <HAL_DMA_Abort_IT+0x1ac>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d03b      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a56      	ldr	r2, [pc, #344]	; (800dc04 <HAL_DMA_Abort_IT+0x1b0>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d036      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a55      	ldr	r2, [pc, #340]	; (800dc08 <HAL_DMA_Abort_IT+0x1b4>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d031      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a53      	ldr	r2, [pc, #332]	; (800dc0c <HAL_DMA_Abort_IT+0x1b8>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d02c      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a52      	ldr	r2, [pc, #328]	; (800dc10 <HAL_DMA_Abort_IT+0x1bc>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d027      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a50      	ldr	r2, [pc, #320]	; (800dc14 <HAL_DMA_Abort_IT+0x1c0>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d022      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a4f      	ldr	r2, [pc, #316]	; (800dc18 <HAL_DMA_Abort_IT+0x1c4>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d01d      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a4d      	ldr	r2, [pc, #308]	; (800dc1c <HAL_DMA_Abort_IT+0x1c8>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d018      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a4c      	ldr	r2, [pc, #304]	; (800dc20 <HAL_DMA_Abort_IT+0x1cc>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d013      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a4a      	ldr	r2, [pc, #296]	; (800dc24 <HAL_DMA_Abort_IT+0x1d0>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d00e      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a49      	ldr	r2, [pc, #292]	; (800dc28 <HAL_DMA_Abort_IT+0x1d4>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d009      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a47      	ldr	r2, [pc, #284]	; (800dc2c <HAL_DMA_Abort_IT+0x1d8>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d004      	beq.n	800db1c <HAL_DMA_Abort_IT+0xc8>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a46      	ldr	r2, [pc, #280]	; (800dc30 <HAL_DMA_Abort_IT+0x1dc>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d101      	bne.n	800db20 <HAL_DMA_Abort_IT+0xcc>
 800db1c:	2301      	movs	r3, #1
 800db1e:	e000      	b.n	800db22 <HAL_DMA_Abort_IT+0xce>
 800db20:	2300      	movs	r3, #0
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 8086 	beq.w	800dc34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2204      	movs	r2, #4
 800db2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a2f      	ldr	r2, [pc, #188]	; (800dbf4 <HAL_DMA_Abort_IT+0x1a0>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d04a      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a2e      	ldr	r2, [pc, #184]	; (800dbf8 <HAL_DMA_Abort_IT+0x1a4>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d045      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a2c      	ldr	r2, [pc, #176]	; (800dbfc <HAL_DMA_Abort_IT+0x1a8>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d040      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a2b      	ldr	r2, [pc, #172]	; (800dc00 <HAL_DMA_Abort_IT+0x1ac>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d03b      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a29      	ldr	r2, [pc, #164]	; (800dc04 <HAL_DMA_Abort_IT+0x1b0>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d036      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a28      	ldr	r2, [pc, #160]	; (800dc08 <HAL_DMA_Abort_IT+0x1b4>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d031      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a26      	ldr	r2, [pc, #152]	; (800dc0c <HAL_DMA_Abort_IT+0x1b8>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d02c      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a25      	ldr	r2, [pc, #148]	; (800dc10 <HAL_DMA_Abort_IT+0x1bc>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d027      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a23      	ldr	r2, [pc, #140]	; (800dc14 <HAL_DMA_Abort_IT+0x1c0>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d022      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a22      	ldr	r2, [pc, #136]	; (800dc18 <HAL_DMA_Abort_IT+0x1c4>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d01d      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a20      	ldr	r2, [pc, #128]	; (800dc1c <HAL_DMA_Abort_IT+0x1c8>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d018      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a1f      	ldr	r2, [pc, #124]	; (800dc20 <HAL_DMA_Abort_IT+0x1cc>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d013      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a1d      	ldr	r2, [pc, #116]	; (800dc24 <HAL_DMA_Abort_IT+0x1d0>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d00e      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a1c      	ldr	r2, [pc, #112]	; (800dc28 <HAL_DMA_Abort_IT+0x1d4>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d009      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a1a      	ldr	r2, [pc, #104]	; (800dc2c <HAL_DMA_Abort_IT+0x1d8>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d004      	beq.n	800dbd0 <HAL_DMA_Abort_IT+0x17c>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a19      	ldr	r2, [pc, #100]	; (800dc30 <HAL_DMA_Abort_IT+0x1dc>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d108      	bne.n	800dbe2 <HAL_DMA_Abort_IT+0x18e>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f022 0201 	bic.w	r2, r2, #1
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	e178      	b.n	800ded4 <HAL_DMA_Abort_IT+0x480>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f022 0201 	bic.w	r2, r2, #1
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	e16f      	b.n	800ded4 <HAL_DMA_Abort_IT+0x480>
 800dbf4:	40020010 	.word	0x40020010
 800dbf8:	40020028 	.word	0x40020028
 800dbfc:	40020040 	.word	0x40020040
 800dc00:	40020058 	.word	0x40020058
 800dc04:	40020070 	.word	0x40020070
 800dc08:	40020088 	.word	0x40020088
 800dc0c:	400200a0 	.word	0x400200a0
 800dc10:	400200b8 	.word	0x400200b8
 800dc14:	40020410 	.word	0x40020410
 800dc18:	40020428 	.word	0x40020428
 800dc1c:	40020440 	.word	0x40020440
 800dc20:	40020458 	.word	0x40020458
 800dc24:	40020470 	.word	0x40020470
 800dc28:	40020488 	.word	0x40020488
 800dc2c:	400204a0 	.word	0x400204a0
 800dc30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f022 020e 	bic.w	r2, r2, #14
 800dc42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a6c      	ldr	r2, [pc, #432]	; (800ddfc <HAL_DMA_Abort_IT+0x3a8>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d04a      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a6b      	ldr	r2, [pc, #428]	; (800de00 <HAL_DMA_Abort_IT+0x3ac>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d045      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a69      	ldr	r2, [pc, #420]	; (800de04 <HAL_DMA_Abort_IT+0x3b0>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d040      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a68      	ldr	r2, [pc, #416]	; (800de08 <HAL_DMA_Abort_IT+0x3b4>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d03b      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a66      	ldr	r2, [pc, #408]	; (800de0c <HAL_DMA_Abort_IT+0x3b8>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d036      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a65      	ldr	r2, [pc, #404]	; (800de10 <HAL_DMA_Abort_IT+0x3bc>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d031      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a63      	ldr	r2, [pc, #396]	; (800de14 <HAL_DMA_Abort_IT+0x3c0>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d02c      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a62      	ldr	r2, [pc, #392]	; (800de18 <HAL_DMA_Abort_IT+0x3c4>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d027      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a60      	ldr	r2, [pc, #384]	; (800de1c <HAL_DMA_Abort_IT+0x3c8>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d022      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a5f      	ldr	r2, [pc, #380]	; (800de20 <HAL_DMA_Abort_IT+0x3cc>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d01d      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a5d      	ldr	r2, [pc, #372]	; (800de24 <HAL_DMA_Abort_IT+0x3d0>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d018      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a5c      	ldr	r2, [pc, #368]	; (800de28 <HAL_DMA_Abort_IT+0x3d4>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d013      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a5a      	ldr	r2, [pc, #360]	; (800de2c <HAL_DMA_Abort_IT+0x3d8>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d00e      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a59      	ldr	r2, [pc, #356]	; (800de30 <HAL_DMA_Abort_IT+0x3dc>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d009      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a57      	ldr	r2, [pc, #348]	; (800de34 <HAL_DMA_Abort_IT+0x3e0>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d004      	beq.n	800dce4 <HAL_DMA_Abort_IT+0x290>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4a56      	ldr	r2, [pc, #344]	; (800de38 <HAL_DMA_Abort_IT+0x3e4>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d108      	bne.n	800dcf6 <HAL_DMA_Abort_IT+0x2a2>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f022 0201 	bic.w	r2, r2, #1
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	e007      	b.n	800dd06 <HAL_DMA_Abort_IT+0x2b2>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f022 0201 	bic.w	r2, r2, #1
 800dd04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a3c      	ldr	r2, [pc, #240]	; (800ddfc <HAL_DMA_Abort_IT+0x3a8>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d072      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a3a      	ldr	r2, [pc, #232]	; (800de00 <HAL_DMA_Abort_IT+0x3ac>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d06d      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a39      	ldr	r2, [pc, #228]	; (800de04 <HAL_DMA_Abort_IT+0x3b0>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d068      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a37      	ldr	r2, [pc, #220]	; (800de08 <HAL_DMA_Abort_IT+0x3b4>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d063      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a36      	ldr	r2, [pc, #216]	; (800de0c <HAL_DMA_Abort_IT+0x3b8>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d05e      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a34      	ldr	r2, [pc, #208]	; (800de10 <HAL_DMA_Abort_IT+0x3bc>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d059      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a33      	ldr	r2, [pc, #204]	; (800de14 <HAL_DMA_Abort_IT+0x3c0>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d054      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a31      	ldr	r2, [pc, #196]	; (800de18 <HAL_DMA_Abort_IT+0x3c4>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d04f      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a30      	ldr	r2, [pc, #192]	; (800de1c <HAL_DMA_Abort_IT+0x3c8>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d04a      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a2e      	ldr	r2, [pc, #184]	; (800de20 <HAL_DMA_Abort_IT+0x3cc>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d045      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a2d      	ldr	r2, [pc, #180]	; (800de24 <HAL_DMA_Abort_IT+0x3d0>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d040      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a2b      	ldr	r2, [pc, #172]	; (800de28 <HAL_DMA_Abort_IT+0x3d4>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d03b      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a2a      	ldr	r2, [pc, #168]	; (800de2c <HAL_DMA_Abort_IT+0x3d8>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d036      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a28      	ldr	r2, [pc, #160]	; (800de30 <HAL_DMA_Abort_IT+0x3dc>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d031      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a27      	ldr	r2, [pc, #156]	; (800de34 <HAL_DMA_Abort_IT+0x3e0>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d02c      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a25      	ldr	r2, [pc, #148]	; (800de38 <HAL_DMA_Abort_IT+0x3e4>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d027      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a24      	ldr	r2, [pc, #144]	; (800de3c <HAL_DMA_Abort_IT+0x3e8>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d022      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a22      	ldr	r2, [pc, #136]	; (800de40 <HAL_DMA_Abort_IT+0x3ec>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d01d      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a21      	ldr	r2, [pc, #132]	; (800de44 <HAL_DMA_Abort_IT+0x3f0>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d018      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a1f      	ldr	r2, [pc, #124]	; (800de48 <HAL_DMA_Abort_IT+0x3f4>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d013      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a1e      	ldr	r2, [pc, #120]	; (800de4c <HAL_DMA_Abort_IT+0x3f8>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d00e      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a1c      	ldr	r2, [pc, #112]	; (800de50 <HAL_DMA_Abort_IT+0x3fc>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d009      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a1b      	ldr	r2, [pc, #108]	; (800de54 <HAL_DMA_Abort_IT+0x400>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d004      	beq.n	800ddf6 <HAL_DMA_Abort_IT+0x3a2>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a19      	ldr	r2, [pc, #100]	; (800de58 <HAL_DMA_Abort_IT+0x404>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d132      	bne.n	800de5c <HAL_DMA_Abort_IT+0x408>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e031      	b.n	800de5e <HAL_DMA_Abort_IT+0x40a>
 800ddfa:	bf00      	nop
 800ddfc:	40020010 	.word	0x40020010
 800de00:	40020028 	.word	0x40020028
 800de04:	40020040 	.word	0x40020040
 800de08:	40020058 	.word	0x40020058
 800de0c:	40020070 	.word	0x40020070
 800de10:	40020088 	.word	0x40020088
 800de14:	400200a0 	.word	0x400200a0
 800de18:	400200b8 	.word	0x400200b8
 800de1c:	40020410 	.word	0x40020410
 800de20:	40020428 	.word	0x40020428
 800de24:	40020440 	.word	0x40020440
 800de28:	40020458 	.word	0x40020458
 800de2c:	40020470 	.word	0x40020470
 800de30:	40020488 	.word	0x40020488
 800de34:	400204a0 	.word	0x400204a0
 800de38:	400204b8 	.word	0x400204b8
 800de3c:	58025408 	.word	0x58025408
 800de40:	5802541c 	.word	0x5802541c
 800de44:	58025430 	.word	0x58025430
 800de48:	58025444 	.word	0x58025444
 800de4c:	58025458 	.word	0x58025458
 800de50:	5802546c 	.word	0x5802546c
 800de54:	58025480 	.word	0x58025480
 800de58:	58025494 	.word	0x58025494
 800de5c:	2300      	movs	r3, #0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d028      	beq.n	800deb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de7c:	f003 031f 	and.w	r3, r3, #31
 800de80:	2201      	movs	r2, #1
 800de82:	409a      	lsls	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800de90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00c      	beq.n	800deb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dea8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800deb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop

0800dee0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08a      	sub	sp, #40	; 0x28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800dee8:	2300      	movs	r3, #0
 800deea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800deec:	4b67      	ldr	r3, [pc, #412]	; (800e08c <HAL_DMA_IRQHandler+0x1ac>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a67      	ldr	r2, [pc, #412]	; (800e090 <HAL_DMA_IRQHandler+0x1b0>)
 800def2:	fba2 2303 	umull	r2, r3, r2, r3
 800def6:	0a9b      	lsrs	r3, r3, #10
 800def8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800defe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800df06:	6a3b      	ldr	r3, [r7, #32]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a5f      	ldr	r2, [pc, #380]	; (800e094 <HAL_DMA_IRQHandler+0x1b4>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d04a      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a5d      	ldr	r2, [pc, #372]	; (800e098 <HAL_DMA_IRQHandler+0x1b8>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d045      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a5c      	ldr	r2, [pc, #368]	; (800e09c <HAL_DMA_IRQHandler+0x1bc>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d040      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a5a      	ldr	r2, [pc, #360]	; (800e0a0 <HAL_DMA_IRQHandler+0x1c0>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d03b      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a59      	ldr	r2, [pc, #356]	; (800e0a4 <HAL_DMA_IRQHandler+0x1c4>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d036      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a57      	ldr	r2, [pc, #348]	; (800e0a8 <HAL_DMA_IRQHandler+0x1c8>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d031      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a56      	ldr	r2, [pc, #344]	; (800e0ac <HAL_DMA_IRQHandler+0x1cc>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d02c      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a54      	ldr	r2, [pc, #336]	; (800e0b0 <HAL_DMA_IRQHandler+0x1d0>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d027      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a53      	ldr	r2, [pc, #332]	; (800e0b4 <HAL_DMA_IRQHandler+0x1d4>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d022      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a51      	ldr	r2, [pc, #324]	; (800e0b8 <HAL_DMA_IRQHandler+0x1d8>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d01d      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a50      	ldr	r2, [pc, #320]	; (800e0bc <HAL_DMA_IRQHandler+0x1dc>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d018      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a4e      	ldr	r2, [pc, #312]	; (800e0c0 <HAL_DMA_IRQHandler+0x1e0>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d013      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a4d      	ldr	r2, [pc, #308]	; (800e0c4 <HAL_DMA_IRQHandler+0x1e4>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d00e      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a4b      	ldr	r2, [pc, #300]	; (800e0c8 <HAL_DMA_IRQHandler+0x1e8>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d009      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a4a      	ldr	r2, [pc, #296]	; (800e0cc <HAL_DMA_IRQHandler+0x1ec>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d004      	beq.n	800dfb2 <HAL_DMA_IRQHandler+0xd2>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a48      	ldr	r2, [pc, #288]	; (800e0d0 <HAL_DMA_IRQHandler+0x1f0>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d101      	bne.n	800dfb6 <HAL_DMA_IRQHandler+0xd6>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e000      	b.n	800dfb8 <HAL_DMA_IRQHandler+0xd8>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 842b 	beq.w	800e814 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfc2:	f003 031f 	and.w	r3, r3, #31
 800dfc6:	2208      	movs	r2, #8
 800dfc8:	409a      	lsls	r2, r3
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	4013      	ands	r3, r2
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 80a2 	beq.w	800e118 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a2e      	ldr	r2, [pc, #184]	; (800e094 <HAL_DMA_IRQHandler+0x1b4>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d04a      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a2d      	ldr	r2, [pc, #180]	; (800e098 <HAL_DMA_IRQHandler+0x1b8>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d045      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a2b      	ldr	r2, [pc, #172]	; (800e09c <HAL_DMA_IRQHandler+0x1bc>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d040      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a2a      	ldr	r2, [pc, #168]	; (800e0a0 <HAL_DMA_IRQHandler+0x1c0>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d03b      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a28      	ldr	r2, [pc, #160]	; (800e0a4 <HAL_DMA_IRQHandler+0x1c4>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d036      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a27      	ldr	r2, [pc, #156]	; (800e0a8 <HAL_DMA_IRQHandler+0x1c8>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d031      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a25      	ldr	r2, [pc, #148]	; (800e0ac <HAL_DMA_IRQHandler+0x1cc>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d02c      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a24      	ldr	r2, [pc, #144]	; (800e0b0 <HAL_DMA_IRQHandler+0x1d0>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d027      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a22      	ldr	r2, [pc, #136]	; (800e0b4 <HAL_DMA_IRQHandler+0x1d4>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d022      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a21      	ldr	r2, [pc, #132]	; (800e0b8 <HAL_DMA_IRQHandler+0x1d8>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d01d      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a1f      	ldr	r2, [pc, #124]	; (800e0bc <HAL_DMA_IRQHandler+0x1dc>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d018      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a1e      	ldr	r2, [pc, #120]	; (800e0c0 <HAL_DMA_IRQHandler+0x1e0>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d013      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a1c      	ldr	r2, [pc, #112]	; (800e0c4 <HAL_DMA_IRQHandler+0x1e4>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d00e      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a1b      	ldr	r2, [pc, #108]	; (800e0c8 <HAL_DMA_IRQHandler+0x1e8>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d009      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a19      	ldr	r2, [pc, #100]	; (800e0cc <HAL_DMA_IRQHandler+0x1ec>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d004      	beq.n	800e074 <HAL_DMA_IRQHandler+0x194>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a18      	ldr	r2, [pc, #96]	; (800e0d0 <HAL_DMA_IRQHandler+0x1f0>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d12f      	bne.n	800e0d4 <HAL_DMA_IRQHandler+0x1f4>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f003 0304 	and.w	r3, r3, #4
 800e07e:	2b00      	cmp	r3, #0
 800e080:	bf14      	ite	ne
 800e082:	2301      	movne	r3, #1
 800e084:	2300      	moveq	r3, #0
 800e086:	b2db      	uxtb	r3, r3
 800e088:	e02e      	b.n	800e0e8 <HAL_DMA_IRQHandler+0x208>
 800e08a:	bf00      	nop
 800e08c:	24000000 	.word	0x24000000
 800e090:	1b4e81b5 	.word	0x1b4e81b5
 800e094:	40020010 	.word	0x40020010
 800e098:	40020028 	.word	0x40020028
 800e09c:	40020040 	.word	0x40020040
 800e0a0:	40020058 	.word	0x40020058
 800e0a4:	40020070 	.word	0x40020070
 800e0a8:	40020088 	.word	0x40020088
 800e0ac:	400200a0 	.word	0x400200a0
 800e0b0:	400200b8 	.word	0x400200b8
 800e0b4:	40020410 	.word	0x40020410
 800e0b8:	40020428 	.word	0x40020428
 800e0bc:	40020440 	.word	0x40020440
 800e0c0:	40020458 	.word	0x40020458
 800e0c4:	40020470 	.word	0x40020470
 800e0c8:	40020488 	.word	0x40020488
 800e0cc:	400204a0 	.word	0x400204a0
 800e0d0:	400204b8 	.word	0x400204b8
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f003 0308 	and.w	r3, r3, #8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	bf14      	ite	ne
 800e0e2:	2301      	movne	r3, #1
 800e0e4:	2300      	moveq	r3, #0
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d015      	beq.n	800e118 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f022 0204 	bic.w	r2, r2, #4
 800e0fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e100:	f003 031f 	and.w	r3, r3, #31
 800e104:	2208      	movs	r2, #8
 800e106:	409a      	lsls	r2, r3
 800e108:	6a3b      	ldr	r3, [r7, #32]
 800e10a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e110:	f043 0201 	orr.w	r2, r3, #1
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e11c:	f003 031f 	and.w	r3, r3, #31
 800e120:	69ba      	ldr	r2, [r7, #24]
 800e122:	fa22 f303 	lsr.w	r3, r2, r3
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d06e      	beq.n	800e20c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a69      	ldr	r2, [pc, #420]	; (800e2d8 <HAL_DMA_IRQHandler+0x3f8>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d04a      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a67      	ldr	r2, [pc, #412]	; (800e2dc <HAL_DMA_IRQHandler+0x3fc>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d045      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a66      	ldr	r2, [pc, #408]	; (800e2e0 <HAL_DMA_IRQHandler+0x400>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d040      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a64      	ldr	r2, [pc, #400]	; (800e2e4 <HAL_DMA_IRQHandler+0x404>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d03b      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a63      	ldr	r2, [pc, #396]	; (800e2e8 <HAL_DMA_IRQHandler+0x408>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d036      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a61      	ldr	r2, [pc, #388]	; (800e2ec <HAL_DMA_IRQHandler+0x40c>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d031      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a60      	ldr	r2, [pc, #384]	; (800e2f0 <HAL_DMA_IRQHandler+0x410>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d02c      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a5e      	ldr	r2, [pc, #376]	; (800e2f4 <HAL_DMA_IRQHandler+0x414>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d027      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4a5d      	ldr	r2, [pc, #372]	; (800e2f8 <HAL_DMA_IRQHandler+0x418>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d022      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4a5b      	ldr	r2, [pc, #364]	; (800e2fc <HAL_DMA_IRQHandler+0x41c>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d01d      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a5a      	ldr	r2, [pc, #360]	; (800e300 <HAL_DMA_IRQHandler+0x420>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d018      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a58      	ldr	r2, [pc, #352]	; (800e304 <HAL_DMA_IRQHandler+0x424>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d013      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a57      	ldr	r2, [pc, #348]	; (800e308 <HAL_DMA_IRQHandler+0x428>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d00e      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a55      	ldr	r2, [pc, #340]	; (800e30c <HAL_DMA_IRQHandler+0x42c>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d009      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4a54      	ldr	r2, [pc, #336]	; (800e310 <HAL_DMA_IRQHandler+0x430>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d004      	beq.n	800e1ce <HAL_DMA_IRQHandler+0x2ee>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a52      	ldr	r2, [pc, #328]	; (800e314 <HAL_DMA_IRQHandler+0x434>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d10a      	bne.n	800e1e4 <HAL_DMA_IRQHandler+0x304>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	695b      	ldr	r3, [r3, #20]
 800e1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bf14      	ite	ne
 800e1dc:	2301      	movne	r3, #1
 800e1de:	2300      	moveq	r3, #0
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	e003      	b.n	800e1ec <HAL_DMA_IRQHandler+0x30c>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00d      	beq.n	800e20c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1f4:	f003 031f 	and.w	r3, r3, #31
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	409a      	lsls	r2, r3
 800e1fc:	6a3b      	ldr	r3, [r7, #32]
 800e1fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e204:	f043 0202 	orr.w	r2, r3, #2
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e210:	f003 031f 	and.w	r3, r3, #31
 800e214:	2204      	movs	r2, #4
 800e216:	409a      	lsls	r2, r3
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	4013      	ands	r3, r2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f000 808f 	beq.w	800e340 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a2c      	ldr	r2, [pc, #176]	; (800e2d8 <HAL_DMA_IRQHandler+0x3f8>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d04a      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a2a      	ldr	r2, [pc, #168]	; (800e2dc <HAL_DMA_IRQHandler+0x3fc>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d045      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a29      	ldr	r2, [pc, #164]	; (800e2e0 <HAL_DMA_IRQHandler+0x400>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d040      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a27      	ldr	r2, [pc, #156]	; (800e2e4 <HAL_DMA_IRQHandler+0x404>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d03b      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a26      	ldr	r2, [pc, #152]	; (800e2e8 <HAL_DMA_IRQHandler+0x408>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d036      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a24      	ldr	r2, [pc, #144]	; (800e2ec <HAL_DMA_IRQHandler+0x40c>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d031      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4a23      	ldr	r2, [pc, #140]	; (800e2f0 <HAL_DMA_IRQHandler+0x410>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d02c      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a21      	ldr	r2, [pc, #132]	; (800e2f4 <HAL_DMA_IRQHandler+0x414>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d027      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a20      	ldr	r2, [pc, #128]	; (800e2f8 <HAL_DMA_IRQHandler+0x418>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d022      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a1e      	ldr	r2, [pc, #120]	; (800e2fc <HAL_DMA_IRQHandler+0x41c>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d01d      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a1d      	ldr	r2, [pc, #116]	; (800e300 <HAL_DMA_IRQHandler+0x420>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d018      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a1b      	ldr	r2, [pc, #108]	; (800e304 <HAL_DMA_IRQHandler+0x424>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d013      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a1a      	ldr	r2, [pc, #104]	; (800e308 <HAL_DMA_IRQHandler+0x428>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d00e      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a18      	ldr	r2, [pc, #96]	; (800e30c <HAL_DMA_IRQHandler+0x42c>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d009      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a17      	ldr	r2, [pc, #92]	; (800e310 <HAL_DMA_IRQHandler+0x430>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d004      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x3e2>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a15      	ldr	r2, [pc, #84]	; (800e314 <HAL_DMA_IRQHandler+0x434>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d12a      	bne.n	800e318 <HAL_DMA_IRQHandler+0x438>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 0302 	and.w	r3, r3, #2
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	bf14      	ite	ne
 800e2d0:	2301      	movne	r3, #1
 800e2d2:	2300      	moveq	r3, #0
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	e023      	b.n	800e320 <HAL_DMA_IRQHandler+0x440>
 800e2d8:	40020010 	.word	0x40020010
 800e2dc:	40020028 	.word	0x40020028
 800e2e0:	40020040 	.word	0x40020040
 800e2e4:	40020058 	.word	0x40020058
 800e2e8:	40020070 	.word	0x40020070
 800e2ec:	40020088 	.word	0x40020088
 800e2f0:	400200a0 	.word	0x400200a0
 800e2f4:	400200b8 	.word	0x400200b8
 800e2f8:	40020410 	.word	0x40020410
 800e2fc:	40020428 	.word	0x40020428
 800e300:	40020440 	.word	0x40020440
 800e304:	40020458 	.word	0x40020458
 800e308:	40020470 	.word	0x40020470
 800e30c:	40020488 	.word	0x40020488
 800e310:	400204a0 	.word	0x400204a0
 800e314:	400204b8 	.word	0x400204b8
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2300      	movs	r3, #0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00d      	beq.n	800e340 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e328:	f003 031f 	and.w	r3, r3, #31
 800e32c:	2204      	movs	r2, #4
 800e32e:	409a      	lsls	r2, r3
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e338:	f043 0204 	orr.w	r2, r3, #4
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e344:	f003 031f 	and.w	r3, r3, #31
 800e348:	2210      	movs	r2, #16
 800e34a:	409a      	lsls	r2, r3
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	4013      	ands	r3, r2
 800e350:	2b00      	cmp	r3, #0
 800e352:	f000 80a6 	beq.w	800e4a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a85      	ldr	r2, [pc, #532]	; (800e570 <HAL_DMA_IRQHandler+0x690>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d04a      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a83      	ldr	r2, [pc, #524]	; (800e574 <HAL_DMA_IRQHandler+0x694>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d045      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a82      	ldr	r2, [pc, #520]	; (800e578 <HAL_DMA_IRQHandler+0x698>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d040      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a80      	ldr	r2, [pc, #512]	; (800e57c <HAL_DMA_IRQHandler+0x69c>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d03b      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a7f      	ldr	r2, [pc, #508]	; (800e580 <HAL_DMA_IRQHandler+0x6a0>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d036      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a7d      	ldr	r2, [pc, #500]	; (800e584 <HAL_DMA_IRQHandler+0x6a4>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d031      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a7c      	ldr	r2, [pc, #496]	; (800e588 <HAL_DMA_IRQHandler+0x6a8>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d02c      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a7a      	ldr	r2, [pc, #488]	; (800e58c <HAL_DMA_IRQHandler+0x6ac>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d027      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a79      	ldr	r2, [pc, #484]	; (800e590 <HAL_DMA_IRQHandler+0x6b0>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d022      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a77      	ldr	r2, [pc, #476]	; (800e594 <HAL_DMA_IRQHandler+0x6b4>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d01d      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a76      	ldr	r2, [pc, #472]	; (800e598 <HAL_DMA_IRQHandler+0x6b8>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d018      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a74      	ldr	r2, [pc, #464]	; (800e59c <HAL_DMA_IRQHandler+0x6bc>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d013      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a73      	ldr	r2, [pc, #460]	; (800e5a0 <HAL_DMA_IRQHandler+0x6c0>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d00e      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a71      	ldr	r2, [pc, #452]	; (800e5a4 <HAL_DMA_IRQHandler+0x6c4>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d009      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a70      	ldr	r2, [pc, #448]	; (800e5a8 <HAL_DMA_IRQHandler+0x6c8>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d004      	beq.n	800e3f6 <HAL_DMA_IRQHandler+0x516>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a6e      	ldr	r2, [pc, #440]	; (800e5ac <HAL_DMA_IRQHandler+0x6cc>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d10a      	bne.n	800e40c <HAL_DMA_IRQHandler+0x52c>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f003 0308 	and.w	r3, r3, #8
 800e400:	2b00      	cmp	r3, #0
 800e402:	bf14      	ite	ne
 800e404:	2301      	movne	r3, #1
 800e406:	2300      	moveq	r3, #0
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	e009      	b.n	800e420 <HAL_DMA_IRQHandler+0x540>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f003 0304 	and.w	r3, r3, #4
 800e416:	2b00      	cmp	r3, #0
 800e418:	bf14      	ite	ne
 800e41a:	2301      	movne	r3, #1
 800e41c:	2300      	moveq	r3, #0
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	2b00      	cmp	r3, #0
 800e422:	d03e      	beq.n	800e4a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e428:	f003 031f 	and.w	r3, r3, #31
 800e42c:	2210      	movs	r2, #16
 800e42e:	409a      	lsls	r2, r3
 800e430:	6a3b      	ldr	r3, [r7, #32]
 800e432:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d018      	beq.n	800e474 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d108      	bne.n	800e462 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e454:	2b00      	cmp	r3, #0
 800e456:	d024      	beq.n	800e4a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	4798      	blx	r3
 800e460:	e01f      	b.n	800e4a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e466:	2b00      	cmp	r3, #0
 800e468:	d01b      	beq.n	800e4a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	4798      	blx	r3
 800e472:	e016      	b.n	800e4a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d107      	bne.n	800e492 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f022 0208 	bic.w	r2, r2, #8
 800e490:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e496:	2b00      	cmp	r3, #0
 800e498:	d003      	beq.n	800e4a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4a6:	f003 031f 	and.w	r3, r3, #31
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	409a      	lsls	r2, r3
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f000 8110 	beq.w	800e6d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a2c      	ldr	r2, [pc, #176]	; (800e570 <HAL_DMA_IRQHandler+0x690>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d04a      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a2b      	ldr	r2, [pc, #172]	; (800e574 <HAL_DMA_IRQHandler+0x694>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d045      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a29      	ldr	r2, [pc, #164]	; (800e578 <HAL_DMA_IRQHandler+0x698>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d040      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a28      	ldr	r2, [pc, #160]	; (800e57c <HAL_DMA_IRQHandler+0x69c>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d03b      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a26      	ldr	r2, [pc, #152]	; (800e580 <HAL_DMA_IRQHandler+0x6a0>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d036      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a25      	ldr	r2, [pc, #148]	; (800e584 <HAL_DMA_IRQHandler+0x6a4>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d031      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a23      	ldr	r2, [pc, #140]	; (800e588 <HAL_DMA_IRQHandler+0x6a8>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d02c      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a22      	ldr	r2, [pc, #136]	; (800e58c <HAL_DMA_IRQHandler+0x6ac>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d027      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a20      	ldr	r2, [pc, #128]	; (800e590 <HAL_DMA_IRQHandler+0x6b0>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d022      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a1f      	ldr	r2, [pc, #124]	; (800e594 <HAL_DMA_IRQHandler+0x6b4>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d01d      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a1d      	ldr	r2, [pc, #116]	; (800e598 <HAL_DMA_IRQHandler+0x6b8>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d018      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a1c      	ldr	r2, [pc, #112]	; (800e59c <HAL_DMA_IRQHandler+0x6bc>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d013      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a1a      	ldr	r2, [pc, #104]	; (800e5a0 <HAL_DMA_IRQHandler+0x6c0>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d00e      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a19      	ldr	r2, [pc, #100]	; (800e5a4 <HAL_DMA_IRQHandler+0x6c4>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d009      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a17      	ldr	r2, [pc, #92]	; (800e5a8 <HAL_DMA_IRQHandler+0x6c8>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d004      	beq.n	800e558 <HAL_DMA_IRQHandler+0x678>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a16      	ldr	r2, [pc, #88]	; (800e5ac <HAL_DMA_IRQHandler+0x6cc>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d12b      	bne.n	800e5b0 <HAL_DMA_IRQHandler+0x6d0>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f003 0310 	and.w	r3, r3, #16
 800e562:	2b00      	cmp	r3, #0
 800e564:	bf14      	ite	ne
 800e566:	2301      	movne	r3, #1
 800e568:	2300      	moveq	r3, #0
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	e02a      	b.n	800e5c4 <HAL_DMA_IRQHandler+0x6e4>
 800e56e:	bf00      	nop
 800e570:	40020010 	.word	0x40020010
 800e574:	40020028 	.word	0x40020028
 800e578:	40020040 	.word	0x40020040
 800e57c:	40020058 	.word	0x40020058
 800e580:	40020070 	.word	0x40020070
 800e584:	40020088 	.word	0x40020088
 800e588:	400200a0 	.word	0x400200a0
 800e58c:	400200b8 	.word	0x400200b8
 800e590:	40020410 	.word	0x40020410
 800e594:	40020428 	.word	0x40020428
 800e598:	40020440 	.word	0x40020440
 800e59c:	40020458 	.word	0x40020458
 800e5a0:	40020470 	.word	0x40020470
 800e5a4:	40020488 	.word	0x40020488
 800e5a8:	400204a0 	.word	0x400204a0
 800e5ac:	400204b8 	.word	0x400204b8
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f003 0302 	and.w	r3, r3, #2
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	bf14      	ite	ne
 800e5be:	2301      	movne	r3, #1
 800e5c0:	2300      	moveq	r3, #0
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f000 8087 	beq.w	800e6d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5ce:	f003 031f 	and.w	r3, r3, #31
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	409a      	lsls	r2, r3
 800e5d6:	6a3b      	ldr	r3, [r7, #32]
 800e5d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	2b04      	cmp	r3, #4
 800e5e4:	d139      	bne.n	800e65a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f022 0216 	bic.w	r2, r2, #22
 800e5f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	695a      	ldr	r2, [r3, #20]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e604:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d103      	bne.n	800e616 <HAL_DMA_IRQHandler+0x736>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e612:	2b00      	cmp	r3, #0
 800e614:	d007      	beq.n	800e626 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f022 0208 	bic.w	r2, r2, #8
 800e624:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e62a:	f003 031f 	and.w	r3, r3, #31
 800e62e:	223f      	movs	r2, #63	; 0x3f
 800e630:	409a      	lsls	r2, r3
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 834a 	beq.w	800ece4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	4798      	blx	r3
          }
          return;
 800e658:	e344      	b.n	800ece4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d018      	beq.n	800e69a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e672:	2b00      	cmp	r3, #0
 800e674:	d108      	bne.n	800e688 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d02c      	beq.n	800e6d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	4798      	blx	r3
 800e686:	e027      	b.n	800e6d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d023      	beq.n	800e6d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	4798      	blx	r3
 800e698:	e01e      	b.n	800e6d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10f      	bne.n	800e6c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f022 0210 	bic.w	r2, r2, #16
 800e6b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d003      	beq.n	800e6d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 8306 	beq.w	800ecee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f000 8088 	beq.w	800e800 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2204      	movs	r2, #4
 800e6f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a7a      	ldr	r2, [pc, #488]	; (800e8e8 <HAL_DMA_IRQHandler+0xa08>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d04a      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a79      	ldr	r2, [pc, #484]	; (800e8ec <HAL_DMA_IRQHandler+0xa0c>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d045      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a77      	ldr	r2, [pc, #476]	; (800e8f0 <HAL_DMA_IRQHandler+0xa10>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d040      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a76      	ldr	r2, [pc, #472]	; (800e8f4 <HAL_DMA_IRQHandler+0xa14>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d03b      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a74      	ldr	r2, [pc, #464]	; (800e8f8 <HAL_DMA_IRQHandler+0xa18>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d036      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a73      	ldr	r2, [pc, #460]	; (800e8fc <HAL_DMA_IRQHandler+0xa1c>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d031      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a71      	ldr	r2, [pc, #452]	; (800e900 <HAL_DMA_IRQHandler+0xa20>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d02c      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a70      	ldr	r2, [pc, #448]	; (800e904 <HAL_DMA_IRQHandler+0xa24>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d027      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a6e      	ldr	r2, [pc, #440]	; (800e908 <HAL_DMA_IRQHandler+0xa28>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d022      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a6d      	ldr	r2, [pc, #436]	; (800e90c <HAL_DMA_IRQHandler+0xa2c>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d01d      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a6b      	ldr	r2, [pc, #428]	; (800e910 <HAL_DMA_IRQHandler+0xa30>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d018      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a6a      	ldr	r2, [pc, #424]	; (800e914 <HAL_DMA_IRQHandler+0xa34>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d013      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a68      	ldr	r2, [pc, #416]	; (800e918 <HAL_DMA_IRQHandler+0xa38>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d00e      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a67      	ldr	r2, [pc, #412]	; (800e91c <HAL_DMA_IRQHandler+0xa3c>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d009      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a65      	ldr	r2, [pc, #404]	; (800e920 <HAL_DMA_IRQHandler+0xa40>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d004      	beq.n	800e798 <HAL_DMA_IRQHandler+0x8b8>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a64      	ldr	r2, [pc, #400]	; (800e924 <HAL_DMA_IRQHandler+0xa44>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d108      	bne.n	800e7aa <HAL_DMA_IRQHandler+0x8ca>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f022 0201 	bic.w	r2, r2, #1
 800e7a6:	601a      	str	r2, [r3, #0]
 800e7a8:	e007      	b.n	800e7ba <HAL_DMA_IRQHandler+0x8da>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f022 0201 	bic.w	r2, r2, #1
 800e7b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	60fb      	str	r3, [r7, #12]
 800e7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d307      	bcc.n	800e7d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1f2      	bne.n	800e7ba <HAL_DMA_IRQHandler+0x8da>
 800e7d4:	e000      	b.n	800e7d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800e7d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f003 0301 	and.w	r3, r3, #1
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d004      	beq.n	800e7f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2203      	movs	r2, #3
 800e7ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800e7ee:	e003      	b.n	800e7f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 8272 	beq.w	800ecee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	4798      	blx	r3
 800e812:	e26c      	b.n	800ecee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a43      	ldr	r2, [pc, #268]	; (800e928 <HAL_DMA_IRQHandler+0xa48>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d022      	beq.n	800e864 <HAL_DMA_IRQHandler+0x984>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a42      	ldr	r2, [pc, #264]	; (800e92c <HAL_DMA_IRQHandler+0xa4c>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d01d      	beq.n	800e864 <HAL_DMA_IRQHandler+0x984>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a40      	ldr	r2, [pc, #256]	; (800e930 <HAL_DMA_IRQHandler+0xa50>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d018      	beq.n	800e864 <HAL_DMA_IRQHandler+0x984>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4a3f      	ldr	r2, [pc, #252]	; (800e934 <HAL_DMA_IRQHandler+0xa54>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d013      	beq.n	800e864 <HAL_DMA_IRQHandler+0x984>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a3d      	ldr	r2, [pc, #244]	; (800e938 <HAL_DMA_IRQHandler+0xa58>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d00e      	beq.n	800e864 <HAL_DMA_IRQHandler+0x984>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a3c      	ldr	r2, [pc, #240]	; (800e93c <HAL_DMA_IRQHandler+0xa5c>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d009      	beq.n	800e864 <HAL_DMA_IRQHandler+0x984>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a3a      	ldr	r2, [pc, #232]	; (800e940 <HAL_DMA_IRQHandler+0xa60>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d004      	beq.n	800e864 <HAL_DMA_IRQHandler+0x984>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4a39      	ldr	r2, [pc, #228]	; (800e944 <HAL_DMA_IRQHandler+0xa64>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d101      	bne.n	800e868 <HAL_DMA_IRQHandler+0x988>
 800e864:	2301      	movs	r3, #1
 800e866:	e000      	b.n	800e86a <HAL_DMA_IRQHandler+0x98a>
 800e868:	2300      	movs	r3, #0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 823f 	beq.w	800ecee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e87c:	f003 031f 	and.w	r3, r3, #31
 800e880:	2204      	movs	r2, #4
 800e882:	409a      	lsls	r2, r3
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	4013      	ands	r3, r2
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f000 80cd 	beq.w	800ea28 <HAL_DMA_IRQHandler+0xb48>
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	f003 0304 	and.w	r3, r3, #4
 800e894:	2b00      	cmp	r3, #0
 800e896:	f000 80c7 	beq.w	800ea28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e89e:	f003 031f 	and.w	r3, r3, #31
 800e8a2:	2204      	movs	r2, #4
 800e8a4:	409a      	lsls	r2, r3
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d049      	beq.n	800e948 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d109      	bne.n	800e8d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f000 8210 	beq.w	800ece8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e8d0:	e20a      	b.n	800ece8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f000 8206 	beq.w	800ece8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e8e4:	e200      	b.n	800ece8 <HAL_DMA_IRQHandler+0xe08>
 800e8e6:	bf00      	nop
 800e8e8:	40020010 	.word	0x40020010
 800e8ec:	40020028 	.word	0x40020028
 800e8f0:	40020040 	.word	0x40020040
 800e8f4:	40020058 	.word	0x40020058
 800e8f8:	40020070 	.word	0x40020070
 800e8fc:	40020088 	.word	0x40020088
 800e900:	400200a0 	.word	0x400200a0
 800e904:	400200b8 	.word	0x400200b8
 800e908:	40020410 	.word	0x40020410
 800e90c:	40020428 	.word	0x40020428
 800e910:	40020440 	.word	0x40020440
 800e914:	40020458 	.word	0x40020458
 800e918:	40020470 	.word	0x40020470
 800e91c:	40020488 	.word	0x40020488
 800e920:	400204a0 	.word	0x400204a0
 800e924:	400204b8 	.word	0x400204b8
 800e928:	58025408 	.word	0x58025408
 800e92c:	5802541c 	.word	0x5802541c
 800e930:	58025430 	.word	0x58025430
 800e934:	58025444 	.word	0x58025444
 800e938:	58025458 	.word	0x58025458
 800e93c:	5802546c 	.word	0x5802546c
 800e940:	58025480 	.word	0x58025480
 800e944:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	f003 0320 	and.w	r3, r3, #32
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d160      	bne.n	800ea14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a7f      	ldr	r2, [pc, #508]	; (800eb54 <HAL_DMA_IRQHandler+0xc74>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d04a      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a7d      	ldr	r2, [pc, #500]	; (800eb58 <HAL_DMA_IRQHandler+0xc78>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d045      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a7c      	ldr	r2, [pc, #496]	; (800eb5c <HAL_DMA_IRQHandler+0xc7c>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d040      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a7a      	ldr	r2, [pc, #488]	; (800eb60 <HAL_DMA_IRQHandler+0xc80>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d03b      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a79      	ldr	r2, [pc, #484]	; (800eb64 <HAL_DMA_IRQHandler+0xc84>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d036      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a77      	ldr	r2, [pc, #476]	; (800eb68 <HAL_DMA_IRQHandler+0xc88>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d031      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a76      	ldr	r2, [pc, #472]	; (800eb6c <HAL_DMA_IRQHandler+0xc8c>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d02c      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a74      	ldr	r2, [pc, #464]	; (800eb70 <HAL_DMA_IRQHandler+0xc90>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d027      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a73      	ldr	r2, [pc, #460]	; (800eb74 <HAL_DMA_IRQHandler+0xc94>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d022      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a71      	ldr	r2, [pc, #452]	; (800eb78 <HAL_DMA_IRQHandler+0xc98>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d01d      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a70      	ldr	r2, [pc, #448]	; (800eb7c <HAL_DMA_IRQHandler+0xc9c>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d018      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a6e      	ldr	r2, [pc, #440]	; (800eb80 <HAL_DMA_IRQHandler+0xca0>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d013      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a6d      	ldr	r2, [pc, #436]	; (800eb84 <HAL_DMA_IRQHandler+0xca4>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d00e      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a6b      	ldr	r2, [pc, #428]	; (800eb88 <HAL_DMA_IRQHandler+0xca8>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d009      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	4a6a      	ldr	r2, [pc, #424]	; (800eb8c <HAL_DMA_IRQHandler+0xcac>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d004      	beq.n	800e9f2 <HAL_DMA_IRQHandler+0xb12>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a68      	ldr	r2, [pc, #416]	; (800eb90 <HAL_DMA_IRQHandler+0xcb0>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d108      	bne.n	800ea04 <HAL_DMA_IRQHandler+0xb24>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f022 0208 	bic.w	r2, r2, #8
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	e007      	b.n	800ea14 <HAL_DMA_IRQHandler+0xb34>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f022 0204 	bic.w	r2, r2, #4
 800ea12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f000 8165 	beq.w	800ece8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ea26:	e15f      	b.n	800ece8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea2c:	f003 031f 	and.w	r3, r3, #31
 800ea30:	2202      	movs	r2, #2
 800ea32:	409a      	lsls	r2, r3
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	4013      	ands	r3, r2
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 80c5 	beq.w	800ebc8 <HAL_DMA_IRQHandler+0xce8>
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 80bf 	beq.w	800ebc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea4e:	f003 031f 	and.w	r3, r3, #31
 800ea52:	2202      	movs	r2, #2
 800ea54:	409a      	lsls	r2, r3
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d018      	beq.n	800ea96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d109      	bne.n	800ea82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 813a 	beq.w	800ecec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ea80:	e134      	b.n	800ecec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f000 8130 	beq.w	800ecec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ea94:	e12a      	b.n	800ecec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	f003 0320 	and.w	r3, r3, #32
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f040 8089 	bne.w	800ebb4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4a2b      	ldr	r2, [pc, #172]	; (800eb54 <HAL_DMA_IRQHandler+0xc74>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d04a      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a29      	ldr	r2, [pc, #164]	; (800eb58 <HAL_DMA_IRQHandler+0xc78>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d045      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a28      	ldr	r2, [pc, #160]	; (800eb5c <HAL_DMA_IRQHandler+0xc7c>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d040      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a26      	ldr	r2, [pc, #152]	; (800eb60 <HAL_DMA_IRQHandler+0xc80>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d03b      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a25      	ldr	r2, [pc, #148]	; (800eb64 <HAL_DMA_IRQHandler+0xc84>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d036      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a23      	ldr	r2, [pc, #140]	; (800eb68 <HAL_DMA_IRQHandler+0xc88>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d031      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a22      	ldr	r2, [pc, #136]	; (800eb6c <HAL_DMA_IRQHandler+0xc8c>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d02c      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a20      	ldr	r2, [pc, #128]	; (800eb70 <HAL_DMA_IRQHandler+0xc90>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d027      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4a1f      	ldr	r2, [pc, #124]	; (800eb74 <HAL_DMA_IRQHandler+0xc94>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d022      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a1d      	ldr	r2, [pc, #116]	; (800eb78 <HAL_DMA_IRQHandler+0xc98>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d01d      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a1c      	ldr	r2, [pc, #112]	; (800eb7c <HAL_DMA_IRQHandler+0xc9c>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d018      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4a1a      	ldr	r2, [pc, #104]	; (800eb80 <HAL_DMA_IRQHandler+0xca0>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d013      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4a19      	ldr	r2, [pc, #100]	; (800eb84 <HAL_DMA_IRQHandler+0xca4>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d00e      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a17      	ldr	r2, [pc, #92]	; (800eb88 <HAL_DMA_IRQHandler+0xca8>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d009      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	4a16      	ldr	r2, [pc, #88]	; (800eb8c <HAL_DMA_IRQHandler+0xcac>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d004      	beq.n	800eb42 <HAL_DMA_IRQHandler+0xc62>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4a14      	ldr	r2, [pc, #80]	; (800eb90 <HAL_DMA_IRQHandler+0xcb0>)
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d128      	bne.n	800eb94 <HAL_DMA_IRQHandler+0xcb4>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f022 0214 	bic.w	r2, r2, #20
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	e027      	b.n	800eba4 <HAL_DMA_IRQHandler+0xcc4>
 800eb54:	40020010 	.word	0x40020010
 800eb58:	40020028 	.word	0x40020028
 800eb5c:	40020040 	.word	0x40020040
 800eb60:	40020058 	.word	0x40020058
 800eb64:	40020070 	.word	0x40020070
 800eb68:	40020088 	.word	0x40020088
 800eb6c:	400200a0 	.word	0x400200a0
 800eb70:	400200b8 	.word	0x400200b8
 800eb74:	40020410 	.word	0x40020410
 800eb78:	40020428 	.word	0x40020428
 800eb7c:	40020440 	.word	0x40020440
 800eb80:	40020458 	.word	0x40020458
 800eb84:	40020470 	.word	0x40020470
 800eb88:	40020488 	.word	0x40020488
 800eb8c:	400204a0 	.word	0x400204a0
 800eb90:	400204b8 	.word	0x400204b8
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f022 020a 	bic.w	r2, r2, #10
 800eba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2201      	movs	r2, #1
 800eba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f000 8097 	beq.w	800ecec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ebc6:	e091      	b.n	800ecec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebcc:	f003 031f 	and.w	r3, r3, #31
 800ebd0:	2208      	movs	r2, #8
 800ebd2:	409a      	lsls	r2, r3
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	4013      	ands	r3, r2
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 8088 	beq.w	800ecee <HAL_DMA_IRQHandler+0xe0e>
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	f003 0308 	and.w	r3, r3, #8
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 8082 	beq.w	800ecee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a41      	ldr	r2, [pc, #260]	; (800ecf4 <HAL_DMA_IRQHandler+0xe14>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d04a      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a3f      	ldr	r2, [pc, #252]	; (800ecf8 <HAL_DMA_IRQHandler+0xe18>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d045      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a3e      	ldr	r2, [pc, #248]	; (800ecfc <HAL_DMA_IRQHandler+0xe1c>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d040      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a3c      	ldr	r2, [pc, #240]	; (800ed00 <HAL_DMA_IRQHandler+0xe20>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d03b      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a3b      	ldr	r2, [pc, #236]	; (800ed04 <HAL_DMA_IRQHandler+0xe24>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d036      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a39      	ldr	r2, [pc, #228]	; (800ed08 <HAL_DMA_IRQHandler+0xe28>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d031      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a38      	ldr	r2, [pc, #224]	; (800ed0c <HAL_DMA_IRQHandler+0xe2c>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d02c      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a36      	ldr	r2, [pc, #216]	; (800ed10 <HAL_DMA_IRQHandler+0xe30>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d027      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a35      	ldr	r2, [pc, #212]	; (800ed14 <HAL_DMA_IRQHandler+0xe34>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d022      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a33      	ldr	r2, [pc, #204]	; (800ed18 <HAL_DMA_IRQHandler+0xe38>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d01d      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a32      	ldr	r2, [pc, #200]	; (800ed1c <HAL_DMA_IRQHandler+0xe3c>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d018      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a30      	ldr	r2, [pc, #192]	; (800ed20 <HAL_DMA_IRQHandler+0xe40>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d013      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a2f      	ldr	r2, [pc, #188]	; (800ed24 <HAL_DMA_IRQHandler+0xe44>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d00e      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a2d      	ldr	r2, [pc, #180]	; (800ed28 <HAL_DMA_IRQHandler+0xe48>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d009      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a2c      	ldr	r2, [pc, #176]	; (800ed2c <HAL_DMA_IRQHandler+0xe4c>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d004      	beq.n	800ec8a <HAL_DMA_IRQHandler+0xdaa>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a2a      	ldr	r2, [pc, #168]	; (800ed30 <HAL_DMA_IRQHandler+0xe50>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d108      	bne.n	800ec9c <HAL_DMA_IRQHandler+0xdbc>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f022 021c 	bic.w	r2, r2, #28
 800ec98:	601a      	str	r2, [r3, #0]
 800ec9a:	e007      	b.n	800ecac <HAL_DMA_IRQHandler+0xdcc>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f022 020e 	bic.w	r2, r2, #14
 800ecaa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecb0:	f003 031f 	and.w	r3, r3, #31
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	409a      	lsls	r2, r3
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d009      	beq.n	800ecee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	4798      	blx	r3
 800ece2:	e004      	b.n	800ecee <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ece4:	bf00      	nop
 800ece6:	e002      	b.n	800ecee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ece8:	bf00      	nop
 800ecea:	e000      	b.n	800ecee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ecec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ecee:	3728      	adds	r7, #40	; 0x28
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	40020010 	.word	0x40020010
 800ecf8:	40020028 	.word	0x40020028
 800ecfc:	40020040 	.word	0x40020040
 800ed00:	40020058 	.word	0x40020058
 800ed04:	40020070 	.word	0x40020070
 800ed08:	40020088 	.word	0x40020088
 800ed0c:	400200a0 	.word	0x400200a0
 800ed10:	400200b8 	.word	0x400200b8
 800ed14:	40020410 	.word	0x40020410
 800ed18:	40020428 	.word	0x40020428
 800ed1c:	40020440 	.word	0x40020440
 800ed20:	40020458 	.word	0x40020458
 800ed24:	40020470 	.word	0x40020470
 800ed28:	40020488 	.word	0x40020488
 800ed2c:	400204a0 	.word	0x400204a0
 800ed30:	400204b8 	.word	0x400204b8

0800ed34 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ed42:	b2db      	uxtb	r3, r3
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b087      	sub	sp, #28
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a7f      	ldr	r2, [pc, #508]	; (800ef84 <DMA_SetConfig+0x21c>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d072      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a7d      	ldr	r2, [pc, #500]	; (800ef88 <DMA_SetConfig+0x220>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d06d      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a7c      	ldr	r2, [pc, #496]	; (800ef8c <DMA_SetConfig+0x224>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d068      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a7a      	ldr	r2, [pc, #488]	; (800ef90 <DMA_SetConfig+0x228>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d063      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4a79      	ldr	r2, [pc, #484]	; (800ef94 <DMA_SetConfig+0x22c>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d05e      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a77      	ldr	r2, [pc, #476]	; (800ef98 <DMA_SetConfig+0x230>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d059      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4a76      	ldr	r2, [pc, #472]	; (800ef9c <DMA_SetConfig+0x234>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d054      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a74      	ldr	r2, [pc, #464]	; (800efa0 <DMA_SetConfig+0x238>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d04f      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4a73      	ldr	r2, [pc, #460]	; (800efa4 <DMA_SetConfig+0x23c>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d04a      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a71      	ldr	r2, [pc, #452]	; (800efa8 <DMA_SetConfig+0x240>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d045      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a70      	ldr	r2, [pc, #448]	; (800efac <DMA_SetConfig+0x244>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d040      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a6e      	ldr	r2, [pc, #440]	; (800efb0 <DMA_SetConfig+0x248>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d03b      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a6d      	ldr	r2, [pc, #436]	; (800efb4 <DMA_SetConfig+0x24c>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d036      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a6b      	ldr	r2, [pc, #428]	; (800efb8 <DMA_SetConfig+0x250>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d031      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4a6a      	ldr	r2, [pc, #424]	; (800efbc <DMA_SetConfig+0x254>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d02c      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a68      	ldr	r2, [pc, #416]	; (800efc0 <DMA_SetConfig+0x258>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d027      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a67      	ldr	r2, [pc, #412]	; (800efc4 <DMA_SetConfig+0x25c>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d022      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a65      	ldr	r2, [pc, #404]	; (800efc8 <DMA_SetConfig+0x260>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d01d      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a64      	ldr	r2, [pc, #400]	; (800efcc <DMA_SetConfig+0x264>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d018      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4a62      	ldr	r2, [pc, #392]	; (800efd0 <DMA_SetConfig+0x268>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d013      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4a61      	ldr	r2, [pc, #388]	; (800efd4 <DMA_SetConfig+0x26c>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d00e      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a5f      	ldr	r2, [pc, #380]	; (800efd8 <DMA_SetConfig+0x270>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d009      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a5e      	ldr	r2, [pc, #376]	; (800efdc <DMA_SetConfig+0x274>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d004      	beq.n	800ee72 <DMA_SetConfig+0x10a>
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a5c      	ldr	r2, [pc, #368]	; (800efe0 <DMA_SetConfig+0x278>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d101      	bne.n	800ee76 <DMA_SetConfig+0x10e>
 800ee72:	2301      	movs	r3, #1
 800ee74:	e000      	b.n	800ee78 <DMA_SetConfig+0x110>
 800ee76:	2300      	movs	r3, #0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00d      	beq.n	800ee98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ee84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d004      	beq.n	800ee98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ee96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a39      	ldr	r2, [pc, #228]	; (800ef84 <DMA_SetConfig+0x21c>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d04a      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4a38      	ldr	r2, [pc, #224]	; (800ef88 <DMA_SetConfig+0x220>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d045      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a36      	ldr	r2, [pc, #216]	; (800ef8c <DMA_SetConfig+0x224>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d040      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a35      	ldr	r2, [pc, #212]	; (800ef90 <DMA_SetConfig+0x228>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d03b      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a33      	ldr	r2, [pc, #204]	; (800ef94 <DMA_SetConfig+0x22c>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d036      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a32      	ldr	r2, [pc, #200]	; (800ef98 <DMA_SetConfig+0x230>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d031      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a30      	ldr	r2, [pc, #192]	; (800ef9c <DMA_SetConfig+0x234>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d02c      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a2f      	ldr	r2, [pc, #188]	; (800efa0 <DMA_SetConfig+0x238>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d027      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a2d      	ldr	r2, [pc, #180]	; (800efa4 <DMA_SetConfig+0x23c>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d022      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a2c      	ldr	r2, [pc, #176]	; (800efa8 <DMA_SetConfig+0x240>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d01d      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a2a      	ldr	r2, [pc, #168]	; (800efac <DMA_SetConfig+0x244>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d018      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a29      	ldr	r2, [pc, #164]	; (800efb0 <DMA_SetConfig+0x248>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d013      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a27      	ldr	r2, [pc, #156]	; (800efb4 <DMA_SetConfig+0x24c>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d00e      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a26      	ldr	r2, [pc, #152]	; (800efb8 <DMA_SetConfig+0x250>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d009      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a24      	ldr	r2, [pc, #144]	; (800efbc <DMA_SetConfig+0x254>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d004      	beq.n	800ef38 <DMA_SetConfig+0x1d0>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4a23      	ldr	r2, [pc, #140]	; (800efc0 <DMA_SetConfig+0x258>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d101      	bne.n	800ef3c <DMA_SetConfig+0x1d4>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e000      	b.n	800ef3e <DMA_SetConfig+0x1d6>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d059      	beq.n	800eff6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef46:	f003 031f 	and.w	r3, r3, #31
 800ef4a:	223f      	movs	r2, #63	; 0x3f
 800ef4c:	409a      	lsls	r2, r3
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ef60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	2b40      	cmp	r3, #64	; 0x40
 800ef70:	d138      	bne.n	800efe4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ef82:	e086      	b.n	800f092 <DMA_SetConfig+0x32a>
 800ef84:	40020010 	.word	0x40020010
 800ef88:	40020028 	.word	0x40020028
 800ef8c:	40020040 	.word	0x40020040
 800ef90:	40020058 	.word	0x40020058
 800ef94:	40020070 	.word	0x40020070
 800ef98:	40020088 	.word	0x40020088
 800ef9c:	400200a0 	.word	0x400200a0
 800efa0:	400200b8 	.word	0x400200b8
 800efa4:	40020410 	.word	0x40020410
 800efa8:	40020428 	.word	0x40020428
 800efac:	40020440 	.word	0x40020440
 800efb0:	40020458 	.word	0x40020458
 800efb4:	40020470 	.word	0x40020470
 800efb8:	40020488 	.word	0x40020488
 800efbc:	400204a0 	.word	0x400204a0
 800efc0:	400204b8 	.word	0x400204b8
 800efc4:	58025408 	.word	0x58025408
 800efc8:	5802541c 	.word	0x5802541c
 800efcc:	58025430 	.word	0x58025430
 800efd0:	58025444 	.word	0x58025444
 800efd4:	58025458 	.word	0x58025458
 800efd8:	5802546c 	.word	0x5802546c
 800efdc:	58025480 	.word	0x58025480
 800efe0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	60da      	str	r2, [r3, #12]
}
 800eff4:	e04d      	b.n	800f092 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a29      	ldr	r2, [pc, #164]	; (800f0a0 <DMA_SetConfig+0x338>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d022      	beq.n	800f046 <DMA_SetConfig+0x2de>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a27      	ldr	r2, [pc, #156]	; (800f0a4 <DMA_SetConfig+0x33c>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d01d      	beq.n	800f046 <DMA_SetConfig+0x2de>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4a26      	ldr	r2, [pc, #152]	; (800f0a8 <DMA_SetConfig+0x340>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d018      	beq.n	800f046 <DMA_SetConfig+0x2de>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a24      	ldr	r2, [pc, #144]	; (800f0ac <DMA_SetConfig+0x344>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d013      	beq.n	800f046 <DMA_SetConfig+0x2de>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4a23      	ldr	r2, [pc, #140]	; (800f0b0 <DMA_SetConfig+0x348>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d00e      	beq.n	800f046 <DMA_SetConfig+0x2de>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a21      	ldr	r2, [pc, #132]	; (800f0b4 <DMA_SetConfig+0x34c>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d009      	beq.n	800f046 <DMA_SetConfig+0x2de>
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4a20      	ldr	r2, [pc, #128]	; (800f0b8 <DMA_SetConfig+0x350>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d004      	beq.n	800f046 <DMA_SetConfig+0x2de>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4a1e      	ldr	r2, [pc, #120]	; (800f0bc <DMA_SetConfig+0x354>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d101      	bne.n	800f04a <DMA_SetConfig+0x2e2>
 800f046:	2301      	movs	r3, #1
 800f048:	e000      	b.n	800f04c <DMA_SetConfig+0x2e4>
 800f04a:	2300      	movs	r3, #0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d020      	beq.n	800f092 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f054:	f003 031f 	and.w	r3, r3, #31
 800f058:	2201      	movs	r2, #1
 800f05a:	409a      	lsls	r2, r3
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	683a      	ldr	r2, [r7, #0]
 800f066:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	2b40      	cmp	r3, #64	; 0x40
 800f06e:	d108      	bne.n	800f082 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68ba      	ldr	r2, [r7, #8]
 800f07e:	60da      	str	r2, [r3, #12]
}
 800f080:	e007      	b.n	800f092 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	60da      	str	r2, [r3, #12]
}
 800f092:	bf00      	nop
 800f094:	371c      	adds	r7, #28
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	58025408 	.word	0x58025408
 800f0a4:	5802541c 	.word	0x5802541c
 800f0a8:	58025430 	.word	0x58025430
 800f0ac:	58025444 	.word	0x58025444
 800f0b0:	58025458 	.word	0x58025458
 800f0b4:	5802546c 	.word	0x5802546c
 800f0b8:	58025480 	.word	0x58025480
 800f0bc:	58025494 	.word	0x58025494

0800f0c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a42      	ldr	r2, [pc, #264]	; (800f1d8 <DMA_CalcBaseAndBitshift+0x118>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d04a      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a41      	ldr	r2, [pc, #260]	; (800f1dc <DMA_CalcBaseAndBitshift+0x11c>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d045      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a3f      	ldr	r2, [pc, #252]	; (800f1e0 <DMA_CalcBaseAndBitshift+0x120>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d040      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a3e      	ldr	r2, [pc, #248]	; (800f1e4 <DMA_CalcBaseAndBitshift+0x124>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d03b      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a3c      	ldr	r2, [pc, #240]	; (800f1e8 <DMA_CalcBaseAndBitshift+0x128>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d036      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a3b      	ldr	r2, [pc, #236]	; (800f1ec <DMA_CalcBaseAndBitshift+0x12c>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d031      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a39      	ldr	r2, [pc, #228]	; (800f1f0 <DMA_CalcBaseAndBitshift+0x130>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d02c      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a38      	ldr	r2, [pc, #224]	; (800f1f4 <DMA_CalcBaseAndBitshift+0x134>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d027      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a36      	ldr	r2, [pc, #216]	; (800f1f8 <DMA_CalcBaseAndBitshift+0x138>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d022      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a35      	ldr	r2, [pc, #212]	; (800f1fc <DMA_CalcBaseAndBitshift+0x13c>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d01d      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4a33      	ldr	r2, [pc, #204]	; (800f200 <DMA_CalcBaseAndBitshift+0x140>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d018      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a32      	ldr	r2, [pc, #200]	; (800f204 <DMA_CalcBaseAndBitshift+0x144>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d013      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a30      	ldr	r2, [pc, #192]	; (800f208 <DMA_CalcBaseAndBitshift+0x148>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d00e      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4a2f      	ldr	r2, [pc, #188]	; (800f20c <DMA_CalcBaseAndBitshift+0x14c>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d009      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a2d      	ldr	r2, [pc, #180]	; (800f210 <DMA_CalcBaseAndBitshift+0x150>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d004      	beq.n	800f168 <DMA_CalcBaseAndBitshift+0xa8>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	4a2c      	ldr	r2, [pc, #176]	; (800f214 <DMA_CalcBaseAndBitshift+0x154>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d101      	bne.n	800f16c <DMA_CalcBaseAndBitshift+0xac>
 800f168:	2301      	movs	r3, #1
 800f16a:	e000      	b.n	800f16e <DMA_CalcBaseAndBitshift+0xae>
 800f16c:	2300      	movs	r3, #0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d024      	beq.n	800f1bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	b2db      	uxtb	r3, r3
 800f178:	3b10      	subs	r3, #16
 800f17a:	4a27      	ldr	r2, [pc, #156]	; (800f218 <DMA_CalcBaseAndBitshift+0x158>)
 800f17c:	fba2 2303 	umull	r2, r3, r2, r3
 800f180:	091b      	lsrs	r3, r3, #4
 800f182:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f003 0307 	and.w	r3, r3, #7
 800f18a:	4a24      	ldr	r2, [pc, #144]	; (800f21c <DMA_CalcBaseAndBitshift+0x15c>)
 800f18c:	5cd3      	ldrb	r3, [r2, r3]
 800f18e:	461a      	mov	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b03      	cmp	r3, #3
 800f198:	d908      	bls.n	800f1ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4b1f      	ldr	r3, [pc, #124]	; (800f220 <DMA_CalcBaseAndBitshift+0x160>)
 800f1a2:	4013      	ands	r3, r2
 800f1a4:	1d1a      	adds	r2, r3, #4
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	659a      	str	r2, [r3, #88]	; 0x58
 800f1aa:	e00d      	b.n	800f1c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4b1b      	ldr	r3, [pc, #108]	; (800f220 <DMA_CalcBaseAndBitshift+0x160>)
 800f1b4:	4013      	ands	r3, r2
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	6593      	str	r3, [r2, #88]	; 0x58
 800f1ba:	e005      	b.n	800f1c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3714      	adds	r7, #20
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr
 800f1d8:	40020010 	.word	0x40020010
 800f1dc:	40020028 	.word	0x40020028
 800f1e0:	40020040 	.word	0x40020040
 800f1e4:	40020058 	.word	0x40020058
 800f1e8:	40020070 	.word	0x40020070
 800f1ec:	40020088 	.word	0x40020088
 800f1f0:	400200a0 	.word	0x400200a0
 800f1f4:	400200b8 	.word	0x400200b8
 800f1f8:	40020410 	.word	0x40020410
 800f1fc:	40020428 	.word	0x40020428
 800f200:	40020440 	.word	0x40020440
 800f204:	40020458 	.word	0x40020458
 800f208:	40020470 	.word	0x40020470
 800f20c:	40020488 	.word	0x40020488
 800f210:	400204a0 	.word	0x400204a0
 800f214:	400204b8 	.word	0x400204b8
 800f218:	aaaaaaab 	.word	0xaaaaaaab
 800f21c:	08038ad4 	.word	0x08038ad4
 800f220:	fffffc00 	.word	0xfffffc00

0800f224 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	699b      	ldr	r3, [r3, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d120      	bne.n	800f27a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d858      	bhi.n	800f2f2 <DMA_CheckFifoParam+0xce>
 800f240:	a201      	add	r2, pc, #4	; (adr r2, 800f248 <DMA_CheckFifoParam+0x24>)
 800f242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f246:	bf00      	nop
 800f248:	0800f259 	.word	0x0800f259
 800f24c:	0800f26b 	.word	0x0800f26b
 800f250:	0800f259 	.word	0x0800f259
 800f254:	0800f2f3 	.word	0x0800f2f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d048      	beq.n	800f2f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800f264:	2301      	movs	r3, #1
 800f266:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f268:	e045      	b.n	800f2f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f26e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f272:	d142      	bne.n	800f2fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800f274:	2301      	movs	r3, #1
 800f276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f278:	e03f      	b.n	800f2fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	699b      	ldr	r3, [r3, #24]
 800f27e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f282:	d123      	bne.n	800f2cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f288:	2b03      	cmp	r3, #3
 800f28a:	d838      	bhi.n	800f2fe <DMA_CheckFifoParam+0xda>
 800f28c:	a201      	add	r2, pc, #4	; (adr r2, 800f294 <DMA_CheckFifoParam+0x70>)
 800f28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f292:	bf00      	nop
 800f294:	0800f2a5 	.word	0x0800f2a5
 800f298:	0800f2ab 	.word	0x0800f2ab
 800f29c:	0800f2a5 	.word	0x0800f2a5
 800f2a0:	0800f2bd 	.word	0x0800f2bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	73fb      	strb	r3, [r7, #15]
        break;
 800f2a8:	e030      	b.n	800f30c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d025      	beq.n	800f302 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f2ba:	e022      	b.n	800f302 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f2c4:	d11f      	bne.n	800f306 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f2ca:	e01c      	b.n	800f306 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d0:	2b02      	cmp	r3, #2
 800f2d2:	d902      	bls.n	800f2da <DMA_CheckFifoParam+0xb6>
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	d003      	beq.n	800f2e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800f2d8:	e018      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	73fb      	strb	r3, [r7, #15]
        break;
 800f2de:	e015      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00e      	beq.n	800f30a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f2f0:	e00b      	b.n	800f30a <DMA_CheckFifoParam+0xe6>
        break;
 800f2f2:	bf00      	nop
 800f2f4:	e00a      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
        break;
 800f2f6:	bf00      	nop
 800f2f8:	e008      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
        break;
 800f2fa:	bf00      	nop
 800f2fc:	e006      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
        break;
 800f2fe:	bf00      	nop
 800f300:	e004      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
        break;
 800f302:	bf00      	nop
 800f304:	e002      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
        break;
 800f306:	bf00      	nop
 800f308:	e000      	b.n	800f30c <DMA_CheckFifoParam+0xe8>
    break;
 800f30a:	bf00      	nop
    }
  }

  return status;
 800f30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3714      	adds	r7, #20
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop

0800f31c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4a38      	ldr	r2, [pc, #224]	; (800f410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d022      	beq.n	800f37a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a36      	ldr	r2, [pc, #216]	; (800f414 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d01d      	beq.n	800f37a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a35      	ldr	r2, [pc, #212]	; (800f418 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d018      	beq.n	800f37a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a33      	ldr	r2, [pc, #204]	; (800f41c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d013      	beq.n	800f37a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a32      	ldr	r2, [pc, #200]	; (800f420 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d00e      	beq.n	800f37a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a30      	ldr	r2, [pc, #192]	; (800f424 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d009      	beq.n	800f37a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a2f      	ldr	r2, [pc, #188]	; (800f428 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d004      	beq.n	800f37a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a2d      	ldr	r2, [pc, #180]	; (800f42c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d101      	bne.n	800f37e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800f37a:	2301      	movs	r3, #1
 800f37c:	e000      	b.n	800f380 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800f37e:	2300      	movs	r3, #0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d01a      	beq.n	800f3ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	3b08      	subs	r3, #8
 800f38c:	4a28      	ldr	r2, [pc, #160]	; (800f430 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800f38e:	fba2 2303 	umull	r2, r3, r2, r3
 800f392:	091b      	lsrs	r3, r3, #4
 800f394:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	4b26      	ldr	r3, [pc, #152]	; (800f434 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800f39a:	4413      	add	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	461a      	mov	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a24      	ldr	r2, [pc, #144]	; (800f438 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800f3a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f003 031f 	and.w	r3, r3, #31
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	409a      	lsls	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800f3b8:	e024      	b.n	800f404 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	3b10      	subs	r3, #16
 800f3c2:	4a1e      	ldr	r2, [pc, #120]	; (800f43c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800f3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f3c8:	091b      	lsrs	r3, r3, #4
 800f3ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	4a1c      	ldr	r2, [pc, #112]	; (800f440 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d806      	bhi.n	800f3e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	4a1b      	ldr	r2, [pc, #108]	; (800f444 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d902      	bls.n	800f3e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	3308      	adds	r3, #8
 800f3e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	4b18      	ldr	r3, [pc, #96]	; (800f448 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800f3e6:	4413      	add	r3, r2
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a16      	ldr	r2, [pc, #88]	; (800f44c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800f3f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f003 031f 	and.w	r3, r3, #31
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	409a      	lsls	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	669a      	str	r2, [r3, #104]	; 0x68
}
 800f404:	bf00      	nop
 800f406:	3714      	adds	r7, #20
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr
 800f410:	58025408 	.word	0x58025408
 800f414:	5802541c 	.word	0x5802541c
 800f418:	58025430 	.word	0x58025430
 800f41c:	58025444 	.word	0x58025444
 800f420:	58025458 	.word	0x58025458
 800f424:	5802546c 	.word	0x5802546c
 800f428:	58025480 	.word	0x58025480
 800f42c:	58025494 	.word	0x58025494
 800f430:	cccccccd 	.word	0xcccccccd
 800f434:	16009600 	.word	0x16009600
 800f438:	58025880 	.word	0x58025880
 800f43c:	aaaaaaab 	.word	0xaaaaaaab
 800f440:	400204b8 	.word	0x400204b8
 800f444:	4002040f 	.word	0x4002040f
 800f448:	10008200 	.word	0x10008200
 800f44c:	40020880 	.word	0x40020880

0800f450 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f450:	b480      	push	{r7}
 800f452:	b085      	sub	sp, #20
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d04a      	beq.n	800f4fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2b08      	cmp	r3, #8
 800f46a:	d847      	bhi.n	800f4fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a25      	ldr	r2, [pc, #148]	; (800f508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d022      	beq.n	800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4a24      	ldr	r2, [pc, #144]	; (800f50c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d01d      	beq.n	800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a22      	ldr	r2, [pc, #136]	; (800f510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d018      	beq.n	800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4a21      	ldr	r2, [pc, #132]	; (800f514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d013      	beq.n	800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4a1f      	ldr	r2, [pc, #124]	; (800f518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d00e      	beq.n	800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4a1e      	ldr	r2, [pc, #120]	; (800f51c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d009      	beq.n	800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4a1c      	ldr	r2, [pc, #112]	; (800f520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d004      	beq.n	800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a1b      	ldr	r2, [pc, #108]	; (800f524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d101      	bne.n	800f4c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e000      	b.n	800f4c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00a      	beq.n	800f4dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	4b17      	ldr	r3, [pc, #92]	; (800f528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800f4ca:	4413      	add	r3, r2
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a15      	ldr	r2, [pc, #84]	; (800f52c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800f4d8:	671a      	str	r2, [r3, #112]	; 0x70
 800f4da:	e009      	b.n	800f4f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f4dc:	68fa      	ldr	r2, [r7, #12]
 800f4de:	4b14      	ldr	r3, [pc, #80]	; (800f530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800f4e0:	4413      	add	r3, r2
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a11      	ldr	r2, [pc, #68]	; (800f534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800f4ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	409a      	lsls	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800f4fc:	bf00      	nop
 800f4fe:	3714      	adds	r7, #20
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr
 800f508:	58025408 	.word	0x58025408
 800f50c:	5802541c 	.word	0x5802541c
 800f510:	58025430 	.word	0x58025430
 800f514:	58025444 	.word	0x58025444
 800f518:	58025458 	.word	0x58025458
 800f51c:	5802546c 	.word	0x5802546c
 800f520:	58025480 	.word	0x58025480
 800f524:	58025494 	.word	0x58025494
 800f528:	1600963f 	.word	0x1600963f
 800f52c:	58025940 	.word	0x58025940
 800f530:	1000823f 	.word	0x1000823f
 800f534:	40020940 	.word	0x40020940

0800f538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f538:	b480      	push	{r7}
 800f53a:	b089      	sub	sp, #36	; 0x24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f542:	2300      	movs	r3, #0
 800f544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f546:	4b89      	ldr	r3, [pc, #548]	; (800f76c <HAL_GPIO_Init+0x234>)
 800f548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f54a:	e194      	b.n	800f876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	2101      	movs	r1, #1
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	fa01 f303 	lsl.w	r3, r1, r3
 800f558:	4013      	ands	r3, r2
 800f55a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f000 8186 	beq.w	800f870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	f003 0303 	and.w	r3, r3, #3
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d005      	beq.n	800f57c <HAL_GPIO_Init+0x44>
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	f003 0303 	and.w	r3, r3, #3
 800f578:	2b02      	cmp	r3, #2
 800f57a:	d130      	bne.n	800f5de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	005b      	lsls	r3, r3, #1
 800f586:	2203      	movs	r2, #3
 800f588:	fa02 f303 	lsl.w	r3, r2, r3
 800f58c:	43db      	mvns	r3, r3
 800f58e:	69ba      	ldr	r2, [r7, #24]
 800f590:	4013      	ands	r3, r2
 800f592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	68da      	ldr	r2, [r3, #12]
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	fa02 f303 	lsl.w	r3, r2, r3
 800f5a0:	69ba      	ldr	r2, [r7, #24]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	69ba      	ldr	r2, [r7, #24]
 800f5aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5ba:	43db      	mvns	r3, r3
 800f5bc:	69ba      	ldr	r2, [r7, #24]
 800f5be:	4013      	ands	r3, r2
 800f5c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	091b      	lsrs	r3, r3, #4
 800f5c8:	f003 0201 	and.w	r2, r3, #1
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f5d2:	69ba      	ldr	r2, [r7, #24]
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	69ba      	ldr	r2, [r7, #24]
 800f5dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d017      	beq.n	800f61a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	2203      	movs	r2, #3
 800f5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5fa:	43db      	mvns	r3, r3
 800f5fc:	69ba      	ldr	r2, [r7, #24]
 800f5fe:	4013      	ands	r3, r2
 800f600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	689a      	ldr	r2, [r3, #8]
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	005b      	lsls	r3, r3, #1
 800f60a:	fa02 f303 	lsl.w	r3, r2, r3
 800f60e:	69ba      	ldr	r2, [r7, #24]
 800f610:	4313      	orrs	r3, r2
 800f612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	69ba      	ldr	r2, [r7, #24]
 800f618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	f003 0303 	and.w	r3, r3, #3
 800f622:	2b02      	cmp	r3, #2
 800f624:	d123      	bne.n	800f66e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	08da      	lsrs	r2, r3, #3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	3208      	adds	r2, #8
 800f62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	f003 0307 	and.w	r3, r3, #7
 800f63a:	009b      	lsls	r3, r3, #2
 800f63c:	220f      	movs	r2, #15
 800f63e:	fa02 f303 	lsl.w	r3, r2, r3
 800f642:	43db      	mvns	r3, r3
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	4013      	ands	r3, r2
 800f648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	691a      	ldr	r2, [r3, #16]
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	f003 0307 	and.w	r3, r3, #7
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	fa02 f303 	lsl.w	r3, r2, r3
 800f65a:	69ba      	ldr	r2, [r7, #24]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	08da      	lsrs	r2, r3, #3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	3208      	adds	r2, #8
 800f668:	69b9      	ldr	r1, [r7, #24]
 800f66a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	2203      	movs	r2, #3
 800f67a:	fa02 f303 	lsl.w	r3, r2, r3
 800f67e:	43db      	mvns	r3, r3
 800f680:	69ba      	ldr	r2, [r7, #24]
 800f682:	4013      	ands	r3, r2
 800f684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	f003 0203 	and.w	r2, r3, #3
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	005b      	lsls	r3, r3, #1
 800f692:	fa02 f303 	lsl.w	r3, r2, r3
 800f696:	69ba      	ldr	r2, [r7, #24]
 800f698:	4313      	orrs	r3, r2
 800f69a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	69ba      	ldr	r2, [r7, #24]
 800f6a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f000 80e0 	beq.w	800f870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f6b0:	4b2f      	ldr	r3, [pc, #188]	; (800f770 <HAL_GPIO_Init+0x238>)
 800f6b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f6b6:	4a2e      	ldr	r2, [pc, #184]	; (800f770 <HAL_GPIO_Init+0x238>)
 800f6b8:	f043 0302 	orr.w	r3, r3, #2
 800f6bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f6c0:	4b2b      	ldr	r3, [pc, #172]	; (800f770 <HAL_GPIO_Init+0x238>)
 800f6c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f6c6:	f003 0302 	and.w	r3, r3, #2
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f6ce:	4a29      	ldr	r2, [pc, #164]	; (800f774 <HAL_GPIO_Init+0x23c>)
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	089b      	lsrs	r3, r3, #2
 800f6d4:	3302      	adds	r3, #2
 800f6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	f003 0303 	and.w	r3, r3, #3
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	220f      	movs	r2, #15
 800f6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ea:	43db      	mvns	r3, r3
 800f6ec:	69ba      	ldr	r2, [r7, #24]
 800f6ee:	4013      	ands	r3, r2
 800f6f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4a20      	ldr	r2, [pc, #128]	; (800f778 <HAL_GPIO_Init+0x240>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d052      	beq.n	800f7a0 <HAL_GPIO_Init+0x268>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4a1f      	ldr	r2, [pc, #124]	; (800f77c <HAL_GPIO_Init+0x244>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d031      	beq.n	800f766 <HAL_GPIO_Init+0x22e>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4a1e      	ldr	r2, [pc, #120]	; (800f780 <HAL_GPIO_Init+0x248>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d02b      	beq.n	800f762 <HAL_GPIO_Init+0x22a>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4a1d      	ldr	r2, [pc, #116]	; (800f784 <HAL_GPIO_Init+0x24c>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d025      	beq.n	800f75e <HAL_GPIO_Init+0x226>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4a1c      	ldr	r2, [pc, #112]	; (800f788 <HAL_GPIO_Init+0x250>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d01f      	beq.n	800f75a <HAL_GPIO_Init+0x222>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4a1b      	ldr	r2, [pc, #108]	; (800f78c <HAL_GPIO_Init+0x254>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d019      	beq.n	800f756 <HAL_GPIO_Init+0x21e>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4a1a      	ldr	r2, [pc, #104]	; (800f790 <HAL_GPIO_Init+0x258>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d013      	beq.n	800f752 <HAL_GPIO_Init+0x21a>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4a19      	ldr	r2, [pc, #100]	; (800f794 <HAL_GPIO_Init+0x25c>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d00d      	beq.n	800f74e <HAL_GPIO_Init+0x216>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4a18      	ldr	r2, [pc, #96]	; (800f798 <HAL_GPIO_Init+0x260>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d007      	beq.n	800f74a <HAL_GPIO_Init+0x212>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a17      	ldr	r2, [pc, #92]	; (800f79c <HAL_GPIO_Init+0x264>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d101      	bne.n	800f746 <HAL_GPIO_Init+0x20e>
 800f742:	2309      	movs	r3, #9
 800f744:	e02d      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f746:	230a      	movs	r3, #10
 800f748:	e02b      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f74a:	2308      	movs	r3, #8
 800f74c:	e029      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f74e:	2307      	movs	r3, #7
 800f750:	e027      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f752:	2306      	movs	r3, #6
 800f754:	e025      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f756:	2305      	movs	r3, #5
 800f758:	e023      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f75a:	2304      	movs	r3, #4
 800f75c:	e021      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f75e:	2303      	movs	r3, #3
 800f760:	e01f      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f762:	2302      	movs	r3, #2
 800f764:	e01d      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f766:	2301      	movs	r3, #1
 800f768:	e01b      	b.n	800f7a2 <HAL_GPIO_Init+0x26a>
 800f76a:	bf00      	nop
 800f76c:	58000080 	.word	0x58000080
 800f770:	58024400 	.word	0x58024400
 800f774:	58000400 	.word	0x58000400
 800f778:	58020000 	.word	0x58020000
 800f77c:	58020400 	.word	0x58020400
 800f780:	58020800 	.word	0x58020800
 800f784:	58020c00 	.word	0x58020c00
 800f788:	58021000 	.word	0x58021000
 800f78c:	58021400 	.word	0x58021400
 800f790:	58021800 	.word	0x58021800
 800f794:	58021c00 	.word	0x58021c00
 800f798:	58022000 	.word	0x58022000
 800f79c:	58022400 	.word	0x58022400
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	69fa      	ldr	r2, [r7, #28]
 800f7a4:	f002 0203 	and.w	r2, r2, #3
 800f7a8:	0092      	lsls	r2, r2, #2
 800f7aa:	4093      	lsls	r3, r2
 800f7ac:	69ba      	ldr	r2, [r7, #24]
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f7b2:	4938      	ldr	r1, [pc, #224]	; (800f894 <HAL_GPIO_Init+0x35c>)
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	089b      	lsrs	r3, r3, #2
 800f7b8:	3302      	adds	r3, #2
 800f7ba:	69ba      	ldr	r2, [r7, #24]
 800f7bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f7c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	43db      	mvns	r3, r3
 800f7cc:	69ba      	ldr	r2, [r7, #24]
 800f7ce:	4013      	ands	r3, r2
 800f7d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d003      	beq.n	800f7e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800f7de:	69ba      	ldr	r2, [r7, #24]
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800f7e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f7ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	43db      	mvns	r3, r3
 800f7fa:	69ba      	ldr	r2, [r7, #24]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f80c:	69ba      	ldr	r2, [r7, #24]
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	4313      	orrs	r3, r2
 800f812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800f814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	43db      	mvns	r3, r3
 800f826:	69ba      	ldr	r2, [r7, #24]
 800f828:	4013      	ands	r3, r2
 800f82a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f834:	2b00      	cmp	r3, #0
 800f836:	d003      	beq.n	800f840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800f838:	69ba      	ldr	r2, [r7, #24]
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	69ba      	ldr	r2, [r7, #24]
 800f844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	43db      	mvns	r3, r3
 800f850:	69ba      	ldr	r2, [r7, #24]
 800f852:	4013      	ands	r3, r2
 800f854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800f862:	69ba      	ldr	r2, [r7, #24]
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	4313      	orrs	r3, r2
 800f868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	69ba      	ldr	r2, [r7, #24]
 800f86e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	3301      	adds	r3, #1
 800f874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	fa22 f303 	lsr.w	r3, r2, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	f47f ae63 	bne.w	800f54c <HAL_GPIO_Init+0x14>
  }
}
 800f886:	bf00      	nop
 800f888:	bf00      	nop
 800f88a:	3724      	adds	r7, #36	; 0x24
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	58000400 	.word	0x58000400

0800f898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	807b      	strh	r3, [r7, #2]
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f8a8:	787b      	ldrb	r3, [r7, #1]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d003      	beq.n	800f8b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f8ae:	887a      	ldrh	r2, [r7, #2]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800f8b4:	e003      	b.n	800f8be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f8b6:	887b      	ldrh	r3, [r7, #2]
 800f8b8:	041a      	lsls	r2, r3, #16
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	619a      	str	r2, [r3, #24]
}
 800f8be:	bf00      	nop
 800f8c0:	370c      	adds	r7, #12
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
	...

0800f8cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d101      	bne.n	800f8de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e07f      	b.n	800f9de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d106      	bne.n	800f8f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7fa ffb6 	bl	800a864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2224      	movs	r2, #36	; 0x24
 800f8fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f022 0201 	bic.w	r2, r2, #1
 800f90e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f91c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	689a      	ldr	r2, [r3, #8]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f92c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	2b01      	cmp	r3, #1
 800f934:	d107      	bne.n	800f946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	689a      	ldr	r2, [r3, #8]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f942:	609a      	str	r2, [r3, #8]
 800f944:	e006      	b.n	800f954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	689a      	ldr	r2, [r3, #8]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	2b02      	cmp	r3, #2
 800f95a:	d104      	bne.n	800f966 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f964:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6859      	ldr	r1, [r3, #4]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	4b1d      	ldr	r3, [pc, #116]	; (800f9e8 <HAL_I2C_Init+0x11c>)
 800f972:	430b      	orrs	r3, r1
 800f974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	68da      	ldr	r2, [r3, #12]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	691a      	ldr	r2, [r3, #16]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	695b      	ldr	r3, [r3, #20]
 800f98e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	699b      	ldr	r3, [r3, #24]
 800f996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	430a      	orrs	r2, r1
 800f99e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	69d9      	ldr	r1, [r3, #28]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6a1a      	ldr	r2, [r3, #32]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	430a      	orrs	r2, r1
 800f9ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f042 0201 	orr.w	r2, r2, #1
 800f9be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2220      	movs	r2, #32
 800f9ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	02008000 	.word	0x02008000

0800f9ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d005      	beq.n	800fa18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa10:	68ba      	ldr	r2, [r7, #8]
 800fa12:	68f9      	ldr	r1, [r7, #12]
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	4798      	blx	r3
  }
}
 800fa18:	bf00      	nop
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b086      	sub	sp, #24
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	699b      	ldr	r3, [r3, #24]
 800fa2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	0a1b      	lsrs	r3, r3, #8
 800fa3c:	f003 0301 	and.w	r3, r3, #1
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d010      	beq.n	800fa66 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	09db      	lsrs	r3, r3, #7
 800fa48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00a      	beq.n	800fa66 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa54:	f043 0201 	orr.w	r2, r3, #1
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	0a9b      	lsrs	r3, r3, #10
 800fa6a:	f003 0301 	and.w	r3, r3, #1
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d010      	beq.n	800fa94 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	09db      	lsrs	r3, r3, #7
 800fa76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00a      	beq.n	800fa94 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa82:	f043 0208 	orr.w	r2, r3, #8
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	0a5b      	lsrs	r3, r3, #9
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d010      	beq.n	800fac2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	09db      	lsrs	r3, r3, #7
 800faa4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d00a      	beq.n	800fac2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fab0:	f043 0202 	orr.w	r2, r3, #2
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fac0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fac6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f003 030b 	and.w	r3, r3, #11
 800face:	2b00      	cmp	r3, #0
 800fad0:	d003      	beq.n	800fada <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800fad2:	68f9      	ldr	r1, [r7, #12]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fc77 	bl	80103c8 <I2C_ITError>
  }
}
 800fada:	bf00      	nop
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fae2:	b480      	push	{r7}
 800fae4:	b083      	sub	sp, #12
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800faea:	bf00      	nop
 800faec:	370c      	adds	r7, #12
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr

0800faf6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800faf6:	b480      	push	{r7}
 800faf8:	b083      	sub	sp, #12
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800fafe:	bf00      	nop
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800fb0a:	b480      	push	{r7}
 800fb0c:	b083      	sub	sp, #12
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	460b      	mov	r3, r1
 800fb14:	70fb      	strb	r3, [r7, #3]
 800fb16:	4613      	mov	r3, r2
 800fb18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr

0800fb26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fb26:	b480      	push	{r7}
 800fb28:	b083      	sub	sp, #12
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800fb2e:	bf00      	nop
 800fb30:	370c      	adds	r7, #12
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr

0800fb3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fb3a:	b480      	push	{r7}
 800fb3c:	b083      	sub	sp, #12
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800fb42:	bf00      	nop
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr

0800fb4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fb4e:	b480      	push	{r7}
 800fb50:	b083      	sub	sp, #12
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800fb56:	bf00      	nop
 800fb58:	370c      	adds	r7, #12
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr

0800fb62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b086      	sub	sp, #24
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	60f8      	str	r0, [r7, #12]
 800fb6a:	60b9      	str	r1, [r7, #8]
 800fb6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d101      	bne.n	800fb86 <I2C_Slave_ISR_IT+0x24>
 800fb82:	2302      	movs	r3, #2
 800fb84:	e0ec      	b.n	800fd60 <I2C_Slave_ISR_IT+0x1fe>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2201      	movs	r2, #1
 800fb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	095b      	lsrs	r3, r3, #5
 800fb92:	f003 0301 	and.w	r3, r3, #1
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d009      	beq.n	800fbae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	095b      	lsrs	r3, r3, #5
 800fb9e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d003      	beq.n	800fbae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800fba6:	6939      	ldr	r1, [r7, #16]
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f000 f9bf 	bl	800ff2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	091b      	lsrs	r3, r3, #4
 800fbb2:	f003 0301 	and.w	r3, r3, #1
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d04d      	beq.n	800fc56 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	091b      	lsrs	r3, r3, #4
 800fbbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d047      	beq.n	800fc56 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d128      	bne.n	800fc22 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b28      	cmp	r3, #40	; 0x28
 800fbda:	d108      	bne.n	800fbee <I2C_Slave_ISR_IT+0x8c>
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fbe2:	d104      	bne.n	800fbee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800fbe4:	6939      	ldr	r1, [r7, #16]
 800fbe6:	68f8      	ldr	r0, [r7, #12]
 800fbe8:	f000 fb98 	bl	801031c <I2C_ITListenCplt>
 800fbec:	e032      	b.n	800fc54 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b29      	cmp	r3, #41	; 0x29
 800fbf8:	d10e      	bne.n	800fc18 <I2C_Slave_ISR_IT+0xb6>
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc00:	d00a      	beq.n	800fc18 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2210      	movs	r2, #16
 800fc08:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f000 fcd3 	bl	80105b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f000 f92d 	bl	800fe70 <I2C_ITSlaveSeqCplt>
 800fc16:	e01d      	b.n	800fc54 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2210      	movs	r2, #16
 800fc1e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fc20:	e096      	b.n	800fd50 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2210      	movs	r2, #16
 800fc28:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc2e:	f043 0204 	orr.w	r2, r3, #4
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d004      	beq.n	800fc46 <I2C_Slave_ISR_IT+0xe4>
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fc42:	f040 8085 	bne.w	800fd50 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 fbbb 	bl	80103c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fc52:	e07d      	b.n	800fd50 <I2C_Slave_ISR_IT+0x1ee>
 800fc54:	e07c      	b.n	800fd50 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	089b      	lsrs	r3, r3, #2
 800fc5a:	f003 0301 	and.w	r3, r3, #1
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d030      	beq.n	800fcc4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	089b      	lsrs	r3, r3, #2
 800fc66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d02a      	beq.n	800fcc4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d018      	beq.n	800fcaa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc82:	b2d2      	uxtb	r2, r2
 800fc84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8a:	1c5a      	adds	r2, r3, #1
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc94:	3b01      	subs	r3, #1
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	3b01      	subs	r3, #1
 800fca4:	b29a      	uxth	r2, r3
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d14f      	bne.n	800fd54 <I2C_Slave_ISR_IT+0x1f2>
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fcba:	d04b      	beq.n	800fd54 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f000 f8d7 	bl	800fe70 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fcc2:	e047      	b.n	800fd54 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	08db      	lsrs	r3, r3, #3
 800fcc8:	f003 0301 	and.w	r3, r3, #1
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00a      	beq.n	800fce6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	08db      	lsrs	r3, r3, #3
 800fcd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d004      	beq.n	800fce6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fcdc:	6939      	ldr	r1, [r7, #16]
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f000 f842 	bl	800fd68 <I2C_ITAddrCplt>
 800fce4:	e037      	b.n	800fd56 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	085b      	lsrs	r3, r3, #1
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d031      	beq.n	800fd56 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	085b      	lsrs	r3, r3, #1
 800fcf6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d02b      	beq.n	800fd56 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d018      	beq.n	800fd3a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0c:	781a      	ldrb	r2, [r3, #0]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd18:	1c5a      	adds	r2, r3, #1
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	3b01      	subs	r3, #1
 800fd26:	b29a      	uxth	r2, r3
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd30:	3b01      	subs	r3, #1
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	851a      	strh	r2, [r3, #40]	; 0x28
 800fd38:	e00d      	b.n	800fd56 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fd40:	d002      	beq.n	800fd48 <I2C_Slave_ISR_IT+0x1e6>
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d106      	bne.n	800fd56 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 f891 	bl	800fe70 <I2C_ITSlaveSeqCplt>
 800fd4e:	e002      	b.n	800fd56 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800fd50:	bf00      	nop
 800fd52:	e000      	b.n	800fd56 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fd54:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3718      	adds	r7, #24
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fd7e:	2b28      	cmp	r3, #40	; 0x28
 800fd80:	d16a      	bne.n	800fe58 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	699b      	ldr	r3, [r3, #24]
 800fd88:	0c1b      	lsrs	r3, r3, #16
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	f003 0301 	and.w	r3, r3, #1
 800fd90:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	699b      	ldr	r3, [r3, #24]
 800fd98:	0c1b      	lsrs	r3, r3, #16
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fda0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fdae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fdbc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	d138      	bne.n	800fe38 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fdc6:	897b      	ldrh	r3, [r7, #10]
 800fdc8:	09db      	lsrs	r3, r3, #7
 800fdca:	b29a      	uxth	r2, r3
 800fdcc:	89bb      	ldrh	r3, [r7, #12]
 800fdce:	4053      	eors	r3, r2
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	f003 0306 	and.w	r3, r3, #6
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d11c      	bne.n	800fe14 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fdda:	897b      	ldrh	r3, [r7, #10]
 800fddc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fde2:	1c5a      	adds	r2, r3, #1
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d13b      	bne.n	800fe68 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2208      	movs	r2, #8
 800fdfc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe06:	89ba      	ldrh	r2, [r7, #12]
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7ff fe7c 	bl	800fb0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fe12:	e029      	b.n	800fe68 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fe14:	893b      	ldrh	r3, [r7, #8]
 800fe16:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fe18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 fc0c 	bl	801063a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe2a:	89ba      	ldrh	r2, [r7, #12]
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
 800fe2e:	4619      	mov	r1, r3
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f7ff fe6a 	bl	800fb0a <HAL_I2C_AddrCallback>
}
 800fe36:	e017      	b.n	800fe68 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fe38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fbfc 	bl	801063a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe4a:	89ba      	ldrh	r2, [r7, #12]
 800fe4c:	7bfb      	ldrb	r3, [r7, #15]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff fe5a 	bl	800fb0a <HAL_I2C_AddrCallback>
}
 800fe56:	e007      	b.n	800fe68 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2208      	movs	r2, #8
 800fe5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800fe68:	bf00      	nop
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	0b9b      	lsrs	r3, r3, #14
 800fe8c:	f003 0301 	and.w	r3, r3, #1
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d008      	beq.n	800fea6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	e00d      	b.n	800fec2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	0bdb      	lsrs	r3, r3, #15
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d007      	beq.n	800fec2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fec0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	2b29      	cmp	r3, #41	; 0x29
 800fecc:	d112      	bne.n	800fef4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2228      	movs	r2, #40	; 0x28
 800fed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2221      	movs	r2, #33	; 0x21
 800feda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fedc:	2101      	movs	r1, #1
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fbab 	bl	801063a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2200      	movs	r2, #0
 800fee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7ff fdf8 	bl	800fae2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fef2:	e017      	b.n	800ff24 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	2b2a      	cmp	r3, #42	; 0x2a
 800fefe:	d111      	bne.n	800ff24 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2228      	movs	r2, #40	; 0x28
 800ff04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2222      	movs	r2, #34	; 0x22
 800ff0c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ff0e:	2102      	movs	r1, #2
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 fb92 	bl	801063a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7ff fde9 	bl	800faf6 <HAL_I2C_SlaveRxCpltCallback>
}
 800ff24:	bf00      	nop
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b086      	sub	sp, #24
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff48:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2220      	movs	r2, #32
 800ff50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff52:	7bfb      	ldrb	r3, [r7, #15]
 800ff54:	2b21      	cmp	r3, #33	; 0x21
 800ff56:	d002      	beq.n	800ff5e <I2C_ITSlaveCplt+0x32>
 800ff58:	7bfb      	ldrb	r3, [r7, #15]
 800ff5a:	2b29      	cmp	r3, #41	; 0x29
 800ff5c:	d108      	bne.n	800ff70 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ff5e:	f248 0101 	movw	r1, #32769	; 0x8001
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 fb69 	bl	801063a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2221      	movs	r2, #33	; 0x21
 800ff6c:	631a      	str	r2, [r3, #48]	; 0x30
 800ff6e:	e00d      	b.n	800ff8c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
 800ff72:	2b22      	cmp	r3, #34	; 0x22
 800ff74:	d002      	beq.n	800ff7c <I2C_ITSlaveCplt+0x50>
 800ff76:	7bfb      	ldrb	r3, [r7, #15]
 800ff78:	2b2a      	cmp	r3, #42	; 0x2a
 800ff7a:	d107      	bne.n	800ff8c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ff7c:	f248 0102 	movw	r1, #32770	; 0x8002
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fb5a 	bl	801063a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2222      	movs	r2, #34	; 0x22
 800ff8a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	685a      	ldr	r2, [r3, #4]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff9a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	6859      	ldr	r1, [r3, #4]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	4b80      	ldr	r3, [pc, #512]	; (80101a8 <I2C_ITSlaveCplt+0x27c>)
 800ffa8:	400b      	ands	r3, r1
 800ffaa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f000 fb02 	bl	80105b6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	0b9b      	lsrs	r3, r3, #14
 800ffb6:	f003 0301 	and.w	r3, r3, #1
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d07a      	beq.n	80100b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ffcc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f000 8111 	beq.w	80101fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	4a73      	ldr	r2, [pc, #460]	; (80101ac <I2C_ITSlaveCplt+0x280>)
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d059      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a71      	ldr	r2, [pc, #452]	; (80101b0 <I2C_ITSlaveCplt+0x284>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d053      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a6f      	ldr	r2, [pc, #444]	; (80101b4 <I2C_ITSlaveCplt+0x288>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d04d      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a6d      	ldr	r2, [pc, #436]	; (80101b8 <I2C_ITSlaveCplt+0x28c>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d047      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a6b      	ldr	r2, [pc, #428]	; (80101bc <I2C_ITSlaveCplt+0x290>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d041      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a69      	ldr	r2, [pc, #420]	; (80101c0 <I2C_ITSlaveCplt+0x294>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d03b      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a67      	ldr	r2, [pc, #412]	; (80101c4 <I2C_ITSlaveCplt+0x298>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d035      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a65      	ldr	r2, [pc, #404]	; (80101c8 <I2C_ITSlaveCplt+0x29c>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d02f      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a63      	ldr	r2, [pc, #396]	; (80101cc <I2C_ITSlaveCplt+0x2a0>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d029      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a61      	ldr	r2, [pc, #388]	; (80101d0 <I2C_ITSlaveCplt+0x2a4>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d023      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a5f      	ldr	r2, [pc, #380]	; (80101d4 <I2C_ITSlaveCplt+0x2a8>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d01d      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4a5d      	ldr	r2, [pc, #372]	; (80101d8 <I2C_ITSlaveCplt+0x2ac>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d017      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a5b      	ldr	r2, [pc, #364]	; (80101dc <I2C_ITSlaveCplt+0x2b0>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d011      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a59      	ldr	r2, [pc, #356]	; (80101e0 <I2C_ITSlaveCplt+0x2b4>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d00b      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a57      	ldr	r2, [pc, #348]	; (80101e4 <I2C_ITSlaveCplt+0x2b8>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d005      	beq.n	8010098 <I2C_ITSlaveCplt+0x16c>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a55      	ldr	r2, [pc, #340]	; (80101e8 <I2C_ITSlaveCplt+0x2bc>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d105      	bne.n	80100a4 <I2C_ITSlaveCplt+0x178>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	e004      	b.n	80100ae <I2C_ITSlaveCplt+0x182>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	8553      	strh	r3, [r2, #42]	; 0x2a
 80100b2:	e0a2      	b.n	80101fa <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	0bdb      	lsrs	r3, r3, #15
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f000 809c 	beq.w	80101fa <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80100d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f000 808f 	beq.w	80101fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4a32      	ldr	r2, [pc, #200]	; (80101ac <I2C_ITSlaveCplt+0x280>)
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d059      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4a30      	ldr	r2, [pc, #192]	; (80101b0 <I2C_ITSlaveCplt+0x284>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d053      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a2e      	ldr	r2, [pc, #184]	; (80101b4 <I2C_ITSlaveCplt+0x288>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d04d      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a2c      	ldr	r2, [pc, #176]	; (80101b8 <I2C_ITSlaveCplt+0x28c>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d047      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a2a      	ldr	r2, [pc, #168]	; (80101bc <I2C_ITSlaveCplt+0x290>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d041      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4a28      	ldr	r2, [pc, #160]	; (80101c0 <I2C_ITSlaveCplt+0x294>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d03b      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a26      	ldr	r2, [pc, #152]	; (80101c4 <I2C_ITSlaveCplt+0x298>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d035      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a24      	ldr	r2, [pc, #144]	; (80101c8 <I2C_ITSlaveCplt+0x29c>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d02f      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4a22      	ldr	r2, [pc, #136]	; (80101cc <I2C_ITSlaveCplt+0x2a0>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d029      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a20      	ldr	r2, [pc, #128]	; (80101d0 <I2C_ITSlaveCplt+0x2a4>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d023      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a1e      	ldr	r2, [pc, #120]	; (80101d4 <I2C_ITSlaveCplt+0x2a8>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d01d      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4a1c      	ldr	r2, [pc, #112]	; (80101d8 <I2C_ITSlaveCplt+0x2ac>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d017      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4a1a      	ldr	r2, [pc, #104]	; (80101dc <I2C_ITSlaveCplt+0x2b0>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d011      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4a18      	ldr	r2, [pc, #96]	; (80101e0 <I2C_ITSlaveCplt+0x2b4>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d00b      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a16      	ldr	r2, [pc, #88]	; (80101e4 <I2C_ITSlaveCplt+0x2b8>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d005      	beq.n	801019c <I2C_ITSlaveCplt+0x270>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4a14      	ldr	r2, [pc, #80]	; (80101e8 <I2C_ITSlaveCplt+0x2bc>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d127      	bne.n	80101ec <I2C_ITSlaveCplt+0x2c0>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	e026      	b.n	80101f6 <I2C_ITSlaveCplt+0x2ca>
 80101a8:	fe00e800 	.word	0xfe00e800
 80101ac:	40020010 	.word	0x40020010
 80101b0:	40020028 	.word	0x40020028
 80101b4:	40020040 	.word	0x40020040
 80101b8:	40020058 	.word	0x40020058
 80101bc:	40020070 	.word	0x40020070
 80101c0:	40020088 	.word	0x40020088
 80101c4:	400200a0 	.word	0x400200a0
 80101c8:	400200b8 	.word	0x400200b8
 80101cc:	40020410 	.word	0x40020410
 80101d0:	40020428 	.word	0x40020428
 80101d4:	40020440 	.word	0x40020440
 80101d8:	40020458 	.word	0x40020458
 80101dc:	40020470 	.word	0x40020470
 80101e0:	40020488 	.word	0x40020488
 80101e4:	400204a0 	.word	0x400204a0
 80101e8:	400204b8 	.word	0x400204b8
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	089b      	lsrs	r3, r3, #2
 80101fe:	f003 0301 	and.w	r3, r3, #1
 8010202:	2b00      	cmp	r3, #0
 8010204:	d020      	beq.n	8010248 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	f023 0304 	bic.w	r3, r3, #4
 801020c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010218:	b2d2      	uxtb	r2, r2
 801021a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010220:	1c5a      	adds	r2, r3, #1
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00c      	beq.n	8010248 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010232:	3b01      	subs	r3, #1
 8010234:	b29a      	uxth	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801023e:	b29b      	uxth	r3, r3
 8010240:	3b01      	subs	r3, #1
 8010242:	b29a      	uxth	r2, r3
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801024c:	b29b      	uxth	r3, r3
 801024e:	2b00      	cmp	r3, #0
 8010250:	d005      	beq.n	801025e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010256:	f043 0204 	orr.w	r2, r3, #4
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2200      	movs	r2, #0
 801026a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010270:	2b00      	cmp	r3, #0
 8010272:	d010      	beq.n	8010296 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f8a4 	bl	80103c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010286:	b2db      	uxtb	r3, r3
 8010288:	2b28      	cmp	r3, #40	; 0x28
 801028a:	d141      	bne.n	8010310 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801028c:	6979      	ldr	r1, [r7, #20]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 f844 	bl	801031c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010294:	e03c      	b.n	8010310 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801029a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801029e:	d014      	beq.n	80102ca <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7ff fde5 	bl	800fe70 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a1b      	ldr	r2, [pc, #108]	; (8010318 <I2C_ITSlaveCplt+0x3ec>)
 80102aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2220      	movs	r2, #32
 80102b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f7ff fc2f 	bl	800fb26 <HAL_I2C_ListenCpltCallback>
}
 80102c8:	e022      	b.n	8010310 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	2b22      	cmp	r3, #34	; 0x22
 80102d4:	d10e      	bne.n	80102f4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2220      	movs	r2, #32
 80102da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7ff fc02 	bl	800faf6 <HAL_I2C_SlaveRxCpltCallback>
}
 80102f2:	e00d      	b.n	8010310 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2220      	movs	r2, #32
 80102f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7ff fbe9 	bl	800fae2 <HAL_I2C_SlaveTxCpltCallback>
}
 8010310:	bf00      	nop
 8010312:	3718      	adds	r7, #24
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	ffff0000 	.word	0xffff0000

0801031c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4a26      	ldr	r2, [pc, #152]	; (80103c4 <I2C_ITListenCplt+0xa8>)
 801032a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2220      	movs	r2, #32
 8010336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	089b      	lsrs	r3, r3, #2
 801034c:	f003 0301 	and.w	r3, r3, #1
 8010350:	2b00      	cmp	r3, #0
 8010352:	d022      	beq.n	801039a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035e:	b2d2      	uxtb	r2, r2
 8010360:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010366:	1c5a      	adds	r2, r3, #1
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010370:	2b00      	cmp	r3, #0
 8010372:	d012      	beq.n	801039a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010378:	3b01      	subs	r3, #1
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010384:	b29b      	uxth	r3, r3
 8010386:	3b01      	subs	r3, #1
 8010388:	b29a      	uxth	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010392:	f043 0204 	orr.w	r2, r3, #4
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801039a:	f248 0103 	movw	r1, #32771	; 0x8003
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f94b 	bl	801063a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2210      	movs	r2, #16
 80103aa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff fbb6 	bl	800fb26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80103ba:	bf00      	nop
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	ffff0000 	.word	0xffff0000

080103c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a5d      	ldr	r2, [pc, #372]	; (801055c <I2C_ITError+0x194>)
 80103e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	431a      	orrs	r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80103fa:	7bfb      	ldrb	r3, [r7, #15]
 80103fc:	2b28      	cmp	r3, #40	; 0x28
 80103fe:	d005      	beq.n	801040c <I2C_ITError+0x44>
 8010400:	7bfb      	ldrb	r3, [r7, #15]
 8010402:	2b29      	cmp	r3, #41	; 0x29
 8010404:	d002      	beq.n	801040c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010406:	7bfb      	ldrb	r3, [r7, #15]
 8010408:	2b2a      	cmp	r3, #42	; 0x2a
 801040a:	d10b      	bne.n	8010424 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801040c:	2103      	movs	r1, #3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 f913 	bl	801063a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2228      	movs	r2, #40	; 0x28
 8010418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a50      	ldr	r2, [pc, #320]	; (8010560 <I2C_ITError+0x198>)
 8010420:	635a      	str	r2, [r3, #52]	; 0x34
 8010422:	e011      	b.n	8010448 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010424:	f248 0103 	movw	r1, #32771	; 0x8003
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f906 	bl	801063a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010434:	b2db      	uxtb	r3, r3
 8010436:	2b60      	cmp	r3, #96	; 0x60
 8010438:	d003      	beq.n	8010442 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2220      	movs	r2, #32
 801043e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801044c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010452:	2b00      	cmp	r3, #0
 8010454:	d039      	beq.n	80104ca <I2C_ITError+0x102>
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	2b11      	cmp	r3, #17
 801045a:	d002      	beq.n	8010462 <I2C_ITError+0x9a>
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2b21      	cmp	r3, #33	; 0x21
 8010460:	d133      	bne.n	80104ca <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801046c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010470:	d107      	bne.n	8010482 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010480:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010486:	4618      	mov	r0, r3
 8010488:	f7fe fc54 	bl	800ed34 <HAL_DMA_GetState>
 801048c:	4603      	mov	r3, r0
 801048e:	2b01      	cmp	r3, #1
 8010490:	d017      	beq.n	80104c2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010496:	4a33      	ldr	r2, [pc, #204]	; (8010564 <I2C_ITError+0x19c>)
 8010498:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2200      	movs	r2, #0
 801049e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fd fad4 	bl	800da54 <HAL_DMA_Abort_IT>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d04d      	beq.n	801054e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80104bc:	4610      	mov	r0, r2
 80104be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80104c0:	e045      	b.n	801054e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 f850 	bl	8010568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80104c8:	e041      	b.n	801054e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d039      	beq.n	8010546 <I2C_ITError+0x17e>
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	2b12      	cmp	r3, #18
 80104d6:	d002      	beq.n	80104de <I2C_ITError+0x116>
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	2b22      	cmp	r3, #34	; 0x22
 80104dc:	d133      	bne.n	8010546 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104ec:	d107      	bne.n	80104fe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80104fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010502:	4618      	mov	r0, r3
 8010504:	f7fe fc16 	bl	800ed34 <HAL_DMA_GetState>
 8010508:	4603      	mov	r3, r0
 801050a:	2b01      	cmp	r3, #1
 801050c:	d017      	beq.n	801053e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010512:	4a14      	ldr	r2, [pc, #80]	; (8010564 <I2C_ITError+0x19c>)
 8010514:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010522:	4618      	mov	r0, r3
 8010524:	f7fd fa96 	bl	800da54 <HAL_DMA_Abort_IT>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d011      	beq.n	8010552 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010538:	4610      	mov	r0, r2
 801053a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801053c:	e009      	b.n	8010552 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 f812 	bl	8010568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010544:	e005      	b.n	8010552 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 f80e 	bl	8010568 <I2C_TreatErrorCallback>
  }
}
 801054c:	e002      	b.n	8010554 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801054e:	bf00      	nop
 8010550:	e000      	b.n	8010554 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010552:	bf00      	nop
}
 8010554:	bf00      	nop
 8010556:	3710      	adds	r7, #16
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	ffff0000 	.word	0xffff0000
 8010560:	0800fb63 	.word	0x0800fb63
 8010564:	080105ff 	.word	0x080105ff

08010568 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010576:	b2db      	uxtb	r3, r3
 8010578:	2b60      	cmp	r3, #96	; 0x60
 801057a:	d10e      	bne.n	801059a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2220      	movs	r2, #32
 8010580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f7ff fadb 	bl	800fb4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010598:	e009      	b.n	80105ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2200      	movs	r2, #0
 80105a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff fac6 	bl	800fb3a <HAL_I2C_ErrorCallback>
}
 80105ae:	bf00      	nop
 80105b0:	3708      	adds	r7, #8
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80105b6:	b480      	push	{r7}
 80105b8:	b083      	sub	sp, #12
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	699b      	ldr	r3, [r3, #24]
 80105c4:	f003 0302 	and.w	r3, r3, #2
 80105c8:	2b02      	cmp	r3, #2
 80105ca:	d103      	bne.n	80105d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2200      	movs	r2, #0
 80105d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	699b      	ldr	r3, [r3, #24]
 80105da:	f003 0301 	and.w	r3, r3, #1
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d007      	beq.n	80105f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	699a      	ldr	r2, [r3, #24]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f042 0201 	orr.w	r2, r2, #1
 80105f0:	619a      	str	r2, [r3, #24]
  }
}
 80105f2:	bf00      	nop
 80105f4:	370c      	adds	r7, #12
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr

080105fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b084      	sub	sp, #16
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801060a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010610:	2b00      	cmp	r3, #0
 8010612:	d003      	beq.n	801061c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010618:	2200      	movs	r2, #0
 801061a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d003      	beq.n	801062c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010628:	2200      	movs	r2, #0
 801062a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f7ff ff9b 	bl	8010568 <I2C_TreatErrorCallback>
}
 8010632:	bf00      	nop
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801063a:	b480      	push	{r7}
 801063c:	b085      	sub	sp, #20
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
 8010642:	460b      	mov	r3, r1
 8010644:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010646:	2300      	movs	r3, #0
 8010648:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801064a:	887b      	ldrh	r3, [r7, #2]
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	2b00      	cmp	r3, #0
 8010652:	d00f      	beq.n	8010674 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801065a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010662:	b2db      	uxtb	r3, r3
 8010664:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010668:	2b28      	cmp	r3, #40	; 0x28
 801066a:	d003      	beq.n	8010674 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8010672:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010674:	887b      	ldrh	r3, [r7, #2]
 8010676:	f003 0302 	and.w	r3, r3, #2
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00f      	beq.n	801069e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010684:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801068c:	b2db      	uxtb	r3, r3
 801068e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010692:	2b28      	cmp	r3, #40	; 0x28
 8010694:	d003      	beq.n	801069e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801069c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801069e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	da03      	bge.n	80106ae <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80106ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80106ae:	887b      	ldrh	r3, [r7, #2]
 80106b0:	2b10      	cmp	r3, #16
 80106b2:	d103      	bne.n	80106bc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80106ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80106bc:	887b      	ldrh	r3, [r7, #2]
 80106be:	2b20      	cmp	r3, #32
 80106c0:	d103      	bne.n	80106ca <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f043 0320 	orr.w	r3, r3, #32
 80106c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80106ca:	887b      	ldrh	r3, [r7, #2]
 80106cc:	2b40      	cmp	r3, #64	; 0x40
 80106ce:	d103      	bne.n	80106d8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	6819      	ldr	r1, [r3, #0]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	43da      	mvns	r2, r3
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	400a      	ands	r2, r1
 80106e8:	601a      	str	r2, [r3, #0]
}
 80106ea:	bf00      	nop
 80106ec:	3714      	adds	r7, #20
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr

080106f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80106f6:	b480      	push	{r7}
 80106f8:	b083      	sub	sp, #12
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010706:	b2db      	uxtb	r3, r3
 8010708:	2b20      	cmp	r3, #32
 801070a:	d138      	bne.n	801077e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010712:	2b01      	cmp	r3, #1
 8010714:	d101      	bne.n	801071a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010716:	2302      	movs	r3, #2
 8010718:	e032      	b.n	8010780 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2201      	movs	r2, #1
 801071e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2224      	movs	r2, #36	; 0x24
 8010726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f022 0201 	bic.w	r2, r2, #1
 8010738:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010748:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	6819      	ldr	r1, [r3, #0]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	683a      	ldr	r2, [r7, #0]
 8010756:	430a      	orrs	r2, r1
 8010758:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f042 0201 	orr.w	r2, r2, #1
 8010768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2220      	movs	r2, #32
 801076e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	e000      	b.n	8010780 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801077e:	2302      	movs	r3, #2
  }
}
 8010780:	4618      	mov	r0, r3
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801079c:	b2db      	uxtb	r3, r3
 801079e:	2b20      	cmp	r3, #32
 80107a0:	d139      	bne.n	8010816 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d101      	bne.n	80107b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80107ac:	2302      	movs	r3, #2
 80107ae:	e033      	b.n	8010818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2224      	movs	r2, #36	; 0x24
 80107bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f022 0201 	bic.w	r2, r2, #1
 80107ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80107de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	021b      	lsls	r3, r3, #8
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	4313      	orrs	r3, r2
 80107e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f042 0201 	orr.w	r2, r2, #1
 8010800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2220      	movs	r2, #32
 8010806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010812:	2300      	movs	r3, #0
 8010814:	e000      	b.n	8010818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010816:	2302      	movs	r3, #2
  }
}
 8010818:	4618      	mov	r0, r3
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010826:	b08f      	sub	sp, #60	; 0x3c
 8010828:	af0a      	add	r7, sp, #40	; 0x28
 801082a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d101      	bne.n	8010836 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8010832:	2301      	movs	r3, #1
 8010834:	e116      	b.n	8010a64 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8010842:	b2db      	uxtb	r3, r3
 8010844:	2b00      	cmp	r3, #0
 8010846:	d106      	bne.n	8010856 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f00b fe7b 	bl	801c54c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2203      	movs	r2, #3
 801085a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010866:	2b00      	cmp	r3, #0
 8010868:	d102      	bne.n	8010870 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4618      	mov	r0, r3
 8010876:	f008 f9c4 	bl	8018c02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	603b      	str	r3, [r7, #0]
 8010880:	687e      	ldr	r6, [r7, #4]
 8010882:	466d      	mov	r5, sp
 8010884:	f106 0410 	add.w	r4, r6, #16
 8010888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801088a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801088c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801088e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010890:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010894:	e885 0003 	stmia.w	r5, {r0, r1}
 8010898:	1d33      	adds	r3, r6, #4
 801089a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801089c:	6838      	ldr	r0, [r7, #0]
 801089e:	f008 f88f 	bl	80189c0 <USB_CoreInit>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d005      	beq.n	80108b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2202      	movs	r2, #2
 80108ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80108b0:	2301      	movs	r3, #1
 80108b2:	e0d7      	b.n	8010a64 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2100      	movs	r1, #0
 80108ba:	4618      	mov	r0, r3
 80108bc:	f008 f9b2 	bl	8018c24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80108c0:	2300      	movs	r3, #0
 80108c2:	73fb      	strb	r3, [r7, #15]
 80108c4:	e04a      	b.n	801095c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80108c6:	7bfa      	ldrb	r2, [r7, #15]
 80108c8:	6879      	ldr	r1, [r7, #4]
 80108ca:	4613      	mov	r3, r2
 80108cc:	00db      	lsls	r3, r3, #3
 80108ce:	4413      	add	r3, r2
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	440b      	add	r3, r1
 80108d4:	333d      	adds	r3, #61	; 0x3d
 80108d6:	2201      	movs	r2, #1
 80108d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80108da:	7bfa      	ldrb	r2, [r7, #15]
 80108dc:	6879      	ldr	r1, [r7, #4]
 80108de:	4613      	mov	r3, r2
 80108e0:	00db      	lsls	r3, r3, #3
 80108e2:	4413      	add	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	440b      	add	r3, r1
 80108e8:	333c      	adds	r3, #60	; 0x3c
 80108ea:	7bfa      	ldrb	r2, [r7, #15]
 80108ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80108ee:	7bfa      	ldrb	r2, [r7, #15]
 80108f0:	7bfb      	ldrb	r3, [r7, #15]
 80108f2:	b298      	uxth	r0, r3
 80108f4:	6879      	ldr	r1, [r7, #4]
 80108f6:	4613      	mov	r3, r2
 80108f8:	00db      	lsls	r3, r3, #3
 80108fa:	4413      	add	r3, r2
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	440b      	add	r3, r1
 8010900:	3344      	adds	r3, #68	; 0x44
 8010902:	4602      	mov	r2, r0
 8010904:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8010906:	7bfa      	ldrb	r2, [r7, #15]
 8010908:	6879      	ldr	r1, [r7, #4]
 801090a:	4613      	mov	r3, r2
 801090c:	00db      	lsls	r3, r3, #3
 801090e:	4413      	add	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	440b      	add	r3, r1
 8010914:	3340      	adds	r3, #64	; 0x40
 8010916:	2200      	movs	r2, #0
 8010918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801091a:	7bfa      	ldrb	r2, [r7, #15]
 801091c:	6879      	ldr	r1, [r7, #4]
 801091e:	4613      	mov	r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	4413      	add	r3, r2
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	440b      	add	r3, r1
 8010928:	3348      	adds	r3, #72	; 0x48
 801092a:	2200      	movs	r2, #0
 801092c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801092e:	7bfa      	ldrb	r2, [r7, #15]
 8010930:	6879      	ldr	r1, [r7, #4]
 8010932:	4613      	mov	r3, r2
 8010934:	00db      	lsls	r3, r3, #3
 8010936:	4413      	add	r3, r2
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	440b      	add	r3, r1
 801093c:	334c      	adds	r3, #76	; 0x4c
 801093e:	2200      	movs	r2, #0
 8010940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8010942:	7bfa      	ldrb	r2, [r7, #15]
 8010944:	6879      	ldr	r1, [r7, #4]
 8010946:	4613      	mov	r3, r2
 8010948:	00db      	lsls	r3, r3, #3
 801094a:	4413      	add	r3, r2
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	440b      	add	r3, r1
 8010950:	3354      	adds	r3, #84	; 0x54
 8010952:	2200      	movs	r2, #0
 8010954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010956:	7bfb      	ldrb	r3, [r7, #15]
 8010958:	3301      	adds	r3, #1
 801095a:	73fb      	strb	r3, [r7, #15]
 801095c:	7bfa      	ldrb	r2, [r7, #15]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	429a      	cmp	r2, r3
 8010964:	d3af      	bcc.n	80108c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010966:	2300      	movs	r3, #0
 8010968:	73fb      	strb	r3, [r7, #15]
 801096a:	e044      	b.n	80109f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801096c:	7bfa      	ldrb	r2, [r7, #15]
 801096e:	6879      	ldr	r1, [r7, #4]
 8010970:	4613      	mov	r3, r2
 8010972:	00db      	lsls	r3, r3, #3
 8010974:	4413      	add	r3, r2
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	440b      	add	r3, r1
 801097a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 801097e:	2200      	movs	r2, #0
 8010980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8010982:	7bfa      	ldrb	r2, [r7, #15]
 8010984:	6879      	ldr	r1, [r7, #4]
 8010986:	4613      	mov	r3, r2
 8010988:	00db      	lsls	r3, r3, #3
 801098a:	4413      	add	r3, r2
 801098c:	009b      	lsls	r3, r3, #2
 801098e:	440b      	add	r3, r1
 8010990:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010994:	7bfa      	ldrb	r2, [r7, #15]
 8010996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010998:	7bfa      	ldrb	r2, [r7, #15]
 801099a:	6879      	ldr	r1, [r7, #4]
 801099c:	4613      	mov	r3, r2
 801099e:	00db      	lsls	r3, r3, #3
 80109a0:	4413      	add	r3, r2
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	440b      	add	r3, r1
 80109a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80109aa:	2200      	movs	r2, #0
 80109ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80109ae:	7bfa      	ldrb	r2, [r7, #15]
 80109b0:	6879      	ldr	r1, [r7, #4]
 80109b2:	4613      	mov	r3, r2
 80109b4:	00db      	lsls	r3, r3, #3
 80109b6:	4413      	add	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	440b      	add	r3, r1
 80109bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80109c0:	2200      	movs	r2, #0
 80109c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80109c4:	7bfa      	ldrb	r2, [r7, #15]
 80109c6:	6879      	ldr	r1, [r7, #4]
 80109c8:	4613      	mov	r3, r2
 80109ca:	00db      	lsls	r3, r3, #3
 80109cc:	4413      	add	r3, r2
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	440b      	add	r3, r1
 80109d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80109d6:	2200      	movs	r2, #0
 80109d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80109da:	7bfa      	ldrb	r2, [r7, #15]
 80109dc:	6879      	ldr	r1, [r7, #4]
 80109de:	4613      	mov	r3, r2
 80109e0:	00db      	lsls	r3, r3, #3
 80109e2:	4413      	add	r3, r2
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	440b      	add	r3, r1
 80109e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80109ec:	2200      	movs	r2, #0
 80109ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
 80109f2:	3301      	adds	r3, #1
 80109f4:	73fb      	strb	r3, [r7, #15]
 80109f6:	7bfa      	ldrb	r2, [r7, #15]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d3b5      	bcc.n	801096c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	603b      	str	r3, [r7, #0]
 8010a06:	687e      	ldr	r6, [r7, #4]
 8010a08:	466d      	mov	r5, sp
 8010a0a:	f106 0410 	add.w	r4, r6, #16
 8010a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010a1e:	1d33      	adds	r3, r6, #4
 8010a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a22:	6838      	ldr	r0, [r7, #0]
 8010a24:	f008 f94a 	bl	8018cbc <USB_DevInit>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d005      	beq.n	8010a3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2202      	movs	r2, #2
 8010a32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8010a36:	2301      	movs	r3, #1
 8010a38:	e014      	b.n	8010a64 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2201      	movs	r2, #1
 8010a46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d102      	bne.n	8010a58 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f001 f98c 	bl	8011d70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f009 fa98 	bl	8019f92 <USB_DevDisconnect>

  return HAL_OK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3714      	adds	r7, #20
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d101      	bne.n	8010a88 <HAL_PCD_Start+0x1c>
 8010a84:	2302      	movs	r3, #2
 8010a86:	e020      	b.n	8010aca <HAL_PCD_Start+0x5e>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d109      	bne.n	8010aac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d005      	beq.n	8010aac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f008 f895 	bl	8018be0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f009 fa48 	bl	8019f50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010ac8:	2300      	movs	r3, #0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8010ad2:	b590      	push	{r4, r7, lr}
 8010ad4:	b08d      	sub	sp, #52	; 0x34
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ae0:	6a3b      	ldr	r3, [r7, #32]
 8010ae2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f009 fb06 	bl	801a0fa <USB_GetMode>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f040 84b7 	bne.w	8011464 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f009 fa6a 	bl	8019fd4 <USB_ReadInterrupts>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f000 84ad 	beq.w	8011462 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	0a1b      	lsrs	r3, r3, #8
 8010b12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4618      	mov	r0, r3
 8010b22:	f009 fa57 	bl	8019fd4 <USB_ReadInterrupts>
 8010b26:	4603      	mov	r3, r0
 8010b28:	f003 0302 	and.w	r3, r3, #2
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	d107      	bne.n	8010b40 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	695a      	ldr	r2, [r3, #20]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f002 0202 	and.w	r2, r2, #2
 8010b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4618      	mov	r0, r3
 8010b46:	f009 fa45 	bl	8019fd4 <USB_ReadInterrupts>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	f003 0310 	and.w	r3, r3, #16
 8010b50:	2b10      	cmp	r3, #16
 8010b52:	d161      	bne.n	8010c18 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	699a      	ldr	r2, [r3, #24]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f022 0210 	bic.w	r2, r2, #16
 8010b62:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8010b64:	6a3b      	ldr	r3, [r7, #32]
 8010b66:	6a1b      	ldr	r3, [r3, #32]
 8010b68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	f003 020f 	and.w	r2, r3, #15
 8010b70:	4613      	mov	r3, r2
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	4413      	add	r3, r2
 8010b76:	009b      	lsls	r3, r3, #2
 8010b78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	4413      	add	r3, r2
 8010b80:	3304      	adds	r3, #4
 8010b82:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	0c5b      	lsrs	r3, r3, #17
 8010b88:	f003 030f 	and.w	r3, r3, #15
 8010b8c:	2b02      	cmp	r3, #2
 8010b8e:	d124      	bne.n	8010bda <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8010b90:	69ba      	ldr	r2, [r7, #24]
 8010b92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8010b96:	4013      	ands	r3, r2
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d035      	beq.n	8010c08 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	091b      	lsrs	r3, r3, #4
 8010ba4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	461a      	mov	r2, r3
 8010bae:	6a38      	ldr	r0, [r7, #32]
 8010bb0:	f009 f87c 	bl	8019cac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	691a      	ldr	r2, [r3, #16]
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	091b      	lsrs	r3, r3, #4
 8010bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bc0:	441a      	add	r2, r3
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	6a1a      	ldr	r2, [r3, #32]
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	091b      	lsrs	r3, r3, #4
 8010bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bd2:	441a      	add	r2, r3
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	621a      	str	r2, [r3, #32]
 8010bd8:	e016      	b.n	8010c08 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	0c5b      	lsrs	r3, r3, #17
 8010bde:	f003 030f 	and.w	r3, r3, #15
 8010be2:	2b06      	cmp	r3, #6
 8010be4:	d110      	bne.n	8010c08 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010bec:	2208      	movs	r2, #8
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6a38      	ldr	r0, [r7, #32]
 8010bf2:	f009 f85b 	bl	8019cac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	6a1a      	ldr	r2, [r3, #32]
 8010bfa:	69bb      	ldr	r3, [r7, #24]
 8010bfc:	091b      	lsrs	r3, r3, #4
 8010bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c02:	441a      	add	r2, r3
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	699a      	ldr	r2, [r3, #24]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f042 0210 	orr.w	r2, r2, #16
 8010c16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f009 f9d9 	bl	8019fd4 <USB_ReadInterrupts>
 8010c22:	4603      	mov	r3, r0
 8010c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010c28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010c2c:	f040 80a7 	bne.w	8010d7e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8010c30:	2300      	movs	r3, #0
 8010c32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f009 f9de 	bl	8019ffa <USB_ReadDevAllOutEpInterrupt>
 8010c3e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8010c40:	e099      	b.n	8010d76 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	f000 808e 	beq.w	8010d6a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c54:	b2d2      	uxtb	r2, r2
 8010c56:	4611      	mov	r1, r2
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f009 fa02 	bl	801a062 <USB_ReadDevOutEPInterrupt>
 8010c5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	f003 0301 	and.w	r3, r3, #1
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00c      	beq.n	8010c84 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	015a      	lsls	r2, r3, #5
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	4413      	add	r3, r2
 8010c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c76:	461a      	mov	r2, r3
 8010c78:	2301      	movs	r3, #1
 8010c7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8010c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 fef0 	bl	8011a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	f003 0308 	and.w	r3, r3, #8
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d00c      	beq.n	8010ca8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c90:	015a      	lsls	r2, r3, #5
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	4413      	add	r3, r2
 8010c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	2308      	movs	r3, #8
 8010c9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8010ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 ffc6 	bl	8011c34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	f003 0310 	and.w	r3, r3, #16
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d008      	beq.n	8010cc4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	015a      	lsls	r2, r3, #5
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	4413      	add	r3, r2
 8010cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	2310      	movs	r3, #16
 8010cc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	f003 0302 	and.w	r3, r3, #2
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d030      	beq.n	8010d30 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8010cce:	6a3b      	ldr	r3, [r7, #32]
 8010cd0:	695b      	ldr	r3, [r3, #20]
 8010cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cd6:	2b80      	cmp	r3, #128	; 0x80
 8010cd8:	d109      	bne.n	8010cee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	69fa      	ldr	r2, [r7, #28]
 8010ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010cec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8010cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	00db      	lsls	r3, r3, #3
 8010cf4:	4413      	add	r3, r2
 8010cf6:	009b      	lsls	r3, r3, #2
 8010cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010cfc:	687a      	ldr	r2, [r7, #4]
 8010cfe:	4413      	add	r3, r2
 8010d00:	3304      	adds	r3, #4
 8010d02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	78db      	ldrb	r3, [r3, #3]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d108      	bne.n	8010d1e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8010d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	4619      	mov	r1, r3
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f00b fd43 	bl	801c7a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8010d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d20:	015a      	lsls	r2, r3, #5
 8010d22:	69fb      	ldr	r3, [r7, #28]
 8010d24:	4413      	add	r3, r2
 8010d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	2302      	movs	r3, #2
 8010d2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	f003 0320 	and.w	r3, r3, #32
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d008      	beq.n	8010d4c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3c:	015a      	lsls	r2, r3, #5
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	4413      	add	r3, r2
 8010d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d46:	461a      	mov	r2, r3
 8010d48:	2320      	movs	r3, #32
 8010d4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d009      	beq.n	8010d6a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8010d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d58:	015a      	lsls	r2, r3, #5
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d62:	461a      	mov	r2, r3
 8010d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d72:	085b      	lsrs	r3, r3, #1
 8010d74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	f47f af62 	bne.w	8010c42 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f009 f926 	bl	8019fd4 <USB_ReadInterrupts>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010d92:	f040 80db 	bne.w	8010f4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f009 f947 	bl	801a02e <USB_ReadDevAllInEpInterrupt>
 8010da0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8010da2:	2300      	movs	r3, #0
 8010da4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8010da6:	e0cd      	b.n	8010f44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010daa:	f003 0301 	and.w	r3, r3, #1
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f000 80c2 	beq.w	8010f38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dba:	b2d2      	uxtb	r2, r2
 8010dbc:	4611      	mov	r1, r2
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f009 f96d 	bl	801a09e <USB_ReadDevInEPInterrupt>
 8010dc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d057      	beq.n	8010e80 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd2:	f003 030f 	and.w	r3, r3, #15
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8010ddc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	43db      	mvns	r3, r3
 8010dea:	69f9      	ldr	r1, [r7, #28]
 8010dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010df0:	4013      	ands	r3, r2
 8010df2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	015a      	lsls	r2, r3, #5
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e00:	461a      	mov	r2, r3
 8010e02:	2301      	movs	r3, #1
 8010e04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	691b      	ldr	r3, [r3, #16]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d132      	bne.n	8010e74 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8010e0e:	6879      	ldr	r1, [r7, #4]
 8010e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e12:	4613      	mov	r3, r2
 8010e14:	00db      	lsls	r3, r3, #3
 8010e16:	4413      	add	r3, r2
 8010e18:	009b      	lsls	r3, r3, #2
 8010e1a:	440b      	add	r3, r1
 8010e1c:	334c      	adds	r3, #76	; 0x4c
 8010e1e:	6819      	ldr	r1, [r3, #0]
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e24:	4613      	mov	r3, r2
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	4413      	add	r3, r2
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	4403      	add	r3, r0
 8010e2e:	3348      	adds	r3, #72	; 0x48
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4419      	add	r1, r3
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e38:	4613      	mov	r3, r2
 8010e3a:	00db      	lsls	r3, r3, #3
 8010e3c:	4413      	add	r3, r2
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4403      	add	r3, r0
 8010e42:	334c      	adds	r3, #76	; 0x4c
 8010e44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d113      	bne.n	8010e74 <HAL_PCD_IRQHandler+0x3a2>
 8010e4c:	6879      	ldr	r1, [r7, #4]
 8010e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e50:	4613      	mov	r3, r2
 8010e52:	00db      	lsls	r3, r3, #3
 8010e54:	4413      	add	r3, r2
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	440b      	add	r3, r1
 8010e5a:	3354      	adds	r3, #84	; 0x54
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d108      	bne.n	8010e74 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6818      	ldr	r0, [r3, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	2101      	movs	r1, #1
 8010e70:	f009 f976 	bl	801a160 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f00b fc0d 	bl	801c69a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	f003 0308 	and.w	r3, r3, #8
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d008      	beq.n	8010e9c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	015a      	lsls	r2, r3, #5
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	4413      	add	r3, r2
 8010e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e96:	461a      	mov	r2, r3
 8010e98:	2308      	movs	r3, #8
 8010e9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	f003 0310 	and.w	r3, r3, #16
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d008      	beq.n	8010eb8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea8:	015a      	lsls	r2, r3, #5
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	4413      	add	r3, r2
 8010eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	2310      	movs	r3, #16
 8010eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d008      	beq.n	8010ed4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec4:	015a      	lsls	r2, r3, #5
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	4413      	add	r3, r2
 8010eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ece:	461a      	mov	r2, r3
 8010ed0:	2340      	movs	r3, #64	; 0x40
 8010ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	f003 0302 	and.w	r3, r3, #2
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d023      	beq.n	8010f26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8010ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ee0:	6a38      	ldr	r0, [r7, #32]
 8010ee2:	f008 f849 	bl	8018f78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8010ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee8:	4613      	mov	r3, r2
 8010eea:	00db      	lsls	r3, r3, #3
 8010eec:	4413      	add	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	3338      	adds	r3, #56	; 0x38
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	3304      	adds	r3, #4
 8010ef8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	78db      	ldrb	r3, [r3, #3]
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d108      	bne.n	8010f14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	2200      	movs	r2, #0
 8010f06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8010f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f00b fc5a 	bl	801c7c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8010f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f16:	015a      	lsls	r2, r3, #5
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	4413      	add	r3, r2
 8010f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f20:	461a      	mov	r2, r3
 8010f22:	2302      	movs	r3, #2
 8010f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d003      	beq.n	8010f38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8010f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 fd08 	bl	8011948 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8010f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f40:	085b      	lsrs	r3, r3, #1
 8010f42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f47f af2e 	bne.w	8010da8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4618      	mov	r0, r3
 8010f52:	f009 f83f 	bl	8019fd4 <USB_ReadInterrupts>
 8010f56:	4603      	mov	r3, r0
 8010f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f60:	d122      	bne.n	8010fa8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010f62:	69fb      	ldr	r3, [r7, #28]
 8010f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	69fa      	ldr	r2, [r7, #28]
 8010f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f70:	f023 0301 	bic.w	r3, r3, #1
 8010f74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d108      	bne.n	8010f92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010f88:	2100      	movs	r1, #0
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 ff14 	bl	8011db8 <HAL_PCDEx_LPM_Callback>
 8010f90:	e002      	b.n	8010f98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f00b fbf8 	bl	801c788 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	695a      	ldr	r2, [r3, #20]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8010fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f009 f811 	bl	8019fd4 <USB_ReadInterrupts>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010fbc:	d112      	bne.n	8010fe4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	f003 0301 	and.w	r3, r3, #1
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d102      	bne.n	8010fd4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f00b fbb4 	bl	801c73c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	695a      	ldr	r2, [r3, #20]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f008 fff3 	bl	8019fd4 <USB_ReadInterrupts>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ff8:	d121      	bne.n	801103e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	695a      	ldr	r2, [r3, #20]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8011008:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8011010:	2b00      	cmp	r3, #0
 8011012:	d111      	bne.n	8011038 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011022:	089b      	lsrs	r3, r3, #2
 8011024:	f003 020f 	and.w	r2, r3, #15
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801102e:	2101      	movs	r1, #1
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 fec1 	bl	8011db8 <HAL_PCDEx_LPM_Callback>
 8011036:	e002      	b.n	801103e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f00b fb7f 	bl	801c73c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4618      	mov	r0, r3
 8011044:	f008 ffc6 	bl	8019fd4 <USB_ReadInterrupts>
 8011048:	4603      	mov	r3, r0
 801104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801104e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011052:	f040 80b7 	bne.w	80111c4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	69fa      	ldr	r2, [r7, #28]
 8011060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011064:	f023 0301 	bic.w	r3, r3, #1
 8011068:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	2110      	movs	r1, #16
 8011070:	4618      	mov	r0, r3
 8011072:	f007 ff81 	bl	8018f78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011076:	2300      	movs	r3, #0
 8011078:	62fb      	str	r3, [r7, #44]	; 0x2c
 801107a:	e046      	b.n	801110a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	015a      	lsls	r2, r3, #5
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	4413      	add	r3, r2
 8011084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011088:	461a      	mov	r2, r3
 801108a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801108e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011092:	015a      	lsls	r2, r3, #5
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	4413      	add	r3, r2
 8011098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110a0:	0151      	lsls	r1, r2, #5
 80110a2:	69fa      	ldr	r2, [r7, #28]
 80110a4:	440a      	add	r2, r1
 80110a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80110ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	015a      	lsls	r2, r3, #5
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	4413      	add	r3, r2
 80110b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110bc:	461a      	mov	r2, r3
 80110be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80110c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	015a      	lsls	r2, r3, #5
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	4413      	add	r3, r2
 80110cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110d4:	0151      	lsls	r1, r2, #5
 80110d6:	69fa      	ldr	r2, [r7, #28]
 80110d8:	440a      	add	r2, r1
 80110da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80110e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80110e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e6:	015a      	lsls	r2, r3, #5
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	4413      	add	r3, r2
 80110ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110f4:	0151      	lsls	r1, r2, #5
 80110f6:	69fa      	ldr	r2, [r7, #28]
 80110f8:	440a      	add	r2, r1
 80110fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011102:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011106:	3301      	adds	r3, #1
 8011108:	62fb      	str	r3, [r7, #44]	; 0x2c
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011110:	429a      	cmp	r2, r3
 8011112:	d3b3      	bcc.n	801107c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801111a:	69db      	ldr	r3, [r3, #28]
 801111c:	69fa      	ldr	r2, [r7, #28]
 801111e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011122:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8011126:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801112c:	2b00      	cmp	r3, #0
 801112e:	d016      	beq.n	801115e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801113a:	69fa      	ldr	r2, [r7, #28]
 801113c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011140:	f043 030b 	orr.w	r3, r3, #11
 8011144:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8011148:	69fb      	ldr	r3, [r7, #28]
 801114a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011150:	69fa      	ldr	r2, [r7, #28]
 8011152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011156:	f043 030b 	orr.w	r3, r3, #11
 801115a:	6453      	str	r3, [r2, #68]	; 0x44
 801115c:	e015      	b.n	801118a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011164:	695a      	ldr	r2, [r3, #20]
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801116c:	4619      	mov	r1, r3
 801116e:	f242 032b 	movw	r3, #8235	; 0x202b
 8011172:	4313      	orrs	r3, r2
 8011174:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801117c:	691b      	ldr	r3, [r3, #16]
 801117e:	69fa      	ldr	r2, [r7, #28]
 8011180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011184:	f043 030b 	orr.w	r3, r3, #11
 8011188:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	69fa      	ldr	r2, [r7, #28]
 8011194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011198:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801119c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6818      	ldr	r0, [r3, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80111ae:	461a      	mov	r2, r3
 80111b0:	f008 ffd6 	bl	801a160 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	695a      	ldr	r2, [r3, #20]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80111c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f008 ff03 	bl	8019fd4 <USB_ReadInterrupts>
 80111ce:	4603      	mov	r3, r0
 80111d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80111d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111d8:	d124      	bne.n	8011224 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	4618      	mov	r0, r3
 80111e0:	f008 ff9a 	bl	801a118 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f007 ff42 	bl	8019072 <USB_GetDevSpeed>
 80111ee:	4603      	mov	r3, r0
 80111f0:	461a      	mov	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681c      	ldr	r4, [r3, #0]
 80111fa:	f001 fd91 	bl	8012d20 <HAL_RCC_GetHCLKFreq>
 80111fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011204:	b2db      	uxtb	r3, r3
 8011206:	461a      	mov	r2, r3
 8011208:	4620      	mov	r0, r4
 801120a:	f007 fc47 	bl	8018a9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f00b fa6b 	bl	801c6ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	695a      	ldr	r2, [r3, #20]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011222:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	4618      	mov	r0, r3
 801122a:	f008 fed3 	bl	8019fd4 <USB_ReadInterrupts>
 801122e:	4603      	mov	r3, r0
 8011230:	f003 0308 	and.w	r3, r3, #8
 8011234:	2b08      	cmp	r3, #8
 8011236:	d10a      	bne.n	801124e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f00b fa48 	bl	801c6ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	695a      	ldr	r2, [r3, #20]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f002 0208 	and.w	r2, r2, #8
 801124c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4618      	mov	r0, r3
 8011254:	f008 febe 	bl	8019fd4 <USB_ReadInterrupts>
 8011258:	4603      	mov	r3, r0
 801125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801125e:	2b80      	cmp	r3, #128	; 0x80
 8011260:	d122      	bne.n	80112a8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8011262:	6a3b      	ldr	r3, [r7, #32]
 8011264:	699b      	ldr	r3, [r3, #24]
 8011266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801126a:	6a3b      	ldr	r3, [r7, #32]
 801126c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801126e:	2301      	movs	r3, #1
 8011270:	627b      	str	r3, [r7, #36]	; 0x24
 8011272:	e014      	b.n	801129e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8011274:	6879      	ldr	r1, [r7, #4]
 8011276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011278:	4613      	mov	r3, r2
 801127a:	00db      	lsls	r3, r3, #3
 801127c:	4413      	add	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	440b      	add	r3, r1
 8011282:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d105      	bne.n	8011298 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128e:	b2db      	uxtb	r3, r3
 8011290:	4619      	mov	r1, r3
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f000 fb27 	bl	80118e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129a:	3301      	adds	r3, #1
 801129c:	627b      	str	r3, [r7, #36]	; 0x24
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d3e5      	bcc.n	8011274 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f008 fe91 	bl	8019fd4 <USB_ReadInterrupts>
 80112b2:	4603      	mov	r3, r0
 80112b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112bc:	d13b      	bne.n	8011336 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80112be:	2301      	movs	r3, #1
 80112c0:	627b      	str	r3, [r7, #36]	; 0x24
 80112c2:	e02b      	b.n	801131c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	015a      	lsls	r2, r3, #5
 80112c8:	69fb      	ldr	r3, [r7, #28]
 80112ca:	4413      	add	r3, r2
 80112cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80112d4:	6879      	ldr	r1, [r7, #4]
 80112d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112d8:	4613      	mov	r3, r2
 80112da:	00db      	lsls	r3, r3, #3
 80112dc:	4413      	add	r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	440b      	add	r3, r1
 80112e2:	3340      	adds	r3, #64	; 0x40
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d115      	bne.n	8011316 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80112ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	da12      	bge.n	8011316 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112f4:	4613      	mov	r3, r2
 80112f6:	00db      	lsls	r3, r3, #3
 80112f8:	4413      	add	r3, r2
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	440b      	add	r3, r1
 80112fe:	333f      	adds	r3, #63	; 0x3f
 8011300:	2201      	movs	r2, #1
 8011302:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	b2db      	uxtb	r3, r3
 8011308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801130c:	b2db      	uxtb	r3, r3
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 fae8 	bl	80118e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011318:	3301      	adds	r3, #1
 801131a:	627b      	str	r3, [r7, #36]	; 0x24
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011322:	429a      	cmp	r2, r3
 8011324:	d3ce      	bcc.n	80112c4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	695a      	ldr	r2, [r3, #20]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8011334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4618      	mov	r0, r3
 801133c:	f008 fe4a 	bl	8019fd4 <USB_ReadInterrupts>
 8011340:	4603      	mov	r3, r0
 8011342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801134a:	d155      	bne.n	80113f8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801134c:	2301      	movs	r3, #1
 801134e:	627b      	str	r3, [r7, #36]	; 0x24
 8011350:	e045      	b.n	80113de <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8011352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011354:	015a      	lsls	r2, r3, #5
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	4413      	add	r3, r2
 801135a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011362:	6879      	ldr	r1, [r7, #4]
 8011364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011366:	4613      	mov	r3, r2
 8011368:	00db      	lsls	r3, r3, #3
 801136a:	4413      	add	r3, r2
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	440b      	add	r3, r1
 8011370:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d12e      	bne.n	80113d8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801137a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801137c:	2b00      	cmp	r3, #0
 801137e:	da2b      	bge.n	80113d8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 801138c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011390:	429a      	cmp	r2, r3
 8011392:	d121      	bne.n	80113d8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8011394:	6879      	ldr	r1, [r7, #4]
 8011396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011398:	4613      	mov	r3, r2
 801139a:	00db      	lsls	r3, r3, #3
 801139c:	4413      	add	r3, r2
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	440b      	add	r3, r1
 80113a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80113a6:	2201      	movs	r2, #1
 80113a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80113aa:	6a3b      	ldr	r3, [r7, #32]
 80113ac:	699b      	ldr	r3, [r3, #24]
 80113ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80113b2:	6a3b      	ldr	r3, [r7, #32]
 80113b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	695b      	ldr	r3, [r3, #20]
 80113ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d10a      	bne.n	80113d8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	69fa      	ldr	r2, [r7, #28]
 80113cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80113d4:	6053      	str	r3, [r2, #4]
            break;
 80113d6:	e007      	b.n	80113e8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	3301      	adds	r3, #1
 80113dc:	627b      	str	r3, [r7, #36]	; 0x24
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d3b4      	bcc.n	8011352 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	695a      	ldr	r2, [r3, #20]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80113f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f008 fde9 	bl	8019fd4 <USB_ReadInterrupts>
 8011402:	4603      	mov	r3, r0
 8011404:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801140c:	d10a      	bne.n	8011424 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f00b f9ec 	bl	801c7ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	695a      	ldr	r2, [r3, #20]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8011422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4618      	mov	r0, r3
 801142a:	f008 fdd3 	bl	8019fd4 <USB_ReadInterrupts>
 801142e:	4603      	mov	r3, r0
 8011430:	f003 0304 	and.w	r3, r3, #4
 8011434:	2b04      	cmp	r3, #4
 8011436:	d115      	bne.n	8011464 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	f003 0304 	and.w	r3, r3, #4
 8011446:	2b00      	cmp	r3, #0
 8011448:	d002      	beq.n	8011450 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f00b f9dc 	bl	801c808 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	6859      	ldr	r1, [r3, #4]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	69ba      	ldr	r2, [r7, #24]
 801145c:	430a      	orrs	r2, r1
 801145e:	605a      	str	r2, [r3, #4]
 8011460:	e000      	b.n	8011464 <HAL_PCD_IRQHandler+0x992>
      return;
 8011462:	bf00      	nop
    }
  }
}
 8011464:	3734      	adds	r7, #52	; 0x34
 8011466:	46bd      	mov	sp, r7
 8011468:	bd90      	pop	{r4, r7, pc}

0801146a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b082      	sub	sp, #8
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	460b      	mov	r3, r1
 8011474:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801147c:	2b01      	cmp	r3, #1
 801147e:	d101      	bne.n	8011484 <HAL_PCD_SetAddress+0x1a>
 8011480:	2302      	movs	r3, #2
 8011482:	e013      	b.n	80114ac <HAL_PCD_SetAddress+0x42>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2201      	movs	r2, #1
 8011488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	78fa      	ldrb	r2, [r7, #3]
 8011490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	78fa      	ldrb	r2, [r7, #3]
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f008 fd31 	bl	8019f04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2200      	movs	r2, #0
 80114a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80114aa:	2300      	movs	r3, #0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	4608      	mov	r0, r1
 80114be:	4611      	mov	r1, r2
 80114c0:	461a      	mov	r2, r3
 80114c2:	4603      	mov	r3, r0
 80114c4:	70fb      	strb	r3, [r7, #3]
 80114c6:	460b      	mov	r3, r1
 80114c8:	803b      	strh	r3, [r7, #0]
 80114ca:	4613      	mov	r3, r2
 80114cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80114ce:	2300      	movs	r3, #0
 80114d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80114d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	da0f      	bge.n	80114fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80114da:	78fb      	ldrb	r3, [r7, #3]
 80114dc:	f003 020f 	and.w	r2, r3, #15
 80114e0:	4613      	mov	r3, r2
 80114e2:	00db      	lsls	r3, r3, #3
 80114e4:	4413      	add	r3, r2
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	3338      	adds	r3, #56	; 0x38
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	4413      	add	r3, r2
 80114ee:	3304      	adds	r3, #4
 80114f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2201      	movs	r2, #1
 80114f6:	705a      	strb	r2, [r3, #1]
 80114f8:	e00f      	b.n	801151a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80114fa:	78fb      	ldrb	r3, [r7, #3]
 80114fc:	f003 020f 	and.w	r2, r3, #15
 8011500:	4613      	mov	r3, r2
 8011502:	00db      	lsls	r3, r3, #3
 8011504:	4413      	add	r3, r2
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	4413      	add	r3, r2
 8011510:	3304      	adds	r3, #4
 8011512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2200      	movs	r2, #0
 8011518:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801151a:	78fb      	ldrb	r3, [r7, #3]
 801151c:	f003 030f 	and.w	r3, r3, #15
 8011520:	b2da      	uxtb	r2, r3
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011526:	883a      	ldrh	r2, [r7, #0]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	78ba      	ldrb	r2, [r7, #2]
 8011530:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	785b      	ldrb	r3, [r3, #1]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d004      	beq.n	8011544 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	b29a      	uxth	r2, r3
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011544:	78bb      	ldrb	r3, [r7, #2]
 8011546:	2b02      	cmp	r3, #2
 8011548:	d102      	bne.n	8011550 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2200      	movs	r2, #0
 801154e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011556:	2b01      	cmp	r3, #1
 8011558:	d101      	bne.n	801155e <HAL_PCD_EP_Open+0xaa>
 801155a:	2302      	movs	r3, #2
 801155c:	e00e      	b.n	801157c <HAL_PCD_EP_Open+0xc8>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2201      	movs	r2, #1
 8011562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	68f9      	ldr	r1, [r7, #12]
 801156c:	4618      	mov	r0, r3
 801156e:	f007 fda5 	bl	80190bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 801157a:	7afb      	ldrb	r3, [r7, #11]
}
 801157c:	4618      	mov	r0, r3
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	460b      	mov	r3, r1
 801158e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011594:	2b00      	cmp	r3, #0
 8011596:	da0f      	bge.n	80115b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011598:	78fb      	ldrb	r3, [r7, #3]
 801159a:	f003 020f 	and.w	r2, r3, #15
 801159e:	4613      	mov	r3, r2
 80115a0:	00db      	lsls	r3, r3, #3
 80115a2:	4413      	add	r3, r2
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	3338      	adds	r3, #56	; 0x38
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	4413      	add	r3, r2
 80115ac:	3304      	adds	r3, #4
 80115ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2201      	movs	r2, #1
 80115b4:	705a      	strb	r2, [r3, #1]
 80115b6:	e00f      	b.n	80115d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80115b8:	78fb      	ldrb	r3, [r7, #3]
 80115ba:	f003 020f 	and.w	r2, r3, #15
 80115be:	4613      	mov	r3, r2
 80115c0:	00db      	lsls	r3, r3, #3
 80115c2:	4413      	add	r3, r2
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	4413      	add	r3, r2
 80115ce:	3304      	adds	r3, #4
 80115d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2200      	movs	r2, #0
 80115d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80115d8:	78fb      	ldrb	r3, [r7, #3]
 80115da:	f003 030f 	and.w	r3, r3, #15
 80115de:	b2da      	uxtb	r2, r3
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d101      	bne.n	80115f2 <HAL_PCD_EP_Close+0x6e>
 80115ee:	2302      	movs	r3, #2
 80115f0:	e00e      	b.n	8011610 <HAL_PCD_EP_Close+0x8c>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2201      	movs	r2, #1
 80115f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	68f9      	ldr	r1, [r7, #12]
 8011600:	4618      	mov	r0, r3
 8011602:	f007 fde3 	bl	80191cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2200      	movs	r2, #0
 801160a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	3710      	adds	r7, #16
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b086      	sub	sp, #24
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	607a      	str	r2, [r7, #4]
 8011622:	603b      	str	r3, [r7, #0]
 8011624:	460b      	mov	r3, r1
 8011626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011628:	7afb      	ldrb	r3, [r7, #11]
 801162a:	f003 020f 	and.w	r2, r3, #15
 801162e:	4613      	mov	r3, r2
 8011630:	00db      	lsls	r3, r3, #3
 8011632:	4413      	add	r3, r2
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	4413      	add	r3, r2
 801163e:	3304      	adds	r3, #4
 8011640:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	687a      	ldr	r2, [r7, #4]
 8011646:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	683a      	ldr	r2, [r7, #0]
 801164c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	2200      	movs	r2, #0
 8011652:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	2200      	movs	r2, #0
 8011658:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801165a:	7afb      	ldrb	r3, [r7, #11]
 801165c:	f003 030f 	and.w	r3, r3, #15
 8011660:	b2da      	uxtb	r2, r3
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	691b      	ldr	r3, [r3, #16]
 801166a:	2b01      	cmp	r3, #1
 801166c:	d102      	bne.n	8011674 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011674:	7afb      	ldrb	r3, [r7, #11]
 8011676:	f003 030f 	and.w	r3, r3, #15
 801167a:	2b00      	cmp	r3, #0
 801167c:	d109      	bne.n	8011692 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	691b      	ldr	r3, [r3, #16]
 8011686:	b2db      	uxtb	r3, r3
 8011688:	461a      	mov	r2, r3
 801168a:	6979      	ldr	r1, [r7, #20]
 801168c:	f008 f8ca 	bl	8019824 <USB_EP0StartXfer>
 8011690:	e008      	b.n	80116a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6818      	ldr	r0, [r3, #0]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	b2db      	uxtb	r3, r3
 801169c:	461a      	mov	r2, r3
 801169e:	6979      	ldr	r1, [r7, #20]
 80116a0:	f007 fe70 	bl	8019384 <USB_EPStartXfer>
  }

  return HAL_OK;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3718      	adds	r7, #24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80116ae:	b480      	push	{r7}
 80116b0:	b083      	sub	sp, #12
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	460b      	mov	r3, r1
 80116b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80116ba:	78fb      	ldrb	r3, [r7, #3]
 80116bc:	f003 020f 	and.w	r2, r3, #15
 80116c0:	6879      	ldr	r1, [r7, #4]
 80116c2:	4613      	mov	r3, r2
 80116c4:	00db      	lsls	r3, r3, #3
 80116c6:	4413      	add	r3, r2
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	440b      	add	r3, r1
 80116cc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80116d0:	681b      	ldr	r3, [r3, #0]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	370c      	adds	r7, #12
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr

080116de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80116de:	b580      	push	{r7, lr}
 80116e0:	b086      	sub	sp, #24
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	60f8      	str	r0, [r7, #12]
 80116e6:	607a      	str	r2, [r7, #4]
 80116e8:	603b      	str	r3, [r7, #0]
 80116ea:	460b      	mov	r3, r1
 80116ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80116ee:	7afb      	ldrb	r3, [r7, #11]
 80116f0:	f003 020f 	and.w	r2, r3, #15
 80116f4:	4613      	mov	r3, r2
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	4413      	add	r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	3338      	adds	r3, #56	; 0x38
 80116fe:	68fa      	ldr	r2, [r7, #12]
 8011700:	4413      	add	r3, r2
 8011702:	3304      	adds	r3, #4
 8011704:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	2200      	movs	r2, #0
 8011716:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	2201      	movs	r2, #1
 801171c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801171e:	7afb      	ldrb	r3, [r7, #11]
 8011720:	f003 030f 	and.w	r3, r3, #15
 8011724:	b2da      	uxtb	r2, r3
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	2b01      	cmp	r3, #1
 8011730:	d102      	bne.n	8011738 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011738:	7afb      	ldrb	r3, [r7, #11]
 801173a:	f003 030f 	and.w	r3, r3, #15
 801173e:	2b00      	cmp	r3, #0
 8011740:	d109      	bne.n	8011756 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6818      	ldr	r0, [r3, #0]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	691b      	ldr	r3, [r3, #16]
 801174a:	b2db      	uxtb	r3, r3
 801174c:	461a      	mov	r2, r3
 801174e:	6979      	ldr	r1, [r7, #20]
 8011750:	f008 f868 	bl	8019824 <USB_EP0StartXfer>
 8011754:	e008      	b.n	8011768 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6818      	ldr	r0, [r3, #0]
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	b2db      	uxtb	r3, r3
 8011760:	461a      	mov	r2, r3
 8011762:	6979      	ldr	r1, [r7, #20]
 8011764:	f007 fe0e 	bl	8019384 <USB_EPStartXfer>
  }

  return HAL_OK;
 8011768:	2300      	movs	r3, #0
}
 801176a:	4618      	mov	r0, r3
 801176c:	3718      	adds	r7, #24
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}

08011772 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011772:	b580      	push	{r7, lr}
 8011774:	b084      	sub	sp, #16
 8011776:	af00      	add	r7, sp, #0
 8011778:	6078      	str	r0, [r7, #4]
 801177a:	460b      	mov	r3, r1
 801177c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801177e:	78fb      	ldrb	r3, [r7, #3]
 8011780:	f003 020f 	and.w	r2, r3, #15
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	429a      	cmp	r2, r3
 801178a:	d901      	bls.n	8011790 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801178c:	2301      	movs	r3, #1
 801178e:	e050      	b.n	8011832 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011794:	2b00      	cmp	r3, #0
 8011796:	da0f      	bge.n	80117b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011798:	78fb      	ldrb	r3, [r7, #3]
 801179a:	f003 020f 	and.w	r2, r3, #15
 801179e:	4613      	mov	r3, r2
 80117a0:	00db      	lsls	r3, r3, #3
 80117a2:	4413      	add	r3, r2
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	3338      	adds	r3, #56	; 0x38
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	4413      	add	r3, r2
 80117ac:	3304      	adds	r3, #4
 80117ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2201      	movs	r2, #1
 80117b4:	705a      	strb	r2, [r3, #1]
 80117b6:	e00d      	b.n	80117d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80117b8:	78fa      	ldrb	r2, [r7, #3]
 80117ba:	4613      	mov	r3, r2
 80117bc:	00db      	lsls	r3, r3, #3
 80117be:	4413      	add	r3, r2
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	4413      	add	r3, r2
 80117ca:	3304      	adds	r3, #4
 80117cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2200      	movs	r2, #0
 80117d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2201      	movs	r2, #1
 80117d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80117da:	78fb      	ldrb	r3, [r7, #3]
 80117dc:	f003 030f 	and.w	r3, r3, #15
 80117e0:	b2da      	uxtb	r2, r3
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d101      	bne.n	80117f4 <HAL_PCD_EP_SetStall+0x82>
 80117f0:	2302      	movs	r3, #2
 80117f2:	e01e      	b.n	8011832 <HAL_PCD_EP_SetStall+0xc0>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2201      	movs	r2, #1
 80117f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	68f9      	ldr	r1, [r7, #12]
 8011802:	4618      	mov	r0, r3
 8011804:	f008 faaa 	bl	8019d5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011808:	78fb      	ldrb	r3, [r7, #3]
 801180a:	f003 030f 	and.w	r3, r3, #15
 801180e:	2b00      	cmp	r3, #0
 8011810:	d10a      	bne.n	8011828 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6818      	ldr	r0, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	b2d9      	uxtb	r1, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011822:	461a      	mov	r2, r3
 8011824:	f008 fc9c 	bl	801a160 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2200      	movs	r2, #0
 801182c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3710      	adds	r7, #16
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}

0801183a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b084      	sub	sp, #16
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	460b      	mov	r3, r1
 8011844:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011846:	78fb      	ldrb	r3, [r7, #3]
 8011848:	f003 020f 	and.w	r2, r3, #15
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	429a      	cmp	r2, r3
 8011852:	d901      	bls.n	8011858 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011854:	2301      	movs	r3, #1
 8011856:	e042      	b.n	80118de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801185c:	2b00      	cmp	r3, #0
 801185e:	da0f      	bge.n	8011880 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011860:	78fb      	ldrb	r3, [r7, #3]
 8011862:	f003 020f 	and.w	r2, r3, #15
 8011866:	4613      	mov	r3, r2
 8011868:	00db      	lsls	r3, r3, #3
 801186a:	4413      	add	r3, r2
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	3338      	adds	r3, #56	; 0x38
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	4413      	add	r3, r2
 8011874:	3304      	adds	r3, #4
 8011876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2201      	movs	r2, #1
 801187c:	705a      	strb	r2, [r3, #1]
 801187e:	e00f      	b.n	80118a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011880:	78fb      	ldrb	r3, [r7, #3]
 8011882:	f003 020f 	and.w	r2, r3, #15
 8011886:	4613      	mov	r3, r2
 8011888:	00db      	lsls	r3, r3, #3
 801188a:	4413      	add	r3, r2
 801188c:	009b      	lsls	r3, r3, #2
 801188e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	4413      	add	r3, r2
 8011896:	3304      	adds	r3, #4
 8011898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2200      	movs	r2, #0
 801189e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80118a6:	78fb      	ldrb	r3, [r7, #3]
 80118a8:	f003 030f 	and.w	r3, r3, #15
 80118ac:	b2da      	uxtb	r2, r3
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d101      	bne.n	80118c0 <HAL_PCD_EP_ClrStall+0x86>
 80118bc:	2302      	movs	r3, #2
 80118be:	e00e      	b.n	80118de <HAL_PCD_EP_ClrStall+0xa4>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2201      	movs	r2, #1
 80118c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	68f9      	ldr	r1, [r7, #12]
 80118ce:	4618      	mov	r0, r3
 80118d0:	f008 fab2 	bl	8019e38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80118dc:	2300      	movs	r3, #0
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b084      	sub	sp, #16
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
 80118ee:	460b      	mov	r3, r1
 80118f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80118f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	da0c      	bge.n	8011914 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80118fa:	78fb      	ldrb	r3, [r7, #3]
 80118fc:	f003 020f 	and.w	r2, r3, #15
 8011900:	4613      	mov	r3, r2
 8011902:	00db      	lsls	r3, r3, #3
 8011904:	4413      	add	r3, r2
 8011906:	009b      	lsls	r3, r3, #2
 8011908:	3338      	adds	r3, #56	; 0x38
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	4413      	add	r3, r2
 801190e:	3304      	adds	r3, #4
 8011910:	60fb      	str	r3, [r7, #12]
 8011912:	e00c      	b.n	801192e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011914:	78fb      	ldrb	r3, [r7, #3]
 8011916:	f003 020f 	and.w	r2, r3, #15
 801191a:	4613      	mov	r3, r2
 801191c:	00db      	lsls	r3, r3, #3
 801191e:	4413      	add	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	4413      	add	r3, r2
 801192a:	3304      	adds	r3, #4
 801192c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	68f9      	ldr	r1, [r7, #12]
 8011934:	4618      	mov	r0, r3
 8011936:	f008 f8d1 	bl	8019adc <USB_EPStopXfer>
 801193a:	4603      	mov	r3, r0
 801193c:	72fb      	strb	r3, [r7, #11]

  return ret;
 801193e:	7afb      	ldrb	r3, [r7, #11]
}
 8011940:	4618      	mov	r0, r3
 8011942:	3710      	adds	r7, #16
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b08a      	sub	sp, #40	; 0x28
 801194c:	af02      	add	r7, sp, #8
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801195c:	683a      	ldr	r2, [r7, #0]
 801195e:	4613      	mov	r3, r2
 8011960:	00db      	lsls	r3, r3, #3
 8011962:	4413      	add	r3, r2
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	3338      	adds	r3, #56	; 0x38
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	4413      	add	r3, r2
 801196c:	3304      	adds	r3, #4
 801196e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6a1a      	ldr	r2, [r3, #32]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	699b      	ldr	r3, [r3, #24]
 8011978:	429a      	cmp	r2, r3
 801197a:	d901      	bls.n	8011980 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801197c:	2301      	movs	r3, #1
 801197e:	e06c      	b.n	8011a5a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	699a      	ldr	r2, [r3, #24]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6a1b      	ldr	r3, [r3, #32]
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	69fa      	ldr	r2, [r7, #28]
 8011992:	429a      	cmp	r2, r3
 8011994:	d902      	bls.n	801199c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	3303      	adds	r3, #3
 80119a0:	089b      	lsrs	r3, r3, #2
 80119a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80119a4:	e02b      	b.n	80119fe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	699a      	ldr	r2, [r3, #24]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6a1b      	ldr	r3, [r3, #32]
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	69fa      	ldr	r2, [r7, #28]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d902      	bls.n	80119c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	68db      	ldr	r3, [r3, #12]
 80119c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	3303      	adds	r3, #3
 80119c6:	089b      	lsrs	r3, r3, #2
 80119c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6919      	ldr	r1, [r3, #16]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	b2da      	uxtb	r2, r3
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	4603      	mov	r3, r0
 80119e0:	6978      	ldr	r0, [r7, #20]
 80119e2:	f008 f925 	bl	8019c30 <USB_WritePacket>

    ep->xfer_buff  += len;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	691a      	ldr	r2, [r3, #16]
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	441a      	add	r2, r3
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	6a1a      	ldr	r2, [r3, #32]
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	441a      	add	r2, r3
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	015a      	lsls	r2, r3, #5
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	4413      	add	r3, r2
 8011a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a0a:	699b      	ldr	r3, [r3, #24]
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	69ba      	ldr	r2, [r7, #24]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d809      	bhi.n	8011a28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	6a1a      	ldr	r2, [r3, #32]
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d203      	bcs.n	8011a28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	699b      	ldr	r3, [r3, #24]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1be      	bne.n	80119a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	699a      	ldr	r2, [r3, #24]
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	6a1b      	ldr	r3, [r3, #32]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d811      	bhi.n	8011a58 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	f003 030f 	and.w	r3, r3, #15
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	43db      	mvns	r3, r3
 8011a4e:	6939      	ldr	r1, [r7, #16]
 8011a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a54:	4013      	ands	r3, r2
 8011a56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8011a58:	2300      	movs	r3, #0
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3720      	adds	r7, #32
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
	...

08011a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	333c      	adds	r3, #60	; 0x3c
 8011a7c:	3304      	adds	r3, #4
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	015a      	lsls	r2, r3, #5
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	4413      	add	r3, r2
 8011a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	691b      	ldr	r3, [r3, #16]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d17b      	bne.n	8011b92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	f003 0308 	and.w	r3, r3, #8
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d015      	beq.n	8011ad0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	4a61      	ldr	r2, [pc, #388]	; (8011c2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	f240 80b9 	bls.w	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	f000 80b3 	beq.w	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	015a      	lsls	r2, r3, #5
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011acc:	6093      	str	r3, [r2, #8]
 8011ace:	e0a7      	b.n	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	f003 0320 	and.w	r3, r3, #32
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d009      	beq.n	8011aee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	015a      	lsls	r2, r3, #5
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	2320      	movs	r3, #32
 8011aea:	6093      	str	r3, [r2, #8]
 8011aec:	e098      	b.n	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f040 8093 	bne.w	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	4a4b      	ldr	r2, [pc, #300]	; (8011c2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d90f      	bls.n	8011b22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00a      	beq.n	8011b22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	015a      	lsls	r2, r3, #5
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	4413      	add	r3, r2
 8011b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b18:	461a      	mov	r2, r3
 8011b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b1e:	6093      	str	r3, [r2, #8]
 8011b20:	e07e      	b.n	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8011b22:	683a      	ldr	r2, [r7, #0]
 8011b24:	4613      	mov	r3, r2
 8011b26:	00db      	lsls	r3, r3, #3
 8011b28:	4413      	add	r3, r2
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	4413      	add	r3, r2
 8011b34:	3304      	adds	r3, #4
 8011b36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	69da      	ldr	r2, [r3, #28]
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	0159      	lsls	r1, r3, #5
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	440b      	add	r3, r1
 8011b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b4e:	1ad2      	subs	r2, r2, r3
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d114      	bne.n	8011b84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	699b      	ldr	r3, [r3, #24]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d109      	bne.n	8011b76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6818      	ldr	r0, [r3, #0]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	2101      	movs	r1, #1
 8011b70:	f008 faf6 	bl	801a160 <USB_EP0_OutStart>
 8011b74:	e006      	b.n	8011b84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	691a      	ldr	r2, [r3, #16]
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6a1b      	ldr	r3, [r3, #32]
 8011b7e:	441a      	add	r2, r3
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f00a fd6a 	bl	801c664 <HAL_PCD_DataOutStageCallback>
 8011b90:	e046      	b.n	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	4a26      	ldr	r2, [pc, #152]	; (8011c30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d124      	bne.n	8011be4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00a      	beq.n	8011bba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	015a      	lsls	r2, r3, #5
 8011ba8:	69bb      	ldr	r3, [r7, #24]
 8011baa:	4413      	add	r3, r2
 8011bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bb6:	6093      	str	r3, [r2, #8]
 8011bb8:	e032      	b.n	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	f003 0320 	and.w	r3, r3, #32
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d008      	beq.n	8011bd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	015a      	lsls	r2, r3, #5
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	4413      	add	r3, r2
 8011bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	2320      	movs	r3, #32
 8011bd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	4619      	mov	r1, r3
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f00a fd41 	bl	801c664 <HAL_PCD_DataOutStageCallback>
 8011be2:	e01d      	b.n	8011c20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d114      	bne.n	8011c14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8011bea:	6879      	ldr	r1, [r7, #4]
 8011bec:	683a      	ldr	r2, [r7, #0]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	00db      	lsls	r3, r3, #3
 8011bf2:	4413      	add	r3, r2
 8011bf4:	009b      	lsls	r3, r3, #2
 8011bf6:	440b      	add	r3, r1
 8011bf8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d108      	bne.n	8011c14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6818      	ldr	r0, [r3, #0]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	2100      	movs	r1, #0
 8011c10:	f008 faa6 	bl	801a160 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	4619      	mov	r1, r3
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f00a fd22 	bl	801c664 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8011c20:	2300      	movs	r3, #0
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3720      	adds	r7, #32
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	4f54300a 	.word	0x4f54300a
 8011c30:	4f54310a 	.word	0x4f54310a

08011c34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b086      	sub	sp, #24
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	333c      	adds	r3, #60	; 0x3c
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	015a      	lsls	r2, r3, #5
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	4413      	add	r3, r2
 8011c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c5e:	689b      	ldr	r3, [r3, #8]
 8011c60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	4a15      	ldr	r2, [pc, #84]	; (8011cbc <PCD_EP_OutSetupPacket_int+0x88>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d90e      	bls.n	8011c88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d009      	beq.n	8011c88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	015a      	lsls	r2, r3, #5
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c80:	461a      	mov	r2, r3
 8011c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f00a fcd9 	bl	801c640 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	4a0a      	ldr	r2, [pc, #40]	; (8011cbc <PCD_EP_OutSetupPacket_int+0x88>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d90c      	bls.n	8011cb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d108      	bne.n	8011cb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6818      	ldr	r0, [r3, #0]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011ca8:	461a      	mov	r2, r3
 8011caa:	2101      	movs	r1, #1
 8011cac:	f008 fa58 	bl	801a160 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8011cb0:	2300      	movs	r3, #0
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3718      	adds	r7, #24
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	4f54300a 	.word	0x4f54300a

08011cc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b085      	sub	sp, #20
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	460b      	mov	r3, r1
 8011cca:	70fb      	strb	r3, [r7, #3]
 8011ccc:	4613      	mov	r3, r2
 8011cce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8011cd8:	78fb      	ldrb	r3, [r7, #3]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d107      	bne.n	8011cee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8011cde:	883b      	ldrh	r3, [r7, #0]
 8011ce0:	0419      	lsls	r1, r3, #16
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	430a      	orrs	r2, r1
 8011cea:	629a      	str	r2, [r3, #40]	; 0x28
 8011cec:	e028      	b.n	8011d40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cf4:	0c1b      	lsrs	r3, r3, #16
 8011cf6:	68ba      	ldr	r2, [r7, #8]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	73fb      	strb	r3, [r7, #15]
 8011d00:	e00d      	b.n	8011d1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681a      	ldr	r2, [r3, #0]
 8011d06:	7bfb      	ldrb	r3, [r7, #15]
 8011d08:	3340      	adds	r3, #64	; 0x40
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	0c1b      	lsrs	r3, r3, #16
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	4413      	add	r3, r2
 8011d16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	73fb      	strb	r3, [r7, #15]
 8011d1e:	7bfa      	ldrb	r2, [r7, #15]
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	3b01      	subs	r3, #1
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d3ec      	bcc.n	8011d02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8011d28:	883b      	ldrh	r3, [r7, #0]
 8011d2a:	0418      	lsls	r0, r3, #16
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6819      	ldr	r1, [r3, #0]
 8011d30:	78fb      	ldrb	r3, [r7, #3]
 8011d32:	3b01      	subs	r3, #1
 8011d34:	68ba      	ldr	r2, [r7, #8]
 8011d36:	4302      	orrs	r2, r0
 8011d38:	3340      	adds	r3, #64	; 0x40
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	440b      	add	r3, r1
 8011d3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011d40:	2300      	movs	r3, #0
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011d4e:	b480      	push	{r7}
 8011d50:	b083      	sub	sp, #12
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
 8011d56:	460b      	mov	r3, r1
 8011d58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	887a      	ldrh	r2, [r7, #2]
 8011d60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8011d62:	2300      	movs	r3, #0
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b085      	sub	sp, #20
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2201      	movs	r2, #1
 8011d82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	699b      	ldr	r3, [r3, #24]
 8011d92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d9e:	4b05      	ldr	r3, [pc, #20]	; (8011db4 <HAL_PCDEx_ActivateLPM+0x44>)
 8011da0:	4313      	orrs	r3, r2
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8011da6:	2300      	movs	r3, #0
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3714      	adds	r7, #20
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr
 8011db4:	10000003 	.word	0x10000003

08011db8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011dc4:	bf00      	nop
 8011dc6:	370c      	adds	r7, #12
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr

08011dd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011dd8:	4b19      	ldr	r3, [pc, #100]	; (8011e40 <HAL_PWREx_ConfigSupply+0x70>)
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	f003 0304 	and.w	r3, r3, #4
 8011de0:	2b04      	cmp	r3, #4
 8011de2:	d00a      	beq.n	8011dfa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011de4:	4b16      	ldr	r3, [pc, #88]	; (8011e40 <HAL_PWREx_ConfigSupply+0x70>)
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	f003 0307 	and.w	r3, r3, #7
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d001      	beq.n	8011df6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011df2:	2301      	movs	r3, #1
 8011df4:	e01f      	b.n	8011e36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	e01d      	b.n	8011e36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011dfa:	4b11      	ldr	r3, [pc, #68]	; (8011e40 <HAL_PWREx_ConfigSupply+0x70>)
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	f023 0207 	bic.w	r2, r3, #7
 8011e02:	490f      	ldr	r1, [pc, #60]	; (8011e40 <HAL_PWREx_ConfigSupply+0x70>)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	4313      	orrs	r3, r2
 8011e08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8011e0a:	f7fa f843 	bl	800be94 <HAL_GetTick>
 8011e0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011e10:	e009      	b.n	8011e26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011e12:	f7fa f83f 	bl	800be94 <HAL_GetTick>
 8011e16:	4602      	mov	r2, r0
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	1ad3      	subs	r3, r2, r3
 8011e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011e20:	d901      	bls.n	8011e26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011e22:	2301      	movs	r3, #1
 8011e24:	e007      	b.n	8011e36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011e26:	4b06      	ldr	r3, [pc, #24]	; (8011e40 <HAL_PWREx_ConfigSupply+0x70>)
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011e32:	d1ee      	bne.n	8011e12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8011e34:	2300      	movs	r3, #0
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3710      	adds	r7, #16
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	58024800 	.word	0x58024800

08011e44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8011e44:	b480      	push	{r7}
 8011e46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8011e48:	4b05      	ldr	r3, [pc, #20]	; (8011e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	4a04      	ldr	r2, [pc, #16]	; (8011e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e52:	60d3      	str	r3, [r2, #12]
}
 8011e54:	bf00      	nop
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	58024800 	.word	0x58024800

08011e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08c      	sub	sp, #48	; 0x30
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d102      	bne.n	8011e78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011e72:	2301      	movs	r3, #1
 8011e74:	f000 bc1d 	b.w	80126b2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f003 0301 	and.w	r3, r3, #1
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	f000 8087 	beq.w	8011f94 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011e86:	4b99      	ldr	r3, [pc, #612]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011e88:	691b      	ldr	r3, [r3, #16]
 8011e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011e90:	4b96      	ldr	r3, [pc, #600]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e94:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e98:	2b10      	cmp	r3, #16
 8011e9a:	d007      	beq.n	8011eac <HAL_RCC_OscConfig+0x48>
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	2b18      	cmp	r3, #24
 8011ea0:	d110      	bne.n	8011ec4 <HAL_RCC_OscConfig+0x60>
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	f003 0303 	and.w	r3, r3, #3
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	d10b      	bne.n	8011ec4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011eac:	4b8f      	ldr	r3, [pc, #572]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d06c      	beq.n	8011f92 <HAL_RCC_OscConfig+0x12e>
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d168      	bne.n	8011f92 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e3f6      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ecc:	d106      	bne.n	8011edc <HAL_RCC_OscConfig+0x78>
 8011ece:	4b87      	ldr	r3, [pc, #540]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a86      	ldr	r2, [pc, #536]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ed8:	6013      	str	r3, [r2, #0]
 8011eda:	e02e      	b.n	8011f3a <HAL_RCC_OscConfig+0xd6>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d10c      	bne.n	8011efe <HAL_RCC_OscConfig+0x9a>
 8011ee4:	4b81      	ldr	r3, [pc, #516]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	4a80      	ldr	r2, [pc, #512]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011eee:	6013      	str	r3, [r2, #0]
 8011ef0:	4b7e      	ldr	r3, [pc, #504]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4a7d      	ldr	r2, [pc, #500]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011efa:	6013      	str	r3, [r2, #0]
 8011efc:	e01d      	b.n	8011f3a <HAL_RCC_OscConfig+0xd6>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011f06:	d10c      	bne.n	8011f22 <HAL_RCC_OscConfig+0xbe>
 8011f08:	4b78      	ldr	r3, [pc, #480]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a77      	ldr	r2, [pc, #476]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	4b75      	ldr	r3, [pc, #468]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a74      	ldr	r2, [pc, #464]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f1e:	6013      	str	r3, [r2, #0]
 8011f20:	e00b      	b.n	8011f3a <HAL_RCC_OscConfig+0xd6>
 8011f22:	4b72      	ldr	r3, [pc, #456]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a71      	ldr	r2, [pc, #452]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011f2c:	6013      	str	r3, [r2, #0]
 8011f2e:	4b6f      	ldr	r3, [pc, #444]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	4a6e      	ldr	r2, [pc, #440]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011f38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d013      	beq.n	8011f6a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f42:	f7f9 ffa7 	bl	800be94 <HAL_GetTick>
 8011f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f48:	e008      	b.n	8011f5c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f4a:	f7f9 ffa3 	bl	800be94 <HAL_GetTick>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f52:	1ad3      	subs	r3, r2, r3
 8011f54:	2b64      	cmp	r3, #100	; 0x64
 8011f56:	d901      	bls.n	8011f5c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8011f58:	2303      	movs	r3, #3
 8011f5a:	e3aa      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f5c:	4b63      	ldr	r3, [pc, #396]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d0f0      	beq.n	8011f4a <HAL_RCC_OscConfig+0xe6>
 8011f68:	e014      	b.n	8011f94 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f6a:	f7f9 ff93 	bl	800be94 <HAL_GetTick>
 8011f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011f70:	e008      	b.n	8011f84 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f72:	f7f9 ff8f 	bl	800be94 <HAL_GetTick>
 8011f76:	4602      	mov	r2, r0
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7a:	1ad3      	subs	r3, r2, r3
 8011f7c:	2b64      	cmp	r3, #100	; 0x64
 8011f7e:	d901      	bls.n	8011f84 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8011f80:	2303      	movs	r3, #3
 8011f82:	e396      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011f84:	4b59      	ldr	r3, [pc, #356]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1f0      	bne.n	8011f72 <HAL_RCC_OscConfig+0x10e>
 8011f90:	e000      	b.n	8011f94 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011f92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f003 0302 	and.w	r3, r3, #2
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f000 80cb 	beq.w	8012138 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011fa2:	4b52      	ldr	r3, [pc, #328]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011fa4:	691b      	ldr	r3, [r3, #16]
 8011fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011faa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011fac:	4b4f      	ldr	r3, [pc, #316]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fb0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011fb2:	6a3b      	ldr	r3, [r7, #32]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d007      	beq.n	8011fc8 <HAL_RCC_OscConfig+0x164>
 8011fb8:	6a3b      	ldr	r3, [r7, #32]
 8011fba:	2b18      	cmp	r3, #24
 8011fbc:	d156      	bne.n	801206c <HAL_RCC_OscConfig+0x208>
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	f003 0303 	and.w	r3, r3, #3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d151      	bne.n	801206c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011fc8:	4b48      	ldr	r3, [pc, #288]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	f003 0304 	and.w	r3, r3, #4
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d005      	beq.n	8011fe0 <HAL_RCC_OscConfig+0x17c>
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d101      	bne.n	8011fe0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	e368      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011fe0:	4b42      	ldr	r3, [pc, #264]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f023 0219 	bic.w	r2, r3, #25
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	493f      	ldr	r1, [pc, #252]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8011fee:	4313      	orrs	r3, r2
 8011ff0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011ff2:	f7f9 ff4f 	bl	800be94 <HAL_GetTick>
 8011ff6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011ff8:	e008      	b.n	801200c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011ffa:	f7f9 ff4b 	bl	800be94 <HAL_GetTick>
 8011ffe:	4602      	mov	r2, r0
 8012000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012002:	1ad3      	subs	r3, r2, r3
 8012004:	2b02      	cmp	r3, #2
 8012006:	d901      	bls.n	801200c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8012008:	2303      	movs	r3, #3
 801200a:	e352      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801200c:	4b37      	ldr	r3, [pc, #220]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f003 0304 	and.w	r3, r3, #4
 8012014:	2b00      	cmp	r3, #0
 8012016:	d0f0      	beq.n	8011ffa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012018:	f7f9 ff6c 	bl	800bef4 <HAL_GetREVID>
 801201c:	4603      	mov	r3, r0
 801201e:	f241 0203 	movw	r2, #4099	; 0x1003
 8012022:	4293      	cmp	r3, r2
 8012024:	d817      	bhi.n	8012056 <HAL_RCC_OscConfig+0x1f2>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	691b      	ldr	r3, [r3, #16]
 801202a:	2b40      	cmp	r3, #64	; 0x40
 801202c:	d108      	bne.n	8012040 <HAL_RCC_OscConfig+0x1dc>
 801202e:	4b2f      	ldr	r3, [pc, #188]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8012036:	4a2d      	ldr	r2, [pc, #180]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801203c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801203e:	e07b      	b.n	8012138 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012040:	4b2a      	ldr	r3, [pc, #168]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	691b      	ldr	r3, [r3, #16]
 801204c:	031b      	lsls	r3, r3, #12
 801204e:	4927      	ldr	r1, [pc, #156]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012050:	4313      	orrs	r3, r2
 8012052:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012054:	e070      	b.n	8012138 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012056:	4b25      	ldr	r3, [pc, #148]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	061b      	lsls	r3, r3, #24
 8012064:	4921      	ldr	r1, [pc, #132]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012066:	4313      	orrs	r3, r2
 8012068:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801206a:	e065      	b.n	8012138 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d048      	beq.n	8012106 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012074:	4b1d      	ldr	r3, [pc, #116]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f023 0219 	bic.w	r2, r3, #25
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	491a      	ldr	r1, [pc, #104]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 8012082:	4313      	orrs	r3, r2
 8012084:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012086:	f7f9 ff05 	bl	800be94 <HAL_GetTick>
 801208a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801208c:	e008      	b.n	80120a0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801208e:	f7f9 ff01 	bl	800be94 <HAL_GetTick>
 8012092:	4602      	mov	r2, r0
 8012094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012096:	1ad3      	subs	r3, r2, r3
 8012098:	2b02      	cmp	r3, #2
 801209a:	d901      	bls.n	80120a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 801209c:	2303      	movs	r3, #3
 801209e:	e308      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80120a0:	4b12      	ldr	r3, [pc, #72]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f003 0304 	and.w	r3, r3, #4
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d0f0      	beq.n	801208e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80120ac:	f7f9 ff22 	bl	800bef4 <HAL_GetREVID>
 80120b0:	4603      	mov	r3, r0
 80120b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d81a      	bhi.n	80120f0 <HAL_RCC_OscConfig+0x28c>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	691b      	ldr	r3, [r3, #16]
 80120be:	2b40      	cmp	r3, #64	; 0x40
 80120c0:	d108      	bne.n	80120d4 <HAL_RCC_OscConfig+0x270>
 80120c2:	4b0a      	ldr	r3, [pc, #40]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80120ca:	4a08      	ldr	r2, [pc, #32]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 80120cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80120d0:	6053      	str	r3, [r2, #4]
 80120d2:	e031      	b.n	8012138 <HAL_RCC_OscConfig+0x2d4>
 80120d4:	4b05      	ldr	r3, [pc, #20]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	691b      	ldr	r3, [r3, #16]
 80120e0:	031b      	lsls	r3, r3, #12
 80120e2:	4902      	ldr	r1, [pc, #8]	; (80120ec <HAL_RCC_OscConfig+0x288>)
 80120e4:	4313      	orrs	r3, r2
 80120e6:	604b      	str	r3, [r1, #4]
 80120e8:	e026      	b.n	8012138 <HAL_RCC_OscConfig+0x2d4>
 80120ea:	bf00      	nop
 80120ec:	58024400 	.word	0x58024400
 80120f0:	4b9a      	ldr	r3, [pc, #616]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	691b      	ldr	r3, [r3, #16]
 80120fc:	061b      	lsls	r3, r3, #24
 80120fe:	4997      	ldr	r1, [pc, #604]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012100:	4313      	orrs	r3, r2
 8012102:	604b      	str	r3, [r1, #4]
 8012104:	e018      	b.n	8012138 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012106:	4b95      	ldr	r3, [pc, #596]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4a94      	ldr	r2, [pc, #592]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801210c:	f023 0301 	bic.w	r3, r3, #1
 8012110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012112:	f7f9 febf 	bl	800be94 <HAL_GetTick>
 8012116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8012118:	e008      	b.n	801212c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801211a:	f7f9 febb 	bl	800be94 <HAL_GetTick>
 801211e:	4602      	mov	r2, r0
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	2b02      	cmp	r3, #2
 8012126:	d901      	bls.n	801212c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8012128:	2303      	movs	r3, #3
 801212a:	e2c2      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801212c:	4b8b      	ldr	r3, [pc, #556]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f003 0304 	and.w	r3, r3, #4
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1f0      	bne.n	801211a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f003 0310 	and.w	r3, r3, #16
 8012140:	2b00      	cmp	r3, #0
 8012142:	f000 80a9 	beq.w	8012298 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012146:	4b85      	ldr	r3, [pc, #532]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012148:	691b      	ldr	r3, [r3, #16]
 801214a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801214e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012150:	4b82      	ldr	r3, [pc, #520]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012154:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	2b08      	cmp	r3, #8
 801215a:	d007      	beq.n	801216c <HAL_RCC_OscConfig+0x308>
 801215c:	69bb      	ldr	r3, [r7, #24]
 801215e:	2b18      	cmp	r3, #24
 8012160:	d13a      	bne.n	80121d8 <HAL_RCC_OscConfig+0x374>
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	f003 0303 	and.w	r3, r3, #3
 8012168:	2b01      	cmp	r3, #1
 801216a:	d135      	bne.n	80121d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801216c:	4b7b      	ldr	r3, [pc, #492]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012174:	2b00      	cmp	r3, #0
 8012176:	d005      	beq.n	8012184 <HAL_RCC_OscConfig+0x320>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	69db      	ldr	r3, [r3, #28]
 801217c:	2b80      	cmp	r3, #128	; 0x80
 801217e:	d001      	beq.n	8012184 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8012180:	2301      	movs	r3, #1
 8012182:	e296      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012184:	f7f9 feb6 	bl	800bef4 <HAL_GetREVID>
 8012188:	4603      	mov	r3, r0
 801218a:	f241 0203 	movw	r2, #4099	; 0x1003
 801218e:	4293      	cmp	r3, r2
 8012190:	d817      	bhi.n	80121c2 <HAL_RCC_OscConfig+0x35e>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6a1b      	ldr	r3, [r3, #32]
 8012196:	2b20      	cmp	r3, #32
 8012198:	d108      	bne.n	80121ac <HAL_RCC_OscConfig+0x348>
 801219a:	4b70      	ldr	r3, [pc, #448]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80121a2:	4a6e      	ldr	r2, [pc, #440]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80121a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80121a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80121aa:	e075      	b.n	8012298 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80121ac:	4b6b      	ldr	r3, [pc, #428]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a1b      	ldr	r3, [r3, #32]
 80121b8:	069b      	lsls	r3, r3, #26
 80121ba:	4968      	ldr	r1, [pc, #416]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80121bc:	4313      	orrs	r3, r2
 80121be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80121c0:	e06a      	b.n	8012298 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80121c2:	4b66      	ldr	r3, [pc, #408]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6a1b      	ldr	r3, [r3, #32]
 80121ce:	061b      	lsls	r3, r3, #24
 80121d0:	4962      	ldr	r1, [pc, #392]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80121d2:	4313      	orrs	r3, r2
 80121d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80121d6:	e05f      	b.n	8012298 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	69db      	ldr	r3, [r3, #28]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d042      	beq.n	8012266 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80121e0:	4b5e      	ldr	r3, [pc, #376]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	4a5d      	ldr	r2, [pc, #372]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80121e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121ec:	f7f9 fe52 	bl	800be94 <HAL_GetTick>
 80121f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80121f2:	e008      	b.n	8012206 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80121f4:	f7f9 fe4e 	bl	800be94 <HAL_GetTick>
 80121f8:	4602      	mov	r2, r0
 80121fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fc:	1ad3      	subs	r3, r2, r3
 80121fe:	2b02      	cmp	r3, #2
 8012200:	d901      	bls.n	8012206 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8012202:	2303      	movs	r3, #3
 8012204:	e255      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012206:	4b55      	ldr	r3, [pc, #340]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801220e:	2b00      	cmp	r3, #0
 8012210:	d0f0      	beq.n	80121f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012212:	f7f9 fe6f 	bl	800bef4 <HAL_GetREVID>
 8012216:	4603      	mov	r3, r0
 8012218:	f241 0203 	movw	r2, #4099	; 0x1003
 801221c:	4293      	cmp	r3, r2
 801221e:	d817      	bhi.n	8012250 <HAL_RCC_OscConfig+0x3ec>
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6a1b      	ldr	r3, [r3, #32]
 8012224:	2b20      	cmp	r3, #32
 8012226:	d108      	bne.n	801223a <HAL_RCC_OscConfig+0x3d6>
 8012228:	4b4c      	ldr	r3, [pc, #304]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8012230:	4a4a      	ldr	r2, [pc, #296]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012236:	6053      	str	r3, [r2, #4]
 8012238:	e02e      	b.n	8012298 <HAL_RCC_OscConfig+0x434>
 801223a:	4b48      	ldr	r3, [pc, #288]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6a1b      	ldr	r3, [r3, #32]
 8012246:	069b      	lsls	r3, r3, #26
 8012248:	4944      	ldr	r1, [pc, #272]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801224a:	4313      	orrs	r3, r2
 801224c:	604b      	str	r3, [r1, #4]
 801224e:	e023      	b.n	8012298 <HAL_RCC_OscConfig+0x434>
 8012250:	4b42      	ldr	r3, [pc, #264]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012252:	68db      	ldr	r3, [r3, #12]
 8012254:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6a1b      	ldr	r3, [r3, #32]
 801225c:	061b      	lsls	r3, r3, #24
 801225e:	493f      	ldr	r1, [pc, #252]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012260:	4313      	orrs	r3, r2
 8012262:	60cb      	str	r3, [r1, #12]
 8012264:	e018      	b.n	8012298 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012266:	4b3d      	ldr	r3, [pc, #244]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	4a3c      	ldr	r2, [pc, #240]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801226c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012272:	f7f9 fe0f 	bl	800be94 <HAL_GetTick>
 8012276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012278:	e008      	b.n	801228c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801227a:	f7f9 fe0b 	bl	800be94 <HAL_GetTick>
 801227e:	4602      	mov	r2, r0
 8012280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012282:	1ad3      	subs	r3, r2, r3
 8012284:	2b02      	cmp	r3, #2
 8012286:	d901      	bls.n	801228c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012288:	2303      	movs	r3, #3
 801228a:	e212      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801228c:	4b33      	ldr	r3, [pc, #204]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1f0      	bne.n	801227a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f003 0308 	and.w	r3, r3, #8
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d036      	beq.n	8012312 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	695b      	ldr	r3, [r3, #20]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d019      	beq.n	80122e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80122ac:	4b2b      	ldr	r3, [pc, #172]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80122ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122b0:	4a2a      	ldr	r2, [pc, #168]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80122b2:	f043 0301 	orr.w	r3, r3, #1
 80122b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80122b8:	f7f9 fdec 	bl	800be94 <HAL_GetTick>
 80122bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80122be:	e008      	b.n	80122d2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80122c0:	f7f9 fde8 	bl	800be94 <HAL_GetTick>
 80122c4:	4602      	mov	r2, r0
 80122c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c8:	1ad3      	subs	r3, r2, r3
 80122ca:	2b02      	cmp	r3, #2
 80122cc:	d901      	bls.n	80122d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80122ce:	2303      	movs	r3, #3
 80122d0:	e1ef      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80122d2:	4b22      	ldr	r3, [pc, #136]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80122d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122d6:	f003 0302 	and.w	r3, r3, #2
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d0f0      	beq.n	80122c0 <HAL_RCC_OscConfig+0x45c>
 80122de:	e018      	b.n	8012312 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80122e0:	4b1e      	ldr	r3, [pc, #120]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80122e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122e4:	4a1d      	ldr	r2, [pc, #116]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 80122e6:	f023 0301 	bic.w	r3, r3, #1
 80122ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80122ec:	f7f9 fdd2 	bl	800be94 <HAL_GetTick>
 80122f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80122f2:	e008      	b.n	8012306 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80122f4:	f7f9 fdce 	bl	800be94 <HAL_GetTick>
 80122f8:	4602      	mov	r2, r0
 80122fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fc:	1ad3      	subs	r3, r2, r3
 80122fe:	2b02      	cmp	r3, #2
 8012300:	d901      	bls.n	8012306 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8012302:	2303      	movs	r3, #3
 8012304:	e1d5      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012306:	4b15      	ldr	r3, [pc, #84]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801230a:	f003 0302 	and.w	r3, r3, #2
 801230e:	2b00      	cmp	r3, #0
 8012310:	d1f0      	bne.n	80122f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f003 0320 	and.w	r3, r3, #32
 801231a:	2b00      	cmp	r3, #0
 801231c:	d039      	beq.n	8012392 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	699b      	ldr	r3, [r3, #24]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d01c      	beq.n	8012360 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012326:	4b0d      	ldr	r3, [pc, #52]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4a0c      	ldr	r2, [pc, #48]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801232c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012330:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012332:	f7f9 fdaf 	bl	800be94 <HAL_GetTick>
 8012336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012338:	e008      	b.n	801234c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801233a:	f7f9 fdab 	bl	800be94 <HAL_GetTick>
 801233e:	4602      	mov	r2, r0
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	1ad3      	subs	r3, r2, r3
 8012344:	2b02      	cmp	r3, #2
 8012346:	d901      	bls.n	801234c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8012348:	2303      	movs	r3, #3
 801234a:	e1b2      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801234c:	4b03      	ldr	r3, [pc, #12]	; (801235c <HAL_RCC_OscConfig+0x4f8>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012354:	2b00      	cmp	r3, #0
 8012356:	d0f0      	beq.n	801233a <HAL_RCC_OscConfig+0x4d6>
 8012358:	e01b      	b.n	8012392 <HAL_RCC_OscConfig+0x52e>
 801235a:	bf00      	nop
 801235c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012360:	4b9b      	ldr	r3, [pc, #620]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4a9a      	ldr	r2, [pc, #616]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801236a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801236c:	f7f9 fd92 	bl	800be94 <HAL_GetTick>
 8012370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012372:	e008      	b.n	8012386 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8012374:	f7f9 fd8e 	bl	800be94 <HAL_GetTick>
 8012378:	4602      	mov	r2, r0
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	1ad3      	subs	r3, r2, r3
 801237e:	2b02      	cmp	r3, #2
 8012380:	d901      	bls.n	8012386 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8012382:	2303      	movs	r3, #3
 8012384:	e195      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012386:	4b92      	ldr	r3, [pc, #584]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1f0      	bne.n	8012374 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f003 0304 	and.w	r3, r3, #4
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 8081 	beq.w	80124a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80123a0:	4b8c      	ldr	r3, [pc, #560]	; (80125d4 <HAL_RCC_OscConfig+0x770>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	4a8b      	ldr	r2, [pc, #556]	; (80125d4 <HAL_RCC_OscConfig+0x770>)
 80123a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80123ac:	f7f9 fd72 	bl	800be94 <HAL_GetTick>
 80123b0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80123b2:	e008      	b.n	80123c6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80123b4:	f7f9 fd6e 	bl	800be94 <HAL_GetTick>
 80123b8:	4602      	mov	r2, r0
 80123ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123bc:	1ad3      	subs	r3, r2, r3
 80123be:	2b64      	cmp	r3, #100	; 0x64
 80123c0:	d901      	bls.n	80123c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80123c2:	2303      	movs	r3, #3
 80123c4:	e175      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80123c6:	4b83      	ldr	r3, [pc, #524]	; (80125d4 <HAL_RCC_OscConfig+0x770>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d0f0      	beq.n	80123b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d106      	bne.n	80123e8 <HAL_RCC_OscConfig+0x584>
 80123da:	4b7d      	ldr	r3, [pc, #500]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80123dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123de:	4a7c      	ldr	r2, [pc, #496]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80123e0:	f043 0301 	orr.w	r3, r3, #1
 80123e4:	6713      	str	r3, [r2, #112]	; 0x70
 80123e6:	e02d      	b.n	8012444 <HAL_RCC_OscConfig+0x5e0>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	689b      	ldr	r3, [r3, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d10c      	bne.n	801240a <HAL_RCC_OscConfig+0x5a6>
 80123f0:	4b77      	ldr	r3, [pc, #476]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80123f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f4:	4a76      	ldr	r2, [pc, #472]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80123f6:	f023 0301 	bic.w	r3, r3, #1
 80123fa:	6713      	str	r3, [r2, #112]	; 0x70
 80123fc:	4b74      	ldr	r3, [pc, #464]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80123fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012400:	4a73      	ldr	r2, [pc, #460]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012402:	f023 0304 	bic.w	r3, r3, #4
 8012406:	6713      	str	r3, [r2, #112]	; 0x70
 8012408:	e01c      	b.n	8012444 <HAL_RCC_OscConfig+0x5e0>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	689b      	ldr	r3, [r3, #8]
 801240e:	2b05      	cmp	r3, #5
 8012410:	d10c      	bne.n	801242c <HAL_RCC_OscConfig+0x5c8>
 8012412:	4b6f      	ldr	r3, [pc, #444]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012416:	4a6e      	ldr	r2, [pc, #440]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012418:	f043 0304 	orr.w	r3, r3, #4
 801241c:	6713      	str	r3, [r2, #112]	; 0x70
 801241e:	4b6c      	ldr	r3, [pc, #432]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012422:	4a6b      	ldr	r2, [pc, #428]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012424:	f043 0301 	orr.w	r3, r3, #1
 8012428:	6713      	str	r3, [r2, #112]	; 0x70
 801242a:	e00b      	b.n	8012444 <HAL_RCC_OscConfig+0x5e0>
 801242c:	4b68      	ldr	r3, [pc, #416]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012430:	4a67      	ldr	r2, [pc, #412]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012432:	f023 0301 	bic.w	r3, r3, #1
 8012436:	6713      	str	r3, [r2, #112]	; 0x70
 8012438:	4b65      	ldr	r3, [pc, #404]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801243c:	4a64      	ldr	r2, [pc, #400]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801243e:	f023 0304 	bic.w	r3, r3, #4
 8012442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d015      	beq.n	8012478 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801244c:	f7f9 fd22 	bl	800be94 <HAL_GetTick>
 8012450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012452:	e00a      	b.n	801246a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012454:	f7f9 fd1e 	bl	800be94 <HAL_GetTick>
 8012458:	4602      	mov	r2, r0
 801245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012462:	4293      	cmp	r3, r2
 8012464:	d901      	bls.n	801246a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8012466:	2303      	movs	r3, #3
 8012468:	e123      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801246a:	4b59      	ldr	r3, [pc, #356]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801246e:	f003 0302 	and.w	r3, r3, #2
 8012472:	2b00      	cmp	r3, #0
 8012474:	d0ee      	beq.n	8012454 <HAL_RCC_OscConfig+0x5f0>
 8012476:	e014      	b.n	80124a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012478:	f7f9 fd0c 	bl	800be94 <HAL_GetTick>
 801247c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801247e:	e00a      	b.n	8012496 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012480:	f7f9 fd08 	bl	800be94 <HAL_GetTick>
 8012484:	4602      	mov	r2, r0
 8012486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	f241 3288 	movw	r2, #5000	; 0x1388
 801248e:	4293      	cmp	r3, r2
 8012490:	d901      	bls.n	8012496 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8012492:	2303      	movs	r3, #3
 8012494:	e10d      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012496:	4b4e      	ldr	r3, [pc, #312]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801249a:	f003 0302 	and.w	r3, r3, #2
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1ee      	bne.n	8012480 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	f000 8102 	beq.w	80126b0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80124ac:	4b48      	ldr	r3, [pc, #288]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80124ae:	691b      	ldr	r3, [r3, #16]
 80124b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80124b4:	2b18      	cmp	r3, #24
 80124b6:	f000 80bd 	beq.w	8012634 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124be:	2b02      	cmp	r3, #2
 80124c0:	f040 809e 	bne.w	8012600 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80124c4:	4b42      	ldr	r3, [pc, #264]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a41      	ldr	r2, [pc, #260]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80124ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80124ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80124d0:	f7f9 fce0 	bl	800be94 <HAL_GetTick>
 80124d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80124d6:	e008      	b.n	80124ea <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80124d8:	f7f9 fcdc 	bl	800be94 <HAL_GetTick>
 80124dc:	4602      	mov	r2, r0
 80124de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	2b02      	cmp	r3, #2
 80124e4:	d901      	bls.n	80124ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80124e6:	2303      	movs	r3, #3
 80124e8:	e0e3      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80124ea:	4b39      	ldr	r3, [pc, #228]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1f0      	bne.n	80124d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80124f6:	4b36      	ldr	r3, [pc, #216]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80124f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80124fa:	4b37      	ldr	r3, [pc, #220]	; (80125d8 <HAL_RCC_OscConfig+0x774>)
 80124fc:	4013      	ands	r3, r2
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012506:	0112      	lsls	r2, r2, #4
 8012508:	430a      	orrs	r2, r1
 801250a:	4931      	ldr	r1, [pc, #196]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801250c:	4313      	orrs	r3, r2
 801250e:	628b      	str	r3, [r1, #40]	; 0x28
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012514:	3b01      	subs	r3, #1
 8012516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801251e:	3b01      	subs	r3, #1
 8012520:	025b      	lsls	r3, r3, #9
 8012522:	b29b      	uxth	r3, r3
 8012524:	431a      	orrs	r2, r3
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252a:	3b01      	subs	r3, #1
 801252c:	041b      	lsls	r3, r3, #16
 801252e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012532:	431a      	orrs	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012538:	3b01      	subs	r3, #1
 801253a:	061b      	lsls	r3, r3, #24
 801253c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012540:	4923      	ldr	r1, [pc, #140]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012542:	4313      	orrs	r3, r2
 8012544:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8012546:	4b22      	ldr	r3, [pc, #136]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801254a:	4a21      	ldr	r2, [pc, #132]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801254c:	f023 0301 	bic.w	r3, r3, #1
 8012550:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012552:	4b1f      	ldr	r3, [pc, #124]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012556:	4b21      	ldr	r3, [pc, #132]	; (80125dc <HAL_RCC_OscConfig+0x778>)
 8012558:	4013      	ands	r3, r2
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801255e:	00d2      	lsls	r2, r2, #3
 8012560:	491b      	ldr	r1, [pc, #108]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012562:	4313      	orrs	r3, r2
 8012564:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012566:	4b1a      	ldr	r3, [pc, #104]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801256a:	f023 020c 	bic.w	r2, r3, #12
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012572:	4917      	ldr	r1, [pc, #92]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012574:	4313      	orrs	r3, r2
 8012576:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012578:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257c:	f023 0202 	bic.w	r2, r3, #2
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012584:	4912      	ldr	r1, [pc, #72]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012586:	4313      	orrs	r3, r2
 8012588:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801258a:	4b11      	ldr	r3, [pc, #68]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258e:	4a10      	ldr	r2, [pc, #64]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012594:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012596:	4b0e      	ldr	r3, [pc, #56]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 8012598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801259a:	4a0d      	ldr	r2, [pc, #52]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 801259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80125a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80125a2:	4b0b      	ldr	r3, [pc, #44]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80125a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a6:	4a0a      	ldr	r2, [pc, #40]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80125a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80125ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80125ae:	4b08      	ldr	r3, [pc, #32]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80125b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b2:	4a07      	ldr	r2, [pc, #28]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80125b4:	f043 0301 	orr.w	r3, r3, #1
 80125b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80125ba:	4b05      	ldr	r3, [pc, #20]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	4a04      	ldr	r2, [pc, #16]	; (80125d0 <HAL_RCC_OscConfig+0x76c>)
 80125c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80125c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80125c6:	f7f9 fc65 	bl	800be94 <HAL_GetTick>
 80125ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80125cc:	e011      	b.n	80125f2 <HAL_RCC_OscConfig+0x78e>
 80125ce:	bf00      	nop
 80125d0:	58024400 	.word	0x58024400
 80125d4:	58024800 	.word	0x58024800
 80125d8:	fffffc0c 	.word	0xfffffc0c
 80125dc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80125e0:	f7f9 fc58 	bl	800be94 <HAL_GetTick>
 80125e4:	4602      	mov	r2, r0
 80125e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e8:	1ad3      	subs	r3, r2, r3
 80125ea:	2b02      	cmp	r3, #2
 80125ec:	d901      	bls.n	80125f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80125ee:	2303      	movs	r3, #3
 80125f0:	e05f      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80125f2:	4b32      	ldr	r3, [pc, #200]	; (80126bc <HAL_RCC_OscConfig+0x858>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d0f0      	beq.n	80125e0 <HAL_RCC_OscConfig+0x77c>
 80125fe:	e057      	b.n	80126b0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012600:	4b2e      	ldr	r3, [pc, #184]	; (80126bc <HAL_RCC_OscConfig+0x858>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	4a2d      	ldr	r2, [pc, #180]	; (80126bc <HAL_RCC_OscConfig+0x858>)
 8012606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801260c:	f7f9 fc42 	bl	800be94 <HAL_GetTick>
 8012610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012612:	e008      	b.n	8012626 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012614:	f7f9 fc3e 	bl	800be94 <HAL_GetTick>
 8012618:	4602      	mov	r2, r0
 801261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261c:	1ad3      	subs	r3, r2, r3
 801261e:	2b02      	cmp	r3, #2
 8012620:	d901      	bls.n	8012626 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8012622:	2303      	movs	r3, #3
 8012624:	e045      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012626:	4b25      	ldr	r3, [pc, #148]	; (80126bc <HAL_RCC_OscConfig+0x858>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801262e:	2b00      	cmp	r3, #0
 8012630:	d1f0      	bne.n	8012614 <HAL_RCC_OscConfig+0x7b0>
 8012632:	e03d      	b.n	80126b0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012634:	4b21      	ldr	r3, [pc, #132]	; (80126bc <HAL_RCC_OscConfig+0x858>)
 8012636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012638:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801263a:	4b20      	ldr	r3, [pc, #128]	; (80126bc <HAL_RCC_OscConfig+0x858>)
 801263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801263e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012644:	2b01      	cmp	r3, #1
 8012646:	d031      	beq.n	80126ac <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	f003 0203 	and.w	r2, r3, #3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012652:	429a      	cmp	r2, r3
 8012654:	d12a      	bne.n	80126ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	091b      	lsrs	r3, r3, #4
 801265a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012662:	429a      	cmp	r2, r3
 8012664:	d122      	bne.n	80126ac <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012670:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012672:	429a      	cmp	r2, r3
 8012674:	d11a      	bne.n	80126ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	0a5b      	lsrs	r3, r3, #9
 801267a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012682:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012684:	429a      	cmp	r2, r3
 8012686:	d111      	bne.n	80126ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	0c1b      	lsrs	r3, r3, #16
 801268c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012694:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012696:	429a      	cmp	r2, r3
 8012698:	d108      	bne.n	80126ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	0e1b      	lsrs	r3, r3, #24
 801269e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d001      	beq.n	80126b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80126ac:	2301      	movs	r3, #1
 80126ae:	e000      	b.n	80126b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80126b0:	2300      	movs	r3, #0
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3730      	adds	r7, #48	; 0x30
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	58024400 	.word	0x58024400

080126c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d101      	bne.n	80126d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80126d0:	2301      	movs	r3, #1
 80126d2:	e19c      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80126d4:	4b8a      	ldr	r3, [pc, #552]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f003 030f 	and.w	r3, r3, #15
 80126dc:	683a      	ldr	r2, [r7, #0]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d910      	bls.n	8012704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80126e2:	4b87      	ldr	r3, [pc, #540]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f023 020f 	bic.w	r2, r3, #15
 80126ea:	4985      	ldr	r1, [pc, #532]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	4313      	orrs	r3, r2
 80126f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80126f2:	4b83      	ldr	r3, [pc, #524]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	f003 030f 	and.w	r3, r3, #15
 80126fa:	683a      	ldr	r2, [r7, #0]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d001      	beq.n	8012704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8012700:	2301      	movs	r3, #1
 8012702:	e184      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f003 0304 	and.w	r3, r3, #4
 801270c:	2b00      	cmp	r3, #0
 801270e:	d010      	beq.n	8012732 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	691a      	ldr	r2, [r3, #16]
 8012714:	4b7b      	ldr	r3, [pc, #492]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012716:	699b      	ldr	r3, [r3, #24]
 8012718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801271c:	429a      	cmp	r2, r3
 801271e:	d908      	bls.n	8012732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012720:	4b78      	ldr	r3, [pc, #480]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012722:	699b      	ldr	r3, [r3, #24]
 8012724:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	691b      	ldr	r3, [r3, #16]
 801272c:	4975      	ldr	r1, [pc, #468]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 801272e:	4313      	orrs	r3, r2
 8012730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f003 0308 	and.w	r3, r3, #8
 801273a:	2b00      	cmp	r3, #0
 801273c:	d010      	beq.n	8012760 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	695a      	ldr	r2, [r3, #20]
 8012742:	4b70      	ldr	r3, [pc, #448]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012744:	69db      	ldr	r3, [r3, #28]
 8012746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801274a:	429a      	cmp	r2, r3
 801274c:	d908      	bls.n	8012760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801274e:	4b6d      	ldr	r3, [pc, #436]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012750:	69db      	ldr	r3, [r3, #28]
 8012752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	695b      	ldr	r3, [r3, #20]
 801275a:	496a      	ldr	r1, [pc, #424]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 801275c:	4313      	orrs	r3, r2
 801275e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f003 0310 	and.w	r3, r3, #16
 8012768:	2b00      	cmp	r3, #0
 801276a:	d010      	beq.n	801278e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	699a      	ldr	r2, [r3, #24]
 8012770:	4b64      	ldr	r3, [pc, #400]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012772:	69db      	ldr	r3, [r3, #28]
 8012774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012778:	429a      	cmp	r2, r3
 801277a:	d908      	bls.n	801278e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801277c:	4b61      	ldr	r3, [pc, #388]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 801277e:	69db      	ldr	r3, [r3, #28]
 8012780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	495e      	ldr	r1, [pc, #376]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 801278a:	4313      	orrs	r3, r2
 801278c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f003 0320 	and.w	r3, r3, #32
 8012796:	2b00      	cmp	r3, #0
 8012798:	d010      	beq.n	80127bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	69da      	ldr	r2, [r3, #28]
 801279e:	4b59      	ldr	r3, [pc, #356]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80127a0:	6a1b      	ldr	r3, [r3, #32]
 80127a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d908      	bls.n	80127bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80127aa:	4b56      	ldr	r3, [pc, #344]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	69db      	ldr	r3, [r3, #28]
 80127b6:	4953      	ldr	r1, [pc, #332]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80127b8:	4313      	orrs	r3, r2
 80127ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f003 0302 	and.w	r3, r3, #2
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d010      	beq.n	80127ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	68da      	ldr	r2, [r3, #12]
 80127cc:	4b4d      	ldr	r3, [pc, #308]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80127ce:	699b      	ldr	r3, [r3, #24]
 80127d0:	f003 030f 	and.w	r3, r3, #15
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d908      	bls.n	80127ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80127d8:	4b4a      	ldr	r3, [pc, #296]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80127da:	699b      	ldr	r3, [r3, #24]
 80127dc:	f023 020f 	bic.w	r2, r3, #15
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	4947      	ldr	r1, [pc, #284]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80127e6:	4313      	orrs	r3, r2
 80127e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f003 0301 	and.w	r3, r3, #1
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d055      	beq.n	80128a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80127f6:	4b43      	ldr	r3, [pc, #268]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80127f8:	699b      	ldr	r3, [r3, #24]
 80127fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	689b      	ldr	r3, [r3, #8]
 8012802:	4940      	ldr	r1, [pc, #256]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012804:	4313      	orrs	r3, r2
 8012806:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	2b02      	cmp	r3, #2
 801280e:	d107      	bne.n	8012820 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012810:	4b3c      	ldr	r3, [pc, #240]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012818:	2b00      	cmp	r3, #0
 801281a:	d121      	bne.n	8012860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801281c:	2301      	movs	r3, #1
 801281e:	e0f6      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	2b03      	cmp	r3, #3
 8012826:	d107      	bne.n	8012838 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012828:	4b36      	ldr	r3, [pc, #216]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012830:	2b00      	cmp	r3, #0
 8012832:	d115      	bne.n	8012860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012834:	2301      	movs	r3, #1
 8012836:	e0ea      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	2b01      	cmp	r3, #1
 801283e:	d107      	bne.n	8012850 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012840:	4b30      	ldr	r3, [pc, #192]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012848:	2b00      	cmp	r3, #0
 801284a:	d109      	bne.n	8012860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801284c:	2301      	movs	r3, #1
 801284e:	e0de      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012850:	4b2c      	ldr	r3, [pc, #176]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	f003 0304 	and.w	r3, r3, #4
 8012858:	2b00      	cmp	r3, #0
 801285a:	d101      	bne.n	8012860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801285c:	2301      	movs	r3, #1
 801285e:	e0d6      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012860:	4b28      	ldr	r3, [pc, #160]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012862:	691b      	ldr	r3, [r3, #16]
 8012864:	f023 0207 	bic.w	r2, r3, #7
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	685b      	ldr	r3, [r3, #4]
 801286c:	4925      	ldr	r1, [pc, #148]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 801286e:	4313      	orrs	r3, r2
 8012870:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012872:	f7f9 fb0f 	bl	800be94 <HAL_GetTick>
 8012876:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012878:	e00a      	b.n	8012890 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801287a:	f7f9 fb0b 	bl	800be94 <HAL_GetTick>
 801287e:	4602      	mov	r2, r0
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	1ad3      	subs	r3, r2, r3
 8012884:	f241 3288 	movw	r2, #5000	; 0x1388
 8012888:	4293      	cmp	r3, r2
 801288a:	d901      	bls.n	8012890 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801288c:	2303      	movs	r3, #3
 801288e:	e0be      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012890:	4b1c      	ldr	r3, [pc, #112]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 8012892:	691b      	ldr	r3, [r3, #16]
 8012894:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	00db      	lsls	r3, r3, #3
 801289e:	429a      	cmp	r2, r3
 80128a0:	d1eb      	bne.n	801287a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	f003 0302 	and.w	r3, r3, #2
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d010      	beq.n	80128d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	68da      	ldr	r2, [r3, #12]
 80128b2:	4b14      	ldr	r3, [pc, #80]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80128b4:	699b      	ldr	r3, [r3, #24]
 80128b6:	f003 030f 	and.w	r3, r3, #15
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d208      	bcs.n	80128d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80128be:	4b11      	ldr	r3, [pc, #68]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80128c0:	699b      	ldr	r3, [r3, #24]
 80128c2:	f023 020f 	bic.w	r2, r3, #15
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	68db      	ldr	r3, [r3, #12]
 80128ca:	490e      	ldr	r1, [pc, #56]	; (8012904 <HAL_RCC_ClockConfig+0x244>)
 80128cc:	4313      	orrs	r3, r2
 80128ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80128d0:	4b0b      	ldr	r3, [pc, #44]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f003 030f 	and.w	r3, r3, #15
 80128d8:	683a      	ldr	r2, [r7, #0]
 80128da:	429a      	cmp	r2, r3
 80128dc:	d214      	bcs.n	8012908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80128de:	4b08      	ldr	r3, [pc, #32]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f023 020f 	bic.w	r2, r3, #15
 80128e6:	4906      	ldr	r1, [pc, #24]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	4313      	orrs	r3, r2
 80128ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80128ee:	4b04      	ldr	r3, [pc, #16]	; (8012900 <HAL_RCC_ClockConfig+0x240>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f003 030f 	and.w	r3, r3, #15
 80128f6:	683a      	ldr	r2, [r7, #0]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d005      	beq.n	8012908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80128fc:	2301      	movs	r3, #1
 80128fe:	e086      	b.n	8012a0e <HAL_RCC_ClockConfig+0x34e>
 8012900:	52002000 	.word	0x52002000
 8012904:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f003 0304 	and.w	r3, r3, #4
 8012910:	2b00      	cmp	r3, #0
 8012912:	d010      	beq.n	8012936 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	691a      	ldr	r2, [r3, #16]
 8012918:	4b3f      	ldr	r3, [pc, #252]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 801291a:	699b      	ldr	r3, [r3, #24]
 801291c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012920:	429a      	cmp	r2, r3
 8012922:	d208      	bcs.n	8012936 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012924:	4b3c      	ldr	r3, [pc, #240]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 8012926:	699b      	ldr	r3, [r3, #24]
 8012928:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	691b      	ldr	r3, [r3, #16]
 8012930:	4939      	ldr	r1, [pc, #228]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 8012932:	4313      	orrs	r3, r2
 8012934:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f003 0308 	and.w	r3, r3, #8
 801293e:	2b00      	cmp	r3, #0
 8012940:	d010      	beq.n	8012964 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	695a      	ldr	r2, [r3, #20]
 8012946:	4b34      	ldr	r3, [pc, #208]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 8012948:	69db      	ldr	r3, [r3, #28]
 801294a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801294e:	429a      	cmp	r2, r3
 8012950:	d208      	bcs.n	8012964 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8012952:	4b31      	ldr	r3, [pc, #196]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 8012954:	69db      	ldr	r3, [r3, #28]
 8012956:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	695b      	ldr	r3, [r3, #20]
 801295e:	492e      	ldr	r1, [pc, #184]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 8012960:	4313      	orrs	r3, r2
 8012962:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f003 0310 	and.w	r3, r3, #16
 801296c:	2b00      	cmp	r3, #0
 801296e:	d010      	beq.n	8012992 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	699a      	ldr	r2, [r3, #24]
 8012974:	4b28      	ldr	r3, [pc, #160]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 8012976:	69db      	ldr	r3, [r3, #28]
 8012978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801297c:	429a      	cmp	r2, r3
 801297e:	d208      	bcs.n	8012992 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012980:	4b25      	ldr	r3, [pc, #148]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 8012982:	69db      	ldr	r3, [r3, #28]
 8012984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	699b      	ldr	r3, [r3, #24]
 801298c:	4922      	ldr	r1, [pc, #136]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 801298e:	4313      	orrs	r3, r2
 8012990:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	f003 0320 	and.w	r3, r3, #32
 801299a:	2b00      	cmp	r3, #0
 801299c:	d010      	beq.n	80129c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	69da      	ldr	r2, [r3, #28]
 80129a2:	4b1d      	ldr	r3, [pc, #116]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 80129a4:	6a1b      	ldr	r3, [r3, #32]
 80129a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d208      	bcs.n	80129c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80129ae:	4b1a      	ldr	r3, [pc, #104]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 80129b0:	6a1b      	ldr	r3, [r3, #32]
 80129b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	69db      	ldr	r3, [r3, #28]
 80129ba:	4917      	ldr	r1, [pc, #92]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 80129bc:	4313      	orrs	r3, r2
 80129be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80129c0:	f000 f834 	bl	8012a2c <HAL_RCC_GetSysClockFreq>
 80129c4:	4602      	mov	r2, r0
 80129c6:	4b14      	ldr	r3, [pc, #80]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 80129c8:	699b      	ldr	r3, [r3, #24]
 80129ca:	0a1b      	lsrs	r3, r3, #8
 80129cc:	f003 030f 	and.w	r3, r3, #15
 80129d0:	4912      	ldr	r1, [pc, #72]	; (8012a1c <HAL_RCC_ClockConfig+0x35c>)
 80129d2:	5ccb      	ldrb	r3, [r1, r3]
 80129d4:	f003 031f 	and.w	r3, r3, #31
 80129d8:	fa22 f303 	lsr.w	r3, r2, r3
 80129dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80129de:	4b0e      	ldr	r3, [pc, #56]	; (8012a18 <HAL_RCC_ClockConfig+0x358>)
 80129e0:	699b      	ldr	r3, [r3, #24]
 80129e2:	f003 030f 	and.w	r3, r3, #15
 80129e6:	4a0d      	ldr	r2, [pc, #52]	; (8012a1c <HAL_RCC_ClockConfig+0x35c>)
 80129e8:	5cd3      	ldrb	r3, [r2, r3]
 80129ea:	f003 031f 	and.w	r3, r3, #31
 80129ee:	693a      	ldr	r2, [r7, #16]
 80129f0:	fa22 f303 	lsr.w	r3, r2, r3
 80129f4:	4a0a      	ldr	r2, [pc, #40]	; (8012a20 <HAL_RCC_ClockConfig+0x360>)
 80129f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80129f8:	4a0a      	ldr	r2, [pc, #40]	; (8012a24 <HAL_RCC_ClockConfig+0x364>)
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80129fe:	4b0a      	ldr	r3, [pc, #40]	; (8012a28 <HAL_RCC_ClockConfig+0x368>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7f9 f9fc 	bl	800be00 <HAL_InitTick>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8012a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3718      	adds	r7, #24
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	58024400 	.word	0x58024400
 8012a1c:	08038ac4 	.word	0x08038ac4
 8012a20:	24000004 	.word	0x24000004
 8012a24:	24000000 	.word	0x24000000
 8012a28:	24000008 	.word	0x24000008

08012a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b089      	sub	sp, #36	; 0x24
 8012a30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012a32:	4bb3      	ldr	r3, [pc, #716]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a34:	691b      	ldr	r3, [r3, #16]
 8012a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012a3a:	2b18      	cmp	r3, #24
 8012a3c:	f200 8155 	bhi.w	8012cea <HAL_RCC_GetSysClockFreq+0x2be>
 8012a40:	a201      	add	r2, pc, #4	; (adr r2, 8012a48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8012a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a46:	bf00      	nop
 8012a48:	08012aad 	.word	0x08012aad
 8012a4c:	08012ceb 	.word	0x08012ceb
 8012a50:	08012ceb 	.word	0x08012ceb
 8012a54:	08012ceb 	.word	0x08012ceb
 8012a58:	08012ceb 	.word	0x08012ceb
 8012a5c:	08012ceb 	.word	0x08012ceb
 8012a60:	08012ceb 	.word	0x08012ceb
 8012a64:	08012ceb 	.word	0x08012ceb
 8012a68:	08012ad3 	.word	0x08012ad3
 8012a6c:	08012ceb 	.word	0x08012ceb
 8012a70:	08012ceb 	.word	0x08012ceb
 8012a74:	08012ceb 	.word	0x08012ceb
 8012a78:	08012ceb 	.word	0x08012ceb
 8012a7c:	08012ceb 	.word	0x08012ceb
 8012a80:	08012ceb 	.word	0x08012ceb
 8012a84:	08012ceb 	.word	0x08012ceb
 8012a88:	08012ad9 	.word	0x08012ad9
 8012a8c:	08012ceb 	.word	0x08012ceb
 8012a90:	08012ceb 	.word	0x08012ceb
 8012a94:	08012ceb 	.word	0x08012ceb
 8012a98:	08012ceb 	.word	0x08012ceb
 8012a9c:	08012ceb 	.word	0x08012ceb
 8012aa0:	08012ceb 	.word	0x08012ceb
 8012aa4:	08012ceb 	.word	0x08012ceb
 8012aa8:	08012adf 	.word	0x08012adf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012aac:	4b94      	ldr	r3, [pc, #592]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f003 0320 	and.w	r3, r3, #32
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d009      	beq.n	8012acc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012ab8:	4b91      	ldr	r3, [pc, #580]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	08db      	lsrs	r3, r3, #3
 8012abe:	f003 0303 	and.w	r3, r3, #3
 8012ac2:	4a90      	ldr	r2, [pc, #576]	; (8012d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8012ac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8012aca:	e111      	b.n	8012cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012acc:	4b8d      	ldr	r3, [pc, #564]	; (8012d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012ace:	61bb      	str	r3, [r7, #24]
    break;
 8012ad0:	e10e      	b.n	8012cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8012ad2:	4b8d      	ldr	r3, [pc, #564]	; (8012d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012ad4:	61bb      	str	r3, [r7, #24]
    break;
 8012ad6:	e10b      	b.n	8012cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8012ad8:	4b8c      	ldr	r3, [pc, #560]	; (8012d0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8012ada:	61bb      	str	r3, [r7, #24]
    break;
 8012adc:	e108      	b.n	8012cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012ade:	4b88      	ldr	r3, [pc, #544]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ae2:	f003 0303 	and.w	r3, r3, #3
 8012ae6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012ae8:	4b85      	ldr	r3, [pc, #532]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aec:	091b      	lsrs	r3, r3, #4
 8012aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012af2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012af4:	4b82      	ldr	r3, [pc, #520]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af8:	f003 0301 	and.w	r3, r3, #1
 8012afc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012afe:	4b80      	ldr	r3, [pc, #512]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b02:	08db      	lsrs	r3, r3, #3
 8012b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b08:	68fa      	ldr	r2, [r7, #12]
 8012b0a:	fb02 f303 	mul.w	r3, r2, r3
 8012b0e:	ee07 3a90 	vmov	s15, r3
 8012b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b16:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f000 80e1 	beq.w	8012ce4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	f000 8083 	beq.w	8012c30 <HAL_RCC_GetSysClockFreq+0x204>
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	f200 80a1 	bhi.w	8012c74 <HAL_RCC_GetSysClockFreq+0x248>
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d003      	beq.n	8012b40 <HAL_RCC_GetSysClockFreq+0x114>
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d056      	beq.n	8012bec <HAL_RCC_GetSysClockFreq+0x1c0>
 8012b3e:	e099      	b.n	8012c74 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b40:	4b6f      	ldr	r3, [pc, #444]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f003 0320 	and.w	r3, r3, #32
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d02d      	beq.n	8012ba8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b4c:	4b6c      	ldr	r3, [pc, #432]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	08db      	lsrs	r3, r3, #3
 8012b52:	f003 0303 	and.w	r3, r3, #3
 8012b56:	4a6b      	ldr	r2, [pc, #428]	; (8012d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012b58:	fa22 f303 	lsr.w	r3, r2, r3
 8012b5c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	ee07 3a90 	vmov	s15, r3
 8012b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	ee07 3a90 	vmov	s15, r3
 8012b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012b76:	4b62      	ldr	r3, [pc, #392]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b7e:	ee07 3a90 	vmov	s15, r3
 8012b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8012b8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8012d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8012ba6:	e087      	b.n	8012cb8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	ee07 3a90 	vmov	s15, r3
 8012bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8012d14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8012bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bba:	4b51      	ldr	r3, [pc, #324]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bc2:	ee07 3a90 	vmov	s15, r3
 8012bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8012bce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8012d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012bea:	e065      	b.n	8012cb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	ee07 3a90 	vmov	s15, r3
 8012bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bf6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bfe:	4b40      	ldr	r3, [pc, #256]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c06:	ee07 3a90 	vmov	s15, r3
 8012c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8012c12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8012d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012c2e:	e043      	b.n	8012cb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	ee07 3a90 	vmov	s15, r3
 8012c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012d1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8012c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c42:	4b2f      	ldr	r3, [pc, #188]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c4a:	ee07 3a90 	vmov	s15, r3
 8012c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8012c56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8012d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012c72:	e021      	b.n	8012cb8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	ee07 3a90 	vmov	s15, r3
 8012c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c86:	4b1e      	ldr	r3, [pc, #120]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c8e:	ee07 3a90 	vmov	s15, r3
 8012c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8012c9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012cb6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012cb8:	4b11      	ldr	r3, [pc, #68]	; (8012d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cbc:	0a5b      	lsrs	r3, r3, #9
 8012cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	ee07 3a90 	vmov	s15, r3
 8012ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8012cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012cdc:	ee17 3a90 	vmov	r3, s15
 8012ce0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8012ce2:	e005      	b.n	8012cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	61bb      	str	r3, [r7, #24]
    break;
 8012ce8:	e002      	b.n	8012cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8012cea:	4b07      	ldr	r3, [pc, #28]	; (8012d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012cec:	61bb      	str	r3, [r7, #24]
    break;
 8012cee:	bf00      	nop
  }

  return sysclockfreq;
 8012cf0:	69bb      	ldr	r3, [r7, #24]
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3724      	adds	r7, #36	; 0x24
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfc:	4770      	bx	lr
 8012cfe:	bf00      	nop
 8012d00:	58024400 	.word	0x58024400
 8012d04:	03d09000 	.word	0x03d09000
 8012d08:	003d0900 	.word	0x003d0900
 8012d0c:	017d7840 	.word	0x017d7840
 8012d10:	46000000 	.word	0x46000000
 8012d14:	4c742400 	.word	0x4c742400
 8012d18:	4a742400 	.word	0x4a742400
 8012d1c:	4bbebc20 	.word	0x4bbebc20

08012d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012d26:	f7ff fe81 	bl	8012a2c <HAL_RCC_GetSysClockFreq>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	4b10      	ldr	r3, [pc, #64]	; (8012d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8012d2e:	699b      	ldr	r3, [r3, #24]
 8012d30:	0a1b      	lsrs	r3, r3, #8
 8012d32:	f003 030f 	and.w	r3, r3, #15
 8012d36:	490f      	ldr	r1, [pc, #60]	; (8012d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8012d38:	5ccb      	ldrb	r3, [r1, r3]
 8012d3a:	f003 031f 	and.w	r3, r3, #31
 8012d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8012d42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012d44:	4b0a      	ldr	r3, [pc, #40]	; (8012d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8012d46:	699b      	ldr	r3, [r3, #24]
 8012d48:	f003 030f 	and.w	r3, r3, #15
 8012d4c:	4a09      	ldr	r2, [pc, #36]	; (8012d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8012d4e:	5cd3      	ldrb	r3, [r2, r3]
 8012d50:	f003 031f 	and.w	r3, r3, #31
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	fa22 f303 	lsr.w	r3, r2, r3
 8012d5a:	4a07      	ldr	r2, [pc, #28]	; (8012d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8012d5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012d5e:	4a07      	ldr	r2, [pc, #28]	; (8012d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012d64:	4b04      	ldr	r3, [pc, #16]	; (8012d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8012d66:	681b      	ldr	r3, [r3, #0]
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	58024400 	.word	0x58024400
 8012d74:	08038ac4 	.word	0x08038ac4
 8012d78:	24000004 	.word	0x24000004
 8012d7c:	24000000 	.word	0x24000000

08012d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012d84:	f7ff ffcc 	bl	8012d20 <HAL_RCC_GetHCLKFreq>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	4b06      	ldr	r3, [pc, #24]	; (8012da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012d8c:	69db      	ldr	r3, [r3, #28]
 8012d8e:	091b      	lsrs	r3, r3, #4
 8012d90:	f003 0307 	and.w	r3, r3, #7
 8012d94:	4904      	ldr	r1, [pc, #16]	; (8012da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012d96:	5ccb      	ldrb	r3, [r1, r3]
 8012d98:	f003 031f 	and.w	r3, r3, #31
 8012d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	58024400 	.word	0x58024400
 8012da8:	08038ac4 	.word	0x08038ac4

08012dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012db0:	f7ff ffb6 	bl	8012d20 <HAL_RCC_GetHCLKFreq>
 8012db4:	4602      	mov	r2, r0
 8012db6:	4b06      	ldr	r3, [pc, #24]	; (8012dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012db8:	69db      	ldr	r3, [r3, #28]
 8012dba:	0a1b      	lsrs	r3, r3, #8
 8012dbc:	f003 0307 	and.w	r3, r3, #7
 8012dc0:	4904      	ldr	r1, [pc, #16]	; (8012dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012dc2:	5ccb      	ldrb	r3, [r1, r3]
 8012dc4:	f003 031f 	and.w	r3, r3, #31
 8012dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	58024400 	.word	0x58024400
 8012dd4:	08038ac4 	.word	0x08038ac4

08012dd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012de0:	2300      	movs	r3, #0
 8012de2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012de4:	2300      	movs	r3, #0
 8012de6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d03f      	beq.n	8012e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012df8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012dfc:	d02a      	beq.n	8012e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012dfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012e02:	d824      	bhi.n	8012e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012e04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012e08:	d018      	beq.n	8012e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012e0e:	d81e      	bhi.n	8012e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d003      	beq.n	8012e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012e18:	d007      	beq.n	8012e2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012e1a:	e018      	b.n	8012e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012e1c:	4ba3      	ldr	r3, [pc, #652]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e20:	4aa2      	ldr	r2, [pc, #648]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012e28:	e015      	b.n	8012e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	3304      	adds	r3, #4
 8012e2e:	2102      	movs	r1, #2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f001 f9d5 	bl	80141e0 <RCCEx_PLL2_Config>
 8012e36:	4603      	mov	r3, r0
 8012e38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012e3a:	e00c      	b.n	8012e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	3324      	adds	r3, #36	; 0x24
 8012e40:	2102      	movs	r1, #2
 8012e42:	4618      	mov	r0, r3
 8012e44:	f001 fa7e 	bl	8014344 <RCCEx_PLL3_Config>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012e4c:	e003      	b.n	8012e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	75fb      	strb	r3, [r7, #23]
      break;
 8012e52:	e000      	b.n	8012e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8012e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012e56:	7dfb      	ldrb	r3, [r7, #23]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d109      	bne.n	8012e70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012e5c:	4b93      	ldr	r3, [pc, #588]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e68:	4990      	ldr	r1, [pc, #576]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e6a:	4313      	orrs	r3, r2
 8012e6c:	650b      	str	r3, [r1, #80]	; 0x50
 8012e6e:	e001      	b.n	8012e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e70:	7dfb      	ldrb	r3, [r7, #23]
 8012e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d03d      	beq.n	8012efc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	d826      	bhi.n	8012ed6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8012e88:	a201      	add	r2, pc, #4	; (adr r2, 8012e90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8012e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e8e:	bf00      	nop
 8012e90:	08012ea5 	.word	0x08012ea5
 8012e94:	08012eb3 	.word	0x08012eb3
 8012e98:	08012ec5 	.word	0x08012ec5
 8012e9c:	08012edd 	.word	0x08012edd
 8012ea0:	08012edd 	.word	0x08012edd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ea4:	4b81      	ldr	r3, [pc, #516]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea8:	4a80      	ldr	r2, [pc, #512]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012eae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012eb0:	e015      	b.n	8012ede <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	3304      	adds	r3, #4
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f001 f991 	bl	80141e0 <RCCEx_PLL2_Config>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012ec2:	e00c      	b.n	8012ede <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	3324      	adds	r3, #36	; 0x24
 8012ec8:	2100      	movs	r1, #0
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f001 fa3a 	bl	8014344 <RCCEx_PLL3_Config>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012ed4:	e003      	b.n	8012ede <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8012eda:	e000      	b.n	8012ede <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8012edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012ede:	7dfb      	ldrb	r3, [r7, #23]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d109      	bne.n	8012ef8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012ee4:	4b71      	ldr	r3, [pc, #452]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ee8:	f023 0207 	bic.w	r2, r3, #7
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ef0:	496e      	ldr	r1, [pc, #440]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	650b      	str	r3, [r1, #80]	; 0x50
 8012ef6:	e001      	b.n	8012efc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ef8:	7dfb      	ldrb	r3, [r7, #23]
 8012efa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d042      	beq.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f10:	d02b      	beq.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8012f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f16:	d825      	bhi.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012f18:	2bc0      	cmp	r3, #192	; 0xc0
 8012f1a:	d028      	beq.n	8012f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012f1c:	2bc0      	cmp	r3, #192	; 0xc0
 8012f1e:	d821      	bhi.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012f20:	2b80      	cmp	r3, #128	; 0x80
 8012f22:	d016      	beq.n	8012f52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8012f24:	2b80      	cmp	r3, #128	; 0x80
 8012f26:	d81d      	bhi.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d002      	beq.n	8012f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8012f2c:	2b40      	cmp	r3, #64	; 0x40
 8012f2e:	d007      	beq.n	8012f40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8012f30:	e018      	b.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f32:	4b5e      	ldr	r3, [pc, #376]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f36:	4a5d      	ldr	r2, [pc, #372]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012f3e:	e017      	b.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	3304      	adds	r3, #4
 8012f44:	2100      	movs	r1, #0
 8012f46:	4618      	mov	r0, r3
 8012f48:	f001 f94a 	bl	80141e0 <RCCEx_PLL2_Config>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012f50:	e00e      	b.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	3324      	adds	r3, #36	; 0x24
 8012f56:	2100      	movs	r1, #0
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f001 f9f3 	bl	8014344 <RCCEx_PLL3_Config>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012f62:	e005      	b.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012f64:	2301      	movs	r3, #1
 8012f66:	75fb      	strb	r3, [r7, #23]
      break;
 8012f68:	e002      	b.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012f6a:	bf00      	nop
 8012f6c:	e000      	b.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012f70:	7dfb      	ldrb	r3, [r7, #23]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d109      	bne.n	8012f8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012f76:	4b4d      	ldr	r3, [pc, #308]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f82:	494a      	ldr	r1, [pc, #296]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f84:	4313      	orrs	r3, r2
 8012f86:	650b      	str	r3, [r1, #80]	; 0x50
 8012f88:	e001      	b.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f8a:	7dfb      	ldrb	r3, [r7, #23]
 8012f8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d049      	beq.n	801302e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012fa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012fa4:	d030      	beq.n	8013008 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8012fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012faa:	d82a      	bhi.n	8013002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012fac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012fb0:	d02c      	beq.n	801300c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8012fb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012fb6:	d824      	bhi.n	8013002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012fbc:	d018      	beq.n	8012ff0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8012fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012fc2:	d81e      	bhi.n	8013002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d003      	beq.n	8012fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8012fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012fcc:	d007      	beq.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8012fce:	e018      	b.n	8013002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fd0:	4b36      	ldr	r3, [pc, #216]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd4:	4a35      	ldr	r2, [pc, #212]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012fdc:	e017      	b.n	801300e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	3304      	adds	r3, #4
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f001 f8fb 	bl	80141e0 <RCCEx_PLL2_Config>
 8012fea:	4603      	mov	r3, r0
 8012fec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012fee:	e00e      	b.n	801300e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	3324      	adds	r3, #36	; 0x24
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f001 f9a4 	bl	8014344 <RCCEx_PLL3_Config>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8013000:	e005      	b.n	801300e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8013002:	2301      	movs	r3, #1
 8013004:	75fb      	strb	r3, [r7, #23]
      break;
 8013006:	e002      	b.n	801300e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8013008:	bf00      	nop
 801300a:	e000      	b.n	801300e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801300c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801300e:	7dfb      	ldrb	r3, [r7, #23]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d10a      	bne.n	801302a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8013014:	4b25      	ldr	r3, [pc, #148]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013018:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013022:	4922      	ldr	r1, [pc, #136]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013024:	4313      	orrs	r3, r2
 8013026:	658b      	str	r3, [r1, #88]	; 0x58
 8013028:	e001      	b.n	801302e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801302a:	7dfb      	ldrb	r3, [r7, #23]
 801302c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013036:	2b00      	cmp	r3, #0
 8013038:	d04b      	beq.n	80130d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013044:	d030      	beq.n	80130a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8013046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801304a:	d82a      	bhi.n	80130a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801304c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013050:	d02e      	beq.n	80130b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8013052:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013056:	d824      	bhi.n	80130a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8013058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801305c:	d018      	beq.n	8013090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801305e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013062:	d81e      	bhi.n	80130a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8013064:	2b00      	cmp	r3, #0
 8013066:	d003      	beq.n	8013070 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8013068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801306c:	d007      	beq.n	801307e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801306e:	e018      	b.n	80130a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013070:	4b0e      	ldr	r3, [pc, #56]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013074:	4a0d      	ldr	r2, [pc, #52]	; (80130ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801307a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801307c:	e019      	b.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	3304      	adds	r3, #4
 8013082:	2100      	movs	r1, #0
 8013084:	4618      	mov	r0, r3
 8013086:	f001 f8ab 	bl	80141e0 <RCCEx_PLL2_Config>
 801308a:	4603      	mov	r3, r0
 801308c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801308e:	e010      	b.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	3324      	adds	r3, #36	; 0x24
 8013094:	2100      	movs	r1, #0
 8013096:	4618      	mov	r0, r3
 8013098:	f001 f954 	bl	8014344 <RCCEx_PLL3_Config>
 801309c:	4603      	mov	r3, r0
 801309e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80130a0:	e007      	b.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	75fb      	strb	r3, [r7, #23]
      break;
 80130a6:	e004      	b.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80130a8:	bf00      	nop
 80130aa:	e002      	b.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80130ac:	58024400 	.word	0x58024400
      break;
 80130b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80130b2:	7dfb      	ldrb	r3, [r7, #23]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d10a      	bne.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80130b8:	4b99      	ldr	r3, [pc, #612]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80130ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80130c6:	4996      	ldr	r1, [pc, #600]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80130c8:	4313      	orrs	r3, r2
 80130ca:	658b      	str	r3, [r1, #88]	; 0x58
 80130cc:	e001      	b.n	80130d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130ce:	7dfb      	ldrb	r3, [r7, #23]
 80130d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d032      	beq.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130e2:	2b30      	cmp	r3, #48	; 0x30
 80130e4:	d01c      	beq.n	8013120 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80130e6:	2b30      	cmp	r3, #48	; 0x30
 80130e8:	d817      	bhi.n	801311a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80130ea:	2b20      	cmp	r3, #32
 80130ec:	d00c      	beq.n	8013108 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80130ee:	2b20      	cmp	r3, #32
 80130f0:	d813      	bhi.n	801311a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d016      	beq.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80130f6:	2b10      	cmp	r3, #16
 80130f8:	d10f      	bne.n	801311a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80130fa:	4b89      	ldr	r3, [pc, #548]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80130fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130fe:	4a88      	ldr	r2, [pc, #544]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8013106:	e00e      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	3304      	adds	r3, #4
 801310c:	2102      	movs	r1, #2
 801310e:	4618      	mov	r0, r3
 8013110:	f001 f866 	bl	80141e0 <RCCEx_PLL2_Config>
 8013114:	4603      	mov	r3, r0
 8013116:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8013118:	e005      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801311a:	2301      	movs	r3, #1
 801311c:	75fb      	strb	r3, [r7, #23]
      break;
 801311e:	e002      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8013120:	bf00      	nop
 8013122:	e000      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8013124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013126:	7dfb      	ldrb	r3, [r7, #23]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d109      	bne.n	8013140 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801312c:	4b7c      	ldr	r3, [pc, #496]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801312e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013130:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013138:	4979      	ldr	r1, [pc, #484]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801313a:	4313      	orrs	r3, r2
 801313c:	64cb      	str	r3, [r1, #76]	; 0x4c
 801313e:	e001      	b.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013140:	7dfb      	ldrb	r3, [r7, #23]
 8013142:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801314c:	2b00      	cmp	r3, #0
 801314e:	d047      	beq.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013158:	d030      	beq.n	80131bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801315a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801315e:	d82a      	bhi.n	80131b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8013160:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013164:	d02c      	beq.n	80131c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8013166:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801316a:	d824      	bhi.n	80131b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801316c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013170:	d018      	beq.n	80131a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8013172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013176:	d81e      	bhi.n	80131b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8013178:	2b00      	cmp	r3, #0
 801317a:	d003      	beq.n	8013184 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 801317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013180:	d007      	beq.n	8013192 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8013182:	e018      	b.n	80131b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013184:	4b66      	ldr	r3, [pc, #408]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013188:	4a65      	ldr	r2, [pc, #404]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801318a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801318e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8013190:	e017      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3304      	adds	r3, #4
 8013196:	2100      	movs	r1, #0
 8013198:	4618      	mov	r0, r3
 801319a:	f001 f821 	bl	80141e0 <RCCEx_PLL2_Config>
 801319e:	4603      	mov	r3, r0
 80131a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80131a2:	e00e      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	3324      	adds	r3, #36	; 0x24
 80131a8:	2100      	movs	r1, #0
 80131aa:	4618      	mov	r0, r3
 80131ac:	f001 f8ca 	bl	8014344 <RCCEx_PLL3_Config>
 80131b0:	4603      	mov	r3, r0
 80131b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80131b4:	e005      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80131b6:	2301      	movs	r3, #1
 80131b8:	75fb      	strb	r3, [r7, #23]
      break;
 80131ba:	e002      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80131bc:	bf00      	nop
 80131be:	e000      	b.n	80131c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80131c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80131c2:	7dfb      	ldrb	r3, [r7, #23]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d109      	bne.n	80131dc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80131c8:	4b55      	ldr	r3, [pc, #340]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80131ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131d4:	4952      	ldr	r1, [pc, #328]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80131d6:	4313      	orrs	r3, r2
 80131d8:	650b      	str	r3, [r1, #80]	; 0x50
 80131da:	e001      	b.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80131dc:	7dfb      	ldrb	r3, [r7, #23]
 80131de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d049      	beq.n	8013280 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80131f4:	d02e      	beq.n	8013254 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80131f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80131fa:	d828      	bhi.n	801324e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80131fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013200:	d02a      	beq.n	8013258 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8013202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013206:	d822      	bhi.n	801324e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013208:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801320c:	d026      	beq.n	801325c <HAL_RCCEx_PeriphCLKConfig+0x484>
 801320e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013212:	d81c      	bhi.n	801324e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013218:	d010      	beq.n	801323c <HAL_RCCEx_PeriphCLKConfig+0x464>
 801321a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801321e:	d816      	bhi.n	801324e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013220:	2b00      	cmp	r3, #0
 8013222:	d01d      	beq.n	8013260 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8013224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013228:	d111      	bne.n	801324e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	3304      	adds	r3, #4
 801322e:	2101      	movs	r1, #1
 8013230:	4618      	mov	r0, r3
 8013232:	f000 ffd5 	bl	80141e0 <RCCEx_PLL2_Config>
 8013236:	4603      	mov	r3, r0
 8013238:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801323a:	e012      	b.n	8013262 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	3324      	adds	r3, #36	; 0x24
 8013240:	2101      	movs	r1, #1
 8013242:	4618      	mov	r0, r3
 8013244:	f001 f87e 	bl	8014344 <RCCEx_PLL3_Config>
 8013248:	4603      	mov	r3, r0
 801324a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801324c:	e009      	b.n	8013262 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801324e:	2301      	movs	r3, #1
 8013250:	75fb      	strb	r3, [r7, #23]
      break;
 8013252:	e006      	b.n	8013262 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013254:	bf00      	nop
 8013256:	e004      	b.n	8013262 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013258:	bf00      	nop
 801325a:	e002      	b.n	8013262 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801325c:	bf00      	nop
 801325e:	e000      	b.n	8013262 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013262:	7dfb      	ldrb	r3, [r7, #23]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d109      	bne.n	801327c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8013268:	4b2d      	ldr	r3, [pc, #180]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801326c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013274:	492a      	ldr	r1, [pc, #168]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013276:	4313      	orrs	r3, r2
 8013278:	650b      	str	r3, [r1, #80]	; 0x50
 801327a:	e001      	b.n	8013280 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801327c:	7dfb      	ldrb	r3, [r7, #23]
 801327e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013288:	2b00      	cmp	r3, #0
 801328a:	d04d      	beq.n	8013328 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013296:	d02e      	beq.n	80132f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8013298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801329c:	d828      	bhi.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132a2:	d02a      	beq.n	80132fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 80132a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132a8:	d822      	bhi.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80132aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80132ae:	d026      	beq.n	80132fe <HAL_RCCEx_PeriphCLKConfig+0x526>
 80132b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80132b4:	d81c      	bhi.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80132b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80132ba:	d010      	beq.n	80132de <HAL_RCCEx_PeriphCLKConfig+0x506>
 80132bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80132c0:	d816      	bhi.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d01d      	beq.n	8013302 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80132c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80132ca:	d111      	bne.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	3304      	adds	r3, #4
 80132d0:	2101      	movs	r1, #1
 80132d2:	4618      	mov	r0, r3
 80132d4:	f000 ff84 	bl	80141e0 <RCCEx_PLL2_Config>
 80132d8:	4603      	mov	r3, r0
 80132da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80132dc:	e012      	b.n	8013304 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	3324      	adds	r3, #36	; 0x24
 80132e2:	2101      	movs	r1, #1
 80132e4:	4618      	mov	r0, r3
 80132e6:	f001 f82d 	bl	8014344 <RCCEx_PLL3_Config>
 80132ea:	4603      	mov	r3, r0
 80132ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80132ee:	e009      	b.n	8013304 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80132f0:	2301      	movs	r3, #1
 80132f2:	75fb      	strb	r3, [r7, #23]
      break;
 80132f4:	e006      	b.n	8013304 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80132f6:	bf00      	nop
 80132f8:	e004      	b.n	8013304 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80132fa:	bf00      	nop
 80132fc:	e002      	b.n	8013304 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80132fe:	bf00      	nop
 8013300:	e000      	b.n	8013304 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8013302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013304:	7dfb      	ldrb	r3, [r7, #23]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d10c      	bne.n	8013324 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801330a:	4b05      	ldr	r3, [pc, #20]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801330e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013318:	4901      	ldr	r1, [pc, #4]	; (8013320 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801331a:	4313      	orrs	r3, r2
 801331c:	658b      	str	r3, [r1, #88]	; 0x58
 801331e:	e003      	b.n	8013328 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8013320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013324:	7dfb      	ldrb	r3, [r7, #23]
 8013326:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013330:	2b00      	cmp	r3, #0
 8013332:	d02f      	beq.n	8013394 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801333c:	d00e      	beq.n	801335c <HAL_RCCEx_PeriphCLKConfig+0x584>
 801333e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013342:	d814      	bhi.n	801336e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8013344:	2b00      	cmp	r3, #0
 8013346:	d015      	beq.n	8013374 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8013348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801334c:	d10f      	bne.n	801336e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801334e:	4baf      	ldr	r3, [pc, #700]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013352:	4aae      	ldr	r2, [pc, #696]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801335a:	e00c      	b.n	8013376 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	3304      	adds	r3, #4
 8013360:	2101      	movs	r1, #1
 8013362:	4618      	mov	r0, r3
 8013364:	f000 ff3c 	bl	80141e0 <RCCEx_PLL2_Config>
 8013368:	4603      	mov	r3, r0
 801336a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801336c:	e003      	b.n	8013376 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801336e:	2301      	movs	r3, #1
 8013370:	75fb      	strb	r3, [r7, #23]
      break;
 8013372:	e000      	b.n	8013376 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8013374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013376:	7dfb      	ldrb	r3, [r7, #23]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d109      	bne.n	8013390 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801337c:	4ba3      	ldr	r3, [pc, #652]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801337e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013380:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013388:	49a0      	ldr	r1, [pc, #640]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801338a:	4313      	orrs	r3, r2
 801338c:	650b      	str	r3, [r1, #80]	; 0x50
 801338e:	e001      	b.n	8013394 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013390:	7dfb      	ldrb	r3, [r7, #23]
 8013392:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801339c:	2b00      	cmp	r3, #0
 801339e:	d032      	beq.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133a4:	2b03      	cmp	r3, #3
 80133a6:	d81b      	bhi.n	80133e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80133a8:	a201      	add	r2, pc, #4	; (adr r2, 80133b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80133aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ae:	bf00      	nop
 80133b0:	080133e7 	.word	0x080133e7
 80133b4:	080133c1 	.word	0x080133c1
 80133b8:	080133cf 	.word	0x080133cf
 80133bc:	080133e7 	.word	0x080133e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80133c0:	4b92      	ldr	r3, [pc, #584]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80133c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133c4:	4a91      	ldr	r2, [pc, #580]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80133c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80133ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80133cc:	e00c      	b.n	80133e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	3304      	adds	r3, #4
 80133d2:	2102      	movs	r1, #2
 80133d4:	4618      	mov	r0, r3
 80133d6:	f000 ff03 	bl	80141e0 <RCCEx_PLL2_Config>
 80133da:	4603      	mov	r3, r0
 80133dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80133de:	e003      	b.n	80133e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80133e0:	2301      	movs	r3, #1
 80133e2:	75fb      	strb	r3, [r7, #23]
      break;
 80133e4:	e000      	b.n	80133e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80133e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80133e8:	7dfb      	ldrb	r3, [r7, #23]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d109      	bne.n	8013402 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80133ee:	4b87      	ldr	r3, [pc, #540]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80133f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133f2:	f023 0203 	bic.w	r2, r3, #3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133fa:	4984      	ldr	r1, [pc, #528]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80133fc:	4313      	orrs	r3, r2
 80133fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013400:	e001      	b.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013402:	7dfb      	ldrb	r3, [r7, #23]
 8013404:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801340e:	2b00      	cmp	r3, #0
 8013410:	f000 8086 	beq.w	8013520 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013414:	4b7e      	ldr	r3, [pc, #504]	; (8013610 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	4a7d      	ldr	r2, [pc, #500]	; (8013610 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801341e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013420:	f7f8 fd38 	bl	800be94 <HAL_GetTick>
 8013424:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013426:	e009      	b.n	801343c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013428:	f7f8 fd34 	bl	800be94 <HAL_GetTick>
 801342c:	4602      	mov	r2, r0
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	1ad3      	subs	r3, r2, r3
 8013432:	2b64      	cmp	r3, #100	; 0x64
 8013434:	d902      	bls.n	801343c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8013436:	2303      	movs	r3, #3
 8013438:	75fb      	strb	r3, [r7, #23]
        break;
 801343a:	e005      	b.n	8013448 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801343c:	4b74      	ldr	r3, [pc, #464]	; (8013610 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013444:	2b00      	cmp	r3, #0
 8013446:	d0ef      	beq.n	8013428 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8013448:	7dfb      	ldrb	r3, [r7, #23]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d166      	bne.n	801351c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801344e:	4b6f      	ldr	r3, [pc, #444]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013450:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013458:	4053      	eors	r3, r2
 801345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801345e:	2b00      	cmp	r3, #0
 8013460:	d013      	beq.n	801348a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013462:	4b6a      	ldr	r3, [pc, #424]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801346a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801346c:	4b67      	ldr	r3, [pc, #412]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013470:	4a66      	ldr	r2, [pc, #408]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013476:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013478:	4b64      	ldr	r3, [pc, #400]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801347c:	4a63      	ldr	r2, [pc, #396]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013482:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8013484:	4a61      	ldr	r2, [pc, #388]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013494:	d115      	bne.n	80134c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013496:	f7f8 fcfd 	bl	800be94 <HAL_GetTick>
 801349a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801349c:	e00b      	b.n	80134b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801349e:	f7f8 fcf9 	bl	800be94 <HAL_GetTick>
 80134a2:	4602      	mov	r2, r0
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	1ad3      	subs	r3, r2, r3
 80134a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80134ac:	4293      	cmp	r3, r2
 80134ae:	d902      	bls.n	80134b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80134b0:	2303      	movs	r3, #3
 80134b2:	75fb      	strb	r3, [r7, #23]
            break;
 80134b4:	e005      	b.n	80134c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80134b6:	4b55      	ldr	r3, [pc, #340]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134ba:	f003 0302 	and.w	r3, r3, #2
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d0ed      	beq.n	801349e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80134c2:	7dfb      	ldrb	r3, [r7, #23]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d126      	bne.n	8013516 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80134ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80134d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80134d6:	d10d      	bne.n	80134f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80134d8:	4b4c      	ldr	r3, [pc, #304]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134da:	691b      	ldr	r3, [r3, #16]
 80134dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80134e6:	0919      	lsrs	r1, r3, #4
 80134e8:	4b4a      	ldr	r3, [pc, #296]	; (8013614 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80134ea:	400b      	ands	r3, r1
 80134ec:	4947      	ldr	r1, [pc, #284]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134ee:	4313      	orrs	r3, r2
 80134f0:	610b      	str	r3, [r1, #16]
 80134f2:	e005      	b.n	8013500 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80134f4:	4b45      	ldr	r3, [pc, #276]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134f6:	691b      	ldr	r3, [r3, #16]
 80134f8:	4a44      	ldr	r2, [pc, #272]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80134fe:	6113      	str	r3, [r2, #16]
 8013500:	4b42      	ldr	r3, [pc, #264]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801350a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801350e:	493f      	ldr	r1, [pc, #252]	; (801360c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013510:	4313      	orrs	r3, r2
 8013512:	670b      	str	r3, [r1, #112]	; 0x70
 8013514:	e004      	b.n	8013520 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013516:	7dfb      	ldrb	r3, [r7, #23]
 8013518:	75bb      	strb	r3, [r7, #22]
 801351a:	e001      	b.n	8013520 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801351c:	7dfb      	ldrb	r3, [r7, #23]
 801351e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f003 0301 	and.w	r3, r3, #1
 8013528:	2b00      	cmp	r3, #0
 801352a:	f000 8085 	beq.w	8013638 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013532:	2b28      	cmp	r3, #40	; 0x28
 8013534:	d866      	bhi.n	8013604 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8013536:	a201      	add	r2, pc, #4	; (adr r2, 801353c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8013538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801353c:	08013619 	.word	0x08013619
 8013540:	08013605 	.word	0x08013605
 8013544:	08013605 	.word	0x08013605
 8013548:	08013605 	.word	0x08013605
 801354c:	08013605 	.word	0x08013605
 8013550:	08013605 	.word	0x08013605
 8013554:	08013605 	.word	0x08013605
 8013558:	08013605 	.word	0x08013605
 801355c:	080135e1 	.word	0x080135e1
 8013560:	08013605 	.word	0x08013605
 8013564:	08013605 	.word	0x08013605
 8013568:	08013605 	.word	0x08013605
 801356c:	08013605 	.word	0x08013605
 8013570:	08013605 	.word	0x08013605
 8013574:	08013605 	.word	0x08013605
 8013578:	08013605 	.word	0x08013605
 801357c:	080135f3 	.word	0x080135f3
 8013580:	08013605 	.word	0x08013605
 8013584:	08013605 	.word	0x08013605
 8013588:	08013605 	.word	0x08013605
 801358c:	08013605 	.word	0x08013605
 8013590:	08013605 	.word	0x08013605
 8013594:	08013605 	.word	0x08013605
 8013598:	08013605 	.word	0x08013605
 801359c:	08013619 	.word	0x08013619
 80135a0:	08013605 	.word	0x08013605
 80135a4:	08013605 	.word	0x08013605
 80135a8:	08013605 	.word	0x08013605
 80135ac:	08013605 	.word	0x08013605
 80135b0:	08013605 	.word	0x08013605
 80135b4:	08013605 	.word	0x08013605
 80135b8:	08013605 	.word	0x08013605
 80135bc:	08013619 	.word	0x08013619
 80135c0:	08013605 	.word	0x08013605
 80135c4:	08013605 	.word	0x08013605
 80135c8:	08013605 	.word	0x08013605
 80135cc:	08013605 	.word	0x08013605
 80135d0:	08013605 	.word	0x08013605
 80135d4:	08013605 	.word	0x08013605
 80135d8:	08013605 	.word	0x08013605
 80135dc:	08013619 	.word	0x08013619
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	3304      	adds	r3, #4
 80135e4:	2101      	movs	r1, #1
 80135e6:	4618      	mov	r0, r3
 80135e8:	f000 fdfa 	bl	80141e0 <RCCEx_PLL2_Config>
 80135ec:	4603      	mov	r3, r0
 80135ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80135f0:	e013      	b.n	801361a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	3324      	adds	r3, #36	; 0x24
 80135f6:	2101      	movs	r1, #1
 80135f8:	4618      	mov	r0, r3
 80135fa:	f000 fea3 	bl	8014344 <RCCEx_PLL3_Config>
 80135fe:	4603      	mov	r3, r0
 8013600:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8013602:	e00a      	b.n	801361a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013604:	2301      	movs	r3, #1
 8013606:	75fb      	strb	r3, [r7, #23]
      break;
 8013608:	e007      	b.n	801361a <HAL_RCCEx_PeriphCLKConfig+0x842>
 801360a:	bf00      	nop
 801360c:	58024400 	.word	0x58024400
 8013610:	58024800 	.word	0x58024800
 8013614:	00ffffcf 	.word	0x00ffffcf
      break;
 8013618:	bf00      	nop
    }

    if(ret == HAL_OK)
 801361a:	7dfb      	ldrb	r3, [r7, #23]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d109      	bne.n	8013634 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8013620:	4b96      	ldr	r3, [pc, #600]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013624:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801362c:	4993      	ldr	r1, [pc, #588]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801362e:	4313      	orrs	r3, r2
 8013630:	654b      	str	r3, [r1, #84]	; 0x54
 8013632:	e001      	b.n	8013638 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013634:	7dfb      	ldrb	r3, [r7, #23]
 8013636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	f003 0302 	and.w	r3, r3, #2
 8013640:	2b00      	cmp	r3, #0
 8013642:	d038      	beq.n	80136b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013648:	2b05      	cmp	r3, #5
 801364a:	d821      	bhi.n	8013690 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 801364c:	a201      	add	r2, pc, #4	; (adr r2, 8013654 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 801364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013652:	bf00      	nop
 8013654:	08013697 	.word	0x08013697
 8013658:	0801366d 	.word	0x0801366d
 801365c:	0801367f 	.word	0x0801367f
 8013660:	08013697 	.word	0x08013697
 8013664:	08013697 	.word	0x08013697
 8013668:	08013697 	.word	0x08013697
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	3304      	adds	r3, #4
 8013670:	2101      	movs	r1, #1
 8013672:	4618      	mov	r0, r3
 8013674:	f000 fdb4 	bl	80141e0 <RCCEx_PLL2_Config>
 8013678:	4603      	mov	r3, r0
 801367a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801367c:	e00c      	b.n	8013698 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	3324      	adds	r3, #36	; 0x24
 8013682:	2101      	movs	r1, #1
 8013684:	4618      	mov	r0, r3
 8013686:	f000 fe5d 	bl	8014344 <RCCEx_PLL3_Config>
 801368a:	4603      	mov	r3, r0
 801368c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801368e:	e003      	b.n	8013698 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013690:	2301      	movs	r3, #1
 8013692:	75fb      	strb	r3, [r7, #23]
      break;
 8013694:	e000      	b.n	8013698 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8013696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013698:	7dfb      	ldrb	r3, [r7, #23]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d109      	bne.n	80136b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801369e:	4b77      	ldr	r3, [pc, #476]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80136a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136a2:	f023 0207 	bic.w	r2, r3, #7
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136aa:	4974      	ldr	r1, [pc, #464]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80136ac:	4313      	orrs	r3, r2
 80136ae:	654b      	str	r3, [r1, #84]	; 0x54
 80136b0:	e001      	b.n	80136b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80136b2:	7dfb      	ldrb	r3, [r7, #23]
 80136b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f003 0304 	and.w	r3, r3, #4
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d03a      	beq.n	8013738 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136c8:	2b05      	cmp	r3, #5
 80136ca:	d821      	bhi.n	8013710 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80136cc:	a201      	add	r2, pc, #4	; (adr r2, 80136d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80136ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136d2:	bf00      	nop
 80136d4:	08013717 	.word	0x08013717
 80136d8:	080136ed 	.word	0x080136ed
 80136dc:	080136ff 	.word	0x080136ff
 80136e0:	08013717 	.word	0x08013717
 80136e4:	08013717 	.word	0x08013717
 80136e8:	08013717 	.word	0x08013717
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	3304      	adds	r3, #4
 80136f0:	2101      	movs	r1, #1
 80136f2:	4618      	mov	r0, r3
 80136f4:	f000 fd74 	bl	80141e0 <RCCEx_PLL2_Config>
 80136f8:	4603      	mov	r3, r0
 80136fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80136fc:	e00c      	b.n	8013718 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	3324      	adds	r3, #36	; 0x24
 8013702:	2101      	movs	r1, #1
 8013704:	4618      	mov	r0, r3
 8013706:	f000 fe1d 	bl	8014344 <RCCEx_PLL3_Config>
 801370a:	4603      	mov	r3, r0
 801370c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801370e:	e003      	b.n	8013718 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013710:	2301      	movs	r3, #1
 8013712:	75fb      	strb	r3, [r7, #23]
      break;
 8013714:	e000      	b.n	8013718 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8013716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013718:	7dfb      	ldrb	r3, [r7, #23]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d10a      	bne.n	8013734 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801371e:	4b57      	ldr	r3, [pc, #348]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013722:	f023 0207 	bic.w	r2, r3, #7
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801372c:	4953      	ldr	r1, [pc, #332]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801372e:	4313      	orrs	r3, r2
 8013730:	658b      	str	r3, [r1, #88]	; 0x58
 8013732:	e001      	b.n	8013738 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013734:	7dfb      	ldrb	r3, [r7, #23]
 8013736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f003 0320 	and.w	r3, r3, #32
 8013740:	2b00      	cmp	r3, #0
 8013742:	d04b      	beq.n	80137dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801374a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801374e:	d02e      	beq.n	80137ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8013750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013754:	d828      	bhi.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801375a:	d02a      	beq.n	80137b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 801375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013760:	d822      	bhi.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013766:	d026      	beq.n	80137b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8013768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801376c:	d81c      	bhi.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801376e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013772:	d010      	beq.n	8013796 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8013774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013778:	d816      	bhi.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801377a:	2b00      	cmp	r3, #0
 801377c:	d01d      	beq.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 801377e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013782:	d111      	bne.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	3304      	adds	r3, #4
 8013788:	2100      	movs	r1, #0
 801378a:	4618      	mov	r0, r3
 801378c:	f000 fd28 	bl	80141e0 <RCCEx_PLL2_Config>
 8013790:	4603      	mov	r3, r0
 8013792:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013794:	e012      	b.n	80137bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3324      	adds	r3, #36	; 0x24
 801379a:	2102      	movs	r1, #2
 801379c:	4618      	mov	r0, r3
 801379e:	f000 fdd1 	bl	8014344 <RCCEx_PLL3_Config>
 80137a2:	4603      	mov	r3, r0
 80137a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80137a6:	e009      	b.n	80137bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80137a8:	2301      	movs	r3, #1
 80137aa:	75fb      	strb	r3, [r7, #23]
      break;
 80137ac:	e006      	b.n	80137bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80137ae:	bf00      	nop
 80137b0:	e004      	b.n	80137bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80137b2:	bf00      	nop
 80137b4:	e002      	b.n	80137bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80137b6:	bf00      	nop
 80137b8:	e000      	b.n	80137bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80137ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80137bc:	7dfb      	ldrb	r3, [r7, #23]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d10a      	bne.n	80137d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80137c2:	4b2e      	ldr	r3, [pc, #184]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80137c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80137d0:	492a      	ldr	r1, [pc, #168]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80137d2:	4313      	orrs	r3, r2
 80137d4:	654b      	str	r3, [r1, #84]	; 0x54
 80137d6:	e001      	b.n	80137dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137d8:	7dfb      	ldrb	r3, [r7, #23]
 80137da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d04d      	beq.n	8013884 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80137ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80137f2:	d02e      	beq.n	8013852 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80137f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80137f8:	d828      	bhi.n	801384c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80137fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137fe:	d02a      	beq.n	8013856 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8013800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013804:	d822      	bhi.n	801384c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8013806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801380a:	d026      	beq.n	801385a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 801380c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013810:	d81c      	bhi.n	801384c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8013812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013816:	d010      	beq.n	801383a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8013818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801381c:	d816      	bhi.n	801384c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801381e:	2b00      	cmp	r3, #0
 8013820:	d01d      	beq.n	801385e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8013822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013826:	d111      	bne.n	801384c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	3304      	adds	r3, #4
 801382c:	2100      	movs	r1, #0
 801382e:	4618      	mov	r0, r3
 8013830:	f000 fcd6 	bl	80141e0 <RCCEx_PLL2_Config>
 8013834:	4603      	mov	r3, r0
 8013836:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8013838:	e012      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	3324      	adds	r3, #36	; 0x24
 801383e:	2102      	movs	r1, #2
 8013840:	4618      	mov	r0, r3
 8013842:	f000 fd7f 	bl	8014344 <RCCEx_PLL3_Config>
 8013846:	4603      	mov	r3, r0
 8013848:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801384a:	e009      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801384c:	2301      	movs	r3, #1
 801384e:	75fb      	strb	r3, [r7, #23]
      break;
 8013850:	e006      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013852:	bf00      	nop
 8013854:	e004      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013856:	bf00      	nop
 8013858:	e002      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801385a:	bf00      	nop
 801385c:	e000      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801385e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013860:	7dfb      	ldrb	r3, [r7, #23]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d10c      	bne.n	8013880 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013866:	4b05      	ldr	r3, [pc, #20]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801386a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013874:	4901      	ldr	r1, [pc, #4]	; (801387c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013876:	4313      	orrs	r3, r2
 8013878:	658b      	str	r3, [r1, #88]	; 0x58
 801387a:	e003      	b.n	8013884 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801387c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013880:	7dfb      	ldrb	r3, [r7, #23]
 8013882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801388c:	2b00      	cmp	r3, #0
 801388e:	d04b      	beq.n	8013928 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013896:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801389a:	d02e      	beq.n	80138fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 801389c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80138a0:	d828      	bhi.n	80138f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80138a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138a6:	d02a      	beq.n	80138fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80138a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138ac:	d822      	bhi.n	80138f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80138ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80138b2:	d026      	beq.n	8013902 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80138b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80138b8:	d81c      	bhi.n	80138f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80138ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80138be:	d010      	beq.n	80138e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80138c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80138c4:	d816      	bhi.n	80138f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d01d      	beq.n	8013906 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80138ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80138ce:	d111      	bne.n	80138f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	3304      	adds	r3, #4
 80138d4:	2100      	movs	r1, #0
 80138d6:	4618      	mov	r0, r3
 80138d8:	f000 fc82 	bl	80141e0 <RCCEx_PLL2_Config>
 80138dc:	4603      	mov	r3, r0
 80138de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80138e0:	e012      	b.n	8013908 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	3324      	adds	r3, #36	; 0x24
 80138e6:	2102      	movs	r1, #2
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 fd2b 	bl	8014344 <RCCEx_PLL3_Config>
 80138ee:	4603      	mov	r3, r0
 80138f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80138f2:	e009      	b.n	8013908 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80138f4:	2301      	movs	r3, #1
 80138f6:	75fb      	strb	r3, [r7, #23]
      break;
 80138f8:	e006      	b.n	8013908 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80138fa:	bf00      	nop
 80138fc:	e004      	b.n	8013908 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80138fe:	bf00      	nop
 8013900:	e002      	b.n	8013908 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8013902:	bf00      	nop
 8013904:	e000      	b.n	8013908 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8013906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013908:	7dfb      	ldrb	r3, [r7, #23]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d10a      	bne.n	8013924 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801390e:	4b9d      	ldr	r3, [pc, #628]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801391c:	4999      	ldr	r1, [pc, #612]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801391e:	4313      	orrs	r3, r2
 8013920:	658b      	str	r3, [r1, #88]	; 0x58
 8013922:	e001      	b.n	8013928 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013924:	7dfb      	ldrb	r3, [r7, #23]
 8013926:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	f003 0308 	and.w	r3, r3, #8
 8013930:	2b00      	cmp	r3, #0
 8013932:	d01a      	beq.n	801396a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801393e:	d10a      	bne.n	8013956 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	3324      	adds	r3, #36	; 0x24
 8013944:	2102      	movs	r1, #2
 8013946:	4618      	mov	r0, r3
 8013948:	f000 fcfc 	bl	8014344 <RCCEx_PLL3_Config>
 801394c:	4603      	mov	r3, r0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8013952:	2301      	movs	r3, #1
 8013954:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8013956:	4b8b      	ldr	r3, [pc, #556]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801395a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013964:	4987      	ldr	r1, [pc, #540]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013966:	4313      	orrs	r3, r2
 8013968:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	f003 0310 	and.w	r3, r3, #16
 8013972:	2b00      	cmp	r3, #0
 8013974:	d01a      	beq.n	80139ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801397c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013980:	d10a      	bne.n	8013998 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	3324      	adds	r3, #36	; 0x24
 8013986:	2102      	movs	r1, #2
 8013988:	4618      	mov	r0, r3
 801398a:	f000 fcdb 	bl	8014344 <RCCEx_PLL3_Config>
 801398e:	4603      	mov	r3, r0
 8013990:	2b00      	cmp	r3, #0
 8013992:	d001      	beq.n	8013998 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8013994:	2301      	movs	r3, #1
 8013996:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013998:	4b7a      	ldr	r3, [pc, #488]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801399c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80139a6:	4977      	ldr	r1, [pc, #476]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80139a8:	4313      	orrs	r3, r2
 80139aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d034      	beq.n	8013a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80139be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80139c2:	d01d      	beq.n	8013a00 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80139c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80139c8:	d817      	bhi.n	80139fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d003      	beq.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80139ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139d2:	d009      	beq.n	80139e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80139d4:	e011      	b.n	80139fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	3304      	adds	r3, #4
 80139da:	2100      	movs	r1, #0
 80139dc:	4618      	mov	r0, r3
 80139de:	f000 fbff 	bl	80141e0 <RCCEx_PLL2_Config>
 80139e2:	4603      	mov	r3, r0
 80139e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80139e6:	e00c      	b.n	8013a02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	3324      	adds	r3, #36	; 0x24
 80139ec:	2102      	movs	r1, #2
 80139ee:	4618      	mov	r0, r3
 80139f0:	f000 fca8 	bl	8014344 <RCCEx_PLL3_Config>
 80139f4:	4603      	mov	r3, r0
 80139f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80139f8:	e003      	b.n	8013a02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80139fa:	2301      	movs	r3, #1
 80139fc:	75fb      	strb	r3, [r7, #23]
      break;
 80139fe:	e000      	b.n	8013a02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8013a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013a02:	7dfb      	ldrb	r3, [r7, #23]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10a      	bne.n	8013a1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013a08:	4b5e      	ldr	r3, [pc, #376]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013a16:	495b      	ldr	r1, [pc, #364]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	658b      	str	r3, [r1, #88]	; 0x58
 8013a1c:	e001      	b.n	8013a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a1e:	7dfb      	ldrb	r3, [r7, #23]
 8013a20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d033      	beq.n	8013a96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013a38:	d01c      	beq.n	8013a74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8013a3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013a3e:	d816      	bhi.n	8013a6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8013a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a44:	d003      	beq.n	8013a4e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8013a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a4a:	d007      	beq.n	8013a5c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8013a4c:	e00f      	b.n	8013a6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013a4e:	4b4d      	ldr	r3, [pc, #308]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a52:	4a4c      	ldr	r2, [pc, #304]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8013a5a:	e00c      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	3324      	adds	r3, #36	; 0x24
 8013a60:	2101      	movs	r1, #1
 8013a62:	4618      	mov	r0, r3
 8013a64:	f000 fc6e 	bl	8014344 <RCCEx_PLL3_Config>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8013a6c:	e003      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	75fb      	strb	r3, [r7, #23]
      break;
 8013a72:	e000      	b.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8013a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013a76:	7dfb      	ldrb	r3, [r7, #23]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d10a      	bne.n	8013a92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013a7c:	4b41      	ldr	r3, [pc, #260]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a8a:	493e      	ldr	r1, [pc, #248]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8013a90:	e001      	b.n	8013a96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a92:	7dfb      	ldrb	r3, [r7, #23]
 8013a94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d029      	beq.n	8013af6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d003      	beq.n	8013ab2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8013aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013aae:	d007      	beq.n	8013ac0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8013ab0:	e00f      	b.n	8013ad2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013ab2:	4b34      	ldr	r3, [pc, #208]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab6:	4a33      	ldr	r2, [pc, #204]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013abe:	e00b      	b.n	8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	3304      	adds	r3, #4
 8013ac4:	2102      	movs	r1, #2
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f000 fb8a 	bl	80141e0 <RCCEx_PLL2_Config>
 8013acc:	4603      	mov	r3, r0
 8013ace:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013ad0:	e002      	b.n	8013ad8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8013ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013ad8:	7dfb      	ldrb	r3, [r7, #23]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d109      	bne.n	8013af2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013ade:	4b29      	ldr	r3, [pc, #164]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ae2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aea:	4926      	ldr	r1, [pc, #152]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013aec:	4313      	orrs	r3, r2
 8013aee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013af0:	e001      	b.n	8013af6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013af2:	7dfb      	ldrb	r3, [r7, #23]
 8013af4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00a      	beq.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	3324      	adds	r3, #36	; 0x24
 8013b06:	2102      	movs	r1, #2
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f000 fc1b 	bl	8014344 <RCCEx_PLL3_Config>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d001      	beq.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8013b14:	2301      	movs	r3, #1
 8013b16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d033      	beq.n	8013b8c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b2c:	d017      	beq.n	8013b5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8013b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b32:	d811      	bhi.n	8013b58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8013b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b38:	d013      	beq.n	8013b62 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8013b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b3e:	d80b      	bhi.n	8013b58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d010      	beq.n	8013b66 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8013b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b48:	d106      	bne.n	8013b58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013b4a:	4b0e      	ldr	r3, [pc, #56]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b4e:	4a0d      	ldr	r2, [pc, #52]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8013b56:	e007      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8013b5c:	e004      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013b5e:	bf00      	nop
 8013b60:	e002      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013b62:	bf00      	nop
 8013b64:	e000      	b.n	8013b68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013b68:	7dfb      	ldrb	r3, [r7, #23]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d10c      	bne.n	8013b88 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013b6e:	4b05      	ldr	r3, [pc, #20]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b7a:	4902      	ldr	r1, [pc, #8]	; (8013b84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b7c:	4313      	orrs	r3, r2
 8013b7e:	654b      	str	r3, [r1, #84]	; 0x54
 8013b80:	e004      	b.n	8013b8c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8013b82:	bf00      	nop
 8013b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b88:	7dfb      	ldrb	r3, [r7, #23]
 8013b8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d008      	beq.n	8013baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013b98:	4b31      	ldr	r3, [pc, #196]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ba4:	492e      	ldr	r1, [pc, #184]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013ba6:	4313      	orrs	r3, r2
 8013ba8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d009      	beq.n	8013bca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8013bb6:	4b2a      	ldr	r3, [pc, #168]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bb8:	691b      	ldr	r3, [r3, #16]
 8013bba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013bc4:	4926      	ldr	r1, [pc, #152]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bc6:	4313      	orrs	r3, r2
 8013bc8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d008      	beq.n	8013be8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013bd6:	4b22      	ldr	r3, [pc, #136]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013be2:	491f      	ldr	r1, [pc, #124]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013be4:	4313      	orrs	r3, r2
 8013be6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00d      	beq.n	8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013bf4:	4b1a      	ldr	r3, [pc, #104]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bf6:	691b      	ldr	r3, [r3, #16]
 8013bf8:	4a19      	ldr	r2, [pc, #100]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013bfe:	6113      	str	r3, [r2, #16]
 8013c00:	4b17      	ldr	r3, [pc, #92]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013c02:	691a      	ldr	r2, [r3, #16]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013c0a:	4915      	ldr	r1, [pc, #84]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	da08      	bge.n	8013c2a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013c18:	4b11      	ldr	r3, [pc, #68]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c24:	490e      	ldr	r1, [pc, #56]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013c26:	4313      	orrs	r3, r2
 8013c28:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d009      	beq.n	8013c4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013c36:	4b0a      	ldr	r3, [pc, #40]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c44:	4906      	ldr	r1, [pc, #24]	; (8013c60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013c46:	4313      	orrs	r3, r2
 8013c48:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8013c4a:	7dbb      	ldrb	r3, [r7, #22]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d101      	bne.n	8013c54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8013c50:	2300      	movs	r3, #0
 8013c52:	e000      	b.n	8013c56 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8013c54:	2301      	movs	r3, #1
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3718      	adds	r7, #24
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	58024400 	.word	0x58024400

08013c64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013c68:	f7ff f85a 	bl	8012d20 <HAL_RCC_GetHCLKFreq>
 8013c6c:	4602      	mov	r2, r0
 8013c6e:	4b06      	ldr	r3, [pc, #24]	; (8013c88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013c70:	6a1b      	ldr	r3, [r3, #32]
 8013c72:	091b      	lsrs	r3, r3, #4
 8013c74:	f003 0307 	and.w	r3, r3, #7
 8013c78:	4904      	ldr	r1, [pc, #16]	; (8013c8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013c7a:	5ccb      	ldrb	r3, [r1, r3]
 8013c7c:	f003 031f 	and.w	r3, r3, #31
 8013c80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	bd80      	pop	{r7, pc}
 8013c88:	58024400 	.word	0x58024400
 8013c8c:	08038ac4 	.word	0x08038ac4

08013c90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b089      	sub	sp, #36	; 0x24
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013c98:	4ba1      	ldr	r3, [pc, #644]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c9c:	f003 0303 	and.w	r3, r3, #3
 8013ca0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013ca2:	4b9f      	ldr	r3, [pc, #636]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ca6:	0b1b      	lsrs	r3, r3, #12
 8013ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013cac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013cae:	4b9c      	ldr	r3, [pc, #624]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb2:	091b      	lsrs	r3, r3, #4
 8013cb4:	f003 0301 	and.w	r3, r3, #1
 8013cb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013cba:	4b99      	ldr	r3, [pc, #612]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cbe:	08db      	lsrs	r3, r3, #3
 8013cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013cc4:	693a      	ldr	r2, [r7, #16]
 8013cc6:	fb02 f303 	mul.w	r3, r2, r3
 8013cca:	ee07 3a90 	vmov	s15, r3
 8013cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f000 8111 	beq.w	8013f00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	2b02      	cmp	r3, #2
 8013ce2:	f000 8083 	beq.w	8013dec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	2b02      	cmp	r3, #2
 8013cea:	f200 80a1 	bhi.w	8013e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013cee:	69bb      	ldr	r3, [r7, #24]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d003      	beq.n	8013cfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013cf4:	69bb      	ldr	r3, [r7, #24]
 8013cf6:	2b01      	cmp	r3, #1
 8013cf8:	d056      	beq.n	8013da8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013cfa:	e099      	b.n	8013e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013cfc:	4b88      	ldr	r3, [pc, #544]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f003 0320 	and.w	r3, r3, #32
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d02d      	beq.n	8013d64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013d08:	4b85      	ldr	r3, [pc, #532]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	08db      	lsrs	r3, r3, #3
 8013d0e:	f003 0303 	and.w	r3, r3, #3
 8013d12:	4a84      	ldr	r2, [pc, #528]	; (8013f24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013d14:	fa22 f303 	lsr.w	r3, r2, r3
 8013d18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	ee07 3a90 	vmov	s15, r3
 8013d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	ee07 3a90 	vmov	s15, r3
 8013d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d32:	4b7b      	ldr	r3, [pc, #492]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d3a:	ee07 3a90 	vmov	s15, r3
 8013d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8013f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013d62:	e087      	b.n	8013e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	ee07 3a90 	vmov	s15, r3
 8013d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013f2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d76:	4b6a      	ldr	r3, [pc, #424]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d7e:	ee07 3a90 	vmov	s15, r3
 8013d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8013f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013da2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013da6:	e065      	b.n	8013e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	ee07 3a90 	vmov	s15, r3
 8013dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013db2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dba:	4b59      	ldr	r3, [pc, #356]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dc2:	ee07 3a90 	vmov	s15, r3
 8013dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8013f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013de6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013dea:	e043      	b.n	8013e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	ee07 3a90 	vmov	s15, r3
 8013df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013df6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dfe:	4b48      	ldr	r3, [pc, #288]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e06:	ee07 3a90 	vmov	s15, r3
 8013e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013e2e:	e021      	b.n	8013e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	ee07 3a90 	vmov	s15, r3
 8013e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e42:	4b37      	ldr	r3, [pc, #220]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e4a:	ee07 3a90 	vmov	s15, r3
 8013e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013e72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013e74:	4b2a      	ldr	r3, [pc, #168]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e78:	0a5b      	lsrs	r3, r3, #9
 8013e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e7e:	ee07 3a90 	vmov	s15, r3
 8013e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e9a:	ee17 2a90 	vmov	r2, s15
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013ea2:	4b1f      	ldr	r3, [pc, #124]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ea6:	0c1b      	lsrs	r3, r3, #16
 8013ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eac:	ee07 3a90 	vmov	s15, r3
 8013eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ec8:	ee17 2a90 	vmov	r2, s15
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013ed0:	4b13      	ldr	r3, [pc, #76]	; (8013f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed4:	0e1b      	lsrs	r3, r3, #24
 8013ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eda:	ee07 3a90 	vmov	s15, r3
 8013ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8013eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ef6:	ee17 2a90 	vmov	r2, s15
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013efe:	e008      	b.n	8013f12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2200      	movs	r2, #0
 8013f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	609a      	str	r2, [r3, #8]
}
 8013f12:	bf00      	nop
 8013f14:	3724      	adds	r7, #36	; 0x24
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop
 8013f20:	58024400 	.word	0x58024400
 8013f24:	03d09000 	.word	0x03d09000
 8013f28:	46000000 	.word	0x46000000
 8013f2c:	4c742400 	.word	0x4c742400
 8013f30:	4a742400 	.word	0x4a742400
 8013f34:	4bbebc20 	.word	0x4bbebc20

08013f38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b089      	sub	sp, #36	; 0x24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013f40:	4ba1      	ldr	r3, [pc, #644]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f44:	f003 0303 	and.w	r3, r3, #3
 8013f48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8013f4a:	4b9f      	ldr	r3, [pc, #636]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f4e:	0d1b      	lsrs	r3, r3, #20
 8013f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013f56:	4b9c      	ldr	r3, [pc, #624]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f5a:	0a1b      	lsrs	r3, r3, #8
 8013f5c:	f003 0301 	and.w	r3, r3, #1
 8013f60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013f62:	4b99      	ldr	r3, [pc, #612]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f66:	08db      	lsrs	r3, r3, #3
 8013f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f6c:	693a      	ldr	r2, [r7, #16]
 8013f6e:	fb02 f303 	mul.w	r3, r2, r3
 8013f72:	ee07 3a90 	vmov	s15, r3
 8013f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f000 8111 	beq.w	80141a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	2b02      	cmp	r3, #2
 8013f8a:	f000 8083 	beq.w	8014094 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013f8e:	69bb      	ldr	r3, [r7, #24]
 8013f90:	2b02      	cmp	r3, #2
 8013f92:	f200 80a1 	bhi.w	80140d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d003      	beq.n	8013fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013f9c:	69bb      	ldr	r3, [r7, #24]
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d056      	beq.n	8014050 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013fa2:	e099      	b.n	80140d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013fa4:	4b88      	ldr	r3, [pc, #544]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	f003 0320 	and.w	r3, r3, #32
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d02d      	beq.n	801400c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013fb0:	4b85      	ldr	r3, [pc, #532]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	08db      	lsrs	r3, r3, #3
 8013fb6:	f003 0303 	and.w	r3, r3, #3
 8013fba:	4a84      	ldr	r2, [pc, #528]	; (80141cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8013fc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	ee07 3a90 	vmov	s15, r3
 8013fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	ee07 3a90 	vmov	s15, r3
 8013fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013fda:	4b7b      	ldr	r3, [pc, #492]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fe2:	ee07 3a90 	vmov	s15, r3
 8013fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8013fee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80141d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014006:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801400a:	e087      	b.n	801411c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	ee07 3a90 	vmov	s15, r3
 8014012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014016:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80141d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801401a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801401e:	4b6a      	ldr	r3, [pc, #424]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014026:	ee07 3a90 	vmov	s15, r3
 801402a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801402e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014032:	eddf 5a67 	vldr	s11, [pc, #412]	; 80141d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801403a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801403e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014046:	ee67 7a27 	vmul.f32	s15, s14, s15
 801404a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801404e:	e065      	b.n	801411c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	ee07 3a90 	vmov	s15, r3
 8014056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801405a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80141d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801405e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014062:	4b59      	ldr	r3, [pc, #356]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801406a:	ee07 3a90 	vmov	s15, r3
 801406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014072:	ed97 6a03 	vldr	s12, [r7, #12]
 8014076:	eddf 5a56 	vldr	s11, [pc, #344]	; 80141d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801407a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801407e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801408a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801408e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8014092:	e043      	b.n	801411c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	ee07 3a90 	vmov	s15, r3
 801409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801409e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80141dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80140a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140a6:	4b48      	ldr	r3, [pc, #288]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140ae:	ee07 3a90 	vmov	s15, r3
 80140b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80140ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80141d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80140be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80140d6:	e021      	b.n	801411c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	ee07 3a90 	vmov	s15, r3
 80140de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80141d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80140e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140ea:	4b37      	ldr	r3, [pc, #220]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140f2:	ee07 3a90 	vmov	s15, r3
 80140f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80140fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80141d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801410a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801411a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801411c:	4b2a      	ldr	r3, [pc, #168]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014120:	0a5b      	lsrs	r3, r3, #9
 8014122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014126:	ee07 3a90 	vmov	s15, r3
 801412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801412e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014136:	edd7 6a07 	vldr	s13, [r7, #28]
 801413a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801413e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014142:	ee17 2a90 	vmov	r2, s15
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801414a:	4b1f      	ldr	r3, [pc, #124]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801414e:	0c1b      	lsrs	r3, r3, #16
 8014150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014154:	ee07 3a90 	vmov	s15, r3
 8014158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801415c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014160:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014164:	edd7 6a07 	vldr	s13, [r7, #28]
 8014168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801416c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014170:	ee17 2a90 	vmov	r2, s15
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8014178:	4b13      	ldr	r3, [pc, #76]	; (80141c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801417c:	0e1b      	lsrs	r3, r3, #24
 801417e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014182:	ee07 3a90 	vmov	s15, r3
 8014186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801418a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801418e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014192:	edd7 6a07 	vldr	s13, [r7, #28]
 8014196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801419a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801419e:	ee17 2a90 	vmov	r2, s15
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80141a6:	e008      	b.n	80141ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2200      	movs	r2, #0
 80141ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2200      	movs	r2, #0
 80141b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2200      	movs	r2, #0
 80141b8:	609a      	str	r2, [r3, #8]
}
 80141ba:	bf00      	nop
 80141bc:	3724      	adds	r7, #36	; 0x24
 80141be:	46bd      	mov	sp, r7
 80141c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop
 80141c8:	58024400 	.word	0x58024400
 80141cc:	03d09000 	.word	0x03d09000
 80141d0:	46000000 	.word	0x46000000
 80141d4:	4c742400 	.word	0x4c742400
 80141d8:	4a742400 	.word	0x4a742400
 80141dc:	4bbebc20 	.word	0x4bbebc20

080141e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80141ea:	2300      	movs	r3, #0
 80141ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80141ee:	4b53      	ldr	r3, [pc, #332]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80141f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141f2:	f003 0303 	and.w	r3, r3, #3
 80141f6:	2b03      	cmp	r3, #3
 80141f8:	d101      	bne.n	80141fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80141fa:	2301      	movs	r3, #1
 80141fc:	e099      	b.n	8014332 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80141fe:	4b4f      	ldr	r3, [pc, #316]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	4a4e      	ldr	r2, [pc, #312]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014204:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801420a:	f7f7 fe43 	bl	800be94 <HAL_GetTick>
 801420e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014210:	e008      	b.n	8014224 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8014212:	f7f7 fe3f 	bl	800be94 <HAL_GetTick>
 8014216:	4602      	mov	r2, r0
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	1ad3      	subs	r3, r2, r3
 801421c:	2b02      	cmp	r3, #2
 801421e:	d901      	bls.n	8014224 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014220:	2303      	movs	r3, #3
 8014222:	e086      	b.n	8014332 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014224:	4b45      	ldr	r3, [pc, #276]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801422c:	2b00      	cmp	r3, #0
 801422e:	d1f0      	bne.n	8014212 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014230:	4b42      	ldr	r3, [pc, #264]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014234:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	031b      	lsls	r3, r3, #12
 801423e:	493f      	ldr	r1, [pc, #252]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014240:	4313      	orrs	r3, r2
 8014242:	628b      	str	r3, [r1, #40]	; 0x28
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	3b01      	subs	r3, #1
 801424a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	689b      	ldr	r3, [r3, #8]
 8014252:	3b01      	subs	r3, #1
 8014254:	025b      	lsls	r3, r3, #9
 8014256:	b29b      	uxth	r3, r3
 8014258:	431a      	orrs	r2, r3
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	68db      	ldr	r3, [r3, #12]
 801425e:	3b01      	subs	r3, #1
 8014260:	041b      	lsls	r3, r3, #16
 8014262:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014266:	431a      	orrs	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	691b      	ldr	r3, [r3, #16]
 801426c:	3b01      	subs	r3, #1
 801426e:	061b      	lsls	r3, r3, #24
 8014270:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014274:	4931      	ldr	r1, [pc, #196]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014276:	4313      	orrs	r3, r2
 8014278:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801427a:	4b30      	ldr	r3, [pc, #192]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 801427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	695b      	ldr	r3, [r3, #20]
 8014286:	492d      	ldr	r1, [pc, #180]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014288:	4313      	orrs	r3, r2
 801428a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801428c:	4b2b      	ldr	r3, [pc, #172]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 801428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014290:	f023 0220 	bic.w	r2, r3, #32
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	699b      	ldr	r3, [r3, #24]
 8014298:	4928      	ldr	r1, [pc, #160]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 801429a:	4313      	orrs	r3, r2
 801429c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801429e:	4b27      	ldr	r3, [pc, #156]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a2:	4a26      	ldr	r2, [pc, #152]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142a4:	f023 0310 	bic.w	r3, r3, #16
 80142a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80142aa:	4b24      	ldr	r3, [pc, #144]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80142ae:	4b24      	ldr	r3, [pc, #144]	; (8014340 <RCCEx_PLL2_Config+0x160>)
 80142b0:	4013      	ands	r3, r2
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	69d2      	ldr	r2, [r2, #28]
 80142b6:	00d2      	lsls	r2, r2, #3
 80142b8:	4920      	ldr	r1, [pc, #128]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142ba:	4313      	orrs	r3, r2
 80142bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80142be:	4b1f      	ldr	r3, [pc, #124]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c2:	4a1e      	ldr	r2, [pc, #120]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142c4:	f043 0310 	orr.w	r3, r3, #16
 80142c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d106      	bne.n	80142de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80142d0:	4b1a      	ldr	r3, [pc, #104]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142d4:	4a19      	ldr	r2, [pc, #100]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80142dc:	e00f      	b.n	80142fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d106      	bne.n	80142f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80142e4:	4b15      	ldr	r3, [pc, #84]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142e8:	4a14      	ldr	r2, [pc, #80]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80142f0:	e005      	b.n	80142fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80142f2:	4b12      	ldr	r3, [pc, #72]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f6:	4a11      	ldr	r2, [pc, #68]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 80142f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80142fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80142fe:	4b0f      	ldr	r3, [pc, #60]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	4a0e      	ldr	r2, [pc, #56]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014304:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801430a:	f7f7 fdc3 	bl	800be94 <HAL_GetTick>
 801430e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014310:	e008      	b.n	8014324 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8014312:	f7f7 fdbf 	bl	800be94 <HAL_GetTick>
 8014316:	4602      	mov	r2, r0
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	1ad3      	subs	r3, r2, r3
 801431c:	2b02      	cmp	r3, #2
 801431e:	d901      	bls.n	8014324 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014320:	2303      	movs	r3, #3
 8014322:	e006      	b.n	8014332 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014324:	4b05      	ldr	r3, [pc, #20]	; (801433c <RCCEx_PLL2_Config+0x15c>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801432c:	2b00      	cmp	r3, #0
 801432e:	d0f0      	beq.n	8014312 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014330:	7bfb      	ldrb	r3, [r7, #15]
}
 8014332:	4618      	mov	r0, r3
 8014334:	3710      	adds	r7, #16
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	58024400 	.word	0x58024400
 8014340:	ffff0007 	.word	0xffff0007

08014344 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801434e:	2300      	movs	r3, #0
 8014350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014352:	4b53      	ldr	r3, [pc, #332]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014356:	f003 0303 	and.w	r3, r3, #3
 801435a:	2b03      	cmp	r3, #3
 801435c:	d101      	bne.n	8014362 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801435e:	2301      	movs	r3, #1
 8014360:	e099      	b.n	8014496 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014362:	4b4f      	ldr	r3, [pc, #316]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4a4e      	ldr	r2, [pc, #312]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801436c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801436e:	f7f7 fd91 	bl	800be94 <HAL_GetTick>
 8014372:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014374:	e008      	b.n	8014388 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014376:	f7f7 fd8d 	bl	800be94 <HAL_GetTick>
 801437a:	4602      	mov	r2, r0
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	1ad3      	subs	r3, r2, r3
 8014380:	2b02      	cmp	r3, #2
 8014382:	d901      	bls.n	8014388 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014384:	2303      	movs	r3, #3
 8014386:	e086      	b.n	8014496 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014388:	4b45      	ldr	r3, [pc, #276]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014390:	2b00      	cmp	r3, #0
 8014392:	d1f0      	bne.n	8014376 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014394:	4b42      	ldr	r3, [pc, #264]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014398:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	051b      	lsls	r3, r3, #20
 80143a2:	493f      	ldr	r1, [pc, #252]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 80143a4:	4313      	orrs	r3, r2
 80143a6:	628b      	str	r3, [r1, #40]	; 0x28
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	685b      	ldr	r3, [r3, #4]
 80143ac:	3b01      	subs	r3, #1
 80143ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	689b      	ldr	r3, [r3, #8]
 80143b6:	3b01      	subs	r3, #1
 80143b8:	025b      	lsls	r3, r3, #9
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	431a      	orrs	r2, r3
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	3b01      	subs	r3, #1
 80143c4:	041b      	lsls	r3, r3, #16
 80143c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80143ca:	431a      	orrs	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	3b01      	subs	r3, #1
 80143d2:	061b      	lsls	r3, r3, #24
 80143d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80143d8:	4931      	ldr	r1, [pc, #196]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 80143da:	4313      	orrs	r3, r2
 80143dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80143de:	4b30      	ldr	r3, [pc, #192]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 80143e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	695b      	ldr	r3, [r3, #20]
 80143ea:	492d      	ldr	r1, [pc, #180]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 80143ec:	4313      	orrs	r3, r2
 80143ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80143f0:	4b2b      	ldr	r3, [pc, #172]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 80143f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	699b      	ldr	r3, [r3, #24]
 80143fc:	4928      	ldr	r1, [pc, #160]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 80143fe:	4313      	orrs	r3, r2
 8014400:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014402:	4b27      	ldr	r3, [pc, #156]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014406:	4a26      	ldr	r2, [pc, #152]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801440c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801440e:	4b24      	ldr	r3, [pc, #144]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014412:	4b24      	ldr	r3, [pc, #144]	; (80144a4 <RCCEx_PLL3_Config+0x160>)
 8014414:	4013      	ands	r3, r2
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	69d2      	ldr	r2, [r2, #28]
 801441a:	00d2      	lsls	r2, r2, #3
 801441c:	4920      	ldr	r1, [pc, #128]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 801441e:	4313      	orrs	r3, r2
 8014420:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014422:	4b1f      	ldr	r3, [pc, #124]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014426:	4a1e      	ldr	r2, [pc, #120]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801442c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d106      	bne.n	8014442 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014434:	4b1a      	ldr	r3, [pc, #104]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014438:	4a19      	ldr	r2, [pc, #100]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 801443a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801443e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014440:	e00f      	b.n	8014462 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	2b01      	cmp	r3, #1
 8014446:	d106      	bne.n	8014456 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014448:	4b15      	ldr	r3, [pc, #84]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 801444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801444c:	4a14      	ldr	r2, [pc, #80]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 801444e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014454:	e005      	b.n	8014462 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014456:	4b12      	ldr	r3, [pc, #72]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801445a:	4a11      	ldr	r2, [pc, #68]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 801445c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014460:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014462:	4b0f      	ldr	r3, [pc, #60]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	4a0e      	ldr	r2, [pc, #56]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 8014468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801446c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801446e:	f7f7 fd11 	bl	800be94 <HAL_GetTick>
 8014472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014474:	e008      	b.n	8014488 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014476:	f7f7 fd0d 	bl	800be94 <HAL_GetTick>
 801447a:	4602      	mov	r2, r0
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	1ad3      	subs	r3, r2, r3
 8014480:	2b02      	cmp	r3, #2
 8014482:	d901      	bls.n	8014488 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014484:	2303      	movs	r3, #3
 8014486:	e006      	b.n	8014496 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014488:	4b05      	ldr	r3, [pc, #20]	; (80144a0 <RCCEx_PLL3_Config+0x15c>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014490:	2b00      	cmp	r3, #0
 8014492:	d0f0      	beq.n	8014476 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014494:	7bfb      	ldrb	r3, [r7, #15]
}
 8014496:	4618      	mov	r0, r3
 8014498:	3710      	adds	r7, #16
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
 801449e:	bf00      	nop
 80144a0:	58024400 	.word	0x58024400
 80144a4:	ffff0007 	.word	0xffff0007

080144a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d101      	bne.n	80144ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80144b6:	2301      	movs	r3, #1
 80144b8:	e0f1      	b.n	801469e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2200      	movs	r2, #0
 80144be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	4a78      	ldr	r2, [pc, #480]	; (80146a8 <HAL_SPI_Init+0x200>)
 80144c6:	4293      	cmp	r3, r2
 80144c8:	d00f      	beq.n	80144ea <HAL_SPI_Init+0x42>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	4a77      	ldr	r2, [pc, #476]	; (80146ac <HAL_SPI_Init+0x204>)
 80144d0:	4293      	cmp	r3, r2
 80144d2:	d00a      	beq.n	80144ea <HAL_SPI_Init+0x42>
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	4a75      	ldr	r2, [pc, #468]	; (80146b0 <HAL_SPI_Init+0x208>)
 80144da:	4293      	cmp	r3, r2
 80144dc:	d005      	beq.n	80144ea <HAL_SPI_Init+0x42>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	68db      	ldr	r3, [r3, #12]
 80144e2:	2b0f      	cmp	r3, #15
 80144e4:	d901      	bls.n	80144ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80144e6:	2301      	movs	r3, #1
 80144e8:	e0d9      	b.n	801469e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f001 f8ee 	bl	80156cc <SPI_GetPacketSize>
 80144f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	4a6c      	ldr	r2, [pc, #432]	; (80146a8 <HAL_SPI_Init+0x200>)
 80144f8:	4293      	cmp	r3, r2
 80144fa:	d00c      	beq.n	8014516 <HAL_SPI_Init+0x6e>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	4a6a      	ldr	r2, [pc, #424]	; (80146ac <HAL_SPI_Init+0x204>)
 8014502:	4293      	cmp	r3, r2
 8014504:	d007      	beq.n	8014516 <HAL_SPI_Init+0x6e>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	4a69      	ldr	r2, [pc, #420]	; (80146b0 <HAL_SPI_Init+0x208>)
 801450c:	4293      	cmp	r3, r2
 801450e:	d002      	beq.n	8014516 <HAL_SPI_Init+0x6e>
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2b08      	cmp	r3, #8
 8014514:	d811      	bhi.n	801453a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801451a:	4a63      	ldr	r2, [pc, #396]	; (80146a8 <HAL_SPI_Init+0x200>)
 801451c:	4293      	cmp	r3, r2
 801451e:	d009      	beq.n	8014534 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	4a61      	ldr	r2, [pc, #388]	; (80146ac <HAL_SPI_Init+0x204>)
 8014526:	4293      	cmp	r3, r2
 8014528:	d004      	beq.n	8014534 <HAL_SPI_Init+0x8c>
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	4a60      	ldr	r2, [pc, #384]	; (80146b0 <HAL_SPI_Init+0x208>)
 8014530:	4293      	cmp	r3, r2
 8014532:	d104      	bne.n	801453e <HAL_SPI_Init+0x96>
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2b10      	cmp	r3, #16
 8014538:	d901      	bls.n	801453e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801453a:	2301      	movs	r3, #1
 801453c:	e0af      	b.n	801469e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014544:	b2db      	uxtb	r3, r3
 8014546:	2b00      	cmp	r3, #0
 8014548:	d106      	bne.n	8014558 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2200      	movs	r2, #0
 801454e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f7f6 fc48 	bl	800ade8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2202      	movs	r2, #2
 801455c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	f022 0201 	bic.w	r2, r2, #1
 801456e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801457a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	699b      	ldr	r3, [r3, #24]
 8014580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014584:	d119      	bne.n	80145ba <HAL_SPI_Init+0x112>
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801458e:	d103      	bne.n	8014598 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014594:	2b00      	cmp	r3, #0
 8014596:	d008      	beq.n	80145aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801459c:	2b00      	cmp	r3, #0
 801459e:	d10c      	bne.n	80145ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80145a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80145a8:	d107      	bne.n	80145ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80145b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	69da      	ldr	r2, [r3, #28]
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145c2:	431a      	orrs	r2, r3
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	431a      	orrs	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145cc:	ea42 0103 	orr.w	r1, r2, r3
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	68da      	ldr	r2, [r3, #12]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	430a      	orrs	r2, r1
 80145da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e4:	431a      	orrs	r2, r3
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145ea:	431a      	orrs	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	699b      	ldr	r3, [r3, #24]
 80145f0:	431a      	orrs	r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	691b      	ldr	r3, [r3, #16]
 80145f6:	431a      	orrs	r2, r3
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	695b      	ldr	r3, [r3, #20]
 80145fc:	431a      	orrs	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6a1b      	ldr	r3, [r3, #32]
 8014602:	431a      	orrs	r2, r3
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	431a      	orrs	r2, r3
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801460e:	431a      	orrs	r2, r3
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	431a      	orrs	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801461a:	ea42 0103 	orr.w	r1, r2, r3
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	430a      	orrs	r2, r1
 8014628:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d113      	bne.n	801465a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	689b      	ldr	r3, [r3, #8]
 8014638:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014644:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	689b      	ldr	r3, [r3, #8]
 801464c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014658:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	f022 0201 	bic.w	r2, r2, #1
 8014668:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014672:	2b00      	cmp	r3, #0
 8014674:	d00a      	beq.n	801468c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	430a      	orrs	r2, r1
 801468a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2200      	movs	r2, #0
 8014690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2201      	movs	r2, #1
 8014698:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801469c:	2300      	movs	r3, #0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	40013000 	.word	0x40013000
 80146ac:	40003800 	.word	0x40003800
 80146b0:	40003c00 	.word	0x40003c00

080146b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b086      	sub	sp, #24
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	60f8      	str	r0, [r7, #12]
 80146bc:	60b9      	str	r1, [r7, #8]
 80146be:	4613      	mov	r3, r2
 80146c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80146c2:	2300      	movs	r3, #0
 80146c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80146cc:	2b01      	cmp	r3, #1
 80146ce:	d101      	bne.n	80146d4 <HAL_SPI_Transmit_DMA+0x20>
 80146d0:	2302      	movs	r3, #2
 80146d2:	e12c      	b.n	801492e <HAL_SPI_Transmit_DMA+0x27a>
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	2201      	movs	r2, #1
 80146d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d007      	beq.n	80146f8 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80146e8:	2302      	movs	r3, #2
 80146ea:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80146f4:	7dfb      	ldrb	r3, [r7, #23]
 80146f6:	e11a      	b.n	801492e <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d002      	beq.n	8014704 <HAL_SPI_Transmit_DMA+0x50>
 80146fe:	88fb      	ldrh	r3, [r7, #6]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d107      	bne.n	8014714 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8014704:	2301      	movs	r3, #1
 8014706:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2200      	movs	r2, #0
 801470c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014710:	7dfb      	ldrb	r3, [r7, #23]
 8014712:	e10c      	b.n	801492e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	2203      	movs	r2, #3
 8014718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	2200      	movs	r2, #0
 8014720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	68ba      	ldr	r2, [r7, #8]
 8014728:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	88fa      	ldrh	r2, [r7, #6]
 801472e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	88fa      	ldrh	r2, [r7, #6]
 8014736:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2200      	movs	r2, #0
 801473e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2200      	movs	r2, #0
 8014744:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2200      	movs	r2, #0
 801474a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2200      	movs	r2, #0
 8014750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2200      	movs	r2, #0
 8014758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	689b      	ldr	r3, [r3, #8]
 8014760:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014764:	d107      	bne.n	8014776 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	681a      	ldr	r2, [r3, #0]
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014774:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	68db      	ldr	r3, [r3, #12]
 801477a:	2b0f      	cmp	r3, #15
 801477c:	d905      	bls.n	801478a <HAL_SPI_Transmit_DMA+0xd6>
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014782:	699b      	ldr	r3, [r3, #24]
 8014784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014788:	d10f      	bne.n	80147aa <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801478e:	2b07      	cmp	r3, #7
 8014790:	d913      	bls.n	80147ba <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014796:	699b      	ldr	r3, [r3, #24]
 8014798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801479c:	d00d      	beq.n	80147ba <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147a2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80147a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147a8:	d007      	beq.n	80147ba <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80147aa:	2301      	movs	r3, #1
 80147ac:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2200      	movs	r2, #0
 80147b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80147b6:	7dfb      	ldrb	r3, [r7, #23]
 80147b8:	e0b9      	b.n	801492e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	2b07      	cmp	r3, #7
 80147c0:	d820      	bhi.n	8014804 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147c6:	699b      	ldr	r3, [r3, #24]
 80147c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80147cc:	d109      	bne.n	80147e2 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	3301      	adds	r3, #1
 80147d8:	105b      	asrs	r3, r3, #1
 80147da:	b29a      	uxth	r2, r3
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e6:	699b      	ldr	r3, [r3, #24]
 80147e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147ec:	d11e      	bne.n	801482c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	3303      	adds	r3, #3
 80147f8:	109b      	asrs	r3, r3, #2
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8014802:	e013      	b.n	801482c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	2b0f      	cmp	r3, #15
 801480a:	d80f      	bhi.n	801482c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014810:	699b      	ldr	r3, [r3, #24]
 8014812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014816:	d109      	bne.n	801482c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801481e:	b29b      	uxth	r3, r3
 8014820:	3301      	adds	r3, #1
 8014822:	105b      	asrs	r3, r3, #1
 8014824:	b29a      	uxth	r2, r3
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014830:	4a41      	ldr	r2, [pc, #260]	; (8014938 <HAL_SPI_Transmit_DMA+0x284>)
 8014832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014838:	4a40      	ldr	r2, [pc, #256]	; (801493c <HAL_SPI_Transmit_DMA+0x288>)
 801483a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014840:	4a3f      	ldr	r2, [pc, #252]	; (8014940 <HAL_SPI_Transmit_DMA+0x28c>)
 8014842:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014848:	2200      	movs	r2, #0
 801484a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	689a      	ldr	r2, [r3, #8]
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801485a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014864:	4619      	mov	r1, r3
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	3320      	adds	r3, #32
 801486c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014874:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014876:	f7f8 fb65 	bl	800cf44 <HAL_DMA_Start_IT>
 801487a:	4603      	mov	r3, r0
 801487c:	2b00      	cmp	r3, #0
 801487e:	d013      	beq.n	80148a8 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014886:	f043 0210 	orr.w	r2, r3, #16
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2200      	movs	r2, #0
 8014894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	2201      	movs	r2, #1
 801489c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80148a0:	2301      	movs	r3, #1
 80148a2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80148a4:	7dfb      	ldrb	r3, [r7, #23]
 80148a6:	e042      	b.n	801492e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148ac:	69db      	ldr	r3, [r3, #28]
 80148ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148b2:	d108      	bne.n	80148c6 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	6859      	ldr	r1, [r3, #4]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	4b21      	ldr	r3, [pc, #132]	; (8014944 <HAL_SPI_Transmit_DMA+0x290>)
 80148c0:	400b      	ands	r3, r1
 80148c2:	6053      	str	r3, [r2, #4]
 80148c4:	e009      	b.n	80148da <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	685a      	ldr	r2, [r3, #4]
 80148cc:	4b1d      	ldr	r3, [pc, #116]	; (8014944 <HAL_SPI_Transmit_DMA+0x290>)
 80148ce:	4013      	ands	r3, r2
 80148d0:	88f9      	ldrh	r1, [r7, #6]
 80148d2:	68fa      	ldr	r2, [r7, #12]
 80148d4:	6812      	ldr	r2, [r2, #0]
 80148d6:	430b      	orrs	r3, r1
 80148d8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	689a      	ldr	r2, [r3, #8]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80148e8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	691a      	ldr	r2, [r3, #16]
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80148f8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	f042 0201 	orr.w	r2, r2, #1
 8014908:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014912:	d107      	bne.n	8014924 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014922:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2200      	movs	r2, #0
 8014928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 801492c:	7dfb      	ldrb	r3, [r7, #23]
}
 801492e:	4618      	mov	r0, r3
 8014930:	3718      	adds	r7, #24
 8014932:	46bd      	mov	sp, r7
 8014934:	bd80      	pop	{r7, pc}
 8014936:	bf00      	nop
 8014938:	080154bf 	.word	0x080154bf
 801493c:	080153ed 	.word	0x080153ed
 8014940:	08015513 	.word	0x08015513
 8014944:	ffff0000 	.word	0xffff0000

08014948 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	60b9      	str	r1, [r7, #8]
 8014952:	4613      	mov	r3, r2
 8014954:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014956:	2300      	movs	r3, #0
 8014958:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	689b      	ldr	r3, [r3, #8]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d110      	bne.n	8014984 <HAL_SPI_Receive_DMA+0x3c>
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801496a:	d10b      	bne.n	8014984 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2204      	movs	r2, #4
 8014970:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8014974:	88fb      	ldrh	r3, [r7, #6]
 8014976:	68ba      	ldr	r2, [r7, #8]
 8014978:	68b9      	ldr	r1, [r7, #8]
 801497a:	68f8      	ldr	r0, [r7, #12]
 801497c:	f000 f940 	bl	8014c00 <HAL_SPI_TransmitReceive_DMA>
 8014980:	4603      	mov	r3, r0
 8014982:	e130      	b.n	8014be6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801498a:	2b01      	cmp	r3, #1
 801498c:	d101      	bne.n	8014992 <HAL_SPI_Receive_DMA+0x4a>
 801498e:	2302      	movs	r3, #2
 8014990:	e129      	b.n	8014be6 <HAL_SPI_Receive_DMA+0x29e>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2201      	movs	r2, #1
 8014996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	2b01      	cmp	r3, #1
 80149a4:	d007      	beq.n	80149b6 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 80149a6:	2302      	movs	r3, #2
 80149a8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	2200      	movs	r2, #0
 80149ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80149b2:	7dfb      	ldrb	r3, [r7, #23]
 80149b4:	e117      	b.n	8014be6 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d002      	beq.n	80149c2 <HAL_SPI_Receive_DMA+0x7a>
 80149bc:	88fb      	ldrh	r3, [r7, #6]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d107      	bne.n	80149d2 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 80149c2:	2301      	movs	r3, #1
 80149c4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2200      	movs	r2, #0
 80149ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80149ce:	7dfb      	ldrb	r3, [r7, #23]
 80149d0:	e109      	b.n	8014be6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2204      	movs	r2, #4
 80149d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2200      	movs	r2, #0
 80149de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	68ba      	ldr	r2, [r7, #8]
 80149e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	88fa      	ldrh	r2, [r7, #6]
 80149ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	88fa      	ldrh	r2, [r7, #6]
 80149f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	2200      	movs	r2, #0
 80149fc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	2200      	movs	r2, #0
 8014a08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	689b      	ldr	r3, [r3, #8]
 8014a18:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014a1c:	d107      	bne.n	8014a2e <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014a2c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	2b0f      	cmp	r3, #15
 8014a34:	d905      	bls.n	8014a42 <HAL_SPI_Receive_DMA+0xfa>
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a3a:	699b      	ldr	r3, [r3, #24]
 8014a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014a40:	d10f      	bne.n	8014a62 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014a46:	2b07      	cmp	r3, #7
 8014a48:	d913      	bls.n	8014a72 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a4e:	699b      	ldr	r3, [r3, #24]
 8014a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014a54:	d00d      	beq.n	8014a72 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a5a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014a60:	d007      	beq.n	8014a72 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8014a62:	2301      	movs	r3, #1
 8014a64:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014a6e:	7dfb      	ldrb	r3, [r7, #23]
 8014a70:	e0b9      	b.n	8014be6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	689a      	ldr	r2, [r3, #8]
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014a80:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	2b07      	cmp	r3, #7
 8014a88:	d820      	bhi.n	8014acc <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a8e:	699b      	ldr	r3, [r3, #24]
 8014a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014a94:	d109      	bne.n	8014aaa <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	105b      	asrs	r3, r3, #1
 8014aa2:	b29a      	uxth	r2, r3
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aae:	699b      	ldr	r3, [r3, #24]
 8014ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ab4:	d11e      	bne.n	8014af4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	3303      	adds	r3, #3
 8014ac0:	109b      	asrs	r3, r3, #2
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014aca:	e013      	b.n	8014af4 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	68db      	ldr	r3, [r3, #12]
 8014ad0:	2b0f      	cmp	r3, #15
 8014ad2:	d80f      	bhi.n	8014af4 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ad8:	699b      	ldr	r3, [r3, #24]
 8014ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ade:	d109      	bne.n	8014af4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	3301      	adds	r3, #1
 8014aea:	105b      	asrs	r3, r3, #1
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014af8:	4a3d      	ldr	r2, [pc, #244]	; (8014bf0 <HAL_SPI_Receive_DMA+0x2a8>)
 8014afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b00:	4a3c      	ldr	r2, [pc, #240]	; (8014bf4 <HAL_SPI_Receive_DMA+0x2ac>)
 8014b02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b08:	4a3b      	ldr	r2, [pc, #236]	; (8014bf8 <HAL_SPI_Receive_DMA+0x2b0>)
 8014b0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b10:	2200      	movs	r2, #0
 8014b12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	3330      	adds	r3, #48	; 0x30
 8014b1e:	4619      	mov	r1, r3
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b24:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014b2c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014b2e:	f7f8 fa09 	bl	800cf44 <HAL_DMA_Start_IT>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d013      	beq.n	8014b60 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014b3e:	f043 0210 	orr.w	r2, r3, #16
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	2201      	movs	r2, #1
 8014b54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014b5c:	7dfb      	ldrb	r3, [r7, #23]
 8014b5e:	e042      	b.n	8014be6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b64:	69db      	ldr	r3, [r3, #28]
 8014b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b6a:	d108      	bne.n	8014b7e <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	6859      	ldr	r1, [r3, #4]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	681a      	ldr	r2, [r3, #0]
 8014b76:	4b21      	ldr	r3, [pc, #132]	; (8014bfc <HAL_SPI_Receive_DMA+0x2b4>)
 8014b78:	400b      	ands	r3, r1
 8014b7a:	6053      	str	r3, [r2, #4]
 8014b7c:	e009      	b.n	8014b92 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	685a      	ldr	r2, [r3, #4]
 8014b84:	4b1d      	ldr	r3, [pc, #116]	; (8014bfc <HAL_SPI_Receive_DMA+0x2b4>)
 8014b86:	4013      	ands	r3, r2
 8014b88:	88f9      	ldrh	r1, [r7, #6]
 8014b8a:	68fa      	ldr	r2, [r7, #12]
 8014b8c:	6812      	ldr	r2, [r2, #0]
 8014b8e:	430b      	orrs	r3, r1
 8014b90:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	689a      	ldr	r2, [r3, #8]
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014ba0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	691a      	ldr	r2, [r3, #16]
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8014bb0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f042 0201 	orr.w	r2, r2, #1
 8014bc0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014bca:	d107      	bne.n	8014bdc <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	681a      	ldr	r2, [r3, #0]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014bda:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2200      	movs	r2, #0
 8014be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3718      	adds	r7, #24
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	080154db 	.word	0x080154db
 8014bf4:	08015433 	.word	0x08015433
 8014bf8:	08015513 	.word	0x08015513
 8014bfc:	ffff0000 	.word	0xffff0000

08014c00 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b086      	sub	sp, #24
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
 8014c0c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	d101      	bne.n	8014c20 <HAL_SPI_TransmitReceive_DMA+0x20>
 8014c1c:	2302      	movs	r3, #2
 8014c1e:	e1b4      	b.n	8014f8a <HAL_SPI_TransmitReceive_DMA+0x38a>
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2201      	movs	r2, #1
 8014c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014c2e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014c36:	7dbb      	ldrb	r3, [r7, #22]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d012      	beq.n	8014c62 <HAL_SPI_TransmitReceive_DMA+0x62>
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014c42:	d106      	bne.n	8014c52 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d102      	bne.n	8014c52 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014c4c:	7dbb      	ldrb	r3, [r7, #22]
 8014c4e:	2b04      	cmp	r3, #4
 8014c50:	d007      	beq.n	8014c62 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8014c52:	2302      	movs	r3, #2
 8014c54:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	2200      	movs	r2, #0
 8014c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014c5e:	7dfb      	ldrb	r3, [r7, #23]
 8014c60:	e193      	b.n	8014f8a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d005      	beq.n	8014c74 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d002      	beq.n	8014c74 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014c6e:	887b      	ldrh	r3, [r7, #2]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d107      	bne.n	8014c84 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8014c74:	2301      	movs	r3, #1
 8014c76:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014c80:	7dfb      	ldrb	r3, [r7, #23]
 8014c82:	e182      	b.n	8014f8a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	2b04      	cmp	r3, #4
 8014c8e:	d003      	beq.n	8014c98 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2205      	movs	r2, #5
 8014c94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	68ba      	ldr	r2, [r7, #8]
 8014ca4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	887a      	ldrh	r2, [r7, #2]
 8014caa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	887a      	ldrh	r2, [r7, #2]
 8014cb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	887a      	ldrh	r2, [r7, #2]
 8014cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	887a      	ldrh	r2, [r7, #2]
 8014cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	689a      	ldr	r2, [r3, #8]
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014ce6:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	68db      	ldr	r3, [r3, #12]
 8014cec:	2b0f      	cmp	r3, #15
 8014cee:	d905      	bls.n	8014cfc <HAL_SPI_TransmitReceive_DMA+0xfc>
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cf4:	699b      	ldr	r3, [r3, #24]
 8014cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014cfa:	d10f      	bne.n	8014d1c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014d00:	2b07      	cmp	r3, #7
 8014d02:	d913      	bls.n	8014d2c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d08:	699b      	ldr	r3, [r3, #24]
 8014d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d0e:	d00d      	beq.n	8014d2c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d14:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d1a:	d007      	beq.n	8014d2c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	2200      	movs	r2, #0
 8014d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014d28:	7dfb      	ldrb	r3, [r7, #23]
 8014d2a:	e12e      	b.n	8014f8a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	2b07      	cmp	r3, #7
 8014d32:	d840      	bhi.n	8014db6 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d38:	699b      	ldr	r3, [r3, #24]
 8014d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d3e:	d109      	bne.n	8014d54 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	3301      	adds	r3, #1
 8014d4a:	105b      	asrs	r3, r3, #1
 8014d4c:	b29a      	uxth	r2, r3
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d58:	699b      	ldr	r3, [r3, #24]
 8014d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d5e:	d109      	bne.n	8014d74 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014d66:	b29b      	uxth	r3, r3
 8014d68:	3303      	adds	r3, #3
 8014d6a:	109b      	asrs	r3, r3, #2
 8014d6c:	b29a      	uxth	r2, r3
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d78:	699b      	ldr	r3, [r3, #24]
 8014d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d7e:	d109      	bne.n	8014d94 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	3301      	adds	r3, #1
 8014d8a:	105b      	asrs	r3, r3, #1
 8014d8c:	b29a      	uxth	r2, r3
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d98:	699b      	ldr	r3, [r3, #24]
 8014d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d9e:	d12e      	bne.n	8014dfe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	3303      	adds	r3, #3
 8014daa:	109b      	asrs	r3, r3, #2
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014db4:	e023      	b.n	8014dfe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	2b0f      	cmp	r3, #15
 8014dbc:	d81f      	bhi.n	8014dfe <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014dc2:	699b      	ldr	r3, [r3, #24]
 8014dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014dc8:	d109      	bne.n	8014dde <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	105b      	asrs	r3, r3, #1
 8014dd6:	b29a      	uxth	r2, r3
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014de2:	699b      	ldr	r3, [r3, #24]
 8014de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014de8:	d109      	bne.n	8014dfe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	3301      	adds	r3, #1
 8014df4:	105b      	asrs	r3, r3, #1
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014e04:	b2db      	uxtb	r3, r3
 8014e06:	2b04      	cmp	r3, #4
 8014e08:	d108      	bne.n	8014e1c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e0e:	4a61      	ldr	r2, [pc, #388]	; (8014f94 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8014e10:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e16:	4a60      	ldr	r2, [pc, #384]	; (8014f98 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8014e18:	63da      	str	r2, [r3, #60]	; 0x3c
 8014e1a:	e007      	b.n	8014e2c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e20:	4a5e      	ldr	r2, [pc, #376]	; (8014f9c <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8014e22:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e28:	4a5d      	ldr	r2, [pc, #372]	; (8014fa0 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8014e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e30:	4a5c      	ldr	r2, [pc, #368]	; (8014fa4 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8014e32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e38:	2200      	movs	r2, #0
 8014e3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	3330      	adds	r3, #48	; 0x30
 8014e46:	4619      	mov	r1, r3
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e4c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014e54:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014e56:	f7f8 f875 	bl	800cf44 <HAL_DMA_Start_IT>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d013      	beq.n	8014e88 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e66:	f043 0210 	orr.w	r2, r3, #16
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2200      	movs	r2, #0
 8014e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014e80:	2301      	movs	r3, #1
 8014e82:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014e84:	7dfb      	ldrb	r3, [r7, #23]
 8014e86:	e080      	b.n	8014f8a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	689a      	ldr	r2, [r3, #8]
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014e96:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014eac:	2200      	movs	r2, #0
 8014eae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ec0:	4619      	mov	r1, r3
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	3320      	adds	r3, #32
 8014ec8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ed0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014ed2:	f7f8 f837 	bl	800cf44 <HAL_DMA_Start_IT>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d013      	beq.n	8014f04 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014ee2:	f043 0210 	orr.w	r2, r3, #16
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014efc:	2301      	movs	r3, #1
 8014efe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014f00:	7dfb      	ldrb	r3, [r7, #23]
 8014f02:	e042      	b.n	8014f8a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f08:	69db      	ldr	r3, [r3, #28]
 8014f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f0e:	d108      	bne.n	8014f22 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	6859      	ldr	r1, [r3, #4]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	681a      	ldr	r2, [r3, #0]
 8014f1a:	4b23      	ldr	r3, [pc, #140]	; (8014fa8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8014f1c:	400b      	ands	r3, r1
 8014f1e:	6053      	str	r3, [r2, #4]
 8014f20:	e009      	b.n	8014f36 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	685a      	ldr	r2, [r3, #4]
 8014f28:	4b1f      	ldr	r3, [pc, #124]	; (8014fa8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8014f2a:	4013      	ands	r3, r2
 8014f2c:	8879      	ldrh	r1, [r7, #2]
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	6812      	ldr	r2, [r2, #0]
 8014f32:	430b      	orrs	r3, r1
 8014f34:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	689a      	ldr	r2, [r3, #8]
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014f44:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	691a      	ldr	r2, [r3, #16]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8014f54:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	f042 0201 	orr.w	r2, r2, #1
 8014f64:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014f6e:	d107      	bne.n	8014f80 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	681a      	ldr	r2, [r3, #0]
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014f7e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3718      	adds	r7, #24
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	080154db 	.word	0x080154db
 8014f98:	08015433 	.word	0x08015433
 8014f9c:	080154f7 	.word	0x080154f7
 8014fa0:	08015479 	.word	0x08015479
 8014fa4:	08015513 	.word	0x08015513
 8014fa8:	ffff0000 	.word	0xffff0000

08014fac <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b08a      	sub	sp, #40	; 0x28
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	691b      	ldr	r3, [r3, #16]
 8014fba:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	695b      	ldr	r3, [r3, #20]
 8014fc2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8014fc4:	6a3a      	ldr	r2, [r7, #32]
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	4013      	ands	r3, r2
 8014fca:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014fde:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	3330      	adds	r3, #48	; 0x30
 8014fe6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d113      	bne.n	801501a <HAL_SPI_IRQHandler+0x6e>
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	f003 0320 	and.w	r3, r3, #32
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d10e      	bne.n	801501a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015002:	2b00      	cmp	r3, #0
 8015004:	d009      	beq.n	801501a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	4798      	blx	r3
    handled = 1UL;
 8015016:	2301      	movs	r3, #1
 8015018:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801501a:	69bb      	ldr	r3, [r7, #24]
 801501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015020:	2b00      	cmp	r3, #0
 8015022:	d10f      	bne.n	8015044 <HAL_SPI_IRQHandler+0x98>
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	f003 0301 	and.w	r3, r3, #1
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00a      	beq.n	8015044 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801502e:	69bb      	ldr	r3, [r7, #24]
 8015030:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015034:	2b00      	cmp	r3, #0
 8015036:	d105      	bne.n	8015044 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	4798      	blx	r3
    handled = 1UL;
 8015040:	2301      	movs	r3, #1
 8015042:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015044:	69bb      	ldr	r3, [r7, #24]
 8015046:	f003 0320 	and.w	r3, r3, #32
 801504a:	2b00      	cmp	r3, #0
 801504c:	d10f      	bne.n	801506e <HAL_SPI_IRQHandler+0xc2>
 801504e:	69bb      	ldr	r3, [r7, #24]
 8015050:	f003 0302 	and.w	r3, r3, #2
 8015054:	2b00      	cmp	r3, #0
 8015056:	d00a      	beq.n	801506e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015058:	69bb      	ldr	r3, [r7, #24]
 801505a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801505e:	2b00      	cmp	r3, #0
 8015060:	d105      	bne.n	801506e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	4798      	blx	r3
    handled = 1UL;
 801506a:	2301      	movs	r3, #1
 801506c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015070:	2b00      	cmp	r3, #0
 8015072:	f040 815a 	bne.w	801532a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015076:	69bb      	ldr	r3, [r7, #24]
 8015078:	f003 0308 	and.w	r3, r3, #8
 801507c:	2b00      	cmp	r3, #0
 801507e:	f000 808b 	beq.w	8015198 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	699a      	ldr	r2, [r3, #24]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	f042 0208 	orr.w	r2, r2, #8
 8015090:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	699a      	ldr	r2, [r3, #24]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	f042 0210 	orr.w	r2, r2, #16
 80150a0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	699a      	ldr	r2, [r3, #24]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80150b0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	691a      	ldr	r2, [r3, #16]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	f022 0208 	bic.w	r2, r2, #8
 80150c0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	689b      	ldr	r3, [r3, #8]
 80150c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d13d      	bne.n	801514c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80150d0:	e036      	b.n	8015140 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	2b0f      	cmp	r3, #15
 80150d8:	d90b      	bls.n	80150f2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80150e4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150ea:	1d1a      	adds	r2, r3, #4
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	665a      	str	r2, [r3, #100]	; 0x64
 80150f0:	e01d      	b.n	801512e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	2b07      	cmp	r3, #7
 80150f8:	d90b      	bls.n	8015112 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150fe:	68fa      	ldr	r2, [r7, #12]
 8015100:	8812      	ldrh	r2, [r2, #0]
 8015102:	b292      	uxth	r2, r2
 8015104:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801510a:	1c9a      	adds	r2, r3, #2
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	665a      	str	r2, [r3, #100]	; 0x64
 8015110:	e00d      	b.n	801512e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801511e:	7812      	ldrb	r2, [r2, #0]
 8015120:	b2d2      	uxtb	r2, r2
 8015122:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015128:	1c5a      	adds	r2, r3, #1
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015134:	b29b      	uxth	r3, r3
 8015136:	3b01      	subs	r3, #1
 8015138:	b29a      	uxth	r2, r3
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015146:	b29b      	uxth	r3, r3
 8015148:	2b00      	cmp	r3, #0
 801514a:	d1c2      	bne.n	80150d2 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	f000 fa1d 	bl	801558c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2201      	movs	r2, #1
 8015156:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015160:	2b00      	cmp	r3, #0
 8015162:	d003      	beq.n	801516c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f000 f929 	bl	80153bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801516a:	e0e3      	b.n	8015334 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801516c:	7cfb      	ldrb	r3, [r7, #19]
 801516e:	2b05      	cmp	r3, #5
 8015170:	d103      	bne.n	801517a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f000 f8fa 	bl	801536c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015178:	e0d9      	b.n	801532e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801517a:	7cfb      	ldrb	r3, [r7, #19]
 801517c:	2b04      	cmp	r3, #4
 801517e:	d103      	bne.n	8015188 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f000 f8e9 	bl	8015358 <HAL_SPI_RxCpltCallback>
    return;
 8015186:	e0d2      	b.n	801532e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015188:	7cfb      	ldrb	r3, [r7, #19]
 801518a:	2b03      	cmp	r3, #3
 801518c:	f040 80cf 	bne.w	801532e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f000 f8d7 	bl	8015344 <HAL_SPI_TxCpltCallback>
    return;
 8015196:	e0ca      	b.n	801532e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015198:	69fb      	ldr	r3, [r7, #28]
 801519a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00d      	beq.n	80151be <HAL_SPI_IRQHandler+0x212>
 80151a2:	6a3b      	ldr	r3, [r7, #32]
 80151a4:	f003 0308 	and.w	r3, r3, #8
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d008      	beq.n	80151be <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	699a      	ldr	r2, [r3, #24]
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80151ba:	619a      	str	r2, [r3, #24]

    return;
 80151bc:	e0ba      	b.n	8015334 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	f000 80b5 	beq.w	8015334 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80151ca:	69bb      	ldr	r3, [r7, #24]
 80151cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d00f      	beq.n	80151f4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151da:	f043 0204 	orr.w	r2, r3, #4
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	699a      	ldr	r2, [r3, #24]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80151f2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d00f      	beq.n	801521e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015204:	f043 0201 	orr.w	r2, r3, #1
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	699a      	ldr	r2, [r3, #24]
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801521c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801521e:	69bb      	ldr	r3, [r7, #24]
 8015220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015224:	2b00      	cmp	r3, #0
 8015226:	d00f      	beq.n	8015248 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801522e:	f043 0208 	orr.w	r2, r3, #8
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	699a      	ldr	r2, [r3, #24]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015246:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	f003 0320 	and.w	r3, r3, #32
 801524e:	2b00      	cmp	r3, #0
 8015250:	d00f      	beq.n	8015272 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015258:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	699a      	ldr	r2, [r3, #24]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	f042 0220 	orr.w	r2, r2, #32
 8015270:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015278:	2b00      	cmp	r3, #0
 801527a:	d05a      	beq.n	8015332 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	f022 0201 	bic.w	r2, r2, #1
 801528a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	6919      	ldr	r1, [r3, #16]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	4b29      	ldr	r3, [pc, #164]	; (801533c <HAL_SPI_IRQHandler+0x390>)
 8015298:	400b      	ands	r3, r1
 801529a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80152a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80152a6:	d138      	bne.n	801531a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	689a      	ldr	r2, [r3, #8]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80152b6:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d013      	beq.n	80152e8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80152c4:	4a1e      	ldr	r2, [pc, #120]	; (8015340 <HAL_SPI_IRQHandler+0x394>)
 80152c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80152cc:	4618      	mov	r0, r3
 80152ce:	f7f8 fbc1 	bl	800da54 <HAL_DMA_Abort_IT>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d007      	beq.n	80152e8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80152de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d020      	beq.n	8015332 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152f4:	4a12      	ldr	r2, [pc, #72]	; (8015340 <HAL_SPI_IRQHandler+0x394>)
 80152f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7f8 fba9 	bl	800da54 <HAL_DMA_Abort_IT>
 8015302:	4603      	mov	r3, r0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d014      	beq.n	8015332 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801530e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015318:	e00b      	b.n	8015332 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2201      	movs	r2, #1
 801531e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015322:	6878      	ldr	r0, [r7, #4]
 8015324:	f000 f84a 	bl	80153bc <HAL_SPI_ErrorCallback>
    return;
 8015328:	e003      	b.n	8015332 <HAL_SPI_IRQHandler+0x386>
    return;
 801532a:	bf00      	nop
 801532c:	e002      	b.n	8015334 <HAL_SPI_IRQHandler+0x388>
    return;
 801532e:	bf00      	nop
 8015330:	e000      	b.n	8015334 <HAL_SPI_IRQHandler+0x388>
    return;
 8015332:	bf00      	nop
  }
}
 8015334:	3728      	adds	r7, #40	; 0x28
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop
 801533c:	fffffc94 	.word	0xfffffc94
 8015340:	08015559 	.word	0x08015559

08015344 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801534c:	bf00      	nop
 801534e:	370c      	adds	r7, #12
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr

08015358 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015360:	bf00      	nop
 8015362:	370c      	adds	r7, #12
 8015364:	46bd      	mov	sp, r7
 8015366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536a:	4770      	bx	lr

0801536c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801536c:	b480      	push	{r7}
 801536e:	b083      	sub	sp, #12
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015374:	bf00      	nop
 8015376:	370c      	adds	r7, #12
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr

08015380 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015380:	b480      	push	{r7}
 8015382:	b083      	sub	sp, #12
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015388:	bf00      	nop
 801538a:	370c      	adds	r7, #12
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr

08015394 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015394:	b480      	push	{r7}
 8015396:	b083      	sub	sp, #12
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801539c:	bf00      	nop
 801539e:	370c      	adds	r7, #12
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr

080153a8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80153a8:	b480      	push	{r7}
 80153aa:	b083      	sub	sp, #12
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80153b0:	bf00      	nop
 80153b2:	370c      	adds	r7, #12
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr

080153bc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80153bc:	b480      	push	{r7}
 80153be:	b083      	sub	sp, #12
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80153c4:	bf00      	nop
 80153c6:	370c      	adds	r7, #12
 80153c8:	46bd      	mov	sp, r7
 80153ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ce:	4770      	bx	lr

080153d0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80153d0:	b480      	push	{r7}
 80153d2:	b083      	sub	sp, #12
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80153de:	b2db      	uxtb	r3, r3
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	370c      	adds	r7, #12
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr

080153ec <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153f8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015400:	b2db      	uxtb	r3, r3
 8015402:	2b07      	cmp	r3, #7
 8015404:	d011      	beq.n	801542a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801540a:	69db      	ldr	r3, [r3, #28]
 801540c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015410:	d103      	bne.n	801541a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	f7ff ff96 	bl	8015344 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015418:	e007      	b.n	801542a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	691a      	ldr	r2, [r3, #16]
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	f042 0208 	orr.w	r2, r2, #8
 8015428:	611a      	str	r2, [r3, #16]
}
 801542a:	bf00      	nop
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b084      	sub	sp, #16
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801543e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015446:	b2db      	uxtb	r3, r3
 8015448:	2b07      	cmp	r3, #7
 801544a:	d011      	beq.n	8015470 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015450:	69db      	ldr	r3, [r3, #28]
 8015452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015456:	d103      	bne.n	8015460 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8015458:	68f8      	ldr	r0, [r7, #12]
 801545a:	f7ff ff7d 	bl	8015358 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801545e:	e007      	b.n	8015470 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	691a      	ldr	r2, [r3, #16]
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	f042 0208 	orr.w	r2, r2, #8
 801546e:	611a      	str	r2, [r3, #16]
}
 8015470:	bf00      	nop
 8015472:	3710      	adds	r7, #16
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}

08015478 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015484:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801548c:	b2db      	uxtb	r3, r3
 801548e:	2b07      	cmp	r3, #7
 8015490:	d011      	beq.n	80154b6 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015496:	69db      	ldr	r3, [r3, #28]
 8015498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801549c:	d103      	bne.n	80154a6 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 801549e:	68f8      	ldr	r0, [r7, #12]
 80154a0:	f7ff ff64 	bl	801536c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80154a4:	e007      	b.n	80154b6 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	691a      	ldr	r2, [r3, #16]
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	f042 0208 	orr.w	r2, r2, #8
 80154b4:	611a      	str	r2, [r3, #16]
}
 80154b6:	bf00      	nop
 80154b8:	3710      	adds	r7, #16
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80154be:	b580      	push	{r7, lr}
 80154c0:	b084      	sub	sp, #16
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154ca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f7ff ff57 	bl	8015380 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80154d2:	bf00      	nop
 80154d4:	3710      	adds	r7, #16
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}

080154da <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80154da:	b580      	push	{r7, lr}
 80154dc:	b084      	sub	sp, #16
 80154de:	af00      	add	r7, sp, #0
 80154e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154e6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f7ff ff53 	bl	8015394 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80154ee:	bf00      	nop
 80154f0:	3710      	adds	r7, #16
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}

080154f6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b084      	sub	sp, #16
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015502:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8015504:	68f8      	ldr	r0, [r7, #12]
 8015506:	f7ff ff4f 	bl	80153a8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801550a:	bf00      	nop
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}

08015512 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8015512:	b580      	push	{r7, lr}
 8015514:	b084      	sub	sp, #16
 8015516:	af00      	add	r7, sp, #0
 8015518:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801551e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f7f9 fc15 	bl	800ed50 <HAL_DMA_GetError>
 8015526:	4603      	mov	r3, r0
 8015528:	2b02      	cmp	r3, #2
 801552a:	d011      	beq.n	8015550 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801552c:	68f8      	ldr	r0, [r7, #12]
 801552e:	f000 f82d 	bl	801558c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015538:	f043 0210 	orr.w	r2, r3, #16
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	2201      	movs	r2, #1
 8015546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801554a:	68f8      	ldr	r0, [r7, #12]
 801554c:	f7ff ff36 	bl	80153bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015550:	bf00      	nop
 8015552:	3710      	adds	r7, #16
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015564:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2200      	movs	r2, #0
 801556a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2200      	movs	r2, #0
 8015572:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2201      	movs	r2, #1
 801557a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801557e:	68f8      	ldr	r0, [r7, #12]
 8015580:	f7ff ff1c 	bl	80153bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015584:	bf00      	nop
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801558c:	b480      	push	{r7}
 801558e:	b085      	sub	sp, #20
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	695b      	ldr	r3, [r3, #20]
 801559a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	699a      	ldr	r2, [r3, #24]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	f042 0208 	orr.w	r2, r2, #8
 80155aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	699a      	ldr	r2, [r3, #24]
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	f042 0210 	orr.w	r2, r2, #16
 80155ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	681a      	ldr	r2, [r3, #0]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f022 0201 	bic.w	r2, r2, #1
 80155ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	6919      	ldr	r1, [r3, #16]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	681a      	ldr	r2, [r3, #0]
 80155d6:	4b3c      	ldr	r3, [pc, #240]	; (80156c8 <SPI_CloseTransfer+0x13c>)
 80155d8:	400b      	ands	r3, r1
 80155da:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	689a      	ldr	r2, [r3, #8]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80155ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	2b04      	cmp	r3, #4
 80155f6:	d014      	beq.n	8015622 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	f003 0320 	and.w	r3, r3, #32
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d00f      	beq.n	8015622 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015608:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	699a      	ldr	r2, [r3, #24]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	f042 0220 	orr.w	r2, r2, #32
 8015620:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015628:	b2db      	uxtb	r3, r3
 801562a:	2b03      	cmp	r3, #3
 801562c:	d014      	beq.n	8015658 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015634:	2b00      	cmp	r3, #0
 8015636:	d00f      	beq.n	8015658 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801563e:	f043 0204 	orr.w	r2, r3, #4
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	699a      	ldr	r2, [r3, #24]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015656:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801565e:	2b00      	cmp	r3, #0
 8015660:	d00f      	beq.n	8015682 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015668:	f043 0201 	orr.w	r2, r3, #1
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	699a      	ldr	r2, [r3, #24]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015680:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015688:	2b00      	cmp	r3, #0
 801568a:	d00f      	beq.n	80156ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015692:	f043 0208 	orr.w	r2, r3, #8
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	699a      	ldr	r2, [r3, #24]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80156aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2200      	movs	r2, #0
 80156b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2200      	movs	r2, #0
 80156b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80156bc:	bf00      	nop
 80156be:	3714      	adds	r7, #20
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr
 80156c8:	fffffc90 	.word	0xfffffc90

080156cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80156cc:	b480      	push	{r7}
 80156ce:	b085      	sub	sp, #20
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156d8:	095b      	lsrs	r3, r3, #5
 80156da:	3301      	adds	r3, #1
 80156dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	68db      	ldr	r3, [r3, #12]
 80156e2:	3301      	adds	r3, #1
 80156e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	3307      	adds	r3, #7
 80156ea:	08db      	lsrs	r3, r3, #3
 80156ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	68fa      	ldr	r2, [r7, #12]
 80156f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3714      	adds	r7, #20
 80156fa:	46bd      	mov	sp, r7
 80156fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015700:	4770      	bx	lr

08015702 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015702:	b580      	push	{r7, lr}
 8015704:	b082      	sub	sp, #8
 8015706:	af00      	add	r7, sp, #0
 8015708:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d101      	bne.n	8015714 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015710:	2301      	movs	r3, #1
 8015712:	e049      	b.n	80157a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801571a:	b2db      	uxtb	r3, r3
 801571c:	2b00      	cmp	r3, #0
 801571e:	d106      	bne.n	801572e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2200      	movs	r2, #0
 8015724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f7f5 ff5d 	bl	800b5e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2202      	movs	r2, #2
 8015732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	3304      	adds	r3, #4
 801573e:	4619      	mov	r1, r3
 8015740:	4610      	mov	r0, r2
 8015742:	f000 faed 	bl	8015d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2201      	movs	r2, #1
 801574a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2201      	movs	r2, #1
 8015752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2201      	movs	r2, #1
 801575a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2201      	movs	r2, #1
 8015762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2201      	movs	r2, #1
 801576a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2201      	movs	r2, #1
 8015772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2201      	movs	r2, #1
 801577a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2201      	movs	r2, #1
 8015782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2201      	movs	r2, #1
 801578a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2201      	movs	r2, #1
 8015792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2201      	movs	r2, #1
 801579a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2201      	movs	r2, #1
 80157a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80157a6:	2300      	movs	r3, #0
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}

080157b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80157b0:	b480      	push	{r7}
 80157b2:	b085      	sub	sp, #20
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	2b01      	cmp	r3, #1
 80157c2:	d001      	beq.n	80157c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80157c4:	2301      	movs	r3, #1
 80157c6:	e054      	b.n	8015872 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2202      	movs	r2, #2
 80157cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	68da      	ldr	r2, [r3, #12]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	f042 0201 	orr.w	r2, r2, #1
 80157de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	4a26      	ldr	r2, [pc, #152]	; (8015880 <HAL_TIM_Base_Start_IT+0xd0>)
 80157e6:	4293      	cmp	r3, r2
 80157e8:	d022      	beq.n	8015830 <HAL_TIM_Base_Start_IT+0x80>
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80157f2:	d01d      	beq.n	8015830 <HAL_TIM_Base_Start_IT+0x80>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	4a22      	ldr	r2, [pc, #136]	; (8015884 <HAL_TIM_Base_Start_IT+0xd4>)
 80157fa:	4293      	cmp	r3, r2
 80157fc:	d018      	beq.n	8015830 <HAL_TIM_Base_Start_IT+0x80>
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	4a21      	ldr	r2, [pc, #132]	; (8015888 <HAL_TIM_Base_Start_IT+0xd8>)
 8015804:	4293      	cmp	r3, r2
 8015806:	d013      	beq.n	8015830 <HAL_TIM_Base_Start_IT+0x80>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	4a1f      	ldr	r2, [pc, #124]	; (801588c <HAL_TIM_Base_Start_IT+0xdc>)
 801580e:	4293      	cmp	r3, r2
 8015810:	d00e      	beq.n	8015830 <HAL_TIM_Base_Start_IT+0x80>
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	4a1e      	ldr	r2, [pc, #120]	; (8015890 <HAL_TIM_Base_Start_IT+0xe0>)
 8015818:	4293      	cmp	r3, r2
 801581a:	d009      	beq.n	8015830 <HAL_TIM_Base_Start_IT+0x80>
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	4a1c      	ldr	r2, [pc, #112]	; (8015894 <HAL_TIM_Base_Start_IT+0xe4>)
 8015822:	4293      	cmp	r3, r2
 8015824:	d004      	beq.n	8015830 <HAL_TIM_Base_Start_IT+0x80>
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	4a1b      	ldr	r2, [pc, #108]	; (8015898 <HAL_TIM_Base_Start_IT+0xe8>)
 801582c:	4293      	cmp	r3, r2
 801582e:	d115      	bne.n	801585c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	689a      	ldr	r2, [r3, #8]
 8015836:	4b19      	ldr	r3, [pc, #100]	; (801589c <HAL_TIM_Base_Start_IT+0xec>)
 8015838:	4013      	ands	r3, r2
 801583a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2b06      	cmp	r3, #6
 8015840:	d015      	beq.n	801586e <HAL_TIM_Base_Start_IT+0xbe>
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015848:	d011      	beq.n	801586e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	681a      	ldr	r2, [r3, #0]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f042 0201 	orr.w	r2, r2, #1
 8015858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801585a:	e008      	b.n	801586e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	f042 0201 	orr.w	r2, r2, #1
 801586a:	601a      	str	r2, [r3, #0]
 801586c:	e000      	b.n	8015870 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801586e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015870:	2300      	movs	r3, #0
}
 8015872:	4618      	mov	r0, r3
 8015874:	3714      	adds	r7, #20
 8015876:	46bd      	mov	sp, r7
 8015878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587c:	4770      	bx	lr
 801587e:	bf00      	nop
 8015880:	40010000 	.word	0x40010000
 8015884:	40000400 	.word	0x40000400
 8015888:	40000800 	.word	0x40000800
 801588c:	40000c00 	.word	0x40000c00
 8015890:	40010400 	.word	0x40010400
 8015894:	40001800 	.word	0x40001800
 8015898:	40014000 	.word	0x40014000
 801589c:	00010007 	.word	0x00010007

080158a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b082      	sub	sp, #8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	691b      	ldr	r3, [r3, #16]
 80158ae:	f003 0302 	and.w	r3, r3, #2
 80158b2:	2b02      	cmp	r3, #2
 80158b4:	d122      	bne.n	80158fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	68db      	ldr	r3, [r3, #12]
 80158bc:	f003 0302 	and.w	r3, r3, #2
 80158c0:	2b02      	cmp	r3, #2
 80158c2:	d11b      	bne.n	80158fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	f06f 0202 	mvn.w	r2, #2
 80158cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	2201      	movs	r2, #1
 80158d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	699b      	ldr	r3, [r3, #24]
 80158da:	f003 0303 	and.w	r3, r3, #3
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d003      	beq.n	80158ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 f9fe 	bl	8015ce4 <HAL_TIM_IC_CaptureCallback>
 80158e8:	e005      	b.n	80158f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f000 f9f0 	bl	8015cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f000 fa01 	bl	8015cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	2200      	movs	r2, #0
 80158fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	691b      	ldr	r3, [r3, #16]
 8015902:	f003 0304 	and.w	r3, r3, #4
 8015906:	2b04      	cmp	r3, #4
 8015908:	d122      	bne.n	8015950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	68db      	ldr	r3, [r3, #12]
 8015910:	f003 0304 	and.w	r3, r3, #4
 8015914:	2b04      	cmp	r3, #4
 8015916:	d11b      	bne.n	8015950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	f06f 0204 	mvn.w	r2, #4
 8015920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2202      	movs	r2, #2
 8015926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	699b      	ldr	r3, [r3, #24]
 801592e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015932:	2b00      	cmp	r3, #0
 8015934:	d003      	beq.n	801593e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f000 f9d4 	bl	8015ce4 <HAL_TIM_IC_CaptureCallback>
 801593c:	e005      	b.n	801594a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f000 f9c6 	bl	8015cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f000 f9d7 	bl	8015cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2200      	movs	r2, #0
 801594e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	691b      	ldr	r3, [r3, #16]
 8015956:	f003 0308 	and.w	r3, r3, #8
 801595a:	2b08      	cmp	r3, #8
 801595c:	d122      	bne.n	80159a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	f003 0308 	and.w	r3, r3, #8
 8015968:	2b08      	cmp	r3, #8
 801596a:	d11b      	bne.n	80159a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	f06f 0208 	mvn.w	r2, #8
 8015974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2204      	movs	r2, #4
 801597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	69db      	ldr	r3, [r3, #28]
 8015982:	f003 0303 	and.w	r3, r3, #3
 8015986:	2b00      	cmp	r3, #0
 8015988:	d003      	beq.n	8015992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f000 f9aa 	bl	8015ce4 <HAL_TIM_IC_CaptureCallback>
 8015990:	e005      	b.n	801599e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 f99c 	bl	8015cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f000 f9ad 	bl	8015cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	2200      	movs	r2, #0
 80159a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	691b      	ldr	r3, [r3, #16]
 80159aa:	f003 0310 	and.w	r3, r3, #16
 80159ae:	2b10      	cmp	r3, #16
 80159b0:	d122      	bne.n	80159f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	68db      	ldr	r3, [r3, #12]
 80159b8:	f003 0310 	and.w	r3, r3, #16
 80159bc:	2b10      	cmp	r3, #16
 80159be:	d11b      	bne.n	80159f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	f06f 0210 	mvn.w	r2, #16
 80159c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	2208      	movs	r2, #8
 80159ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	69db      	ldr	r3, [r3, #28]
 80159d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d003      	beq.n	80159e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f000 f980 	bl	8015ce4 <HAL_TIM_IC_CaptureCallback>
 80159e4:	e005      	b.n	80159f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f000 f972 	bl	8015cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f000 f983 	bl	8015cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2200      	movs	r2, #0
 80159f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	691b      	ldr	r3, [r3, #16]
 80159fe:	f003 0301 	and.w	r3, r3, #1
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d10e      	bne.n	8015a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	68db      	ldr	r3, [r3, #12]
 8015a0c:	f003 0301 	and.w	r3, r3, #1
 8015a10:	2b01      	cmp	r3, #1
 8015a12:	d107      	bne.n	8015a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	f06f 0201 	mvn.w	r2, #1
 8015a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f7f5 f96c 	bl	800acfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	691b      	ldr	r3, [r3, #16]
 8015a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a2e:	2b80      	cmp	r3, #128	; 0x80
 8015a30:	d10e      	bne.n	8015a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a3c:	2b80      	cmp	r3, #128	; 0x80
 8015a3e:	d107      	bne.n	8015a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f000 fb38 	bl	80160c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	691b      	ldr	r3, [r3, #16]
 8015a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a5e:	d10e      	bne.n	8015a7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a6a:	2b80      	cmp	r3, #128	; 0x80
 8015a6c:	d107      	bne.n	8015a7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f000 fb2b 	bl	80160d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	691b      	ldr	r3, [r3, #16]
 8015a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a88:	2b40      	cmp	r3, #64	; 0x40
 8015a8a:	d10e      	bne.n	8015aaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	68db      	ldr	r3, [r3, #12]
 8015a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a96:	2b40      	cmp	r3, #64	; 0x40
 8015a98:	d107      	bne.n	8015aaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f000 f931 	bl	8015d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	691b      	ldr	r3, [r3, #16]
 8015ab0:	f003 0320 	and.w	r3, r3, #32
 8015ab4:	2b20      	cmp	r3, #32
 8015ab6:	d10e      	bne.n	8015ad6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	f003 0320 	and.w	r3, r3, #32
 8015ac2:	2b20      	cmp	r3, #32
 8015ac4:	d107      	bne.n	8015ad6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	f06f 0220 	mvn.w	r2, #32
 8015ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f000 faeb 	bl	80160ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015ad6:	bf00      	nop
 8015ad8:	3708      	adds	r7, #8
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}
	...

08015ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015aea:	2300      	movs	r3, #0
 8015aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015af4:	2b01      	cmp	r3, #1
 8015af6:	d101      	bne.n	8015afc <HAL_TIM_ConfigClockSource+0x1c>
 8015af8:	2302      	movs	r3, #2
 8015afa:	e0dc      	b.n	8015cb6 <HAL_TIM_ConfigClockSource+0x1d6>
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2201      	movs	r2, #1
 8015b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2202      	movs	r2, #2
 8015b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	689b      	ldr	r3, [r3, #8]
 8015b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015b14:	68ba      	ldr	r2, [r7, #8]
 8015b16:	4b6a      	ldr	r3, [pc, #424]	; (8015cc0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8015b18:	4013      	ands	r3, r2
 8015b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	68ba      	ldr	r2, [r7, #8]
 8015b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	4a64      	ldr	r2, [pc, #400]	; (8015cc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8015b32:	4293      	cmp	r3, r2
 8015b34:	f000 80a9 	beq.w	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b38:	4a62      	ldr	r2, [pc, #392]	; (8015cc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8015b3a:	4293      	cmp	r3, r2
 8015b3c:	f200 80ae 	bhi.w	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b40:	4a61      	ldr	r2, [pc, #388]	; (8015cc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8015b42:	4293      	cmp	r3, r2
 8015b44:	f000 80a1 	beq.w	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b48:	4a5f      	ldr	r2, [pc, #380]	; (8015cc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8015b4a:	4293      	cmp	r3, r2
 8015b4c:	f200 80a6 	bhi.w	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b50:	4a5e      	ldr	r2, [pc, #376]	; (8015ccc <HAL_TIM_ConfigClockSource+0x1ec>)
 8015b52:	4293      	cmp	r3, r2
 8015b54:	f000 8099 	beq.w	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b58:	4a5c      	ldr	r2, [pc, #368]	; (8015ccc <HAL_TIM_ConfigClockSource+0x1ec>)
 8015b5a:	4293      	cmp	r3, r2
 8015b5c:	f200 809e 	bhi.w	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015b64:	f000 8091 	beq.w	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015b6c:	f200 8096 	bhi.w	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b74:	f000 8089 	beq.w	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b7c:	f200 808e 	bhi.w	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015b84:	d03e      	beq.n	8015c04 <HAL_TIM_ConfigClockSource+0x124>
 8015b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015b8a:	f200 8087 	bhi.w	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b92:	f000 8086 	beq.w	8015ca2 <HAL_TIM_ConfigClockSource+0x1c2>
 8015b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b9a:	d87f      	bhi.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b9c:	2b70      	cmp	r3, #112	; 0x70
 8015b9e:	d01a      	beq.n	8015bd6 <HAL_TIM_ConfigClockSource+0xf6>
 8015ba0:	2b70      	cmp	r3, #112	; 0x70
 8015ba2:	d87b      	bhi.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015ba4:	2b60      	cmp	r3, #96	; 0x60
 8015ba6:	d050      	beq.n	8015c4a <HAL_TIM_ConfigClockSource+0x16a>
 8015ba8:	2b60      	cmp	r3, #96	; 0x60
 8015baa:	d877      	bhi.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015bac:	2b50      	cmp	r3, #80	; 0x50
 8015bae:	d03c      	beq.n	8015c2a <HAL_TIM_ConfigClockSource+0x14a>
 8015bb0:	2b50      	cmp	r3, #80	; 0x50
 8015bb2:	d873      	bhi.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015bb4:	2b40      	cmp	r3, #64	; 0x40
 8015bb6:	d058      	beq.n	8015c6a <HAL_TIM_ConfigClockSource+0x18a>
 8015bb8:	2b40      	cmp	r3, #64	; 0x40
 8015bba:	d86f      	bhi.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015bbc:	2b30      	cmp	r3, #48	; 0x30
 8015bbe:	d064      	beq.n	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015bc0:	2b30      	cmp	r3, #48	; 0x30
 8015bc2:	d86b      	bhi.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015bc4:	2b20      	cmp	r3, #32
 8015bc6:	d060      	beq.n	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015bc8:	2b20      	cmp	r3, #32
 8015bca:	d867      	bhi.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d05c      	beq.n	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015bd0:	2b10      	cmp	r3, #16
 8015bd2:	d05a      	beq.n	8015c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8015bd4:	e062      	b.n	8015c9c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	6818      	ldr	r0, [r3, #0]
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	6899      	ldr	r1, [r3, #8]
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	685a      	ldr	r2, [r3, #4]
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	68db      	ldr	r3, [r3, #12]
 8015be6:	f000 f9b3 	bl	8015f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	689b      	ldr	r3, [r3, #8]
 8015bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	68ba      	ldr	r2, [r7, #8]
 8015c00:	609a      	str	r2, [r3, #8]
      break;
 8015c02:	e04f      	b.n	8015ca4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	6818      	ldr	r0, [r3, #0]
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	6899      	ldr	r1, [r3, #8]
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	685a      	ldr	r2, [r3, #4]
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	68db      	ldr	r3, [r3, #12]
 8015c14:	f000 f99c 	bl	8015f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	689a      	ldr	r2, [r3, #8]
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015c26:	609a      	str	r2, [r3, #8]
      break;
 8015c28:	e03c      	b.n	8015ca4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	6818      	ldr	r0, [r3, #0]
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	6859      	ldr	r1, [r3, #4]
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	461a      	mov	r2, r3
 8015c38:	f000 f90c 	bl	8015e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2150      	movs	r1, #80	; 0x50
 8015c42:	4618      	mov	r0, r3
 8015c44:	f000 f966 	bl	8015f14 <TIM_ITRx_SetConfig>
      break;
 8015c48:	e02c      	b.n	8015ca4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6818      	ldr	r0, [r3, #0]
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	6859      	ldr	r1, [r3, #4]
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	461a      	mov	r2, r3
 8015c58:	f000 f92b 	bl	8015eb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	2160      	movs	r1, #96	; 0x60
 8015c62:	4618      	mov	r0, r3
 8015c64:	f000 f956 	bl	8015f14 <TIM_ITRx_SetConfig>
      break;
 8015c68:	e01c      	b.n	8015ca4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	6818      	ldr	r0, [r3, #0]
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	6859      	ldr	r1, [r3, #4]
 8015c72:	683b      	ldr	r3, [r7, #0]
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	461a      	mov	r2, r3
 8015c78:	f000 f8ec 	bl	8015e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2140      	movs	r1, #64	; 0x40
 8015c82:	4618      	mov	r0, r3
 8015c84:	f000 f946 	bl	8015f14 <TIM_ITRx_SetConfig>
      break;
 8015c88:	e00c      	b.n	8015ca4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	681a      	ldr	r2, [r3, #0]
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	4619      	mov	r1, r3
 8015c94:	4610      	mov	r0, r2
 8015c96:	f000 f93d 	bl	8015f14 <TIM_ITRx_SetConfig>
      break;
 8015c9a:	e003      	b.n	8015ca4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8015ca0:	e000      	b.n	8015ca4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8015ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2200      	movs	r2, #0
 8015cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	3710      	adds	r7, #16
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}
 8015cbe:	bf00      	nop
 8015cc0:	ffceff88 	.word	0xffceff88
 8015cc4:	00100040 	.word	0x00100040
 8015cc8:	00100030 	.word	0x00100030
 8015ccc:	00100020 	.word	0x00100020

08015cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015cd0:	b480      	push	{r7}
 8015cd2:	b083      	sub	sp, #12
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015cd8:	bf00      	nop
 8015cda:	370c      	adds	r7, #12
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce2:	4770      	bx	lr

08015ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015cec:	bf00      	nop
 8015cee:	370c      	adds	r7, #12
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf6:	4770      	bx	lr

08015cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	b083      	sub	sp, #12
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015d00:	bf00      	nop
 8015d02:	370c      	adds	r7, #12
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr

08015d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015d0c:	b480      	push	{r7}
 8015d0e:	b083      	sub	sp, #12
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015d14:	bf00      	nop
 8015d16:	370c      	adds	r7, #12
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1e:	4770      	bx	lr

08015d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015d20:	b480      	push	{r7}
 8015d22:	b085      	sub	sp, #20
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	4a40      	ldr	r2, [pc, #256]	; (8015e34 <TIM_Base_SetConfig+0x114>)
 8015d34:	4293      	cmp	r3, r2
 8015d36:	d013      	beq.n	8015d60 <TIM_Base_SetConfig+0x40>
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d3e:	d00f      	beq.n	8015d60 <TIM_Base_SetConfig+0x40>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	4a3d      	ldr	r2, [pc, #244]	; (8015e38 <TIM_Base_SetConfig+0x118>)
 8015d44:	4293      	cmp	r3, r2
 8015d46:	d00b      	beq.n	8015d60 <TIM_Base_SetConfig+0x40>
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	4a3c      	ldr	r2, [pc, #240]	; (8015e3c <TIM_Base_SetConfig+0x11c>)
 8015d4c:	4293      	cmp	r3, r2
 8015d4e:	d007      	beq.n	8015d60 <TIM_Base_SetConfig+0x40>
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	4a3b      	ldr	r2, [pc, #236]	; (8015e40 <TIM_Base_SetConfig+0x120>)
 8015d54:	4293      	cmp	r3, r2
 8015d56:	d003      	beq.n	8015d60 <TIM_Base_SetConfig+0x40>
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	4a3a      	ldr	r2, [pc, #232]	; (8015e44 <TIM_Base_SetConfig+0x124>)
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	d108      	bne.n	8015d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	68fa      	ldr	r2, [r7, #12]
 8015d6e:	4313      	orrs	r3, r2
 8015d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	4a2f      	ldr	r2, [pc, #188]	; (8015e34 <TIM_Base_SetConfig+0x114>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d01f      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d80:	d01b      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	4a2c      	ldr	r2, [pc, #176]	; (8015e38 <TIM_Base_SetConfig+0x118>)
 8015d86:	4293      	cmp	r3, r2
 8015d88:	d017      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	4a2b      	ldr	r2, [pc, #172]	; (8015e3c <TIM_Base_SetConfig+0x11c>)
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d013      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	4a2a      	ldr	r2, [pc, #168]	; (8015e40 <TIM_Base_SetConfig+0x120>)
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d00f      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4a29      	ldr	r2, [pc, #164]	; (8015e44 <TIM_Base_SetConfig+0x124>)
 8015d9e:	4293      	cmp	r3, r2
 8015da0:	d00b      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	4a28      	ldr	r2, [pc, #160]	; (8015e48 <TIM_Base_SetConfig+0x128>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d007      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	4a27      	ldr	r2, [pc, #156]	; (8015e4c <TIM_Base_SetConfig+0x12c>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d003      	beq.n	8015dba <TIM_Base_SetConfig+0x9a>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	4a26      	ldr	r2, [pc, #152]	; (8015e50 <TIM_Base_SetConfig+0x130>)
 8015db6:	4293      	cmp	r3, r2
 8015db8:	d108      	bne.n	8015dcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	68db      	ldr	r3, [r3, #12]
 8015dc6:	68fa      	ldr	r2, [r7, #12]
 8015dc8:	4313      	orrs	r3, r2
 8015dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	695b      	ldr	r3, [r3, #20]
 8015dd6:	4313      	orrs	r3, r2
 8015dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	68fa      	ldr	r2, [r7, #12]
 8015dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	689a      	ldr	r2, [r3, #8]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	4a10      	ldr	r2, [pc, #64]	; (8015e34 <TIM_Base_SetConfig+0x114>)
 8015df4:	4293      	cmp	r3, r2
 8015df6:	d00f      	beq.n	8015e18 <TIM_Base_SetConfig+0xf8>
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	4a12      	ldr	r2, [pc, #72]	; (8015e44 <TIM_Base_SetConfig+0x124>)
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	d00b      	beq.n	8015e18 <TIM_Base_SetConfig+0xf8>
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	4a11      	ldr	r2, [pc, #68]	; (8015e48 <TIM_Base_SetConfig+0x128>)
 8015e04:	4293      	cmp	r3, r2
 8015e06:	d007      	beq.n	8015e18 <TIM_Base_SetConfig+0xf8>
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	4a10      	ldr	r2, [pc, #64]	; (8015e4c <TIM_Base_SetConfig+0x12c>)
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	d003      	beq.n	8015e18 <TIM_Base_SetConfig+0xf8>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	4a0f      	ldr	r2, [pc, #60]	; (8015e50 <TIM_Base_SetConfig+0x130>)
 8015e14:	4293      	cmp	r3, r2
 8015e16:	d103      	bne.n	8015e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	691a      	ldr	r2, [r3, #16]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2201      	movs	r2, #1
 8015e24:	615a      	str	r2, [r3, #20]
}
 8015e26:	bf00      	nop
 8015e28:	3714      	adds	r7, #20
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr
 8015e32:	bf00      	nop
 8015e34:	40010000 	.word	0x40010000
 8015e38:	40000400 	.word	0x40000400
 8015e3c:	40000800 	.word	0x40000800
 8015e40:	40000c00 	.word	0x40000c00
 8015e44:	40010400 	.word	0x40010400
 8015e48:	40014000 	.word	0x40014000
 8015e4c:	40014400 	.word	0x40014400
 8015e50:	40014800 	.word	0x40014800

08015e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b087      	sub	sp, #28
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	60f8      	str	r0, [r7, #12]
 8015e5c:	60b9      	str	r1, [r7, #8]
 8015e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	6a1b      	ldr	r3, [r3, #32]
 8015e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	6a1b      	ldr	r3, [r3, #32]
 8015e6a:	f023 0201 	bic.w	r2, r3, #1
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	699b      	ldr	r3, [r3, #24]
 8015e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	011b      	lsls	r3, r3, #4
 8015e84:	693a      	ldr	r2, [r7, #16]
 8015e86:	4313      	orrs	r3, r2
 8015e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	f023 030a 	bic.w	r3, r3, #10
 8015e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015e92:	697a      	ldr	r2, [r7, #20]
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	4313      	orrs	r3, r2
 8015e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	693a      	ldr	r2, [r7, #16]
 8015e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	697a      	ldr	r2, [r7, #20]
 8015ea4:	621a      	str	r2, [r3, #32]
}
 8015ea6:	bf00      	nop
 8015ea8:	371c      	adds	r7, #28
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr

08015eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015eb2:	b480      	push	{r7}
 8015eb4:	b087      	sub	sp, #28
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	60f8      	str	r0, [r7, #12]
 8015eba:	60b9      	str	r1, [r7, #8]
 8015ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	6a1b      	ldr	r3, [r3, #32]
 8015ec2:	f023 0210 	bic.w	r2, r3, #16
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	699b      	ldr	r3, [r3, #24]
 8015ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	6a1b      	ldr	r3, [r3, #32]
 8015ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	031b      	lsls	r3, r3, #12
 8015ee2:	697a      	ldr	r2, [r7, #20]
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015eee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	011b      	lsls	r3, r3, #4
 8015ef4:	693a      	ldr	r2, [r7, #16]
 8015ef6:	4313      	orrs	r3, r2
 8015ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	697a      	ldr	r2, [r7, #20]
 8015efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	693a      	ldr	r2, [r7, #16]
 8015f04:	621a      	str	r2, [r3, #32]
}
 8015f06:	bf00      	nop
 8015f08:	371c      	adds	r7, #28
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f10:	4770      	bx	lr
	...

08015f14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015f14:	b480      	push	{r7}
 8015f16:	b085      	sub	sp, #20
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	689b      	ldr	r3, [r3, #8]
 8015f22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015f24:	68fa      	ldr	r2, [r7, #12]
 8015f26:	4b09      	ldr	r3, [pc, #36]	; (8015f4c <TIM_ITRx_SetConfig+0x38>)
 8015f28:	4013      	ands	r3, r2
 8015f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015f2c:	683a      	ldr	r2, [r7, #0]
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	4313      	orrs	r3, r2
 8015f32:	f043 0307 	orr.w	r3, r3, #7
 8015f36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	68fa      	ldr	r2, [r7, #12]
 8015f3c:	609a      	str	r2, [r3, #8]
}
 8015f3e:	bf00      	nop
 8015f40:	3714      	adds	r7, #20
 8015f42:	46bd      	mov	sp, r7
 8015f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f48:	4770      	bx	lr
 8015f4a:	bf00      	nop
 8015f4c:	ffcfff8f 	.word	0xffcfff8f

08015f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015f50:	b480      	push	{r7}
 8015f52:	b087      	sub	sp, #28
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	607a      	str	r2, [r7, #4]
 8015f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	689b      	ldr	r3, [r3, #8]
 8015f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	021a      	lsls	r2, r3, #8
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	431a      	orrs	r2, r3
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	4313      	orrs	r3, r2
 8015f78:	697a      	ldr	r2, [r7, #20]
 8015f7a:	4313      	orrs	r3, r2
 8015f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	697a      	ldr	r2, [r7, #20]
 8015f82:	609a      	str	r2, [r3, #8]
}
 8015f84:	bf00      	nop
 8015f86:	371c      	adds	r7, #28
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8e:	4770      	bx	lr

08015f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b085      	sub	sp, #20
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015fa0:	2b01      	cmp	r3, #1
 8015fa2:	d101      	bne.n	8015fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015fa4:	2302      	movs	r3, #2
 8015fa6:	e06d      	b.n	8016084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2201      	movs	r2, #1
 8015fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2202      	movs	r2, #2
 8015fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	685b      	ldr	r3, [r3, #4]
 8015fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	689b      	ldr	r3, [r3, #8]
 8015fc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	4a30      	ldr	r2, [pc, #192]	; (8016090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d004      	beq.n	8015fdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4a2f      	ldr	r2, [pc, #188]	; (8016094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015fd8:	4293      	cmp	r3, r2
 8015fda:	d108      	bne.n	8015fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015fe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	68fa      	ldr	r2, [r7, #12]
 8015fea:	4313      	orrs	r3, r2
 8015fec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015ff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	68fa      	ldr	r2, [r7, #12]
 8015ffc:	4313      	orrs	r3, r2
 8015ffe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	68fa      	ldr	r2, [r7, #12]
 8016006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	4a20      	ldr	r2, [pc, #128]	; (8016090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d022      	beq.n	8016058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801601a:	d01d      	beq.n	8016058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	4a1d      	ldr	r2, [pc, #116]	; (8016098 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8016022:	4293      	cmp	r3, r2
 8016024:	d018      	beq.n	8016058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	4a1c      	ldr	r2, [pc, #112]	; (801609c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801602c:	4293      	cmp	r3, r2
 801602e:	d013      	beq.n	8016058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	4a1a      	ldr	r2, [pc, #104]	; (80160a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8016036:	4293      	cmp	r3, r2
 8016038:	d00e      	beq.n	8016058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	4a15      	ldr	r2, [pc, #84]	; (8016094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016040:	4293      	cmp	r3, r2
 8016042:	d009      	beq.n	8016058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	4a16      	ldr	r2, [pc, #88]	; (80160a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801604a:	4293      	cmp	r3, r2
 801604c:	d004      	beq.n	8016058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	4a15      	ldr	r2, [pc, #84]	; (80160a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8016054:	4293      	cmp	r3, r2
 8016056:	d10c      	bne.n	8016072 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801605e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	689b      	ldr	r3, [r3, #8]
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	4313      	orrs	r3, r2
 8016068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	68ba      	ldr	r2, [r7, #8]
 8016070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2201      	movs	r2, #1
 8016076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2200      	movs	r2, #0
 801607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016082:	2300      	movs	r3, #0
}
 8016084:	4618      	mov	r0, r3
 8016086:	3714      	adds	r7, #20
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr
 8016090:	40010000 	.word	0x40010000
 8016094:	40010400 	.word	0x40010400
 8016098:	40000400 	.word	0x40000400
 801609c:	40000800 	.word	0x40000800
 80160a0:	40000c00 	.word	0x40000c00
 80160a4:	40001800 	.word	0x40001800
 80160a8:	40014000 	.word	0x40014000

080160ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80160ac:	b480      	push	{r7}
 80160ae:	b083      	sub	sp, #12
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80160b4:	bf00      	nop
 80160b6:	370c      	adds	r7, #12
 80160b8:	46bd      	mov	sp, r7
 80160ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160be:	4770      	bx	lr

080160c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80160c0:	b480      	push	{r7}
 80160c2:	b083      	sub	sp, #12
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80160c8:	bf00      	nop
 80160ca:	370c      	adds	r7, #12
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80160d4:	b480      	push	{r7}
 80160d6:	b083      	sub	sp, #12
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80160dc:	bf00      	nop
 80160de:	370c      	adds	r7, #12
 80160e0:	46bd      	mov	sp, r7
 80160e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e6:	4770      	bx	lr

080160e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d101      	bne.n	80160fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80160f6:	2301      	movs	r3, #1
 80160f8:	e042      	b.n	8016180 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016100:	2b00      	cmp	r3, #0
 8016102:	d106      	bne.n	8016112 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2200      	movs	r2, #0
 8016108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f7f5 fc65 	bl	800b9dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2224      	movs	r2, #36	; 0x24
 8016116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	681a      	ldr	r2, [r3, #0]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	f022 0201 	bic.w	r2, r2, #1
 8016128:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f000 fda0 	bl	8016c70 <UART_SetConfig>
 8016130:	4603      	mov	r3, r0
 8016132:	2b01      	cmp	r3, #1
 8016134:	d101      	bne.n	801613a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8016136:	2301      	movs	r3, #1
 8016138:	e022      	b.n	8016180 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801613e:	2b00      	cmp	r3, #0
 8016140:	d002      	beq.n	8016148 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f001 fafc 	bl	8017740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	685a      	ldr	r2, [r3, #4]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	689a      	ldr	r2, [r3, #8]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	681a      	ldr	r2, [r3, #0]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	f042 0201 	orr.w	r2, r2, #1
 8016176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f001 fb83 	bl	8017884 <UART_CheckIdleState>
 801617e:	4603      	mov	r3, r0
}
 8016180:	4618      	mov	r0, r3
 8016182:	3708      	adds	r7, #8
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b08a      	sub	sp, #40	; 0x28
 801618c:	af02      	add	r7, sp, #8
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	603b      	str	r3, [r7, #0]
 8016194:	4613      	mov	r3, r2
 8016196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801619e:	2b20      	cmp	r3, #32
 80161a0:	f040 8083 	bne.w	80162aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d002      	beq.n	80161b0 <HAL_UART_Transmit+0x28>
 80161aa:	88fb      	ldrh	r3, [r7, #6]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d101      	bne.n	80161b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80161b0:	2301      	movs	r3, #1
 80161b2:	e07b      	b.n	80162ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d101      	bne.n	80161c2 <HAL_UART_Transmit+0x3a>
 80161be:	2302      	movs	r3, #2
 80161c0:	e074      	b.n	80162ac <HAL_UART_Transmit+0x124>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2201      	movs	r2, #1
 80161c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2200      	movs	r2, #0
 80161ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	2221      	movs	r2, #33	; 0x21
 80161d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80161da:	f7f5 fe5b 	bl	800be94 <HAL_GetTick>
 80161de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	88fa      	ldrh	r2, [r7, #6]
 80161e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	88fa      	ldrh	r2, [r7, #6]
 80161ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	689b      	ldr	r3, [r3, #8]
 80161f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161f8:	d108      	bne.n	801620c <HAL_UART_Transmit+0x84>
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	691b      	ldr	r3, [r3, #16]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d104      	bne.n	801620c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8016202:	2300      	movs	r3, #0
 8016204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	61bb      	str	r3, [r7, #24]
 801620a:	e003      	b.n	8016214 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016210:	2300      	movs	r3, #0
 8016212:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2200      	movs	r2, #0
 8016218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801621c:	e02c      	b.n	8016278 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	9300      	str	r3, [sp, #0]
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	2200      	movs	r2, #0
 8016226:	2180      	movs	r1, #128	; 0x80
 8016228:	68f8      	ldr	r0, [r7, #12]
 801622a:	f001 fb76 	bl	801791a <UART_WaitOnFlagUntilTimeout>
 801622e:	4603      	mov	r3, r0
 8016230:	2b00      	cmp	r3, #0
 8016232:	d001      	beq.n	8016238 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8016234:	2303      	movs	r3, #3
 8016236:	e039      	b.n	80162ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8016238:	69fb      	ldr	r3, [r7, #28]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d10b      	bne.n	8016256 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801623e:	69bb      	ldr	r3, [r7, #24]
 8016240:	881b      	ldrh	r3, [r3, #0]
 8016242:	461a      	mov	r2, r3
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801624c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801624e:	69bb      	ldr	r3, [r7, #24]
 8016250:	3302      	adds	r3, #2
 8016252:	61bb      	str	r3, [r7, #24]
 8016254:	e007      	b.n	8016266 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	781a      	ldrb	r2, [r3, #0]
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8016260:	69fb      	ldr	r3, [r7, #28]
 8016262:	3301      	adds	r3, #1
 8016264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801626c:	b29b      	uxth	r3, r3
 801626e:	3b01      	subs	r3, #1
 8016270:	b29a      	uxth	r2, r3
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801627e:	b29b      	uxth	r3, r3
 8016280:	2b00      	cmp	r3, #0
 8016282:	d1cc      	bne.n	801621e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	2200      	movs	r2, #0
 801628c:	2140      	movs	r1, #64	; 0x40
 801628e:	68f8      	ldr	r0, [r7, #12]
 8016290:	f001 fb43 	bl	801791a <UART_WaitOnFlagUntilTimeout>
 8016294:	4603      	mov	r3, r0
 8016296:	2b00      	cmp	r3, #0
 8016298:	d001      	beq.n	801629e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801629a:	2303      	movs	r3, #3
 801629c:	e006      	b.n	80162ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2220      	movs	r2, #32
 80162a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80162a6:	2300      	movs	r3, #0
 80162a8:	e000      	b.n	80162ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80162aa:	2302      	movs	r3, #2
  }
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3720      	adds	r7, #32
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b08a      	sub	sp, #40	; 0x28
 80162b8:	af02      	add	r7, sp, #8
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	603b      	str	r3, [r7, #0]
 80162c0:	4613      	mov	r3, r2
 80162c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80162ca:	2b20      	cmp	r3, #32
 80162cc:	f040 80c0 	bne.w	8016450 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d002      	beq.n	80162dc <HAL_UART_Receive+0x28>
 80162d6:	88fb      	ldrh	r3, [r7, #6]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d101      	bne.n	80162e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80162dc:	2301      	movs	r3, #1
 80162de:	e0b8      	b.n	8016452 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d101      	bne.n	80162ee <HAL_UART_Receive+0x3a>
 80162ea:	2302      	movs	r3, #2
 80162ec:	e0b1      	b.n	8016452 <HAL_UART_Receive+0x19e>
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2201      	movs	r2, #1
 80162f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	2200      	movs	r2, #0
 80162fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	2222      	movs	r2, #34	; 0x22
 8016302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	2200      	movs	r2, #0
 801630a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801630c:	f7f5 fdc2 	bl	800be94 <HAL_GetTick>
 8016310:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	88fa      	ldrh	r2, [r7, #6]
 8016316:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	88fa      	ldrh	r2, [r7, #6]
 801631e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	689b      	ldr	r3, [r3, #8]
 8016326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801632a:	d10e      	bne.n	801634a <HAL_UART_Receive+0x96>
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	691b      	ldr	r3, [r3, #16]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d105      	bne.n	8016340 <HAL_UART_Receive+0x8c>
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f240 12ff 	movw	r2, #511	; 0x1ff
 801633a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801633e:	e02d      	b.n	801639c <HAL_UART_Receive+0xe8>
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	22ff      	movs	r2, #255	; 0xff
 8016344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016348:	e028      	b.n	801639c <HAL_UART_Receive+0xe8>
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	689b      	ldr	r3, [r3, #8]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d10d      	bne.n	801636e <HAL_UART_Receive+0xba>
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	691b      	ldr	r3, [r3, #16]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d104      	bne.n	8016364 <HAL_UART_Receive+0xb0>
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	22ff      	movs	r2, #255	; 0xff
 801635e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016362:	e01b      	b.n	801639c <HAL_UART_Receive+0xe8>
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	227f      	movs	r2, #127	; 0x7f
 8016368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801636c:	e016      	b.n	801639c <HAL_UART_Receive+0xe8>
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	689b      	ldr	r3, [r3, #8]
 8016372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016376:	d10d      	bne.n	8016394 <HAL_UART_Receive+0xe0>
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	691b      	ldr	r3, [r3, #16]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d104      	bne.n	801638a <HAL_UART_Receive+0xd6>
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	227f      	movs	r2, #127	; 0x7f
 8016384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016388:	e008      	b.n	801639c <HAL_UART_Receive+0xe8>
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	223f      	movs	r2, #63	; 0x3f
 801638e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016392:	e003      	b.n	801639c <HAL_UART_Receive+0xe8>
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	2200      	movs	r2, #0
 8016398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80163a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	689b      	ldr	r3, [r3, #8]
 80163a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80163ac:	d108      	bne.n	80163c0 <HAL_UART_Receive+0x10c>
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	691b      	ldr	r3, [r3, #16]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d104      	bne.n	80163c0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80163b6:	2300      	movs	r3, #0
 80163b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	61bb      	str	r3, [r7, #24]
 80163be:	e003      	b.n	80163c8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80163c4:	2300      	movs	r3, #0
 80163c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	2200      	movs	r2, #0
 80163cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80163d0:	e032      	b.n	8016438 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	9300      	str	r3, [sp, #0]
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	2200      	movs	r2, #0
 80163da:	2120      	movs	r1, #32
 80163dc:	68f8      	ldr	r0, [r7, #12]
 80163de:	f001 fa9c 	bl	801791a <UART_WaitOnFlagUntilTimeout>
 80163e2:	4603      	mov	r3, r0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80163e8:	2303      	movs	r3, #3
 80163ea:	e032      	b.n	8016452 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80163ec:	69fb      	ldr	r3, [r7, #28]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d10c      	bne.n	801640c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	8a7b      	ldrh	r3, [r7, #18]
 80163fc:	4013      	ands	r3, r2
 80163fe:	b29a      	uxth	r2, r3
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8016404:	69bb      	ldr	r3, [r7, #24]
 8016406:	3302      	adds	r3, #2
 8016408:	61bb      	str	r3, [r7, #24]
 801640a:	e00c      	b.n	8016426 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016412:	b2da      	uxtb	r2, r3
 8016414:	8a7b      	ldrh	r3, [r7, #18]
 8016416:	b2db      	uxtb	r3, r3
 8016418:	4013      	ands	r3, r2
 801641a:	b2da      	uxtb	r2, r3
 801641c:	69fb      	ldr	r3, [r7, #28]
 801641e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8016420:	69fb      	ldr	r3, [r7, #28]
 8016422:	3301      	adds	r3, #1
 8016424:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801642c:	b29b      	uxth	r3, r3
 801642e:	3b01      	subs	r3, #1
 8016430:	b29a      	uxth	r2, r3
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801643e:	b29b      	uxth	r3, r3
 8016440:	2b00      	cmp	r3, #0
 8016442:	d1c6      	bne.n	80163d2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2220      	movs	r2, #32
 8016448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801644c:	2300      	movs	r3, #0
 801644e:	e000      	b.n	8016452 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8016450:	2302      	movs	r3, #2
  }
}
 8016452:	4618      	mov	r0, r3
 8016454:	3720      	adds	r7, #32
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
	...

0801645c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b08a      	sub	sp, #40	; 0x28
 8016460:	af00      	add	r7, sp, #0
 8016462:	60f8      	str	r0, [r7, #12]
 8016464:	60b9      	str	r1, [r7, #8]
 8016466:	4613      	mov	r3, r2
 8016468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016470:	2b20      	cmp	r3, #32
 8016472:	d142      	bne.n	80164fa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d002      	beq.n	8016480 <HAL_UART_Receive_IT+0x24>
 801647a:	88fb      	ldrh	r3, [r7, #6]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d101      	bne.n	8016484 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8016480:	2301      	movs	r3, #1
 8016482:	e03b      	b.n	80164fc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801648a:	2b01      	cmp	r3, #1
 801648c:	d101      	bne.n	8016492 <HAL_UART_Receive_IT+0x36>
 801648e:	2302      	movs	r3, #2
 8016490:	e034      	b.n	80164fc <HAL_UART_Receive_IT+0xa0>
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2201      	movs	r2, #1
 8016496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	2200      	movs	r2, #0
 801649e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	4a17      	ldr	r2, [pc, #92]	; (8016504 <HAL_UART_Receive_IT+0xa8>)
 80164a6:	4293      	cmp	r3, r2
 80164a8:	d01f      	beq.n	80164ea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d018      	beq.n	80164ea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	e853 3f00 	ldrex	r3, [r3]
 80164c4:	613b      	str	r3, [r7, #16]
   return(result);
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80164cc:	627b      	str	r3, [r7, #36]	; 0x24
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	461a      	mov	r2, r3
 80164d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d6:	623b      	str	r3, [r7, #32]
 80164d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164da:	69f9      	ldr	r1, [r7, #28]
 80164dc:	6a3a      	ldr	r2, [r7, #32]
 80164de:	e841 2300 	strex	r3, r2, [r1]
 80164e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d1e6      	bne.n	80164b8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80164ea:	88fb      	ldrh	r3, [r7, #6]
 80164ec:	461a      	mov	r2, r3
 80164ee:	68b9      	ldr	r1, [r7, #8]
 80164f0:	68f8      	ldr	r0, [r7, #12]
 80164f2:	f001 fadb 	bl	8017aac <UART_Start_Receive_IT>
 80164f6:	4603      	mov	r3, r0
 80164f8:	e000      	b.n	80164fc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80164fa:	2302      	movs	r3, #2
  }
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	3728      	adds	r7, #40	; 0x28
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}
 8016504:	58000c00 	.word	0x58000c00

08016508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b0ba      	sub	sp, #232	; 0xe8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	69db      	ldr	r3, [r3, #28]
 8016516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	689b      	ldr	r3, [r3, #8]
 801652a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801652e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016532:	f640 030f 	movw	r3, #2063	; 0x80f
 8016536:	4013      	ands	r3, r2
 8016538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801653c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016540:	2b00      	cmp	r3, #0
 8016542:	d11b      	bne.n	801657c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016548:	f003 0320 	and.w	r3, r3, #32
 801654c:	2b00      	cmp	r3, #0
 801654e:	d015      	beq.n	801657c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016554:	f003 0320 	and.w	r3, r3, #32
 8016558:	2b00      	cmp	r3, #0
 801655a:	d105      	bne.n	8016568 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801655c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016564:	2b00      	cmp	r3, #0
 8016566:	d009      	beq.n	801657c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801656c:	2b00      	cmp	r3, #0
 801656e:	f000 835a 	beq.w	8016c26 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	4798      	blx	r3
      }
      return;
 801657a:	e354      	b.n	8016c26 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801657c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016580:	2b00      	cmp	r3, #0
 8016582:	f000 811f 	beq.w	80167c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8016586:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801658a:	4b8b      	ldr	r3, [pc, #556]	; (80167b8 <HAL_UART_IRQHandler+0x2b0>)
 801658c:	4013      	ands	r3, r2
 801658e:	2b00      	cmp	r3, #0
 8016590:	d106      	bne.n	80165a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8016592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016596:	4b89      	ldr	r3, [pc, #548]	; (80167bc <HAL_UART_IRQHandler+0x2b4>)
 8016598:	4013      	ands	r3, r2
 801659a:	2b00      	cmp	r3, #0
 801659c:	f000 8112 	beq.w	80167c4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80165a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165a4:	f003 0301 	and.w	r3, r3, #1
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d011      	beq.n	80165d0 <HAL_UART_IRQHandler+0xc8>
 80165ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80165b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d00b      	beq.n	80165d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	2201      	movs	r2, #1
 80165be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165c6:	f043 0201 	orr.w	r2, r3, #1
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80165d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165d4:	f003 0302 	and.w	r3, r3, #2
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d011      	beq.n	8016600 <HAL_UART_IRQHandler+0xf8>
 80165dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80165e0:	f003 0301 	and.w	r3, r3, #1
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d00b      	beq.n	8016600 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	2202      	movs	r2, #2
 80165ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165f6:	f043 0204 	orr.w	r2, r3, #4
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016604:	f003 0304 	and.w	r3, r3, #4
 8016608:	2b00      	cmp	r3, #0
 801660a:	d011      	beq.n	8016630 <HAL_UART_IRQHandler+0x128>
 801660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016610:	f003 0301 	and.w	r3, r3, #1
 8016614:	2b00      	cmp	r3, #0
 8016616:	d00b      	beq.n	8016630 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	2204      	movs	r2, #4
 801661e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016626:	f043 0202 	orr.w	r2, r3, #2
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016634:	f003 0308 	and.w	r3, r3, #8
 8016638:	2b00      	cmp	r3, #0
 801663a:	d017      	beq.n	801666c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016640:	f003 0320 	and.w	r3, r3, #32
 8016644:	2b00      	cmp	r3, #0
 8016646:	d105      	bne.n	8016654 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8016648:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801664c:	4b5a      	ldr	r3, [pc, #360]	; (80167b8 <HAL_UART_IRQHandler+0x2b0>)
 801664e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8016650:	2b00      	cmp	r3, #0
 8016652:	d00b      	beq.n	801666c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2208      	movs	r2, #8
 801665a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016662:	f043 0208 	orr.w	r2, r3, #8
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016674:	2b00      	cmp	r3, #0
 8016676:	d012      	beq.n	801669e <HAL_UART_IRQHandler+0x196>
 8016678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801667c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016680:	2b00      	cmp	r3, #0
 8016682:	d00c      	beq.n	801669e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801668c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016694:	f043 0220 	orr.w	r2, r3, #32
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	f000 82c0 	beq.w	8016c2a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80166aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166ae:	f003 0320 	and.w	r3, r3, #32
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d013      	beq.n	80166de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80166b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166ba:	f003 0320 	and.w	r3, r3, #32
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d105      	bne.n	80166ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80166c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80166c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d007      	beq.n	80166de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d003      	beq.n	80166de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80166e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	689b      	ldr	r3, [r3, #8]
 80166ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166f2:	2b40      	cmp	r3, #64	; 0x40
 80166f4:	d005      	beq.n	8016702 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80166f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80166fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d04f      	beq.n	80167a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f001 fafc 	bl	8017d00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	689b      	ldr	r3, [r3, #8]
 801670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016712:	2b40      	cmp	r3, #64	; 0x40
 8016714:	d141      	bne.n	801679a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	3308      	adds	r3, #8
 801671c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016724:	e853 3f00 	ldrex	r3, [r3]
 8016728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801672c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	3308      	adds	r3, #8
 801673e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801674a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801674e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016752:	e841 2300 	strex	r3, r2, [r1]
 8016756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801675a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801675e:	2b00      	cmp	r3, #0
 8016760:	d1d9      	bne.n	8016716 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016766:	2b00      	cmp	r3, #0
 8016768:	d013      	beq.n	8016792 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801676e:	4a14      	ldr	r2, [pc, #80]	; (80167c0 <HAL_UART_IRQHandler+0x2b8>)
 8016770:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016776:	4618      	mov	r0, r3
 8016778:	f7f7 f96c 	bl	800da54 <HAL_DMA_Abort_IT>
 801677c:	4603      	mov	r3, r0
 801677e:	2b00      	cmp	r3, #0
 8016780:	d017      	beq.n	80167b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016788:	687a      	ldr	r2, [r7, #4]
 801678a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801678c:	4610      	mov	r0, r2
 801678e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016790:	e00f      	b.n	80167b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 fa56 	bl	8016c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016798:	e00b      	b.n	80167b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f000 fa52 	bl	8016c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167a0:	e007      	b.n	80167b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	f000 fa4e 	bl	8016c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2200      	movs	r2, #0
 80167ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80167b0:	e23b      	b.n	8016c2a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167b2:	bf00      	nop
    return;
 80167b4:	e239      	b.n	8016c2a <HAL_UART_IRQHandler+0x722>
 80167b6:	bf00      	nop
 80167b8:	10000001 	.word	0x10000001
 80167bc:	04000120 	.word	0x04000120
 80167c0:	08017dcd 	.word	0x08017dcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167c8:	2b01      	cmp	r3, #1
 80167ca:	f040 81ce 	bne.w	8016b6a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80167ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167d2:	f003 0310 	and.w	r3, r3, #16
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	f000 81c7 	beq.w	8016b6a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80167dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80167e0:	f003 0310 	and.w	r3, r3, #16
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	f000 81c0 	beq.w	8016b6a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	2210      	movs	r2, #16
 80167f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	689b      	ldr	r3, [r3, #8]
 80167f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167fc:	2b40      	cmp	r3, #64	; 0x40
 80167fe:	f040 813b 	bne.w	8016a78 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4a8b      	ldr	r2, [pc, #556]	; (8016a38 <HAL_UART_IRQHandler+0x530>)
 801680a:	4293      	cmp	r3, r2
 801680c:	d059      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	4a89      	ldr	r2, [pc, #548]	; (8016a3c <HAL_UART_IRQHandler+0x534>)
 8016816:	4293      	cmp	r3, r2
 8016818:	d053      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	4a87      	ldr	r2, [pc, #540]	; (8016a40 <HAL_UART_IRQHandler+0x538>)
 8016822:	4293      	cmp	r3, r2
 8016824:	d04d      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	4a85      	ldr	r2, [pc, #532]	; (8016a44 <HAL_UART_IRQHandler+0x53c>)
 801682e:	4293      	cmp	r3, r2
 8016830:	d047      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	4a83      	ldr	r2, [pc, #524]	; (8016a48 <HAL_UART_IRQHandler+0x540>)
 801683a:	4293      	cmp	r3, r2
 801683c:	d041      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	4a81      	ldr	r2, [pc, #516]	; (8016a4c <HAL_UART_IRQHandler+0x544>)
 8016846:	4293      	cmp	r3, r2
 8016848:	d03b      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4a7f      	ldr	r2, [pc, #508]	; (8016a50 <HAL_UART_IRQHandler+0x548>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d035      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	4a7d      	ldr	r2, [pc, #500]	; (8016a54 <HAL_UART_IRQHandler+0x54c>)
 801685e:	4293      	cmp	r3, r2
 8016860:	d02f      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4a7b      	ldr	r2, [pc, #492]	; (8016a58 <HAL_UART_IRQHandler+0x550>)
 801686a:	4293      	cmp	r3, r2
 801686c:	d029      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	4a79      	ldr	r2, [pc, #484]	; (8016a5c <HAL_UART_IRQHandler+0x554>)
 8016876:	4293      	cmp	r3, r2
 8016878:	d023      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	4a77      	ldr	r2, [pc, #476]	; (8016a60 <HAL_UART_IRQHandler+0x558>)
 8016882:	4293      	cmp	r3, r2
 8016884:	d01d      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	4a75      	ldr	r2, [pc, #468]	; (8016a64 <HAL_UART_IRQHandler+0x55c>)
 801688e:	4293      	cmp	r3, r2
 8016890:	d017      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	4a73      	ldr	r2, [pc, #460]	; (8016a68 <HAL_UART_IRQHandler+0x560>)
 801689a:	4293      	cmp	r3, r2
 801689c:	d011      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	4a71      	ldr	r2, [pc, #452]	; (8016a6c <HAL_UART_IRQHandler+0x564>)
 80168a6:	4293      	cmp	r3, r2
 80168a8:	d00b      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	4a6f      	ldr	r2, [pc, #444]	; (8016a70 <HAL_UART_IRQHandler+0x568>)
 80168b2:	4293      	cmp	r3, r2
 80168b4:	d005      	beq.n	80168c2 <HAL_UART_IRQHandler+0x3ba>
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	4a6d      	ldr	r2, [pc, #436]	; (8016a74 <HAL_UART_IRQHandler+0x56c>)
 80168be:	4293      	cmp	r3, r2
 80168c0:	d105      	bne.n	80168ce <HAL_UART_IRQHandler+0x3c6>
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	e004      	b.n	80168d8 <HAL_UART_IRQHandler+0x3d0>
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	685b      	ldr	r3, [r3, #4]
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80168dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	f000 81a4 	beq.w	8016c2e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80168ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80168f0:	429a      	cmp	r2, r3
 80168f2:	f080 819c 	bcs.w	8016c2e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80168fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016904:	69db      	ldr	r3, [r3, #28]
 8016906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801690a:	f000 8086 	beq.w	8016a1a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801691a:	e853 3f00 	ldrex	r3, [r3]
 801691e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801692a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	461a      	mov	r2, r3
 8016934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801693c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016940:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016944:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016948:	e841 2300 	strex	r3, r2, [r1]
 801694c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016954:	2b00      	cmp	r3, #0
 8016956:	d1da      	bne.n	801690e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	3308      	adds	r3, #8
 801695e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016962:	e853 3f00 	ldrex	r3, [r3]
 8016966:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801696a:	f023 0301 	bic.w	r3, r3, #1
 801696e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	3308      	adds	r3, #8
 8016978:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801697c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016980:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016982:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016984:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016988:	e841 2300 	strex	r3, r2, [r1]
 801698c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801698e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016990:	2b00      	cmp	r3, #0
 8016992:	d1e1      	bne.n	8016958 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	3308      	adds	r3, #8
 801699a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801699c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801699e:	e853 3f00 	ldrex	r3, [r3]
 80169a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80169a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80169aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	3308      	adds	r3, #8
 80169b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80169b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80169ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80169be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80169c0:	e841 2300 	strex	r3, r2, [r1]
 80169c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80169c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d1e3      	bne.n	8016994 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2220      	movs	r2, #32
 80169d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2200      	movs	r2, #0
 80169d8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169e2:	e853 3f00 	ldrex	r3, [r3]
 80169e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80169e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169ea:	f023 0310 	bic.w	r3, r3, #16
 80169ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	461a      	mov	r2, r3
 80169f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80169fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80169fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016a04:	e841 2300 	strex	r3, r2, [r1]
 8016a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d1e4      	bne.n	80169da <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7f6 fcff 	bl	800d418 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	1ad3      	subs	r3, r2, r3
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 f912 	bl	8016c58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016a34:	e0fb      	b.n	8016c2e <HAL_UART_IRQHandler+0x726>
 8016a36:	bf00      	nop
 8016a38:	40020010 	.word	0x40020010
 8016a3c:	40020028 	.word	0x40020028
 8016a40:	40020040 	.word	0x40020040
 8016a44:	40020058 	.word	0x40020058
 8016a48:	40020070 	.word	0x40020070
 8016a4c:	40020088 	.word	0x40020088
 8016a50:	400200a0 	.word	0x400200a0
 8016a54:	400200b8 	.word	0x400200b8
 8016a58:	40020410 	.word	0x40020410
 8016a5c:	40020428 	.word	0x40020428
 8016a60:	40020440 	.word	0x40020440
 8016a64:	40020458 	.word	0x40020458
 8016a68:	40020470 	.word	0x40020470
 8016a6c:	40020488 	.word	0x40020488
 8016a70:	400204a0 	.word	0x400204a0
 8016a74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016a84:	b29b      	uxth	r3, r3
 8016a86:	1ad3      	subs	r3, r2, r3
 8016a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	f000 80cc 	beq.w	8016c32 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8016a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	f000 80c7 	beq.w	8016c32 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aac:	e853 3f00 	ldrex	r3, [r3]
 8016ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8016ac8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ace:	e841 2300 	strex	r3, r2, [r1]
 8016ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d1e4      	bne.n	8016aa4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	3308      	adds	r3, #8
 8016ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae4:	e853 3f00 	ldrex	r3, [r3]
 8016ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8016aea:	6a3a      	ldr	r2, [r7, #32]
 8016aec:	4b54      	ldr	r3, [pc, #336]	; (8016c40 <HAL_UART_IRQHandler+0x738>)
 8016aee:	4013      	ands	r3, r2
 8016af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	3308      	adds	r3, #8
 8016afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016afe:	633a      	str	r2, [r7, #48]	; 0x30
 8016b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b06:	e841 2300 	strex	r3, r2, [r1]
 8016b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d1e3      	bne.n	8016ada <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2220      	movs	r2, #32
 8016b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2200      	movs	r2, #0
 8016b24:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	e853 3f00 	ldrex	r3, [r3]
 8016b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	f023 0310 	bic.w	r3, r3, #16
 8016b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	461a      	mov	r2, r3
 8016b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016b48:	61fb      	str	r3, [r7, #28]
 8016b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b4c:	69b9      	ldr	r1, [r7, #24]
 8016b4e:	69fa      	ldr	r2, [r7, #28]
 8016b50:	e841 2300 	strex	r3, r2, [r1]
 8016b54:	617b      	str	r3, [r7, #20]
   return(result);
 8016b56:	697b      	ldr	r3, [r7, #20]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d1e4      	bne.n	8016b26 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016b60:	4619      	mov	r1, r3
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 f878 	bl	8016c58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016b68:	e063      	b.n	8016c32 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d00e      	beq.n	8016b94 <HAL_UART_IRQHandler+0x68c>
 8016b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d008      	beq.n	8016b94 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f001 fdbb 	bl	8018708 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016b92:	e051      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d014      	beq.n	8016bca <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8016ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d105      	bne.n	8016bb8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d008      	beq.n	8016bca <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d03a      	beq.n	8016c36 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	4798      	blx	r3
    }
    return;
 8016bc8:	e035      	b.n	8016c36 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d009      	beq.n	8016bea <HAL_UART_IRQHandler+0x6e2>
 8016bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d003      	beq.n	8016bea <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f001 f908 	bl	8017df8 <UART_EndTransmit_IT>
    return;
 8016be8:	e026      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d009      	beq.n	8016c0a <HAL_UART_IRQHandler+0x702>
 8016bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016bfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d003      	beq.n	8016c0a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f001 fd94 	bl	8018730 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016c08:	e016      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d010      	beq.n	8016c38 <HAL_UART_IRQHandler+0x730>
 8016c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	da0c      	bge.n	8016c38 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f001 fd7c 	bl	801871c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016c24:	e008      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
      return;
 8016c26:	bf00      	nop
 8016c28:	e006      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
    return;
 8016c2a:	bf00      	nop
 8016c2c:	e004      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
      return;
 8016c2e:	bf00      	nop
 8016c30:	e002      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
      return;
 8016c32:	bf00      	nop
 8016c34:	e000      	b.n	8016c38 <HAL_UART_IRQHandler+0x730>
    return;
 8016c36:	bf00      	nop
  }
}
 8016c38:	37e8      	adds	r7, #232	; 0xe8
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	effffffe 	.word	0xeffffffe

08016c44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016c44:	b480      	push	{r7}
 8016c46:	b083      	sub	sp, #12
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016c4c:	bf00      	nop
 8016c4e:	370c      	adds	r7, #12
 8016c50:	46bd      	mov	sp, r7
 8016c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c56:	4770      	bx	lr

08016c58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	460b      	mov	r3, r1
 8016c62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016c64:	bf00      	nop
 8016c66:	370c      	adds	r7, #12
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6e:	4770      	bx	lr

08016c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016c74:	b092      	sub	sp, #72	; 0x48
 8016c76:	af00      	add	r7, sp, #0
 8016c78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	689a      	ldr	r2, [r3, #8]
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	691b      	ldr	r3, [r3, #16]
 8016c88:	431a      	orrs	r2, r3
 8016c8a:	697b      	ldr	r3, [r7, #20]
 8016c8c:	695b      	ldr	r3, [r3, #20]
 8016c8e:	431a      	orrs	r2, r3
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	69db      	ldr	r3, [r3, #28]
 8016c94:	4313      	orrs	r3, r2
 8016c96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	4bbe      	ldr	r3, [pc, #760]	; (8016f98 <UART_SetConfig+0x328>)
 8016ca0:	4013      	ands	r3, r2
 8016ca2:	697a      	ldr	r2, [r7, #20]
 8016ca4:	6812      	ldr	r2, [r2, #0]
 8016ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016ca8:	430b      	orrs	r3, r1
 8016caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016cb6:	697b      	ldr	r3, [r7, #20]
 8016cb8:	68da      	ldr	r2, [r3, #12]
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	430a      	orrs	r2, r1
 8016cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	699b      	ldr	r3, [r3, #24]
 8016cc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	4ab3      	ldr	r2, [pc, #716]	; (8016f9c <UART_SetConfig+0x32c>)
 8016cce:	4293      	cmp	r3, r2
 8016cd0:	d004      	beq.n	8016cdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	6a1b      	ldr	r3, [r3, #32]
 8016cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016cd8:	4313      	orrs	r3, r2
 8016cda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	689a      	ldr	r2, [r3, #8]
 8016ce2:	4baf      	ldr	r3, [pc, #700]	; (8016fa0 <UART_SetConfig+0x330>)
 8016ce4:	4013      	ands	r3, r2
 8016ce6:	697a      	ldr	r2, [r7, #20]
 8016ce8:	6812      	ldr	r2, [r2, #0]
 8016cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016cec:	430b      	orrs	r3, r1
 8016cee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf6:	f023 010f 	bic.w	r1, r3, #15
 8016cfa:	697b      	ldr	r3, [r7, #20]
 8016cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	430a      	orrs	r2, r1
 8016d04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	4aa6      	ldr	r2, [pc, #664]	; (8016fa4 <UART_SetConfig+0x334>)
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	d177      	bne.n	8016e00 <UART_SetConfig+0x190>
 8016d10:	4ba5      	ldr	r3, [pc, #660]	; (8016fa8 <UART_SetConfig+0x338>)
 8016d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016d18:	2b28      	cmp	r3, #40	; 0x28
 8016d1a:	d86d      	bhi.n	8016df8 <UART_SetConfig+0x188>
 8016d1c:	a201      	add	r2, pc, #4	; (adr r2, 8016d24 <UART_SetConfig+0xb4>)
 8016d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d22:	bf00      	nop
 8016d24:	08016dc9 	.word	0x08016dc9
 8016d28:	08016df9 	.word	0x08016df9
 8016d2c:	08016df9 	.word	0x08016df9
 8016d30:	08016df9 	.word	0x08016df9
 8016d34:	08016df9 	.word	0x08016df9
 8016d38:	08016df9 	.word	0x08016df9
 8016d3c:	08016df9 	.word	0x08016df9
 8016d40:	08016df9 	.word	0x08016df9
 8016d44:	08016dd1 	.word	0x08016dd1
 8016d48:	08016df9 	.word	0x08016df9
 8016d4c:	08016df9 	.word	0x08016df9
 8016d50:	08016df9 	.word	0x08016df9
 8016d54:	08016df9 	.word	0x08016df9
 8016d58:	08016df9 	.word	0x08016df9
 8016d5c:	08016df9 	.word	0x08016df9
 8016d60:	08016df9 	.word	0x08016df9
 8016d64:	08016dd9 	.word	0x08016dd9
 8016d68:	08016df9 	.word	0x08016df9
 8016d6c:	08016df9 	.word	0x08016df9
 8016d70:	08016df9 	.word	0x08016df9
 8016d74:	08016df9 	.word	0x08016df9
 8016d78:	08016df9 	.word	0x08016df9
 8016d7c:	08016df9 	.word	0x08016df9
 8016d80:	08016df9 	.word	0x08016df9
 8016d84:	08016de1 	.word	0x08016de1
 8016d88:	08016df9 	.word	0x08016df9
 8016d8c:	08016df9 	.word	0x08016df9
 8016d90:	08016df9 	.word	0x08016df9
 8016d94:	08016df9 	.word	0x08016df9
 8016d98:	08016df9 	.word	0x08016df9
 8016d9c:	08016df9 	.word	0x08016df9
 8016da0:	08016df9 	.word	0x08016df9
 8016da4:	08016de9 	.word	0x08016de9
 8016da8:	08016df9 	.word	0x08016df9
 8016dac:	08016df9 	.word	0x08016df9
 8016db0:	08016df9 	.word	0x08016df9
 8016db4:	08016df9 	.word	0x08016df9
 8016db8:	08016df9 	.word	0x08016df9
 8016dbc:	08016df9 	.word	0x08016df9
 8016dc0:	08016df9 	.word	0x08016df9
 8016dc4:	08016df1 	.word	0x08016df1
 8016dc8:	2301      	movs	r3, #1
 8016dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dce:	e222      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016dd0:	2304      	movs	r3, #4
 8016dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dd6:	e21e      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016dd8:	2308      	movs	r3, #8
 8016dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dde:	e21a      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016de0:	2310      	movs	r3, #16
 8016de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016de6:	e216      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016de8:	2320      	movs	r3, #32
 8016dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dee:	e212      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016df0:	2340      	movs	r3, #64	; 0x40
 8016df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016df6:	e20e      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016df8:	2380      	movs	r3, #128	; 0x80
 8016dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dfe:	e20a      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e00:	697b      	ldr	r3, [r7, #20]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	4a69      	ldr	r2, [pc, #420]	; (8016fac <UART_SetConfig+0x33c>)
 8016e06:	4293      	cmp	r3, r2
 8016e08:	d130      	bne.n	8016e6c <UART_SetConfig+0x1fc>
 8016e0a:	4b67      	ldr	r3, [pc, #412]	; (8016fa8 <UART_SetConfig+0x338>)
 8016e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e0e:	f003 0307 	and.w	r3, r3, #7
 8016e12:	2b05      	cmp	r3, #5
 8016e14:	d826      	bhi.n	8016e64 <UART_SetConfig+0x1f4>
 8016e16:	a201      	add	r2, pc, #4	; (adr r2, 8016e1c <UART_SetConfig+0x1ac>)
 8016e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e1c:	08016e35 	.word	0x08016e35
 8016e20:	08016e3d 	.word	0x08016e3d
 8016e24:	08016e45 	.word	0x08016e45
 8016e28:	08016e4d 	.word	0x08016e4d
 8016e2c:	08016e55 	.word	0x08016e55
 8016e30:	08016e5d 	.word	0x08016e5d
 8016e34:	2300      	movs	r3, #0
 8016e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e3a:	e1ec      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e3c:	2304      	movs	r3, #4
 8016e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e42:	e1e8      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e44:	2308      	movs	r3, #8
 8016e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e4a:	e1e4      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e4c:	2310      	movs	r3, #16
 8016e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e52:	e1e0      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e54:	2320      	movs	r3, #32
 8016e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e5a:	e1dc      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e5c:	2340      	movs	r3, #64	; 0x40
 8016e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e62:	e1d8      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e64:	2380      	movs	r3, #128	; 0x80
 8016e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e6a:	e1d4      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016e6c:	697b      	ldr	r3, [r7, #20]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	4a4f      	ldr	r2, [pc, #316]	; (8016fb0 <UART_SetConfig+0x340>)
 8016e72:	4293      	cmp	r3, r2
 8016e74:	d130      	bne.n	8016ed8 <UART_SetConfig+0x268>
 8016e76:	4b4c      	ldr	r3, [pc, #304]	; (8016fa8 <UART_SetConfig+0x338>)
 8016e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e7a:	f003 0307 	and.w	r3, r3, #7
 8016e7e:	2b05      	cmp	r3, #5
 8016e80:	d826      	bhi.n	8016ed0 <UART_SetConfig+0x260>
 8016e82:	a201      	add	r2, pc, #4	; (adr r2, 8016e88 <UART_SetConfig+0x218>)
 8016e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e88:	08016ea1 	.word	0x08016ea1
 8016e8c:	08016ea9 	.word	0x08016ea9
 8016e90:	08016eb1 	.word	0x08016eb1
 8016e94:	08016eb9 	.word	0x08016eb9
 8016e98:	08016ec1 	.word	0x08016ec1
 8016e9c:	08016ec9 	.word	0x08016ec9
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ea6:	e1b6      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016ea8:	2304      	movs	r3, #4
 8016eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eae:	e1b2      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016eb0:	2308      	movs	r3, #8
 8016eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eb6:	e1ae      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016eb8:	2310      	movs	r3, #16
 8016eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ebe:	e1aa      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016ec0:	2320      	movs	r3, #32
 8016ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ec6:	e1a6      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016ec8:	2340      	movs	r3, #64	; 0x40
 8016eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ece:	e1a2      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016ed0:	2380      	movs	r3, #128	; 0x80
 8016ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ed6:	e19e      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	4a35      	ldr	r2, [pc, #212]	; (8016fb4 <UART_SetConfig+0x344>)
 8016ede:	4293      	cmp	r3, r2
 8016ee0:	d130      	bne.n	8016f44 <UART_SetConfig+0x2d4>
 8016ee2:	4b31      	ldr	r3, [pc, #196]	; (8016fa8 <UART_SetConfig+0x338>)
 8016ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ee6:	f003 0307 	and.w	r3, r3, #7
 8016eea:	2b05      	cmp	r3, #5
 8016eec:	d826      	bhi.n	8016f3c <UART_SetConfig+0x2cc>
 8016eee:	a201      	add	r2, pc, #4	; (adr r2, 8016ef4 <UART_SetConfig+0x284>)
 8016ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ef4:	08016f0d 	.word	0x08016f0d
 8016ef8:	08016f15 	.word	0x08016f15
 8016efc:	08016f1d 	.word	0x08016f1d
 8016f00:	08016f25 	.word	0x08016f25
 8016f04:	08016f2d 	.word	0x08016f2d
 8016f08:	08016f35 	.word	0x08016f35
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f12:	e180      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f14:	2304      	movs	r3, #4
 8016f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f1a:	e17c      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f1c:	2308      	movs	r3, #8
 8016f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f22:	e178      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f24:	2310      	movs	r3, #16
 8016f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f2a:	e174      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f2c:	2320      	movs	r3, #32
 8016f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f32:	e170      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f34:	2340      	movs	r3, #64	; 0x40
 8016f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f3a:	e16c      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f3c:	2380      	movs	r3, #128	; 0x80
 8016f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f42:	e168      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	4a1b      	ldr	r2, [pc, #108]	; (8016fb8 <UART_SetConfig+0x348>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	d142      	bne.n	8016fd4 <UART_SetConfig+0x364>
 8016f4e:	4b16      	ldr	r3, [pc, #88]	; (8016fa8 <UART_SetConfig+0x338>)
 8016f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f52:	f003 0307 	and.w	r3, r3, #7
 8016f56:	2b05      	cmp	r3, #5
 8016f58:	d838      	bhi.n	8016fcc <UART_SetConfig+0x35c>
 8016f5a:	a201      	add	r2, pc, #4	; (adr r2, 8016f60 <UART_SetConfig+0x2f0>)
 8016f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f60:	08016f79 	.word	0x08016f79
 8016f64:	08016f81 	.word	0x08016f81
 8016f68:	08016f89 	.word	0x08016f89
 8016f6c:	08016f91 	.word	0x08016f91
 8016f70:	08016fbd 	.word	0x08016fbd
 8016f74:	08016fc5 	.word	0x08016fc5
 8016f78:	2300      	movs	r3, #0
 8016f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f7e:	e14a      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f80:	2304      	movs	r3, #4
 8016f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f86:	e146      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f88:	2308      	movs	r3, #8
 8016f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f8e:	e142      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f90:	2310      	movs	r3, #16
 8016f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f96:	e13e      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016f98:	cfff69f3 	.word	0xcfff69f3
 8016f9c:	58000c00 	.word	0x58000c00
 8016fa0:	11fff4ff 	.word	0x11fff4ff
 8016fa4:	40011000 	.word	0x40011000
 8016fa8:	58024400 	.word	0x58024400
 8016fac:	40004400 	.word	0x40004400
 8016fb0:	40004800 	.word	0x40004800
 8016fb4:	40004c00 	.word	0x40004c00
 8016fb8:	40005000 	.word	0x40005000
 8016fbc:	2320      	movs	r3, #32
 8016fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fc2:	e128      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016fc4:	2340      	movs	r3, #64	; 0x40
 8016fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fca:	e124      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016fcc:	2380      	movs	r3, #128	; 0x80
 8016fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fd2:	e120      	b.n	8017216 <UART_SetConfig+0x5a6>
 8016fd4:	697b      	ldr	r3, [r7, #20]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	4acb      	ldr	r2, [pc, #812]	; (8017308 <UART_SetConfig+0x698>)
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	d176      	bne.n	80170cc <UART_SetConfig+0x45c>
 8016fde:	4bcb      	ldr	r3, [pc, #812]	; (801730c <UART_SetConfig+0x69c>)
 8016fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016fe6:	2b28      	cmp	r3, #40	; 0x28
 8016fe8:	d86c      	bhi.n	80170c4 <UART_SetConfig+0x454>
 8016fea:	a201      	add	r2, pc, #4	; (adr r2, 8016ff0 <UART_SetConfig+0x380>)
 8016fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ff0:	08017095 	.word	0x08017095
 8016ff4:	080170c5 	.word	0x080170c5
 8016ff8:	080170c5 	.word	0x080170c5
 8016ffc:	080170c5 	.word	0x080170c5
 8017000:	080170c5 	.word	0x080170c5
 8017004:	080170c5 	.word	0x080170c5
 8017008:	080170c5 	.word	0x080170c5
 801700c:	080170c5 	.word	0x080170c5
 8017010:	0801709d 	.word	0x0801709d
 8017014:	080170c5 	.word	0x080170c5
 8017018:	080170c5 	.word	0x080170c5
 801701c:	080170c5 	.word	0x080170c5
 8017020:	080170c5 	.word	0x080170c5
 8017024:	080170c5 	.word	0x080170c5
 8017028:	080170c5 	.word	0x080170c5
 801702c:	080170c5 	.word	0x080170c5
 8017030:	080170a5 	.word	0x080170a5
 8017034:	080170c5 	.word	0x080170c5
 8017038:	080170c5 	.word	0x080170c5
 801703c:	080170c5 	.word	0x080170c5
 8017040:	080170c5 	.word	0x080170c5
 8017044:	080170c5 	.word	0x080170c5
 8017048:	080170c5 	.word	0x080170c5
 801704c:	080170c5 	.word	0x080170c5
 8017050:	080170ad 	.word	0x080170ad
 8017054:	080170c5 	.word	0x080170c5
 8017058:	080170c5 	.word	0x080170c5
 801705c:	080170c5 	.word	0x080170c5
 8017060:	080170c5 	.word	0x080170c5
 8017064:	080170c5 	.word	0x080170c5
 8017068:	080170c5 	.word	0x080170c5
 801706c:	080170c5 	.word	0x080170c5
 8017070:	080170b5 	.word	0x080170b5
 8017074:	080170c5 	.word	0x080170c5
 8017078:	080170c5 	.word	0x080170c5
 801707c:	080170c5 	.word	0x080170c5
 8017080:	080170c5 	.word	0x080170c5
 8017084:	080170c5 	.word	0x080170c5
 8017088:	080170c5 	.word	0x080170c5
 801708c:	080170c5 	.word	0x080170c5
 8017090:	080170bd 	.word	0x080170bd
 8017094:	2301      	movs	r3, #1
 8017096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801709a:	e0bc      	b.n	8017216 <UART_SetConfig+0x5a6>
 801709c:	2304      	movs	r3, #4
 801709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170a2:	e0b8      	b.n	8017216 <UART_SetConfig+0x5a6>
 80170a4:	2308      	movs	r3, #8
 80170a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170aa:	e0b4      	b.n	8017216 <UART_SetConfig+0x5a6>
 80170ac:	2310      	movs	r3, #16
 80170ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170b2:	e0b0      	b.n	8017216 <UART_SetConfig+0x5a6>
 80170b4:	2320      	movs	r3, #32
 80170b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170ba:	e0ac      	b.n	8017216 <UART_SetConfig+0x5a6>
 80170bc:	2340      	movs	r3, #64	; 0x40
 80170be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170c2:	e0a8      	b.n	8017216 <UART_SetConfig+0x5a6>
 80170c4:	2380      	movs	r3, #128	; 0x80
 80170c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170ca:	e0a4      	b.n	8017216 <UART_SetConfig+0x5a6>
 80170cc:	697b      	ldr	r3, [r7, #20]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	4a8f      	ldr	r2, [pc, #572]	; (8017310 <UART_SetConfig+0x6a0>)
 80170d2:	4293      	cmp	r3, r2
 80170d4:	d130      	bne.n	8017138 <UART_SetConfig+0x4c8>
 80170d6:	4b8d      	ldr	r3, [pc, #564]	; (801730c <UART_SetConfig+0x69c>)
 80170d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170da:	f003 0307 	and.w	r3, r3, #7
 80170de:	2b05      	cmp	r3, #5
 80170e0:	d826      	bhi.n	8017130 <UART_SetConfig+0x4c0>
 80170e2:	a201      	add	r2, pc, #4	; (adr r2, 80170e8 <UART_SetConfig+0x478>)
 80170e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170e8:	08017101 	.word	0x08017101
 80170ec:	08017109 	.word	0x08017109
 80170f0:	08017111 	.word	0x08017111
 80170f4:	08017119 	.word	0x08017119
 80170f8:	08017121 	.word	0x08017121
 80170fc:	08017129 	.word	0x08017129
 8017100:	2300      	movs	r3, #0
 8017102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017106:	e086      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017108:	2304      	movs	r3, #4
 801710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801710e:	e082      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017110:	2308      	movs	r3, #8
 8017112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017116:	e07e      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017118:	2310      	movs	r3, #16
 801711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801711e:	e07a      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017120:	2320      	movs	r3, #32
 8017122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017126:	e076      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017128:	2340      	movs	r3, #64	; 0x40
 801712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801712e:	e072      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017130:	2380      	movs	r3, #128	; 0x80
 8017132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017136:	e06e      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017138:	697b      	ldr	r3, [r7, #20]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	4a75      	ldr	r2, [pc, #468]	; (8017314 <UART_SetConfig+0x6a4>)
 801713e:	4293      	cmp	r3, r2
 8017140:	d130      	bne.n	80171a4 <UART_SetConfig+0x534>
 8017142:	4b72      	ldr	r3, [pc, #456]	; (801730c <UART_SetConfig+0x69c>)
 8017144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017146:	f003 0307 	and.w	r3, r3, #7
 801714a:	2b05      	cmp	r3, #5
 801714c:	d826      	bhi.n	801719c <UART_SetConfig+0x52c>
 801714e:	a201      	add	r2, pc, #4	; (adr r2, 8017154 <UART_SetConfig+0x4e4>)
 8017150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017154:	0801716d 	.word	0x0801716d
 8017158:	08017175 	.word	0x08017175
 801715c:	0801717d 	.word	0x0801717d
 8017160:	08017185 	.word	0x08017185
 8017164:	0801718d 	.word	0x0801718d
 8017168:	08017195 	.word	0x08017195
 801716c:	2300      	movs	r3, #0
 801716e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017172:	e050      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017174:	2304      	movs	r3, #4
 8017176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801717a:	e04c      	b.n	8017216 <UART_SetConfig+0x5a6>
 801717c:	2308      	movs	r3, #8
 801717e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017182:	e048      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017184:	2310      	movs	r3, #16
 8017186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801718a:	e044      	b.n	8017216 <UART_SetConfig+0x5a6>
 801718c:	2320      	movs	r3, #32
 801718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017192:	e040      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017194:	2340      	movs	r3, #64	; 0x40
 8017196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801719a:	e03c      	b.n	8017216 <UART_SetConfig+0x5a6>
 801719c:	2380      	movs	r3, #128	; 0x80
 801719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171a2:	e038      	b.n	8017216 <UART_SetConfig+0x5a6>
 80171a4:	697b      	ldr	r3, [r7, #20]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	4a5b      	ldr	r2, [pc, #364]	; (8017318 <UART_SetConfig+0x6a8>)
 80171aa:	4293      	cmp	r3, r2
 80171ac:	d130      	bne.n	8017210 <UART_SetConfig+0x5a0>
 80171ae:	4b57      	ldr	r3, [pc, #348]	; (801730c <UART_SetConfig+0x69c>)
 80171b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80171b2:	f003 0307 	and.w	r3, r3, #7
 80171b6:	2b05      	cmp	r3, #5
 80171b8:	d826      	bhi.n	8017208 <UART_SetConfig+0x598>
 80171ba:	a201      	add	r2, pc, #4	; (adr r2, 80171c0 <UART_SetConfig+0x550>)
 80171bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171c0:	080171d9 	.word	0x080171d9
 80171c4:	080171e1 	.word	0x080171e1
 80171c8:	080171e9 	.word	0x080171e9
 80171cc:	080171f1 	.word	0x080171f1
 80171d0:	080171f9 	.word	0x080171f9
 80171d4:	08017201 	.word	0x08017201
 80171d8:	2302      	movs	r3, #2
 80171da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171de:	e01a      	b.n	8017216 <UART_SetConfig+0x5a6>
 80171e0:	2304      	movs	r3, #4
 80171e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171e6:	e016      	b.n	8017216 <UART_SetConfig+0x5a6>
 80171e8:	2308      	movs	r3, #8
 80171ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171ee:	e012      	b.n	8017216 <UART_SetConfig+0x5a6>
 80171f0:	2310      	movs	r3, #16
 80171f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171f6:	e00e      	b.n	8017216 <UART_SetConfig+0x5a6>
 80171f8:	2320      	movs	r3, #32
 80171fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171fe:	e00a      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017200:	2340      	movs	r3, #64	; 0x40
 8017202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017206:	e006      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017208:	2380      	movs	r3, #128	; 0x80
 801720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801720e:	e002      	b.n	8017216 <UART_SetConfig+0x5a6>
 8017210:	2380      	movs	r3, #128	; 0x80
 8017212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	4a3f      	ldr	r2, [pc, #252]	; (8017318 <UART_SetConfig+0x6a8>)
 801721c:	4293      	cmp	r3, r2
 801721e:	f040 80f8 	bne.w	8017412 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017222:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017226:	2b20      	cmp	r3, #32
 8017228:	dc46      	bgt.n	80172b8 <UART_SetConfig+0x648>
 801722a:	2b02      	cmp	r3, #2
 801722c:	f2c0 8082 	blt.w	8017334 <UART_SetConfig+0x6c4>
 8017230:	3b02      	subs	r3, #2
 8017232:	2b1e      	cmp	r3, #30
 8017234:	d87e      	bhi.n	8017334 <UART_SetConfig+0x6c4>
 8017236:	a201      	add	r2, pc, #4	; (adr r2, 801723c <UART_SetConfig+0x5cc>)
 8017238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801723c:	080172bf 	.word	0x080172bf
 8017240:	08017335 	.word	0x08017335
 8017244:	080172c7 	.word	0x080172c7
 8017248:	08017335 	.word	0x08017335
 801724c:	08017335 	.word	0x08017335
 8017250:	08017335 	.word	0x08017335
 8017254:	080172d7 	.word	0x080172d7
 8017258:	08017335 	.word	0x08017335
 801725c:	08017335 	.word	0x08017335
 8017260:	08017335 	.word	0x08017335
 8017264:	08017335 	.word	0x08017335
 8017268:	08017335 	.word	0x08017335
 801726c:	08017335 	.word	0x08017335
 8017270:	08017335 	.word	0x08017335
 8017274:	080172e7 	.word	0x080172e7
 8017278:	08017335 	.word	0x08017335
 801727c:	08017335 	.word	0x08017335
 8017280:	08017335 	.word	0x08017335
 8017284:	08017335 	.word	0x08017335
 8017288:	08017335 	.word	0x08017335
 801728c:	08017335 	.word	0x08017335
 8017290:	08017335 	.word	0x08017335
 8017294:	08017335 	.word	0x08017335
 8017298:	08017335 	.word	0x08017335
 801729c:	08017335 	.word	0x08017335
 80172a0:	08017335 	.word	0x08017335
 80172a4:	08017335 	.word	0x08017335
 80172a8:	08017335 	.word	0x08017335
 80172ac:	08017335 	.word	0x08017335
 80172b0:	08017335 	.word	0x08017335
 80172b4:	08017327 	.word	0x08017327
 80172b8:	2b40      	cmp	r3, #64	; 0x40
 80172ba:	d037      	beq.n	801732c <UART_SetConfig+0x6bc>
 80172bc:	e03a      	b.n	8017334 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80172be:	f7fc fcd1 	bl	8013c64 <HAL_RCCEx_GetD3PCLK1Freq>
 80172c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80172c4:	e03c      	b.n	8017340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80172c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7fc fce0 	bl	8013c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80172d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80172d4:	e034      	b.n	8017340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80172d6:	f107 0318 	add.w	r3, r7, #24
 80172da:	4618      	mov	r0, r3
 80172dc:	f7fc fe2c 	bl	8013f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80172e0:	69fb      	ldr	r3, [r7, #28]
 80172e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80172e4:	e02c      	b.n	8017340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80172e6:	4b09      	ldr	r3, [pc, #36]	; (801730c <UART_SetConfig+0x69c>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	f003 0320 	and.w	r3, r3, #32
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d016      	beq.n	8017320 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80172f2:	4b06      	ldr	r3, [pc, #24]	; (801730c <UART_SetConfig+0x69c>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	08db      	lsrs	r3, r3, #3
 80172f8:	f003 0303 	and.w	r3, r3, #3
 80172fc:	4a07      	ldr	r2, [pc, #28]	; (801731c <UART_SetConfig+0x6ac>)
 80172fe:	fa22 f303 	lsr.w	r3, r2, r3
 8017302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017304:	e01c      	b.n	8017340 <UART_SetConfig+0x6d0>
 8017306:	bf00      	nop
 8017308:	40011400 	.word	0x40011400
 801730c:	58024400 	.word	0x58024400
 8017310:	40007800 	.word	0x40007800
 8017314:	40007c00 	.word	0x40007c00
 8017318:	58000c00 	.word	0x58000c00
 801731c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8017320:	4b9d      	ldr	r3, [pc, #628]	; (8017598 <UART_SetConfig+0x928>)
 8017322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017324:	e00c      	b.n	8017340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017326:	4b9d      	ldr	r3, [pc, #628]	; (801759c <UART_SetConfig+0x92c>)
 8017328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801732a:	e009      	b.n	8017340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801732c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017332:	e005      	b.n	8017340 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8017334:	2300      	movs	r3, #0
 8017336:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8017338:	2301      	movs	r3, #1
 801733a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801733e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017342:	2b00      	cmp	r3, #0
 8017344:	f000 81de 	beq.w	8017704 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801734c:	4a94      	ldr	r2, [pc, #592]	; (80175a0 <UART_SetConfig+0x930>)
 801734e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017352:	461a      	mov	r2, r3
 8017354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017356:	fbb3 f3f2 	udiv	r3, r3, r2
 801735a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	685a      	ldr	r2, [r3, #4]
 8017360:	4613      	mov	r3, r2
 8017362:	005b      	lsls	r3, r3, #1
 8017364:	4413      	add	r3, r2
 8017366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017368:	429a      	cmp	r2, r3
 801736a:	d305      	bcc.n	8017378 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017374:	429a      	cmp	r2, r3
 8017376:	d903      	bls.n	8017380 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8017378:	2301      	movs	r3, #1
 801737a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801737e:	e1c1      	b.n	8017704 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017382:	2200      	movs	r2, #0
 8017384:	60bb      	str	r3, [r7, #8]
 8017386:	60fa      	str	r2, [r7, #12]
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801738c:	4a84      	ldr	r2, [pc, #528]	; (80175a0 <UART_SetConfig+0x930>)
 801738e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017392:	b29b      	uxth	r3, r3
 8017394:	2200      	movs	r2, #0
 8017396:	603b      	str	r3, [r7, #0]
 8017398:	607a      	str	r2, [r7, #4]
 801739a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801739e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80173a2:	f7e8 ffed 	bl	8000380 <__aeabi_uldivmod>
 80173a6:	4602      	mov	r2, r0
 80173a8:	460b      	mov	r3, r1
 80173aa:	4610      	mov	r0, r2
 80173ac:	4619      	mov	r1, r3
 80173ae:	f04f 0200 	mov.w	r2, #0
 80173b2:	f04f 0300 	mov.w	r3, #0
 80173b6:	020b      	lsls	r3, r1, #8
 80173b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80173bc:	0202      	lsls	r2, r0, #8
 80173be:	6979      	ldr	r1, [r7, #20]
 80173c0:	6849      	ldr	r1, [r1, #4]
 80173c2:	0849      	lsrs	r1, r1, #1
 80173c4:	2000      	movs	r0, #0
 80173c6:	460c      	mov	r4, r1
 80173c8:	4605      	mov	r5, r0
 80173ca:	eb12 0804 	adds.w	r8, r2, r4
 80173ce:	eb43 0905 	adc.w	r9, r3, r5
 80173d2:	697b      	ldr	r3, [r7, #20]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	2200      	movs	r2, #0
 80173d8:	469a      	mov	sl, r3
 80173da:	4693      	mov	fp, r2
 80173dc:	4652      	mov	r2, sl
 80173de:	465b      	mov	r3, fp
 80173e0:	4640      	mov	r0, r8
 80173e2:	4649      	mov	r1, r9
 80173e4:	f7e8 ffcc 	bl	8000380 <__aeabi_uldivmod>
 80173e8:	4602      	mov	r2, r0
 80173ea:	460b      	mov	r3, r1
 80173ec:	4613      	mov	r3, r2
 80173ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80173f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80173f6:	d308      	bcc.n	801740a <UART_SetConfig+0x79a>
 80173f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80173fe:	d204      	bcs.n	801740a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017406:	60da      	str	r2, [r3, #12]
 8017408:	e17c      	b.n	8017704 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801740a:	2301      	movs	r3, #1
 801740c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017410:	e178      	b.n	8017704 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	69db      	ldr	r3, [r3, #28]
 8017416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801741a:	f040 80c5 	bne.w	80175a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801741e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017422:	2b20      	cmp	r3, #32
 8017424:	dc48      	bgt.n	80174b8 <UART_SetConfig+0x848>
 8017426:	2b00      	cmp	r3, #0
 8017428:	db7b      	blt.n	8017522 <UART_SetConfig+0x8b2>
 801742a:	2b20      	cmp	r3, #32
 801742c:	d879      	bhi.n	8017522 <UART_SetConfig+0x8b2>
 801742e:	a201      	add	r2, pc, #4	; (adr r2, 8017434 <UART_SetConfig+0x7c4>)
 8017430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017434:	080174bf 	.word	0x080174bf
 8017438:	080174c7 	.word	0x080174c7
 801743c:	08017523 	.word	0x08017523
 8017440:	08017523 	.word	0x08017523
 8017444:	080174cf 	.word	0x080174cf
 8017448:	08017523 	.word	0x08017523
 801744c:	08017523 	.word	0x08017523
 8017450:	08017523 	.word	0x08017523
 8017454:	080174df 	.word	0x080174df
 8017458:	08017523 	.word	0x08017523
 801745c:	08017523 	.word	0x08017523
 8017460:	08017523 	.word	0x08017523
 8017464:	08017523 	.word	0x08017523
 8017468:	08017523 	.word	0x08017523
 801746c:	08017523 	.word	0x08017523
 8017470:	08017523 	.word	0x08017523
 8017474:	080174ef 	.word	0x080174ef
 8017478:	08017523 	.word	0x08017523
 801747c:	08017523 	.word	0x08017523
 8017480:	08017523 	.word	0x08017523
 8017484:	08017523 	.word	0x08017523
 8017488:	08017523 	.word	0x08017523
 801748c:	08017523 	.word	0x08017523
 8017490:	08017523 	.word	0x08017523
 8017494:	08017523 	.word	0x08017523
 8017498:	08017523 	.word	0x08017523
 801749c:	08017523 	.word	0x08017523
 80174a0:	08017523 	.word	0x08017523
 80174a4:	08017523 	.word	0x08017523
 80174a8:	08017523 	.word	0x08017523
 80174ac:	08017523 	.word	0x08017523
 80174b0:	08017523 	.word	0x08017523
 80174b4:	08017515 	.word	0x08017515
 80174b8:	2b40      	cmp	r3, #64	; 0x40
 80174ba:	d02e      	beq.n	801751a <UART_SetConfig+0x8aa>
 80174bc:	e031      	b.n	8017522 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80174be:	f7fb fc5f 	bl	8012d80 <HAL_RCC_GetPCLK1Freq>
 80174c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80174c4:	e033      	b.n	801752e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80174c6:	f7fb fc71 	bl	8012dac <HAL_RCC_GetPCLK2Freq>
 80174ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80174cc:	e02f      	b.n	801752e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80174ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7fc fbdc 	bl	8013c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80174d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80174dc:	e027      	b.n	801752e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80174de:	f107 0318 	add.w	r3, r7, #24
 80174e2:	4618      	mov	r0, r3
 80174e4:	f7fc fd28 	bl	8013f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80174e8:	69fb      	ldr	r3, [r7, #28]
 80174ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80174ec:	e01f      	b.n	801752e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80174ee:	4b2d      	ldr	r3, [pc, #180]	; (80175a4 <UART_SetConfig+0x934>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f003 0320 	and.w	r3, r3, #32
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d009      	beq.n	801750e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80174fa:	4b2a      	ldr	r3, [pc, #168]	; (80175a4 <UART_SetConfig+0x934>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	08db      	lsrs	r3, r3, #3
 8017500:	f003 0303 	and.w	r3, r3, #3
 8017504:	4a24      	ldr	r2, [pc, #144]	; (8017598 <UART_SetConfig+0x928>)
 8017506:	fa22 f303 	lsr.w	r3, r2, r3
 801750a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801750c:	e00f      	b.n	801752e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801750e:	4b22      	ldr	r3, [pc, #136]	; (8017598 <UART_SetConfig+0x928>)
 8017510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017512:	e00c      	b.n	801752e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017514:	4b21      	ldr	r3, [pc, #132]	; (801759c <UART_SetConfig+0x92c>)
 8017516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017518:	e009      	b.n	801752e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801751a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801751e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017520:	e005      	b.n	801752e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8017522:	2300      	movs	r3, #0
 8017524:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8017526:	2301      	movs	r3, #1
 8017528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801752c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801752e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017530:	2b00      	cmp	r3, #0
 8017532:	f000 80e7 	beq.w	8017704 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017536:	697b      	ldr	r3, [r7, #20]
 8017538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801753a:	4a19      	ldr	r2, [pc, #100]	; (80175a0 <UART_SetConfig+0x930>)
 801753c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017540:	461a      	mov	r2, r3
 8017542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017544:	fbb3 f3f2 	udiv	r3, r3, r2
 8017548:	005a      	lsls	r2, r3, #1
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	085b      	lsrs	r3, r3, #1
 8017550:	441a      	add	r2, r3
 8017552:	697b      	ldr	r3, [r7, #20]
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	fbb2 f3f3 	udiv	r3, r2, r3
 801755a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801755e:	2b0f      	cmp	r3, #15
 8017560:	d916      	bls.n	8017590 <UART_SetConfig+0x920>
 8017562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017568:	d212      	bcs.n	8017590 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801756c:	b29b      	uxth	r3, r3
 801756e:	f023 030f 	bic.w	r3, r3, #15
 8017572:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017576:	085b      	lsrs	r3, r3, #1
 8017578:	b29b      	uxth	r3, r3
 801757a:	f003 0307 	and.w	r3, r3, #7
 801757e:	b29a      	uxth	r2, r3
 8017580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017582:	4313      	orrs	r3, r2
 8017584:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801758c:	60da      	str	r2, [r3, #12]
 801758e:	e0b9      	b.n	8017704 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8017590:	2301      	movs	r3, #1
 8017592:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017596:	e0b5      	b.n	8017704 <UART_SetConfig+0xa94>
 8017598:	03d09000 	.word	0x03d09000
 801759c:	003d0900 	.word	0x003d0900
 80175a0:	08038adc 	.word	0x08038adc
 80175a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80175a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80175ac:	2b20      	cmp	r3, #32
 80175ae:	dc49      	bgt.n	8017644 <UART_SetConfig+0x9d4>
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	db7c      	blt.n	80176ae <UART_SetConfig+0xa3e>
 80175b4:	2b20      	cmp	r3, #32
 80175b6:	d87a      	bhi.n	80176ae <UART_SetConfig+0xa3e>
 80175b8:	a201      	add	r2, pc, #4	; (adr r2, 80175c0 <UART_SetConfig+0x950>)
 80175ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175be:	bf00      	nop
 80175c0:	0801764b 	.word	0x0801764b
 80175c4:	08017653 	.word	0x08017653
 80175c8:	080176af 	.word	0x080176af
 80175cc:	080176af 	.word	0x080176af
 80175d0:	0801765b 	.word	0x0801765b
 80175d4:	080176af 	.word	0x080176af
 80175d8:	080176af 	.word	0x080176af
 80175dc:	080176af 	.word	0x080176af
 80175e0:	0801766b 	.word	0x0801766b
 80175e4:	080176af 	.word	0x080176af
 80175e8:	080176af 	.word	0x080176af
 80175ec:	080176af 	.word	0x080176af
 80175f0:	080176af 	.word	0x080176af
 80175f4:	080176af 	.word	0x080176af
 80175f8:	080176af 	.word	0x080176af
 80175fc:	080176af 	.word	0x080176af
 8017600:	0801767b 	.word	0x0801767b
 8017604:	080176af 	.word	0x080176af
 8017608:	080176af 	.word	0x080176af
 801760c:	080176af 	.word	0x080176af
 8017610:	080176af 	.word	0x080176af
 8017614:	080176af 	.word	0x080176af
 8017618:	080176af 	.word	0x080176af
 801761c:	080176af 	.word	0x080176af
 8017620:	080176af 	.word	0x080176af
 8017624:	080176af 	.word	0x080176af
 8017628:	080176af 	.word	0x080176af
 801762c:	080176af 	.word	0x080176af
 8017630:	080176af 	.word	0x080176af
 8017634:	080176af 	.word	0x080176af
 8017638:	080176af 	.word	0x080176af
 801763c:	080176af 	.word	0x080176af
 8017640:	080176a1 	.word	0x080176a1
 8017644:	2b40      	cmp	r3, #64	; 0x40
 8017646:	d02e      	beq.n	80176a6 <UART_SetConfig+0xa36>
 8017648:	e031      	b.n	80176ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801764a:	f7fb fb99 	bl	8012d80 <HAL_RCC_GetPCLK1Freq>
 801764e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017650:	e033      	b.n	80176ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017652:	f7fb fbab 	bl	8012dac <HAL_RCC_GetPCLK2Freq>
 8017656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017658:	e02f      	b.n	80176ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801765a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801765e:	4618      	mov	r0, r3
 8017660:	f7fc fb16 	bl	8013c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8017664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017668:	e027      	b.n	80176ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801766a:	f107 0318 	add.w	r3, r7, #24
 801766e:	4618      	mov	r0, r3
 8017670:	f7fc fc62 	bl	8013f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8017674:	69fb      	ldr	r3, [r7, #28]
 8017676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017678:	e01f      	b.n	80176ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801767a:	4b2d      	ldr	r3, [pc, #180]	; (8017730 <UART_SetConfig+0xac0>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f003 0320 	and.w	r3, r3, #32
 8017682:	2b00      	cmp	r3, #0
 8017684:	d009      	beq.n	801769a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8017686:	4b2a      	ldr	r3, [pc, #168]	; (8017730 <UART_SetConfig+0xac0>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	08db      	lsrs	r3, r3, #3
 801768c:	f003 0303 	and.w	r3, r3, #3
 8017690:	4a28      	ldr	r2, [pc, #160]	; (8017734 <UART_SetConfig+0xac4>)
 8017692:	fa22 f303 	lsr.w	r3, r2, r3
 8017696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017698:	e00f      	b.n	80176ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801769a:	4b26      	ldr	r3, [pc, #152]	; (8017734 <UART_SetConfig+0xac4>)
 801769c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801769e:	e00c      	b.n	80176ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80176a0:	4b25      	ldr	r3, [pc, #148]	; (8017738 <UART_SetConfig+0xac8>)
 80176a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80176a4:	e009      	b.n	80176ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80176a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80176aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80176ac:	e005      	b.n	80176ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80176ae:	2300      	movs	r3, #0
 80176b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80176b2:	2301      	movs	r3, #1
 80176b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80176b8:	bf00      	nop
    }

    if (pclk != 0U)
 80176ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d021      	beq.n	8017704 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176c4:	4a1d      	ldr	r2, [pc, #116]	; (801773c <UART_SetConfig+0xacc>)
 80176c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80176ca:	461a      	mov	r2, r3
 80176cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80176d2:	697b      	ldr	r3, [r7, #20]
 80176d4:	685b      	ldr	r3, [r3, #4]
 80176d6:	085b      	lsrs	r3, r3, #1
 80176d8:	441a      	add	r2, r3
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	fbb2 f3f3 	udiv	r3, r2, r3
 80176e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80176e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176e6:	2b0f      	cmp	r3, #15
 80176e8:	d909      	bls.n	80176fe <UART_SetConfig+0xa8e>
 80176ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176f0:	d205      	bcs.n	80176fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80176f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176f4:	b29a      	uxth	r2, r3
 80176f6:	697b      	ldr	r3, [r7, #20]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	60da      	str	r2, [r3, #12]
 80176fc:	e002      	b.n	8017704 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80176fe:	2301      	movs	r3, #1
 8017700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8017704:	697b      	ldr	r3, [r7, #20]
 8017706:	2201      	movs	r2, #1
 8017708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801770c:	697b      	ldr	r3, [r7, #20]
 801770e:	2201      	movs	r2, #1
 8017710:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017714:	697b      	ldr	r3, [r7, #20]
 8017716:	2200      	movs	r2, #0
 8017718:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801771a:	697b      	ldr	r3, [r7, #20]
 801771c:	2200      	movs	r2, #0
 801771e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8017720:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8017724:	4618      	mov	r0, r3
 8017726:	3748      	adds	r7, #72	; 0x48
 8017728:	46bd      	mov	sp, r7
 801772a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801772e:	bf00      	nop
 8017730:	58024400 	.word	0x58024400
 8017734:	03d09000 	.word	0x03d09000
 8017738:	003d0900 	.word	0x003d0900
 801773c:	08038adc 	.word	0x08038adc

08017740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017740:	b480      	push	{r7}
 8017742:	b083      	sub	sp, #12
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801774c:	f003 0301 	and.w	r3, r3, #1
 8017750:	2b00      	cmp	r3, #0
 8017752:	d00a      	beq.n	801776a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	685b      	ldr	r3, [r3, #4]
 801775a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	430a      	orrs	r2, r1
 8017768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801776e:	f003 0302 	and.w	r3, r3, #2
 8017772:	2b00      	cmp	r3, #0
 8017774:	d00a      	beq.n	801778c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	685b      	ldr	r3, [r3, #4]
 801777c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	430a      	orrs	r2, r1
 801778a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017790:	f003 0304 	and.w	r3, r3, #4
 8017794:	2b00      	cmp	r3, #0
 8017796:	d00a      	beq.n	80177ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	430a      	orrs	r2, r1
 80177ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177b2:	f003 0308 	and.w	r3, r3, #8
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d00a      	beq.n	80177d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	685b      	ldr	r3, [r3, #4]
 80177c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	430a      	orrs	r2, r1
 80177ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177d4:	f003 0310 	and.w	r3, r3, #16
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d00a      	beq.n	80177f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	689b      	ldr	r3, [r3, #8]
 80177e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	430a      	orrs	r2, r1
 80177f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177f6:	f003 0320 	and.w	r3, r3, #32
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d00a      	beq.n	8017814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	689b      	ldr	r3, [r3, #8]
 8017804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	430a      	orrs	r2, r1
 8017812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801781c:	2b00      	cmp	r3, #0
 801781e:	d01a      	beq.n	8017856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	685b      	ldr	r3, [r3, #4]
 8017826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	430a      	orrs	r2, r1
 8017834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801783a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801783e:	d10a      	bne.n	8017856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	430a      	orrs	r2, r1
 8017854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801785a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801785e:	2b00      	cmp	r3, #0
 8017860:	d00a      	beq.n	8017878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	685b      	ldr	r3, [r3, #4]
 8017868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	430a      	orrs	r2, r1
 8017876:	605a      	str	r2, [r3, #4]
  }
}
 8017878:	bf00      	nop
 801787a:	370c      	adds	r7, #12
 801787c:	46bd      	mov	sp, r7
 801787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017882:	4770      	bx	lr

08017884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b086      	sub	sp, #24
 8017888:	af02      	add	r7, sp, #8
 801788a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	2200      	movs	r2, #0
 8017890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017894:	f7f4 fafe 	bl	800be94 <HAL_GetTick>
 8017898:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	f003 0308 	and.w	r3, r3, #8
 80178a4:	2b08      	cmp	r3, #8
 80178a6:	d10e      	bne.n	80178c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80178a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80178ac:	9300      	str	r3, [sp, #0]
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	2200      	movs	r2, #0
 80178b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80178b6:	6878      	ldr	r0, [r7, #4]
 80178b8:	f000 f82f 	bl	801791a <UART_WaitOnFlagUntilTimeout>
 80178bc:	4603      	mov	r3, r0
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d001      	beq.n	80178c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80178c2:	2303      	movs	r3, #3
 80178c4:	e025      	b.n	8017912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	f003 0304 	and.w	r3, r3, #4
 80178d0:	2b04      	cmp	r3, #4
 80178d2:	d10e      	bne.n	80178f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80178d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80178d8:	9300      	str	r3, [sp, #0]
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	2200      	movs	r2, #0
 80178de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	f000 f819 	bl	801791a <UART_WaitOnFlagUntilTimeout>
 80178e8:	4603      	mov	r3, r0
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d001      	beq.n	80178f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80178ee:	2303      	movs	r3, #3
 80178f0:	e00f      	b.n	8017912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	2220      	movs	r2, #32
 80178f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2220      	movs	r2, #32
 80178fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	2200      	movs	r2, #0
 8017906:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2200      	movs	r2, #0
 801790c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017910:	2300      	movs	r3, #0
}
 8017912:	4618      	mov	r0, r3
 8017914:	3710      	adds	r7, #16
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}

0801791a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801791a:	b580      	push	{r7, lr}
 801791c:	b09c      	sub	sp, #112	; 0x70
 801791e:	af00      	add	r7, sp, #0
 8017920:	60f8      	str	r0, [r7, #12]
 8017922:	60b9      	str	r1, [r7, #8]
 8017924:	603b      	str	r3, [r7, #0]
 8017926:	4613      	mov	r3, r2
 8017928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801792a:	e0a9      	b.n	8017a80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801792c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801792e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017932:	f000 80a5 	beq.w	8017a80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017936:	f7f4 faad 	bl	800be94 <HAL_GetTick>
 801793a:	4602      	mov	r2, r0
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	1ad3      	subs	r3, r2, r3
 8017940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017942:	429a      	cmp	r2, r3
 8017944:	d302      	bcc.n	801794c <UART_WaitOnFlagUntilTimeout+0x32>
 8017946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017948:	2b00      	cmp	r3, #0
 801794a:	d140      	bne.n	80179ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017954:	e853 3f00 	ldrex	r3, [r3]
 8017958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801795a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801795c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017960:	667b      	str	r3, [r7, #100]	; 0x64
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	461a      	mov	r2, r3
 8017968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801796a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801796c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801796e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017972:	e841 2300 	strex	r3, r2, [r1]
 8017976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801797a:	2b00      	cmp	r3, #0
 801797c:	d1e6      	bne.n	801794c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	3308      	adds	r3, #8
 8017984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017988:	e853 3f00 	ldrex	r3, [r3]
 801798c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017990:	f023 0301 	bic.w	r3, r3, #1
 8017994:	663b      	str	r3, [r7, #96]	; 0x60
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	3308      	adds	r3, #8
 801799c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801799e:	64ba      	str	r2, [r7, #72]	; 0x48
 80179a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80179a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80179a6:	e841 2300 	strex	r3, r2, [r1]
 80179aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80179ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d1e5      	bne.n	801797e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	2220      	movs	r2, #32
 80179b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	2220      	movs	r2, #32
 80179be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	2200      	movs	r2, #0
 80179c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80179ca:	2303      	movs	r3, #3
 80179cc:	e069      	b.n	8017aa2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	f003 0304 	and.w	r3, r3, #4
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d051      	beq.n	8017a80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	69db      	ldr	r3, [r3, #28]
 80179e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80179e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80179ea:	d149      	bne.n	8017a80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80179f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179fe:	e853 3f00 	ldrex	r3, [r3]
 8017a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	461a      	mov	r2, r3
 8017a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a14:	637b      	str	r3, [r7, #52]	; 0x34
 8017a16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a1c:	e841 2300 	strex	r3, r2, [r1]
 8017a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d1e6      	bne.n	80179f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	3308      	adds	r3, #8
 8017a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	e853 3f00 	ldrex	r3, [r3]
 8017a36:	613b      	str	r3, [r7, #16]
   return(result);
 8017a38:	693b      	ldr	r3, [r7, #16]
 8017a3a:	f023 0301 	bic.w	r3, r3, #1
 8017a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	3308      	adds	r3, #8
 8017a46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017a48:	623a      	str	r2, [r7, #32]
 8017a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a4c:	69f9      	ldr	r1, [r7, #28]
 8017a4e:	6a3a      	ldr	r2, [r7, #32]
 8017a50:	e841 2300 	strex	r3, r2, [r1]
 8017a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8017a56:	69bb      	ldr	r3, [r7, #24]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d1e5      	bne.n	8017a28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	2220      	movs	r2, #32
 8017a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	2220      	movs	r2, #32
 8017a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	2220      	movs	r2, #32
 8017a70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	2200      	movs	r2, #0
 8017a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8017a7c:	2303      	movs	r3, #3
 8017a7e:	e010      	b.n	8017aa2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	69da      	ldr	r2, [r3, #28]
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	4013      	ands	r3, r2
 8017a8a:	68ba      	ldr	r2, [r7, #8]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	bf0c      	ite	eq
 8017a90:	2301      	moveq	r3, #1
 8017a92:	2300      	movne	r3, #0
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	461a      	mov	r2, r3
 8017a98:	79fb      	ldrb	r3, [r7, #7]
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	f43f af46 	beq.w	801792c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017aa0:	2300      	movs	r3, #0
}
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	3770      	adds	r7, #112	; 0x70
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}
	...

08017aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017aac:	b480      	push	{r7}
 8017aae:	b0a3      	sub	sp, #140	; 0x8c
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	4613      	mov	r3, r2
 8017ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	68ba      	ldr	r2, [r7, #8]
 8017abe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	88fa      	ldrh	r2, [r7, #6]
 8017ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	88fa      	ldrh	r2, [r7, #6]
 8017acc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	689b      	ldr	r3, [r3, #8]
 8017ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017ade:	d10e      	bne.n	8017afe <UART_Start_Receive_IT+0x52>
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	691b      	ldr	r3, [r3, #16]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d105      	bne.n	8017af4 <UART_Start_Receive_IT+0x48>
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8017aee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017af2:	e02d      	b.n	8017b50 <UART_Start_Receive_IT+0xa4>
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	22ff      	movs	r2, #255	; 0xff
 8017af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017afc:	e028      	b.n	8017b50 <UART_Start_Receive_IT+0xa4>
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	689b      	ldr	r3, [r3, #8]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d10d      	bne.n	8017b22 <UART_Start_Receive_IT+0x76>
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	691b      	ldr	r3, [r3, #16]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d104      	bne.n	8017b18 <UART_Start_Receive_IT+0x6c>
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	22ff      	movs	r2, #255	; 0xff
 8017b12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017b16:	e01b      	b.n	8017b50 <UART_Start_Receive_IT+0xa4>
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	227f      	movs	r2, #127	; 0x7f
 8017b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017b20:	e016      	b.n	8017b50 <UART_Start_Receive_IT+0xa4>
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	689b      	ldr	r3, [r3, #8]
 8017b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017b2a:	d10d      	bne.n	8017b48 <UART_Start_Receive_IT+0x9c>
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	691b      	ldr	r3, [r3, #16]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d104      	bne.n	8017b3e <UART_Start_Receive_IT+0x92>
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	227f      	movs	r2, #127	; 0x7f
 8017b38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017b3c:	e008      	b.n	8017b50 <UART_Start_Receive_IT+0xa4>
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	223f      	movs	r2, #63	; 0x3f
 8017b42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017b46:	e003      	b.n	8017b50 <UART_Start_Receive_IT+0xa4>
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	2200      	movs	r2, #0
 8017b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	2222      	movs	r2, #34	; 0x22
 8017b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	3308      	adds	r3, #8
 8017b66:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b6a:	e853 3f00 	ldrex	r3, [r3]
 8017b6e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017b72:	f043 0301 	orr.w	r3, r3, #1
 8017b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	3308      	adds	r3, #8
 8017b80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017b84:	673a      	str	r2, [r7, #112]	; 0x70
 8017b86:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b88:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8017b8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017b8c:	e841 2300 	strex	r3, r2, [r1]
 8017b90:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8017b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d1e3      	bne.n	8017b60 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017ba0:	d153      	bne.n	8017c4a <UART_Start_Receive_IT+0x19e>
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017ba8:	88fa      	ldrh	r2, [r7, #6]
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d34d      	bcc.n	8017c4a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	689b      	ldr	r3, [r3, #8]
 8017bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017bb6:	d107      	bne.n	8017bc8 <UART_Start_Receive_IT+0x11c>
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	691b      	ldr	r3, [r3, #16]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d103      	bne.n	8017bc8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	4a4b      	ldr	r2, [pc, #300]	; (8017cf0 <UART_Start_Receive_IT+0x244>)
 8017bc4:	671a      	str	r2, [r3, #112]	; 0x70
 8017bc6:	e002      	b.n	8017bce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	4a4a      	ldr	r2, [pc, #296]	; (8017cf4 <UART_Start_Receive_IT+0x248>)
 8017bcc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	691b      	ldr	r3, [r3, #16]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d01a      	beq.n	8017c14 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017be6:	e853 3f00 	ldrex	r3, [r3]
 8017bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	461a      	mov	r2, r3
 8017bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017c02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017c06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017c08:	e841 2300 	strex	r3, r2, [r1]
 8017c0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d1e4      	bne.n	8017bde <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	3308      	adds	r3, #8
 8017c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c1e:	e853 3f00 	ldrex	r3, [r3]
 8017c22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	3308      	adds	r3, #8
 8017c32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017c34:	64ba      	str	r2, [r7, #72]	; 0x48
 8017c36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c3c:	e841 2300 	strex	r3, r2, [r1]
 8017c40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d1e5      	bne.n	8017c14 <UART_Start_Receive_IT+0x168>
 8017c48:	e04a      	b.n	8017ce0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	689b      	ldr	r3, [r3, #8]
 8017c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c52:	d107      	bne.n	8017c64 <UART_Start_Receive_IT+0x1b8>
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	691b      	ldr	r3, [r3, #16]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d103      	bne.n	8017c64 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	4a26      	ldr	r2, [pc, #152]	; (8017cf8 <UART_Start_Receive_IT+0x24c>)
 8017c60:	671a      	str	r2, [r3, #112]	; 0x70
 8017c62:	e002      	b.n	8017c6a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	4a25      	ldr	r2, [pc, #148]	; (8017cfc <UART_Start_Receive_IT+0x250>)
 8017c68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	691b      	ldr	r3, [r3, #16]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d019      	beq.n	8017cae <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c82:	e853 3f00 	ldrex	r3, [r3]
 8017c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8017c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	461a      	mov	r2, r3
 8017c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017c98:	637b      	str	r3, [r7, #52]	; 0x34
 8017c9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ca0:	e841 2300 	strex	r3, r2, [r1]
 8017ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d1e6      	bne.n	8017c7a <UART_Start_Receive_IT+0x1ce>
 8017cac:	e018      	b.n	8017ce0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	e853 3f00 	ldrex	r3, [r3]
 8017cba:	613b      	str	r3, [r7, #16]
   return(result);
 8017cbc:	693b      	ldr	r3, [r7, #16]
 8017cbe:	f043 0320 	orr.w	r3, r3, #32
 8017cc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	461a      	mov	r2, r3
 8017cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ccc:	623b      	str	r3, [r7, #32]
 8017cce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cd0:	69f9      	ldr	r1, [r7, #28]
 8017cd2:	6a3a      	ldr	r2, [r7, #32]
 8017cd4:	e841 2300 	strex	r3, r2, [r1]
 8017cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8017cda:	69bb      	ldr	r3, [r7, #24]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d1e6      	bne.n	8017cae <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8017ce0:	2300      	movs	r3, #0
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	378c      	adds	r7, #140	; 0x8c
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop
 8017cf0:	08018409 	.word	0x08018409
 8017cf4:	08018111 	.word	0x08018111
 8017cf8:	08017faf 	.word	0x08017faf
 8017cfc:	08017e4f 	.word	0x08017e4f

08017d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017d00:	b480      	push	{r7}
 8017d02:	b095      	sub	sp, #84	; 0x54
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d10:	e853 3f00 	ldrex	r3, [r3]
 8017d14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	461a      	mov	r2, r3
 8017d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d26:	643b      	str	r3, [r7, #64]	; 0x40
 8017d28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d2e:	e841 2300 	strex	r3, r2, [r1]
 8017d32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d1e6      	bne.n	8017d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	3308      	adds	r3, #8
 8017d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d42:	6a3b      	ldr	r3, [r7, #32]
 8017d44:	e853 3f00 	ldrex	r3, [r3]
 8017d48:	61fb      	str	r3, [r7, #28]
   return(result);
 8017d4a:	69fa      	ldr	r2, [r7, #28]
 8017d4c:	4b1e      	ldr	r3, [pc, #120]	; (8017dc8 <UART_EndRxTransfer+0xc8>)
 8017d4e:	4013      	ands	r3, r2
 8017d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	3308      	adds	r3, #8
 8017d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d62:	e841 2300 	strex	r3, r2, [r1]
 8017d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d1e5      	bne.n	8017d3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d72:	2b01      	cmp	r3, #1
 8017d74:	d118      	bne.n	8017da8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	e853 3f00 	ldrex	r3, [r3]
 8017d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	f023 0310 	bic.w	r3, r3, #16
 8017d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	461a      	mov	r2, r3
 8017d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d94:	61bb      	str	r3, [r7, #24]
 8017d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d98:	6979      	ldr	r1, [r7, #20]
 8017d9a:	69ba      	ldr	r2, [r7, #24]
 8017d9c:	e841 2300 	strex	r3, r2, [r1]
 8017da0:	613b      	str	r3, [r7, #16]
   return(result);
 8017da2:	693b      	ldr	r3, [r7, #16]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d1e6      	bne.n	8017d76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2220      	movs	r2, #32
 8017dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	2200      	movs	r2, #0
 8017db4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	2200      	movs	r2, #0
 8017dba:	671a      	str	r2, [r3, #112]	; 0x70
}
 8017dbc:	bf00      	nop
 8017dbe:	3754      	adds	r7, #84	; 0x54
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc6:	4770      	bx	lr
 8017dc8:	effffffe 	.word	0xeffffffe

08017dcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b084      	sub	sp, #16
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	2200      	movs	r2, #0
 8017dde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	2200      	movs	r2, #0
 8017de6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017dea:	68f8      	ldr	r0, [r7, #12]
 8017dec:	f7fe ff2a 	bl	8016c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017df0:	bf00      	nop
 8017df2:	3710      	adds	r7, #16
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}

08017df8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b088      	sub	sp, #32
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	e853 3f00 	ldrex	r3, [r3]
 8017e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017e14:	61fb      	str	r3, [r7, #28]
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	461a      	mov	r2, r3
 8017e1c:	69fb      	ldr	r3, [r7, #28]
 8017e1e:	61bb      	str	r3, [r7, #24]
 8017e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e22:	6979      	ldr	r1, [r7, #20]
 8017e24:	69ba      	ldr	r2, [r7, #24]
 8017e26:	e841 2300 	strex	r3, r2, [r1]
 8017e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8017e2c:	693b      	ldr	r3, [r7, #16]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d1e6      	bne.n	8017e00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	2220      	movs	r2, #32
 8017e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017e40:	6878      	ldr	r0, [r7, #4]
 8017e42:	f7f2 ff41 	bl	800acc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017e46:	bf00      	nop
 8017e48:	3720      	adds	r7, #32
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}

08017e4e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017e4e:	b580      	push	{r7, lr}
 8017e50:	b096      	sub	sp, #88	; 0x58
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e66:	2b22      	cmp	r3, #34	; 0x22
 8017e68:	f040 8095 	bne.w	8017f96 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017e76:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8017e7a:	b2d9      	uxtb	r1, r3
 8017e7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8017e80:	b2da      	uxtb	r2, r3
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e86:	400a      	ands	r2, r1
 8017e88:	b2d2      	uxtb	r2, r2
 8017e8a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e90:	1c5a      	adds	r2, r3, #1
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017e9c:	b29b      	uxth	r3, r3
 8017e9e:	3b01      	subs	r3, #1
 8017ea0:	b29a      	uxth	r2, r3
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d178      	bne.n	8017fa6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ebc:	e853 3f00 	ldrex	r3, [r3]
 8017ec0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ec4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	461a      	mov	r2, r3
 8017ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8017ed4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017eda:	e841 2300 	strex	r3, r2, [r1]
 8017ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d1e6      	bne.n	8017eb4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	3308      	adds	r3, #8
 8017eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef0:	e853 3f00 	ldrex	r3, [r3]
 8017ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8017ef6:	6a3b      	ldr	r3, [r7, #32]
 8017ef8:	f023 0301 	bic.w	r3, r3, #1
 8017efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	3308      	adds	r3, #8
 8017f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017f06:	633a      	str	r2, [r7, #48]	; 0x30
 8017f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f0e:	e841 2300 	strex	r3, r2, [r1]
 8017f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d1e5      	bne.n	8017ee6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	2220      	movs	r2, #32
 8017f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2200      	movs	r2, #0
 8017f26:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f2c:	2b01      	cmp	r3, #1
 8017f2e:	d12e      	bne.n	8017f8e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	2200      	movs	r2, #0
 8017f34:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	e853 3f00 	ldrex	r3, [r3]
 8017f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	f023 0310 	bic.w	r3, r3, #16
 8017f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	461a      	mov	r2, r3
 8017f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f54:	61fb      	str	r3, [r7, #28]
 8017f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f58:	69b9      	ldr	r1, [r7, #24]
 8017f5a:	69fa      	ldr	r2, [r7, #28]
 8017f5c:	e841 2300 	strex	r3, r2, [r1]
 8017f60:	617b      	str	r3, [r7, #20]
   return(result);
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d1e6      	bne.n	8017f36 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	69db      	ldr	r3, [r3, #28]
 8017f6e:	f003 0310 	and.w	r3, r3, #16
 8017f72:	2b10      	cmp	r3, #16
 8017f74:	d103      	bne.n	8017f7e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	2210      	movs	r2, #16
 8017f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017f84:	4619      	mov	r1, r3
 8017f86:	6878      	ldr	r0, [r7, #4]
 8017f88:	f7fe fe66 	bl	8016c58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017f8c:	e00b      	b.n	8017fa6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f7f2 fe76 	bl	800ac80 <HAL_UART_RxCpltCallback>
}
 8017f94:	e007      	b.n	8017fa6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	699a      	ldr	r2, [r3, #24]
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	f042 0208 	orr.w	r2, r2, #8
 8017fa4:	619a      	str	r2, [r3, #24]
}
 8017fa6:	bf00      	nop
 8017fa8:	3758      	adds	r7, #88	; 0x58
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd80      	pop	{r7, pc}

08017fae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017fae:	b580      	push	{r7, lr}
 8017fb0:	b096      	sub	sp, #88	; 0x58
 8017fb2:	af00      	add	r7, sp, #0
 8017fb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017fbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fc6:	2b22      	cmp	r3, #34	; 0x22
 8017fc8:	f040 8095 	bne.w	80180f6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fd2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017fda:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8017fdc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8017fe0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8017fe4:	4013      	ands	r3, r2
 8017fe6:	b29a      	uxth	r2, r3
 8017fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017fea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ff0:	1c9a      	adds	r2, r3, #2
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	3b01      	subs	r3, #1
 8018000:	b29a      	uxth	r2, r3
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801800e:	b29b      	uxth	r3, r3
 8018010:	2b00      	cmp	r3, #0
 8018012:	d178      	bne.n	8018106 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801801c:	e853 3f00 	ldrex	r3, [r3]
 8018020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018028:	64fb      	str	r3, [r7, #76]	; 0x4c
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	461a      	mov	r2, r3
 8018030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018032:	643b      	str	r3, [r7, #64]	; 0x40
 8018034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801803a:	e841 2300 	strex	r3, r2, [r1]
 801803e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018042:	2b00      	cmp	r3, #0
 8018044:	d1e6      	bne.n	8018014 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	3308      	adds	r3, #8
 801804c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801804e:	6a3b      	ldr	r3, [r7, #32]
 8018050:	e853 3f00 	ldrex	r3, [r3]
 8018054:	61fb      	str	r3, [r7, #28]
   return(result);
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	f023 0301 	bic.w	r3, r3, #1
 801805c:	64bb      	str	r3, [r7, #72]	; 0x48
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	3308      	adds	r3, #8
 8018064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801806a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801806c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801806e:	e841 2300 	strex	r3, r2, [r1]
 8018072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018076:	2b00      	cmp	r3, #0
 8018078:	d1e5      	bne.n	8018046 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2220      	movs	r2, #32
 801807e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2200      	movs	r2, #0
 8018086:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801808c:	2b01      	cmp	r3, #1
 801808e:	d12e      	bne.n	80180ee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2200      	movs	r2, #0
 8018094:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	e853 3f00 	ldrex	r3, [r3]
 80180a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	f023 0310 	bic.w	r3, r3, #16
 80180aa:	647b      	str	r3, [r7, #68]	; 0x44
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	461a      	mov	r2, r3
 80180b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80180b4:	61bb      	str	r3, [r7, #24]
 80180b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180b8:	6979      	ldr	r1, [r7, #20]
 80180ba:	69ba      	ldr	r2, [r7, #24]
 80180bc:	e841 2300 	strex	r3, r2, [r1]
 80180c0:	613b      	str	r3, [r7, #16]
   return(result);
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d1e6      	bne.n	8018096 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	69db      	ldr	r3, [r3, #28]
 80180ce:	f003 0310 	and.w	r3, r3, #16
 80180d2:	2b10      	cmp	r3, #16
 80180d4:	d103      	bne.n	80180de <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	2210      	movs	r2, #16
 80180dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80180e4:	4619      	mov	r1, r3
 80180e6:	6878      	ldr	r0, [r7, #4]
 80180e8:	f7fe fdb6 	bl	8016c58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80180ec:	e00b      	b.n	8018106 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80180ee:	6878      	ldr	r0, [r7, #4]
 80180f0:	f7f2 fdc6 	bl	800ac80 <HAL_UART_RxCpltCallback>
}
 80180f4:	e007      	b.n	8018106 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	699a      	ldr	r2, [r3, #24]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f042 0208 	orr.w	r2, r2, #8
 8018104:	619a      	str	r2, [r3, #24]
}
 8018106:	bf00      	nop
 8018108:	3758      	adds	r7, #88	; 0x58
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}
	...

08018110 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b0a6      	sub	sp, #152	; 0x98
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801811e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	69db      	ldr	r3, [r3, #28]
 8018128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	689b      	ldr	r3, [r3, #8]
 801813c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018146:	2b22      	cmp	r3, #34	; 0x22
 8018148:	f040 814d 	bne.w	80183e6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018152:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018156:	e0f4      	b.n	8018342 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801815e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018162:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8018166:	b2d9      	uxtb	r1, r3
 8018168:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801816c:	b2da      	uxtb	r2, r3
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018172:	400a      	ands	r2, r1
 8018174:	b2d2      	uxtb	r2, r2
 8018176:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801817c:	1c5a      	adds	r2, r3, #1
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018188:	b29b      	uxth	r3, r3
 801818a:	3b01      	subs	r3, #1
 801818c:	b29a      	uxth	r2, r3
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	69db      	ldr	r3, [r3, #28]
 801819a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801819e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80181a2:	f003 0307 	and.w	r3, r3, #7
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d053      	beq.n	8018252 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80181aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80181ae:	f003 0301 	and.w	r3, r3, #1
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d011      	beq.n	80181da <UART_RxISR_8BIT_FIFOEN+0xca>
 80181b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80181ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d00b      	beq.n	80181da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	2201      	movs	r2, #1
 80181c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80181d0:	f043 0201 	orr.w	r2, r3, #1
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80181da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80181de:	f003 0302 	and.w	r3, r3, #2
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d011      	beq.n	801820a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80181e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80181ea:	f003 0301 	and.w	r3, r3, #1
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d00b      	beq.n	801820a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2202      	movs	r2, #2
 80181f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018200:	f043 0204 	orr.w	r2, r3, #4
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801820a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801820e:	f003 0304 	and.w	r3, r3, #4
 8018212:	2b00      	cmp	r3, #0
 8018214:	d011      	beq.n	801823a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8018216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801821a:	f003 0301 	and.w	r3, r3, #1
 801821e:	2b00      	cmp	r3, #0
 8018220:	d00b      	beq.n	801823a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	2204      	movs	r2, #4
 8018228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018230:	f043 0202 	orr.w	r2, r3, #2
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018240:	2b00      	cmp	r3, #0
 8018242:	d006      	beq.n	8018252 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018244:	6878      	ldr	r0, [r7, #4]
 8018246:	f7fe fcfd 	bl	8016c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	2200      	movs	r2, #0
 801824e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018258:	b29b      	uxth	r3, r3
 801825a:	2b00      	cmp	r3, #0
 801825c:	d171      	bne.n	8018342 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018266:	e853 3f00 	ldrex	r3, [r3]
 801826a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801826c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801826e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	461a      	mov	r2, r3
 801827c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018280:	66bb      	str	r3, [r7, #104]	; 0x68
 8018282:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018284:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8018286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018288:	e841 2300 	strex	r3, r2, [r1]
 801828c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801828e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018290:	2b00      	cmp	r3, #0
 8018292:	d1e4      	bne.n	801825e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	3308      	adds	r3, #8
 801829a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801829c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801829e:	e853 3f00 	ldrex	r3, [r3]
 80182a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80182a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80182a6:	4b56      	ldr	r3, [pc, #344]	; (8018400 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80182a8:	4013      	ands	r3, r2
 80182aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	3308      	adds	r3, #8
 80182b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80182b4:	657a      	str	r2, [r7, #84]	; 0x54
 80182b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80182ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80182bc:	e841 2300 	strex	r3, r2, [r1]
 80182c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80182c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d1e5      	bne.n	8018294 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	2220      	movs	r2, #32
 80182cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2200      	movs	r2, #0
 80182d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d12e      	bne.n	801833c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2200      	movs	r2, #0
 80182e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182ec:	e853 3f00 	ldrex	r3, [r3]
 80182f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80182f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f4:	f023 0310 	bic.w	r3, r3, #16
 80182f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	461a      	mov	r2, r3
 8018300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018302:	643b      	str	r3, [r7, #64]	; 0x40
 8018304:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018306:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801830a:	e841 2300 	strex	r3, r2, [r1]
 801830e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018312:	2b00      	cmp	r3, #0
 8018314:	d1e6      	bne.n	80182e4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	69db      	ldr	r3, [r3, #28]
 801831c:	f003 0310 	and.w	r3, r3, #16
 8018320:	2b10      	cmp	r3, #16
 8018322:	d103      	bne.n	801832c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	2210      	movs	r2, #16
 801832a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018332:	4619      	mov	r1, r3
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f7fe fc8f 	bl	8016c58 <HAL_UARTEx_RxEventCallback>
 801833a:	e002      	b.n	8018342 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f7f2 fc9f 	bl	800ac80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018342:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8018346:	2b00      	cmp	r3, #0
 8018348:	d006      	beq.n	8018358 <UART_RxISR_8BIT_FIFOEN+0x248>
 801834a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801834e:	f003 0320 	and.w	r3, r3, #32
 8018352:	2b00      	cmp	r3, #0
 8018354:	f47f af00 	bne.w	8018158 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801835e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018362:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8018366:	2b00      	cmp	r3, #0
 8018368:	d045      	beq.n	80183f6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018370:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8018374:	429a      	cmp	r2, r3
 8018376:	d23e      	bcs.n	80183f6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	3308      	adds	r3, #8
 801837e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018380:	6a3b      	ldr	r3, [r7, #32]
 8018382:	e853 3f00 	ldrex	r3, [r3]
 8018386:	61fb      	str	r3, [r7, #28]
   return(result);
 8018388:	69fb      	ldr	r3, [r7, #28]
 801838a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801838e:	673b      	str	r3, [r7, #112]	; 0x70
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	3308      	adds	r3, #8
 8018396:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018398:	62fa      	str	r2, [r7, #44]	; 0x2c
 801839a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801839c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801839e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183a0:	e841 2300 	strex	r3, r2, [r1]
 80183a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80183a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d1e5      	bne.n	8018378 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	4a15      	ldr	r2, [pc, #84]	; (8018404 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80183b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	e853 3f00 	ldrex	r3, [r3]
 80183be:	60bb      	str	r3, [r7, #8]
   return(result);
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	f043 0320 	orr.w	r3, r3, #32
 80183c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	461a      	mov	r2, r3
 80183ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80183d0:	61bb      	str	r3, [r7, #24]
 80183d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183d4:	6979      	ldr	r1, [r7, #20]
 80183d6:	69ba      	ldr	r2, [r7, #24]
 80183d8:	e841 2300 	strex	r3, r2, [r1]
 80183dc:	613b      	str	r3, [r7, #16]
   return(result);
 80183de:	693b      	ldr	r3, [r7, #16]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d1e6      	bne.n	80183b2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80183e4:	e007      	b.n	80183f6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	699a      	ldr	r2, [r3, #24]
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	f042 0208 	orr.w	r2, r2, #8
 80183f4:	619a      	str	r2, [r3, #24]
}
 80183f6:	bf00      	nop
 80183f8:	3798      	adds	r7, #152	; 0x98
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}
 80183fe:	bf00      	nop
 8018400:	effffffe 	.word	0xeffffffe
 8018404:	08017e4f 	.word	0x08017e4f

08018408 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b0a8      	sub	sp, #160	; 0xa0
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018416:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	69db      	ldr	r3, [r3, #28]
 8018420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	689b      	ldr	r3, [r3, #8]
 8018434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801843e:	2b22      	cmp	r3, #34	; 0x22
 8018440:	f040 8151 	bne.w	80186e6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801844a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801844e:	e0f8      	b.n	8018642 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018456:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801845e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8018462:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8018466:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801846a:	4013      	ands	r3, r2
 801846c:	b29a      	uxth	r2, r3
 801846e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018472:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018478:	1c9a      	adds	r2, r3, #2
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018484:	b29b      	uxth	r3, r3
 8018486:	3b01      	subs	r3, #1
 8018488:	b29a      	uxth	r2, r3
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	69db      	ldr	r3, [r3, #28]
 8018496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801849a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801849e:	f003 0307 	and.w	r3, r3, #7
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d053      	beq.n	801854e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80184a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80184aa:	f003 0301 	and.w	r3, r3, #1
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d011      	beq.n	80184d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80184b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80184b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d00b      	beq.n	80184d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	2201      	movs	r2, #1
 80184c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80184cc:	f043 0201 	orr.w	r2, r3, #1
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80184d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80184da:	f003 0302 	and.w	r3, r3, #2
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d011      	beq.n	8018506 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80184e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80184e6:	f003 0301 	and.w	r3, r3, #1
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d00b      	beq.n	8018506 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	2202      	movs	r2, #2
 80184f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80184fc:	f043 0204 	orr.w	r2, r3, #4
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801850a:	f003 0304 	and.w	r3, r3, #4
 801850e:	2b00      	cmp	r3, #0
 8018510:	d011      	beq.n	8018536 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8018512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018516:	f003 0301 	and.w	r3, r3, #1
 801851a:	2b00      	cmp	r3, #0
 801851c:	d00b      	beq.n	8018536 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	2204      	movs	r2, #4
 8018524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801852c:	f043 0202 	orr.w	r2, r3, #2
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801853c:	2b00      	cmp	r3, #0
 801853e:	d006      	beq.n	801854e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f7fe fb7f 	bl	8016c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	2200      	movs	r2, #0
 801854a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018554:	b29b      	uxth	r3, r3
 8018556:	2b00      	cmp	r3, #0
 8018558:	d173      	bne.n	8018642 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018562:	e853 3f00 	ldrex	r3, [r3]
 8018566:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8018568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801856a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801856e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	461a      	mov	r2, r3
 8018578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801857c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801857e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018580:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018582:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018584:	e841 2300 	strex	r3, r2, [r1]
 8018588:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801858a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801858c:	2b00      	cmp	r3, #0
 801858e:	d1e4      	bne.n	801855a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	3308      	adds	r3, #8
 8018596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801859a:	e853 3f00 	ldrex	r3, [r3]
 801859e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80185a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80185a2:	4b57      	ldr	r3, [pc, #348]	; (8018700 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80185a4:	4013      	ands	r3, r2
 80185a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	3308      	adds	r3, #8
 80185b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80185b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80185b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80185b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80185ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80185bc:	e841 2300 	strex	r3, r2, [r1]
 80185c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80185c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d1e3      	bne.n	8018590 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2220      	movs	r2, #32
 80185cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2200      	movs	r2, #0
 80185d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185da:	2b01      	cmp	r3, #1
 80185dc:	d12e      	bne.n	801863c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	2200      	movs	r2, #0
 80185e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ec:	e853 3f00 	ldrex	r3, [r3]
 80185f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80185f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185f4:	f023 0310 	bic.w	r3, r3, #16
 80185f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	461a      	mov	r2, r3
 8018600:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018602:	647b      	str	r3, [r7, #68]	; 0x44
 8018604:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801860a:	e841 2300 	strex	r3, r2, [r1]
 801860e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018612:	2b00      	cmp	r3, #0
 8018614:	d1e6      	bne.n	80185e4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	69db      	ldr	r3, [r3, #28]
 801861c:	f003 0310 	and.w	r3, r3, #16
 8018620:	2b10      	cmp	r3, #16
 8018622:	d103      	bne.n	801862c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	2210      	movs	r2, #16
 801862a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018632:	4619      	mov	r1, r3
 8018634:	6878      	ldr	r0, [r7, #4]
 8018636:	f7fe fb0f 	bl	8016c58 <HAL_UARTEx_RxEventCallback>
 801863a:	e002      	b.n	8018642 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7f2 fb1f 	bl	800ac80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018642:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018646:	2b00      	cmp	r3, #0
 8018648:	d006      	beq.n	8018658 <UART_RxISR_16BIT_FIFOEN+0x250>
 801864a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801864e:	f003 0320 	and.w	r3, r3, #32
 8018652:	2b00      	cmp	r3, #0
 8018654:	f47f aefc 	bne.w	8018450 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801865e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018662:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8018666:	2b00      	cmp	r3, #0
 8018668:	d045      	beq.n	80186f6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018670:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8018674:	429a      	cmp	r2, r3
 8018676:	d23e      	bcs.n	80186f6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	3308      	adds	r3, #8
 801867e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018682:	e853 3f00 	ldrex	r3, [r3]
 8018686:	623b      	str	r3, [r7, #32]
   return(result);
 8018688:	6a3b      	ldr	r3, [r7, #32]
 801868a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801868e:	677b      	str	r3, [r7, #116]	; 0x74
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	3308      	adds	r3, #8
 8018696:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018698:	633a      	str	r2, [r7, #48]	; 0x30
 801869a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801869c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801869e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186a0:	e841 2300 	strex	r3, r2, [r1]
 80186a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80186a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d1e5      	bne.n	8018678 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	4a15      	ldr	r2, [pc, #84]	; (8018704 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80186b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	e853 3f00 	ldrex	r3, [r3]
 80186be:	60fb      	str	r3, [r7, #12]
   return(result);
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	f043 0320 	orr.w	r3, r3, #32
 80186c6:	673b      	str	r3, [r7, #112]	; 0x70
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	461a      	mov	r2, r3
 80186ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80186d0:	61fb      	str	r3, [r7, #28]
 80186d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186d4:	69b9      	ldr	r1, [r7, #24]
 80186d6:	69fa      	ldr	r2, [r7, #28]
 80186d8:	e841 2300 	strex	r3, r2, [r1]
 80186dc:	617b      	str	r3, [r7, #20]
   return(result);
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d1e6      	bne.n	80186b2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80186e4:	e007      	b.n	80186f6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	699a      	ldr	r2, [r3, #24]
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	f042 0208 	orr.w	r2, r2, #8
 80186f4:	619a      	str	r2, [r3, #24]
}
 80186f6:	bf00      	nop
 80186f8:	37a0      	adds	r7, #160	; 0xa0
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
 80186fe:	bf00      	nop
 8018700:	effffffe 	.word	0xeffffffe
 8018704:	08017faf 	.word	0x08017faf

08018708 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018708:	b480      	push	{r7}
 801870a:	b083      	sub	sp, #12
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018710:	bf00      	nop
 8018712:	370c      	adds	r7, #12
 8018714:	46bd      	mov	sp, r7
 8018716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871a:	4770      	bx	lr

0801871c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801871c:	b480      	push	{r7}
 801871e:	b083      	sub	sp, #12
 8018720:	af00      	add	r7, sp, #0
 8018722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018724:	bf00      	nop
 8018726:	370c      	adds	r7, #12
 8018728:	46bd      	mov	sp, r7
 801872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801872e:	4770      	bx	lr

08018730 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018730:	b480      	push	{r7}
 8018732:	b083      	sub	sp, #12
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018738:	bf00      	nop
 801873a:	370c      	adds	r7, #12
 801873c:	46bd      	mov	sp, r7
 801873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018742:	4770      	bx	lr

08018744 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b084      	sub	sp, #16
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018752:	2b01      	cmp	r3, #1
 8018754:	d101      	bne.n	801875a <HAL_UARTEx_EnableFifoMode+0x16>
 8018756:	2302      	movs	r3, #2
 8018758:	e02b      	b.n	80187b2 <HAL_UARTEx_EnableFifoMode+0x6e>
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	2201      	movs	r2, #1
 801875e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2224      	movs	r2, #36	; 0x24
 8018766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	681a      	ldr	r2, [r3, #0]
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	f022 0201 	bic.w	r2, r2, #1
 8018780:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018788:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8018790:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	68fa      	ldr	r2, [r7, #12]
 8018798:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801879a:	6878      	ldr	r0, [r7, #4]
 801879c:	f000 f8c2 	bl	8018924 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	2220      	movs	r2, #32
 80187a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2200      	movs	r2, #0
 80187ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80187b0:	2300      	movs	r3, #0
}
 80187b2:	4618      	mov	r0, r3
 80187b4:	3710      	adds	r7, #16
 80187b6:	46bd      	mov	sp, r7
 80187b8:	bd80      	pop	{r7, pc}

080187ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80187ba:	b480      	push	{r7}
 80187bc:	b085      	sub	sp, #20
 80187be:	af00      	add	r7, sp, #0
 80187c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80187c8:	2b01      	cmp	r3, #1
 80187ca:	d101      	bne.n	80187d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80187cc:	2302      	movs	r3, #2
 80187ce:	e027      	b.n	8018820 <HAL_UARTEx_DisableFifoMode+0x66>
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2201      	movs	r2, #1
 80187d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2224      	movs	r2, #36	; 0x24
 80187dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	681a      	ldr	r2, [r3, #0]
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	f022 0201 	bic.w	r2, r2, #1
 80187f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80187fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	2200      	movs	r2, #0
 8018804:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	68fa      	ldr	r2, [r7, #12]
 801880c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	2220      	movs	r2, #32
 8018812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	2200      	movs	r2, #0
 801881a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801881e:	2300      	movs	r3, #0
}
 8018820:	4618      	mov	r0, r3
 8018822:	3714      	adds	r7, #20
 8018824:	46bd      	mov	sp, r7
 8018826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882a:	4770      	bx	lr

0801882c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b084      	sub	sp, #16
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
 8018834:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801883c:	2b01      	cmp	r3, #1
 801883e:	d101      	bne.n	8018844 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018840:	2302      	movs	r3, #2
 8018842:	e02d      	b.n	80188a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2201      	movs	r2, #1
 8018848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	2224      	movs	r2, #36	; 0x24
 8018850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	681a      	ldr	r2, [r3, #0]
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	f022 0201 	bic.w	r2, r2, #1
 801886a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	689b      	ldr	r3, [r3, #8]
 8018872:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	683a      	ldr	r2, [r7, #0]
 801887c:	430a      	orrs	r2, r1
 801887e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f000 f84f 	bl	8018924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	68fa      	ldr	r2, [r7, #12]
 801888c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2220      	movs	r2, #32
 8018892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2200      	movs	r2, #0
 801889a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801889e:	2300      	movs	r3, #0
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3710      	adds	r7, #16
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b084      	sub	sp, #16
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
 80188b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d101      	bne.n	80188c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80188bc:	2302      	movs	r3, #2
 80188be:	e02d      	b.n	801891c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	2201      	movs	r2, #1
 80188c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2224      	movs	r2, #36	; 0x24
 80188cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	681a      	ldr	r2, [r3, #0]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	f022 0201 	bic.w	r2, r2, #1
 80188e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	689b      	ldr	r3, [r3, #8]
 80188ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	683a      	ldr	r2, [r7, #0]
 80188f8:	430a      	orrs	r2, r1
 80188fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f000 f811 	bl	8018924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	68fa      	ldr	r2, [r7, #12]
 8018908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2220      	movs	r2, #32
 801890e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	2200      	movs	r2, #0
 8018916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801891a:	2300      	movs	r3, #0
}
 801891c:	4618      	mov	r0, r3
 801891e:	3710      	adds	r7, #16
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018924:	b480      	push	{r7}
 8018926:	b085      	sub	sp, #20
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018930:	2b00      	cmp	r3, #0
 8018932:	d108      	bne.n	8018946 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	2201      	movs	r2, #1
 8018938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	2201      	movs	r2, #1
 8018940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018944:	e031      	b.n	80189aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018946:	2310      	movs	r3, #16
 8018948:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801894a:	2310      	movs	r3, #16
 801894c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	689b      	ldr	r3, [r3, #8]
 8018954:	0e5b      	lsrs	r3, r3, #25
 8018956:	b2db      	uxtb	r3, r3
 8018958:	f003 0307 	and.w	r3, r3, #7
 801895c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	689b      	ldr	r3, [r3, #8]
 8018964:	0f5b      	lsrs	r3, r3, #29
 8018966:	b2db      	uxtb	r3, r3
 8018968:	f003 0307 	and.w	r3, r3, #7
 801896c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801896e:	7bbb      	ldrb	r3, [r7, #14]
 8018970:	7b3a      	ldrb	r2, [r7, #12]
 8018972:	4911      	ldr	r1, [pc, #68]	; (80189b8 <UARTEx_SetNbDataToProcess+0x94>)
 8018974:	5c8a      	ldrb	r2, [r1, r2]
 8018976:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801897a:	7b3a      	ldrb	r2, [r7, #12]
 801897c:	490f      	ldr	r1, [pc, #60]	; (80189bc <UARTEx_SetNbDataToProcess+0x98>)
 801897e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018980:	fb93 f3f2 	sdiv	r3, r3, r2
 8018984:	b29a      	uxth	r2, r3
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801898c:	7bfb      	ldrb	r3, [r7, #15]
 801898e:	7b7a      	ldrb	r2, [r7, #13]
 8018990:	4909      	ldr	r1, [pc, #36]	; (80189b8 <UARTEx_SetNbDataToProcess+0x94>)
 8018992:	5c8a      	ldrb	r2, [r1, r2]
 8018994:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018998:	7b7a      	ldrb	r2, [r7, #13]
 801899a:	4908      	ldr	r1, [pc, #32]	; (80189bc <UARTEx_SetNbDataToProcess+0x98>)
 801899c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801899e:	fb93 f3f2 	sdiv	r3, r3, r2
 80189a2:	b29a      	uxth	r2, r3
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80189aa:	bf00      	nop
 80189ac:	3714      	adds	r7, #20
 80189ae:	46bd      	mov	sp, r7
 80189b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b4:	4770      	bx	lr
 80189b6:	bf00      	nop
 80189b8:	08038af4 	.word	0x08038af4
 80189bc:	08038afc 	.word	0x08038afc

080189c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80189c0:	b084      	sub	sp, #16
 80189c2:	b580      	push	{r7, lr}
 80189c4:	b084      	sub	sp, #16
 80189c6:	af00      	add	r7, sp, #0
 80189c8:	6078      	str	r0, [r7, #4]
 80189ca:	f107 001c 	add.w	r0, r7, #28
 80189ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80189d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189d4:	2b01      	cmp	r3, #1
 80189d6:	d120      	bne.n	8018a1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	68da      	ldr	r2, [r3, #12]
 80189e8:	4b2a      	ldr	r3, [pc, #168]	; (8018a94 <USB_CoreInit+0xd4>)
 80189ea:	4013      	ands	r3, r2
 80189ec:	687a      	ldr	r2, [r7, #4]
 80189ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	68db      	ldr	r3, [r3, #12]
 80189f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80189fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80189fe:	2b01      	cmp	r3, #1
 8018a00:	d105      	bne.n	8018a0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	68db      	ldr	r3, [r3, #12]
 8018a06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f001 fc04 	bl	801a21c <USB_CoreReset>
 8018a14:	4603      	mov	r3, r0
 8018a16:	73fb      	strb	r3, [r7, #15]
 8018a18:	e01a      	b.n	8018a50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	68db      	ldr	r3, [r3, #12]
 8018a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018a26:	6878      	ldr	r0, [r7, #4]
 8018a28:	f001 fbf8 	bl	801a21c <USB_CoreReset>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8018a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d106      	bne.n	8018a44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	639a      	str	r2, [r3, #56]	; 0x38
 8018a42:	e005      	b.n	8018a50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8018a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a52:	2b01      	cmp	r3, #1
 8018a54:	d116      	bne.n	8018a84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a5a:	b29a      	uxth	r2, r3
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018a64:	4b0c      	ldr	r3, [pc, #48]	; (8018a98 <USB_CoreInit+0xd8>)
 8018a66:	4313      	orrs	r3, r2
 8018a68:	687a      	ldr	r2, [r7, #4]
 8018a6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	689b      	ldr	r3, [r3, #8]
 8018a70:	f043 0206 	orr.w	r2, r3, #6
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	689b      	ldr	r3, [r3, #8]
 8018a7c:	f043 0220 	orr.w	r2, r3, #32
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8018a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3710      	adds	r7, #16
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018a90:	b004      	add	sp, #16
 8018a92:	4770      	bx	lr
 8018a94:	ffbdffbf 	.word	0xffbdffbf
 8018a98:	03ee0000 	.word	0x03ee0000

08018a9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8018a9c:	b480      	push	{r7}
 8018a9e:	b087      	sub	sp, #28
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	60f8      	str	r0, [r7, #12]
 8018aa4:	60b9      	str	r1, [r7, #8]
 8018aa6:	4613      	mov	r3, r2
 8018aa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8018aaa:	79fb      	ldrb	r3, [r7, #7]
 8018aac:	2b02      	cmp	r3, #2
 8018aae:	d165      	bne.n	8018b7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	4a41      	ldr	r2, [pc, #260]	; (8018bb8 <USB_SetTurnaroundTime+0x11c>)
 8018ab4:	4293      	cmp	r3, r2
 8018ab6:	d906      	bls.n	8018ac6 <USB_SetTurnaroundTime+0x2a>
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	4a40      	ldr	r2, [pc, #256]	; (8018bbc <USB_SetTurnaroundTime+0x120>)
 8018abc:	4293      	cmp	r3, r2
 8018abe:	d202      	bcs.n	8018ac6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8018ac0:	230f      	movs	r3, #15
 8018ac2:	617b      	str	r3, [r7, #20]
 8018ac4:	e062      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8018ac6:	68bb      	ldr	r3, [r7, #8]
 8018ac8:	4a3c      	ldr	r2, [pc, #240]	; (8018bbc <USB_SetTurnaroundTime+0x120>)
 8018aca:	4293      	cmp	r3, r2
 8018acc:	d306      	bcc.n	8018adc <USB_SetTurnaroundTime+0x40>
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	4a3b      	ldr	r2, [pc, #236]	; (8018bc0 <USB_SetTurnaroundTime+0x124>)
 8018ad2:	4293      	cmp	r3, r2
 8018ad4:	d202      	bcs.n	8018adc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8018ad6:	230e      	movs	r3, #14
 8018ad8:	617b      	str	r3, [r7, #20]
 8018ada:	e057      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	4a38      	ldr	r2, [pc, #224]	; (8018bc0 <USB_SetTurnaroundTime+0x124>)
 8018ae0:	4293      	cmp	r3, r2
 8018ae2:	d306      	bcc.n	8018af2 <USB_SetTurnaroundTime+0x56>
 8018ae4:	68bb      	ldr	r3, [r7, #8]
 8018ae6:	4a37      	ldr	r2, [pc, #220]	; (8018bc4 <USB_SetTurnaroundTime+0x128>)
 8018ae8:	4293      	cmp	r3, r2
 8018aea:	d202      	bcs.n	8018af2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8018aec:	230d      	movs	r3, #13
 8018aee:	617b      	str	r3, [r7, #20]
 8018af0:	e04c      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	4a33      	ldr	r2, [pc, #204]	; (8018bc4 <USB_SetTurnaroundTime+0x128>)
 8018af6:	4293      	cmp	r3, r2
 8018af8:	d306      	bcc.n	8018b08 <USB_SetTurnaroundTime+0x6c>
 8018afa:	68bb      	ldr	r3, [r7, #8]
 8018afc:	4a32      	ldr	r2, [pc, #200]	; (8018bc8 <USB_SetTurnaroundTime+0x12c>)
 8018afe:	4293      	cmp	r3, r2
 8018b00:	d802      	bhi.n	8018b08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8018b02:	230c      	movs	r3, #12
 8018b04:	617b      	str	r3, [r7, #20]
 8018b06:	e041      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	4a2f      	ldr	r2, [pc, #188]	; (8018bc8 <USB_SetTurnaroundTime+0x12c>)
 8018b0c:	4293      	cmp	r3, r2
 8018b0e:	d906      	bls.n	8018b1e <USB_SetTurnaroundTime+0x82>
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	4a2e      	ldr	r2, [pc, #184]	; (8018bcc <USB_SetTurnaroundTime+0x130>)
 8018b14:	4293      	cmp	r3, r2
 8018b16:	d802      	bhi.n	8018b1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8018b18:	230b      	movs	r3, #11
 8018b1a:	617b      	str	r3, [r7, #20]
 8018b1c:	e036      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8018b1e:	68bb      	ldr	r3, [r7, #8]
 8018b20:	4a2a      	ldr	r2, [pc, #168]	; (8018bcc <USB_SetTurnaroundTime+0x130>)
 8018b22:	4293      	cmp	r3, r2
 8018b24:	d906      	bls.n	8018b34 <USB_SetTurnaroundTime+0x98>
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	4a29      	ldr	r2, [pc, #164]	; (8018bd0 <USB_SetTurnaroundTime+0x134>)
 8018b2a:	4293      	cmp	r3, r2
 8018b2c:	d802      	bhi.n	8018b34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8018b2e:	230a      	movs	r3, #10
 8018b30:	617b      	str	r3, [r7, #20]
 8018b32:	e02b      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8018b34:	68bb      	ldr	r3, [r7, #8]
 8018b36:	4a26      	ldr	r2, [pc, #152]	; (8018bd0 <USB_SetTurnaroundTime+0x134>)
 8018b38:	4293      	cmp	r3, r2
 8018b3a:	d906      	bls.n	8018b4a <USB_SetTurnaroundTime+0xae>
 8018b3c:	68bb      	ldr	r3, [r7, #8]
 8018b3e:	4a25      	ldr	r2, [pc, #148]	; (8018bd4 <USB_SetTurnaroundTime+0x138>)
 8018b40:	4293      	cmp	r3, r2
 8018b42:	d202      	bcs.n	8018b4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8018b44:	2309      	movs	r3, #9
 8018b46:	617b      	str	r3, [r7, #20]
 8018b48:	e020      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8018b4a:	68bb      	ldr	r3, [r7, #8]
 8018b4c:	4a21      	ldr	r2, [pc, #132]	; (8018bd4 <USB_SetTurnaroundTime+0x138>)
 8018b4e:	4293      	cmp	r3, r2
 8018b50:	d306      	bcc.n	8018b60 <USB_SetTurnaroundTime+0xc4>
 8018b52:	68bb      	ldr	r3, [r7, #8]
 8018b54:	4a20      	ldr	r2, [pc, #128]	; (8018bd8 <USB_SetTurnaroundTime+0x13c>)
 8018b56:	4293      	cmp	r3, r2
 8018b58:	d802      	bhi.n	8018b60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8018b5a:	2308      	movs	r3, #8
 8018b5c:	617b      	str	r3, [r7, #20]
 8018b5e:	e015      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	4a1d      	ldr	r2, [pc, #116]	; (8018bd8 <USB_SetTurnaroundTime+0x13c>)
 8018b64:	4293      	cmp	r3, r2
 8018b66:	d906      	bls.n	8018b76 <USB_SetTurnaroundTime+0xda>
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	4a1c      	ldr	r2, [pc, #112]	; (8018bdc <USB_SetTurnaroundTime+0x140>)
 8018b6c:	4293      	cmp	r3, r2
 8018b6e:	d202      	bcs.n	8018b76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8018b70:	2307      	movs	r3, #7
 8018b72:	617b      	str	r3, [r7, #20]
 8018b74:	e00a      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8018b76:	2306      	movs	r3, #6
 8018b78:	617b      	str	r3, [r7, #20]
 8018b7a:	e007      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8018b7c:	79fb      	ldrb	r3, [r7, #7]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d102      	bne.n	8018b88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8018b82:	2309      	movs	r3, #9
 8018b84:	617b      	str	r3, [r7, #20]
 8018b86:	e001      	b.n	8018b8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8018b88:	2309      	movs	r3, #9
 8018b8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	68db      	ldr	r3, [r3, #12]
 8018b90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	68da      	ldr	r2, [r3, #12]
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	029b      	lsls	r3, r3, #10
 8018ba0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8018ba4:	431a      	orrs	r2, r3
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8018baa:	2300      	movs	r3, #0
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	371c      	adds	r7, #28
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb6:	4770      	bx	lr
 8018bb8:	00d8acbf 	.word	0x00d8acbf
 8018bbc:	00e4e1c0 	.word	0x00e4e1c0
 8018bc0:	00f42400 	.word	0x00f42400
 8018bc4:	01067380 	.word	0x01067380
 8018bc8:	011a499f 	.word	0x011a499f
 8018bcc:	01312cff 	.word	0x01312cff
 8018bd0:	014ca43f 	.word	0x014ca43f
 8018bd4:	016e3600 	.word	0x016e3600
 8018bd8:	01a6ab1f 	.word	0x01a6ab1f
 8018bdc:	01e84800 	.word	0x01e84800

08018be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8018be0:	b480      	push	{r7}
 8018be2:	b083      	sub	sp, #12
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	689b      	ldr	r3, [r3, #8]
 8018bec:	f043 0201 	orr.w	r2, r3, #1
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8018bf4:	2300      	movs	r3, #0
}
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	370c      	adds	r7, #12
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c00:	4770      	bx	lr

08018c02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8018c02:	b480      	push	{r7}
 8018c04:	b083      	sub	sp, #12
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	689b      	ldr	r3, [r3, #8]
 8018c0e:	f023 0201 	bic.w	r2, r3, #1
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8018c16:	2300      	movs	r3, #0
}
 8018c18:	4618      	mov	r0, r3
 8018c1a:	370c      	adds	r7, #12
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c22:	4770      	bx	lr

08018c24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b084      	sub	sp, #16
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	460b      	mov	r3, r1
 8018c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8018c30:	2300      	movs	r3, #0
 8018c32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	68db      	ldr	r3, [r3, #12]
 8018c38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8018c40:	78fb      	ldrb	r3, [r7, #3]
 8018c42:	2b01      	cmp	r3, #1
 8018c44:	d115      	bne.n	8018c72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	68db      	ldr	r3, [r3, #12]
 8018c4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8018c52:	2001      	movs	r0, #1
 8018c54:	f7f3 f92a 	bl	800beac <HAL_Delay>
      ms++;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	3301      	adds	r3, #1
 8018c5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f001 fa4b 	bl	801a0fa <USB_GetMode>
 8018c64:	4603      	mov	r3, r0
 8018c66:	2b01      	cmp	r3, #1
 8018c68:	d01e      	beq.n	8018ca8 <USB_SetCurrentMode+0x84>
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	2b31      	cmp	r3, #49	; 0x31
 8018c6e:	d9f0      	bls.n	8018c52 <USB_SetCurrentMode+0x2e>
 8018c70:	e01a      	b.n	8018ca8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8018c72:	78fb      	ldrb	r3, [r7, #3]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d115      	bne.n	8018ca4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	68db      	ldr	r3, [r3, #12]
 8018c7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8018c84:	2001      	movs	r0, #1
 8018c86:	f7f3 f911 	bl	800beac <HAL_Delay>
      ms++;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8018c90:	6878      	ldr	r0, [r7, #4]
 8018c92:	f001 fa32 	bl	801a0fa <USB_GetMode>
 8018c96:	4603      	mov	r3, r0
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d005      	beq.n	8018ca8 <USB_SetCurrentMode+0x84>
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	2b31      	cmp	r3, #49	; 0x31
 8018ca0:	d9f0      	bls.n	8018c84 <USB_SetCurrentMode+0x60>
 8018ca2:	e001      	b.n	8018ca8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	e005      	b.n	8018cb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	2b32      	cmp	r3, #50	; 0x32
 8018cac:	d101      	bne.n	8018cb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8018cae:	2301      	movs	r3, #1
 8018cb0:	e000      	b.n	8018cb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8018cb2:	2300      	movs	r3, #0
}
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	3710      	adds	r7, #16
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}

08018cbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018cbc:	b084      	sub	sp, #16
 8018cbe:	b580      	push	{r7, lr}
 8018cc0:	b086      	sub	sp, #24
 8018cc2:	af00      	add	r7, sp, #0
 8018cc4:	6078      	str	r0, [r7, #4]
 8018cc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8018cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	613b      	str	r3, [r7, #16]
 8018cda:	e009      	b.n	8018cf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8018cdc:	687a      	ldr	r2, [r7, #4]
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	3340      	adds	r3, #64	; 0x40
 8018ce2:	009b      	lsls	r3, r3, #2
 8018ce4:	4413      	add	r3, r2
 8018ce6:	2200      	movs	r2, #0
 8018ce8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8018cea:	693b      	ldr	r3, [r7, #16]
 8018cec:	3301      	adds	r3, #1
 8018cee:	613b      	str	r3, [r7, #16]
 8018cf0:	693b      	ldr	r3, [r7, #16]
 8018cf2:	2b0e      	cmp	r3, #14
 8018cf4:	d9f2      	bls.n	8018cdc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8018cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d11c      	bne.n	8018d36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018d02:	685b      	ldr	r3, [r3, #4]
 8018d04:	68fa      	ldr	r2, [r7, #12]
 8018d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018d0a:	f043 0302 	orr.w	r3, r3, #2
 8018d0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	601a      	str	r2, [r3, #0]
 8018d34:	e005      	b.n	8018d42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018d48:	461a      	mov	r2, r3
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018d54:	4619      	mov	r1, r3
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018d5c:	461a      	mov	r2, r3
 8018d5e:	680b      	ldr	r3, [r1, #0]
 8018d60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d64:	2b01      	cmp	r3, #1
 8018d66:	d10c      	bne.n	8018d82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8018d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d104      	bne.n	8018d78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8018d6e:	2100      	movs	r1, #0
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f000 f965 	bl	8019040 <USB_SetDevSpeed>
 8018d76:	e008      	b.n	8018d8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8018d78:	2101      	movs	r1, #1
 8018d7a:	6878      	ldr	r0, [r7, #4]
 8018d7c:	f000 f960 	bl	8019040 <USB_SetDevSpeed>
 8018d80:	e003      	b.n	8018d8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8018d82:	2103      	movs	r1, #3
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f000 f95b 	bl	8019040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8018d8a:	2110      	movs	r1, #16
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f000 f8f3 	bl	8018f78 <USB_FlushTxFifo>
 8018d92:	4603      	mov	r3, r0
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d001      	beq.n	8018d9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8018d98:	2301      	movs	r3, #1
 8018d9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f000 f91f 	bl	8018fe0 <USB_FlushRxFifo>
 8018da2:	4603      	mov	r3, r0
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d001      	beq.n	8018dac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8018da8:	2301      	movs	r3, #1
 8018daa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018db2:	461a      	mov	r2, r3
 8018db4:	2300      	movs	r3, #0
 8018db6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018dca:	461a      	mov	r2, r3
 8018dcc:	2300      	movs	r3, #0
 8018dce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	613b      	str	r3, [r7, #16]
 8018dd4:	e043      	b.n	8018e5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8018dd6:	693b      	ldr	r3, [r7, #16]
 8018dd8:	015a      	lsls	r2, r3, #5
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	4413      	add	r3, r2
 8018dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018dec:	d118      	bne.n	8018e20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d10a      	bne.n	8018e0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8018df4:	693b      	ldr	r3, [r7, #16]
 8018df6:	015a      	lsls	r2, r3, #5
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	4413      	add	r3, r2
 8018dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e00:	461a      	mov	r2, r3
 8018e02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018e06:	6013      	str	r3, [r2, #0]
 8018e08:	e013      	b.n	8018e32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8018e0a:	693b      	ldr	r3, [r7, #16]
 8018e0c:	015a      	lsls	r2, r3, #5
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	4413      	add	r3, r2
 8018e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e16:	461a      	mov	r2, r3
 8018e18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8018e1c:	6013      	str	r3, [r2, #0]
 8018e1e:	e008      	b.n	8018e32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8018e20:	693b      	ldr	r3, [r7, #16]
 8018e22:	015a      	lsls	r2, r3, #5
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	4413      	add	r3, r2
 8018e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e2c:	461a      	mov	r2, r3
 8018e2e:	2300      	movs	r3, #0
 8018e30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	015a      	lsls	r2, r3, #5
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	4413      	add	r3, r2
 8018e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e3e:	461a      	mov	r2, r3
 8018e40:	2300      	movs	r3, #0
 8018e42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	015a      	lsls	r2, r3, #5
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	4413      	add	r3, r2
 8018e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e50:	461a      	mov	r2, r3
 8018e52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018e56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018e58:	693b      	ldr	r3, [r7, #16]
 8018e5a:	3301      	adds	r3, #1
 8018e5c:	613b      	str	r3, [r7, #16]
 8018e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e60:	693a      	ldr	r2, [r7, #16]
 8018e62:	429a      	cmp	r2, r3
 8018e64:	d3b7      	bcc.n	8018dd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018e66:	2300      	movs	r3, #0
 8018e68:	613b      	str	r3, [r7, #16]
 8018e6a:	e043      	b.n	8018ef4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8018e6c:	693b      	ldr	r3, [r7, #16]
 8018e6e:	015a      	lsls	r2, r3, #5
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	4413      	add	r3, r2
 8018e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018e82:	d118      	bne.n	8018eb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d10a      	bne.n	8018ea0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8018e8a:	693b      	ldr	r3, [r7, #16]
 8018e8c:	015a      	lsls	r2, r3, #5
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	4413      	add	r3, r2
 8018e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018e96:	461a      	mov	r2, r3
 8018e98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018e9c:	6013      	str	r3, [r2, #0]
 8018e9e:	e013      	b.n	8018ec8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8018ea0:	693b      	ldr	r3, [r7, #16]
 8018ea2:	015a      	lsls	r2, r3, #5
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	4413      	add	r3, r2
 8018ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018eac:	461a      	mov	r2, r3
 8018eae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8018eb2:	6013      	str	r3, [r2, #0]
 8018eb4:	e008      	b.n	8018ec8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8018eb6:	693b      	ldr	r3, [r7, #16]
 8018eb8:	015a      	lsls	r2, r3, #5
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	4413      	add	r3, r2
 8018ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8018ec8:	693b      	ldr	r3, [r7, #16]
 8018eca:	015a      	lsls	r2, r3, #5
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	4413      	add	r3, r2
 8018ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8018eda:	693b      	ldr	r3, [r7, #16]
 8018edc:	015a      	lsls	r2, r3, #5
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	4413      	add	r3, r2
 8018ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018ee6:	461a      	mov	r2, r3
 8018ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018eec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018eee:	693b      	ldr	r3, [r7, #16]
 8018ef0:	3301      	adds	r3, #1
 8018ef2:	613b      	str	r3, [r7, #16]
 8018ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef6:	693a      	ldr	r2, [r7, #16]
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d3b7      	bcc.n	8018e6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018f02:	691b      	ldr	r3, [r3, #16]
 8018f04:	68fa      	ldr	r2, [r7, #12]
 8018f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018f0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	2200      	movs	r2, #0
 8018f14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8018f1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8018f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d105      	bne.n	8018f30 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	699b      	ldr	r3, [r3, #24]
 8018f28:	f043 0210 	orr.w	r2, r3, #16
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	699a      	ldr	r2, [r3, #24]
 8018f34:	4b0e      	ldr	r3, [pc, #56]	; (8018f70 <USB_DevInit+0x2b4>)
 8018f36:	4313      	orrs	r3, r2
 8018f38:	687a      	ldr	r2, [r7, #4]
 8018f3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8018f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d005      	beq.n	8018f4e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	699b      	ldr	r3, [r3, #24]
 8018f46:	f043 0208 	orr.w	r2, r3, #8
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8018f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f50:	2b01      	cmp	r3, #1
 8018f52:	d105      	bne.n	8018f60 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	699a      	ldr	r2, [r3, #24]
 8018f58:	4b06      	ldr	r3, [pc, #24]	; (8018f74 <USB_DevInit+0x2b8>)
 8018f5a:	4313      	orrs	r3, r2
 8018f5c:	687a      	ldr	r2, [r7, #4]
 8018f5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8018f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3718      	adds	r7, #24
 8018f66:	46bd      	mov	sp, r7
 8018f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018f6c:	b004      	add	sp, #16
 8018f6e:	4770      	bx	lr
 8018f70:	803c3800 	.word	0x803c3800
 8018f74:	40000004 	.word	0x40000004

08018f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8018f78:	b480      	push	{r7}
 8018f7a:	b085      	sub	sp, #20
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
 8018f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8018f82:	2300      	movs	r3, #0
 8018f84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	3301      	adds	r3, #1
 8018f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	4a13      	ldr	r2, [pc, #76]	; (8018fdc <USB_FlushTxFifo+0x64>)
 8018f90:	4293      	cmp	r3, r2
 8018f92:	d901      	bls.n	8018f98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8018f94:	2303      	movs	r3, #3
 8018f96:	e01b      	b.n	8018fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	691b      	ldr	r3, [r3, #16]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	daf2      	bge.n	8018f86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	019b      	lsls	r3, r3, #6
 8018fa8:	f043 0220 	orr.w	r2, r3, #32
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	3301      	adds	r3, #1
 8018fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	4a08      	ldr	r2, [pc, #32]	; (8018fdc <USB_FlushTxFifo+0x64>)
 8018fba:	4293      	cmp	r3, r2
 8018fbc:	d901      	bls.n	8018fc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8018fbe:	2303      	movs	r3, #3
 8018fc0:	e006      	b.n	8018fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	691b      	ldr	r3, [r3, #16]
 8018fc6:	f003 0320 	and.w	r3, r3, #32
 8018fca:	2b20      	cmp	r3, #32
 8018fcc:	d0f0      	beq.n	8018fb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8018fce:	2300      	movs	r3, #0
}
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	3714      	adds	r7, #20
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fda:	4770      	bx	lr
 8018fdc:	00030d40 	.word	0x00030d40

08018fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8018fe0:	b480      	push	{r7}
 8018fe2:	b085      	sub	sp, #20
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8018fe8:	2300      	movs	r3, #0
 8018fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	3301      	adds	r3, #1
 8018ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	4a11      	ldr	r2, [pc, #68]	; (801903c <USB_FlushRxFifo+0x5c>)
 8018ff6:	4293      	cmp	r3, r2
 8018ff8:	d901      	bls.n	8018ffe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8018ffa:	2303      	movs	r3, #3
 8018ffc:	e018      	b.n	8019030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	691b      	ldr	r3, [r3, #16]
 8019002:	2b00      	cmp	r3, #0
 8019004:	daf2      	bge.n	8018fec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8019006:	2300      	movs	r3, #0
 8019008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2210      	movs	r2, #16
 801900e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	3301      	adds	r3, #1
 8019014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	4a08      	ldr	r2, [pc, #32]	; (801903c <USB_FlushRxFifo+0x5c>)
 801901a:	4293      	cmp	r3, r2
 801901c:	d901      	bls.n	8019022 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801901e:	2303      	movs	r3, #3
 8019020:	e006      	b.n	8019030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	691b      	ldr	r3, [r3, #16]
 8019026:	f003 0310 	and.w	r3, r3, #16
 801902a:	2b10      	cmp	r3, #16
 801902c:	d0f0      	beq.n	8019010 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801902e:	2300      	movs	r3, #0
}
 8019030:	4618      	mov	r0, r3
 8019032:	3714      	adds	r7, #20
 8019034:	46bd      	mov	sp, r7
 8019036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903a:	4770      	bx	lr
 801903c:	00030d40 	.word	0x00030d40

08019040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8019040:	b480      	push	{r7}
 8019042:	b085      	sub	sp, #20
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
 8019048:	460b      	mov	r3, r1
 801904a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019056:	681a      	ldr	r2, [r3, #0]
 8019058:	78fb      	ldrb	r3, [r7, #3]
 801905a:	68f9      	ldr	r1, [r7, #12]
 801905c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019060:	4313      	orrs	r3, r2
 8019062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8019064:	2300      	movs	r3, #0
}
 8019066:	4618      	mov	r0, r3
 8019068:	3714      	adds	r7, #20
 801906a:	46bd      	mov	sp, r7
 801906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019070:	4770      	bx	lr

08019072 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8019072:	b480      	push	{r7}
 8019074:	b087      	sub	sp, #28
 8019076:	af00      	add	r7, sp, #0
 8019078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801907e:	693b      	ldr	r3, [r7, #16]
 8019080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019084:	689b      	ldr	r3, [r3, #8]
 8019086:	f003 0306 	and.w	r3, r3, #6
 801908a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d102      	bne.n	8019098 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8019092:	2300      	movs	r3, #0
 8019094:	75fb      	strb	r3, [r7, #23]
 8019096:	e00a      	b.n	80190ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	2b02      	cmp	r3, #2
 801909c:	d002      	beq.n	80190a4 <USB_GetDevSpeed+0x32>
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	2b06      	cmp	r3, #6
 80190a2:	d102      	bne.n	80190aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80190a4:	2302      	movs	r3, #2
 80190a6:	75fb      	strb	r3, [r7, #23]
 80190a8:	e001      	b.n	80190ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80190aa:	230f      	movs	r3, #15
 80190ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80190ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	371c      	adds	r7, #28
 80190b4:	46bd      	mov	sp, r7
 80190b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ba:	4770      	bx	lr

080190bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80190bc:	b480      	push	{r7}
 80190be:	b085      	sub	sp, #20
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
 80190c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	785b      	ldrb	r3, [r3, #1]
 80190d4:	2b01      	cmp	r3, #1
 80190d6:	d139      	bne.n	801914c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80190de:	69da      	ldr	r2, [r3, #28]
 80190e0:	683b      	ldr	r3, [r7, #0]
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	f003 030f 	and.w	r3, r3, #15
 80190e8:	2101      	movs	r1, #1
 80190ea:	fa01 f303 	lsl.w	r3, r1, r3
 80190ee:	b29b      	uxth	r3, r3
 80190f0:	68f9      	ldr	r1, [r7, #12]
 80190f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80190f6:	4313      	orrs	r3, r2
 80190f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80190fa:	68bb      	ldr	r3, [r7, #8]
 80190fc:	015a      	lsls	r2, r3, #5
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	4413      	add	r3, r2
 8019102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801910c:	2b00      	cmp	r3, #0
 801910e:	d153      	bne.n	80191b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	015a      	lsls	r2, r3, #5
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	4413      	add	r3, r2
 8019118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801911c:	681a      	ldr	r2, [r3, #0]
 801911e:	683b      	ldr	r3, [r7, #0]
 8019120:	68db      	ldr	r3, [r3, #12]
 8019122:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	791b      	ldrb	r3, [r3, #4]
 801912a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801912c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801912e:	68bb      	ldr	r3, [r7, #8]
 8019130:	059b      	lsls	r3, r3, #22
 8019132:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019134:	431a      	orrs	r2, r3
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	0159      	lsls	r1, r3, #5
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	440b      	add	r3, r1
 801913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019142:	4619      	mov	r1, r3
 8019144:	4b20      	ldr	r3, [pc, #128]	; (80191c8 <USB_ActivateEndpoint+0x10c>)
 8019146:	4313      	orrs	r3, r2
 8019148:	600b      	str	r3, [r1, #0]
 801914a:	e035      	b.n	80191b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019152:	69da      	ldr	r2, [r3, #28]
 8019154:	683b      	ldr	r3, [r7, #0]
 8019156:	781b      	ldrb	r3, [r3, #0]
 8019158:	f003 030f 	and.w	r3, r3, #15
 801915c:	2101      	movs	r1, #1
 801915e:	fa01 f303 	lsl.w	r3, r1, r3
 8019162:	041b      	lsls	r3, r3, #16
 8019164:	68f9      	ldr	r1, [r7, #12]
 8019166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801916a:	4313      	orrs	r3, r2
 801916c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801916e:	68bb      	ldr	r3, [r7, #8]
 8019170:	015a      	lsls	r2, r3, #5
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	4413      	add	r3, r2
 8019176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019180:	2b00      	cmp	r3, #0
 8019182:	d119      	bne.n	80191b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8019184:	68bb      	ldr	r3, [r7, #8]
 8019186:	015a      	lsls	r2, r3, #5
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	4413      	add	r3, r2
 801918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	68db      	ldr	r3, [r3, #12]
 8019196:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801919a:	683b      	ldr	r3, [r7, #0]
 801919c:	791b      	ldrb	r3, [r3, #4]
 801919e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80191a0:	430b      	orrs	r3, r1
 80191a2:	431a      	orrs	r2, r3
 80191a4:	68bb      	ldr	r3, [r7, #8]
 80191a6:	0159      	lsls	r1, r3, #5
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	440b      	add	r3, r1
 80191ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80191b0:	4619      	mov	r1, r3
 80191b2:	4b05      	ldr	r3, [pc, #20]	; (80191c8 <USB_ActivateEndpoint+0x10c>)
 80191b4:	4313      	orrs	r3, r2
 80191b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80191b8:	2300      	movs	r3, #0
}
 80191ba:	4618      	mov	r0, r3
 80191bc:	3714      	adds	r7, #20
 80191be:	46bd      	mov	sp, r7
 80191c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c4:	4770      	bx	lr
 80191c6:	bf00      	nop
 80191c8:	10008000 	.word	0x10008000

080191cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80191cc:	b480      	push	{r7}
 80191ce:	b085      	sub	sp, #20
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
 80191d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	781b      	ldrb	r3, [r3, #0]
 80191de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	785b      	ldrb	r3, [r3, #1]
 80191e4:	2b01      	cmp	r3, #1
 80191e6:	d161      	bne.n	80192ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80191e8:	68bb      	ldr	r3, [r7, #8]
 80191ea:	015a      	lsls	r2, r3, #5
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	4413      	add	r3, r2
 80191f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80191fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80191fe:	d11f      	bne.n	8019240 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8019200:	68bb      	ldr	r3, [r7, #8]
 8019202:	015a      	lsls	r2, r3, #5
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	4413      	add	r3, r2
 8019208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	68ba      	ldr	r2, [r7, #8]
 8019210:	0151      	lsls	r1, r2, #5
 8019212:	68fa      	ldr	r2, [r7, #12]
 8019214:	440a      	add	r2, r1
 8019216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801921a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801921e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8019220:	68bb      	ldr	r3, [r7, #8]
 8019222:	015a      	lsls	r2, r3, #5
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	4413      	add	r3, r2
 8019228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	68ba      	ldr	r2, [r7, #8]
 8019230:	0151      	lsls	r1, r2, #5
 8019232:	68fa      	ldr	r2, [r7, #12]
 8019234:	440a      	add	r2, r1
 8019236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801923a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801923e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	781b      	ldrb	r3, [r3, #0]
 801924c:	f003 030f 	and.w	r3, r3, #15
 8019250:	2101      	movs	r1, #1
 8019252:	fa01 f303 	lsl.w	r3, r1, r3
 8019256:	b29b      	uxth	r3, r3
 8019258:	43db      	mvns	r3, r3
 801925a:	68f9      	ldr	r1, [r7, #12]
 801925c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019260:	4013      	ands	r3, r2
 8019262:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801926a:	69da      	ldr	r2, [r3, #28]
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	781b      	ldrb	r3, [r3, #0]
 8019270:	f003 030f 	and.w	r3, r3, #15
 8019274:	2101      	movs	r1, #1
 8019276:	fa01 f303 	lsl.w	r3, r1, r3
 801927a:	b29b      	uxth	r3, r3
 801927c:	43db      	mvns	r3, r3
 801927e:	68f9      	ldr	r1, [r7, #12]
 8019280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019284:	4013      	ands	r3, r2
 8019286:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	015a      	lsls	r2, r3, #5
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	4413      	add	r3, r2
 8019290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019294:	681a      	ldr	r2, [r3, #0]
 8019296:	68bb      	ldr	r3, [r7, #8]
 8019298:	0159      	lsls	r1, r3, #5
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	440b      	add	r3, r1
 801929e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80192a2:	4619      	mov	r1, r3
 80192a4:	4b35      	ldr	r3, [pc, #212]	; (801937c <USB_DeactivateEndpoint+0x1b0>)
 80192a6:	4013      	ands	r3, r2
 80192a8:	600b      	str	r3, [r1, #0]
 80192aa:	e060      	b.n	801936e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80192ac:	68bb      	ldr	r3, [r7, #8]
 80192ae:	015a      	lsls	r2, r3, #5
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	4413      	add	r3, r2
 80192b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80192be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80192c2:	d11f      	bne.n	8019304 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	015a      	lsls	r2, r3, #5
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	4413      	add	r3, r2
 80192cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	68ba      	ldr	r2, [r7, #8]
 80192d4:	0151      	lsls	r1, r2, #5
 80192d6:	68fa      	ldr	r2, [r7, #12]
 80192d8:	440a      	add	r2, r1
 80192da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80192de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80192e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80192e4:	68bb      	ldr	r3, [r7, #8]
 80192e6:	015a      	lsls	r2, r3, #5
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	4413      	add	r3, r2
 80192ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	68ba      	ldr	r2, [r7, #8]
 80192f4:	0151      	lsls	r1, r2, #5
 80192f6:	68fa      	ldr	r2, [r7, #12]
 80192f8:	440a      	add	r2, r1
 80192fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80192fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801930a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	781b      	ldrb	r3, [r3, #0]
 8019310:	f003 030f 	and.w	r3, r3, #15
 8019314:	2101      	movs	r1, #1
 8019316:	fa01 f303 	lsl.w	r3, r1, r3
 801931a:	041b      	lsls	r3, r3, #16
 801931c:	43db      	mvns	r3, r3
 801931e:	68f9      	ldr	r1, [r7, #12]
 8019320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019324:	4013      	ands	r3, r2
 8019326:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801932e:	69da      	ldr	r2, [r3, #28]
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	781b      	ldrb	r3, [r3, #0]
 8019334:	f003 030f 	and.w	r3, r3, #15
 8019338:	2101      	movs	r1, #1
 801933a:	fa01 f303 	lsl.w	r3, r1, r3
 801933e:	041b      	lsls	r3, r3, #16
 8019340:	43db      	mvns	r3, r3
 8019342:	68f9      	ldr	r1, [r7, #12]
 8019344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019348:	4013      	ands	r3, r2
 801934a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801934c:	68bb      	ldr	r3, [r7, #8]
 801934e:	015a      	lsls	r2, r3, #5
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	4413      	add	r3, r2
 8019354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019358:	681a      	ldr	r2, [r3, #0]
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	0159      	lsls	r1, r3, #5
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	440b      	add	r3, r1
 8019362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019366:	4619      	mov	r1, r3
 8019368:	4b05      	ldr	r3, [pc, #20]	; (8019380 <USB_DeactivateEndpoint+0x1b4>)
 801936a:	4013      	ands	r3, r2
 801936c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801936e:	2300      	movs	r3, #0
}
 8019370:	4618      	mov	r0, r3
 8019372:	3714      	adds	r7, #20
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr
 801937c:	ec337800 	.word	0xec337800
 8019380:	eff37800 	.word	0xeff37800

08019384 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b08a      	sub	sp, #40	; 0x28
 8019388:	af02      	add	r7, sp, #8
 801938a:	60f8      	str	r0, [r7, #12]
 801938c:	60b9      	str	r1, [r7, #8]
 801938e:	4613      	mov	r3, r2
 8019390:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8019396:	68bb      	ldr	r3, [r7, #8]
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	785b      	ldrb	r3, [r3, #1]
 80193a0:	2b01      	cmp	r3, #1
 80193a2:	f040 8163 	bne.w	801966c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	699b      	ldr	r3, [r3, #24]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d132      	bne.n	8019414 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80193ae:	69bb      	ldr	r3, [r7, #24]
 80193b0:	015a      	lsls	r2, r3, #5
 80193b2:	69fb      	ldr	r3, [r7, #28]
 80193b4:	4413      	add	r3, r2
 80193b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80193ba:	691a      	ldr	r2, [r3, #16]
 80193bc:	69bb      	ldr	r3, [r7, #24]
 80193be:	0159      	lsls	r1, r3, #5
 80193c0:	69fb      	ldr	r3, [r7, #28]
 80193c2:	440b      	add	r3, r1
 80193c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80193c8:	4619      	mov	r1, r3
 80193ca:	4ba5      	ldr	r3, [pc, #660]	; (8019660 <USB_EPStartXfer+0x2dc>)
 80193cc:	4013      	ands	r3, r2
 80193ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80193d0:	69bb      	ldr	r3, [r7, #24]
 80193d2:	015a      	lsls	r2, r3, #5
 80193d4:	69fb      	ldr	r3, [r7, #28]
 80193d6:	4413      	add	r3, r2
 80193d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80193dc:	691b      	ldr	r3, [r3, #16]
 80193de:	69ba      	ldr	r2, [r7, #24]
 80193e0:	0151      	lsls	r1, r2, #5
 80193e2:	69fa      	ldr	r2, [r7, #28]
 80193e4:	440a      	add	r2, r1
 80193e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80193ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80193ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80193f0:	69bb      	ldr	r3, [r7, #24]
 80193f2:	015a      	lsls	r2, r3, #5
 80193f4:	69fb      	ldr	r3, [r7, #28]
 80193f6:	4413      	add	r3, r2
 80193f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80193fc:	691a      	ldr	r2, [r3, #16]
 80193fe:	69bb      	ldr	r3, [r7, #24]
 8019400:	0159      	lsls	r1, r3, #5
 8019402:	69fb      	ldr	r3, [r7, #28]
 8019404:	440b      	add	r3, r1
 8019406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801940a:	4619      	mov	r1, r3
 801940c:	4b95      	ldr	r3, [pc, #596]	; (8019664 <USB_EPStartXfer+0x2e0>)
 801940e:	4013      	ands	r3, r2
 8019410:	610b      	str	r3, [r1, #16]
 8019412:	e074      	b.n	80194fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019414:	69bb      	ldr	r3, [r7, #24]
 8019416:	015a      	lsls	r2, r3, #5
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	4413      	add	r3, r2
 801941c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019420:	691a      	ldr	r2, [r3, #16]
 8019422:	69bb      	ldr	r3, [r7, #24]
 8019424:	0159      	lsls	r1, r3, #5
 8019426:	69fb      	ldr	r3, [r7, #28]
 8019428:	440b      	add	r3, r1
 801942a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801942e:	4619      	mov	r1, r3
 8019430:	4b8c      	ldr	r3, [pc, #560]	; (8019664 <USB_EPStartXfer+0x2e0>)
 8019432:	4013      	ands	r3, r2
 8019434:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019436:	69bb      	ldr	r3, [r7, #24]
 8019438:	015a      	lsls	r2, r3, #5
 801943a:	69fb      	ldr	r3, [r7, #28]
 801943c:	4413      	add	r3, r2
 801943e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019442:	691a      	ldr	r2, [r3, #16]
 8019444:	69bb      	ldr	r3, [r7, #24]
 8019446:	0159      	lsls	r1, r3, #5
 8019448:	69fb      	ldr	r3, [r7, #28]
 801944a:	440b      	add	r3, r1
 801944c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019450:	4619      	mov	r1, r3
 8019452:	4b83      	ldr	r3, [pc, #524]	; (8019660 <USB_EPStartXfer+0x2dc>)
 8019454:	4013      	ands	r3, r2
 8019456:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8019458:	69bb      	ldr	r3, [r7, #24]
 801945a:	015a      	lsls	r2, r3, #5
 801945c:	69fb      	ldr	r3, [r7, #28]
 801945e:	4413      	add	r3, r2
 8019460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019464:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8019466:	68bb      	ldr	r3, [r7, #8]
 8019468:	6999      	ldr	r1, [r3, #24]
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	68db      	ldr	r3, [r3, #12]
 801946e:	440b      	add	r3, r1
 8019470:	1e59      	subs	r1, r3, #1
 8019472:	68bb      	ldr	r3, [r7, #8]
 8019474:	68db      	ldr	r3, [r3, #12]
 8019476:	fbb1 f3f3 	udiv	r3, r1, r3
 801947a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801947c:	4b7a      	ldr	r3, [pc, #488]	; (8019668 <USB_EPStartXfer+0x2e4>)
 801947e:	400b      	ands	r3, r1
 8019480:	69b9      	ldr	r1, [r7, #24]
 8019482:	0148      	lsls	r0, r1, #5
 8019484:	69f9      	ldr	r1, [r7, #28]
 8019486:	4401      	add	r1, r0
 8019488:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801948c:	4313      	orrs	r3, r2
 801948e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019490:	69bb      	ldr	r3, [r7, #24]
 8019492:	015a      	lsls	r2, r3, #5
 8019494:	69fb      	ldr	r3, [r7, #28]
 8019496:	4413      	add	r3, r2
 8019498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801949c:	691a      	ldr	r2, [r3, #16]
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	699b      	ldr	r3, [r3, #24]
 80194a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80194a6:	69b9      	ldr	r1, [r7, #24]
 80194a8:	0148      	lsls	r0, r1, #5
 80194aa:	69f9      	ldr	r1, [r7, #28]
 80194ac:	4401      	add	r1, r0
 80194ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80194b2:	4313      	orrs	r3, r2
 80194b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80194b6:	68bb      	ldr	r3, [r7, #8]
 80194b8:	791b      	ldrb	r3, [r3, #4]
 80194ba:	2b01      	cmp	r3, #1
 80194bc:	d11f      	bne.n	80194fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80194be:	69bb      	ldr	r3, [r7, #24]
 80194c0:	015a      	lsls	r2, r3, #5
 80194c2:	69fb      	ldr	r3, [r7, #28]
 80194c4:	4413      	add	r3, r2
 80194c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194ca:	691b      	ldr	r3, [r3, #16]
 80194cc:	69ba      	ldr	r2, [r7, #24]
 80194ce:	0151      	lsls	r1, r2, #5
 80194d0:	69fa      	ldr	r2, [r7, #28]
 80194d2:	440a      	add	r2, r1
 80194d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80194d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80194dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80194de:	69bb      	ldr	r3, [r7, #24]
 80194e0:	015a      	lsls	r2, r3, #5
 80194e2:	69fb      	ldr	r3, [r7, #28]
 80194e4:	4413      	add	r3, r2
 80194e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194ea:	691b      	ldr	r3, [r3, #16]
 80194ec:	69ba      	ldr	r2, [r7, #24]
 80194ee:	0151      	lsls	r1, r2, #5
 80194f0:	69fa      	ldr	r2, [r7, #28]
 80194f2:	440a      	add	r2, r1
 80194f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80194f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80194fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80194fe:	79fb      	ldrb	r3, [r7, #7]
 8019500:	2b01      	cmp	r3, #1
 8019502:	d14b      	bne.n	801959c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	695b      	ldr	r3, [r3, #20]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d009      	beq.n	8019520 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801950c:	69bb      	ldr	r3, [r7, #24]
 801950e:	015a      	lsls	r2, r3, #5
 8019510:	69fb      	ldr	r3, [r7, #28]
 8019512:	4413      	add	r3, r2
 8019514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019518:	461a      	mov	r2, r3
 801951a:	68bb      	ldr	r3, [r7, #8]
 801951c:	695b      	ldr	r3, [r3, #20]
 801951e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	791b      	ldrb	r3, [r3, #4]
 8019524:	2b01      	cmp	r3, #1
 8019526:	d128      	bne.n	801957a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019528:	69fb      	ldr	r3, [r7, #28]
 801952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801952e:	689b      	ldr	r3, [r3, #8]
 8019530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019534:	2b00      	cmp	r3, #0
 8019536:	d110      	bne.n	801955a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019538:	69bb      	ldr	r3, [r7, #24]
 801953a:	015a      	lsls	r2, r3, #5
 801953c:	69fb      	ldr	r3, [r7, #28]
 801953e:	4413      	add	r3, r2
 8019540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	69ba      	ldr	r2, [r7, #24]
 8019548:	0151      	lsls	r1, r2, #5
 801954a:	69fa      	ldr	r2, [r7, #28]
 801954c:	440a      	add	r2, r1
 801954e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019556:	6013      	str	r3, [r2, #0]
 8019558:	e00f      	b.n	801957a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801955a:	69bb      	ldr	r3, [r7, #24]
 801955c:	015a      	lsls	r2, r3, #5
 801955e:	69fb      	ldr	r3, [r7, #28]
 8019560:	4413      	add	r3, r2
 8019562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	69ba      	ldr	r2, [r7, #24]
 801956a:	0151      	lsls	r1, r2, #5
 801956c:	69fa      	ldr	r2, [r7, #28]
 801956e:	440a      	add	r2, r1
 8019570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019578:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801957a:	69bb      	ldr	r3, [r7, #24]
 801957c:	015a      	lsls	r2, r3, #5
 801957e:	69fb      	ldr	r3, [r7, #28]
 8019580:	4413      	add	r3, r2
 8019582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	69ba      	ldr	r2, [r7, #24]
 801958a:	0151      	lsls	r1, r2, #5
 801958c:	69fa      	ldr	r2, [r7, #28]
 801958e:	440a      	add	r2, r1
 8019590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019598:	6013      	str	r3, [r2, #0]
 801959a:	e137      	b.n	801980c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801959c:	69bb      	ldr	r3, [r7, #24]
 801959e:	015a      	lsls	r2, r3, #5
 80195a0:	69fb      	ldr	r3, [r7, #28]
 80195a2:	4413      	add	r3, r2
 80195a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	69ba      	ldr	r2, [r7, #24]
 80195ac:	0151      	lsls	r1, r2, #5
 80195ae:	69fa      	ldr	r2, [r7, #28]
 80195b0:	440a      	add	r2, r1
 80195b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80195b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80195ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80195bc:	68bb      	ldr	r3, [r7, #8]
 80195be:	791b      	ldrb	r3, [r3, #4]
 80195c0:	2b01      	cmp	r3, #1
 80195c2:	d015      	beq.n	80195f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80195c4:	68bb      	ldr	r3, [r7, #8]
 80195c6:	699b      	ldr	r3, [r3, #24]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	f000 811f 	beq.w	801980c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80195ce:	69fb      	ldr	r3, [r7, #28]
 80195d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80195d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80195d6:	68bb      	ldr	r3, [r7, #8]
 80195d8:	781b      	ldrb	r3, [r3, #0]
 80195da:	f003 030f 	and.w	r3, r3, #15
 80195de:	2101      	movs	r1, #1
 80195e0:	fa01 f303 	lsl.w	r3, r1, r3
 80195e4:	69f9      	ldr	r1, [r7, #28]
 80195e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80195ea:	4313      	orrs	r3, r2
 80195ec:	634b      	str	r3, [r1, #52]	; 0x34
 80195ee:	e10d      	b.n	801980c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80195f6:	689b      	ldr	r3, [r3, #8]
 80195f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d110      	bne.n	8019622 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019600:	69bb      	ldr	r3, [r7, #24]
 8019602:	015a      	lsls	r2, r3, #5
 8019604:	69fb      	ldr	r3, [r7, #28]
 8019606:	4413      	add	r3, r2
 8019608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	69ba      	ldr	r2, [r7, #24]
 8019610:	0151      	lsls	r1, r2, #5
 8019612:	69fa      	ldr	r2, [r7, #28]
 8019614:	440a      	add	r2, r1
 8019616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801961a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801961e:	6013      	str	r3, [r2, #0]
 8019620:	e00f      	b.n	8019642 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8019622:	69bb      	ldr	r3, [r7, #24]
 8019624:	015a      	lsls	r2, r3, #5
 8019626:	69fb      	ldr	r3, [r7, #28]
 8019628:	4413      	add	r3, r2
 801962a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	69ba      	ldr	r2, [r7, #24]
 8019632:	0151      	lsls	r1, r2, #5
 8019634:	69fa      	ldr	r2, [r7, #28]
 8019636:	440a      	add	r2, r1
 8019638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801963c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019640:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	6919      	ldr	r1, [r3, #16]
 8019646:	68bb      	ldr	r3, [r7, #8]
 8019648:	781a      	ldrb	r2, [r3, #0]
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	699b      	ldr	r3, [r3, #24]
 801964e:	b298      	uxth	r0, r3
 8019650:	79fb      	ldrb	r3, [r7, #7]
 8019652:	9300      	str	r3, [sp, #0]
 8019654:	4603      	mov	r3, r0
 8019656:	68f8      	ldr	r0, [r7, #12]
 8019658:	f000 faea 	bl	8019c30 <USB_WritePacket>
 801965c:	e0d6      	b.n	801980c <USB_EPStartXfer+0x488>
 801965e:	bf00      	nop
 8019660:	e007ffff 	.word	0xe007ffff
 8019664:	fff80000 	.word	0xfff80000
 8019668:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801966c:	69bb      	ldr	r3, [r7, #24]
 801966e:	015a      	lsls	r2, r3, #5
 8019670:	69fb      	ldr	r3, [r7, #28]
 8019672:	4413      	add	r3, r2
 8019674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019678:	691a      	ldr	r2, [r3, #16]
 801967a:	69bb      	ldr	r3, [r7, #24]
 801967c:	0159      	lsls	r1, r3, #5
 801967e:	69fb      	ldr	r3, [r7, #28]
 8019680:	440b      	add	r3, r1
 8019682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019686:	4619      	mov	r1, r3
 8019688:	4b63      	ldr	r3, [pc, #396]	; (8019818 <USB_EPStartXfer+0x494>)
 801968a:	4013      	ands	r3, r2
 801968c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801968e:	69bb      	ldr	r3, [r7, #24]
 8019690:	015a      	lsls	r2, r3, #5
 8019692:	69fb      	ldr	r3, [r7, #28]
 8019694:	4413      	add	r3, r2
 8019696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801969a:	691a      	ldr	r2, [r3, #16]
 801969c:	69bb      	ldr	r3, [r7, #24]
 801969e:	0159      	lsls	r1, r3, #5
 80196a0:	69fb      	ldr	r3, [r7, #28]
 80196a2:	440b      	add	r3, r1
 80196a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80196a8:	4619      	mov	r1, r3
 80196aa:	4b5c      	ldr	r3, [pc, #368]	; (801981c <USB_EPStartXfer+0x498>)
 80196ac:	4013      	ands	r3, r2
 80196ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80196b0:	68bb      	ldr	r3, [r7, #8]
 80196b2:	699b      	ldr	r3, [r3, #24]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d123      	bne.n	8019700 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80196b8:	69bb      	ldr	r3, [r7, #24]
 80196ba:	015a      	lsls	r2, r3, #5
 80196bc:	69fb      	ldr	r3, [r7, #28]
 80196be:	4413      	add	r3, r2
 80196c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80196c4:	691a      	ldr	r2, [r3, #16]
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	68db      	ldr	r3, [r3, #12]
 80196ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80196ce:	69b9      	ldr	r1, [r7, #24]
 80196d0:	0148      	lsls	r0, r1, #5
 80196d2:	69f9      	ldr	r1, [r7, #28]
 80196d4:	4401      	add	r1, r0
 80196d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80196da:	4313      	orrs	r3, r2
 80196dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80196de:	69bb      	ldr	r3, [r7, #24]
 80196e0:	015a      	lsls	r2, r3, #5
 80196e2:	69fb      	ldr	r3, [r7, #28]
 80196e4:	4413      	add	r3, r2
 80196e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80196ea:	691b      	ldr	r3, [r3, #16]
 80196ec:	69ba      	ldr	r2, [r7, #24]
 80196ee:	0151      	lsls	r1, r2, #5
 80196f0:	69fa      	ldr	r2, [r7, #28]
 80196f2:	440a      	add	r2, r1
 80196f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80196f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80196fc:	6113      	str	r3, [r2, #16]
 80196fe:	e037      	b.n	8019770 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	699a      	ldr	r2, [r3, #24]
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	4413      	add	r3, r2
 801970a:	1e5a      	subs	r2, r3, #1
 801970c:	68bb      	ldr	r3, [r7, #8]
 801970e:	68db      	ldr	r3, [r3, #12]
 8019710:	fbb2 f3f3 	udiv	r3, r2, r3
 8019714:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8019716:	68bb      	ldr	r3, [r7, #8]
 8019718:	68db      	ldr	r3, [r3, #12]
 801971a:	8afa      	ldrh	r2, [r7, #22]
 801971c:	fb03 f202 	mul.w	r2, r3, r2
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8019724:	69bb      	ldr	r3, [r7, #24]
 8019726:	015a      	lsls	r2, r3, #5
 8019728:	69fb      	ldr	r3, [r7, #28]
 801972a:	4413      	add	r3, r2
 801972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019730:	691a      	ldr	r2, [r3, #16]
 8019732:	8afb      	ldrh	r3, [r7, #22]
 8019734:	04d9      	lsls	r1, r3, #19
 8019736:	4b3a      	ldr	r3, [pc, #232]	; (8019820 <USB_EPStartXfer+0x49c>)
 8019738:	400b      	ands	r3, r1
 801973a:	69b9      	ldr	r1, [r7, #24]
 801973c:	0148      	lsls	r0, r1, #5
 801973e:	69f9      	ldr	r1, [r7, #28]
 8019740:	4401      	add	r1, r0
 8019742:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019746:	4313      	orrs	r3, r2
 8019748:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801974a:	69bb      	ldr	r3, [r7, #24]
 801974c:	015a      	lsls	r2, r3, #5
 801974e:	69fb      	ldr	r3, [r7, #28]
 8019750:	4413      	add	r3, r2
 8019752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019756:	691a      	ldr	r2, [r3, #16]
 8019758:	68bb      	ldr	r3, [r7, #8]
 801975a:	69db      	ldr	r3, [r3, #28]
 801975c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019760:	69b9      	ldr	r1, [r7, #24]
 8019762:	0148      	lsls	r0, r1, #5
 8019764:	69f9      	ldr	r1, [r7, #28]
 8019766:	4401      	add	r1, r0
 8019768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801976c:	4313      	orrs	r3, r2
 801976e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019770:	79fb      	ldrb	r3, [r7, #7]
 8019772:	2b01      	cmp	r3, #1
 8019774:	d10d      	bne.n	8019792 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019776:	68bb      	ldr	r3, [r7, #8]
 8019778:	691b      	ldr	r3, [r3, #16]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d009      	beq.n	8019792 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801977e:	68bb      	ldr	r3, [r7, #8]
 8019780:	6919      	ldr	r1, [r3, #16]
 8019782:	69bb      	ldr	r3, [r7, #24]
 8019784:	015a      	lsls	r2, r3, #5
 8019786:	69fb      	ldr	r3, [r7, #28]
 8019788:	4413      	add	r3, r2
 801978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801978e:	460a      	mov	r2, r1
 8019790:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8019792:	68bb      	ldr	r3, [r7, #8]
 8019794:	791b      	ldrb	r3, [r3, #4]
 8019796:	2b01      	cmp	r3, #1
 8019798:	d128      	bne.n	80197ec <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80197a0:	689b      	ldr	r3, [r3, #8]
 80197a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d110      	bne.n	80197cc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80197aa:	69bb      	ldr	r3, [r7, #24]
 80197ac:	015a      	lsls	r2, r3, #5
 80197ae:	69fb      	ldr	r3, [r7, #28]
 80197b0:	4413      	add	r3, r2
 80197b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	69ba      	ldr	r2, [r7, #24]
 80197ba:	0151      	lsls	r1, r2, #5
 80197bc:	69fa      	ldr	r2, [r7, #28]
 80197be:	440a      	add	r2, r1
 80197c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80197c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80197c8:	6013      	str	r3, [r2, #0]
 80197ca:	e00f      	b.n	80197ec <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80197cc:	69bb      	ldr	r3, [r7, #24]
 80197ce:	015a      	lsls	r2, r3, #5
 80197d0:	69fb      	ldr	r3, [r7, #28]
 80197d2:	4413      	add	r3, r2
 80197d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	69ba      	ldr	r2, [r7, #24]
 80197dc:	0151      	lsls	r1, r2, #5
 80197de:	69fa      	ldr	r2, [r7, #28]
 80197e0:	440a      	add	r2, r1
 80197e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80197e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80197ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80197ec:	69bb      	ldr	r3, [r7, #24]
 80197ee:	015a      	lsls	r2, r3, #5
 80197f0:	69fb      	ldr	r3, [r7, #28]
 80197f2:	4413      	add	r3, r2
 80197f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	69ba      	ldr	r2, [r7, #24]
 80197fc:	0151      	lsls	r1, r2, #5
 80197fe:	69fa      	ldr	r2, [r7, #28]
 8019800:	440a      	add	r2, r1
 8019802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801980a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801980c:	2300      	movs	r3, #0
}
 801980e:	4618      	mov	r0, r3
 8019810:	3720      	adds	r7, #32
 8019812:	46bd      	mov	sp, r7
 8019814:	bd80      	pop	{r7, pc}
 8019816:	bf00      	nop
 8019818:	fff80000 	.word	0xfff80000
 801981c:	e007ffff 	.word	0xe007ffff
 8019820:	1ff80000 	.word	0x1ff80000

08019824 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8019824:	b480      	push	{r7}
 8019826:	b087      	sub	sp, #28
 8019828:	af00      	add	r7, sp, #0
 801982a:	60f8      	str	r0, [r7, #12]
 801982c:	60b9      	str	r1, [r7, #8]
 801982e:	4613      	mov	r3, r2
 8019830:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8019836:	68bb      	ldr	r3, [r7, #8]
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801983c:	68bb      	ldr	r3, [r7, #8]
 801983e:	785b      	ldrb	r3, [r3, #1]
 8019840:	2b01      	cmp	r3, #1
 8019842:	f040 80ce 	bne.w	80199e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8019846:	68bb      	ldr	r3, [r7, #8]
 8019848:	699b      	ldr	r3, [r3, #24]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d132      	bne.n	80198b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801984e:	693b      	ldr	r3, [r7, #16]
 8019850:	015a      	lsls	r2, r3, #5
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	4413      	add	r3, r2
 8019856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801985a:	691a      	ldr	r2, [r3, #16]
 801985c:	693b      	ldr	r3, [r7, #16]
 801985e:	0159      	lsls	r1, r3, #5
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	440b      	add	r3, r1
 8019864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019868:	4619      	mov	r1, r3
 801986a:	4b9a      	ldr	r3, [pc, #616]	; (8019ad4 <USB_EP0StartXfer+0x2b0>)
 801986c:	4013      	ands	r3, r2
 801986e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019870:	693b      	ldr	r3, [r7, #16]
 8019872:	015a      	lsls	r2, r3, #5
 8019874:	697b      	ldr	r3, [r7, #20]
 8019876:	4413      	add	r3, r2
 8019878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801987c:	691b      	ldr	r3, [r3, #16]
 801987e:	693a      	ldr	r2, [r7, #16]
 8019880:	0151      	lsls	r1, r2, #5
 8019882:	697a      	ldr	r2, [r7, #20]
 8019884:	440a      	add	r2, r1
 8019886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801988a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801988e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019890:	693b      	ldr	r3, [r7, #16]
 8019892:	015a      	lsls	r2, r3, #5
 8019894:	697b      	ldr	r3, [r7, #20]
 8019896:	4413      	add	r3, r2
 8019898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801989c:	691a      	ldr	r2, [r3, #16]
 801989e:	693b      	ldr	r3, [r7, #16]
 80198a0:	0159      	lsls	r1, r3, #5
 80198a2:	697b      	ldr	r3, [r7, #20]
 80198a4:	440b      	add	r3, r1
 80198a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198aa:	4619      	mov	r1, r3
 80198ac:	4b8a      	ldr	r3, [pc, #552]	; (8019ad8 <USB_EP0StartXfer+0x2b4>)
 80198ae:	4013      	ands	r3, r2
 80198b0:	610b      	str	r3, [r1, #16]
 80198b2:	e04e      	b.n	8019952 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80198b4:	693b      	ldr	r3, [r7, #16]
 80198b6:	015a      	lsls	r2, r3, #5
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	4413      	add	r3, r2
 80198bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198c0:	691a      	ldr	r2, [r3, #16]
 80198c2:	693b      	ldr	r3, [r7, #16]
 80198c4:	0159      	lsls	r1, r3, #5
 80198c6:	697b      	ldr	r3, [r7, #20]
 80198c8:	440b      	add	r3, r1
 80198ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198ce:	4619      	mov	r1, r3
 80198d0:	4b81      	ldr	r3, [pc, #516]	; (8019ad8 <USB_EP0StartXfer+0x2b4>)
 80198d2:	4013      	ands	r3, r2
 80198d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	015a      	lsls	r2, r3, #5
 80198da:	697b      	ldr	r3, [r7, #20]
 80198dc:	4413      	add	r3, r2
 80198de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198e2:	691a      	ldr	r2, [r3, #16]
 80198e4:	693b      	ldr	r3, [r7, #16]
 80198e6:	0159      	lsls	r1, r3, #5
 80198e8:	697b      	ldr	r3, [r7, #20]
 80198ea:	440b      	add	r3, r1
 80198ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198f0:	4619      	mov	r1, r3
 80198f2:	4b78      	ldr	r3, [pc, #480]	; (8019ad4 <USB_EP0StartXfer+0x2b0>)
 80198f4:	4013      	ands	r3, r2
 80198f6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	699a      	ldr	r2, [r3, #24]
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	68db      	ldr	r3, [r3, #12]
 8019900:	429a      	cmp	r2, r3
 8019902:	d903      	bls.n	801990c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8019904:	68bb      	ldr	r3, [r7, #8]
 8019906:	68da      	ldr	r2, [r3, #12]
 8019908:	68bb      	ldr	r3, [r7, #8]
 801990a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801990c:	693b      	ldr	r3, [r7, #16]
 801990e:	015a      	lsls	r2, r3, #5
 8019910:	697b      	ldr	r3, [r7, #20]
 8019912:	4413      	add	r3, r2
 8019914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019918:	691b      	ldr	r3, [r3, #16]
 801991a:	693a      	ldr	r2, [r7, #16]
 801991c:	0151      	lsls	r1, r2, #5
 801991e:	697a      	ldr	r2, [r7, #20]
 8019920:	440a      	add	r2, r1
 8019922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019926:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801992a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801992c:	693b      	ldr	r3, [r7, #16]
 801992e:	015a      	lsls	r2, r3, #5
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	4413      	add	r3, r2
 8019934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019938:	691a      	ldr	r2, [r3, #16]
 801993a:	68bb      	ldr	r3, [r7, #8]
 801993c:	699b      	ldr	r3, [r3, #24]
 801993e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019942:	6939      	ldr	r1, [r7, #16]
 8019944:	0148      	lsls	r0, r1, #5
 8019946:	6979      	ldr	r1, [r7, #20]
 8019948:	4401      	add	r1, r0
 801994a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801994e:	4313      	orrs	r3, r2
 8019950:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019952:	79fb      	ldrb	r3, [r7, #7]
 8019954:	2b01      	cmp	r3, #1
 8019956:	d11e      	bne.n	8019996 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019958:	68bb      	ldr	r3, [r7, #8]
 801995a:	695b      	ldr	r3, [r3, #20]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d009      	beq.n	8019974 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8019960:	693b      	ldr	r3, [r7, #16]
 8019962:	015a      	lsls	r2, r3, #5
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	4413      	add	r3, r2
 8019968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801996c:	461a      	mov	r2, r3
 801996e:	68bb      	ldr	r3, [r7, #8]
 8019970:	695b      	ldr	r3, [r3, #20]
 8019972:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019974:	693b      	ldr	r3, [r7, #16]
 8019976:	015a      	lsls	r2, r3, #5
 8019978:	697b      	ldr	r3, [r7, #20]
 801997a:	4413      	add	r3, r2
 801997c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	693a      	ldr	r2, [r7, #16]
 8019984:	0151      	lsls	r1, r2, #5
 8019986:	697a      	ldr	r2, [r7, #20]
 8019988:	440a      	add	r2, r1
 801998a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801998e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019992:	6013      	str	r3, [r2, #0]
 8019994:	e097      	b.n	8019ac6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019996:	693b      	ldr	r3, [r7, #16]
 8019998:	015a      	lsls	r2, r3, #5
 801999a:	697b      	ldr	r3, [r7, #20]
 801999c:	4413      	add	r3, r2
 801999e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	693a      	ldr	r2, [r7, #16]
 80199a6:	0151      	lsls	r1, r2, #5
 80199a8:	697a      	ldr	r2, [r7, #20]
 80199aa:	440a      	add	r2, r1
 80199ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80199b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80199b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	699b      	ldr	r3, [r3, #24]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	f000 8083 	beq.w	8019ac6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80199c0:	697b      	ldr	r3, [r7, #20]
 80199c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80199c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80199c8:	68bb      	ldr	r3, [r7, #8]
 80199ca:	781b      	ldrb	r3, [r3, #0]
 80199cc:	f003 030f 	and.w	r3, r3, #15
 80199d0:	2101      	movs	r1, #1
 80199d2:	fa01 f303 	lsl.w	r3, r1, r3
 80199d6:	6979      	ldr	r1, [r7, #20]
 80199d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80199dc:	4313      	orrs	r3, r2
 80199de:	634b      	str	r3, [r1, #52]	; 0x34
 80199e0:	e071      	b.n	8019ac6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80199e2:	693b      	ldr	r3, [r7, #16]
 80199e4:	015a      	lsls	r2, r3, #5
 80199e6:	697b      	ldr	r3, [r7, #20]
 80199e8:	4413      	add	r3, r2
 80199ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80199ee:	691a      	ldr	r2, [r3, #16]
 80199f0:	693b      	ldr	r3, [r7, #16]
 80199f2:	0159      	lsls	r1, r3, #5
 80199f4:	697b      	ldr	r3, [r7, #20]
 80199f6:	440b      	add	r3, r1
 80199f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80199fc:	4619      	mov	r1, r3
 80199fe:	4b36      	ldr	r3, [pc, #216]	; (8019ad8 <USB_EP0StartXfer+0x2b4>)
 8019a00:	4013      	ands	r3, r2
 8019a02:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	015a      	lsls	r2, r3, #5
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	4413      	add	r3, r2
 8019a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019a10:	691a      	ldr	r2, [r3, #16]
 8019a12:	693b      	ldr	r3, [r7, #16]
 8019a14:	0159      	lsls	r1, r3, #5
 8019a16:	697b      	ldr	r3, [r7, #20]
 8019a18:	440b      	add	r3, r1
 8019a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019a1e:	4619      	mov	r1, r3
 8019a20:	4b2c      	ldr	r3, [pc, #176]	; (8019ad4 <USB_EP0StartXfer+0x2b0>)
 8019a22:	4013      	ands	r3, r2
 8019a24:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8019a26:	68bb      	ldr	r3, [r7, #8]
 8019a28:	699b      	ldr	r3, [r3, #24]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d003      	beq.n	8019a36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8019a2e:	68bb      	ldr	r3, [r7, #8]
 8019a30:	68da      	ldr	r2, [r3, #12]
 8019a32:	68bb      	ldr	r3, [r7, #8]
 8019a34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8019a36:	68bb      	ldr	r3, [r7, #8]
 8019a38:	68da      	ldr	r2, [r3, #12]
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8019a3e:	693b      	ldr	r3, [r7, #16]
 8019a40:	015a      	lsls	r2, r3, #5
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	4413      	add	r3, r2
 8019a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019a4a:	691b      	ldr	r3, [r3, #16]
 8019a4c:	693a      	ldr	r2, [r7, #16]
 8019a4e:	0151      	lsls	r1, r2, #5
 8019a50:	697a      	ldr	r2, [r7, #20]
 8019a52:	440a      	add	r2, r1
 8019a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019a5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8019a5e:	693b      	ldr	r3, [r7, #16]
 8019a60:	015a      	lsls	r2, r3, #5
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	4413      	add	r3, r2
 8019a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019a6a:	691a      	ldr	r2, [r3, #16]
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	69db      	ldr	r3, [r3, #28]
 8019a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019a74:	6939      	ldr	r1, [r7, #16]
 8019a76:	0148      	lsls	r0, r1, #5
 8019a78:	6979      	ldr	r1, [r7, #20]
 8019a7a:	4401      	add	r1, r0
 8019a7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019a80:	4313      	orrs	r3, r2
 8019a82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8019a84:	79fb      	ldrb	r3, [r7, #7]
 8019a86:	2b01      	cmp	r3, #1
 8019a88:	d10d      	bne.n	8019aa6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019a8a:	68bb      	ldr	r3, [r7, #8]
 8019a8c:	691b      	ldr	r3, [r3, #16]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d009      	beq.n	8019aa6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	6919      	ldr	r1, [r3, #16]
 8019a96:	693b      	ldr	r3, [r7, #16]
 8019a98:	015a      	lsls	r2, r3, #5
 8019a9a:	697b      	ldr	r3, [r7, #20]
 8019a9c:	4413      	add	r3, r2
 8019a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019aa2:	460a      	mov	r2, r1
 8019aa4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019aa6:	693b      	ldr	r3, [r7, #16]
 8019aa8:	015a      	lsls	r2, r3, #5
 8019aaa:	697b      	ldr	r3, [r7, #20]
 8019aac:	4413      	add	r3, r2
 8019aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	693a      	ldr	r2, [r7, #16]
 8019ab6:	0151      	lsls	r1, r2, #5
 8019ab8:	697a      	ldr	r2, [r7, #20]
 8019aba:	440a      	add	r2, r1
 8019abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019ac4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019ac6:	2300      	movs	r3, #0
}
 8019ac8:	4618      	mov	r0, r3
 8019aca:	371c      	adds	r7, #28
 8019acc:	46bd      	mov	sp, r7
 8019ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad2:	4770      	bx	lr
 8019ad4:	e007ffff 	.word	0xe007ffff
 8019ad8:	fff80000 	.word	0xfff80000

08019adc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019adc:	b480      	push	{r7}
 8019ade:	b087      	sub	sp, #28
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
 8019ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8019aea:	2300      	movs	r3, #0
 8019aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	785b      	ldrb	r3, [r3, #1]
 8019af6:	2b01      	cmp	r3, #1
 8019af8:	d14a      	bne.n	8019b90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019afa:	683b      	ldr	r3, [r7, #0]
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	015a      	lsls	r2, r3, #5
 8019b00:	693b      	ldr	r3, [r7, #16]
 8019b02:	4413      	add	r3, r2
 8019b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019b12:	f040 8086 	bne.w	8019c22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	015a      	lsls	r2, r3, #5
 8019b1c:	693b      	ldr	r3, [r7, #16]
 8019b1e:	4413      	add	r3, r2
 8019b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	683a      	ldr	r2, [r7, #0]
 8019b28:	7812      	ldrb	r2, [r2, #0]
 8019b2a:	0151      	lsls	r1, r2, #5
 8019b2c:	693a      	ldr	r2, [r7, #16]
 8019b2e:	440a      	add	r2, r1
 8019b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019b38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	781b      	ldrb	r3, [r3, #0]
 8019b3e:	015a      	lsls	r2, r3, #5
 8019b40:	693b      	ldr	r3, [r7, #16]
 8019b42:	4413      	add	r3, r2
 8019b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	683a      	ldr	r2, [r7, #0]
 8019b4c:	7812      	ldrb	r2, [r2, #0]
 8019b4e:	0151      	lsls	r1, r2, #5
 8019b50:	693a      	ldr	r2, [r7, #16]
 8019b52:	440a      	add	r2, r1
 8019b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019b5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	3301      	adds	r3, #1
 8019b62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	f242 7210 	movw	r2, #10000	; 0x2710
 8019b6a:	4293      	cmp	r3, r2
 8019b6c:	d902      	bls.n	8019b74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8019b6e:	2301      	movs	r3, #1
 8019b70:	75fb      	strb	r3, [r7, #23]
          break;
 8019b72:	e056      	b.n	8019c22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	015a      	lsls	r2, r3, #5
 8019b7a:	693b      	ldr	r3, [r7, #16]
 8019b7c:	4413      	add	r3, r2
 8019b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019b8c:	d0e7      	beq.n	8019b5e <USB_EPStopXfer+0x82>
 8019b8e:	e048      	b.n	8019c22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019b90:	683b      	ldr	r3, [r7, #0]
 8019b92:	781b      	ldrb	r3, [r3, #0]
 8019b94:	015a      	lsls	r2, r3, #5
 8019b96:	693b      	ldr	r3, [r7, #16]
 8019b98:	4413      	add	r3, r2
 8019b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019ba8:	d13b      	bne.n	8019c22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8019baa:	683b      	ldr	r3, [r7, #0]
 8019bac:	781b      	ldrb	r3, [r3, #0]
 8019bae:	015a      	lsls	r2, r3, #5
 8019bb0:	693b      	ldr	r3, [r7, #16]
 8019bb2:	4413      	add	r3, r2
 8019bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	683a      	ldr	r2, [r7, #0]
 8019bbc:	7812      	ldrb	r2, [r2, #0]
 8019bbe:	0151      	lsls	r1, r2, #5
 8019bc0:	693a      	ldr	r2, [r7, #16]
 8019bc2:	440a      	add	r2, r1
 8019bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019bc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019bcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	015a      	lsls	r2, r3, #5
 8019bd4:	693b      	ldr	r3, [r7, #16]
 8019bd6:	4413      	add	r3, r2
 8019bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	683a      	ldr	r2, [r7, #0]
 8019be0:	7812      	ldrb	r2, [r2, #0]
 8019be2:	0151      	lsls	r1, r2, #5
 8019be4:	693a      	ldr	r2, [r7, #16]
 8019be6:	440a      	add	r2, r1
 8019be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019bf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	3301      	adds	r3, #1
 8019bf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8019bfe:	4293      	cmp	r3, r2
 8019c00:	d902      	bls.n	8019c08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8019c02:	2301      	movs	r3, #1
 8019c04:	75fb      	strb	r3, [r7, #23]
          break;
 8019c06:	e00c      	b.n	8019c22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	015a      	lsls	r2, r3, #5
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	4413      	add	r3, r2
 8019c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c20:	d0e7      	beq.n	8019bf2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8019c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	371c      	adds	r7, #28
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c2e:	4770      	bx	lr

08019c30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8019c30:	b480      	push	{r7}
 8019c32:	b089      	sub	sp, #36	; 0x24
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	60f8      	str	r0, [r7, #12]
 8019c38:	60b9      	str	r1, [r7, #8]
 8019c3a:	4611      	mov	r1, r2
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	460b      	mov	r3, r1
 8019c40:	71fb      	strb	r3, [r7, #7]
 8019c42:	4613      	mov	r3, r2
 8019c44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8019c4a:	68bb      	ldr	r3, [r7, #8]
 8019c4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8019c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d123      	bne.n	8019c9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8019c56:	88bb      	ldrh	r3, [r7, #4]
 8019c58:	3303      	adds	r3, #3
 8019c5a:	089b      	lsrs	r3, r3, #2
 8019c5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8019c5e:	2300      	movs	r3, #0
 8019c60:	61bb      	str	r3, [r7, #24]
 8019c62:	e018      	b.n	8019c96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8019c64:	79fb      	ldrb	r3, [r7, #7]
 8019c66:	031a      	lsls	r2, r3, #12
 8019c68:	697b      	ldr	r3, [r7, #20]
 8019c6a:	4413      	add	r3, r2
 8019c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c70:	461a      	mov	r2, r3
 8019c72:	69fb      	ldr	r3, [r7, #28]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8019c78:	69fb      	ldr	r3, [r7, #28]
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019c7e:	69fb      	ldr	r3, [r7, #28]
 8019c80:	3301      	adds	r3, #1
 8019c82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019c84:	69fb      	ldr	r3, [r7, #28]
 8019c86:	3301      	adds	r3, #1
 8019c88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019c8a:	69fb      	ldr	r3, [r7, #28]
 8019c8c:	3301      	adds	r3, #1
 8019c8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8019c90:	69bb      	ldr	r3, [r7, #24]
 8019c92:	3301      	adds	r3, #1
 8019c94:	61bb      	str	r3, [r7, #24]
 8019c96:	69ba      	ldr	r2, [r7, #24]
 8019c98:	693b      	ldr	r3, [r7, #16]
 8019c9a:	429a      	cmp	r2, r3
 8019c9c:	d3e2      	bcc.n	8019c64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8019c9e:	2300      	movs	r3, #0
}
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	3724      	adds	r7, #36	; 0x24
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019caa:	4770      	bx	lr

08019cac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8019cac:	b480      	push	{r7}
 8019cae:	b08b      	sub	sp, #44	; 0x2c
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	60f8      	str	r0, [r7, #12]
 8019cb4:	60b9      	str	r1, [r7, #8]
 8019cb6:	4613      	mov	r3, r2
 8019cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8019cbe:	68bb      	ldr	r3, [r7, #8]
 8019cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8019cc2:	88fb      	ldrh	r3, [r7, #6]
 8019cc4:	089b      	lsrs	r3, r3, #2
 8019cc6:	b29b      	uxth	r3, r3
 8019cc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8019cca:	88fb      	ldrh	r3, [r7, #6]
 8019ccc:	f003 0303 	and.w	r3, r3, #3
 8019cd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	623b      	str	r3, [r7, #32]
 8019cd6:	e014      	b.n	8019d02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8019cd8:	69bb      	ldr	r3, [r7, #24]
 8019cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019cde:	681a      	ldr	r2, [r3, #0]
 8019ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce2:	601a      	str	r2, [r3, #0]
    pDest++;
 8019ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce6:	3301      	adds	r3, #1
 8019ce8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cec:	3301      	adds	r3, #1
 8019cee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf8:	3301      	adds	r3, #1
 8019cfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8019cfc:	6a3b      	ldr	r3, [r7, #32]
 8019cfe:	3301      	adds	r3, #1
 8019d00:	623b      	str	r3, [r7, #32]
 8019d02:	6a3a      	ldr	r2, [r7, #32]
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d3e6      	bcc.n	8019cd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8019d0a:	8bfb      	ldrh	r3, [r7, #30]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d01e      	beq.n	8019d4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8019d10:	2300      	movs	r3, #0
 8019d12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d1a:	461a      	mov	r2, r3
 8019d1c:	f107 0310 	add.w	r3, r7, #16
 8019d20:	6812      	ldr	r2, [r2, #0]
 8019d22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8019d24:	693a      	ldr	r2, [r7, #16]
 8019d26:	6a3b      	ldr	r3, [r7, #32]
 8019d28:	b2db      	uxtb	r3, r3
 8019d2a:	00db      	lsls	r3, r3, #3
 8019d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8019d30:	b2da      	uxtb	r2, r3
 8019d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d34:	701a      	strb	r2, [r3, #0]
      i++;
 8019d36:	6a3b      	ldr	r3, [r7, #32]
 8019d38:	3301      	adds	r3, #1
 8019d3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8019d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3e:	3301      	adds	r3, #1
 8019d40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8019d42:	8bfb      	ldrh	r3, [r7, #30]
 8019d44:	3b01      	subs	r3, #1
 8019d46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8019d48:	8bfb      	ldrh	r3, [r7, #30]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d1ea      	bne.n	8019d24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8019d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	372c      	adds	r7, #44	; 0x2c
 8019d54:	46bd      	mov	sp, r7
 8019d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5a:	4770      	bx	lr

08019d5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019d5c:	b480      	push	{r7}
 8019d5e:	b085      	sub	sp, #20
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
 8019d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	785b      	ldrb	r3, [r3, #1]
 8019d74:	2b01      	cmp	r3, #1
 8019d76:	d12c      	bne.n	8019dd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8019d78:	68bb      	ldr	r3, [r7, #8]
 8019d7a:	015a      	lsls	r2, r3, #5
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	4413      	add	r3, r2
 8019d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	db12      	blt.n	8019db0 <USB_EPSetStall+0x54>
 8019d8a:	68bb      	ldr	r3, [r7, #8]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d00f      	beq.n	8019db0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8019d90:	68bb      	ldr	r3, [r7, #8]
 8019d92:	015a      	lsls	r2, r3, #5
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	4413      	add	r3, r2
 8019d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	68ba      	ldr	r2, [r7, #8]
 8019da0:	0151      	lsls	r1, r2, #5
 8019da2:	68fa      	ldr	r2, [r7, #12]
 8019da4:	440a      	add	r2, r1
 8019da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8019dae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8019db0:	68bb      	ldr	r3, [r7, #8]
 8019db2:	015a      	lsls	r2, r3, #5
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	4413      	add	r3, r2
 8019db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	68ba      	ldr	r2, [r7, #8]
 8019dc0:	0151      	lsls	r1, r2, #5
 8019dc2:	68fa      	ldr	r2, [r7, #12]
 8019dc4:	440a      	add	r2, r1
 8019dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019dce:	6013      	str	r3, [r2, #0]
 8019dd0:	e02b      	b.n	8019e2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8019dd2:	68bb      	ldr	r3, [r7, #8]
 8019dd4:	015a      	lsls	r2, r3, #5
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	4413      	add	r3, r2
 8019dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	db12      	blt.n	8019e0a <USB_EPSetStall+0xae>
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d00f      	beq.n	8019e0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8019dea:	68bb      	ldr	r3, [r7, #8]
 8019dec:	015a      	lsls	r2, r3, #5
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	4413      	add	r3, r2
 8019df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	68ba      	ldr	r2, [r7, #8]
 8019dfa:	0151      	lsls	r1, r2, #5
 8019dfc:	68fa      	ldr	r2, [r7, #12]
 8019dfe:	440a      	add	r2, r1
 8019e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019e04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8019e08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	015a      	lsls	r2, r3, #5
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	4413      	add	r3, r2
 8019e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	68ba      	ldr	r2, [r7, #8]
 8019e1a:	0151      	lsls	r1, r2, #5
 8019e1c:	68fa      	ldr	r2, [r7, #12]
 8019e1e:	440a      	add	r2, r1
 8019e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019e28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019e2a:	2300      	movs	r3, #0
}
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	3714      	adds	r7, #20
 8019e30:	46bd      	mov	sp, r7
 8019e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e36:	4770      	bx	lr

08019e38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019e38:	b480      	push	{r7}
 8019e3a:	b085      	sub	sp, #20
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
 8019e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	781b      	ldrb	r3, [r3, #0]
 8019e4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	785b      	ldrb	r3, [r3, #1]
 8019e50:	2b01      	cmp	r3, #1
 8019e52:	d128      	bne.n	8019ea6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8019e54:	68bb      	ldr	r3, [r7, #8]
 8019e56:	015a      	lsls	r2, r3, #5
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	4413      	add	r3, r2
 8019e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	68ba      	ldr	r2, [r7, #8]
 8019e64:	0151      	lsls	r1, r2, #5
 8019e66:	68fa      	ldr	r2, [r7, #12]
 8019e68:	440a      	add	r2, r1
 8019e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019e6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019e72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	791b      	ldrb	r3, [r3, #4]
 8019e78:	2b03      	cmp	r3, #3
 8019e7a:	d003      	beq.n	8019e84 <USB_EPClearStall+0x4c>
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	791b      	ldrb	r3, [r3, #4]
 8019e80:	2b02      	cmp	r3, #2
 8019e82:	d138      	bne.n	8019ef6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8019e84:	68bb      	ldr	r3, [r7, #8]
 8019e86:	015a      	lsls	r2, r3, #5
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	4413      	add	r3, r2
 8019e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	68ba      	ldr	r2, [r7, #8]
 8019e94:	0151      	lsls	r1, r2, #5
 8019e96:	68fa      	ldr	r2, [r7, #12]
 8019e98:	440a      	add	r2, r1
 8019e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019ea2:	6013      	str	r3, [r2, #0]
 8019ea4:	e027      	b.n	8019ef6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	015a      	lsls	r2, r3, #5
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	4413      	add	r3, r2
 8019eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	68ba      	ldr	r2, [r7, #8]
 8019eb6:	0151      	lsls	r1, r2, #5
 8019eb8:	68fa      	ldr	r2, [r7, #12]
 8019eba:	440a      	add	r2, r1
 8019ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019ec0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019ec4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8019ec6:	683b      	ldr	r3, [r7, #0]
 8019ec8:	791b      	ldrb	r3, [r3, #4]
 8019eca:	2b03      	cmp	r3, #3
 8019ecc:	d003      	beq.n	8019ed6 <USB_EPClearStall+0x9e>
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	791b      	ldrb	r3, [r3, #4]
 8019ed2:	2b02      	cmp	r3, #2
 8019ed4:	d10f      	bne.n	8019ef6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	015a      	lsls	r2, r3, #5
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	4413      	add	r3, r2
 8019ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	68ba      	ldr	r2, [r7, #8]
 8019ee6:	0151      	lsls	r1, r2, #5
 8019ee8:	68fa      	ldr	r2, [r7, #12]
 8019eea:	440a      	add	r2, r1
 8019eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019ef4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8019ef6:	2300      	movs	r3, #0
}
 8019ef8:	4618      	mov	r0, r3
 8019efa:	3714      	adds	r7, #20
 8019efc:	46bd      	mov	sp, r7
 8019efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f02:	4770      	bx	lr

08019f04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8019f04:	b480      	push	{r7}
 8019f06:	b085      	sub	sp, #20
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
 8019f0c:	460b      	mov	r3, r1
 8019f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	68fa      	ldr	r2, [r7, #12]
 8019f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019f22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8019f26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f2e:	681a      	ldr	r2, [r3, #0]
 8019f30:	78fb      	ldrb	r3, [r7, #3]
 8019f32:	011b      	lsls	r3, r3, #4
 8019f34:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8019f38:	68f9      	ldr	r1, [r7, #12]
 8019f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019f3e:	4313      	orrs	r3, r2
 8019f40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8019f42:	2300      	movs	r3, #0
}
 8019f44:	4618      	mov	r0, r3
 8019f46:	3714      	adds	r7, #20
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f4e:	4770      	bx	lr

08019f50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8019f50:	b480      	push	{r7}
 8019f52:	b085      	sub	sp, #20
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	68fa      	ldr	r2, [r7, #12]
 8019f66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019f6a:	f023 0303 	bic.w	r3, r3, #3
 8019f6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f76:	685b      	ldr	r3, [r3, #4]
 8019f78:	68fa      	ldr	r2, [r7, #12]
 8019f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019f7e:	f023 0302 	bic.w	r3, r3, #2
 8019f82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8019f84:	2300      	movs	r3, #0
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3714      	adds	r7, #20
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f90:	4770      	bx	lr

08019f92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8019f92:	b480      	push	{r7}
 8019f94:	b085      	sub	sp, #20
 8019f96:	af00      	add	r7, sp, #0
 8019f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	68fa      	ldr	r2, [r7, #12]
 8019fa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019fac:	f023 0303 	bic.w	r3, r3, #3
 8019fb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019fb8:	685b      	ldr	r3, [r3, #4]
 8019fba:	68fa      	ldr	r2, [r7, #12]
 8019fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019fc0:	f043 0302 	orr.w	r3, r3, #2
 8019fc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8019fc6:	2300      	movs	r3, #0
}
 8019fc8:	4618      	mov	r0, r3
 8019fca:	3714      	adds	r7, #20
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd2:	4770      	bx	lr

08019fd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8019fd4:	b480      	push	{r7}
 8019fd6:	b085      	sub	sp, #20
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	695b      	ldr	r3, [r3, #20]
 8019fe0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	699b      	ldr	r3, [r3, #24]
 8019fe6:	68fa      	ldr	r2, [r7, #12]
 8019fe8:	4013      	ands	r3, r2
 8019fea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8019fec:	68fb      	ldr	r3, [r7, #12]
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	3714      	adds	r7, #20
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ff8:	4770      	bx	lr

08019ffa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8019ffa:	b480      	push	{r7}
 8019ffc:	b085      	sub	sp, #20
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a00c:	699b      	ldr	r3, [r3, #24]
 801a00e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a016:	69db      	ldr	r3, [r3, #28]
 801a018:	68ba      	ldr	r2, [r7, #8]
 801a01a:	4013      	ands	r3, r2
 801a01c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801a01e:	68bb      	ldr	r3, [r7, #8]
 801a020:	0c1b      	lsrs	r3, r3, #16
}
 801a022:	4618      	mov	r0, r3
 801a024:	3714      	adds	r7, #20
 801a026:	46bd      	mov	sp, r7
 801a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02c:	4770      	bx	lr

0801a02e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a02e:	b480      	push	{r7}
 801a030:	b085      	sub	sp, #20
 801a032:	af00      	add	r7, sp, #0
 801a034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a040:	699b      	ldr	r3, [r3, #24]
 801a042:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a04a:	69db      	ldr	r3, [r3, #28]
 801a04c:	68ba      	ldr	r2, [r7, #8]
 801a04e:	4013      	ands	r3, r2
 801a050:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	b29b      	uxth	r3, r3
}
 801a056:	4618      	mov	r0, r3
 801a058:	3714      	adds	r7, #20
 801a05a:	46bd      	mov	sp, r7
 801a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a060:	4770      	bx	lr

0801a062 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a062:	b480      	push	{r7}
 801a064:	b085      	sub	sp, #20
 801a066:	af00      	add	r7, sp, #0
 801a068:	6078      	str	r0, [r7, #4]
 801a06a:	460b      	mov	r3, r1
 801a06c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801a072:	78fb      	ldrb	r3, [r7, #3]
 801a074:	015a      	lsls	r2, r3, #5
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	4413      	add	r3, r2
 801a07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a07e:	689b      	ldr	r3, [r3, #8]
 801a080:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a088:	695b      	ldr	r3, [r3, #20]
 801a08a:	68ba      	ldr	r2, [r7, #8]
 801a08c:	4013      	ands	r3, r2
 801a08e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a090:	68bb      	ldr	r3, [r7, #8]
}
 801a092:	4618      	mov	r0, r3
 801a094:	3714      	adds	r7, #20
 801a096:	46bd      	mov	sp, r7
 801a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09c:	4770      	bx	lr

0801a09e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a09e:	b480      	push	{r7}
 801a0a0:	b087      	sub	sp, #28
 801a0a2:	af00      	add	r7, sp, #0
 801a0a4:	6078      	str	r0, [r7, #4]
 801a0a6:	460b      	mov	r3, r1
 801a0a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801a0ae:	697b      	ldr	r3, [r7, #20]
 801a0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0b4:	691b      	ldr	r3, [r3, #16]
 801a0b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801a0b8:	697b      	ldr	r3, [r7, #20]
 801a0ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a0c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801a0c2:	78fb      	ldrb	r3, [r7, #3]
 801a0c4:	f003 030f 	and.w	r3, r3, #15
 801a0c8:	68fa      	ldr	r2, [r7, #12]
 801a0ca:	fa22 f303 	lsr.w	r3, r2, r3
 801a0ce:	01db      	lsls	r3, r3, #7
 801a0d0:	b2db      	uxtb	r3, r3
 801a0d2:	693a      	ldr	r2, [r7, #16]
 801a0d4:	4313      	orrs	r3, r2
 801a0d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801a0d8:	78fb      	ldrb	r3, [r7, #3]
 801a0da:	015a      	lsls	r2, r3, #5
 801a0dc:	697b      	ldr	r3, [r7, #20]
 801a0de:	4413      	add	r3, r2
 801a0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a0e4:	689b      	ldr	r3, [r3, #8]
 801a0e6:	693a      	ldr	r2, [r7, #16]
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a0ec:	68bb      	ldr	r3, [r7, #8]
}
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	371c      	adds	r7, #28
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f8:	4770      	bx	lr

0801a0fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801a0fa:	b480      	push	{r7}
 801a0fc:	b083      	sub	sp, #12
 801a0fe:	af00      	add	r7, sp, #0
 801a100:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	695b      	ldr	r3, [r3, #20]
 801a106:	f003 0301 	and.w	r3, r3, #1
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	370c      	adds	r7, #12
 801a10e:	46bd      	mov	sp, r7
 801a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a114:	4770      	bx	lr
	...

0801a118 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801a118:	b480      	push	{r7}
 801a11a:	b085      	sub	sp, #20
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a12a:	681a      	ldr	r2, [r3, #0]
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a132:	4619      	mov	r1, r3
 801a134:	4b09      	ldr	r3, [pc, #36]	; (801a15c <USB_ActivateSetup+0x44>)
 801a136:	4013      	ands	r3, r2
 801a138:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a140:	685b      	ldr	r3, [r3, #4]
 801a142:	68fa      	ldr	r2, [r7, #12]
 801a144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a14c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a14e:	2300      	movs	r3, #0
}
 801a150:	4618      	mov	r0, r3
 801a152:	3714      	adds	r7, #20
 801a154:	46bd      	mov	sp, r7
 801a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a15a:	4770      	bx	lr
 801a15c:	fffff800 	.word	0xfffff800

0801a160 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801a160:	b480      	push	{r7}
 801a162:	b087      	sub	sp, #28
 801a164:	af00      	add	r7, sp, #0
 801a166:	60f8      	str	r0, [r7, #12]
 801a168:	460b      	mov	r3, r1
 801a16a:	607a      	str	r2, [r7, #4]
 801a16c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	333c      	adds	r3, #60	; 0x3c
 801a176:	3304      	adds	r3, #4
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801a17c:	693b      	ldr	r3, [r7, #16]
 801a17e:	4a26      	ldr	r2, [pc, #152]	; (801a218 <USB_EP0_OutStart+0xb8>)
 801a180:	4293      	cmp	r3, r2
 801a182:	d90a      	bls.n	801a19a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a184:	697b      	ldr	r3, [r7, #20]
 801a186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a194:	d101      	bne.n	801a19a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801a196:	2300      	movs	r3, #0
 801a198:	e037      	b.n	801a20a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801a19a:	697b      	ldr	r3, [r7, #20]
 801a19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1a0:	461a      	mov	r2, r3
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a1a6:	697b      	ldr	r3, [r7, #20]
 801a1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1ac:	691b      	ldr	r3, [r3, #16]
 801a1ae:	697a      	ldr	r2, [r7, #20]
 801a1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a1b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a1b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801a1ba:	697b      	ldr	r3, [r7, #20]
 801a1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1c0:	691b      	ldr	r3, [r3, #16]
 801a1c2:	697a      	ldr	r2, [r7, #20]
 801a1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a1c8:	f043 0318 	orr.w	r3, r3, #24
 801a1cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801a1ce:	697b      	ldr	r3, [r7, #20]
 801a1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1d4:	691b      	ldr	r3, [r3, #16]
 801a1d6:	697a      	ldr	r2, [r7, #20]
 801a1d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a1dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801a1e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801a1e2:	7afb      	ldrb	r3, [r7, #11]
 801a1e4:	2b01      	cmp	r3, #1
 801a1e6:	d10f      	bne.n	801a208 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801a1e8:	697b      	ldr	r3, [r7, #20]
 801a1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801a1f4:	697b      	ldr	r3, [r7, #20]
 801a1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	697a      	ldr	r2, [r7, #20]
 801a1fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a202:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801a206:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a208:	2300      	movs	r3, #0
}
 801a20a:	4618      	mov	r0, r3
 801a20c:	371c      	adds	r7, #28
 801a20e:	46bd      	mov	sp, r7
 801a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a214:	4770      	bx	lr
 801a216:	bf00      	nop
 801a218:	4f54300a 	.word	0x4f54300a

0801a21c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801a21c:	b480      	push	{r7}
 801a21e:	b085      	sub	sp, #20
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a224:	2300      	movs	r3, #0
 801a226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	3301      	adds	r3, #1
 801a22c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	4a13      	ldr	r2, [pc, #76]	; (801a280 <USB_CoreReset+0x64>)
 801a232:	4293      	cmp	r3, r2
 801a234:	d901      	bls.n	801a23a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801a236:	2303      	movs	r3, #3
 801a238:	e01b      	b.n	801a272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	691b      	ldr	r3, [r3, #16]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	daf2      	bge.n	801a228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801a242:	2300      	movs	r3, #0
 801a244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	691b      	ldr	r3, [r3, #16]
 801a24a:	f043 0201 	orr.w	r2, r3, #1
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	3301      	adds	r3, #1
 801a256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	4a09      	ldr	r2, [pc, #36]	; (801a280 <USB_CoreReset+0x64>)
 801a25c:	4293      	cmp	r3, r2
 801a25e:	d901      	bls.n	801a264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801a260:	2303      	movs	r3, #3
 801a262:	e006      	b.n	801a272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	691b      	ldr	r3, [r3, #16]
 801a268:	f003 0301 	and.w	r3, r3, #1
 801a26c:	2b01      	cmp	r3, #1
 801a26e:	d0f0      	beq.n	801a252 <USB_CoreReset+0x36>

  return HAL_OK;
 801a270:	2300      	movs	r3, #0
}
 801a272:	4618      	mov	r0, r3
 801a274:	3714      	adds	r7, #20
 801a276:	46bd      	mov	sp, r7
 801a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27c:	4770      	bx	lr
 801a27e:	bf00      	nop
 801a280:	00030d40 	.word	0x00030d40

0801a284 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b084      	sub	sp, #16
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
 801a28c:	460b      	mov	r3, r1
 801a28e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a290:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801a294:	f002 fc54 	bl	801cb40 <USBD_static_malloc>
 801a298:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d109      	bne.n	801a2b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	32b0      	adds	r2, #176	; 0xb0
 801a2aa:	2100      	movs	r1, #0
 801a2ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801a2b0:	2302      	movs	r3, #2
 801a2b2:	e0d4      	b.n	801a45e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801a2b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801a2b8:	2100      	movs	r1, #0
 801a2ba:	68f8      	ldr	r0, [r7, #12]
 801a2bc:	f002 fd42 	bl	801cd44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	32b0      	adds	r2, #176	; 0xb0
 801a2ca:	68f9      	ldr	r1, [r7, #12]
 801a2cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	32b0      	adds	r2, #176	; 0xb0
 801a2da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	7c1b      	ldrb	r3, [r3, #16]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d138      	bne.n	801a35e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a2ec:	4b5e      	ldr	r3, [pc, #376]	; (801a468 <USBD_CDC_Init+0x1e4>)
 801a2ee:	7819      	ldrb	r1, [r3, #0]
 801a2f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a2f4:	2202      	movs	r2, #2
 801a2f6:	6878      	ldr	r0, [r7, #4]
 801a2f8:	f002 faff 	bl	801c8fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a2fc:	4b5a      	ldr	r3, [pc, #360]	; (801a468 <USBD_CDC_Init+0x1e4>)
 801a2fe:	781b      	ldrb	r3, [r3, #0]
 801a300:	f003 020f 	and.w	r2, r3, #15
 801a304:	6879      	ldr	r1, [r7, #4]
 801a306:	4613      	mov	r3, r2
 801a308:	009b      	lsls	r3, r3, #2
 801a30a:	4413      	add	r3, r2
 801a30c:	009b      	lsls	r3, r3, #2
 801a30e:	440b      	add	r3, r1
 801a310:	3324      	adds	r3, #36	; 0x24
 801a312:	2201      	movs	r2, #1
 801a314:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a316:	4b55      	ldr	r3, [pc, #340]	; (801a46c <USBD_CDC_Init+0x1e8>)
 801a318:	7819      	ldrb	r1, [r3, #0]
 801a31a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a31e:	2202      	movs	r2, #2
 801a320:	6878      	ldr	r0, [r7, #4]
 801a322:	f002 faea 	bl	801c8fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a326:	4b51      	ldr	r3, [pc, #324]	; (801a46c <USBD_CDC_Init+0x1e8>)
 801a328:	781b      	ldrb	r3, [r3, #0]
 801a32a:	f003 020f 	and.w	r2, r3, #15
 801a32e:	6879      	ldr	r1, [r7, #4]
 801a330:	4613      	mov	r3, r2
 801a332:	009b      	lsls	r3, r3, #2
 801a334:	4413      	add	r3, r2
 801a336:	009b      	lsls	r3, r3, #2
 801a338:	440b      	add	r3, r1
 801a33a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a33e:	2201      	movs	r2, #1
 801a340:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801a342:	4b4b      	ldr	r3, [pc, #300]	; (801a470 <USBD_CDC_Init+0x1ec>)
 801a344:	781b      	ldrb	r3, [r3, #0]
 801a346:	f003 020f 	and.w	r2, r3, #15
 801a34a:	6879      	ldr	r1, [r7, #4]
 801a34c:	4613      	mov	r3, r2
 801a34e:	009b      	lsls	r3, r3, #2
 801a350:	4413      	add	r3, r2
 801a352:	009b      	lsls	r3, r3, #2
 801a354:	440b      	add	r3, r1
 801a356:	3326      	adds	r3, #38	; 0x26
 801a358:	2210      	movs	r2, #16
 801a35a:	801a      	strh	r2, [r3, #0]
 801a35c:	e035      	b.n	801a3ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a35e:	4b42      	ldr	r3, [pc, #264]	; (801a468 <USBD_CDC_Init+0x1e4>)
 801a360:	7819      	ldrb	r1, [r3, #0]
 801a362:	2340      	movs	r3, #64	; 0x40
 801a364:	2202      	movs	r2, #2
 801a366:	6878      	ldr	r0, [r7, #4]
 801a368:	f002 fac7 	bl	801c8fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a36c:	4b3e      	ldr	r3, [pc, #248]	; (801a468 <USBD_CDC_Init+0x1e4>)
 801a36e:	781b      	ldrb	r3, [r3, #0]
 801a370:	f003 020f 	and.w	r2, r3, #15
 801a374:	6879      	ldr	r1, [r7, #4]
 801a376:	4613      	mov	r3, r2
 801a378:	009b      	lsls	r3, r3, #2
 801a37a:	4413      	add	r3, r2
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	440b      	add	r3, r1
 801a380:	3324      	adds	r3, #36	; 0x24
 801a382:	2201      	movs	r2, #1
 801a384:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a386:	4b39      	ldr	r3, [pc, #228]	; (801a46c <USBD_CDC_Init+0x1e8>)
 801a388:	7819      	ldrb	r1, [r3, #0]
 801a38a:	2340      	movs	r3, #64	; 0x40
 801a38c:	2202      	movs	r2, #2
 801a38e:	6878      	ldr	r0, [r7, #4]
 801a390:	f002 fab3 	bl	801c8fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a394:	4b35      	ldr	r3, [pc, #212]	; (801a46c <USBD_CDC_Init+0x1e8>)
 801a396:	781b      	ldrb	r3, [r3, #0]
 801a398:	f003 020f 	and.w	r2, r3, #15
 801a39c:	6879      	ldr	r1, [r7, #4]
 801a39e:	4613      	mov	r3, r2
 801a3a0:	009b      	lsls	r3, r3, #2
 801a3a2:	4413      	add	r3, r2
 801a3a4:	009b      	lsls	r3, r3, #2
 801a3a6:	440b      	add	r3, r1
 801a3a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a3ac:	2201      	movs	r2, #1
 801a3ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801a3b0:	4b2f      	ldr	r3, [pc, #188]	; (801a470 <USBD_CDC_Init+0x1ec>)
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	f003 020f 	and.w	r2, r3, #15
 801a3b8:	6879      	ldr	r1, [r7, #4]
 801a3ba:	4613      	mov	r3, r2
 801a3bc:	009b      	lsls	r3, r3, #2
 801a3be:	4413      	add	r3, r2
 801a3c0:	009b      	lsls	r3, r3, #2
 801a3c2:	440b      	add	r3, r1
 801a3c4:	3326      	adds	r3, #38	; 0x26
 801a3c6:	2210      	movs	r2, #16
 801a3c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a3ca:	4b29      	ldr	r3, [pc, #164]	; (801a470 <USBD_CDC_Init+0x1ec>)
 801a3cc:	7819      	ldrb	r1, [r3, #0]
 801a3ce:	2308      	movs	r3, #8
 801a3d0:	2203      	movs	r2, #3
 801a3d2:	6878      	ldr	r0, [r7, #4]
 801a3d4:	f002 fa91 	bl	801c8fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801a3d8:	4b25      	ldr	r3, [pc, #148]	; (801a470 <USBD_CDC_Init+0x1ec>)
 801a3da:	781b      	ldrb	r3, [r3, #0]
 801a3dc:	f003 020f 	and.w	r2, r3, #15
 801a3e0:	6879      	ldr	r1, [r7, #4]
 801a3e2:	4613      	mov	r3, r2
 801a3e4:	009b      	lsls	r3, r3, #2
 801a3e6:	4413      	add	r3, r2
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	440b      	add	r3, r1
 801a3ec:	3324      	adds	r3, #36	; 0x24
 801a3ee:	2201      	movs	r2, #1
 801a3f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	2200      	movs	r2, #0
 801a3f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a400:	687a      	ldr	r2, [r7, #4]
 801a402:	33b0      	adds	r3, #176	; 0xb0
 801a404:	009b      	lsls	r3, r3, #2
 801a406:	4413      	add	r3, r2
 801a408:	685b      	ldr	r3, [r3, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	2200      	movs	r2, #0
 801a412:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	2200      	movs	r2, #0
 801a41a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801a424:	2b00      	cmp	r3, #0
 801a426:	d101      	bne.n	801a42c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801a428:	2302      	movs	r3, #2
 801a42a:	e018      	b.n	801a45e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	7c1b      	ldrb	r3, [r3, #16]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d10a      	bne.n	801a44a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a434:	4b0d      	ldr	r3, [pc, #52]	; (801a46c <USBD_CDC_Init+0x1e8>)
 801a436:	7819      	ldrb	r1, [r3, #0]
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a43e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a442:	6878      	ldr	r0, [r7, #4]
 801a444:	f002 fb48 	bl	801cad8 <USBD_LL_PrepareReceive>
 801a448:	e008      	b.n	801a45c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a44a:	4b08      	ldr	r3, [pc, #32]	; (801a46c <USBD_CDC_Init+0x1e8>)
 801a44c:	7819      	ldrb	r1, [r3, #0]
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a454:	2340      	movs	r3, #64	; 0x40
 801a456:	6878      	ldr	r0, [r7, #4]
 801a458:	f002 fb3e 	bl	801cad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801a45c:	2300      	movs	r3, #0
}
 801a45e:	4618      	mov	r0, r3
 801a460:	3710      	adds	r7, #16
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}
 801a466:	bf00      	nop
 801a468:	24000097 	.word	0x24000097
 801a46c:	24000098 	.word	0x24000098
 801a470:	24000099 	.word	0x24000099

0801a474 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a474:	b580      	push	{r7, lr}
 801a476:	b082      	sub	sp, #8
 801a478:	af00      	add	r7, sp, #0
 801a47a:	6078      	str	r0, [r7, #4]
 801a47c:	460b      	mov	r3, r1
 801a47e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801a480:	4b3a      	ldr	r3, [pc, #232]	; (801a56c <USBD_CDC_DeInit+0xf8>)
 801a482:	781b      	ldrb	r3, [r3, #0]
 801a484:	4619      	mov	r1, r3
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f002 fa5d 	bl	801c946 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801a48c:	4b37      	ldr	r3, [pc, #220]	; (801a56c <USBD_CDC_DeInit+0xf8>)
 801a48e:	781b      	ldrb	r3, [r3, #0]
 801a490:	f003 020f 	and.w	r2, r3, #15
 801a494:	6879      	ldr	r1, [r7, #4]
 801a496:	4613      	mov	r3, r2
 801a498:	009b      	lsls	r3, r3, #2
 801a49a:	4413      	add	r3, r2
 801a49c:	009b      	lsls	r3, r3, #2
 801a49e:	440b      	add	r3, r1
 801a4a0:	3324      	adds	r3, #36	; 0x24
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801a4a6:	4b32      	ldr	r3, [pc, #200]	; (801a570 <USBD_CDC_DeInit+0xfc>)
 801a4a8:	781b      	ldrb	r3, [r3, #0]
 801a4aa:	4619      	mov	r1, r3
 801a4ac:	6878      	ldr	r0, [r7, #4]
 801a4ae:	f002 fa4a 	bl	801c946 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801a4b2:	4b2f      	ldr	r3, [pc, #188]	; (801a570 <USBD_CDC_DeInit+0xfc>)
 801a4b4:	781b      	ldrb	r3, [r3, #0]
 801a4b6:	f003 020f 	and.w	r2, r3, #15
 801a4ba:	6879      	ldr	r1, [r7, #4]
 801a4bc:	4613      	mov	r3, r2
 801a4be:	009b      	lsls	r3, r3, #2
 801a4c0:	4413      	add	r3, r2
 801a4c2:	009b      	lsls	r3, r3, #2
 801a4c4:	440b      	add	r3, r1
 801a4c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801a4ce:	4b29      	ldr	r3, [pc, #164]	; (801a574 <USBD_CDC_DeInit+0x100>)
 801a4d0:	781b      	ldrb	r3, [r3, #0]
 801a4d2:	4619      	mov	r1, r3
 801a4d4:	6878      	ldr	r0, [r7, #4]
 801a4d6:	f002 fa36 	bl	801c946 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801a4da:	4b26      	ldr	r3, [pc, #152]	; (801a574 <USBD_CDC_DeInit+0x100>)
 801a4dc:	781b      	ldrb	r3, [r3, #0]
 801a4de:	f003 020f 	and.w	r2, r3, #15
 801a4e2:	6879      	ldr	r1, [r7, #4]
 801a4e4:	4613      	mov	r3, r2
 801a4e6:	009b      	lsls	r3, r3, #2
 801a4e8:	4413      	add	r3, r2
 801a4ea:	009b      	lsls	r3, r3, #2
 801a4ec:	440b      	add	r3, r1
 801a4ee:	3324      	adds	r3, #36	; 0x24
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801a4f4:	4b1f      	ldr	r3, [pc, #124]	; (801a574 <USBD_CDC_DeInit+0x100>)
 801a4f6:	781b      	ldrb	r3, [r3, #0]
 801a4f8:	f003 020f 	and.w	r2, r3, #15
 801a4fc:	6879      	ldr	r1, [r7, #4]
 801a4fe:	4613      	mov	r3, r2
 801a500:	009b      	lsls	r3, r3, #2
 801a502:	4413      	add	r3, r2
 801a504:	009b      	lsls	r3, r3, #2
 801a506:	440b      	add	r3, r1
 801a508:	3326      	adds	r3, #38	; 0x26
 801a50a:	2200      	movs	r2, #0
 801a50c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	32b0      	adds	r2, #176	; 0xb0
 801a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d01f      	beq.n	801a560 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a526:	687a      	ldr	r2, [r7, #4]
 801a528:	33b0      	adds	r3, #176	; 0xb0
 801a52a:	009b      	lsls	r3, r3, #2
 801a52c:	4413      	add	r3, r2
 801a52e:	685b      	ldr	r3, [r3, #4]
 801a530:	685b      	ldr	r3, [r3, #4]
 801a532:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	32b0      	adds	r2, #176	; 0xb0
 801a53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a542:	4618      	mov	r0, r3
 801a544:	f002 fb0a 	bl	801cb5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	32b0      	adds	r2, #176	; 0xb0
 801a552:	2100      	movs	r1, #0
 801a554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2200      	movs	r2, #0
 801a55c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801a560:	2300      	movs	r3, #0
}
 801a562:	4618      	mov	r0, r3
 801a564:	3708      	adds	r7, #8
 801a566:	46bd      	mov	sp, r7
 801a568:	bd80      	pop	{r7, pc}
 801a56a:	bf00      	nop
 801a56c:	24000097 	.word	0x24000097
 801a570:	24000098 	.word	0x24000098
 801a574:	24000099 	.word	0x24000099

0801a578 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801a578:	b580      	push	{r7, lr}
 801a57a:	b086      	sub	sp, #24
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	6078      	str	r0, [r7, #4]
 801a580:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	32b0      	adds	r2, #176	; 0xb0
 801a58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a590:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801a592:	2300      	movs	r3, #0
 801a594:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801a596:	2300      	movs	r3, #0
 801a598:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801a59a:	2300      	movs	r3, #0
 801a59c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801a59e:	693b      	ldr	r3, [r7, #16]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d101      	bne.n	801a5a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801a5a4:	2303      	movs	r3, #3
 801a5a6:	e0bf      	b.n	801a728 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d050      	beq.n	801a656 <USBD_CDC_Setup+0xde>
 801a5b4:	2b20      	cmp	r3, #32
 801a5b6:	f040 80af 	bne.w	801a718 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	88db      	ldrh	r3, [r3, #6]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d03a      	beq.n	801a638 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801a5c2:	683b      	ldr	r3, [r7, #0]
 801a5c4:	781b      	ldrb	r3, [r3, #0]
 801a5c6:	b25b      	sxtb	r3, r3
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	da1b      	bge.n	801a604 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a5d2:	687a      	ldr	r2, [r7, #4]
 801a5d4:	33b0      	adds	r3, #176	; 0xb0
 801a5d6:	009b      	lsls	r3, r3, #2
 801a5d8:	4413      	add	r3, r2
 801a5da:	685b      	ldr	r3, [r3, #4]
 801a5dc:	689b      	ldr	r3, [r3, #8]
 801a5de:	683a      	ldr	r2, [r7, #0]
 801a5e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801a5e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a5e4:	683a      	ldr	r2, [r7, #0]
 801a5e6:	88d2      	ldrh	r2, [r2, #6]
 801a5e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	88db      	ldrh	r3, [r3, #6]
 801a5ee:	2b07      	cmp	r3, #7
 801a5f0:	bf28      	it	cs
 801a5f2:	2307      	movcs	r3, #7
 801a5f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801a5f6:	693b      	ldr	r3, [r7, #16]
 801a5f8:	89fa      	ldrh	r2, [r7, #14]
 801a5fa:	4619      	mov	r1, r3
 801a5fc:	6878      	ldr	r0, [r7, #4]
 801a5fe:	f001 fd43 	bl	801c088 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801a602:	e090      	b.n	801a726 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801a604:	683b      	ldr	r3, [r7, #0]
 801a606:	785a      	ldrb	r2, [r3, #1]
 801a608:	693b      	ldr	r3, [r7, #16]
 801a60a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	88db      	ldrh	r3, [r3, #6]
 801a612:	2b3f      	cmp	r3, #63	; 0x3f
 801a614:	d803      	bhi.n	801a61e <USBD_CDC_Setup+0xa6>
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	88db      	ldrh	r3, [r3, #6]
 801a61a:	b2da      	uxtb	r2, r3
 801a61c:	e000      	b.n	801a620 <USBD_CDC_Setup+0xa8>
 801a61e:	2240      	movs	r2, #64	; 0x40
 801a620:	693b      	ldr	r3, [r7, #16]
 801a622:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801a626:	6939      	ldr	r1, [r7, #16]
 801a628:	693b      	ldr	r3, [r7, #16]
 801a62a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801a62e:	461a      	mov	r2, r3
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f001 fd55 	bl	801c0e0 <USBD_CtlPrepareRx>
      break;
 801a636:	e076      	b.n	801a726 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a63e:	687a      	ldr	r2, [r7, #4]
 801a640:	33b0      	adds	r3, #176	; 0xb0
 801a642:	009b      	lsls	r3, r3, #2
 801a644:	4413      	add	r3, r2
 801a646:	685b      	ldr	r3, [r3, #4]
 801a648:	689b      	ldr	r3, [r3, #8]
 801a64a:	683a      	ldr	r2, [r7, #0]
 801a64c:	7850      	ldrb	r0, [r2, #1]
 801a64e:	2200      	movs	r2, #0
 801a650:	6839      	ldr	r1, [r7, #0]
 801a652:	4798      	blx	r3
      break;
 801a654:	e067      	b.n	801a726 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a656:	683b      	ldr	r3, [r7, #0]
 801a658:	785b      	ldrb	r3, [r3, #1]
 801a65a:	2b0b      	cmp	r3, #11
 801a65c:	d851      	bhi.n	801a702 <USBD_CDC_Setup+0x18a>
 801a65e:	a201      	add	r2, pc, #4	; (adr r2, 801a664 <USBD_CDC_Setup+0xec>)
 801a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a664:	0801a695 	.word	0x0801a695
 801a668:	0801a711 	.word	0x0801a711
 801a66c:	0801a703 	.word	0x0801a703
 801a670:	0801a703 	.word	0x0801a703
 801a674:	0801a703 	.word	0x0801a703
 801a678:	0801a703 	.word	0x0801a703
 801a67c:	0801a703 	.word	0x0801a703
 801a680:	0801a703 	.word	0x0801a703
 801a684:	0801a703 	.word	0x0801a703
 801a688:	0801a703 	.word	0x0801a703
 801a68c:	0801a6bf 	.word	0x0801a6bf
 801a690:	0801a6e9 	.word	0x0801a6e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a69a:	b2db      	uxtb	r3, r3
 801a69c:	2b03      	cmp	r3, #3
 801a69e:	d107      	bne.n	801a6b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801a6a0:	f107 030a 	add.w	r3, r7, #10
 801a6a4:	2202      	movs	r2, #2
 801a6a6:	4619      	mov	r1, r3
 801a6a8:	6878      	ldr	r0, [r7, #4]
 801a6aa:	f001 fced 	bl	801c088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a6ae:	e032      	b.n	801a716 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801a6b0:	6839      	ldr	r1, [r7, #0]
 801a6b2:	6878      	ldr	r0, [r7, #4]
 801a6b4:	f001 fc77 	bl	801bfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 801a6b8:	2303      	movs	r3, #3
 801a6ba:	75fb      	strb	r3, [r7, #23]
          break;
 801a6bc:	e02b      	b.n	801a716 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a6c4:	b2db      	uxtb	r3, r3
 801a6c6:	2b03      	cmp	r3, #3
 801a6c8:	d107      	bne.n	801a6da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801a6ca:	f107 030d 	add.w	r3, r7, #13
 801a6ce:	2201      	movs	r2, #1
 801a6d0:	4619      	mov	r1, r3
 801a6d2:	6878      	ldr	r0, [r7, #4]
 801a6d4:	f001 fcd8 	bl	801c088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a6d8:	e01d      	b.n	801a716 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801a6da:	6839      	ldr	r1, [r7, #0]
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f001 fc62 	bl	801bfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 801a6e2:	2303      	movs	r3, #3
 801a6e4:	75fb      	strb	r3, [r7, #23]
          break;
 801a6e6:	e016      	b.n	801a716 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a6ee:	b2db      	uxtb	r3, r3
 801a6f0:	2b03      	cmp	r3, #3
 801a6f2:	d00f      	beq.n	801a714 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801a6f4:	6839      	ldr	r1, [r7, #0]
 801a6f6:	6878      	ldr	r0, [r7, #4]
 801a6f8:	f001 fc55 	bl	801bfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 801a6fc:	2303      	movs	r3, #3
 801a6fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801a700:	e008      	b.n	801a714 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801a702:	6839      	ldr	r1, [r7, #0]
 801a704:	6878      	ldr	r0, [r7, #4]
 801a706:	f001 fc4e 	bl	801bfa6 <USBD_CtlError>
          ret = USBD_FAIL;
 801a70a:	2303      	movs	r3, #3
 801a70c:	75fb      	strb	r3, [r7, #23]
          break;
 801a70e:	e002      	b.n	801a716 <USBD_CDC_Setup+0x19e>
          break;
 801a710:	bf00      	nop
 801a712:	e008      	b.n	801a726 <USBD_CDC_Setup+0x1ae>
          break;
 801a714:	bf00      	nop
      }
      break;
 801a716:	e006      	b.n	801a726 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801a718:	6839      	ldr	r1, [r7, #0]
 801a71a:	6878      	ldr	r0, [r7, #4]
 801a71c:	f001 fc43 	bl	801bfa6 <USBD_CtlError>
      ret = USBD_FAIL;
 801a720:	2303      	movs	r3, #3
 801a722:	75fb      	strb	r3, [r7, #23]
      break;
 801a724:	bf00      	nop
  }

  return (uint8_t)ret;
 801a726:	7dfb      	ldrb	r3, [r7, #23]
}
 801a728:	4618      	mov	r0, r3
 801a72a:	3718      	adds	r7, #24
 801a72c:	46bd      	mov	sp, r7
 801a72e:	bd80      	pop	{r7, pc}

0801a730 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b084      	sub	sp, #16
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
 801a738:	460b      	mov	r3, r1
 801a73a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a742:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	32b0      	adds	r2, #176	; 0xb0
 801a74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d101      	bne.n	801a75a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801a756:	2303      	movs	r3, #3
 801a758:	e065      	b.n	801a826 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	32b0      	adds	r2, #176	; 0xb0
 801a764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a768:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801a76a:	78fb      	ldrb	r3, [r7, #3]
 801a76c:	f003 020f 	and.w	r2, r3, #15
 801a770:	6879      	ldr	r1, [r7, #4]
 801a772:	4613      	mov	r3, r2
 801a774:	009b      	lsls	r3, r3, #2
 801a776:	4413      	add	r3, r2
 801a778:	009b      	lsls	r3, r3, #2
 801a77a:	440b      	add	r3, r1
 801a77c:	3318      	adds	r3, #24
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d02f      	beq.n	801a7e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801a784:	78fb      	ldrb	r3, [r7, #3]
 801a786:	f003 020f 	and.w	r2, r3, #15
 801a78a:	6879      	ldr	r1, [r7, #4]
 801a78c:	4613      	mov	r3, r2
 801a78e:	009b      	lsls	r3, r3, #2
 801a790:	4413      	add	r3, r2
 801a792:	009b      	lsls	r3, r3, #2
 801a794:	440b      	add	r3, r1
 801a796:	3318      	adds	r3, #24
 801a798:	681a      	ldr	r2, [r3, #0]
 801a79a:	78fb      	ldrb	r3, [r7, #3]
 801a79c:	f003 010f 	and.w	r1, r3, #15
 801a7a0:	68f8      	ldr	r0, [r7, #12]
 801a7a2:	460b      	mov	r3, r1
 801a7a4:	00db      	lsls	r3, r3, #3
 801a7a6:	440b      	add	r3, r1
 801a7a8:	009b      	lsls	r3, r3, #2
 801a7aa:	4403      	add	r3, r0
 801a7ac:	3348      	adds	r3, #72	; 0x48
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	fbb2 f1f3 	udiv	r1, r2, r3
 801a7b4:	fb01 f303 	mul.w	r3, r1, r3
 801a7b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d112      	bne.n	801a7e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801a7be:	78fb      	ldrb	r3, [r7, #3]
 801a7c0:	f003 020f 	and.w	r2, r3, #15
 801a7c4:	6879      	ldr	r1, [r7, #4]
 801a7c6:	4613      	mov	r3, r2
 801a7c8:	009b      	lsls	r3, r3, #2
 801a7ca:	4413      	add	r3, r2
 801a7cc:	009b      	lsls	r3, r3, #2
 801a7ce:	440b      	add	r3, r1
 801a7d0:	3318      	adds	r3, #24
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a7d6:	78f9      	ldrb	r1, [r7, #3]
 801a7d8:	2300      	movs	r3, #0
 801a7da:	2200      	movs	r2, #0
 801a7dc:	6878      	ldr	r0, [r7, #4]
 801a7de:	f002 f95a 	bl	801ca96 <USBD_LL_Transmit>
 801a7e2:	e01f      	b.n	801a824 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a7f2:	687a      	ldr	r2, [r7, #4]
 801a7f4:	33b0      	adds	r3, #176	; 0xb0
 801a7f6:	009b      	lsls	r3, r3, #2
 801a7f8:	4413      	add	r3, r2
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	691b      	ldr	r3, [r3, #16]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d010      	beq.n	801a824 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a808:	687a      	ldr	r2, [r7, #4]
 801a80a:	33b0      	adds	r3, #176	; 0xb0
 801a80c:	009b      	lsls	r3, r3, #2
 801a80e:	4413      	add	r3, r2
 801a810:	685b      	ldr	r3, [r3, #4]
 801a812:	691b      	ldr	r3, [r3, #16]
 801a814:	68ba      	ldr	r2, [r7, #8]
 801a816:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801a81a:	68ba      	ldr	r2, [r7, #8]
 801a81c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801a820:	78fa      	ldrb	r2, [r7, #3]
 801a822:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801a824:	2300      	movs	r3, #0
}
 801a826:	4618      	mov	r0, r3
 801a828:	3710      	adds	r7, #16
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd80      	pop	{r7, pc}

0801a82e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a82e:	b580      	push	{r7, lr}
 801a830:	b084      	sub	sp, #16
 801a832:	af00      	add	r7, sp, #0
 801a834:	6078      	str	r0, [r7, #4]
 801a836:	460b      	mov	r3, r1
 801a838:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	32b0      	adds	r2, #176	; 0xb0
 801a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a848:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	32b0      	adds	r2, #176	; 0xb0
 801a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d101      	bne.n	801a860 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801a85c:	2303      	movs	r3, #3
 801a85e:	e01a      	b.n	801a896 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a860:	78fb      	ldrb	r3, [r7, #3]
 801a862:	4619      	mov	r1, r3
 801a864:	6878      	ldr	r0, [r7, #4]
 801a866:	f002 f958 	bl	801cb1a <USBD_LL_GetRxDataSize>
 801a86a:	4602      	mov	r2, r0
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a878:	687a      	ldr	r2, [r7, #4]
 801a87a:	33b0      	adds	r3, #176	; 0xb0
 801a87c:	009b      	lsls	r3, r3, #2
 801a87e:	4413      	add	r3, r2
 801a880:	685b      	ldr	r3, [r3, #4]
 801a882:	68db      	ldr	r3, [r3, #12]
 801a884:	68fa      	ldr	r2, [r7, #12]
 801a886:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801a88a:	68fa      	ldr	r2, [r7, #12]
 801a88c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801a890:	4611      	mov	r1, r2
 801a892:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801a894:	2300      	movs	r3, #0
}
 801a896:	4618      	mov	r0, r3
 801a898:	3710      	adds	r7, #16
 801a89a:	46bd      	mov	sp, r7
 801a89c:	bd80      	pop	{r7, pc}

0801a89e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a89e:	b580      	push	{r7, lr}
 801a8a0:	b084      	sub	sp, #16
 801a8a2:	af00      	add	r7, sp, #0
 801a8a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	32b0      	adds	r2, #176	; 0xb0
 801a8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a8b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d101      	bne.n	801a8c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801a8bc:	2303      	movs	r3, #3
 801a8be:	e025      	b.n	801a90c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a8c6:	687a      	ldr	r2, [r7, #4]
 801a8c8:	33b0      	adds	r3, #176	; 0xb0
 801a8ca:	009b      	lsls	r3, r3, #2
 801a8cc:	4413      	add	r3, r2
 801a8ce:	685b      	ldr	r3, [r3, #4]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d01a      	beq.n	801a90a <USBD_CDC_EP0_RxReady+0x6c>
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801a8da:	2bff      	cmp	r3, #255	; 0xff
 801a8dc:	d015      	beq.n	801a90a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a8e4:	687a      	ldr	r2, [r7, #4]
 801a8e6:	33b0      	adds	r3, #176	; 0xb0
 801a8e8:	009b      	lsls	r3, r3, #2
 801a8ea:	4413      	add	r3, r2
 801a8ec:	685b      	ldr	r3, [r3, #4]
 801a8ee:	689b      	ldr	r3, [r3, #8]
 801a8f0:	68fa      	ldr	r2, [r7, #12]
 801a8f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801a8f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801a8f8:	68fa      	ldr	r2, [r7, #12]
 801a8fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801a8fe:	b292      	uxth	r2, r2
 801a900:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	22ff      	movs	r2, #255	; 0xff
 801a906:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801a90a:	2300      	movs	r3, #0
}
 801a90c:	4618      	mov	r0, r3
 801a90e:	3710      	adds	r7, #16
 801a910:	46bd      	mov	sp, r7
 801a912:	bd80      	pop	{r7, pc}

0801a914 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b086      	sub	sp, #24
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801a91c:	2182      	movs	r1, #130	; 0x82
 801a91e:	4818      	ldr	r0, [pc, #96]	; (801a980 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801a920:	f000 fd09 	bl	801b336 <USBD_GetEpDesc>
 801a924:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801a926:	2101      	movs	r1, #1
 801a928:	4815      	ldr	r0, [pc, #84]	; (801a980 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801a92a:	f000 fd04 	bl	801b336 <USBD_GetEpDesc>
 801a92e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801a930:	2181      	movs	r1, #129	; 0x81
 801a932:	4813      	ldr	r0, [pc, #76]	; (801a980 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801a934:	f000 fcff 	bl	801b336 <USBD_GetEpDesc>
 801a938:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d002      	beq.n	801a946 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	2210      	movs	r2, #16
 801a944:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801a946:	693b      	ldr	r3, [r7, #16]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d006      	beq.n	801a95a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801a94c:	693b      	ldr	r3, [r7, #16]
 801a94e:	2200      	movs	r2, #0
 801a950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a954:	711a      	strb	r2, [r3, #4]
 801a956:	2200      	movs	r2, #0
 801a958:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d006      	beq.n	801a96e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	2200      	movs	r2, #0
 801a964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a968:	711a      	strb	r2, [r3, #4]
 801a96a:	2200      	movs	r2, #0
 801a96c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	2243      	movs	r2, #67	; 0x43
 801a972:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801a974:	4b02      	ldr	r3, [pc, #8]	; (801a980 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801a976:	4618      	mov	r0, r3
 801a978:	3718      	adds	r7, #24
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}
 801a97e:	bf00      	nop
 801a980:	24000054 	.word	0x24000054

0801a984 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b086      	sub	sp, #24
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801a98c:	2182      	movs	r1, #130	; 0x82
 801a98e:	4818      	ldr	r0, [pc, #96]	; (801a9f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801a990:	f000 fcd1 	bl	801b336 <USBD_GetEpDesc>
 801a994:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801a996:	2101      	movs	r1, #1
 801a998:	4815      	ldr	r0, [pc, #84]	; (801a9f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801a99a:	f000 fccc 	bl	801b336 <USBD_GetEpDesc>
 801a99e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801a9a0:	2181      	movs	r1, #129	; 0x81
 801a9a2:	4813      	ldr	r0, [pc, #76]	; (801a9f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801a9a4:	f000 fcc7 	bl	801b336 <USBD_GetEpDesc>
 801a9a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801a9aa:	697b      	ldr	r3, [r7, #20]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d002      	beq.n	801a9b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801a9b0:	697b      	ldr	r3, [r7, #20]
 801a9b2:	2210      	movs	r2, #16
 801a9b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801a9b6:	693b      	ldr	r3, [r7, #16]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d006      	beq.n	801a9ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801a9bc:	693b      	ldr	r3, [r7, #16]
 801a9be:	2200      	movs	r2, #0
 801a9c0:	711a      	strb	r2, [r3, #4]
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	f042 0202 	orr.w	r2, r2, #2
 801a9c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d006      	beq.n	801a9de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	711a      	strb	r2, [r3, #4]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	f042 0202 	orr.w	r2, r2, #2
 801a9dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	2243      	movs	r2, #67	; 0x43
 801a9e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801a9e4:	4b02      	ldr	r3, [pc, #8]	; (801a9f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	3718      	adds	r7, #24
 801a9ea:	46bd      	mov	sp, r7
 801a9ec:	bd80      	pop	{r7, pc}
 801a9ee:	bf00      	nop
 801a9f0:	24000054 	.word	0x24000054

0801a9f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b086      	sub	sp, #24
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801a9fc:	2182      	movs	r1, #130	; 0x82
 801a9fe:	4818      	ldr	r0, [pc, #96]	; (801aa60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801aa00:	f000 fc99 	bl	801b336 <USBD_GetEpDesc>
 801aa04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801aa06:	2101      	movs	r1, #1
 801aa08:	4815      	ldr	r0, [pc, #84]	; (801aa60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801aa0a:	f000 fc94 	bl	801b336 <USBD_GetEpDesc>
 801aa0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801aa10:	2181      	movs	r1, #129	; 0x81
 801aa12:	4813      	ldr	r0, [pc, #76]	; (801aa60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801aa14:	f000 fc8f 	bl	801b336 <USBD_GetEpDesc>
 801aa18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801aa1a:	697b      	ldr	r3, [r7, #20]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d002      	beq.n	801aa26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801aa20:	697b      	ldr	r3, [r7, #20]
 801aa22:	2210      	movs	r2, #16
 801aa24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801aa26:	693b      	ldr	r3, [r7, #16]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d006      	beq.n	801aa3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801aa2c:	693b      	ldr	r3, [r7, #16]
 801aa2e:	2200      	movs	r2, #0
 801aa30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aa34:	711a      	strb	r2, [r3, #4]
 801aa36:	2200      	movs	r2, #0
 801aa38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d006      	beq.n	801aa4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	2200      	movs	r2, #0
 801aa44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aa48:	711a      	strb	r2, [r3, #4]
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	2243      	movs	r2, #67	; 0x43
 801aa52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801aa54:	4b02      	ldr	r3, [pc, #8]	; (801aa60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801aa56:	4618      	mov	r0, r3
 801aa58:	3718      	adds	r7, #24
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	bd80      	pop	{r7, pc}
 801aa5e:	bf00      	nop
 801aa60:	24000054 	.word	0x24000054

0801aa64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801aa64:	b480      	push	{r7}
 801aa66:	b083      	sub	sp, #12
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	220a      	movs	r2, #10
 801aa70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801aa72:	4b03      	ldr	r3, [pc, #12]	; (801aa80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	370c      	adds	r7, #12
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7e:	4770      	bx	lr
 801aa80:	24000010 	.word	0x24000010

0801aa84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801aa84:	b480      	push	{r7}
 801aa86:	b083      	sub	sp, #12
 801aa88:	af00      	add	r7, sp, #0
 801aa8a:	6078      	str	r0, [r7, #4]
 801aa8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d101      	bne.n	801aa98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801aa94:	2303      	movs	r3, #3
 801aa96:	e009      	b.n	801aaac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801aa9e:	687a      	ldr	r2, [r7, #4]
 801aaa0:	33b0      	adds	r3, #176	; 0xb0
 801aaa2:	009b      	lsls	r3, r3, #2
 801aaa4:	4413      	add	r3, r2
 801aaa6:	683a      	ldr	r2, [r7, #0]
 801aaa8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801aaaa:	2300      	movs	r3, #0
}
 801aaac:	4618      	mov	r0, r3
 801aaae:	370c      	adds	r7, #12
 801aab0:	46bd      	mov	sp, r7
 801aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab6:	4770      	bx	lr

0801aab8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801aab8:	b480      	push	{r7}
 801aaba:	b087      	sub	sp, #28
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	60f8      	str	r0, [r7, #12]
 801aac0:	60b9      	str	r1, [r7, #8]
 801aac2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	32b0      	adds	r2, #176	; 0xb0
 801aace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aad2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801aad4:	697b      	ldr	r3, [r7, #20]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d101      	bne.n	801aade <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801aada:	2303      	movs	r3, #3
 801aadc:	e008      	b.n	801aaf0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801aade:	697b      	ldr	r3, [r7, #20]
 801aae0:	68ba      	ldr	r2, [r7, #8]
 801aae2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801aae6:	697b      	ldr	r3, [r7, #20]
 801aae8:	687a      	ldr	r2, [r7, #4]
 801aaea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801aaee:	2300      	movs	r3, #0
}
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	371c      	adds	r7, #28
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafa:	4770      	bx	lr

0801aafc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801aafc:	b480      	push	{r7}
 801aafe:	b085      	sub	sp, #20
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
 801ab04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	32b0      	adds	r2, #176	; 0xb0
 801ab10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d101      	bne.n	801ab20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801ab1c:	2303      	movs	r3, #3
 801ab1e:	e004      	b.n	801ab2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	683a      	ldr	r2, [r7, #0]
 801ab24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801ab28:	2300      	movs	r3, #0
}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	3714      	adds	r7, #20
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab34:	4770      	bx	lr
	...

0801ab38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b084      	sub	sp, #16
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	32b0      	adds	r2, #176	; 0xb0
 801ab4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	32b0      	adds	r2, #176	; 0xb0
 801ab5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d101      	bne.n	801ab66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801ab62:	2303      	movs	r3, #3
 801ab64:	e018      	b.n	801ab98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	7c1b      	ldrb	r3, [r3, #16]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d10a      	bne.n	801ab84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ab6e:	4b0c      	ldr	r3, [pc, #48]	; (801aba0 <USBD_CDC_ReceivePacket+0x68>)
 801ab70:	7819      	ldrb	r1, [r3, #0]
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ab78:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ab7c:	6878      	ldr	r0, [r7, #4]
 801ab7e:	f001 ffab 	bl	801cad8 <USBD_LL_PrepareReceive>
 801ab82:	e008      	b.n	801ab96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ab84:	4b06      	ldr	r3, [pc, #24]	; (801aba0 <USBD_CDC_ReceivePacket+0x68>)
 801ab86:	7819      	ldrb	r1, [r3, #0]
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ab8e:	2340      	movs	r3, #64	; 0x40
 801ab90:	6878      	ldr	r0, [r7, #4]
 801ab92:	f001 ffa1 	bl	801cad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801ab96:	2300      	movs	r3, #0
}
 801ab98:	4618      	mov	r0, r3
 801ab9a:	3710      	adds	r7, #16
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}
 801aba0:	24000098 	.word	0x24000098

0801aba4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801aba4:	b580      	push	{r7, lr}
 801aba6:	b086      	sub	sp, #24
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	60f8      	str	r0, [r7, #12]
 801abac:	60b9      	str	r1, [r7, #8]
 801abae:	4613      	mov	r3, r2
 801abb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d101      	bne.n	801abbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801abb8:	2303      	movs	r3, #3
 801abba:	e01f      	b.n	801abfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2200      	movs	r2, #0
 801abc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	2200      	movs	r2, #0
 801abc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	2200      	movs	r2, #0
 801abd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d003      	beq.n	801abe2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	68ba      	ldr	r2, [r7, #8]
 801abde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	2201      	movs	r2, #1
 801abe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	79fa      	ldrb	r2, [r7, #7]
 801abee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801abf0:	68f8      	ldr	r0, [r7, #12]
 801abf2:	f001 fe17 	bl	801c824 <USBD_LL_Init>
 801abf6:	4603      	mov	r3, r0
 801abf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 801abfa:	7dfb      	ldrb	r3, [r7, #23]
}
 801abfc:	4618      	mov	r0, r3
 801abfe:	3718      	adds	r7, #24
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}

0801ac04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b084      	sub	sp, #16
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
 801ac0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ac0e:	2300      	movs	r3, #0
 801ac10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801ac12:	683b      	ldr	r3, [r7, #0]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d101      	bne.n	801ac1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801ac18:	2303      	movs	r3, #3
 801ac1a:	e025      	b.n	801ac68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	683a      	ldr	r2, [r7, #0]
 801ac20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	32ae      	adds	r2, #174	; 0xae
 801ac2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d00f      	beq.n	801ac58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	32ae      	adds	r2, #174	; 0xae
 801ac42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac48:	f107 020e 	add.w	r2, r7, #14
 801ac4c:	4610      	mov	r0, r2
 801ac4e:	4798      	blx	r3
 801ac50:	4602      	mov	r2, r0
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ac5e:	1c5a      	adds	r2, r3, #1
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801ac66:	2300      	movs	r3, #0
}
 801ac68:	4618      	mov	r0, r3
 801ac6a:	3710      	adds	r7, #16
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	bd80      	pop	{r7, pc}

0801ac70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b082      	sub	sp, #8
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f001 fe23 	bl	801c8c4 <USBD_LL_Start>
 801ac7e:	4603      	mov	r3, r0
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	3708      	adds	r7, #8
 801ac84:	46bd      	mov	sp, r7
 801ac86:	bd80      	pop	{r7, pc}

0801ac88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801ac88:	b480      	push	{r7}
 801ac8a:	b083      	sub	sp, #12
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ac90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801ac92:	4618      	mov	r0, r3
 801ac94:	370c      	adds	r7, #12
 801ac96:	46bd      	mov	sp, r7
 801ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac9c:	4770      	bx	lr

0801ac9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ac9e:	b580      	push	{r7, lr}
 801aca0:	b084      	sub	sp, #16
 801aca2:	af00      	add	r7, sp, #0
 801aca4:	6078      	str	r0, [r7, #4]
 801aca6:	460b      	mov	r3, r1
 801aca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801acaa:	2300      	movs	r3, #0
 801acac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d009      	beq.n	801accc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	78fa      	ldrb	r2, [r7, #3]
 801acc2:	4611      	mov	r1, r2
 801acc4:	6878      	ldr	r0, [r7, #4]
 801acc6:	4798      	blx	r3
 801acc8:	4603      	mov	r3, r0
 801acca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801accc:	7bfb      	ldrb	r3, [r7, #15]
}
 801acce:	4618      	mov	r0, r3
 801acd0:	3710      	adds	r7, #16
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}

0801acd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801acd6:	b580      	push	{r7, lr}
 801acd8:	b084      	sub	sp, #16
 801acda:	af00      	add	r7, sp, #0
 801acdc:	6078      	str	r0, [r7, #4]
 801acde:	460b      	mov	r3, r1
 801ace0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801ace2:	2300      	movs	r3, #0
 801ace4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801acec:	685b      	ldr	r3, [r3, #4]
 801acee:	78fa      	ldrb	r2, [r7, #3]
 801acf0:	4611      	mov	r1, r2
 801acf2:	6878      	ldr	r0, [r7, #4]
 801acf4:	4798      	blx	r3
 801acf6:	4603      	mov	r3, r0
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d001      	beq.n	801ad00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801acfc:	2303      	movs	r3, #3
 801acfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801ad00:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad02:	4618      	mov	r0, r3
 801ad04:	3710      	adds	r7, #16
 801ad06:	46bd      	mov	sp, r7
 801ad08:	bd80      	pop	{r7, pc}

0801ad0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801ad0a:	b580      	push	{r7, lr}
 801ad0c:	b084      	sub	sp, #16
 801ad0e:	af00      	add	r7, sp, #0
 801ad10:	6078      	str	r0, [r7, #4]
 801ad12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ad1a:	6839      	ldr	r1, [r7, #0]
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f001 f908 	bl	801bf32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2201      	movs	r2, #1
 801ad26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801ad30:	461a      	mov	r2, r3
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ad3e:	f003 031f 	and.w	r3, r3, #31
 801ad42:	2b02      	cmp	r3, #2
 801ad44:	d01a      	beq.n	801ad7c <USBD_LL_SetupStage+0x72>
 801ad46:	2b02      	cmp	r3, #2
 801ad48:	d822      	bhi.n	801ad90 <USBD_LL_SetupStage+0x86>
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d002      	beq.n	801ad54 <USBD_LL_SetupStage+0x4a>
 801ad4e:	2b01      	cmp	r3, #1
 801ad50:	d00a      	beq.n	801ad68 <USBD_LL_SetupStage+0x5e>
 801ad52:	e01d      	b.n	801ad90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	6878      	ldr	r0, [r7, #4]
 801ad5e:	f000 fb5f 	bl	801b420 <USBD_StdDevReq>
 801ad62:	4603      	mov	r3, r0
 801ad64:	73fb      	strb	r3, [r7, #15]
      break;
 801ad66:	e020      	b.n	801adaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ad6e:	4619      	mov	r1, r3
 801ad70:	6878      	ldr	r0, [r7, #4]
 801ad72:	f000 fbc7 	bl	801b504 <USBD_StdItfReq>
 801ad76:	4603      	mov	r3, r0
 801ad78:	73fb      	strb	r3, [r7, #15]
      break;
 801ad7a:	e016      	b.n	801adaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ad82:	4619      	mov	r1, r3
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f000 fc29 	bl	801b5dc <USBD_StdEPReq>
 801ad8a:	4603      	mov	r3, r0
 801ad8c:	73fb      	strb	r3, [r7, #15]
      break;
 801ad8e:	e00c      	b.n	801adaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ad96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ad9a:	b2db      	uxtb	r3, r3
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	6878      	ldr	r0, [r7, #4]
 801ada0:	f001 fdf0 	bl	801c984 <USBD_LL_StallEP>
 801ada4:	4603      	mov	r3, r0
 801ada6:	73fb      	strb	r3, [r7, #15]
      break;
 801ada8:	bf00      	nop
  }

  return ret;
 801adaa:	7bfb      	ldrb	r3, [r7, #15]
}
 801adac:	4618      	mov	r0, r3
 801adae:	3710      	adds	r7, #16
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}

0801adb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b086      	sub	sp, #24
 801adb8:	af00      	add	r7, sp, #0
 801adba:	60f8      	str	r0, [r7, #12]
 801adbc:	460b      	mov	r3, r1
 801adbe:	607a      	str	r2, [r7, #4]
 801adc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801adc2:	2300      	movs	r3, #0
 801adc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801adc6:	7afb      	ldrb	r3, [r7, #11]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d16e      	bne.n	801aeaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801add2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801adda:	2b03      	cmp	r3, #3
 801addc:	f040 8098 	bne.w	801af10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801ade0:	693b      	ldr	r3, [r7, #16]
 801ade2:	689a      	ldr	r2, [r3, #8]
 801ade4:	693b      	ldr	r3, [r7, #16]
 801ade6:	68db      	ldr	r3, [r3, #12]
 801ade8:	429a      	cmp	r2, r3
 801adea:	d913      	bls.n	801ae14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801adec:	693b      	ldr	r3, [r7, #16]
 801adee:	689a      	ldr	r2, [r3, #8]
 801adf0:	693b      	ldr	r3, [r7, #16]
 801adf2:	68db      	ldr	r3, [r3, #12]
 801adf4:	1ad2      	subs	r2, r2, r3
 801adf6:	693b      	ldr	r3, [r7, #16]
 801adf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801adfa:	693b      	ldr	r3, [r7, #16]
 801adfc:	68da      	ldr	r2, [r3, #12]
 801adfe:	693b      	ldr	r3, [r7, #16]
 801ae00:	689b      	ldr	r3, [r3, #8]
 801ae02:	4293      	cmp	r3, r2
 801ae04:	bf28      	it	cs
 801ae06:	4613      	movcs	r3, r2
 801ae08:	461a      	mov	r2, r3
 801ae0a:	6879      	ldr	r1, [r7, #4]
 801ae0c:	68f8      	ldr	r0, [r7, #12]
 801ae0e:	f001 f984 	bl	801c11a <USBD_CtlContinueRx>
 801ae12:	e07d      	b.n	801af10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ae1a:	f003 031f 	and.w	r3, r3, #31
 801ae1e:	2b02      	cmp	r3, #2
 801ae20:	d014      	beq.n	801ae4c <USBD_LL_DataOutStage+0x98>
 801ae22:	2b02      	cmp	r3, #2
 801ae24:	d81d      	bhi.n	801ae62 <USBD_LL_DataOutStage+0xae>
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d002      	beq.n	801ae30 <USBD_LL_DataOutStage+0x7c>
 801ae2a:	2b01      	cmp	r3, #1
 801ae2c:	d003      	beq.n	801ae36 <USBD_LL_DataOutStage+0x82>
 801ae2e:	e018      	b.n	801ae62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801ae30:	2300      	movs	r3, #0
 801ae32:	75bb      	strb	r3, [r7, #22]
            break;
 801ae34:	e018      	b.n	801ae68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801ae3c:	b2db      	uxtb	r3, r3
 801ae3e:	4619      	mov	r1, r3
 801ae40:	68f8      	ldr	r0, [r7, #12]
 801ae42:	f000 fa5e 	bl	801b302 <USBD_CoreFindIF>
 801ae46:	4603      	mov	r3, r0
 801ae48:	75bb      	strb	r3, [r7, #22]
            break;
 801ae4a:	e00d      	b.n	801ae68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801ae52:	b2db      	uxtb	r3, r3
 801ae54:	4619      	mov	r1, r3
 801ae56:	68f8      	ldr	r0, [r7, #12]
 801ae58:	f000 fa60 	bl	801b31c <USBD_CoreFindEP>
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	75bb      	strb	r3, [r7, #22]
            break;
 801ae60:	e002      	b.n	801ae68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801ae62:	2300      	movs	r3, #0
 801ae64:	75bb      	strb	r3, [r7, #22]
            break;
 801ae66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801ae68:	7dbb      	ldrb	r3, [r7, #22]
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d119      	bne.n	801aea2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae74:	b2db      	uxtb	r3, r3
 801ae76:	2b03      	cmp	r3, #3
 801ae78:	d113      	bne.n	801aea2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801ae7a:	7dba      	ldrb	r2, [r7, #22]
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	32ae      	adds	r2, #174	; 0xae
 801ae80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ae84:	691b      	ldr	r3, [r3, #16]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d00b      	beq.n	801aea2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801ae8a:	7dba      	ldrb	r2, [r7, #22]
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801ae92:	7dba      	ldrb	r2, [r7, #22]
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	32ae      	adds	r2, #174	; 0xae
 801ae98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ae9c:	691b      	ldr	r3, [r3, #16]
 801ae9e:	68f8      	ldr	r0, [r7, #12]
 801aea0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801aea2:	68f8      	ldr	r0, [r7, #12]
 801aea4:	f001 f94a 	bl	801c13c <USBD_CtlSendStatus>
 801aea8:	e032      	b.n	801af10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801aeaa:	7afb      	ldrb	r3, [r7, #11]
 801aeac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	4619      	mov	r1, r3
 801aeb4:	68f8      	ldr	r0, [r7, #12]
 801aeb6:	f000 fa31 	bl	801b31c <USBD_CoreFindEP>
 801aeba:	4603      	mov	r3, r0
 801aebc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801aebe:	7dbb      	ldrb	r3, [r7, #22]
 801aec0:	2bff      	cmp	r3, #255	; 0xff
 801aec2:	d025      	beq.n	801af10 <USBD_LL_DataOutStage+0x15c>
 801aec4:	7dbb      	ldrb	r3, [r7, #22]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d122      	bne.n	801af10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aed0:	b2db      	uxtb	r3, r3
 801aed2:	2b03      	cmp	r3, #3
 801aed4:	d117      	bne.n	801af06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801aed6:	7dba      	ldrb	r2, [r7, #22]
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	32ae      	adds	r2, #174	; 0xae
 801aedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aee0:	699b      	ldr	r3, [r3, #24]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d00f      	beq.n	801af06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801aee6:	7dba      	ldrb	r2, [r7, #22]
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801aeee:	7dba      	ldrb	r2, [r7, #22]
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	32ae      	adds	r2, #174	; 0xae
 801aef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aef8:	699b      	ldr	r3, [r3, #24]
 801aefa:	7afa      	ldrb	r2, [r7, #11]
 801aefc:	4611      	mov	r1, r2
 801aefe:	68f8      	ldr	r0, [r7, #12]
 801af00:	4798      	blx	r3
 801af02:	4603      	mov	r3, r0
 801af04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801af06:	7dfb      	ldrb	r3, [r7, #23]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d001      	beq.n	801af10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801af0c:	7dfb      	ldrb	r3, [r7, #23]
 801af0e:	e000      	b.n	801af12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801af10:	2300      	movs	r3, #0
}
 801af12:	4618      	mov	r0, r3
 801af14:	3718      	adds	r7, #24
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}

0801af1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801af1a:	b580      	push	{r7, lr}
 801af1c:	b086      	sub	sp, #24
 801af1e:	af00      	add	r7, sp, #0
 801af20:	60f8      	str	r0, [r7, #12]
 801af22:	460b      	mov	r3, r1
 801af24:	607a      	str	r2, [r7, #4]
 801af26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801af28:	7afb      	ldrb	r3, [r7, #11]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d16f      	bne.n	801b00e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	3314      	adds	r3, #20
 801af32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801af3a:	2b02      	cmp	r3, #2
 801af3c:	d15a      	bne.n	801aff4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801af3e:	693b      	ldr	r3, [r7, #16]
 801af40:	689a      	ldr	r2, [r3, #8]
 801af42:	693b      	ldr	r3, [r7, #16]
 801af44:	68db      	ldr	r3, [r3, #12]
 801af46:	429a      	cmp	r2, r3
 801af48:	d914      	bls.n	801af74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801af4a:	693b      	ldr	r3, [r7, #16]
 801af4c:	689a      	ldr	r2, [r3, #8]
 801af4e:	693b      	ldr	r3, [r7, #16]
 801af50:	68db      	ldr	r3, [r3, #12]
 801af52:	1ad2      	subs	r2, r2, r3
 801af54:	693b      	ldr	r3, [r7, #16]
 801af56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801af58:	693b      	ldr	r3, [r7, #16]
 801af5a:	689b      	ldr	r3, [r3, #8]
 801af5c:	461a      	mov	r2, r3
 801af5e:	6879      	ldr	r1, [r7, #4]
 801af60:	68f8      	ldr	r0, [r7, #12]
 801af62:	f001 f8ac 	bl	801c0be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801af66:	2300      	movs	r3, #0
 801af68:	2200      	movs	r2, #0
 801af6a:	2100      	movs	r1, #0
 801af6c:	68f8      	ldr	r0, [r7, #12]
 801af6e:	f001 fdb3 	bl	801cad8 <USBD_LL_PrepareReceive>
 801af72:	e03f      	b.n	801aff4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801af74:	693b      	ldr	r3, [r7, #16]
 801af76:	68da      	ldr	r2, [r3, #12]
 801af78:	693b      	ldr	r3, [r7, #16]
 801af7a:	689b      	ldr	r3, [r3, #8]
 801af7c:	429a      	cmp	r2, r3
 801af7e:	d11c      	bne.n	801afba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801af80:	693b      	ldr	r3, [r7, #16]
 801af82:	685a      	ldr	r2, [r3, #4]
 801af84:	693b      	ldr	r3, [r7, #16]
 801af86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801af88:	429a      	cmp	r2, r3
 801af8a:	d316      	bcc.n	801afba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801af8c:	693b      	ldr	r3, [r7, #16]
 801af8e:	685a      	ldr	r2, [r3, #4]
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801af96:	429a      	cmp	r2, r3
 801af98:	d20f      	bcs.n	801afba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801af9a:	2200      	movs	r2, #0
 801af9c:	2100      	movs	r1, #0
 801af9e:	68f8      	ldr	r0, [r7, #12]
 801afa0:	f001 f88d 	bl	801c0be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	2200      	movs	r2, #0
 801afa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801afac:	2300      	movs	r3, #0
 801afae:	2200      	movs	r2, #0
 801afb0:	2100      	movs	r1, #0
 801afb2:	68f8      	ldr	r0, [r7, #12]
 801afb4:	f001 fd90 	bl	801cad8 <USBD_LL_PrepareReceive>
 801afb8:	e01c      	b.n	801aff4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	2b03      	cmp	r3, #3
 801afc4:	d10f      	bne.n	801afe6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801afcc:	68db      	ldr	r3, [r3, #12]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d009      	beq.n	801afe6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	2200      	movs	r2, #0
 801afd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801afe0:	68db      	ldr	r3, [r3, #12]
 801afe2:	68f8      	ldr	r0, [r7, #12]
 801afe4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801afe6:	2180      	movs	r1, #128	; 0x80
 801afe8:	68f8      	ldr	r0, [r7, #12]
 801afea:	f001 fccb 	bl	801c984 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801afee:	68f8      	ldr	r0, [r7, #12]
 801aff0:	f001 f8b7 	bl	801c162 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801affa:	2b00      	cmp	r3, #0
 801affc:	d03a      	beq.n	801b074 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801affe:	68f8      	ldr	r0, [r7, #12]
 801b000:	f7ff fe42 	bl	801ac88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	2200      	movs	r2, #0
 801b008:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801b00c:	e032      	b.n	801b074 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801b00e:	7afb      	ldrb	r3, [r7, #11]
 801b010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b014:	b2db      	uxtb	r3, r3
 801b016:	4619      	mov	r1, r3
 801b018:	68f8      	ldr	r0, [r7, #12]
 801b01a:	f000 f97f 	bl	801b31c <USBD_CoreFindEP>
 801b01e:	4603      	mov	r3, r0
 801b020:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b022:	7dfb      	ldrb	r3, [r7, #23]
 801b024:	2bff      	cmp	r3, #255	; 0xff
 801b026:	d025      	beq.n	801b074 <USBD_LL_DataInStage+0x15a>
 801b028:	7dfb      	ldrb	r3, [r7, #23]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d122      	bne.n	801b074 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b034:	b2db      	uxtb	r3, r3
 801b036:	2b03      	cmp	r3, #3
 801b038:	d11c      	bne.n	801b074 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801b03a:	7dfa      	ldrb	r2, [r7, #23]
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	32ae      	adds	r2, #174	; 0xae
 801b040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b044:	695b      	ldr	r3, [r3, #20]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d014      	beq.n	801b074 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801b04a:	7dfa      	ldrb	r2, [r7, #23]
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801b052:	7dfa      	ldrb	r2, [r7, #23]
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	32ae      	adds	r2, #174	; 0xae
 801b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b05c:	695b      	ldr	r3, [r3, #20]
 801b05e:	7afa      	ldrb	r2, [r7, #11]
 801b060:	4611      	mov	r1, r2
 801b062:	68f8      	ldr	r0, [r7, #12]
 801b064:	4798      	blx	r3
 801b066:	4603      	mov	r3, r0
 801b068:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801b06a:	7dbb      	ldrb	r3, [r7, #22]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d001      	beq.n	801b074 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801b070:	7dbb      	ldrb	r3, [r7, #22]
 801b072:	e000      	b.n	801b076 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801b074:	2300      	movs	r3, #0
}
 801b076:	4618      	mov	r0, r3
 801b078:	3718      	adds	r7, #24
 801b07a:	46bd      	mov	sp, r7
 801b07c:	bd80      	pop	{r7, pc}

0801b07e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b07e:	b580      	push	{r7, lr}
 801b080:	b084      	sub	sp, #16
 801b082:	af00      	add	r7, sp, #0
 801b084:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801b086:	2300      	movs	r3, #0
 801b088:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	2201      	movs	r2, #1
 801b08e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2200      	movs	r2, #0
 801b096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	2200      	movs	r2, #0
 801b09e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d014      	beq.n	801b0e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0c0:	685b      	ldr	r3, [r3, #4]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d00e      	beq.n	801b0e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0cc:	685b      	ldr	r3, [r3, #4]
 801b0ce:	687a      	ldr	r2, [r7, #4]
 801b0d0:	6852      	ldr	r2, [r2, #4]
 801b0d2:	b2d2      	uxtb	r2, r2
 801b0d4:	4611      	mov	r1, r2
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	4798      	blx	r3
 801b0da:	4603      	mov	r3, r0
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d001      	beq.n	801b0e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801b0e0:	2303      	movs	r3, #3
 801b0e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b0e4:	2340      	movs	r3, #64	; 0x40
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	2100      	movs	r1, #0
 801b0ea:	6878      	ldr	r0, [r7, #4]
 801b0ec:	f001 fc05 	bl	801c8fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	2201      	movs	r2, #1
 801b0f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	2240      	movs	r2, #64	; 0x40
 801b0fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b100:	2340      	movs	r3, #64	; 0x40
 801b102:	2200      	movs	r2, #0
 801b104:	2180      	movs	r1, #128	; 0x80
 801b106:	6878      	ldr	r0, [r7, #4]
 801b108:	f001 fbf7 	bl	801c8fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	2201      	movs	r2, #1
 801b110:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	2240      	movs	r2, #64	; 0x40
 801b116:	621a      	str	r2, [r3, #32]

  return ret;
 801b118:	7bfb      	ldrb	r3, [r7, #15]
}
 801b11a:	4618      	mov	r0, r3
 801b11c:	3710      	adds	r7, #16
 801b11e:	46bd      	mov	sp, r7
 801b120:	bd80      	pop	{r7, pc}

0801b122 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b122:	b480      	push	{r7}
 801b124:	b083      	sub	sp, #12
 801b126:	af00      	add	r7, sp, #0
 801b128:	6078      	str	r0, [r7, #4]
 801b12a:	460b      	mov	r3, r1
 801b12c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	78fa      	ldrb	r2, [r7, #3]
 801b132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b134:	2300      	movs	r3, #0
}
 801b136:	4618      	mov	r0, r3
 801b138:	370c      	adds	r7, #12
 801b13a:	46bd      	mov	sp, r7
 801b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b140:	4770      	bx	lr

0801b142 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b142:	b480      	push	{r7}
 801b144:	b083      	sub	sp, #12
 801b146:	af00      	add	r7, sp, #0
 801b148:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b150:	b2da      	uxtb	r2, r3
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	2204      	movs	r2, #4
 801b15c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801b160:	2300      	movs	r3, #0
}
 801b162:	4618      	mov	r0, r3
 801b164:	370c      	adds	r7, #12
 801b166:	46bd      	mov	sp, r7
 801b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b16c:	4770      	bx	lr

0801b16e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b16e:	b480      	push	{r7}
 801b170:	b083      	sub	sp, #12
 801b172:	af00      	add	r7, sp, #0
 801b174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b17c:	b2db      	uxtb	r3, r3
 801b17e:	2b04      	cmp	r3, #4
 801b180:	d106      	bne.n	801b190 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801b188:	b2da      	uxtb	r2, r3
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801b190:	2300      	movs	r3, #0
}
 801b192:	4618      	mov	r0, r3
 801b194:	370c      	adds	r7, #12
 801b196:	46bd      	mov	sp, r7
 801b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19c:	4770      	bx	lr

0801b19e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b19e:	b580      	push	{r7, lr}
 801b1a0:	b082      	sub	sp, #8
 801b1a2:	af00      	add	r7, sp, #0
 801b1a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b1ac:	b2db      	uxtb	r3, r3
 801b1ae:	2b03      	cmp	r3, #3
 801b1b0:	d110      	bne.n	801b1d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d00b      	beq.n	801b1d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1c2:	69db      	ldr	r3, [r3, #28]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d005      	beq.n	801b1d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1ce:	69db      	ldr	r3, [r3, #28]
 801b1d0:	6878      	ldr	r0, [r7, #4]
 801b1d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801b1d4:	2300      	movs	r3, #0
}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	3708      	adds	r7, #8
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd80      	pop	{r7, pc}

0801b1de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801b1de:	b580      	push	{r7, lr}
 801b1e0:	b082      	sub	sp, #8
 801b1e2:	af00      	add	r7, sp, #0
 801b1e4:	6078      	str	r0, [r7, #4]
 801b1e6:	460b      	mov	r3, r1
 801b1e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	32ae      	adds	r2, #174	; 0xae
 801b1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d101      	bne.n	801b200 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801b1fc:	2303      	movs	r3, #3
 801b1fe:	e01c      	b.n	801b23a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b206:	b2db      	uxtb	r3, r3
 801b208:	2b03      	cmp	r3, #3
 801b20a:	d115      	bne.n	801b238 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	32ae      	adds	r2, #174	; 0xae
 801b216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b21a:	6a1b      	ldr	r3, [r3, #32]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d00b      	beq.n	801b238 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	32ae      	adds	r2, #174	; 0xae
 801b22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b22e:	6a1b      	ldr	r3, [r3, #32]
 801b230:	78fa      	ldrb	r2, [r7, #3]
 801b232:	4611      	mov	r1, r2
 801b234:	6878      	ldr	r0, [r7, #4]
 801b236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b238:	2300      	movs	r3, #0
}
 801b23a:	4618      	mov	r0, r3
 801b23c:	3708      	adds	r7, #8
 801b23e:	46bd      	mov	sp, r7
 801b240:	bd80      	pop	{r7, pc}

0801b242 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801b242:	b580      	push	{r7, lr}
 801b244:	b082      	sub	sp, #8
 801b246:	af00      	add	r7, sp, #0
 801b248:	6078      	str	r0, [r7, #4]
 801b24a:	460b      	mov	r3, r1
 801b24c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	32ae      	adds	r2, #174	; 0xae
 801b258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d101      	bne.n	801b264 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801b260:	2303      	movs	r3, #3
 801b262:	e01c      	b.n	801b29e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b26a:	b2db      	uxtb	r3, r3
 801b26c:	2b03      	cmp	r3, #3
 801b26e:	d115      	bne.n	801b29c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	32ae      	adds	r2, #174	; 0xae
 801b27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b280:	2b00      	cmp	r3, #0
 801b282:	d00b      	beq.n	801b29c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	32ae      	adds	r2, #174	; 0xae
 801b28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b294:	78fa      	ldrb	r2, [r7, #3]
 801b296:	4611      	mov	r1, r2
 801b298:	6878      	ldr	r0, [r7, #4]
 801b29a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b29c:	2300      	movs	r3, #0
}
 801b29e:	4618      	mov	r0, r3
 801b2a0:	3708      	adds	r7, #8
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	bd80      	pop	{r7, pc}

0801b2a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801b2a6:	b480      	push	{r7}
 801b2a8:	b083      	sub	sp, #12
 801b2aa:	af00      	add	r7, sp, #0
 801b2ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b2ae:	2300      	movs	r3, #0
}
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	370c      	adds	r7, #12
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ba:	4770      	bx	lr

0801b2bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b084      	sub	sp, #16
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	2201      	movs	r2, #1
 801b2cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d00e      	beq.n	801b2f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2e0:	685b      	ldr	r3, [r3, #4]
 801b2e2:	687a      	ldr	r2, [r7, #4]
 801b2e4:	6852      	ldr	r2, [r2, #4]
 801b2e6:	b2d2      	uxtb	r2, r2
 801b2e8:	4611      	mov	r1, r2
 801b2ea:	6878      	ldr	r0, [r7, #4]
 801b2ec:	4798      	blx	r3
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d001      	beq.n	801b2f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801b2f4:	2303      	movs	r3, #3
 801b2f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801b2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	3710      	adds	r7, #16
 801b2fe:	46bd      	mov	sp, r7
 801b300:	bd80      	pop	{r7, pc}

0801b302 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b302:	b480      	push	{r7}
 801b304:	b083      	sub	sp, #12
 801b306:	af00      	add	r7, sp, #0
 801b308:	6078      	str	r0, [r7, #4]
 801b30a:	460b      	mov	r3, r1
 801b30c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b30e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b310:	4618      	mov	r0, r3
 801b312:	370c      	adds	r7, #12
 801b314:	46bd      	mov	sp, r7
 801b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b31a:	4770      	bx	lr

0801b31c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b31c:	b480      	push	{r7}
 801b31e:	b083      	sub	sp, #12
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
 801b324:	460b      	mov	r3, r1
 801b326:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b328:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	370c      	adds	r7, #12
 801b32e:	46bd      	mov	sp, r7
 801b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b334:	4770      	bx	lr

0801b336 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801b336:	b580      	push	{r7, lr}
 801b338:	b086      	sub	sp, #24
 801b33a:	af00      	add	r7, sp, #0
 801b33c:	6078      	str	r0, [r7, #4]
 801b33e:	460b      	mov	r3, r1
 801b340:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801b34a:	2300      	movs	r3, #0
 801b34c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	885b      	ldrh	r3, [r3, #2]
 801b352:	b29a      	uxth	r2, r3
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	781b      	ldrb	r3, [r3, #0]
 801b358:	b29b      	uxth	r3, r3
 801b35a:	429a      	cmp	r2, r3
 801b35c:	d920      	bls.n	801b3a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	781b      	ldrb	r3, [r3, #0]
 801b362:	b29b      	uxth	r3, r3
 801b364:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801b366:	e013      	b.n	801b390 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801b368:	f107 030a 	add.w	r3, r7, #10
 801b36c:	4619      	mov	r1, r3
 801b36e:	6978      	ldr	r0, [r7, #20]
 801b370:	f000 f81b 	bl	801b3aa <USBD_GetNextDesc>
 801b374:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801b376:	697b      	ldr	r3, [r7, #20]
 801b378:	785b      	ldrb	r3, [r3, #1]
 801b37a:	2b05      	cmp	r3, #5
 801b37c:	d108      	bne.n	801b390 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801b37e:	697b      	ldr	r3, [r7, #20]
 801b380:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801b382:	693b      	ldr	r3, [r7, #16]
 801b384:	789b      	ldrb	r3, [r3, #2]
 801b386:	78fa      	ldrb	r2, [r7, #3]
 801b388:	429a      	cmp	r2, r3
 801b38a:	d008      	beq.n	801b39e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801b38c:	2300      	movs	r3, #0
 801b38e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	885b      	ldrh	r3, [r3, #2]
 801b394:	b29a      	uxth	r2, r3
 801b396:	897b      	ldrh	r3, [r7, #10]
 801b398:	429a      	cmp	r2, r3
 801b39a:	d8e5      	bhi.n	801b368 <USBD_GetEpDesc+0x32>
 801b39c:	e000      	b.n	801b3a0 <USBD_GetEpDesc+0x6a>
          break;
 801b39e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801b3a0:	693b      	ldr	r3, [r7, #16]
}
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	3718      	adds	r7, #24
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}

0801b3aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801b3aa:	b480      	push	{r7}
 801b3ac:	b085      	sub	sp, #20
 801b3ae:	af00      	add	r7, sp, #0
 801b3b0:	6078      	str	r0, [r7, #4]
 801b3b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801b3b8:	683b      	ldr	r3, [r7, #0]
 801b3ba:	881a      	ldrh	r2, [r3, #0]
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	781b      	ldrb	r3, [r3, #0]
 801b3c0:	b29b      	uxth	r3, r3
 801b3c2:	4413      	add	r3, r2
 801b3c4:	b29a      	uxth	r2, r3
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	781b      	ldrb	r3, [r3, #0]
 801b3ce:	461a      	mov	r2, r3
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	4413      	add	r3, r2
 801b3d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801b3d6:	68fb      	ldr	r3, [r7, #12]
}
 801b3d8:	4618      	mov	r0, r3
 801b3da:	3714      	adds	r7, #20
 801b3dc:	46bd      	mov	sp, r7
 801b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e2:	4770      	bx	lr

0801b3e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801b3e4:	b480      	push	{r7}
 801b3e6:	b087      	sub	sp, #28
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801b3f0:	697b      	ldr	r3, [r7, #20]
 801b3f2:	781b      	ldrb	r3, [r3, #0]
 801b3f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801b3f6:	697b      	ldr	r3, [r7, #20]
 801b3f8:	3301      	adds	r3, #1
 801b3fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801b3fc:	697b      	ldr	r3, [r7, #20]
 801b3fe:	781b      	ldrb	r3, [r3, #0]
 801b400:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801b402:	8a3b      	ldrh	r3, [r7, #16]
 801b404:	021b      	lsls	r3, r3, #8
 801b406:	b21a      	sxth	r2, r3
 801b408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b40c:	4313      	orrs	r3, r2
 801b40e:	b21b      	sxth	r3, r3
 801b410:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801b412:	89fb      	ldrh	r3, [r7, #14]
}
 801b414:	4618      	mov	r0, r3
 801b416:	371c      	adds	r7, #28
 801b418:	46bd      	mov	sp, r7
 801b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b41e:	4770      	bx	lr

0801b420 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b084      	sub	sp, #16
 801b424:	af00      	add	r7, sp, #0
 801b426:	6078      	str	r0, [r7, #4]
 801b428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b42a:	2300      	movs	r3, #0
 801b42c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b42e:	683b      	ldr	r3, [r7, #0]
 801b430:	781b      	ldrb	r3, [r3, #0]
 801b432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b436:	2b40      	cmp	r3, #64	; 0x40
 801b438:	d005      	beq.n	801b446 <USBD_StdDevReq+0x26>
 801b43a:	2b40      	cmp	r3, #64	; 0x40
 801b43c:	d857      	bhi.n	801b4ee <USBD_StdDevReq+0xce>
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d00f      	beq.n	801b462 <USBD_StdDevReq+0x42>
 801b442:	2b20      	cmp	r3, #32
 801b444:	d153      	bne.n	801b4ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	32ae      	adds	r2, #174	; 0xae
 801b450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b454:	689b      	ldr	r3, [r3, #8]
 801b456:	6839      	ldr	r1, [r7, #0]
 801b458:	6878      	ldr	r0, [r7, #4]
 801b45a:	4798      	blx	r3
 801b45c:	4603      	mov	r3, r0
 801b45e:	73fb      	strb	r3, [r7, #15]
      break;
 801b460:	e04a      	b.n	801b4f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b462:	683b      	ldr	r3, [r7, #0]
 801b464:	785b      	ldrb	r3, [r3, #1]
 801b466:	2b09      	cmp	r3, #9
 801b468:	d83b      	bhi.n	801b4e2 <USBD_StdDevReq+0xc2>
 801b46a:	a201      	add	r2, pc, #4	; (adr r2, 801b470 <USBD_StdDevReq+0x50>)
 801b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b470:	0801b4c5 	.word	0x0801b4c5
 801b474:	0801b4d9 	.word	0x0801b4d9
 801b478:	0801b4e3 	.word	0x0801b4e3
 801b47c:	0801b4cf 	.word	0x0801b4cf
 801b480:	0801b4e3 	.word	0x0801b4e3
 801b484:	0801b4a3 	.word	0x0801b4a3
 801b488:	0801b499 	.word	0x0801b499
 801b48c:	0801b4e3 	.word	0x0801b4e3
 801b490:	0801b4bb 	.word	0x0801b4bb
 801b494:	0801b4ad 	.word	0x0801b4ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b498:	6839      	ldr	r1, [r7, #0]
 801b49a:	6878      	ldr	r0, [r7, #4]
 801b49c:	f000 fa3c 	bl	801b918 <USBD_GetDescriptor>
          break;
 801b4a0:	e024      	b.n	801b4ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b4a2:	6839      	ldr	r1, [r7, #0]
 801b4a4:	6878      	ldr	r0, [r7, #4]
 801b4a6:	f000 fba1 	bl	801bbec <USBD_SetAddress>
          break;
 801b4aa:	e01f      	b.n	801b4ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801b4ac:	6839      	ldr	r1, [r7, #0]
 801b4ae:	6878      	ldr	r0, [r7, #4]
 801b4b0:	f000 fbe0 	bl	801bc74 <USBD_SetConfig>
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	73fb      	strb	r3, [r7, #15]
          break;
 801b4b8:	e018      	b.n	801b4ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b4ba:	6839      	ldr	r1, [r7, #0]
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f000 fc83 	bl	801bdc8 <USBD_GetConfig>
          break;
 801b4c2:	e013      	b.n	801b4ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b4c4:	6839      	ldr	r1, [r7, #0]
 801b4c6:	6878      	ldr	r0, [r7, #4]
 801b4c8:	f000 fcb4 	bl	801be34 <USBD_GetStatus>
          break;
 801b4cc:	e00e      	b.n	801b4ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b4ce:	6839      	ldr	r1, [r7, #0]
 801b4d0:	6878      	ldr	r0, [r7, #4]
 801b4d2:	f000 fce3 	bl	801be9c <USBD_SetFeature>
          break;
 801b4d6:	e009      	b.n	801b4ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b4d8:	6839      	ldr	r1, [r7, #0]
 801b4da:	6878      	ldr	r0, [r7, #4]
 801b4dc:	f000 fd07 	bl	801beee <USBD_ClrFeature>
          break;
 801b4e0:	e004      	b.n	801b4ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b4e2:	6839      	ldr	r1, [r7, #0]
 801b4e4:	6878      	ldr	r0, [r7, #4]
 801b4e6:	f000 fd5e 	bl	801bfa6 <USBD_CtlError>
          break;
 801b4ea:	bf00      	nop
      }
      break;
 801b4ec:	e004      	b.n	801b4f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801b4ee:	6839      	ldr	r1, [r7, #0]
 801b4f0:	6878      	ldr	r0, [r7, #4]
 801b4f2:	f000 fd58 	bl	801bfa6 <USBD_CtlError>
      break;
 801b4f6:	bf00      	nop
  }

  return ret;
 801b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	3710      	adds	r7, #16
 801b4fe:	46bd      	mov	sp, r7
 801b500:	bd80      	pop	{r7, pc}
 801b502:	bf00      	nop

0801b504 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b084      	sub	sp, #16
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
 801b50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b50e:	2300      	movs	r3, #0
 801b510:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b512:	683b      	ldr	r3, [r7, #0]
 801b514:	781b      	ldrb	r3, [r3, #0]
 801b516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b51a:	2b40      	cmp	r3, #64	; 0x40
 801b51c:	d005      	beq.n	801b52a <USBD_StdItfReq+0x26>
 801b51e:	2b40      	cmp	r3, #64	; 0x40
 801b520:	d852      	bhi.n	801b5c8 <USBD_StdItfReq+0xc4>
 801b522:	2b00      	cmp	r3, #0
 801b524:	d001      	beq.n	801b52a <USBD_StdItfReq+0x26>
 801b526:	2b20      	cmp	r3, #32
 801b528:	d14e      	bne.n	801b5c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b530:	b2db      	uxtb	r3, r3
 801b532:	3b01      	subs	r3, #1
 801b534:	2b02      	cmp	r3, #2
 801b536:	d840      	bhi.n	801b5ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b538:	683b      	ldr	r3, [r7, #0]
 801b53a:	889b      	ldrh	r3, [r3, #4]
 801b53c:	b2db      	uxtb	r3, r3
 801b53e:	2b01      	cmp	r3, #1
 801b540:	d836      	bhi.n	801b5b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	889b      	ldrh	r3, [r3, #4]
 801b546:	b2db      	uxtb	r3, r3
 801b548:	4619      	mov	r1, r3
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	f7ff fed9 	bl	801b302 <USBD_CoreFindIF>
 801b550:	4603      	mov	r3, r0
 801b552:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b554:	7bbb      	ldrb	r3, [r7, #14]
 801b556:	2bff      	cmp	r3, #255	; 0xff
 801b558:	d01d      	beq.n	801b596 <USBD_StdItfReq+0x92>
 801b55a:	7bbb      	ldrb	r3, [r7, #14]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d11a      	bne.n	801b596 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801b560:	7bba      	ldrb	r2, [r7, #14]
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	32ae      	adds	r2, #174	; 0xae
 801b566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b56a:	689b      	ldr	r3, [r3, #8]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d00f      	beq.n	801b590 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801b570:	7bba      	ldrb	r2, [r7, #14]
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801b578:	7bba      	ldrb	r2, [r7, #14]
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	32ae      	adds	r2, #174	; 0xae
 801b57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b582:	689b      	ldr	r3, [r3, #8]
 801b584:	6839      	ldr	r1, [r7, #0]
 801b586:	6878      	ldr	r0, [r7, #4]
 801b588:	4798      	blx	r3
 801b58a:	4603      	mov	r3, r0
 801b58c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b58e:	e004      	b.n	801b59a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801b590:	2303      	movs	r3, #3
 801b592:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b594:	e001      	b.n	801b59a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801b596:	2303      	movs	r3, #3
 801b598:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b59a:	683b      	ldr	r3, [r7, #0]
 801b59c:	88db      	ldrh	r3, [r3, #6]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d110      	bne.n	801b5c4 <USBD_StdItfReq+0xc0>
 801b5a2:	7bfb      	ldrb	r3, [r7, #15]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d10d      	bne.n	801b5c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801b5a8:	6878      	ldr	r0, [r7, #4]
 801b5aa:	f000 fdc7 	bl	801c13c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b5ae:	e009      	b.n	801b5c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801b5b0:	6839      	ldr	r1, [r7, #0]
 801b5b2:	6878      	ldr	r0, [r7, #4]
 801b5b4:	f000 fcf7 	bl	801bfa6 <USBD_CtlError>
          break;
 801b5b8:	e004      	b.n	801b5c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b5ba:	6839      	ldr	r1, [r7, #0]
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f000 fcf2 	bl	801bfa6 <USBD_CtlError>
          break;
 801b5c2:	e000      	b.n	801b5c6 <USBD_StdItfReq+0xc2>
          break;
 801b5c4:	bf00      	nop
      }
      break;
 801b5c6:	e004      	b.n	801b5d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801b5c8:	6839      	ldr	r1, [r7, #0]
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	f000 fceb 	bl	801bfa6 <USBD_CtlError>
      break;
 801b5d0:	bf00      	nop
  }

  return ret;
 801b5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	3710      	adds	r7, #16
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}

0801b5dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b084      	sub	sp, #16
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	6078      	str	r0, [r7, #4]
 801b5e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801b5ea:	683b      	ldr	r3, [r7, #0]
 801b5ec:	889b      	ldrh	r3, [r3, #4]
 801b5ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b5f0:	683b      	ldr	r3, [r7, #0]
 801b5f2:	781b      	ldrb	r3, [r3, #0]
 801b5f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b5f8:	2b40      	cmp	r3, #64	; 0x40
 801b5fa:	d007      	beq.n	801b60c <USBD_StdEPReq+0x30>
 801b5fc:	2b40      	cmp	r3, #64	; 0x40
 801b5fe:	f200 817f 	bhi.w	801b900 <USBD_StdEPReq+0x324>
 801b602:	2b00      	cmp	r3, #0
 801b604:	d02a      	beq.n	801b65c <USBD_StdEPReq+0x80>
 801b606:	2b20      	cmp	r3, #32
 801b608:	f040 817a 	bne.w	801b900 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801b60c:	7bbb      	ldrb	r3, [r7, #14]
 801b60e:	4619      	mov	r1, r3
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	f7ff fe83 	bl	801b31c <USBD_CoreFindEP>
 801b616:	4603      	mov	r3, r0
 801b618:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b61a:	7b7b      	ldrb	r3, [r7, #13]
 801b61c:	2bff      	cmp	r3, #255	; 0xff
 801b61e:	f000 8174 	beq.w	801b90a <USBD_StdEPReq+0x32e>
 801b622:	7b7b      	ldrb	r3, [r7, #13]
 801b624:	2b00      	cmp	r3, #0
 801b626:	f040 8170 	bne.w	801b90a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801b62a:	7b7a      	ldrb	r2, [r7, #13]
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801b632:	7b7a      	ldrb	r2, [r7, #13]
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	32ae      	adds	r2, #174	; 0xae
 801b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b63c:	689b      	ldr	r3, [r3, #8]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	f000 8163 	beq.w	801b90a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801b644:	7b7a      	ldrb	r2, [r7, #13]
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	32ae      	adds	r2, #174	; 0xae
 801b64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b64e:	689b      	ldr	r3, [r3, #8]
 801b650:	6839      	ldr	r1, [r7, #0]
 801b652:	6878      	ldr	r0, [r7, #4]
 801b654:	4798      	blx	r3
 801b656:	4603      	mov	r3, r0
 801b658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801b65a:	e156      	b.n	801b90a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b65c:	683b      	ldr	r3, [r7, #0]
 801b65e:	785b      	ldrb	r3, [r3, #1]
 801b660:	2b03      	cmp	r3, #3
 801b662:	d008      	beq.n	801b676 <USBD_StdEPReq+0x9a>
 801b664:	2b03      	cmp	r3, #3
 801b666:	f300 8145 	bgt.w	801b8f4 <USBD_StdEPReq+0x318>
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	f000 809b 	beq.w	801b7a6 <USBD_StdEPReq+0x1ca>
 801b670:	2b01      	cmp	r3, #1
 801b672:	d03c      	beq.n	801b6ee <USBD_StdEPReq+0x112>
 801b674:	e13e      	b.n	801b8f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b67c:	b2db      	uxtb	r3, r3
 801b67e:	2b02      	cmp	r3, #2
 801b680:	d002      	beq.n	801b688 <USBD_StdEPReq+0xac>
 801b682:	2b03      	cmp	r3, #3
 801b684:	d016      	beq.n	801b6b4 <USBD_StdEPReq+0xd8>
 801b686:	e02c      	b.n	801b6e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b688:	7bbb      	ldrb	r3, [r7, #14]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d00d      	beq.n	801b6aa <USBD_StdEPReq+0xce>
 801b68e:	7bbb      	ldrb	r3, [r7, #14]
 801b690:	2b80      	cmp	r3, #128	; 0x80
 801b692:	d00a      	beq.n	801b6aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801b694:	7bbb      	ldrb	r3, [r7, #14]
 801b696:	4619      	mov	r1, r3
 801b698:	6878      	ldr	r0, [r7, #4]
 801b69a:	f001 f973 	bl	801c984 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801b69e:	2180      	movs	r1, #128	; 0x80
 801b6a0:	6878      	ldr	r0, [r7, #4]
 801b6a2:	f001 f96f 	bl	801c984 <USBD_LL_StallEP>
 801b6a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b6a8:	e020      	b.n	801b6ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801b6aa:	6839      	ldr	r1, [r7, #0]
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f000 fc7a 	bl	801bfa6 <USBD_CtlError>
              break;
 801b6b2:	e01b      	b.n	801b6ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b6b4:	683b      	ldr	r3, [r7, #0]
 801b6b6:	885b      	ldrh	r3, [r3, #2]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d10e      	bne.n	801b6da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b6bc:	7bbb      	ldrb	r3, [r7, #14]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d00b      	beq.n	801b6da <USBD_StdEPReq+0xfe>
 801b6c2:	7bbb      	ldrb	r3, [r7, #14]
 801b6c4:	2b80      	cmp	r3, #128	; 0x80
 801b6c6:	d008      	beq.n	801b6da <USBD_StdEPReq+0xfe>
 801b6c8:	683b      	ldr	r3, [r7, #0]
 801b6ca:	88db      	ldrh	r3, [r3, #6]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d104      	bne.n	801b6da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801b6d0:	7bbb      	ldrb	r3, [r7, #14]
 801b6d2:	4619      	mov	r1, r3
 801b6d4:	6878      	ldr	r0, [r7, #4]
 801b6d6:	f001 f955 	bl	801c984 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801b6da:	6878      	ldr	r0, [r7, #4]
 801b6dc:	f000 fd2e 	bl	801c13c <USBD_CtlSendStatus>

              break;
 801b6e0:	e004      	b.n	801b6ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801b6e2:	6839      	ldr	r1, [r7, #0]
 801b6e4:	6878      	ldr	r0, [r7, #4]
 801b6e6:	f000 fc5e 	bl	801bfa6 <USBD_CtlError>
              break;
 801b6ea:	bf00      	nop
          }
          break;
 801b6ec:	e107      	b.n	801b8fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b6f4:	b2db      	uxtb	r3, r3
 801b6f6:	2b02      	cmp	r3, #2
 801b6f8:	d002      	beq.n	801b700 <USBD_StdEPReq+0x124>
 801b6fa:	2b03      	cmp	r3, #3
 801b6fc:	d016      	beq.n	801b72c <USBD_StdEPReq+0x150>
 801b6fe:	e04b      	b.n	801b798 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b700:	7bbb      	ldrb	r3, [r7, #14]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d00d      	beq.n	801b722 <USBD_StdEPReq+0x146>
 801b706:	7bbb      	ldrb	r3, [r7, #14]
 801b708:	2b80      	cmp	r3, #128	; 0x80
 801b70a:	d00a      	beq.n	801b722 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801b70c:	7bbb      	ldrb	r3, [r7, #14]
 801b70e:	4619      	mov	r1, r3
 801b710:	6878      	ldr	r0, [r7, #4]
 801b712:	f001 f937 	bl	801c984 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801b716:	2180      	movs	r1, #128	; 0x80
 801b718:	6878      	ldr	r0, [r7, #4]
 801b71a:	f001 f933 	bl	801c984 <USBD_LL_StallEP>
 801b71e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b720:	e040      	b.n	801b7a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801b722:	6839      	ldr	r1, [r7, #0]
 801b724:	6878      	ldr	r0, [r7, #4]
 801b726:	f000 fc3e 	bl	801bfa6 <USBD_CtlError>
              break;
 801b72a:	e03b      	b.n	801b7a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b72c:	683b      	ldr	r3, [r7, #0]
 801b72e:	885b      	ldrh	r3, [r3, #2]
 801b730:	2b00      	cmp	r3, #0
 801b732:	d136      	bne.n	801b7a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b734:	7bbb      	ldrb	r3, [r7, #14]
 801b736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d004      	beq.n	801b748 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801b73e:	7bbb      	ldrb	r3, [r7, #14]
 801b740:	4619      	mov	r1, r3
 801b742:	6878      	ldr	r0, [r7, #4]
 801b744:	f001 f93d 	bl	801c9c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801b748:	6878      	ldr	r0, [r7, #4]
 801b74a:	f000 fcf7 	bl	801c13c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801b74e:	7bbb      	ldrb	r3, [r7, #14]
 801b750:	4619      	mov	r1, r3
 801b752:	6878      	ldr	r0, [r7, #4]
 801b754:	f7ff fde2 	bl	801b31c <USBD_CoreFindEP>
 801b758:	4603      	mov	r3, r0
 801b75a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b75c:	7b7b      	ldrb	r3, [r7, #13]
 801b75e:	2bff      	cmp	r3, #255	; 0xff
 801b760:	d01f      	beq.n	801b7a2 <USBD_StdEPReq+0x1c6>
 801b762:	7b7b      	ldrb	r3, [r7, #13]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d11c      	bne.n	801b7a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801b768:	7b7a      	ldrb	r2, [r7, #13]
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801b770:	7b7a      	ldrb	r2, [r7, #13]
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	32ae      	adds	r2, #174	; 0xae
 801b776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b77a:	689b      	ldr	r3, [r3, #8]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d010      	beq.n	801b7a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801b780:	7b7a      	ldrb	r2, [r7, #13]
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	32ae      	adds	r2, #174	; 0xae
 801b786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b78a:	689b      	ldr	r3, [r3, #8]
 801b78c:	6839      	ldr	r1, [r7, #0]
 801b78e:	6878      	ldr	r0, [r7, #4]
 801b790:	4798      	blx	r3
 801b792:	4603      	mov	r3, r0
 801b794:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801b796:	e004      	b.n	801b7a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801b798:	6839      	ldr	r1, [r7, #0]
 801b79a:	6878      	ldr	r0, [r7, #4]
 801b79c:	f000 fc03 	bl	801bfa6 <USBD_CtlError>
              break;
 801b7a0:	e000      	b.n	801b7a4 <USBD_StdEPReq+0x1c8>
              break;
 801b7a2:	bf00      	nop
          }
          break;
 801b7a4:	e0ab      	b.n	801b8fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b7ac:	b2db      	uxtb	r3, r3
 801b7ae:	2b02      	cmp	r3, #2
 801b7b0:	d002      	beq.n	801b7b8 <USBD_StdEPReq+0x1dc>
 801b7b2:	2b03      	cmp	r3, #3
 801b7b4:	d032      	beq.n	801b81c <USBD_StdEPReq+0x240>
 801b7b6:	e097      	b.n	801b8e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b7b8:	7bbb      	ldrb	r3, [r7, #14]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d007      	beq.n	801b7ce <USBD_StdEPReq+0x1f2>
 801b7be:	7bbb      	ldrb	r3, [r7, #14]
 801b7c0:	2b80      	cmp	r3, #128	; 0x80
 801b7c2:	d004      	beq.n	801b7ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801b7c4:	6839      	ldr	r1, [r7, #0]
 801b7c6:	6878      	ldr	r0, [r7, #4]
 801b7c8:	f000 fbed 	bl	801bfa6 <USBD_CtlError>
                break;
 801b7cc:	e091      	b.n	801b8f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b7ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	da0b      	bge.n	801b7ee <USBD_StdEPReq+0x212>
 801b7d6:	7bbb      	ldrb	r3, [r7, #14]
 801b7d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b7dc:	4613      	mov	r3, r2
 801b7de:	009b      	lsls	r3, r3, #2
 801b7e0:	4413      	add	r3, r2
 801b7e2:	009b      	lsls	r3, r3, #2
 801b7e4:	3310      	adds	r3, #16
 801b7e6:	687a      	ldr	r2, [r7, #4]
 801b7e8:	4413      	add	r3, r2
 801b7ea:	3304      	adds	r3, #4
 801b7ec:	e00b      	b.n	801b806 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b7ee:	7bbb      	ldrb	r3, [r7, #14]
 801b7f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b7f4:	4613      	mov	r3, r2
 801b7f6:	009b      	lsls	r3, r3, #2
 801b7f8:	4413      	add	r3, r2
 801b7fa:	009b      	lsls	r3, r3, #2
 801b7fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801b800:	687a      	ldr	r2, [r7, #4]
 801b802:	4413      	add	r3, r2
 801b804:	3304      	adds	r3, #4
 801b806:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b808:	68bb      	ldr	r3, [r7, #8]
 801b80a:	2200      	movs	r2, #0
 801b80c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801b80e:	68bb      	ldr	r3, [r7, #8]
 801b810:	2202      	movs	r2, #2
 801b812:	4619      	mov	r1, r3
 801b814:	6878      	ldr	r0, [r7, #4]
 801b816:	f000 fc37 	bl	801c088 <USBD_CtlSendData>
              break;
 801b81a:	e06a      	b.n	801b8f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b81c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b820:	2b00      	cmp	r3, #0
 801b822:	da11      	bge.n	801b848 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b824:	7bbb      	ldrb	r3, [r7, #14]
 801b826:	f003 020f 	and.w	r2, r3, #15
 801b82a:	6879      	ldr	r1, [r7, #4]
 801b82c:	4613      	mov	r3, r2
 801b82e:	009b      	lsls	r3, r3, #2
 801b830:	4413      	add	r3, r2
 801b832:	009b      	lsls	r3, r3, #2
 801b834:	440b      	add	r3, r1
 801b836:	3324      	adds	r3, #36	; 0x24
 801b838:	881b      	ldrh	r3, [r3, #0]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d117      	bne.n	801b86e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801b83e:	6839      	ldr	r1, [r7, #0]
 801b840:	6878      	ldr	r0, [r7, #4]
 801b842:	f000 fbb0 	bl	801bfa6 <USBD_CtlError>
                  break;
 801b846:	e054      	b.n	801b8f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b848:	7bbb      	ldrb	r3, [r7, #14]
 801b84a:	f003 020f 	and.w	r2, r3, #15
 801b84e:	6879      	ldr	r1, [r7, #4]
 801b850:	4613      	mov	r3, r2
 801b852:	009b      	lsls	r3, r3, #2
 801b854:	4413      	add	r3, r2
 801b856:	009b      	lsls	r3, r3, #2
 801b858:	440b      	add	r3, r1
 801b85a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b85e:	881b      	ldrh	r3, [r3, #0]
 801b860:	2b00      	cmp	r3, #0
 801b862:	d104      	bne.n	801b86e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801b864:	6839      	ldr	r1, [r7, #0]
 801b866:	6878      	ldr	r0, [r7, #4]
 801b868:	f000 fb9d 	bl	801bfa6 <USBD_CtlError>
                  break;
 801b86c:	e041      	b.n	801b8f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b86e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b872:	2b00      	cmp	r3, #0
 801b874:	da0b      	bge.n	801b88e <USBD_StdEPReq+0x2b2>
 801b876:	7bbb      	ldrb	r3, [r7, #14]
 801b878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b87c:	4613      	mov	r3, r2
 801b87e:	009b      	lsls	r3, r3, #2
 801b880:	4413      	add	r3, r2
 801b882:	009b      	lsls	r3, r3, #2
 801b884:	3310      	adds	r3, #16
 801b886:	687a      	ldr	r2, [r7, #4]
 801b888:	4413      	add	r3, r2
 801b88a:	3304      	adds	r3, #4
 801b88c:	e00b      	b.n	801b8a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b88e:	7bbb      	ldrb	r3, [r7, #14]
 801b890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b894:	4613      	mov	r3, r2
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	4413      	add	r3, r2
 801b89a:	009b      	lsls	r3, r3, #2
 801b89c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801b8a0:	687a      	ldr	r2, [r7, #4]
 801b8a2:	4413      	add	r3, r2
 801b8a4:	3304      	adds	r3, #4
 801b8a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b8a8:	7bbb      	ldrb	r3, [r7, #14]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d002      	beq.n	801b8b4 <USBD_StdEPReq+0x2d8>
 801b8ae:	7bbb      	ldrb	r3, [r7, #14]
 801b8b0:	2b80      	cmp	r3, #128	; 0x80
 801b8b2:	d103      	bne.n	801b8bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	2200      	movs	r2, #0
 801b8b8:	601a      	str	r2, [r3, #0]
 801b8ba:	e00e      	b.n	801b8da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801b8bc:	7bbb      	ldrb	r3, [r7, #14]
 801b8be:	4619      	mov	r1, r3
 801b8c0:	6878      	ldr	r0, [r7, #4]
 801b8c2:	f001 f89d 	bl	801ca00 <USBD_LL_IsStallEP>
 801b8c6:	4603      	mov	r3, r0
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d003      	beq.n	801b8d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	2201      	movs	r2, #1
 801b8d0:	601a      	str	r2, [r3, #0]
 801b8d2:	e002      	b.n	801b8da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801b8d4:	68bb      	ldr	r3, [r7, #8]
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801b8da:	68bb      	ldr	r3, [r7, #8]
 801b8dc:	2202      	movs	r2, #2
 801b8de:	4619      	mov	r1, r3
 801b8e0:	6878      	ldr	r0, [r7, #4]
 801b8e2:	f000 fbd1 	bl	801c088 <USBD_CtlSendData>
              break;
 801b8e6:	e004      	b.n	801b8f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801b8e8:	6839      	ldr	r1, [r7, #0]
 801b8ea:	6878      	ldr	r0, [r7, #4]
 801b8ec:	f000 fb5b 	bl	801bfa6 <USBD_CtlError>
              break;
 801b8f0:	bf00      	nop
          }
          break;
 801b8f2:	e004      	b.n	801b8fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801b8f4:	6839      	ldr	r1, [r7, #0]
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f000 fb55 	bl	801bfa6 <USBD_CtlError>
          break;
 801b8fc:	bf00      	nop
      }
      break;
 801b8fe:	e005      	b.n	801b90c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801b900:	6839      	ldr	r1, [r7, #0]
 801b902:	6878      	ldr	r0, [r7, #4]
 801b904:	f000 fb4f 	bl	801bfa6 <USBD_CtlError>
      break;
 801b908:	e000      	b.n	801b90c <USBD_StdEPReq+0x330>
      break;
 801b90a:	bf00      	nop
  }

  return ret;
 801b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b90e:	4618      	mov	r0, r3
 801b910:	3710      	adds	r7, #16
 801b912:	46bd      	mov	sp, r7
 801b914:	bd80      	pop	{r7, pc}
	...

0801b918 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b918:	b580      	push	{r7, lr}
 801b91a:	b084      	sub	sp, #16
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
 801b920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b922:	2300      	movs	r3, #0
 801b924:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801b926:	2300      	movs	r3, #0
 801b928:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b92a:	2300      	movs	r3, #0
 801b92c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	885b      	ldrh	r3, [r3, #2]
 801b932:	0a1b      	lsrs	r3, r3, #8
 801b934:	b29b      	uxth	r3, r3
 801b936:	3b01      	subs	r3, #1
 801b938:	2b06      	cmp	r3, #6
 801b93a:	f200 8128 	bhi.w	801bb8e <USBD_GetDescriptor+0x276>
 801b93e:	a201      	add	r2, pc, #4	; (adr r2, 801b944 <USBD_GetDescriptor+0x2c>)
 801b940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b944:	0801b961 	.word	0x0801b961
 801b948:	0801b979 	.word	0x0801b979
 801b94c:	0801b9b9 	.word	0x0801b9b9
 801b950:	0801bb8f 	.word	0x0801bb8f
 801b954:	0801bb8f 	.word	0x0801bb8f
 801b958:	0801bb2f 	.word	0x0801bb2f
 801b95c:	0801bb5b 	.word	0x0801bb5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	687a      	ldr	r2, [r7, #4]
 801b96a:	7c12      	ldrb	r2, [r2, #16]
 801b96c:	f107 0108 	add.w	r1, r7, #8
 801b970:	4610      	mov	r0, r2
 801b972:	4798      	blx	r3
 801b974:	60f8      	str	r0, [r7, #12]
      break;
 801b976:	e112      	b.n	801bb9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	7c1b      	ldrb	r3, [r3, #16]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d10d      	bne.n	801b99c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b988:	f107 0208 	add.w	r2, r7, #8
 801b98c:	4610      	mov	r0, r2
 801b98e:	4798      	blx	r3
 801b990:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	3301      	adds	r3, #1
 801b996:	2202      	movs	r2, #2
 801b998:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b99a:	e100      	b.n	801bb9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9a4:	f107 0208 	add.w	r2, r7, #8
 801b9a8:	4610      	mov	r0, r2
 801b9aa:	4798      	blx	r3
 801b9ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	3301      	adds	r3, #1
 801b9b2:	2202      	movs	r2, #2
 801b9b4:	701a      	strb	r2, [r3, #0]
      break;
 801b9b6:	e0f2      	b.n	801bb9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b9b8:	683b      	ldr	r3, [r7, #0]
 801b9ba:	885b      	ldrh	r3, [r3, #2]
 801b9bc:	b2db      	uxtb	r3, r3
 801b9be:	2b05      	cmp	r3, #5
 801b9c0:	f200 80ac 	bhi.w	801bb1c <USBD_GetDescriptor+0x204>
 801b9c4:	a201      	add	r2, pc, #4	; (adr r2, 801b9cc <USBD_GetDescriptor+0xb4>)
 801b9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9ca:	bf00      	nop
 801b9cc:	0801b9e5 	.word	0x0801b9e5
 801b9d0:	0801ba19 	.word	0x0801ba19
 801b9d4:	0801ba4d 	.word	0x0801ba4d
 801b9d8:	0801ba81 	.word	0x0801ba81
 801b9dc:	0801bab5 	.word	0x0801bab5
 801b9e0:	0801bae9 	.word	0x0801bae9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b9ea:	685b      	ldr	r3, [r3, #4]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d00b      	beq.n	801ba08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801b9f6:	685b      	ldr	r3, [r3, #4]
 801b9f8:	687a      	ldr	r2, [r7, #4]
 801b9fa:	7c12      	ldrb	r2, [r2, #16]
 801b9fc:	f107 0108 	add.w	r1, r7, #8
 801ba00:	4610      	mov	r0, r2
 801ba02:	4798      	blx	r3
 801ba04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba06:	e091      	b.n	801bb2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ba08:	6839      	ldr	r1, [r7, #0]
 801ba0a:	6878      	ldr	r0, [r7, #4]
 801ba0c:	f000 facb 	bl	801bfa6 <USBD_CtlError>
            err++;
 801ba10:	7afb      	ldrb	r3, [r7, #11]
 801ba12:	3301      	adds	r3, #1
 801ba14:	72fb      	strb	r3, [r7, #11]
          break;
 801ba16:	e089      	b.n	801bb2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba1e:	689b      	ldr	r3, [r3, #8]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d00b      	beq.n	801ba3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba2a:	689b      	ldr	r3, [r3, #8]
 801ba2c:	687a      	ldr	r2, [r7, #4]
 801ba2e:	7c12      	ldrb	r2, [r2, #16]
 801ba30:	f107 0108 	add.w	r1, r7, #8
 801ba34:	4610      	mov	r0, r2
 801ba36:	4798      	blx	r3
 801ba38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba3a:	e077      	b.n	801bb2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ba3c:	6839      	ldr	r1, [r7, #0]
 801ba3e:	6878      	ldr	r0, [r7, #4]
 801ba40:	f000 fab1 	bl	801bfa6 <USBD_CtlError>
            err++;
 801ba44:	7afb      	ldrb	r3, [r7, #11]
 801ba46:	3301      	adds	r3, #1
 801ba48:	72fb      	strb	r3, [r7, #11]
          break;
 801ba4a:	e06f      	b.n	801bb2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba52:	68db      	ldr	r3, [r3, #12]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d00b      	beq.n	801ba70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba5e:	68db      	ldr	r3, [r3, #12]
 801ba60:	687a      	ldr	r2, [r7, #4]
 801ba62:	7c12      	ldrb	r2, [r2, #16]
 801ba64:	f107 0108 	add.w	r1, r7, #8
 801ba68:	4610      	mov	r0, r2
 801ba6a:	4798      	blx	r3
 801ba6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba6e:	e05d      	b.n	801bb2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ba70:	6839      	ldr	r1, [r7, #0]
 801ba72:	6878      	ldr	r0, [r7, #4]
 801ba74:	f000 fa97 	bl	801bfa6 <USBD_CtlError>
            err++;
 801ba78:	7afb      	ldrb	r3, [r7, #11]
 801ba7a:	3301      	adds	r3, #1
 801ba7c:	72fb      	strb	r3, [r7, #11]
          break;
 801ba7e:	e055      	b.n	801bb2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba86:	691b      	ldr	r3, [r3, #16]
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d00b      	beq.n	801baa4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba92:	691b      	ldr	r3, [r3, #16]
 801ba94:	687a      	ldr	r2, [r7, #4]
 801ba96:	7c12      	ldrb	r2, [r2, #16]
 801ba98:	f107 0108 	add.w	r1, r7, #8
 801ba9c:	4610      	mov	r0, r2
 801ba9e:	4798      	blx	r3
 801baa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801baa2:	e043      	b.n	801bb2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801baa4:	6839      	ldr	r1, [r7, #0]
 801baa6:	6878      	ldr	r0, [r7, #4]
 801baa8:	f000 fa7d 	bl	801bfa6 <USBD_CtlError>
            err++;
 801baac:	7afb      	ldrb	r3, [r7, #11]
 801baae:	3301      	adds	r3, #1
 801bab0:	72fb      	strb	r3, [r7, #11]
          break;
 801bab2:	e03b      	b.n	801bb2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801baba:	695b      	ldr	r3, [r3, #20]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d00b      	beq.n	801bad8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bac6:	695b      	ldr	r3, [r3, #20]
 801bac8:	687a      	ldr	r2, [r7, #4]
 801baca:	7c12      	ldrb	r2, [r2, #16]
 801bacc:	f107 0108 	add.w	r1, r7, #8
 801bad0:	4610      	mov	r0, r2
 801bad2:	4798      	blx	r3
 801bad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bad6:	e029      	b.n	801bb2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bad8:	6839      	ldr	r1, [r7, #0]
 801bada:	6878      	ldr	r0, [r7, #4]
 801badc:	f000 fa63 	bl	801bfa6 <USBD_CtlError>
            err++;
 801bae0:	7afb      	ldrb	r3, [r7, #11]
 801bae2:	3301      	adds	r3, #1
 801bae4:	72fb      	strb	r3, [r7, #11]
          break;
 801bae6:	e021      	b.n	801bb2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801baee:	699b      	ldr	r3, [r3, #24]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d00b      	beq.n	801bb0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bafa:	699b      	ldr	r3, [r3, #24]
 801bafc:	687a      	ldr	r2, [r7, #4]
 801bafe:	7c12      	ldrb	r2, [r2, #16]
 801bb00:	f107 0108 	add.w	r1, r7, #8
 801bb04:	4610      	mov	r0, r2
 801bb06:	4798      	blx	r3
 801bb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb0a:	e00f      	b.n	801bb2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bb0c:	6839      	ldr	r1, [r7, #0]
 801bb0e:	6878      	ldr	r0, [r7, #4]
 801bb10:	f000 fa49 	bl	801bfa6 <USBD_CtlError>
            err++;
 801bb14:	7afb      	ldrb	r3, [r7, #11]
 801bb16:	3301      	adds	r3, #1
 801bb18:	72fb      	strb	r3, [r7, #11]
          break;
 801bb1a:	e007      	b.n	801bb2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801bb1c:	6839      	ldr	r1, [r7, #0]
 801bb1e:	6878      	ldr	r0, [r7, #4]
 801bb20:	f000 fa41 	bl	801bfa6 <USBD_CtlError>
          err++;
 801bb24:	7afb      	ldrb	r3, [r7, #11]
 801bb26:	3301      	adds	r3, #1
 801bb28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801bb2a:	bf00      	nop
      }
      break;
 801bb2c:	e037      	b.n	801bb9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	7c1b      	ldrb	r3, [r3, #16]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d109      	bne.n	801bb4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb3e:	f107 0208 	add.w	r2, r7, #8
 801bb42:	4610      	mov	r0, r2
 801bb44:	4798      	blx	r3
 801bb46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bb48:	e029      	b.n	801bb9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bb4a:	6839      	ldr	r1, [r7, #0]
 801bb4c:	6878      	ldr	r0, [r7, #4]
 801bb4e:	f000 fa2a 	bl	801bfa6 <USBD_CtlError>
        err++;
 801bb52:	7afb      	ldrb	r3, [r7, #11]
 801bb54:	3301      	adds	r3, #1
 801bb56:	72fb      	strb	r3, [r7, #11]
      break;
 801bb58:	e021      	b.n	801bb9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	7c1b      	ldrb	r3, [r3, #16]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d10d      	bne.n	801bb7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bb68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb6a:	f107 0208 	add.w	r2, r7, #8
 801bb6e:	4610      	mov	r0, r2
 801bb70:	4798      	blx	r3
 801bb72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	3301      	adds	r3, #1
 801bb78:	2207      	movs	r2, #7
 801bb7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bb7c:	e00f      	b.n	801bb9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bb7e:	6839      	ldr	r1, [r7, #0]
 801bb80:	6878      	ldr	r0, [r7, #4]
 801bb82:	f000 fa10 	bl	801bfa6 <USBD_CtlError>
        err++;
 801bb86:	7afb      	ldrb	r3, [r7, #11]
 801bb88:	3301      	adds	r3, #1
 801bb8a:	72fb      	strb	r3, [r7, #11]
      break;
 801bb8c:	e007      	b.n	801bb9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801bb8e:	6839      	ldr	r1, [r7, #0]
 801bb90:	6878      	ldr	r0, [r7, #4]
 801bb92:	f000 fa08 	bl	801bfa6 <USBD_CtlError>
      err++;
 801bb96:	7afb      	ldrb	r3, [r7, #11]
 801bb98:	3301      	adds	r3, #1
 801bb9a:	72fb      	strb	r3, [r7, #11]
      break;
 801bb9c:	bf00      	nop
  }

  if (err != 0U)
 801bb9e:	7afb      	ldrb	r3, [r7, #11]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d11e      	bne.n	801bbe2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801bba4:	683b      	ldr	r3, [r7, #0]
 801bba6:	88db      	ldrh	r3, [r3, #6]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d016      	beq.n	801bbda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801bbac:	893b      	ldrh	r3, [r7, #8]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d00e      	beq.n	801bbd0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801bbb2:	683b      	ldr	r3, [r7, #0]
 801bbb4:	88da      	ldrh	r2, [r3, #6]
 801bbb6:	893b      	ldrh	r3, [r7, #8]
 801bbb8:	4293      	cmp	r3, r2
 801bbba:	bf28      	it	cs
 801bbbc:	4613      	movcs	r3, r2
 801bbbe:	b29b      	uxth	r3, r3
 801bbc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bbc2:	893b      	ldrh	r3, [r7, #8]
 801bbc4:	461a      	mov	r2, r3
 801bbc6:	68f9      	ldr	r1, [r7, #12]
 801bbc8:	6878      	ldr	r0, [r7, #4]
 801bbca:	f000 fa5d 	bl	801c088 <USBD_CtlSendData>
 801bbce:	e009      	b.n	801bbe4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801bbd0:	6839      	ldr	r1, [r7, #0]
 801bbd2:	6878      	ldr	r0, [r7, #4]
 801bbd4:	f000 f9e7 	bl	801bfa6 <USBD_CtlError>
 801bbd8:	e004      	b.n	801bbe4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801bbda:	6878      	ldr	r0, [r7, #4]
 801bbdc:	f000 faae 	bl	801c13c <USBD_CtlSendStatus>
 801bbe0:	e000      	b.n	801bbe4 <USBD_GetDescriptor+0x2cc>
    return;
 801bbe2:	bf00      	nop
  }
}
 801bbe4:	3710      	adds	r7, #16
 801bbe6:	46bd      	mov	sp, r7
 801bbe8:	bd80      	pop	{r7, pc}
 801bbea:	bf00      	nop

0801bbec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b084      	sub	sp, #16
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	6078      	str	r0, [r7, #4]
 801bbf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bbf6:	683b      	ldr	r3, [r7, #0]
 801bbf8:	889b      	ldrh	r3, [r3, #4]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d131      	bne.n	801bc62 <USBD_SetAddress+0x76>
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	88db      	ldrh	r3, [r3, #6]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d12d      	bne.n	801bc62 <USBD_SetAddress+0x76>
 801bc06:	683b      	ldr	r3, [r7, #0]
 801bc08:	885b      	ldrh	r3, [r3, #2]
 801bc0a:	2b7f      	cmp	r3, #127	; 0x7f
 801bc0c:	d829      	bhi.n	801bc62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bc0e:	683b      	ldr	r3, [r7, #0]
 801bc10:	885b      	ldrh	r3, [r3, #2]
 801bc12:	b2db      	uxtb	r3, r3
 801bc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bc18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bc20:	b2db      	uxtb	r3, r3
 801bc22:	2b03      	cmp	r3, #3
 801bc24:	d104      	bne.n	801bc30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801bc26:	6839      	ldr	r1, [r7, #0]
 801bc28:	6878      	ldr	r0, [r7, #4]
 801bc2a:	f000 f9bc 	bl	801bfa6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc2e:	e01d      	b.n	801bc6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	7bfa      	ldrb	r2, [r7, #15]
 801bc34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bc38:	7bfb      	ldrb	r3, [r7, #15]
 801bc3a:	4619      	mov	r1, r3
 801bc3c:	6878      	ldr	r0, [r7, #4]
 801bc3e:	f000 ff0b 	bl	801ca58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801bc42:	6878      	ldr	r0, [r7, #4]
 801bc44:	f000 fa7a 	bl	801c13c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bc48:	7bfb      	ldrb	r3, [r7, #15]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d004      	beq.n	801bc58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	2202      	movs	r2, #2
 801bc52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc56:	e009      	b.n	801bc6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	2201      	movs	r2, #1
 801bc5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc60:	e004      	b.n	801bc6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801bc62:	6839      	ldr	r1, [r7, #0]
 801bc64:	6878      	ldr	r0, [r7, #4]
 801bc66:	f000 f99e 	bl	801bfa6 <USBD_CtlError>
  }
}
 801bc6a:	bf00      	nop
 801bc6c:	bf00      	nop
 801bc6e:	3710      	adds	r7, #16
 801bc70:	46bd      	mov	sp, r7
 801bc72:	bd80      	pop	{r7, pc}

0801bc74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b084      	sub	sp, #16
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	6078      	str	r0, [r7, #4]
 801bc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bc7e:	2300      	movs	r3, #0
 801bc80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801bc82:	683b      	ldr	r3, [r7, #0]
 801bc84:	885b      	ldrh	r3, [r3, #2]
 801bc86:	b2da      	uxtb	r2, r3
 801bc88:	4b4e      	ldr	r3, [pc, #312]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bc8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801bc8c:	4b4d      	ldr	r3, [pc, #308]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bc8e:	781b      	ldrb	r3, [r3, #0]
 801bc90:	2b01      	cmp	r3, #1
 801bc92:	d905      	bls.n	801bca0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801bc94:	6839      	ldr	r1, [r7, #0]
 801bc96:	6878      	ldr	r0, [r7, #4]
 801bc98:	f000 f985 	bl	801bfa6 <USBD_CtlError>
    return USBD_FAIL;
 801bc9c:	2303      	movs	r3, #3
 801bc9e:	e08c      	b.n	801bdba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bca6:	b2db      	uxtb	r3, r3
 801bca8:	2b02      	cmp	r3, #2
 801bcaa:	d002      	beq.n	801bcb2 <USBD_SetConfig+0x3e>
 801bcac:	2b03      	cmp	r3, #3
 801bcae:	d029      	beq.n	801bd04 <USBD_SetConfig+0x90>
 801bcb0:	e075      	b.n	801bd9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801bcb2:	4b44      	ldr	r3, [pc, #272]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bcb4:	781b      	ldrb	r3, [r3, #0]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d020      	beq.n	801bcfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801bcba:	4b42      	ldr	r3, [pc, #264]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801bcc4:	4b3f      	ldr	r3, [pc, #252]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bcc6:	781b      	ldrb	r3, [r3, #0]
 801bcc8:	4619      	mov	r1, r3
 801bcca:	6878      	ldr	r0, [r7, #4]
 801bccc:	f7fe ffe7 	bl	801ac9e <USBD_SetClassConfig>
 801bcd0:	4603      	mov	r3, r0
 801bcd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801bcd4:	7bfb      	ldrb	r3, [r7, #15]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d008      	beq.n	801bcec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801bcda:	6839      	ldr	r1, [r7, #0]
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f000 f962 	bl	801bfa6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	2202      	movs	r2, #2
 801bce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801bcea:	e065      	b.n	801bdb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801bcec:	6878      	ldr	r0, [r7, #4]
 801bcee:	f000 fa25 	bl	801c13c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	2203      	movs	r2, #3
 801bcf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801bcfa:	e05d      	b.n	801bdb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801bcfc:	6878      	ldr	r0, [r7, #4]
 801bcfe:	f000 fa1d 	bl	801c13c <USBD_CtlSendStatus>
      break;
 801bd02:	e059      	b.n	801bdb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801bd04:	4b2f      	ldr	r3, [pc, #188]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bd06:	781b      	ldrb	r3, [r3, #0]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d112      	bne.n	801bd32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	2202      	movs	r2, #2
 801bd10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801bd14:	4b2b      	ldr	r3, [pc, #172]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bd16:	781b      	ldrb	r3, [r3, #0]
 801bd18:	461a      	mov	r2, r3
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801bd1e:	4b29      	ldr	r3, [pc, #164]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bd20:	781b      	ldrb	r3, [r3, #0]
 801bd22:	4619      	mov	r1, r3
 801bd24:	6878      	ldr	r0, [r7, #4]
 801bd26:	f7fe ffd6 	bl	801acd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f000 fa06 	bl	801c13c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801bd30:	e042      	b.n	801bdb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801bd32:	4b24      	ldr	r3, [pc, #144]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bd34:	781b      	ldrb	r3, [r3, #0]
 801bd36:	461a      	mov	r2, r3
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	429a      	cmp	r2, r3
 801bd3e:	d02a      	beq.n	801bd96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	685b      	ldr	r3, [r3, #4]
 801bd44:	b2db      	uxtb	r3, r3
 801bd46:	4619      	mov	r1, r3
 801bd48:	6878      	ldr	r0, [r7, #4]
 801bd4a:	f7fe ffc4 	bl	801acd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801bd4e:	4b1d      	ldr	r3, [pc, #116]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bd50:	781b      	ldrb	r3, [r3, #0]
 801bd52:	461a      	mov	r2, r3
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801bd58:	4b1a      	ldr	r3, [pc, #104]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bd5a:	781b      	ldrb	r3, [r3, #0]
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	6878      	ldr	r0, [r7, #4]
 801bd60:	f7fe ff9d 	bl	801ac9e <USBD_SetClassConfig>
 801bd64:	4603      	mov	r3, r0
 801bd66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801bd68:	7bfb      	ldrb	r3, [r7, #15]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d00f      	beq.n	801bd8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801bd6e:	6839      	ldr	r1, [r7, #0]
 801bd70:	6878      	ldr	r0, [r7, #4]
 801bd72:	f000 f918 	bl	801bfa6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	685b      	ldr	r3, [r3, #4]
 801bd7a:	b2db      	uxtb	r3, r3
 801bd7c:	4619      	mov	r1, r3
 801bd7e:	6878      	ldr	r0, [r7, #4]
 801bd80:	f7fe ffa9 	bl	801acd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	2202      	movs	r2, #2
 801bd88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801bd8c:	e014      	b.n	801bdb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801bd8e:	6878      	ldr	r0, [r7, #4]
 801bd90:	f000 f9d4 	bl	801c13c <USBD_CtlSendStatus>
      break;
 801bd94:	e010      	b.n	801bdb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801bd96:	6878      	ldr	r0, [r7, #4]
 801bd98:	f000 f9d0 	bl	801c13c <USBD_CtlSendStatus>
      break;
 801bd9c:	e00c      	b.n	801bdb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801bd9e:	6839      	ldr	r1, [r7, #0]
 801bda0:	6878      	ldr	r0, [r7, #4]
 801bda2:	f000 f900 	bl	801bfa6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801bda6:	4b07      	ldr	r3, [pc, #28]	; (801bdc4 <USBD_SetConfig+0x150>)
 801bda8:	781b      	ldrb	r3, [r3, #0]
 801bdaa:	4619      	mov	r1, r3
 801bdac:	6878      	ldr	r0, [r7, #4]
 801bdae:	f7fe ff92 	bl	801acd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801bdb2:	2303      	movs	r3, #3
 801bdb4:	73fb      	strb	r3, [r7, #15]
      break;
 801bdb6:	bf00      	nop
  }

  return ret;
 801bdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 801bdba:	4618      	mov	r0, r3
 801bdbc:	3710      	adds	r7, #16
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	bd80      	pop	{r7, pc}
 801bdc2:	bf00      	nop
 801bdc4:	24001b48 	.word	0x24001b48

0801bdc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b082      	sub	sp, #8
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
 801bdd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801bdd2:	683b      	ldr	r3, [r7, #0]
 801bdd4:	88db      	ldrh	r3, [r3, #6]
 801bdd6:	2b01      	cmp	r3, #1
 801bdd8:	d004      	beq.n	801bde4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801bdda:	6839      	ldr	r1, [r7, #0]
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	f000 f8e2 	bl	801bfa6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801bde2:	e023      	b.n	801be2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bdea:	b2db      	uxtb	r3, r3
 801bdec:	2b02      	cmp	r3, #2
 801bdee:	dc02      	bgt.n	801bdf6 <USBD_GetConfig+0x2e>
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	dc03      	bgt.n	801bdfc <USBD_GetConfig+0x34>
 801bdf4:	e015      	b.n	801be22 <USBD_GetConfig+0x5a>
 801bdf6:	2b03      	cmp	r3, #3
 801bdf8:	d00b      	beq.n	801be12 <USBD_GetConfig+0x4a>
 801bdfa:	e012      	b.n	801be22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	2200      	movs	r2, #0
 801be00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	3308      	adds	r3, #8
 801be06:	2201      	movs	r2, #1
 801be08:	4619      	mov	r1, r3
 801be0a:	6878      	ldr	r0, [r7, #4]
 801be0c:	f000 f93c 	bl	801c088 <USBD_CtlSendData>
        break;
 801be10:	e00c      	b.n	801be2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	3304      	adds	r3, #4
 801be16:	2201      	movs	r2, #1
 801be18:	4619      	mov	r1, r3
 801be1a:	6878      	ldr	r0, [r7, #4]
 801be1c:	f000 f934 	bl	801c088 <USBD_CtlSendData>
        break;
 801be20:	e004      	b.n	801be2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801be22:	6839      	ldr	r1, [r7, #0]
 801be24:	6878      	ldr	r0, [r7, #4]
 801be26:	f000 f8be 	bl	801bfa6 <USBD_CtlError>
        break;
 801be2a:	bf00      	nop
}
 801be2c:	bf00      	nop
 801be2e:	3708      	adds	r7, #8
 801be30:	46bd      	mov	sp, r7
 801be32:	bd80      	pop	{r7, pc}

0801be34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b082      	sub	sp, #8
 801be38:	af00      	add	r7, sp, #0
 801be3a:	6078      	str	r0, [r7, #4]
 801be3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801be44:	b2db      	uxtb	r3, r3
 801be46:	3b01      	subs	r3, #1
 801be48:	2b02      	cmp	r3, #2
 801be4a:	d81e      	bhi.n	801be8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801be4c:	683b      	ldr	r3, [r7, #0]
 801be4e:	88db      	ldrh	r3, [r3, #6]
 801be50:	2b02      	cmp	r3, #2
 801be52:	d004      	beq.n	801be5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801be54:	6839      	ldr	r1, [r7, #0]
 801be56:	6878      	ldr	r0, [r7, #4]
 801be58:	f000 f8a5 	bl	801bfa6 <USBD_CtlError>
        break;
 801be5c:	e01a      	b.n	801be94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	2201      	movs	r2, #1
 801be62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d005      	beq.n	801be7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	68db      	ldr	r3, [r3, #12]
 801be72:	f043 0202 	orr.w	r2, r3, #2
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	330c      	adds	r3, #12
 801be7e:	2202      	movs	r2, #2
 801be80:	4619      	mov	r1, r3
 801be82:	6878      	ldr	r0, [r7, #4]
 801be84:	f000 f900 	bl	801c088 <USBD_CtlSendData>
      break;
 801be88:	e004      	b.n	801be94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801be8a:	6839      	ldr	r1, [r7, #0]
 801be8c:	6878      	ldr	r0, [r7, #4]
 801be8e:	f000 f88a 	bl	801bfa6 <USBD_CtlError>
      break;
 801be92:	bf00      	nop
  }
}
 801be94:	bf00      	nop
 801be96:	3708      	adds	r7, #8
 801be98:	46bd      	mov	sp, r7
 801be9a:	bd80      	pop	{r7, pc}

0801be9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b082      	sub	sp, #8
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
 801bea4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bea6:	683b      	ldr	r3, [r7, #0]
 801bea8:	885b      	ldrh	r3, [r3, #2]
 801beaa:	2b01      	cmp	r3, #1
 801beac:	d107      	bne.n	801bebe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	2201      	movs	r2, #1
 801beb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801beb6:	6878      	ldr	r0, [r7, #4]
 801beb8:	f000 f940 	bl	801c13c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801bebc:	e013      	b.n	801bee6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	885b      	ldrh	r3, [r3, #2]
 801bec2:	2b02      	cmp	r3, #2
 801bec4:	d10b      	bne.n	801bede <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801bec6:	683b      	ldr	r3, [r7, #0]
 801bec8:	889b      	ldrh	r3, [r3, #4]
 801beca:	0a1b      	lsrs	r3, r3, #8
 801becc:	b29b      	uxth	r3, r3
 801bece:	b2da      	uxtb	r2, r3
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801bed6:	6878      	ldr	r0, [r7, #4]
 801bed8:	f000 f930 	bl	801c13c <USBD_CtlSendStatus>
}
 801bedc:	e003      	b.n	801bee6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801bede:	6839      	ldr	r1, [r7, #0]
 801bee0:	6878      	ldr	r0, [r7, #4]
 801bee2:	f000 f860 	bl	801bfa6 <USBD_CtlError>
}
 801bee6:	bf00      	nop
 801bee8:	3708      	adds	r7, #8
 801beea:	46bd      	mov	sp, r7
 801beec:	bd80      	pop	{r7, pc}

0801beee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801beee:	b580      	push	{r7, lr}
 801bef0:	b082      	sub	sp, #8
 801bef2:	af00      	add	r7, sp, #0
 801bef4:	6078      	str	r0, [r7, #4]
 801bef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801befe:	b2db      	uxtb	r3, r3
 801bf00:	3b01      	subs	r3, #1
 801bf02:	2b02      	cmp	r3, #2
 801bf04:	d80b      	bhi.n	801bf1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bf06:	683b      	ldr	r3, [r7, #0]
 801bf08:	885b      	ldrh	r3, [r3, #2]
 801bf0a:	2b01      	cmp	r3, #1
 801bf0c:	d10c      	bne.n	801bf28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	2200      	movs	r2, #0
 801bf12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801bf16:	6878      	ldr	r0, [r7, #4]
 801bf18:	f000 f910 	bl	801c13c <USBD_CtlSendStatus>
      }
      break;
 801bf1c:	e004      	b.n	801bf28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801bf1e:	6839      	ldr	r1, [r7, #0]
 801bf20:	6878      	ldr	r0, [r7, #4]
 801bf22:	f000 f840 	bl	801bfa6 <USBD_CtlError>
      break;
 801bf26:	e000      	b.n	801bf2a <USBD_ClrFeature+0x3c>
      break;
 801bf28:	bf00      	nop
  }
}
 801bf2a:	bf00      	nop
 801bf2c:	3708      	adds	r7, #8
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}

0801bf32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801bf32:	b580      	push	{r7, lr}
 801bf34:	b084      	sub	sp, #16
 801bf36:	af00      	add	r7, sp, #0
 801bf38:	6078      	str	r0, [r7, #4]
 801bf3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801bf3c:	683b      	ldr	r3, [r7, #0]
 801bf3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	781a      	ldrb	r2, [r3, #0]
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	3301      	adds	r3, #1
 801bf4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	781a      	ldrb	r2, [r3, #0]
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	3301      	adds	r3, #1
 801bf5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801bf5c:	68f8      	ldr	r0, [r7, #12]
 801bf5e:	f7ff fa41 	bl	801b3e4 <SWAPBYTE>
 801bf62:	4603      	mov	r3, r0
 801bf64:	461a      	mov	r2, r3
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	3301      	adds	r3, #1
 801bf6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801bf70:	68fb      	ldr	r3, [r7, #12]
 801bf72:	3301      	adds	r3, #1
 801bf74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801bf76:	68f8      	ldr	r0, [r7, #12]
 801bf78:	f7ff fa34 	bl	801b3e4 <SWAPBYTE>
 801bf7c:	4603      	mov	r3, r0
 801bf7e:	461a      	mov	r2, r3
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	3301      	adds	r3, #1
 801bf88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	3301      	adds	r3, #1
 801bf8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801bf90:	68f8      	ldr	r0, [r7, #12]
 801bf92:	f7ff fa27 	bl	801b3e4 <SWAPBYTE>
 801bf96:	4603      	mov	r3, r0
 801bf98:	461a      	mov	r2, r3
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	80da      	strh	r2, [r3, #6]
}
 801bf9e:	bf00      	nop
 801bfa0:	3710      	adds	r7, #16
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	bd80      	pop	{r7, pc}

0801bfa6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bfa6:	b580      	push	{r7, lr}
 801bfa8:	b082      	sub	sp, #8
 801bfaa:	af00      	add	r7, sp, #0
 801bfac:	6078      	str	r0, [r7, #4]
 801bfae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801bfb0:	2180      	movs	r1, #128	; 0x80
 801bfb2:	6878      	ldr	r0, [r7, #4]
 801bfb4:	f000 fce6 	bl	801c984 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801bfb8:	2100      	movs	r1, #0
 801bfba:	6878      	ldr	r0, [r7, #4]
 801bfbc:	f000 fce2 	bl	801c984 <USBD_LL_StallEP>
}
 801bfc0:	bf00      	nop
 801bfc2:	3708      	adds	r7, #8
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	bd80      	pop	{r7, pc}

0801bfc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801bfc8:	b580      	push	{r7, lr}
 801bfca:	b086      	sub	sp, #24
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	60f8      	str	r0, [r7, #12]
 801bfd0:	60b9      	str	r1, [r7, #8]
 801bfd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801bfd4:	2300      	movs	r3, #0
 801bfd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d036      	beq.n	801c04c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801bfe2:	6938      	ldr	r0, [r7, #16]
 801bfe4:	f000 f836 	bl	801c054 <USBD_GetLen>
 801bfe8:	4603      	mov	r3, r0
 801bfea:	3301      	adds	r3, #1
 801bfec:	b29b      	uxth	r3, r3
 801bfee:	005b      	lsls	r3, r3, #1
 801bff0:	b29a      	uxth	r2, r3
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801bff6:	7dfb      	ldrb	r3, [r7, #23]
 801bff8:	68ba      	ldr	r2, [r7, #8]
 801bffa:	4413      	add	r3, r2
 801bffc:	687a      	ldr	r2, [r7, #4]
 801bffe:	7812      	ldrb	r2, [r2, #0]
 801c000:	701a      	strb	r2, [r3, #0]
  idx++;
 801c002:	7dfb      	ldrb	r3, [r7, #23]
 801c004:	3301      	adds	r3, #1
 801c006:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801c008:	7dfb      	ldrb	r3, [r7, #23]
 801c00a:	68ba      	ldr	r2, [r7, #8]
 801c00c:	4413      	add	r3, r2
 801c00e:	2203      	movs	r2, #3
 801c010:	701a      	strb	r2, [r3, #0]
  idx++;
 801c012:	7dfb      	ldrb	r3, [r7, #23]
 801c014:	3301      	adds	r3, #1
 801c016:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801c018:	e013      	b.n	801c042 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801c01a:	7dfb      	ldrb	r3, [r7, #23]
 801c01c:	68ba      	ldr	r2, [r7, #8]
 801c01e:	4413      	add	r3, r2
 801c020:	693a      	ldr	r2, [r7, #16]
 801c022:	7812      	ldrb	r2, [r2, #0]
 801c024:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801c026:	693b      	ldr	r3, [r7, #16]
 801c028:	3301      	adds	r3, #1
 801c02a:	613b      	str	r3, [r7, #16]
    idx++;
 801c02c:	7dfb      	ldrb	r3, [r7, #23]
 801c02e:	3301      	adds	r3, #1
 801c030:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801c032:	7dfb      	ldrb	r3, [r7, #23]
 801c034:	68ba      	ldr	r2, [r7, #8]
 801c036:	4413      	add	r3, r2
 801c038:	2200      	movs	r2, #0
 801c03a:	701a      	strb	r2, [r3, #0]
    idx++;
 801c03c:	7dfb      	ldrb	r3, [r7, #23]
 801c03e:	3301      	adds	r3, #1
 801c040:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801c042:	693b      	ldr	r3, [r7, #16]
 801c044:	781b      	ldrb	r3, [r3, #0]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d1e7      	bne.n	801c01a <USBD_GetString+0x52>
 801c04a:	e000      	b.n	801c04e <USBD_GetString+0x86>
    return;
 801c04c:	bf00      	nop
  }
}
 801c04e:	3718      	adds	r7, #24
 801c050:	46bd      	mov	sp, r7
 801c052:	bd80      	pop	{r7, pc}

0801c054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c054:	b480      	push	{r7}
 801c056:	b085      	sub	sp, #20
 801c058:	af00      	add	r7, sp, #0
 801c05a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c05c:	2300      	movs	r3, #0
 801c05e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801c064:	e005      	b.n	801c072 <USBD_GetLen+0x1e>
  {
    len++;
 801c066:	7bfb      	ldrb	r3, [r7, #15]
 801c068:	3301      	adds	r3, #1
 801c06a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801c06c:	68bb      	ldr	r3, [r7, #8]
 801c06e:	3301      	adds	r3, #1
 801c070:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801c072:	68bb      	ldr	r3, [r7, #8]
 801c074:	781b      	ldrb	r3, [r3, #0]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d1f5      	bne.n	801c066 <USBD_GetLen+0x12>
  }

  return len;
 801c07a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c07c:	4618      	mov	r0, r3
 801c07e:	3714      	adds	r7, #20
 801c080:	46bd      	mov	sp, r7
 801c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c086:	4770      	bx	lr

0801c088 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801c088:	b580      	push	{r7, lr}
 801c08a:	b084      	sub	sp, #16
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	60f8      	str	r0, [r7, #12]
 801c090:	60b9      	str	r1, [r7, #8]
 801c092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	2202      	movs	r2, #2
 801c098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	687a      	ldr	r2, [r7, #4]
 801c0a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	687a      	ldr	r2, [r7, #4]
 801c0a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	68ba      	ldr	r2, [r7, #8]
 801c0ac:	2100      	movs	r1, #0
 801c0ae:	68f8      	ldr	r0, [r7, #12]
 801c0b0:	f000 fcf1 	bl	801ca96 <USBD_LL_Transmit>

  return USBD_OK;
 801c0b4:	2300      	movs	r3, #0
}
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	3710      	adds	r7, #16
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	bd80      	pop	{r7, pc}

0801c0be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801c0be:	b580      	push	{r7, lr}
 801c0c0:	b084      	sub	sp, #16
 801c0c2:	af00      	add	r7, sp, #0
 801c0c4:	60f8      	str	r0, [r7, #12]
 801c0c6:	60b9      	str	r1, [r7, #8]
 801c0c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	68ba      	ldr	r2, [r7, #8]
 801c0ce:	2100      	movs	r1, #0
 801c0d0:	68f8      	ldr	r0, [r7, #12]
 801c0d2:	f000 fce0 	bl	801ca96 <USBD_LL_Transmit>

  return USBD_OK;
 801c0d6:	2300      	movs	r3, #0
}
 801c0d8:	4618      	mov	r0, r3
 801c0da:	3710      	adds	r7, #16
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	bd80      	pop	{r7, pc}

0801c0e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b084      	sub	sp, #16
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	60f8      	str	r0, [r7, #12]
 801c0e8:	60b9      	str	r1, [r7, #8]
 801c0ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	2203      	movs	r2, #3
 801c0f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	687a      	ldr	r2, [r7, #4]
 801c100:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	68ba      	ldr	r2, [r7, #8]
 801c108:	2100      	movs	r1, #0
 801c10a:	68f8      	ldr	r0, [r7, #12]
 801c10c:	f000 fce4 	bl	801cad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c110:	2300      	movs	r3, #0
}
 801c112:	4618      	mov	r0, r3
 801c114:	3710      	adds	r7, #16
 801c116:	46bd      	mov	sp, r7
 801c118:	bd80      	pop	{r7, pc}

0801c11a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801c11a:	b580      	push	{r7, lr}
 801c11c:	b084      	sub	sp, #16
 801c11e:	af00      	add	r7, sp, #0
 801c120:	60f8      	str	r0, [r7, #12]
 801c122:	60b9      	str	r1, [r7, #8]
 801c124:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	68ba      	ldr	r2, [r7, #8]
 801c12a:	2100      	movs	r1, #0
 801c12c:	68f8      	ldr	r0, [r7, #12]
 801c12e:	f000 fcd3 	bl	801cad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c132:	2300      	movs	r3, #0
}
 801c134:	4618      	mov	r0, r3
 801c136:	3710      	adds	r7, #16
 801c138:	46bd      	mov	sp, r7
 801c13a:	bd80      	pop	{r7, pc}

0801c13c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c13c:	b580      	push	{r7, lr}
 801c13e:	b082      	sub	sp, #8
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	2204      	movs	r2, #4
 801c148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c14c:	2300      	movs	r3, #0
 801c14e:	2200      	movs	r2, #0
 801c150:	2100      	movs	r1, #0
 801c152:	6878      	ldr	r0, [r7, #4]
 801c154:	f000 fc9f 	bl	801ca96 <USBD_LL_Transmit>

  return USBD_OK;
 801c158:	2300      	movs	r3, #0
}
 801c15a:	4618      	mov	r0, r3
 801c15c:	3708      	adds	r7, #8
 801c15e:	46bd      	mov	sp, r7
 801c160:	bd80      	pop	{r7, pc}

0801c162 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c162:	b580      	push	{r7, lr}
 801c164:	b082      	sub	sp, #8
 801c166:	af00      	add	r7, sp, #0
 801c168:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	2205      	movs	r2, #5
 801c16e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c172:	2300      	movs	r3, #0
 801c174:	2200      	movs	r2, #0
 801c176:	2100      	movs	r1, #0
 801c178:	6878      	ldr	r0, [r7, #4]
 801c17a:	f000 fcad 	bl	801cad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c17e:	2300      	movs	r3, #0
}
 801c180:	4618      	mov	r0, r3
 801c182:	3708      	adds	r7, #8
 801c184:	46bd      	mov	sp, r7
 801c186:	bd80      	pop	{r7, pc}

0801c188 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c18c:	2200      	movs	r2, #0
 801c18e:	4913      	ldr	r1, [pc, #76]	; (801c1dc <MX_USB_DEVICE_Init+0x54>)
 801c190:	4813      	ldr	r0, [pc, #76]	; (801c1e0 <MX_USB_DEVICE_Init+0x58>)
 801c192:	f7fe fd07 	bl	801aba4 <USBD_Init>
 801c196:	4603      	mov	r3, r0
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d001      	beq.n	801c1a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c19c:	f7ee fdc6 	bl	800ad2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c1a0:	4910      	ldr	r1, [pc, #64]	; (801c1e4 <MX_USB_DEVICE_Init+0x5c>)
 801c1a2:	480f      	ldr	r0, [pc, #60]	; (801c1e0 <MX_USB_DEVICE_Init+0x58>)
 801c1a4:	f7fe fd2e 	bl	801ac04 <USBD_RegisterClass>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d001      	beq.n	801c1b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c1ae:	f7ee fdbd 	bl	800ad2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c1b2:	490d      	ldr	r1, [pc, #52]	; (801c1e8 <MX_USB_DEVICE_Init+0x60>)
 801c1b4:	480a      	ldr	r0, [pc, #40]	; (801c1e0 <MX_USB_DEVICE_Init+0x58>)
 801c1b6:	f7fe fc65 	bl	801aa84 <USBD_CDC_RegisterInterface>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d001      	beq.n	801c1c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c1c0:	f7ee fdb4 	bl	800ad2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c1c4:	4806      	ldr	r0, [pc, #24]	; (801c1e0 <MX_USB_DEVICE_Init+0x58>)
 801c1c6:	f7fe fd53 	bl	801ac70 <USBD_Start>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d001      	beq.n	801c1d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c1d0:	f7ee fdac 	bl	800ad2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801c1d4:	f7f5 fe36 	bl	8011e44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c1d8:	bf00      	nop
 801c1da:	bd80      	pop	{r7, pc}
 801c1dc:	240000b0 	.word	0x240000b0
 801c1e0:	24001b4c 	.word	0x24001b4c
 801c1e4:	2400001c 	.word	0x2400001c
 801c1e8:	2400009c 	.word	0x2400009c

0801c1ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	4905      	ldr	r1, [pc, #20]	; (801c208 <CDC_Init_FS+0x1c>)
 801c1f4:	4805      	ldr	r0, [pc, #20]	; (801c20c <CDC_Init_FS+0x20>)
 801c1f6:	f7fe fc5f 	bl	801aab8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c1fa:	4905      	ldr	r1, [pc, #20]	; (801c210 <CDC_Init_FS+0x24>)
 801c1fc:	4803      	ldr	r0, [pc, #12]	; (801c20c <CDC_Init_FS+0x20>)
 801c1fe:	f7fe fc7d 	bl	801aafc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c204:	4618      	mov	r0, r3
 801c206:	bd80      	pop	{r7, pc}
 801c208:	24002628 	.word	0x24002628
 801c20c:	24001b4c 	.word	0x24001b4c
 801c210:	24001e28 	.word	0x24001e28

0801c214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c214:	b480      	push	{r7}
 801c216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c21a:	4618      	mov	r0, r3
 801c21c:	46bd      	mov	sp, r7
 801c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c222:	4770      	bx	lr

0801c224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c224:	b480      	push	{r7}
 801c226:	b083      	sub	sp, #12
 801c228:	af00      	add	r7, sp, #0
 801c22a:	4603      	mov	r3, r0
 801c22c:	6039      	str	r1, [r7, #0]
 801c22e:	71fb      	strb	r3, [r7, #7]
 801c230:	4613      	mov	r3, r2
 801c232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c234:	79fb      	ldrb	r3, [r7, #7]
 801c236:	2b23      	cmp	r3, #35	; 0x23
 801c238:	d84a      	bhi.n	801c2d0 <CDC_Control_FS+0xac>
 801c23a:	a201      	add	r2, pc, #4	; (adr r2, 801c240 <CDC_Control_FS+0x1c>)
 801c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c240:	0801c2d1 	.word	0x0801c2d1
 801c244:	0801c2d1 	.word	0x0801c2d1
 801c248:	0801c2d1 	.word	0x0801c2d1
 801c24c:	0801c2d1 	.word	0x0801c2d1
 801c250:	0801c2d1 	.word	0x0801c2d1
 801c254:	0801c2d1 	.word	0x0801c2d1
 801c258:	0801c2d1 	.word	0x0801c2d1
 801c25c:	0801c2d1 	.word	0x0801c2d1
 801c260:	0801c2d1 	.word	0x0801c2d1
 801c264:	0801c2d1 	.word	0x0801c2d1
 801c268:	0801c2d1 	.word	0x0801c2d1
 801c26c:	0801c2d1 	.word	0x0801c2d1
 801c270:	0801c2d1 	.word	0x0801c2d1
 801c274:	0801c2d1 	.word	0x0801c2d1
 801c278:	0801c2d1 	.word	0x0801c2d1
 801c27c:	0801c2d1 	.word	0x0801c2d1
 801c280:	0801c2d1 	.word	0x0801c2d1
 801c284:	0801c2d1 	.word	0x0801c2d1
 801c288:	0801c2d1 	.word	0x0801c2d1
 801c28c:	0801c2d1 	.word	0x0801c2d1
 801c290:	0801c2d1 	.word	0x0801c2d1
 801c294:	0801c2d1 	.word	0x0801c2d1
 801c298:	0801c2d1 	.word	0x0801c2d1
 801c29c:	0801c2d1 	.word	0x0801c2d1
 801c2a0:	0801c2d1 	.word	0x0801c2d1
 801c2a4:	0801c2d1 	.word	0x0801c2d1
 801c2a8:	0801c2d1 	.word	0x0801c2d1
 801c2ac:	0801c2d1 	.word	0x0801c2d1
 801c2b0:	0801c2d1 	.word	0x0801c2d1
 801c2b4:	0801c2d1 	.word	0x0801c2d1
 801c2b8:	0801c2d1 	.word	0x0801c2d1
 801c2bc:	0801c2d1 	.word	0x0801c2d1
 801c2c0:	0801c2d1 	.word	0x0801c2d1
 801c2c4:	0801c2d1 	.word	0x0801c2d1
 801c2c8:	0801c2d1 	.word	0x0801c2d1
 801c2cc:	0801c2d1 	.word	0x0801c2d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c2d0:	bf00      	nop
  }

  return (USBD_OK);
 801c2d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	370c      	adds	r7, #12
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2de:	4770      	bx	lr

0801c2e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	6078      	str	r0, [r7, #4]
 801c2e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c2ea:	6879      	ldr	r1, [r7, #4]
 801c2ec:	4805      	ldr	r0, [pc, #20]	; (801c304 <CDC_Receive_FS+0x24>)
 801c2ee:	f7fe fc05 	bl	801aafc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c2f2:	4804      	ldr	r0, [pc, #16]	; (801c304 <CDC_Receive_FS+0x24>)
 801c2f4:	f7fe fc20 	bl	801ab38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c2f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	3708      	adds	r7, #8
 801c2fe:	46bd      	mov	sp, r7
 801c300:	bd80      	pop	{r7, pc}
 801c302:	bf00      	nop
 801c304:	24001b4c 	.word	0x24001b4c

0801c308 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c308:	b480      	push	{r7}
 801c30a:	b087      	sub	sp, #28
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	60f8      	str	r0, [r7, #12]
 801c310:	60b9      	str	r1, [r7, #8]
 801c312:	4613      	mov	r3, r2
 801c314:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c316:	2300      	movs	r3, #0
 801c318:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c31e:	4618      	mov	r0, r3
 801c320:	371c      	adds	r7, #28
 801c322:	46bd      	mov	sp, r7
 801c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c328:	4770      	bx	lr
	...

0801c32c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c32c:	b480      	push	{r7}
 801c32e:	b083      	sub	sp, #12
 801c330:	af00      	add	r7, sp, #0
 801c332:	4603      	mov	r3, r0
 801c334:	6039      	str	r1, [r7, #0]
 801c336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	2212      	movs	r2, #18
 801c33c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c33e:	4b03      	ldr	r3, [pc, #12]	; (801c34c <USBD_FS_DeviceDescriptor+0x20>)
}
 801c340:	4618      	mov	r0, r3
 801c342:	370c      	adds	r7, #12
 801c344:	46bd      	mov	sp, r7
 801c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c34a:	4770      	bx	lr
 801c34c:	240000cc 	.word	0x240000cc

0801c350 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c350:	b480      	push	{r7}
 801c352:	b083      	sub	sp, #12
 801c354:	af00      	add	r7, sp, #0
 801c356:	4603      	mov	r3, r0
 801c358:	6039      	str	r1, [r7, #0]
 801c35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	2204      	movs	r2, #4
 801c360:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c362:	4b03      	ldr	r3, [pc, #12]	; (801c370 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c364:	4618      	mov	r0, r3
 801c366:	370c      	adds	r7, #12
 801c368:	46bd      	mov	sp, r7
 801c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c36e:	4770      	bx	lr
 801c370:	240000e0 	.word	0x240000e0

0801c374 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c374:	b580      	push	{r7, lr}
 801c376:	b082      	sub	sp, #8
 801c378:	af00      	add	r7, sp, #0
 801c37a:	4603      	mov	r3, r0
 801c37c:	6039      	str	r1, [r7, #0]
 801c37e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c380:	79fb      	ldrb	r3, [r7, #7]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d105      	bne.n	801c392 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c386:	683a      	ldr	r2, [r7, #0]
 801c388:	4907      	ldr	r1, [pc, #28]	; (801c3a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801c38a:	4808      	ldr	r0, [pc, #32]	; (801c3ac <USBD_FS_ProductStrDescriptor+0x38>)
 801c38c:	f7ff fe1c 	bl	801bfc8 <USBD_GetString>
 801c390:	e004      	b.n	801c39c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c392:	683a      	ldr	r2, [r7, #0]
 801c394:	4904      	ldr	r1, [pc, #16]	; (801c3a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801c396:	4805      	ldr	r0, [pc, #20]	; (801c3ac <USBD_FS_ProductStrDescriptor+0x38>)
 801c398:	f7ff fe16 	bl	801bfc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c39c:	4b02      	ldr	r3, [pc, #8]	; (801c3a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801c39e:	4618      	mov	r0, r3
 801c3a0:	3708      	adds	r7, #8
 801c3a2:	46bd      	mov	sp, r7
 801c3a4:	bd80      	pop	{r7, pc}
 801c3a6:	bf00      	nop
 801c3a8:	24002e28 	.word	0x24002e28
 801c3ac:	0801e404 	.word	0x0801e404

0801c3b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b082      	sub	sp, #8
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	6039      	str	r1, [r7, #0]
 801c3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c3bc:	683a      	ldr	r2, [r7, #0]
 801c3be:	4904      	ldr	r1, [pc, #16]	; (801c3d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801c3c0:	4804      	ldr	r0, [pc, #16]	; (801c3d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c3c2:	f7ff fe01 	bl	801bfc8 <USBD_GetString>
  return USBD_StrDesc;
 801c3c6:	4b02      	ldr	r3, [pc, #8]	; (801c3d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	3708      	adds	r7, #8
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bd80      	pop	{r7, pc}
 801c3d0:	24002e28 	.word	0x24002e28
 801c3d4:	0801e41c 	.word	0x0801e41c

0801c3d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c3d8:	b580      	push	{r7, lr}
 801c3da:	b082      	sub	sp, #8
 801c3dc:	af00      	add	r7, sp, #0
 801c3de:	4603      	mov	r3, r0
 801c3e0:	6039      	str	r1, [r7, #0]
 801c3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c3e4:	683b      	ldr	r3, [r7, #0]
 801c3e6:	221a      	movs	r2, #26
 801c3e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c3ea:	f000 f843 	bl	801c474 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c3ee:	4b02      	ldr	r3, [pc, #8]	; (801c3f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	3708      	adds	r7, #8
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	bd80      	pop	{r7, pc}
 801c3f8:	240000e4 	.word	0x240000e4

0801c3fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c3fc:	b580      	push	{r7, lr}
 801c3fe:	b082      	sub	sp, #8
 801c400:	af00      	add	r7, sp, #0
 801c402:	4603      	mov	r3, r0
 801c404:	6039      	str	r1, [r7, #0]
 801c406:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c408:	79fb      	ldrb	r3, [r7, #7]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d105      	bne.n	801c41a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c40e:	683a      	ldr	r2, [r7, #0]
 801c410:	4907      	ldr	r1, [pc, #28]	; (801c430 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c412:	4808      	ldr	r0, [pc, #32]	; (801c434 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c414:	f7ff fdd8 	bl	801bfc8 <USBD_GetString>
 801c418:	e004      	b.n	801c424 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c41a:	683a      	ldr	r2, [r7, #0]
 801c41c:	4904      	ldr	r1, [pc, #16]	; (801c430 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c41e:	4805      	ldr	r0, [pc, #20]	; (801c434 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c420:	f7ff fdd2 	bl	801bfc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c424:	4b02      	ldr	r3, [pc, #8]	; (801c430 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801c426:	4618      	mov	r0, r3
 801c428:	3708      	adds	r7, #8
 801c42a:	46bd      	mov	sp, r7
 801c42c:	bd80      	pop	{r7, pc}
 801c42e:	bf00      	nop
 801c430:	24002e28 	.word	0x24002e28
 801c434:	0801e430 	.word	0x0801e430

0801c438 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b082      	sub	sp, #8
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	4603      	mov	r3, r0
 801c440:	6039      	str	r1, [r7, #0]
 801c442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c444:	79fb      	ldrb	r3, [r7, #7]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d105      	bne.n	801c456 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c44a:	683a      	ldr	r2, [r7, #0]
 801c44c:	4907      	ldr	r1, [pc, #28]	; (801c46c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c44e:	4808      	ldr	r0, [pc, #32]	; (801c470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c450:	f7ff fdba 	bl	801bfc8 <USBD_GetString>
 801c454:	e004      	b.n	801c460 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c456:	683a      	ldr	r2, [r7, #0]
 801c458:	4904      	ldr	r1, [pc, #16]	; (801c46c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c45a:	4805      	ldr	r0, [pc, #20]	; (801c470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c45c:	f7ff fdb4 	bl	801bfc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c460:	4b02      	ldr	r3, [pc, #8]	; (801c46c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c462:	4618      	mov	r0, r3
 801c464:	3708      	adds	r7, #8
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}
 801c46a:	bf00      	nop
 801c46c:	24002e28 	.word	0x24002e28
 801c470:	0801e43c 	.word	0x0801e43c

0801c474 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b084      	sub	sp, #16
 801c478:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c47a:	4b0f      	ldr	r3, [pc, #60]	; (801c4b8 <Get_SerialNum+0x44>)
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c480:	4b0e      	ldr	r3, [pc, #56]	; (801c4bc <Get_SerialNum+0x48>)
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c486:	4b0e      	ldr	r3, [pc, #56]	; (801c4c0 <Get_SerialNum+0x4c>)
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c48c:	68fa      	ldr	r2, [r7, #12]
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	4413      	add	r3, r2
 801c492:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d009      	beq.n	801c4ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c49a:	2208      	movs	r2, #8
 801c49c:	4909      	ldr	r1, [pc, #36]	; (801c4c4 <Get_SerialNum+0x50>)
 801c49e:	68f8      	ldr	r0, [r7, #12]
 801c4a0:	f000 f814 	bl	801c4cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c4a4:	2204      	movs	r2, #4
 801c4a6:	4908      	ldr	r1, [pc, #32]	; (801c4c8 <Get_SerialNum+0x54>)
 801c4a8:	68b8      	ldr	r0, [r7, #8]
 801c4aa:	f000 f80f 	bl	801c4cc <IntToUnicode>
  }
}
 801c4ae:	bf00      	nop
 801c4b0:	3710      	adds	r7, #16
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bd80      	pop	{r7, pc}
 801c4b6:	bf00      	nop
 801c4b8:	1ff1e800 	.word	0x1ff1e800
 801c4bc:	1ff1e804 	.word	0x1ff1e804
 801c4c0:	1ff1e808 	.word	0x1ff1e808
 801c4c4:	240000e6 	.word	0x240000e6
 801c4c8:	240000f6 	.word	0x240000f6

0801c4cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c4cc:	b480      	push	{r7}
 801c4ce:	b087      	sub	sp, #28
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	60f8      	str	r0, [r7, #12]
 801c4d4:	60b9      	str	r1, [r7, #8]
 801c4d6:	4613      	mov	r3, r2
 801c4d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c4da:	2300      	movs	r3, #0
 801c4dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801c4de:	2300      	movs	r3, #0
 801c4e0:	75fb      	strb	r3, [r7, #23]
 801c4e2:	e027      	b.n	801c534 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	0f1b      	lsrs	r3, r3, #28
 801c4e8:	2b09      	cmp	r3, #9
 801c4ea:	d80b      	bhi.n	801c504 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	0f1b      	lsrs	r3, r3, #28
 801c4f0:	b2da      	uxtb	r2, r3
 801c4f2:	7dfb      	ldrb	r3, [r7, #23]
 801c4f4:	005b      	lsls	r3, r3, #1
 801c4f6:	4619      	mov	r1, r3
 801c4f8:	68bb      	ldr	r3, [r7, #8]
 801c4fa:	440b      	add	r3, r1
 801c4fc:	3230      	adds	r2, #48	; 0x30
 801c4fe:	b2d2      	uxtb	r2, r2
 801c500:	701a      	strb	r2, [r3, #0]
 801c502:	e00a      	b.n	801c51a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	0f1b      	lsrs	r3, r3, #28
 801c508:	b2da      	uxtb	r2, r3
 801c50a:	7dfb      	ldrb	r3, [r7, #23]
 801c50c:	005b      	lsls	r3, r3, #1
 801c50e:	4619      	mov	r1, r3
 801c510:	68bb      	ldr	r3, [r7, #8]
 801c512:	440b      	add	r3, r1
 801c514:	3237      	adds	r2, #55	; 0x37
 801c516:	b2d2      	uxtb	r2, r2
 801c518:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	011b      	lsls	r3, r3, #4
 801c51e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c520:	7dfb      	ldrb	r3, [r7, #23]
 801c522:	005b      	lsls	r3, r3, #1
 801c524:	3301      	adds	r3, #1
 801c526:	68ba      	ldr	r2, [r7, #8]
 801c528:	4413      	add	r3, r2
 801c52a:	2200      	movs	r2, #0
 801c52c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c52e:	7dfb      	ldrb	r3, [r7, #23]
 801c530:	3301      	adds	r3, #1
 801c532:	75fb      	strb	r3, [r7, #23]
 801c534:	7dfa      	ldrb	r2, [r7, #23]
 801c536:	79fb      	ldrb	r3, [r7, #7]
 801c538:	429a      	cmp	r2, r3
 801c53a:	d3d3      	bcc.n	801c4e4 <IntToUnicode+0x18>
  }
}
 801c53c:	bf00      	nop
 801c53e:	bf00      	nop
 801c540:	371c      	adds	r7, #28
 801c542:	46bd      	mov	sp, r7
 801c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c548:	4770      	bx	lr
	...

0801c54c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b0b8      	sub	sp, #224	; 0xe0
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c558:	2200      	movs	r2, #0
 801c55a:	601a      	str	r2, [r3, #0]
 801c55c:	605a      	str	r2, [r3, #4]
 801c55e:	609a      	str	r2, [r3, #8]
 801c560:	60da      	str	r2, [r3, #12]
 801c562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c564:	f107 0310 	add.w	r3, r7, #16
 801c568:	22bc      	movs	r2, #188	; 0xbc
 801c56a:	2100      	movs	r1, #0
 801c56c:	4618      	mov	r0, r3
 801c56e:	f000 fbe9 	bl	801cd44 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	4a2f      	ldr	r2, [pc, #188]	; (801c634 <HAL_PCD_MspInit+0xe8>)
 801c578:	4293      	cmp	r3, r2
 801c57a:	d156      	bne.n	801c62a <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801c57c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c580:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801c582:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801c586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c58a:	f107 0310 	add.w	r3, r7, #16
 801c58e:	4618      	mov	r0, r3
 801c590:	f7f6 fc22 	bl	8012dd8 <HAL_RCCEx_PeriphCLKConfig>
 801c594:	4603      	mov	r3, r0
 801c596:	2b00      	cmp	r3, #0
 801c598:	d001      	beq.n	801c59e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 801c59a:	f7ee fbc7 	bl	800ad2c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801c59e:	f7f5 fc51 	bl	8011e44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c5a2:	4b25      	ldr	r3, [pc, #148]	; (801c638 <HAL_PCD_MspInit+0xec>)
 801c5a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c5a8:	4a23      	ldr	r2, [pc, #140]	; (801c638 <HAL_PCD_MspInit+0xec>)
 801c5aa:	f043 0301 	orr.w	r3, r3, #1
 801c5ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801c5b2:	4b21      	ldr	r3, [pc, #132]	; (801c638 <HAL_PCD_MspInit+0xec>)
 801c5b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c5b8:	f003 0301 	and.w	r3, r3, #1
 801c5bc:	60fb      	str	r3, [r7, #12]
 801c5be:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801c5c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c5c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c5c8:	2302      	movs	r3, #2
 801c5ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801c5da:	230a      	movs	r3, #10
 801c5dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c5e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c5e4:	4619      	mov	r1, r3
 801c5e6:	4815      	ldr	r0, [pc, #84]	; (801c63c <HAL_PCD_MspInit+0xf0>)
 801c5e8:	f7f2 ffa6 	bl	800f538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c5ec:	4b12      	ldr	r3, [pc, #72]	; (801c638 <HAL_PCD_MspInit+0xec>)
 801c5ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c5f2:	4a11      	ldr	r2, [pc, #68]	; (801c638 <HAL_PCD_MspInit+0xec>)
 801c5f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c5f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801c5fc:	4b0e      	ldr	r3, [pc, #56]	; (801c638 <HAL_PCD_MspInit+0xec>)
 801c5fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c606:	60bb      	str	r3, [r7, #8]
 801c608:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 801c60a:	2200      	movs	r2, #0
 801c60c:	2100      	movs	r1, #0
 801c60e:	2062      	movs	r0, #98	; 0x62
 801c610:	f7ef ff3f 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 801c614:	2062      	movs	r0, #98	; 0x62
 801c616:	f7ef ff56 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801c61a:	2200      	movs	r2, #0
 801c61c:	2100      	movs	r1, #0
 801c61e:	2065      	movs	r0, #101	; 0x65
 801c620:	f7ef ff37 	bl	800c492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c624:	2065      	movs	r0, #101	; 0x65
 801c626:	f7ef ff4e 	bl	800c4c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c62a:	bf00      	nop
 801c62c:	37e0      	adds	r7, #224	; 0xe0
 801c62e:	46bd      	mov	sp, r7
 801c630:	bd80      	pop	{r7, pc}
 801c632:	bf00      	nop
 801c634:	40080000 	.word	0x40080000
 801c638:	58024400 	.word	0x58024400
 801c63c:	58020000 	.word	0x58020000

0801c640 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b082      	sub	sp, #8
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801c654:	4619      	mov	r1, r3
 801c656:	4610      	mov	r0, r2
 801c658:	f7fe fb57 	bl	801ad0a <USBD_LL_SetupStage>
}
 801c65c:	bf00      	nop
 801c65e:	3708      	adds	r7, #8
 801c660:	46bd      	mov	sp, r7
 801c662:	bd80      	pop	{r7, pc}

0801c664 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b082      	sub	sp, #8
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]
 801c66c:	460b      	mov	r3, r1
 801c66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c676:	78fa      	ldrb	r2, [r7, #3]
 801c678:	6879      	ldr	r1, [r7, #4]
 801c67a:	4613      	mov	r3, r2
 801c67c:	00db      	lsls	r3, r3, #3
 801c67e:	4413      	add	r3, r2
 801c680:	009b      	lsls	r3, r3, #2
 801c682:	440b      	add	r3, r1
 801c684:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801c688:	681a      	ldr	r2, [r3, #0]
 801c68a:	78fb      	ldrb	r3, [r7, #3]
 801c68c:	4619      	mov	r1, r3
 801c68e:	f7fe fb91 	bl	801adb4 <USBD_LL_DataOutStage>
}
 801c692:	bf00      	nop
 801c694:	3708      	adds	r7, #8
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}

0801c69a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c69a:	b580      	push	{r7, lr}
 801c69c:	b082      	sub	sp, #8
 801c69e:	af00      	add	r7, sp, #0
 801c6a0:	6078      	str	r0, [r7, #4]
 801c6a2:	460b      	mov	r3, r1
 801c6a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c6ac:	78fa      	ldrb	r2, [r7, #3]
 801c6ae:	6879      	ldr	r1, [r7, #4]
 801c6b0:	4613      	mov	r3, r2
 801c6b2:	00db      	lsls	r3, r3, #3
 801c6b4:	4413      	add	r3, r2
 801c6b6:	009b      	lsls	r3, r3, #2
 801c6b8:	440b      	add	r3, r1
 801c6ba:	334c      	adds	r3, #76	; 0x4c
 801c6bc:	681a      	ldr	r2, [r3, #0]
 801c6be:	78fb      	ldrb	r3, [r7, #3]
 801c6c0:	4619      	mov	r1, r3
 801c6c2:	f7fe fc2a 	bl	801af1a <USBD_LL_DataInStage>
}
 801c6c6:	bf00      	nop
 801c6c8:	3708      	adds	r7, #8
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bd80      	pop	{r7, pc}

0801c6ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c6ce:	b580      	push	{r7, lr}
 801c6d0:	b082      	sub	sp, #8
 801c6d2:	af00      	add	r7, sp, #0
 801c6d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c6dc:	4618      	mov	r0, r3
 801c6de:	f7fe fd5e 	bl	801b19e <USBD_LL_SOF>
}
 801c6e2:	bf00      	nop
 801c6e4:	3708      	adds	r7, #8
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	bd80      	pop	{r7, pc}

0801c6ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c6ea:	b580      	push	{r7, lr}
 801c6ec:	b084      	sub	sp, #16
 801c6ee:	af00      	add	r7, sp, #0
 801c6f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c6f2:	2301      	movs	r3, #1
 801c6f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	68db      	ldr	r3, [r3, #12]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d102      	bne.n	801c704 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801c6fe:	2300      	movs	r3, #0
 801c700:	73fb      	strb	r3, [r7, #15]
 801c702:	e008      	b.n	801c716 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	68db      	ldr	r3, [r3, #12]
 801c708:	2b02      	cmp	r3, #2
 801c70a:	d102      	bne.n	801c712 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801c70c:	2301      	movs	r3, #1
 801c70e:	73fb      	strb	r3, [r7, #15]
 801c710:	e001      	b.n	801c716 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801c712:	f7ee fb0b 	bl	800ad2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c71c:	7bfa      	ldrb	r2, [r7, #15]
 801c71e:	4611      	mov	r1, r2
 801c720:	4618      	mov	r0, r3
 801c722:	f7fe fcfe 	bl	801b122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c72c:	4618      	mov	r0, r3
 801c72e:	f7fe fca6 	bl	801b07e <USBD_LL_Reset>
}
 801c732:	bf00      	nop
 801c734:	3710      	adds	r7, #16
 801c736:	46bd      	mov	sp, r7
 801c738:	bd80      	pop	{r7, pc}
	...

0801c73c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b082      	sub	sp, #8
 801c740:	af00      	add	r7, sp, #0
 801c742:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c74a:	4618      	mov	r0, r3
 801c74c:	f7fe fcf9 	bl	801b142 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	687a      	ldr	r2, [r7, #4]
 801c75c:	6812      	ldr	r2, [r2, #0]
 801c75e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c762:	f043 0301 	orr.w	r3, r3, #1
 801c766:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	6a1b      	ldr	r3, [r3, #32]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d005      	beq.n	801c77c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c770:	4b04      	ldr	r3, [pc, #16]	; (801c784 <HAL_PCD_SuspendCallback+0x48>)
 801c772:	691b      	ldr	r3, [r3, #16]
 801c774:	4a03      	ldr	r2, [pc, #12]	; (801c784 <HAL_PCD_SuspendCallback+0x48>)
 801c776:	f043 0306 	orr.w	r3, r3, #6
 801c77a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801c77c:	bf00      	nop
 801c77e:	3708      	adds	r7, #8
 801c780:	46bd      	mov	sp, r7
 801c782:	bd80      	pop	{r7, pc}
 801c784:	e000ed00 	.word	0xe000ed00

0801c788 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b082      	sub	sp, #8
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c796:	4618      	mov	r0, r3
 801c798:	f7fe fce9 	bl	801b16e <USBD_LL_Resume>
}
 801c79c:	bf00      	nop
 801c79e:	3708      	adds	r7, #8
 801c7a0:	46bd      	mov	sp, r7
 801c7a2:	bd80      	pop	{r7, pc}

0801c7a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b082      	sub	sp, #8
 801c7a8:	af00      	add	r7, sp, #0
 801c7aa:	6078      	str	r0, [r7, #4]
 801c7ac:	460b      	mov	r3, r1
 801c7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c7b6:	78fa      	ldrb	r2, [r7, #3]
 801c7b8:	4611      	mov	r1, r2
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	f7fe fd41 	bl	801b242 <USBD_LL_IsoOUTIncomplete>
}
 801c7c0:	bf00      	nop
 801c7c2:	3708      	adds	r7, #8
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}

0801c7c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b082      	sub	sp, #8
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	6078      	str	r0, [r7, #4]
 801c7d0:	460b      	mov	r3, r1
 801c7d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c7da:	78fa      	ldrb	r2, [r7, #3]
 801c7dc:	4611      	mov	r1, r2
 801c7de:	4618      	mov	r0, r3
 801c7e0:	f7fe fcfd 	bl	801b1de <USBD_LL_IsoINIncomplete>
}
 801c7e4:	bf00      	nop
 801c7e6:	3708      	adds	r7, #8
 801c7e8:	46bd      	mov	sp, r7
 801c7ea:	bd80      	pop	{r7, pc}

0801c7ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	b082      	sub	sp, #8
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f7fe fd53 	bl	801b2a6 <USBD_LL_DevConnected>
}
 801c800:	bf00      	nop
 801c802:	3708      	adds	r7, #8
 801c804:	46bd      	mov	sp, r7
 801c806:	bd80      	pop	{r7, pc}

0801c808 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c808:	b580      	push	{r7, lr}
 801c80a:	b082      	sub	sp, #8
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c816:	4618      	mov	r0, r3
 801c818:	f7fe fd50 	bl	801b2bc <USBD_LL_DevDisconnected>
}
 801c81c:	bf00      	nop
 801c81e:	3708      	adds	r7, #8
 801c820:	46bd      	mov	sp, r7
 801c822:	bd80      	pop	{r7, pc}

0801c824 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c824:	b580      	push	{r7, lr}
 801c826:	b082      	sub	sp, #8
 801c828:	af00      	add	r7, sp, #0
 801c82a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	781b      	ldrb	r3, [r3, #0]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d13e      	bne.n	801c8b2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801c834:	4a21      	ldr	r2, [pc, #132]	; (801c8bc <USBD_LL_Init+0x98>)
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	4a1f      	ldr	r2, [pc, #124]	; (801c8bc <USBD_LL_Init+0x98>)
 801c840:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c844:	4b1d      	ldr	r3, [pc, #116]	; (801c8bc <USBD_LL_Init+0x98>)
 801c846:	4a1e      	ldr	r2, [pc, #120]	; (801c8c0 <USBD_LL_Init+0x9c>)
 801c848:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801c84a:	4b1c      	ldr	r3, [pc, #112]	; (801c8bc <USBD_LL_Init+0x98>)
 801c84c:	2209      	movs	r2, #9
 801c84e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801c850:	4b1a      	ldr	r3, [pc, #104]	; (801c8bc <USBD_LL_Init+0x98>)
 801c852:	2202      	movs	r2, #2
 801c854:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c856:	4b19      	ldr	r3, [pc, #100]	; (801c8bc <USBD_LL_Init+0x98>)
 801c858:	2200      	movs	r2, #0
 801c85a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c85c:	4b17      	ldr	r3, [pc, #92]	; (801c8bc <USBD_LL_Init+0x98>)
 801c85e:	2202      	movs	r2, #2
 801c860:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c862:	4b16      	ldr	r3, [pc, #88]	; (801c8bc <USBD_LL_Init+0x98>)
 801c864:	2200      	movs	r2, #0
 801c866:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801c868:	4b14      	ldr	r3, [pc, #80]	; (801c8bc <USBD_LL_Init+0x98>)
 801c86a:	2200      	movs	r2, #0
 801c86c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801c86e:	4b13      	ldr	r3, [pc, #76]	; (801c8bc <USBD_LL_Init+0x98>)
 801c870:	2200      	movs	r2, #0
 801c872:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801c874:	4b11      	ldr	r3, [pc, #68]	; (801c8bc <USBD_LL_Init+0x98>)
 801c876:	2200      	movs	r2, #0
 801c878:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801c87a:	4b10      	ldr	r3, [pc, #64]	; (801c8bc <USBD_LL_Init+0x98>)
 801c87c:	2200      	movs	r2, #0
 801c87e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801c880:	4b0e      	ldr	r3, [pc, #56]	; (801c8bc <USBD_LL_Init+0x98>)
 801c882:	2200      	movs	r2, #0
 801c884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801c886:	480d      	ldr	r0, [pc, #52]	; (801c8bc <USBD_LL_Init+0x98>)
 801c888:	f7f3 ffcc 	bl	8010824 <HAL_PCD_Init>
 801c88c:	4603      	mov	r3, r0
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d001      	beq.n	801c896 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801c892:	f7ee fa4b 	bl	800ad2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801c896:	2180      	movs	r1, #128	; 0x80
 801c898:	4808      	ldr	r0, [pc, #32]	; (801c8bc <USBD_LL_Init+0x98>)
 801c89a:	f7f5 fa58 	bl	8011d4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801c89e:	2240      	movs	r2, #64	; 0x40
 801c8a0:	2100      	movs	r1, #0
 801c8a2:	4806      	ldr	r0, [pc, #24]	; (801c8bc <USBD_LL_Init+0x98>)
 801c8a4:	f7f5 fa0c 	bl	8011cc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801c8a8:	2280      	movs	r2, #128	; 0x80
 801c8aa:	2101      	movs	r1, #1
 801c8ac:	4803      	ldr	r0, [pc, #12]	; (801c8bc <USBD_LL_Init+0x98>)
 801c8ae:	f7f5 fa07 	bl	8011cc0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801c8b2:	2300      	movs	r3, #0
}
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	3708      	adds	r7, #8
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bd80      	pop	{r7, pc}
 801c8bc:	24003028 	.word	0x24003028
 801c8c0:	40080000 	.word	0x40080000

0801c8c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b084      	sub	sp, #16
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c8da:	4618      	mov	r0, r3
 801c8dc:	f7f4 f8c6 	bl	8010a6c <HAL_PCD_Start>
 801c8e0:	4603      	mov	r3, r0
 801c8e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c8e4:	7bfb      	ldrb	r3, [r7, #15]
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f000 f942 	bl	801cb70 <USBD_Get_USB_Status>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	3710      	adds	r7, #16
 801c8f6:	46bd      	mov	sp, r7
 801c8f8:	bd80      	pop	{r7, pc}

0801c8fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c8fa:	b580      	push	{r7, lr}
 801c8fc:	b084      	sub	sp, #16
 801c8fe:	af00      	add	r7, sp, #0
 801c900:	6078      	str	r0, [r7, #4]
 801c902:	4608      	mov	r0, r1
 801c904:	4611      	mov	r1, r2
 801c906:	461a      	mov	r2, r3
 801c908:	4603      	mov	r3, r0
 801c90a:	70fb      	strb	r3, [r7, #3]
 801c90c:	460b      	mov	r3, r1
 801c90e:	70bb      	strb	r3, [r7, #2]
 801c910:	4613      	mov	r3, r2
 801c912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c914:	2300      	movs	r3, #0
 801c916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c918:	2300      	movs	r3, #0
 801c91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801c922:	78bb      	ldrb	r3, [r7, #2]
 801c924:	883a      	ldrh	r2, [r7, #0]
 801c926:	78f9      	ldrb	r1, [r7, #3]
 801c928:	f7f4 fdc4 	bl	80114b4 <HAL_PCD_EP_Open>
 801c92c:	4603      	mov	r3, r0
 801c92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c930:	7bfb      	ldrb	r3, [r7, #15]
 801c932:	4618      	mov	r0, r3
 801c934:	f000 f91c 	bl	801cb70 <USBD_Get_USB_Status>
 801c938:	4603      	mov	r3, r0
 801c93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c93c:	7bbb      	ldrb	r3, [r7, #14]
}
 801c93e:	4618      	mov	r0, r3
 801c940:	3710      	adds	r7, #16
 801c942:	46bd      	mov	sp, r7
 801c944:	bd80      	pop	{r7, pc}

0801c946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c946:	b580      	push	{r7, lr}
 801c948:	b084      	sub	sp, #16
 801c94a:	af00      	add	r7, sp, #0
 801c94c:	6078      	str	r0, [r7, #4]
 801c94e:	460b      	mov	r3, r1
 801c950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c952:	2300      	movs	r3, #0
 801c954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c956:	2300      	movs	r3, #0
 801c958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c960:	78fa      	ldrb	r2, [r7, #3]
 801c962:	4611      	mov	r1, r2
 801c964:	4618      	mov	r0, r3
 801c966:	f7f4 fe0d 	bl	8011584 <HAL_PCD_EP_Close>
 801c96a:	4603      	mov	r3, r0
 801c96c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c96e:	7bfb      	ldrb	r3, [r7, #15]
 801c970:	4618      	mov	r0, r3
 801c972:	f000 f8fd 	bl	801cb70 <USBD_Get_USB_Status>
 801c976:	4603      	mov	r3, r0
 801c978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c97a:	7bbb      	ldrb	r3, [r7, #14]
}
 801c97c:	4618      	mov	r0, r3
 801c97e:	3710      	adds	r7, #16
 801c980:	46bd      	mov	sp, r7
 801c982:	bd80      	pop	{r7, pc}

0801c984 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c984:	b580      	push	{r7, lr}
 801c986:	b084      	sub	sp, #16
 801c988:	af00      	add	r7, sp, #0
 801c98a:	6078      	str	r0, [r7, #4]
 801c98c:	460b      	mov	r3, r1
 801c98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c990:	2300      	movs	r3, #0
 801c992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c994:	2300      	movs	r3, #0
 801c996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c99e:	78fa      	ldrb	r2, [r7, #3]
 801c9a0:	4611      	mov	r1, r2
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7f4 fee5 	bl	8011772 <HAL_PCD_EP_SetStall>
 801c9a8:	4603      	mov	r3, r0
 801c9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c9ac:	7bfb      	ldrb	r3, [r7, #15]
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	f000 f8de 	bl	801cb70 <USBD_Get_USB_Status>
 801c9b4:	4603      	mov	r3, r0
 801c9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	3710      	adds	r7, #16
 801c9be:	46bd      	mov	sp, r7
 801c9c0:	bd80      	pop	{r7, pc}

0801c9c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c9c2:	b580      	push	{r7, lr}
 801c9c4:	b084      	sub	sp, #16
 801c9c6:	af00      	add	r7, sp, #0
 801c9c8:	6078      	str	r0, [r7, #4]
 801c9ca:	460b      	mov	r3, r1
 801c9cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c9dc:	78fa      	ldrb	r2, [r7, #3]
 801c9de:	4611      	mov	r1, r2
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	f7f4 ff2a 	bl	801183a <HAL_PCD_EP_ClrStall>
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c9ea:	7bfb      	ldrb	r3, [r7, #15]
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	f000 f8bf 	bl	801cb70 <USBD_Get_USB_Status>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	3710      	adds	r7, #16
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	bd80      	pop	{r7, pc}

0801ca00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca00:	b480      	push	{r7}
 801ca02:	b085      	sub	sp, #20
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	6078      	str	r0, [r7, #4]
 801ca08:	460b      	mov	r3, r1
 801ca0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ca12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ca14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	da0b      	bge.n	801ca34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ca1c:	78fb      	ldrb	r3, [r7, #3]
 801ca1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ca22:	68f9      	ldr	r1, [r7, #12]
 801ca24:	4613      	mov	r3, r2
 801ca26:	00db      	lsls	r3, r3, #3
 801ca28:	4413      	add	r3, r2
 801ca2a:	009b      	lsls	r3, r3, #2
 801ca2c:	440b      	add	r3, r1
 801ca2e:	333e      	adds	r3, #62	; 0x3e
 801ca30:	781b      	ldrb	r3, [r3, #0]
 801ca32:	e00b      	b.n	801ca4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ca34:	78fb      	ldrb	r3, [r7, #3]
 801ca36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ca3a:	68f9      	ldr	r1, [r7, #12]
 801ca3c:	4613      	mov	r3, r2
 801ca3e:	00db      	lsls	r3, r3, #3
 801ca40:	4413      	add	r3, r2
 801ca42:	009b      	lsls	r3, r3, #2
 801ca44:	440b      	add	r3, r1
 801ca46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ca4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	3714      	adds	r7, #20
 801ca50:	46bd      	mov	sp, r7
 801ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca56:	4770      	bx	lr

0801ca58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b084      	sub	sp, #16
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	6078      	str	r0, [r7, #4]
 801ca60:	460b      	mov	r3, r1
 801ca62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca64:	2300      	movs	r3, #0
 801ca66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca68:	2300      	movs	r3, #0
 801ca6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ca72:	78fa      	ldrb	r2, [r7, #3]
 801ca74:	4611      	mov	r1, r2
 801ca76:	4618      	mov	r0, r3
 801ca78:	f7f4 fcf7 	bl	801146a <HAL_PCD_SetAddress>
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca80:	7bfb      	ldrb	r3, [r7, #15]
 801ca82:	4618      	mov	r0, r3
 801ca84:	f000 f874 	bl	801cb70 <USBD_Get_USB_Status>
 801ca88:	4603      	mov	r3, r0
 801ca8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca8c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca8e:	4618      	mov	r0, r3
 801ca90:	3710      	adds	r7, #16
 801ca92:	46bd      	mov	sp, r7
 801ca94:	bd80      	pop	{r7, pc}

0801ca96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ca96:	b580      	push	{r7, lr}
 801ca98:	b086      	sub	sp, #24
 801ca9a:	af00      	add	r7, sp, #0
 801ca9c:	60f8      	str	r0, [r7, #12]
 801ca9e:	607a      	str	r2, [r7, #4]
 801caa0:	603b      	str	r3, [r7, #0]
 801caa2:	460b      	mov	r3, r1
 801caa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801caa6:	2300      	movs	r3, #0
 801caa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801caaa:	2300      	movs	r3, #0
 801caac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cab4:	7af9      	ldrb	r1, [r7, #11]
 801cab6:	683b      	ldr	r3, [r7, #0]
 801cab8:	687a      	ldr	r2, [r7, #4]
 801caba:	f7f4 fe10 	bl	80116de <HAL_PCD_EP_Transmit>
 801cabe:	4603      	mov	r3, r0
 801cac0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cac2:	7dfb      	ldrb	r3, [r7, #23]
 801cac4:	4618      	mov	r0, r3
 801cac6:	f000 f853 	bl	801cb70 <USBD_Get_USB_Status>
 801caca:	4603      	mov	r3, r0
 801cacc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cace:	7dbb      	ldrb	r3, [r7, #22]
}
 801cad0:	4618      	mov	r0, r3
 801cad2:	3718      	adds	r7, #24
 801cad4:	46bd      	mov	sp, r7
 801cad6:	bd80      	pop	{r7, pc}

0801cad8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cad8:	b580      	push	{r7, lr}
 801cada:	b086      	sub	sp, #24
 801cadc:	af00      	add	r7, sp, #0
 801cade:	60f8      	str	r0, [r7, #12]
 801cae0:	607a      	str	r2, [r7, #4]
 801cae2:	603b      	str	r3, [r7, #0]
 801cae4:	460b      	mov	r3, r1
 801cae6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cae8:	2300      	movs	r3, #0
 801caea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801caec:	2300      	movs	r3, #0
 801caee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801caf6:	7af9      	ldrb	r1, [r7, #11]
 801caf8:	683b      	ldr	r3, [r7, #0]
 801cafa:	687a      	ldr	r2, [r7, #4]
 801cafc:	f7f4 fd8c 	bl	8011618 <HAL_PCD_EP_Receive>
 801cb00:	4603      	mov	r3, r0
 801cb02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb04:	7dfb      	ldrb	r3, [r7, #23]
 801cb06:	4618      	mov	r0, r3
 801cb08:	f000 f832 	bl	801cb70 <USBD_Get_USB_Status>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cb10:	7dbb      	ldrb	r3, [r7, #22]
}
 801cb12:	4618      	mov	r0, r3
 801cb14:	3718      	adds	r7, #24
 801cb16:	46bd      	mov	sp, r7
 801cb18:	bd80      	pop	{r7, pc}

0801cb1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cb1a:	b580      	push	{r7, lr}
 801cb1c:	b082      	sub	sp, #8
 801cb1e:	af00      	add	r7, sp, #0
 801cb20:	6078      	str	r0, [r7, #4]
 801cb22:	460b      	mov	r3, r1
 801cb24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cb2c:	78fa      	ldrb	r2, [r7, #3]
 801cb2e:	4611      	mov	r1, r2
 801cb30:	4618      	mov	r0, r3
 801cb32:	f7f4 fdbc 	bl	80116ae <HAL_PCD_EP_GetRxCount>
 801cb36:	4603      	mov	r3, r0
}
 801cb38:	4618      	mov	r0, r3
 801cb3a:	3708      	adds	r7, #8
 801cb3c:	46bd      	mov	sp, r7
 801cb3e:	bd80      	pop	{r7, pc}

0801cb40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cb40:	b480      	push	{r7}
 801cb42:	b083      	sub	sp, #12
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cb48:	4b03      	ldr	r3, [pc, #12]	; (801cb58 <USBD_static_malloc+0x18>)
}
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	370c      	adds	r7, #12
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb54:	4770      	bx	lr
 801cb56:	bf00      	nop
 801cb58:	24003534 	.word	0x24003534

0801cb5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cb5c:	b480      	push	{r7}
 801cb5e:	b083      	sub	sp, #12
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]

}
 801cb64:	bf00      	nop
 801cb66:	370c      	adds	r7, #12
 801cb68:	46bd      	mov	sp, r7
 801cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb6e:	4770      	bx	lr

0801cb70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cb70:	b480      	push	{r7}
 801cb72:	b085      	sub	sp, #20
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	4603      	mov	r3, r0
 801cb78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801cb7e:	79fb      	ldrb	r3, [r7, #7]
 801cb80:	2b03      	cmp	r3, #3
 801cb82:	d817      	bhi.n	801cbb4 <USBD_Get_USB_Status+0x44>
 801cb84:	a201      	add	r2, pc, #4	; (adr r2, 801cb8c <USBD_Get_USB_Status+0x1c>)
 801cb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb8a:	bf00      	nop
 801cb8c:	0801cb9d 	.word	0x0801cb9d
 801cb90:	0801cba3 	.word	0x0801cba3
 801cb94:	0801cba9 	.word	0x0801cba9
 801cb98:	0801cbaf 	.word	0x0801cbaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801cb9c:	2300      	movs	r3, #0
 801cb9e:	73fb      	strb	r3, [r7, #15]
    break;
 801cba0:	e00b      	b.n	801cbba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801cba2:	2303      	movs	r3, #3
 801cba4:	73fb      	strb	r3, [r7, #15]
    break;
 801cba6:	e008      	b.n	801cbba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801cba8:	2301      	movs	r3, #1
 801cbaa:	73fb      	strb	r3, [r7, #15]
    break;
 801cbac:	e005      	b.n	801cbba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801cbae:	2303      	movs	r3, #3
 801cbb0:	73fb      	strb	r3, [r7, #15]
    break;
 801cbb2:	e002      	b.n	801cbba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801cbb4:	2303      	movs	r3, #3
 801cbb6:	73fb      	strb	r3, [r7, #15]
    break;
 801cbb8:	bf00      	nop
  }
  return usb_status;
 801cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbbc:	4618      	mov	r0, r3
 801cbbe:	3714      	adds	r7, #20
 801cbc0:	46bd      	mov	sp, r7
 801cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc6:	4770      	bx	lr

0801cbc8 <_ZdlPvj>:
 801cbc8:	f000 b817 	b.w	801cbfa <_ZdlPv>

0801cbcc <_Znwj>:
 801cbcc:	2801      	cmp	r0, #1
 801cbce:	bf38      	it	cc
 801cbd0:	2001      	movcc	r0, #1
 801cbd2:	b510      	push	{r4, lr}
 801cbd4:	4604      	mov	r4, r0
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	f000 f87c 	bl	801ccd4 <malloc>
 801cbdc:	b930      	cbnz	r0, 801cbec <_Znwj+0x20>
 801cbde:	f000 f80f 	bl	801cc00 <_ZSt15get_new_handlerv>
 801cbe2:	b908      	cbnz	r0, 801cbe8 <_Znwj+0x1c>
 801cbe4:	f000 f814 	bl	801cc10 <abort>
 801cbe8:	4780      	blx	r0
 801cbea:	e7f4      	b.n	801cbd6 <_Znwj+0xa>
 801cbec:	bd10      	pop	{r4, pc}

0801cbee <_ZSt17__throw_bad_allocv>:
 801cbee:	b508      	push	{r3, lr}
 801cbf0:	f000 f80e 	bl	801cc10 <abort>

0801cbf4 <_ZSt20__throw_length_errorPKc>:
 801cbf4:	b508      	push	{r3, lr}
 801cbf6:	f000 f80b 	bl	801cc10 <abort>

0801cbfa <_ZdlPv>:
 801cbfa:	f000 b873 	b.w	801cce4 <free>
	...

0801cc00 <_ZSt15get_new_handlerv>:
 801cc00:	4b02      	ldr	r3, [pc, #8]	; (801cc0c <_ZSt15get_new_handlerv+0xc>)
 801cc02:	6818      	ldr	r0, [r3, #0]
 801cc04:	f3bf 8f5b 	dmb	ish
 801cc08:	4770      	bx	lr
 801cc0a:	bf00      	nop
 801cc0c:	24003754 	.word	0x24003754

0801cc10 <abort>:
 801cc10:	b508      	push	{r3, lr}
 801cc12:	2006      	movs	r0, #6
 801cc14:	f000 fca4 	bl	801d560 <raise>
 801cc18:	2001      	movs	r0, #1
 801cc1a:	f7ee fac5 	bl	800b1a8 <_exit>
	...

0801cc20 <__assert_func>:
 801cc20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cc22:	4614      	mov	r4, r2
 801cc24:	461a      	mov	r2, r3
 801cc26:	4b09      	ldr	r3, [pc, #36]	; (801cc4c <__assert_func+0x2c>)
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	4605      	mov	r5, r0
 801cc2c:	68d8      	ldr	r0, [r3, #12]
 801cc2e:	b14c      	cbz	r4, 801cc44 <__assert_func+0x24>
 801cc30:	4b07      	ldr	r3, [pc, #28]	; (801cc50 <__assert_func+0x30>)
 801cc32:	9100      	str	r1, [sp, #0]
 801cc34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cc38:	4906      	ldr	r1, [pc, #24]	; (801cc54 <__assert_func+0x34>)
 801cc3a:	462b      	mov	r3, r5
 801cc3c:	f000 f814 	bl	801cc68 <fiprintf>
 801cc40:	f7ff ffe6 	bl	801cc10 <abort>
 801cc44:	4b04      	ldr	r3, [pc, #16]	; (801cc58 <__assert_func+0x38>)
 801cc46:	461c      	mov	r4, r3
 801cc48:	e7f3      	b.n	801cc32 <__assert_func+0x12>
 801cc4a:	bf00      	nop
 801cc4c:	24000100 	.word	0x24000100
 801cc50:	08038b04 	.word	0x08038b04
 801cc54:	08038b11 	.word	0x08038b11
 801cc58:	08038b3f 	.word	0x08038b3f

0801cc5c <__errno>:
 801cc5c:	4b01      	ldr	r3, [pc, #4]	; (801cc64 <__errno+0x8>)
 801cc5e:	6818      	ldr	r0, [r3, #0]
 801cc60:	4770      	bx	lr
 801cc62:	bf00      	nop
 801cc64:	24000100 	.word	0x24000100

0801cc68 <fiprintf>:
 801cc68:	b40e      	push	{r1, r2, r3}
 801cc6a:	b503      	push	{r0, r1, lr}
 801cc6c:	4601      	mov	r1, r0
 801cc6e:	ab03      	add	r3, sp, #12
 801cc70:	4805      	ldr	r0, [pc, #20]	; (801cc88 <fiprintf+0x20>)
 801cc72:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc76:	6800      	ldr	r0, [r0, #0]
 801cc78:	9301      	str	r3, [sp, #4]
 801cc7a:	f000 f975 	bl	801cf68 <_vfiprintf_r>
 801cc7e:	b002      	add	sp, #8
 801cc80:	f85d eb04 	ldr.w	lr, [sp], #4
 801cc84:	b003      	add	sp, #12
 801cc86:	4770      	bx	lr
 801cc88:	24000100 	.word	0x24000100

0801cc8c <__libc_init_array>:
 801cc8c:	b570      	push	{r4, r5, r6, lr}
 801cc8e:	4d0d      	ldr	r5, [pc, #52]	; (801ccc4 <__libc_init_array+0x38>)
 801cc90:	4c0d      	ldr	r4, [pc, #52]	; (801ccc8 <__libc_init_array+0x3c>)
 801cc92:	1b64      	subs	r4, r4, r5
 801cc94:	10a4      	asrs	r4, r4, #2
 801cc96:	2600      	movs	r6, #0
 801cc98:	42a6      	cmp	r6, r4
 801cc9a:	d109      	bne.n	801ccb0 <__libc_init_array+0x24>
 801cc9c:	4d0b      	ldr	r5, [pc, #44]	; (801cccc <__libc_init_array+0x40>)
 801cc9e:	4c0c      	ldr	r4, [pc, #48]	; (801ccd0 <__libc_init_array+0x44>)
 801cca0:	f001 f812 	bl	801dcc8 <_init>
 801cca4:	1b64      	subs	r4, r4, r5
 801cca6:	10a4      	asrs	r4, r4, #2
 801cca8:	2600      	movs	r6, #0
 801ccaa:	42a6      	cmp	r6, r4
 801ccac:	d105      	bne.n	801ccba <__libc_init_array+0x2e>
 801ccae:	bd70      	pop	{r4, r5, r6, pc}
 801ccb0:	f855 3b04 	ldr.w	r3, [r5], #4
 801ccb4:	4798      	blx	r3
 801ccb6:	3601      	adds	r6, #1
 801ccb8:	e7ee      	b.n	801cc98 <__libc_init_array+0xc>
 801ccba:	f855 3b04 	ldr.w	r3, [r5], #4
 801ccbe:	4798      	blx	r3
 801ccc0:	3601      	adds	r6, #1
 801ccc2:	e7f2      	b.n	801ccaa <__libc_init_array+0x1e>
 801ccc4:	08038be0 	.word	0x08038be0
 801ccc8:	08038be0 	.word	0x08038be0
 801cccc:	08038be0 	.word	0x08038be0
 801ccd0:	08038be8 	.word	0x08038be8

0801ccd4 <malloc>:
 801ccd4:	4b02      	ldr	r3, [pc, #8]	; (801cce0 <malloc+0xc>)
 801ccd6:	4601      	mov	r1, r0
 801ccd8:	6818      	ldr	r0, [r3, #0]
 801ccda:	f000 b8a7 	b.w	801ce2c <_malloc_r>
 801ccde:	bf00      	nop
 801cce0:	24000100 	.word	0x24000100

0801cce4 <free>:
 801cce4:	4b02      	ldr	r3, [pc, #8]	; (801ccf0 <free+0xc>)
 801cce6:	4601      	mov	r1, r0
 801cce8:	6818      	ldr	r0, [r3, #0]
 801ccea:	f000 b833 	b.w	801cd54 <_free_r>
 801ccee:	bf00      	nop
 801ccf0:	24000100 	.word	0x24000100

0801ccf4 <memcpy>:
 801ccf4:	440a      	add	r2, r1
 801ccf6:	4291      	cmp	r1, r2
 801ccf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ccfc:	d100      	bne.n	801cd00 <memcpy+0xc>
 801ccfe:	4770      	bx	lr
 801cd00:	b510      	push	{r4, lr}
 801cd02:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cd06:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cd0a:	4291      	cmp	r1, r2
 801cd0c:	d1f9      	bne.n	801cd02 <memcpy+0xe>
 801cd0e:	bd10      	pop	{r4, pc}

0801cd10 <memmove>:
 801cd10:	4288      	cmp	r0, r1
 801cd12:	b510      	push	{r4, lr}
 801cd14:	eb01 0402 	add.w	r4, r1, r2
 801cd18:	d902      	bls.n	801cd20 <memmove+0x10>
 801cd1a:	4284      	cmp	r4, r0
 801cd1c:	4623      	mov	r3, r4
 801cd1e:	d807      	bhi.n	801cd30 <memmove+0x20>
 801cd20:	1e43      	subs	r3, r0, #1
 801cd22:	42a1      	cmp	r1, r4
 801cd24:	d008      	beq.n	801cd38 <memmove+0x28>
 801cd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cd2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cd2e:	e7f8      	b.n	801cd22 <memmove+0x12>
 801cd30:	4402      	add	r2, r0
 801cd32:	4601      	mov	r1, r0
 801cd34:	428a      	cmp	r2, r1
 801cd36:	d100      	bne.n	801cd3a <memmove+0x2a>
 801cd38:	bd10      	pop	{r4, pc}
 801cd3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cd3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cd42:	e7f7      	b.n	801cd34 <memmove+0x24>

0801cd44 <memset>:
 801cd44:	4402      	add	r2, r0
 801cd46:	4603      	mov	r3, r0
 801cd48:	4293      	cmp	r3, r2
 801cd4a:	d100      	bne.n	801cd4e <memset+0xa>
 801cd4c:	4770      	bx	lr
 801cd4e:	f803 1b01 	strb.w	r1, [r3], #1
 801cd52:	e7f9      	b.n	801cd48 <memset+0x4>

0801cd54 <_free_r>:
 801cd54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cd56:	2900      	cmp	r1, #0
 801cd58:	d044      	beq.n	801cde4 <_free_r+0x90>
 801cd5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cd5e:	9001      	str	r0, [sp, #4]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	f1a1 0404 	sub.w	r4, r1, #4
 801cd66:	bfb8      	it	lt
 801cd68:	18e4      	addlt	r4, r4, r3
 801cd6a:	f000 fef5 	bl	801db58 <__malloc_lock>
 801cd6e:	4a1e      	ldr	r2, [pc, #120]	; (801cde8 <_free_r+0x94>)
 801cd70:	9801      	ldr	r0, [sp, #4]
 801cd72:	6813      	ldr	r3, [r2, #0]
 801cd74:	b933      	cbnz	r3, 801cd84 <_free_r+0x30>
 801cd76:	6063      	str	r3, [r4, #4]
 801cd78:	6014      	str	r4, [r2, #0]
 801cd7a:	b003      	add	sp, #12
 801cd7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd80:	f000 bef0 	b.w	801db64 <__malloc_unlock>
 801cd84:	42a3      	cmp	r3, r4
 801cd86:	d908      	bls.n	801cd9a <_free_r+0x46>
 801cd88:	6825      	ldr	r5, [r4, #0]
 801cd8a:	1961      	adds	r1, r4, r5
 801cd8c:	428b      	cmp	r3, r1
 801cd8e:	bf01      	itttt	eq
 801cd90:	6819      	ldreq	r1, [r3, #0]
 801cd92:	685b      	ldreq	r3, [r3, #4]
 801cd94:	1949      	addeq	r1, r1, r5
 801cd96:	6021      	streq	r1, [r4, #0]
 801cd98:	e7ed      	b.n	801cd76 <_free_r+0x22>
 801cd9a:	461a      	mov	r2, r3
 801cd9c:	685b      	ldr	r3, [r3, #4]
 801cd9e:	b10b      	cbz	r3, 801cda4 <_free_r+0x50>
 801cda0:	42a3      	cmp	r3, r4
 801cda2:	d9fa      	bls.n	801cd9a <_free_r+0x46>
 801cda4:	6811      	ldr	r1, [r2, #0]
 801cda6:	1855      	adds	r5, r2, r1
 801cda8:	42a5      	cmp	r5, r4
 801cdaa:	d10b      	bne.n	801cdc4 <_free_r+0x70>
 801cdac:	6824      	ldr	r4, [r4, #0]
 801cdae:	4421      	add	r1, r4
 801cdb0:	1854      	adds	r4, r2, r1
 801cdb2:	42a3      	cmp	r3, r4
 801cdb4:	6011      	str	r1, [r2, #0]
 801cdb6:	d1e0      	bne.n	801cd7a <_free_r+0x26>
 801cdb8:	681c      	ldr	r4, [r3, #0]
 801cdba:	685b      	ldr	r3, [r3, #4]
 801cdbc:	6053      	str	r3, [r2, #4]
 801cdbe:	4421      	add	r1, r4
 801cdc0:	6011      	str	r1, [r2, #0]
 801cdc2:	e7da      	b.n	801cd7a <_free_r+0x26>
 801cdc4:	d902      	bls.n	801cdcc <_free_r+0x78>
 801cdc6:	230c      	movs	r3, #12
 801cdc8:	6003      	str	r3, [r0, #0]
 801cdca:	e7d6      	b.n	801cd7a <_free_r+0x26>
 801cdcc:	6825      	ldr	r5, [r4, #0]
 801cdce:	1961      	adds	r1, r4, r5
 801cdd0:	428b      	cmp	r3, r1
 801cdd2:	bf04      	itt	eq
 801cdd4:	6819      	ldreq	r1, [r3, #0]
 801cdd6:	685b      	ldreq	r3, [r3, #4]
 801cdd8:	6063      	str	r3, [r4, #4]
 801cdda:	bf04      	itt	eq
 801cddc:	1949      	addeq	r1, r1, r5
 801cdde:	6021      	streq	r1, [r4, #0]
 801cde0:	6054      	str	r4, [r2, #4]
 801cde2:	e7ca      	b.n	801cd7a <_free_r+0x26>
 801cde4:	b003      	add	sp, #12
 801cde6:	bd30      	pop	{r4, r5, pc}
 801cde8:	24003758 	.word	0x24003758

0801cdec <sbrk_aligned>:
 801cdec:	b570      	push	{r4, r5, r6, lr}
 801cdee:	4e0e      	ldr	r6, [pc, #56]	; (801ce28 <sbrk_aligned+0x3c>)
 801cdf0:	460c      	mov	r4, r1
 801cdf2:	6831      	ldr	r1, [r6, #0]
 801cdf4:	4605      	mov	r5, r0
 801cdf6:	b911      	cbnz	r1, 801cdfe <sbrk_aligned+0x12>
 801cdf8:	f000 fb7a 	bl	801d4f0 <_sbrk_r>
 801cdfc:	6030      	str	r0, [r6, #0]
 801cdfe:	4621      	mov	r1, r4
 801ce00:	4628      	mov	r0, r5
 801ce02:	f000 fb75 	bl	801d4f0 <_sbrk_r>
 801ce06:	1c43      	adds	r3, r0, #1
 801ce08:	d00a      	beq.n	801ce20 <sbrk_aligned+0x34>
 801ce0a:	1cc4      	adds	r4, r0, #3
 801ce0c:	f024 0403 	bic.w	r4, r4, #3
 801ce10:	42a0      	cmp	r0, r4
 801ce12:	d007      	beq.n	801ce24 <sbrk_aligned+0x38>
 801ce14:	1a21      	subs	r1, r4, r0
 801ce16:	4628      	mov	r0, r5
 801ce18:	f000 fb6a 	bl	801d4f0 <_sbrk_r>
 801ce1c:	3001      	adds	r0, #1
 801ce1e:	d101      	bne.n	801ce24 <sbrk_aligned+0x38>
 801ce20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ce24:	4620      	mov	r0, r4
 801ce26:	bd70      	pop	{r4, r5, r6, pc}
 801ce28:	2400375c 	.word	0x2400375c

0801ce2c <_malloc_r>:
 801ce2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce30:	1ccd      	adds	r5, r1, #3
 801ce32:	f025 0503 	bic.w	r5, r5, #3
 801ce36:	3508      	adds	r5, #8
 801ce38:	2d0c      	cmp	r5, #12
 801ce3a:	bf38      	it	cc
 801ce3c:	250c      	movcc	r5, #12
 801ce3e:	2d00      	cmp	r5, #0
 801ce40:	4607      	mov	r7, r0
 801ce42:	db01      	blt.n	801ce48 <_malloc_r+0x1c>
 801ce44:	42a9      	cmp	r1, r5
 801ce46:	d905      	bls.n	801ce54 <_malloc_r+0x28>
 801ce48:	230c      	movs	r3, #12
 801ce4a:	603b      	str	r3, [r7, #0]
 801ce4c:	2600      	movs	r6, #0
 801ce4e:	4630      	mov	r0, r6
 801ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce54:	4e2e      	ldr	r6, [pc, #184]	; (801cf10 <_malloc_r+0xe4>)
 801ce56:	f000 fe7f 	bl	801db58 <__malloc_lock>
 801ce5a:	6833      	ldr	r3, [r6, #0]
 801ce5c:	461c      	mov	r4, r3
 801ce5e:	bb34      	cbnz	r4, 801ceae <_malloc_r+0x82>
 801ce60:	4629      	mov	r1, r5
 801ce62:	4638      	mov	r0, r7
 801ce64:	f7ff ffc2 	bl	801cdec <sbrk_aligned>
 801ce68:	1c43      	adds	r3, r0, #1
 801ce6a:	4604      	mov	r4, r0
 801ce6c:	d14d      	bne.n	801cf0a <_malloc_r+0xde>
 801ce6e:	6834      	ldr	r4, [r6, #0]
 801ce70:	4626      	mov	r6, r4
 801ce72:	2e00      	cmp	r6, #0
 801ce74:	d140      	bne.n	801cef8 <_malloc_r+0xcc>
 801ce76:	6823      	ldr	r3, [r4, #0]
 801ce78:	4631      	mov	r1, r6
 801ce7a:	4638      	mov	r0, r7
 801ce7c:	eb04 0803 	add.w	r8, r4, r3
 801ce80:	f000 fb36 	bl	801d4f0 <_sbrk_r>
 801ce84:	4580      	cmp	r8, r0
 801ce86:	d13a      	bne.n	801cefe <_malloc_r+0xd2>
 801ce88:	6821      	ldr	r1, [r4, #0]
 801ce8a:	3503      	adds	r5, #3
 801ce8c:	1a6d      	subs	r5, r5, r1
 801ce8e:	f025 0503 	bic.w	r5, r5, #3
 801ce92:	3508      	adds	r5, #8
 801ce94:	2d0c      	cmp	r5, #12
 801ce96:	bf38      	it	cc
 801ce98:	250c      	movcc	r5, #12
 801ce9a:	4629      	mov	r1, r5
 801ce9c:	4638      	mov	r0, r7
 801ce9e:	f7ff ffa5 	bl	801cdec <sbrk_aligned>
 801cea2:	3001      	adds	r0, #1
 801cea4:	d02b      	beq.n	801cefe <_malloc_r+0xd2>
 801cea6:	6823      	ldr	r3, [r4, #0]
 801cea8:	442b      	add	r3, r5
 801ceaa:	6023      	str	r3, [r4, #0]
 801ceac:	e00e      	b.n	801cecc <_malloc_r+0xa0>
 801ceae:	6822      	ldr	r2, [r4, #0]
 801ceb0:	1b52      	subs	r2, r2, r5
 801ceb2:	d41e      	bmi.n	801cef2 <_malloc_r+0xc6>
 801ceb4:	2a0b      	cmp	r2, #11
 801ceb6:	d916      	bls.n	801cee6 <_malloc_r+0xba>
 801ceb8:	1961      	adds	r1, r4, r5
 801ceba:	42a3      	cmp	r3, r4
 801cebc:	6025      	str	r5, [r4, #0]
 801cebe:	bf18      	it	ne
 801cec0:	6059      	strne	r1, [r3, #4]
 801cec2:	6863      	ldr	r3, [r4, #4]
 801cec4:	bf08      	it	eq
 801cec6:	6031      	streq	r1, [r6, #0]
 801cec8:	5162      	str	r2, [r4, r5]
 801ceca:	604b      	str	r3, [r1, #4]
 801cecc:	4638      	mov	r0, r7
 801cece:	f104 060b 	add.w	r6, r4, #11
 801ced2:	f000 fe47 	bl	801db64 <__malloc_unlock>
 801ced6:	f026 0607 	bic.w	r6, r6, #7
 801ceda:	1d23      	adds	r3, r4, #4
 801cedc:	1af2      	subs	r2, r6, r3
 801cede:	d0b6      	beq.n	801ce4e <_malloc_r+0x22>
 801cee0:	1b9b      	subs	r3, r3, r6
 801cee2:	50a3      	str	r3, [r4, r2]
 801cee4:	e7b3      	b.n	801ce4e <_malloc_r+0x22>
 801cee6:	6862      	ldr	r2, [r4, #4]
 801cee8:	42a3      	cmp	r3, r4
 801ceea:	bf0c      	ite	eq
 801ceec:	6032      	streq	r2, [r6, #0]
 801ceee:	605a      	strne	r2, [r3, #4]
 801cef0:	e7ec      	b.n	801cecc <_malloc_r+0xa0>
 801cef2:	4623      	mov	r3, r4
 801cef4:	6864      	ldr	r4, [r4, #4]
 801cef6:	e7b2      	b.n	801ce5e <_malloc_r+0x32>
 801cef8:	4634      	mov	r4, r6
 801cefa:	6876      	ldr	r6, [r6, #4]
 801cefc:	e7b9      	b.n	801ce72 <_malloc_r+0x46>
 801cefe:	230c      	movs	r3, #12
 801cf00:	603b      	str	r3, [r7, #0]
 801cf02:	4638      	mov	r0, r7
 801cf04:	f000 fe2e 	bl	801db64 <__malloc_unlock>
 801cf08:	e7a1      	b.n	801ce4e <_malloc_r+0x22>
 801cf0a:	6025      	str	r5, [r4, #0]
 801cf0c:	e7de      	b.n	801cecc <_malloc_r+0xa0>
 801cf0e:	bf00      	nop
 801cf10:	24003758 	.word	0x24003758

0801cf14 <__sfputc_r>:
 801cf14:	6893      	ldr	r3, [r2, #8]
 801cf16:	3b01      	subs	r3, #1
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	b410      	push	{r4}
 801cf1c:	6093      	str	r3, [r2, #8]
 801cf1e:	da08      	bge.n	801cf32 <__sfputc_r+0x1e>
 801cf20:	6994      	ldr	r4, [r2, #24]
 801cf22:	42a3      	cmp	r3, r4
 801cf24:	db01      	blt.n	801cf2a <__sfputc_r+0x16>
 801cf26:	290a      	cmp	r1, #10
 801cf28:	d103      	bne.n	801cf32 <__sfputc_r+0x1e>
 801cf2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf2e:	f000 bb33 	b.w	801d598 <__swbuf_r>
 801cf32:	6813      	ldr	r3, [r2, #0]
 801cf34:	1c58      	adds	r0, r3, #1
 801cf36:	6010      	str	r0, [r2, #0]
 801cf38:	7019      	strb	r1, [r3, #0]
 801cf3a:	4608      	mov	r0, r1
 801cf3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf40:	4770      	bx	lr

0801cf42 <__sfputs_r>:
 801cf42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf44:	4606      	mov	r6, r0
 801cf46:	460f      	mov	r7, r1
 801cf48:	4614      	mov	r4, r2
 801cf4a:	18d5      	adds	r5, r2, r3
 801cf4c:	42ac      	cmp	r4, r5
 801cf4e:	d101      	bne.n	801cf54 <__sfputs_r+0x12>
 801cf50:	2000      	movs	r0, #0
 801cf52:	e007      	b.n	801cf64 <__sfputs_r+0x22>
 801cf54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf58:	463a      	mov	r2, r7
 801cf5a:	4630      	mov	r0, r6
 801cf5c:	f7ff ffda 	bl	801cf14 <__sfputc_r>
 801cf60:	1c43      	adds	r3, r0, #1
 801cf62:	d1f3      	bne.n	801cf4c <__sfputs_r+0xa>
 801cf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cf68 <_vfiprintf_r>:
 801cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf6c:	460d      	mov	r5, r1
 801cf6e:	b09d      	sub	sp, #116	; 0x74
 801cf70:	4614      	mov	r4, r2
 801cf72:	4698      	mov	r8, r3
 801cf74:	4606      	mov	r6, r0
 801cf76:	b118      	cbz	r0, 801cf80 <_vfiprintf_r+0x18>
 801cf78:	6983      	ldr	r3, [r0, #24]
 801cf7a:	b90b      	cbnz	r3, 801cf80 <_vfiprintf_r+0x18>
 801cf7c:	f000 fce6 	bl	801d94c <__sinit>
 801cf80:	4b89      	ldr	r3, [pc, #548]	; (801d1a8 <_vfiprintf_r+0x240>)
 801cf82:	429d      	cmp	r5, r3
 801cf84:	d11b      	bne.n	801cfbe <_vfiprintf_r+0x56>
 801cf86:	6875      	ldr	r5, [r6, #4]
 801cf88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf8a:	07d9      	lsls	r1, r3, #31
 801cf8c:	d405      	bmi.n	801cf9a <_vfiprintf_r+0x32>
 801cf8e:	89ab      	ldrh	r3, [r5, #12]
 801cf90:	059a      	lsls	r2, r3, #22
 801cf92:	d402      	bmi.n	801cf9a <_vfiprintf_r+0x32>
 801cf94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf96:	f000 fd77 	bl	801da88 <__retarget_lock_acquire_recursive>
 801cf9a:	89ab      	ldrh	r3, [r5, #12]
 801cf9c:	071b      	lsls	r3, r3, #28
 801cf9e:	d501      	bpl.n	801cfa4 <_vfiprintf_r+0x3c>
 801cfa0:	692b      	ldr	r3, [r5, #16]
 801cfa2:	b9eb      	cbnz	r3, 801cfe0 <_vfiprintf_r+0x78>
 801cfa4:	4629      	mov	r1, r5
 801cfa6:	4630      	mov	r0, r6
 801cfa8:	f000 fb48 	bl	801d63c <__swsetup_r>
 801cfac:	b1c0      	cbz	r0, 801cfe0 <_vfiprintf_r+0x78>
 801cfae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cfb0:	07dc      	lsls	r4, r3, #31
 801cfb2:	d50e      	bpl.n	801cfd2 <_vfiprintf_r+0x6a>
 801cfb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cfb8:	b01d      	add	sp, #116	; 0x74
 801cfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfbe:	4b7b      	ldr	r3, [pc, #492]	; (801d1ac <_vfiprintf_r+0x244>)
 801cfc0:	429d      	cmp	r5, r3
 801cfc2:	d101      	bne.n	801cfc8 <_vfiprintf_r+0x60>
 801cfc4:	68b5      	ldr	r5, [r6, #8]
 801cfc6:	e7df      	b.n	801cf88 <_vfiprintf_r+0x20>
 801cfc8:	4b79      	ldr	r3, [pc, #484]	; (801d1b0 <_vfiprintf_r+0x248>)
 801cfca:	429d      	cmp	r5, r3
 801cfcc:	bf08      	it	eq
 801cfce:	68f5      	ldreq	r5, [r6, #12]
 801cfd0:	e7da      	b.n	801cf88 <_vfiprintf_r+0x20>
 801cfd2:	89ab      	ldrh	r3, [r5, #12]
 801cfd4:	0598      	lsls	r0, r3, #22
 801cfd6:	d4ed      	bmi.n	801cfb4 <_vfiprintf_r+0x4c>
 801cfd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cfda:	f000 fd56 	bl	801da8a <__retarget_lock_release_recursive>
 801cfde:	e7e9      	b.n	801cfb4 <_vfiprintf_r+0x4c>
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	9309      	str	r3, [sp, #36]	; 0x24
 801cfe4:	2320      	movs	r3, #32
 801cfe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cfea:	f8cd 800c 	str.w	r8, [sp, #12]
 801cfee:	2330      	movs	r3, #48	; 0x30
 801cff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d1b4 <_vfiprintf_r+0x24c>
 801cff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cff8:	f04f 0901 	mov.w	r9, #1
 801cffc:	4623      	mov	r3, r4
 801cffe:	469a      	mov	sl, r3
 801d000:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d004:	b10a      	cbz	r2, 801d00a <_vfiprintf_r+0xa2>
 801d006:	2a25      	cmp	r2, #37	; 0x25
 801d008:	d1f9      	bne.n	801cffe <_vfiprintf_r+0x96>
 801d00a:	ebba 0b04 	subs.w	fp, sl, r4
 801d00e:	d00b      	beq.n	801d028 <_vfiprintf_r+0xc0>
 801d010:	465b      	mov	r3, fp
 801d012:	4622      	mov	r2, r4
 801d014:	4629      	mov	r1, r5
 801d016:	4630      	mov	r0, r6
 801d018:	f7ff ff93 	bl	801cf42 <__sfputs_r>
 801d01c:	3001      	adds	r0, #1
 801d01e:	f000 80aa 	beq.w	801d176 <_vfiprintf_r+0x20e>
 801d022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d024:	445a      	add	r2, fp
 801d026:	9209      	str	r2, [sp, #36]	; 0x24
 801d028:	f89a 3000 	ldrb.w	r3, [sl]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	f000 80a2 	beq.w	801d176 <_vfiprintf_r+0x20e>
 801d032:	2300      	movs	r3, #0
 801d034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d03c:	f10a 0a01 	add.w	sl, sl, #1
 801d040:	9304      	str	r3, [sp, #16]
 801d042:	9307      	str	r3, [sp, #28]
 801d044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d048:	931a      	str	r3, [sp, #104]	; 0x68
 801d04a:	4654      	mov	r4, sl
 801d04c:	2205      	movs	r2, #5
 801d04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d052:	4858      	ldr	r0, [pc, #352]	; (801d1b4 <_vfiprintf_r+0x24c>)
 801d054:	f7e3 f944 	bl	80002e0 <memchr>
 801d058:	9a04      	ldr	r2, [sp, #16]
 801d05a:	b9d8      	cbnz	r0, 801d094 <_vfiprintf_r+0x12c>
 801d05c:	06d1      	lsls	r1, r2, #27
 801d05e:	bf44      	itt	mi
 801d060:	2320      	movmi	r3, #32
 801d062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d066:	0713      	lsls	r3, r2, #28
 801d068:	bf44      	itt	mi
 801d06a:	232b      	movmi	r3, #43	; 0x2b
 801d06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d070:	f89a 3000 	ldrb.w	r3, [sl]
 801d074:	2b2a      	cmp	r3, #42	; 0x2a
 801d076:	d015      	beq.n	801d0a4 <_vfiprintf_r+0x13c>
 801d078:	9a07      	ldr	r2, [sp, #28]
 801d07a:	4654      	mov	r4, sl
 801d07c:	2000      	movs	r0, #0
 801d07e:	f04f 0c0a 	mov.w	ip, #10
 801d082:	4621      	mov	r1, r4
 801d084:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d088:	3b30      	subs	r3, #48	; 0x30
 801d08a:	2b09      	cmp	r3, #9
 801d08c:	d94e      	bls.n	801d12c <_vfiprintf_r+0x1c4>
 801d08e:	b1b0      	cbz	r0, 801d0be <_vfiprintf_r+0x156>
 801d090:	9207      	str	r2, [sp, #28]
 801d092:	e014      	b.n	801d0be <_vfiprintf_r+0x156>
 801d094:	eba0 0308 	sub.w	r3, r0, r8
 801d098:	fa09 f303 	lsl.w	r3, r9, r3
 801d09c:	4313      	orrs	r3, r2
 801d09e:	9304      	str	r3, [sp, #16]
 801d0a0:	46a2      	mov	sl, r4
 801d0a2:	e7d2      	b.n	801d04a <_vfiprintf_r+0xe2>
 801d0a4:	9b03      	ldr	r3, [sp, #12]
 801d0a6:	1d19      	adds	r1, r3, #4
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	9103      	str	r1, [sp, #12]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	bfbb      	ittet	lt
 801d0b0:	425b      	neglt	r3, r3
 801d0b2:	f042 0202 	orrlt.w	r2, r2, #2
 801d0b6:	9307      	strge	r3, [sp, #28]
 801d0b8:	9307      	strlt	r3, [sp, #28]
 801d0ba:	bfb8      	it	lt
 801d0bc:	9204      	strlt	r2, [sp, #16]
 801d0be:	7823      	ldrb	r3, [r4, #0]
 801d0c0:	2b2e      	cmp	r3, #46	; 0x2e
 801d0c2:	d10c      	bne.n	801d0de <_vfiprintf_r+0x176>
 801d0c4:	7863      	ldrb	r3, [r4, #1]
 801d0c6:	2b2a      	cmp	r3, #42	; 0x2a
 801d0c8:	d135      	bne.n	801d136 <_vfiprintf_r+0x1ce>
 801d0ca:	9b03      	ldr	r3, [sp, #12]
 801d0cc:	1d1a      	adds	r2, r3, #4
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	9203      	str	r2, [sp, #12]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	bfb8      	it	lt
 801d0d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d0da:	3402      	adds	r4, #2
 801d0dc:	9305      	str	r3, [sp, #20]
 801d0de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d1c4 <_vfiprintf_r+0x25c>
 801d0e2:	7821      	ldrb	r1, [r4, #0]
 801d0e4:	2203      	movs	r2, #3
 801d0e6:	4650      	mov	r0, sl
 801d0e8:	f7e3 f8fa 	bl	80002e0 <memchr>
 801d0ec:	b140      	cbz	r0, 801d100 <_vfiprintf_r+0x198>
 801d0ee:	2340      	movs	r3, #64	; 0x40
 801d0f0:	eba0 000a 	sub.w	r0, r0, sl
 801d0f4:	fa03 f000 	lsl.w	r0, r3, r0
 801d0f8:	9b04      	ldr	r3, [sp, #16]
 801d0fa:	4303      	orrs	r3, r0
 801d0fc:	3401      	adds	r4, #1
 801d0fe:	9304      	str	r3, [sp, #16]
 801d100:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d104:	482c      	ldr	r0, [pc, #176]	; (801d1b8 <_vfiprintf_r+0x250>)
 801d106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d10a:	2206      	movs	r2, #6
 801d10c:	f7e3 f8e8 	bl	80002e0 <memchr>
 801d110:	2800      	cmp	r0, #0
 801d112:	d03f      	beq.n	801d194 <_vfiprintf_r+0x22c>
 801d114:	4b29      	ldr	r3, [pc, #164]	; (801d1bc <_vfiprintf_r+0x254>)
 801d116:	bb1b      	cbnz	r3, 801d160 <_vfiprintf_r+0x1f8>
 801d118:	9b03      	ldr	r3, [sp, #12]
 801d11a:	3307      	adds	r3, #7
 801d11c:	f023 0307 	bic.w	r3, r3, #7
 801d120:	3308      	adds	r3, #8
 801d122:	9303      	str	r3, [sp, #12]
 801d124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d126:	443b      	add	r3, r7
 801d128:	9309      	str	r3, [sp, #36]	; 0x24
 801d12a:	e767      	b.n	801cffc <_vfiprintf_r+0x94>
 801d12c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d130:	460c      	mov	r4, r1
 801d132:	2001      	movs	r0, #1
 801d134:	e7a5      	b.n	801d082 <_vfiprintf_r+0x11a>
 801d136:	2300      	movs	r3, #0
 801d138:	3401      	adds	r4, #1
 801d13a:	9305      	str	r3, [sp, #20]
 801d13c:	4619      	mov	r1, r3
 801d13e:	f04f 0c0a 	mov.w	ip, #10
 801d142:	4620      	mov	r0, r4
 801d144:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d148:	3a30      	subs	r2, #48	; 0x30
 801d14a:	2a09      	cmp	r2, #9
 801d14c:	d903      	bls.n	801d156 <_vfiprintf_r+0x1ee>
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d0c5      	beq.n	801d0de <_vfiprintf_r+0x176>
 801d152:	9105      	str	r1, [sp, #20]
 801d154:	e7c3      	b.n	801d0de <_vfiprintf_r+0x176>
 801d156:	fb0c 2101 	mla	r1, ip, r1, r2
 801d15a:	4604      	mov	r4, r0
 801d15c:	2301      	movs	r3, #1
 801d15e:	e7f0      	b.n	801d142 <_vfiprintf_r+0x1da>
 801d160:	ab03      	add	r3, sp, #12
 801d162:	9300      	str	r3, [sp, #0]
 801d164:	462a      	mov	r2, r5
 801d166:	4b16      	ldr	r3, [pc, #88]	; (801d1c0 <_vfiprintf_r+0x258>)
 801d168:	a904      	add	r1, sp, #16
 801d16a:	4630      	mov	r0, r6
 801d16c:	f3af 8000 	nop.w
 801d170:	4607      	mov	r7, r0
 801d172:	1c78      	adds	r0, r7, #1
 801d174:	d1d6      	bne.n	801d124 <_vfiprintf_r+0x1bc>
 801d176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d178:	07d9      	lsls	r1, r3, #31
 801d17a:	d405      	bmi.n	801d188 <_vfiprintf_r+0x220>
 801d17c:	89ab      	ldrh	r3, [r5, #12]
 801d17e:	059a      	lsls	r2, r3, #22
 801d180:	d402      	bmi.n	801d188 <_vfiprintf_r+0x220>
 801d182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d184:	f000 fc81 	bl	801da8a <__retarget_lock_release_recursive>
 801d188:	89ab      	ldrh	r3, [r5, #12]
 801d18a:	065b      	lsls	r3, r3, #25
 801d18c:	f53f af12 	bmi.w	801cfb4 <_vfiprintf_r+0x4c>
 801d190:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d192:	e711      	b.n	801cfb8 <_vfiprintf_r+0x50>
 801d194:	ab03      	add	r3, sp, #12
 801d196:	9300      	str	r3, [sp, #0]
 801d198:	462a      	mov	r2, r5
 801d19a:	4b09      	ldr	r3, [pc, #36]	; (801d1c0 <_vfiprintf_r+0x258>)
 801d19c:	a904      	add	r1, sp, #16
 801d19e:	4630      	mov	r0, r6
 801d1a0:	f000 f880 	bl	801d2a4 <_printf_i>
 801d1a4:	e7e4      	b.n	801d170 <_vfiprintf_r+0x208>
 801d1a6:	bf00      	nop
 801d1a8:	08038b98 	.word	0x08038b98
 801d1ac:	08038bb8 	.word	0x08038bb8
 801d1b0:	08038b78 	.word	0x08038b78
 801d1b4:	08038b44 	.word	0x08038b44
 801d1b8:	08038b4e 	.word	0x08038b4e
 801d1bc:	00000000 	.word	0x00000000
 801d1c0:	0801cf43 	.word	0x0801cf43
 801d1c4:	08038b4a 	.word	0x08038b4a

0801d1c8 <_printf_common>:
 801d1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d1cc:	4616      	mov	r6, r2
 801d1ce:	4699      	mov	r9, r3
 801d1d0:	688a      	ldr	r2, [r1, #8]
 801d1d2:	690b      	ldr	r3, [r1, #16]
 801d1d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d1d8:	4293      	cmp	r3, r2
 801d1da:	bfb8      	it	lt
 801d1dc:	4613      	movlt	r3, r2
 801d1de:	6033      	str	r3, [r6, #0]
 801d1e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d1e4:	4607      	mov	r7, r0
 801d1e6:	460c      	mov	r4, r1
 801d1e8:	b10a      	cbz	r2, 801d1ee <_printf_common+0x26>
 801d1ea:	3301      	adds	r3, #1
 801d1ec:	6033      	str	r3, [r6, #0]
 801d1ee:	6823      	ldr	r3, [r4, #0]
 801d1f0:	0699      	lsls	r1, r3, #26
 801d1f2:	bf42      	ittt	mi
 801d1f4:	6833      	ldrmi	r3, [r6, #0]
 801d1f6:	3302      	addmi	r3, #2
 801d1f8:	6033      	strmi	r3, [r6, #0]
 801d1fa:	6825      	ldr	r5, [r4, #0]
 801d1fc:	f015 0506 	ands.w	r5, r5, #6
 801d200:	d106      	bne.n	801d210 <_printf_common+0x48>
 801d202:	f104 0a19 	add.w	sl, r4, #25
 801d206:	68e3      	ldr	r3, [r4, #12]
 801d208:	6832      	ldr	r2, [r6, #0]
 801d20a:	1a9b      	subs	r3, r3, r2
 801d20c:	42ab      	cmp	r3, r5
 801d20e:	dc26      	bgt.n	801d25e <_printf_common+0x96>
 801d210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d214:	1e13      	subs	r3, r2, #0
 801d216:	6822      	ldr	r2, [r4, #0]
 801d218:	bf18      	it	ne
 801d21a:	2301      	movne	r3, #1
 801d21c:	0692      	lsls	r2, r2, #26
 801d21e:	d42b      	bmi.n	801d278 <_printf_common+0xb0>
 801d220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d224:	4649      	mov	r1, r9
 801d226:	4638      	mov	r0, r7
 801d228:	47c0      	blx	r8
 801d22a:	3001      	adds	r0, #1
 801d22c:	d01e      	beq.n	801d26c <_printf_common+0xa4>
 801d22e:	6823      	ldr	r3, [r4, #0]
 801d230:	68e5      	ldr	r5, [r4, #12]
 801d232:	6832      	ldr	r2, [r6, #0]
 801d234:	f003 0306 	and.w	r3, r3, #6
 801d238:	2b04      	cmp	r3, #4
 801d23a:	bf08      	it	eq
 801d23c:	1aad      	subeq	r5, r5, r2
 801d23e:	68a3      	ldr	r3, [r4, #8]
 801d240:	6922      	ldr	r2, [r4, #16]
 801d242:	bf0c      	ite	eq
 801d244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d248:	2500      	movne	r5, #0
 801d24a:	4293      	cmp	r3, r2
 801d24c:	bfc4      	itt	gt
 801d24e:	1a9b      	subgt	r3, r3, r2
 801d250:	18ed      	addgt	r5, r5, r3
 801d252:	2600      	movs	r6, #0
 801d254:	341a      	adds	r4, #26
 801d256:	42b5      	cmp	r5, r6
 801d258:	d11a      	bne.n	801d290 <_printf_common+0xc8>
 801d25a:	2000      	movs	r0, #0
 801d25c:	e008      	b.n	801d270 <_printf_common+0xa8>
 801d25e:	2301      	movs	r3, #1
 801d260:	4652      	mov	r2, sl
 801d262:	4649      	mov	r1, r9
 801d264:	4638      	mov	r0, r7
 801d266:	47c0      	blx	r8
 801d268:	3001      	adds	r0, #1
 801d26a:	d103      	bne.n	801d274 <_printf_common+0xac>
 801d26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d274:	3501      	adds	r5, #1
 801d276:	e7c6      	b.n	801d206 <_printf_common+0x3e>
 801d278:	18e1      	adds	r1, r4, r3
 801d27a:	1c5a      	adds	r2, r3, #1
 801d27c:	2030      	movs	r0, #48	; 0x30
 801d27e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d282:	4422      	add	r2, r4
 801d284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d28c:	3302      	adds	r3, #2
 801d28e:	e7c7      	b.n	801d220 <_printf_common+0x58>
 801d290:	2301      	movs	r3, #1
 801d292:	4622      	mov	r2, r4
 801d294:	4649      	mov	r1, r9
 801d296:	4638      	mov	r0, r7
 801d298:	47c0      	blx	r8
 801d29a:	3001      	adds	r0, #1
 801d29c:	d0e6      	beq.n	801d26c <_printf_common+0xa4>
 801d29e:	3601      	adds	r6, #1
 801d2a0:	e7d9      	b.n	801d256 <_printf_common+0x8e>
	...

0801d2a4 <_printf_i>:
 801d2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d2a8:	7e0f      	ldrb	r7, [r1, #24]
 801d2aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d2ac:	2f78      	cmp	r7, #120	; 0x78
 801d2ae:	4691      	mov	r9, r2
 801d2b0:	4680      	mov	r8, r0
 801d2b2:	460c      	mov	r4, r1
 801d2b4:	469a      	mov	sl, r3
 801d2b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d2ba:	d807      	bhi.n	801d2cc <_printf_i+0x28>
 801d2bc:	2f62      	cmp	r7, #98	; 0x62
 801d2be:	d80a      	bhi.n	801d2d6 <_printf_i+0x32>
 801d2c0:	2f00      	cmp	r7, #0
 801d2c2:	f000 80d8 	beq.w	801d476 <_printf_i+0x1d2>
 801d2c6:	2f58      	cmp	r7, #88	; 0x58
 801d2c8:	f000 80a3 	beq.w	801d412 <_printf_i+0x16e>
 801d2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d2d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d2d4:	e03a      	b.n	801d34c <_printf_i+0xa8>
 801d2d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d2da:	2b15      	cmp	r3, #21
 801d2dc:	d8f6      	bhi.n	801d2cc <_printf_i+0x28>
 801d2de:	a101      	add	r1, pc, #4	; (adr r1, 801d2e4 <_printf_i+0x40>)
 801d2e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d2e4:	0801d33d 	.word	0x0801d33d
 801d2e8:	0801d351 	.word	0x0801d351
 801d2ec:	0801d2cd 	.word	0x0801d2cd
 801d2f0:	0801d2cd 	.word	0x0801d2cd
 801d2f4:	0801d2cd 	.word	0x0801d2cd
 801d2f8:	0801d2cd 	.word	0x0801d2cd
 801d2fc:	0801d351 	.word	0x0801d351
 801d300:	0801d2cd 	.word	0x0801d2cd
 801d304:	0801d2cd 	.word	0x0801d2cd
 801d308:	0801d2cd 	.word	0x0801d2cd
 801d30c:	0801d2cd 	.word	0x0801d2cd
 801d310:	0801d45d 	.word	0x0801d45d
 801d314:	0801d381 	.word	0x0801d381
 801d318:	0801d43f 	.word	0x0801d43f
 801d31c:	0801d2cd 	.word	0x0801d2cd
 801d320:	0801d2cd 	.word	0x0801d2cd
 801d324:	0801d47f 	.word	0x0801d47f
 801d328:	0801d2cd 	.word	0x0801d2cd
 801d32c:	0801d381 	.word	0x0801d381
 801d330:	0801d2cd 	.word	0x0801d2cd
 801d334:	0801d2cd 	.word	0x0801d2cd
 801d338:	0801d447 	.word	0x0801d447
 801d33c:	682b      	ldr	r3, [r5, #0]
 801d33e:	1d1a      	adds	r2, r3, #4
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	602a      	str	r2, [r5, #0]
 801d344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d34c:	2301      	movs	r3, #1
 801d34e:	e0a3      	b.n	801d498 <_printf_i+0x1f4>
 801d350:	6820      	ldr	r0, [r4, #0]
 801d352:	6829      	ldr	r1, [r5, #0]
 801d354:	0606      	lsls	r6, r0, #24
 801d356:	f101 0304 	add.w	r3, r1, #4
 801d35a:	d50a      	bpl.n	801d372 <_printf_i+0xce>
 801d35c:	680e      	ldr	r6, [r1, #0]
 801d35e:	602b      	str	r3, [r5, #0]
 801d360:	2e00      	cmp	r6, #0
 801d362:	da03      	bge.n	801d36c <_printf_i+0xc8>
 801d364:	232d      	movs	r3, #45	; 0x2d
 801d366:	4276      	negs	r6, r6
 801d368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d36c:	485e      	ldr	r0, [pc, #376]	; (801d4e8 <_printf_i+0x244>)
 801d36e:	230a      	movs	r3, #10
 801d370:	e019      	b.n	801d3a6 <_printf_i+0x102>
 801d372:	680e      	ldr	r6, [r1, #0]
 801d374:	602b      	str	r3, [r5, #0]
 801d376:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d37a:	bf18      	it	ne
 801d37c:	b236      	sxthne	r6, r6
 801d37e:	e7ef      	b.n	801d360 <_printf_i+0xbc>
 801d380:	682b      	ldr	r3, [r5, #0]
 801d382:	6820      	ldr	r0, [r4, #0]
 801d384:	1d19      	adds	r1, r3, #4
 801d386:	6029      	str	r1, [r5, #0]
 801d388:	0601      	lsls	r1, r0, #24
 801d38a:	d501      	bpl.n	801d390 <_printf_i+0xec>
 801d38c:	681e      	ldr	r6, [r3, #0]
 801d38e:	e002      	b.n	801d396 <_printf_i+0xf2>
 801d390:	0646      	lsls	r6, r0, #25
 801d392:	d5fb      	bpl.n	801d38c <_printf_i+0xe8>
 801d394:	881e      	ldrh	r6, [r3, #0]
 801d396:	4854      	ldr	r0, [pc, #336]	; (801d4e8 <_printf_i+0x244>)
 801d398:	2f6f      	cmp	r7, #111	; 0x6f
 801d39a:	bf0c      	ite	eq
 801d39c:	2308      	moveq	r3, #8
 801d39e:	230a      	movne	r3, #10
 801d3a0:	2100      	movs	r1, #0
 801d3a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d3a6:	6865      	ldr	r5, [r4, #4]
 801d3a8:	60a5      	str	r5, [r4, #8]
 801d3aa:	2d00      	cmp	r5, #0
 801d3ac:	bfa2      	ittt	ge
 801d3ae:	6821      	ldrge	r1, [r4, #0]
 801d3b0:	f021 0104 	bicge.w	r1, r1, #4
 801d3b4:	6021      	strge	r1, [r4, #0]
 801d3b6:	b90e      	cbnz	r6, 801d3bc <_printf_i+0x118>
 801d3b8:	2d00      	cmp	r5, #0
 801d3ba:	d04d      	beq.n	801d458 <_printf_i+0x1b4>
 801d3bc:	4615      	mov	r5, r2
 801d3be:	fbb6 f1f3 	udiv	r1, r6, r3
 801d3c2:	fb03 6711 	mls	r7, r3, r1, r6
 801d3c6:	5dc7      	ldrb	r7, [r0, r7]
 801d3c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d3cc:	4637      	mov	r7, r6
 801d3ce:	42bb      	cmp	r3, r7
 801d3d0:	460e      	mov	r6, r1
 801d3d2:	d9f4      	bls.n	801d3be <_printf_i+0x11a>
 801d3d4:	2b08      	cmp	r3, #8
 801d3d6:	d10b      	bne.n	801d3f0 <_printf_i+0x14c>
 801d3d8:	6823      	ldr	r3, [r4, #0]
 801d3da:	07de      	lsls	r6, r3, #31
 801d3dc:	d508      	bpl.n	801d3f0 <_printf_i+0x14c>
 801d3de:	6923      	ldr	r3, [r4, #16]
 801d3e0:	6861      	ldr	r1, [r4, #4]
 801d3e2:	4299      	cmp	r1, r3
 801d3e4:	bfde      	ittt	le
 801d3e6:	2330      	movle	r3, #48	; 0x30
 801d3e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d3ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d3f0:	1b52      	subs	r2, r2, r5
 801d3f2:	6122      	str	r2, [r4, #16]
 801d3f4:	f8cd a000 	str.w	sl, [sp]
 801d3f8:	464b      	mov	r3, r9
 801d3fa:	aa03      	add	r2, sp, #12
 801d3fc:	4621      	mov	r1, r4
 801d3fe:	4640      	mov	r0, r8
 801d400:	f7ff fee2 	bl	801d1c8 <_printf_common>
 801d404:	3001      	adds	r0, #1
 801d406:	d14c      	bne.n	801d4a2 <_printf_i+0x1fe>
 801d408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d40c:	b004      	add	sp, #16
 801d40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d412:	4835      	ldr	r0, [pc, #212]	; (801d4e8 <_printf_i+0x244>)
 801d414:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d418:	6829      	ldr	r1, [r5, #0]
 801d41a:	6823      	ldr	r3, [r4, #0]
 801d41c:	f851 6b04 	ldr.w	r6, [r1], #4
 801d420:	6029      	str	r1, [r5, #0]
 801d422:	061d      	lsls	r5, r3, #24
 801d424:	d514      	bpl.n	801d450 <_printf_i+0x1ac>
 801d426:	07df      	lsls	r7, r3, #31
 801d428:	bf44      	itt	mi
 801d42a:	f043 0320 	orrmi.w	r3, r3, #32
 801d42e:	6023      	strmi	r3, [r4, #0]
 801d430:	b91e      	cbnz	r6, 801d43a <_printf_i+0x196>
 801d432:	6823      	ldr	r3, [r4, #0]
 801d434:	f023 0320 	bic.w	r3, r3, #32
 801d438:	6023      	str	r3, [r4, #0]
 801d43a:	2310      	movs	r3, #16
 801d43c:	e7b0      	b.n	801d3a0 <_printf_i+0xfc>
 801d43e:	6823      	ldr	r3, [r4, #0]
 801d440:	f043 0320 	orr.w	r3, r3, #32
 801d444:	6023      	str	r3, [r4, #0]
 801d446:	2378      	movs	r3, #120	; 0x78
 801d448:	4828      	ldr	r0, [pc, #160]	; (801d4ec <_printf_i+0x248>)
 801d44a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d44e:	e7e3      	b.n	801d418 <_printf_i+0x174>
 801d450:	0659      	lsls	r1, r3, #25
 801d452:	bf48      	it	mi
 801d454:	b2b6      	uxthmi	r6, r6
 801d456:	e7e6      	b.n	801d426 <_printf_i+0x182>
 801d458:	4615      	mov	r5, r2
 801d45a:	e7bb      	b.n	801d3d4 <_printf_i+0x130>
 801d45c:	682b      	ldr	r3, [r5, #0]
 801d45e:	6826      	ldr	r6, [r4, #0]
 801d460:	6961      	ldr	r1, [r4, #20]
 801d462:	1d18      	adds	r0, r3, #4
 801d464:	6028      	str	r0, [r5, #0]
 801d466:	0635      	lsls	r5, r6, #24
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	d501      	bpl.n	801d470 <_printf_i+0x1cc>
 801d46c:	6019      	str	r1, [r3, #0]
 801d46e:	e002      	b.n	801d476 <_printf_i+0x1d2>
 801d470:	0670      	lsls	r0, r6, #25
 801d472:	d5fb      	bpl.n	801d46c <_printf_i+0x1c8>
 801d474:	8019      	strh	r1, [r3, #0]
 801d476:	2300      	movs	r3, #0
 801d478:	6123      	str	r3, [r4, #16]
 801d47a:	4615      	mov	r5, r2
 801d47c:	e7ba      	b.n	801d3f4 <_printf_i+0x150>
 801d47e:	682b      	ldr	r3, [r5, #0]
 801d480:	1d1a      	adds	r2, r3, #4
 801d482:	602a      	str	r2, [r5, #0]
 801d484:	681d      	ldr	r5, [r3, #0]
 801d486:	6862      	ldr	r2, [r4, #4]
 801d488:	2100      	movs	r1, #0
 801d48a:	4628      	mov	r0, r5
 801d48c:	f7e2 ff28 	bl	80002e0 <memchr>
 801d490:	b108      	cbz	r0, 801d496 <_printf_i+0x1f2>
 801d492:	1b40      	subs	r0, r0, r5
 801d494:	6060      	str	r0, [r4, #4]
 801d496:	6863      	ldr	r3, [r4, #4]
 801d498:	6123      	str	r3, [r4, #16]
 801d49a:	2300      	movs	r3, #0
 801d49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d4a0:	e7a8      	b.n	801d3f4 <_printf_i+0x150>
 801d4a2:	6923      	ldr	r3, [r4, #16]
 801d4a4:	462a      	mov	r2, r5
 801d4a6:	4649      	mov	r1, r9
 801d4a8:	4640      	mov	r0, r8
 801d4aa:	47d0      	blx	sl
 801d4ac:	3001      	adds	r0, #1
 801d4ae:	d0ab      	beq.n	801d408 <_printf_i+0x164>
 801d4b0:	6823      	ldr	r3, [r4, #0]
 801d4b2:	079b      	lsls	r3, r3, #30
 801d4b4:	d413      	bmi.n	801d4de <_printf_i+0x23a>
 801d4b6:	68e0      	ldr	r0, [r4, #12]
 801d4b8:	9b03      	ldr	r3, [sp, #12]
 801d4ba:	4298      	cmp	r0, r3
 801d4bc:	bfb8      	it	lt
 801d4be:	4618      	movlt	r0, r3
 801d4c0:	e7a4      	b.n	801d40c <_printf_i+0x168>
 801d4c2:	2301      	movs	r3, #1
 801d4c4:	4632      	mov	r2, r6
 801d4c6:	4649      	mov	r1, r9
 801d4c8:	4640      	mov	r0, r8
 801d4ca:	47d0      	blx	sl
 801d4cc:	3001      	adds	r0, #1
 801d4ce:	d09b      	beq.n	801d408 <_printf_i+0x164>
 801d4d0:	3501      	adds	r5, #1
 801d4d2:	68e3      	ldr	r3, [r4, #12]
 801d4d4:	9903      	ldr	r1, [sp, #12]
 801d4d6:	1a5b      	subs	r3, r3, r1
 801d4d8:	42ab      	cmp	r3, r5
 801d4da:	dcf2      	bgt.n	801d4c2 <_printf_i+0x21e>
 801d4dc:	e7eb      	b.n	801d4b6 <_printf_i+0x212>
 801d4de:	2500      	movs	r5, #0
 801d4e0:	f104 0619 	add.w	r6, r4, #25
 801d4e4:	e7f5      	b.n	801d4d2 <_printf_i+0x22e>
 801d4e6:	bf00      	nop
 801d4e8:	08038b55 	.word	0x08038b55
 801d4ec:	08038b66 	.word	0x08038b66

0801d4f0 <_sbrk_r>:
 801d4f0:	b538      	push	{r3, r4, r5, lr}
 801d4f2:	4d06      	ldr	r5, [pc, #24]	; (801d50c <_sbrk_r+0x1c>)
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	4604      	mov	r4, r0
 801d4f8:	4608      	mov	r0, r1
 801d4fa:	602b      	str	r3, [r5, #0]
 801d4fc:	f7ed fecc 	bl	800b298 <_sbrk>
 801d500:	1c43      	adds	r3, r0, #1
 801d502:	d102      	bne.n	801d50a <_sbrk_r+0x1a>
 801d504:	682b      	ldr	r3, [r5, #0]
 801d506:	b103      	cbz	r3, 801d50a <_sbrk_r+0x1a>
 801d508:	6023      	str	r3, [r4, #0]
 801d50a:	bd38      	pop	{r3, r4, r5, pc}
 801d50c:	24003764 	.word	0x24003764

0801d510 <_raise_r>:
 801d510:	291f      	cmp	r1, #31
 801d512:	b538      	push	{r3, r4, r5, lr}
 801d514:	4604      	mov	r4, r0
 801d516:	460d      	mov	r5, r1
 801d518:	d904      	bls.n	801d524 <_raise_r+0x14>
 801d51a:	2316      	movs	r3, #22
 801d51c:	6003      	str	r3, [r0, #0]
 801d51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d522:	bd38      	pop	{r3, r4, r5, pc}
 801d524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d526:	b112      	cbz	r2, 801d52e <_raise_r+0x1e>
 801d528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d52c:	b94b      	cbnz	r3, 801d542 <_raise_r+0x32>
 801d52e:	4620      	mov	r0, r4
 801d530:	f000 f830 	bl	801d594 <_getpid_r>
 801d534:	462a      	mov	r2, r5
 801d536:	4601      	mov	r1, r0
 801d538:	4620      	mov	r0, r4
 801d53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d53e:	f000 b817 	b.w	801d570 <_kill_r>
 801d542:	2b01      	cmp	r3, #1
 801d544:	d00a      	beq.n	801d55c <_raise_r+0x4c>
 801d546:	1c59      	adds	r1, r3, #1
 801d548:	d103      	bne.n	801d552 <_raise_r+0x42>
 801d54a:	2316      	movs	r3, #22
 801d54c:	6003      	str	r3, [r0, #0]
 801d54e:	2001      	movs	r0, #1
 801d550:	e7e7      	b.n	801d522 <_raise_r+0x12>
 801d552:	2400      	movs	r4, #0
 801d554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d558:	4628      	mov	r0, r5
 801d55a:	4798      	blx	r3
 801d55c:	2000      	movs	r0, #0
 801d55e:	e7e0      	b.n	801d522 <_raise_r+0x12>

0801d560 <raise>:
 801d560:	4b02      	ldr	r3, [pc, #8]	; (801d56c <raise+0xc>)
 801d562:	4601      	mov	r1, r0
 801d564:	6818      	ldr	r0, [r3, #0]
 801d566:	f7ff bfd3 	b.w	801d510 <_raise_r>
 801d56a:	bf00      	nop
 801d56c:	24000100 	.word	0x24000100

0801d570 <_kill_r>:
 801d570:	b538      	push	{r3, r4, r5, lr}
 801d572:	4d07      	ldr	r5, [pc, #28]	; (801d590 <_kill_r+0x20>)
 801d574:	2300      	movs	r3, #0
 801d576:	4604      	mov	r4, r0
 801d578:	4608      	mov	r0, r1
 801d57a:	4611      	mov	r1, r2
 801d57c:	602b      	str	r3, [r5, #0]
 801d57e:	f7ed fe03 	bl	800b188 <_kill>
 801d582:	1c43      	adds	r3, r0, #1
 801d584:	d102      	bne.n	801d58c <_kill_r+0x1c>
 801d586:	682b      	ldr	r3, [r5, #0]
 801d588:	b103      	cbz	r3, 801d58c <_kill_r+0x1c>
 801d58a:	6023      	str	r3, [r4, #0]
 801d58c:	bd38      	pop	{r3, r4, r5, pc}
 801d58e:	bf00      	nop
 801d590:	24003764 	.word	0x24003764

0801d594 <_getpid_r>:
 801d594:	f7ed bdf0 	b.w	800b178 <_getpid>

0801d598 <__swbuf_r>:
 801d598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d59a:	460e      	mov	r6, r1
 801d59c:	4614      	mov	r4, r2
 801d59e:	4605      	mov	r5, r0
 801d5a0:	b118      	cbz	r0, 801d5aa <__swbuf_r+0x12>
 801d5a2:	6983      	ldr	r3, [r0, #24]
 801d5a4:	b90b      	cbnz	r3, 801d5aa <__swbuf_r+0x12>
 801d5a6:	f000 f9d1 	bl	801d94c <__sinit>
 801d5aa:	4b21      	ldr	r3, [pc, #132]	; (801d630 <__swbuf_r+0x98>)
 801d5ac:	429c      	cmp	r4, r3
 801d5ae:	d12b      	bne.n	801d608 <__swbuf_r+0x70>
 801d5b0:	686c      	ldr	r4, [r5, #4]
 801d5b2:	69a3      	ldr	r3, [r4, #24]
 801d5b4:	60a3      	str	r3, [r4, #8]
 801d5b6:	89a3      	ldrh	r3, [r4, #12]
 801d5b8:	071a      	lsls	r2, r3, #28
 801d5ba:	d52f      	bpl.n	801d61c <__swbuf_r+0x84>
 801d5bc:	6923      	ldr	r3, [r4, #16]
 801d5be:	b36b      	cbz	r3, 801d61c <__swbuf_r+0x84>
 801d5c0:	6923      	ldr	r3, [r4, #16]
 801d5c2:	6820      	ldr	r0, [r4, #0]
 801d5c4:	1ac0      	subs	r0, r0, r3
 801d5c6:	6963      	ldr	r3, [r4, #20]
 801d5c8:	b2f6      	uxtb	r6, r6
 801d5ca:	4283      	cmp	r3, r0
 801d5cc:	4637      	mov	r7, r6
 801d5ce:	dc04      	bgt.n	801d5da <__swbuf_r+0x42>
 801d5d0:	4621      	mov	r1, r4
 801d5d2:	4628      	mov	r0, r5
 801d5d4:	f000 f926 	bl	801d824 <_fflush_r>
 801d5d8:	bb30      	cbnz	r0, 801d628 <__swbuf_r+0x90>
 801d5da:	68a3      	ldr	r3, [r4, #8]
 801d5dc:	3b01      	subs	r3, #1
 801d5de:	60a3      	str	r3, [r4, #8]
 801d5e0:	6823      	ldr	r3, [r4, #0]
 801d5e2:	1c5a      	adds	r2, r3, #1
 801d5e4:	6022      	str	r2, [r4, #0]
 801d5e6:	701e      	strb	r6, [r3, #0]
 801d5e8:	6963      	ldr	r3, [r4, #20]
 801d5ea:	3001      	adds	r0, #1
 801d5ec:	4283      	cmp	r3, r0
 801d5ee:	d004      	beq.n	801d5fa <__swbuf_r+0x62>
 801d5f0:	89a3      	ldrh	r3, [r4, #12]
 801d5f2:	07db      	lsls	r3, r3, #31
 801d5f4:	d506      	bpl.n	801d604 <__swbuf_r+0x6c>
 801d5f6:	2e0a      	cmp	r6, #10
 801d5f8:	d104      	bne.n	801d604 <__swbuf_r+0x6c>
 801d5fa:	4621      	mov	r1, r4
 801d5fc:	4628      	mov	r0, r5
 801d5fe:	f000 f911 	bl	801d824 <_fflush_r>
 801d602:	b988      	cbnz	r0, 801d628 <__swbuf_r+0x90>
 801d604:	4638      	mov	r0, r7
 801d606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d608:	4b0a      	ldr	r3, [pc, #40]	; (801d634 <__swbuf_r+0x9c>)
 801d60a:	429c      	cmp	r4, r3
 801d60c:	d101      	bne.n	801d612 <__swbuf_r+0x7a>
 801d60e:	68ac      	ldr	r4, [r5, #8]
 801d610:	e7cf      	b.n	801d5b2 <__swbuf_r+0x1a>
 801d612:	4b09      	ldr	r3, [pc, #36]	; (801d638 <__swbuf_r+0xa0>)
 801d614:	429c      	cmp	r4, r3
 801d616:	bf08      	it	eq
 801d618:	68ec      	ldreq	r4, [r5, #12]
 801d61a:	e7ca      	b.n	801d5b2 <__swbuf_r+0x1a>
 801d61c:	4621      	mov	r1, r4
 801d61e:	4628      	mov	r0, r5
 801d620:	f000 f80c 	bl	801d63c <__swsetup_r>
 801d624:	2800      	cmp	r0, #0
 801d626:	d0cb      	beq.n	801d5c0 <__swbuf_r+0x28>
 801d628:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d62c:	e7ea      	b.n	801d604 <__swbuf_r+0x6c>
 801d62e:	bf00      	nop
 801d630:	08038b98 	.word	0x08038b98
 801d634:	08038bb8 	.word	0x08038bb8
 801d638:	08038b78 	.word	0x08038b78

0801d63c <__swsetup_r>:
 801d63c:	4b32      	ldr	r3, [pc, #200]	; (801d708 <__swsetup_r+0xcc>)
 801d63e:	b570      	push	{r4, r5, r6, lr}
 801d640:	681d      	ldr	r5, [r3, #0]
 801d642:	4606      	mov	r6, r0
 801d644:	460c      	mov	r4, r1
 801d646:	b125      	cbz	r5, 801d652 <__swsetup_r+0x16>
 801d648:	69ab      	ldr	r3, [r5, #24]
 801d64a:	b913      	cbnz	r3, 801d652 <__swsetup_r+0x16>
 801d64c:	4628      	mov	r0, r5
 801d64e:	f000 f97d 	bl	801d94c <__sinit>
 801d652:	4b2e      	ldr	r3, [pc, #184]	; (801d70c <__swsetup_r+0xd0>)
 801d654:	429c      	cmp	r4, r3
 801d656:	d10f      	bne.n	801d678 <__swsetup_r+0x3c>
 801d658:	686c      	ldr	r4, [r5, #4]
 801d65a:	89a3      	ldrh	r3, [r4, #12]
 801d65c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d660:	0719      	lsls	r1, r3, #28
 801d662:	d42c      	bmi.n	801d6be <__swsetup_r+0x82>
 801d664:	06dd      	lsls	r5, r3, #27
 801d666:	d411      	bmi.n	801d68c <__swsetup_r+0x50>
 801d668:	2309      	movs	r3, #9
 801d66a:	6033      	str	r3, [r6, #0]
 801d66c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d670:	81a3      	strh	r3, [r4, #12]
 801d672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d676:	e03e      	b.n	801d6f6 <__swsetup_r+0xba>
 801d678:	4b25      	ldr	r3, [pc, #148]	; (801d710 <__swsetup_r+0xd4>)
 801d67a:	429c      	cmp	r4, r3
 801d67c:	d101      	bne.n	801d682 <__swsetup_r+0x46>
 801d67e:	68ac      	ldr	r4, [r5, #8]
 801d680:	e7eb      	b.n	801d65a <__swsetup_r+0x1e>
 801d682:	4b24      	ldr	r3, [pc, #144]	; (801d714 <__swsetup_r+0xd8>)
 801d684:	429c      	cmp	r4, r3
 801d686:	bf08      	it	eq
 801d688:	68ec      	ldreq	r4, [r5, #12]
 801d68a:	e7e6      	b.n	801d65a <__swsetup_r+0x1e>
 801d68c:	0758      	lsls	r0, r3, #29
 801d68e:	d512      	bpl.n	801d6b6 <__swsetup_r+0x7a>
 801d690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d692:	b141      	cbz	r1, 801d6a6 <__swsetup_r+0x6a>
 801d694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d698:	4299      	cmp	r1, r3
 801d69a:	d002      	beq.n	801d6a2 <__swsetup_r+0x66>
 801d69c:	4630      	mov	r0, r6
 801d69e:	f7ff fb59 	bl	801cd54 <_free_r>
 801d6a2:	2300      	movs	r3, #0
 801d6a4:	6363      	str	r3, [r4, #52]	; 0x34
 801d6a6:	89a3      	ldrh	r3, [r4, #12]
 801d6a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d6ac:	81a3      	strh	r3, [r4, #12]
 801d6ae:	2300      	movs	r3, #0
 801d6b0:	6063      	str	r3, [r4, #4]
 801d6b2:	6923      	ldr	r3, [r4, #16]
 801d6b4:	6023      	str	r3, [r4, #0]
 801d6b6:	89a3      	ldrh	r3, [r4, #12]
 801d6b8:	f043 0308 	orr.w	r3, r3, #8
 801d6bc:	81a3      	strh	r3, [r4, #12]
 801d6be:	6923      	ldr	r3, [r4, #16]
 801d6c0:	b94b      	cbnz	r3, 801d6d6 <__swsetup_r+0x9a>
 801d6c2:	89a3      	ldrh	r3, [r4, #12]
 801d6c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d6c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d6cc:	d003      	beq.n	801d6d6 <__swsetup_r+0x9a>
 801d6ce:	4621      	mov	r1, r4
 801d6d0:	4630      	mov	r0, r6
 801d6d2:	f000 fa01 	bl	801dad8 <__smakebuf_r>
 801d6d6:	89a0      	ldrh	r0, [r4, #12]
 801d6d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d6dc:	f010 0301 	ands.w	r3, r0, #1
 801d6e0:	d00a      	beq.n	801d6f8 <__swsetup_r+0xbc>
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	60a3      	str	r3, [r4, #8]
 801d6e6:	6963      	ldr	r3, [r4, #20]
 801d6e8:	425b      	negs	r3, r3
 801d6ea:	61a3      	str	r3, [r4, #24]
 801d6ec:	6923      	ldr	r3, [r4, #16]
 801d6ee:	b943      	cbnz	r3, 801d702 <__swsetup_r+0xc6>
 801d6f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d6f4:	d1ba      	bne.n	801d66c <__swsetup_r+0x30>
 801d6f6:	bd70      	pop	{r4, r5, r6, pc}
 801d6f8:	0781      	lsls	r1, r0, #30
 801d6fa:	bf58      	it	pl
 801d6fc:	6963      	ldrpl	r3, [r4, #20]
 801d6fe:	60a3      	str	r3, [r4, #8]
 801d700:	e7f4      	b.n	801d6ec <__swsetup_r+0xb0>
 801d702:	2000      	movs	r0, #0
 801d704:	e7f7      	b.n	801d6f6 <__swsetup_r+0xba>
 801d706:	bf00      	nop
 801d708:	24000100 	.word	0x24000100
 801d70c:	08038b98 	.word	0x08038b98
 801d710:	08038bb8 	.word	0x08038bb8
 801d714:	08038b78 	.word	0x08038b78

0801d718 <__sflush_r>:
 801d718:	898a      	ldrh	r2, [r1, #12]
 801d71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d71e:	4605      	mov	r5, r0
 801d720:	0710      	lsls	r0, r2, #28
 801d722:	460c      	mov	r4, r1
 801d724:	d458      	bmi.n	801d7d8 <__sflush_r+0xc0>
 801d726:	684b      	ldr	r3, [r1, #4]
 801d728:	2b00      	cmp	r3, #0
 801d72a:	dc05      	bgt.n	801d738 <__sflush_r+0x20>
 801d72c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d72e:	2b00      	cmp	r3, #0
 801d730:	dc02      	bgt.n	801d738 <__sflush_r+0x20>
 801d732:	2000      	movs	r0, #0
 801d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d73a:	2e00      	cmp	r6, #0
 801d73c:	d0f9      	beq.n	801d732 <__sflush_r+0x1a>
 801d73e:	2300      	movs	r3, #0
 801d740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d744:	682f      	ldr	r7, [r5, #0]
 801d746:	602b      	str	r3, [r5, #0]
 801d748:	d032      	beq.n	801d7b0 <__sflush_r+0x98>
 801d74a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d74c:	89a3      	ldrh	r3, [r4, #12]
 801d74e:	075a      	lsls	r2, r3, #29
 801d750:	d505      	bpl.n	801d75e <__sflush_r+0x46>
 801d752:	6863      	ldr	r3, [r4, #4]
 801d754:	1ac0      	subs	r0, r0, r3
 801d756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d758:	b10b      	cbz	r3, 801d75e <__sflush_r+0x46>
 801d75a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d75c:	1ac0      	subs	r0, r0, r3
 801d75e:	2300      	movs	r3, #0
 801d760:	4602      	mov	r2, r0
 801d762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d764:	6a21      	ldr	r1, [r4, #32]
 801d766:	4628      	mov	r0, r5
 801d768:	47b0      	blx	r6
 801d76a:	1c43      	adds	r3, r0, #1
 801d76c:	89a3      	ldrh	r3, [r4, #12]
 801d76e:	d106      	bne.n	801d77e <__sflush_r+0x66>
 801d770:	6829      	ldr	r1, [r5, #0]
 801d772:	291d      	cmp	r1, #29
 801d774:	d82c      	bhi.n	801d7d0 <__sflush_r+0xb8>
 801d776:	4a2a      	ldr	r2, [pc, #168]	; (801d820 <__sflush_r+0x108>)
 801d778:	40ca      	lsrs	r2, r1
 801d77a:	07d6      	lsls	r6, r2, #31
 801d77c:	d528      	bpl.n	801d7d0 <__sflush_r+0xb8>
 801d77e:	2200      	movs	r2, #0
 801d780:	6062      	str	r2, [r4, #4]
 801d782:	04d9      	lsls	r1, r3, #19
 801d784:	6922      	ldr	r2, [r4, #16]
 801d786:	6022      	str	r2, [r4, #0]
 801d788:	d504      	bpl.n	801d794 <__sflush_r+0x7c>
 801d78a:	1c42      	adds	r2, r0, #1
 801d78c:	d101      	bne.n	801d792 <__sflush_r+0x7a>
 801d78e:	682b      	ldr	r3, [r5, #0]
 801d790:	b903      	cbnz	r3, 801d794 <__sflush_r+0x7c>
 801d792:	6560      	str	r0, [r4, #84]	; 0x54
 801d794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d796:	602f      	str	r7, [r5, #0]
 801d798:	2900      	cmp	r1, #0
 801d79a:	d0ca      	beq.n	801d732 <__sflush_r+0x1a>
 801d79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7a0:	4299      	cmp	r1, r3
 801d7a2:	d002      	beq.n	801d7aa <__sflush_r+0x92>
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	f7ff fad5 	bl	801cd54 <_free_r>
 801d7aa:	2000      	movs	r0, #0
 801d7ac:	6360      	str	r0, [r4, #52]	; 0x34
 801d7ae:	e7c1      	b.n	801d734 <__sflush_r+0x1c>
 801d7b0:	6a21      	ldr	r1, [r4, #32]
 801d7b2:	2301      	movs	r3, #1
 801d7b4:	4628      	mov	r0, r5
 801d7b6:	47b0      	blx	r6
 801d7b8:	1c41      	adds	r1, r0, #1
 801d7ba:	d1c7      	bne.n	801d74c <__sflush_r+0x34>
 801d7bc:	682b      	ldr	r3, [r5, #0]
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d0c4      	beq.n	801d74c <__sflush_r+0x34>
 801d7c2:	2b1d      	cmp	r3, #29
 801d7c4:	d001      	beq.n	801d7ca <__sflush_r+0xb2>
 801d7c6:	2b16      	cmp	r3, #22
 801d7c8:	d101      	bne.n	801d7ce <__sflush_r+0xb6>
 801d7ca:	602f      	str	r7, [r5, #0]
 801d7cc:	e7b1      	b.n	801d732 <__sflush_r+0x1a>
 801d7ce:	89a3      	ldrh	r3, [r4, #12]
 801d7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7d4:	81a3      	strh	r3, [r4, #12]
 801d7d6:	e7ad      	b.n	801d734 <__sflush_r+0x1c>
 801d7d8:	690f      	ldr	r7, [r1, #16]
 801d7da:	2f00      	cmp	r7, #0
 801d7dc:	d0a9      	beq.n	801d732 <__sflush_r+0x1a>
 801d7de:	0793      	lsls	r3, r2, #30
 801d7e0:	680e      	ldr	r6, [r1, #0]
 801d7e2:	bf08      	it	eq
 801d7e4:	694b      	ldreq	r3, [r1, #20]
 801d7e6:	600f      	str	r7, [r1, #0]
 801d7e8:	bf18      	it	ne
 801d7ea:	2300      	movne	r3, #0
 801d7ec:	eba6 0807 	sub.w	r8, r6, r7
 801d7f0:	608b      	str	r3, [r1, #8]
 801d7f2:	f1b8 0f00 	cmp.w	r8, #0
 801d7f6:	dd9c      	ble.n	801d732 <__sflush_r+0x1a>
 801d7f8:	6a21      	ldr	r1, [r4, #32]
 801d7fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d7fc:	4643      	mov	r3, r8
 801d7fe:	463a      	mov	r2, r7
 801d800:	4628      	mov	r0, r5
 801d802:	47b0      	blx	r6
 801d804:	2800      	cmp	r0, #0
 801d806:	dc06      	bgt.n	801d816 <__sflush_r+0xfe>
 801d808:	89a3      	ldrh	r3, [r4, #12]
 801d80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d80e:	81a3      	strh	r3, [r4, #12]
 801d810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d814:	e78e      	b.n	801d734 <__sflush_r+0x1c>
 801d816:	4407      	add	r7, r0
 801d818:	eba8 0800 	sub.w	r8, r8, r0
 801d81c:	e7e9      	b.n	801d7f2 <__sflush_r+0xda>
 801d81e:	bf00      	nop
 801d820:	20400001 	.word	0x20400001

0801d824 <_fflush_r>:
 801d824:	b538      	push	{r3, r4, r5, lr}
 801d826:	690b      	ldr	r3, [r1, #16]
 801d828:	4605      	mov	r5, r0
 801d82a:	460c      	mov	r4, r1
 801d82c:	b913      	cbnz	r3, 801d834 <_fflush_r+0x10>
 801d82e:	2500      	movs	r5, #0
 801d830:	4628      	mov	r0, r5
 801d832:	bd38      	pop	{r3, r4, r5, pc}
 801d834:	b118      	cbz	r0, 801d83e <_fflush_r+0x1a>
 801d836:	6983      	ldr	r3, [r0, #24]
 801d838:	b90b      	cbnz	r3, 801d83e <_fflush_r+0x1a>
 801d83a:	f000 f887 	bl	801d94c <__sinit>
 801d83e:	4b14      	ldr	r3, [pc, #80]	; (801d890 <_fflush_r+0x6c>)
 801d840:	429c      	cmp	r4, r3
 801d842:	d11b      	bne.n	801d87c <_fflush_r+0x58>
 801d844:	686c      	ldr	r4, [r5, #4]
 801d846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d0ef      	beq.n	801d82e <_fflush_r+0xa>
 801d84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d850:	07d0      	lsls	r0, r2, #31
 801d852:	d404      	bmi.n	801d85e <_fflush_r+0x3a>
 801d854:	0599      	lsls	r1, r3, #22
 801d856:	d402      	bmi.n	801d85e <_fflush_r+0x3a>
 801d858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d85a:	f000 f915 	bl	801da88 <__retarget_lock_acquire_recursive>
 801d85e:	4628      	mov	r0, r5
 801d860:	4621      	mov	r1, r4
 801d862:	f7ff ff59 	bl	801d718 <__sflush_r>
 801d866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d868:	07da      	lsls	r2, r3, #31
 801d86a:	4605      	mov	r5, r0
 801d86c:	d4e0      	bmi.n	801d830 <_fflush_r+0xc>
 801d86e:	89a3      	ldrh	r3, [r4, #12]
 801d870:	059b      	lsls	r3, r3, #22
 801d872:	d4dd      	bmi.n	801d830 <_fflush_r+0xc>
 801d874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d876:	f000 f908 	bl	801da8a <__retarget_lock_release_recursive>
 801d87a:	e7d9      	b.n	801d830 <_fflush_r+0xc>
 801d87c:	4b05      	ldr	r3, [pc, #20]	; (801d894 <_fflush_r+0x70>)
 801d87e:	429c      	cmp	r4, r3
 801d880:	d101      	bne.n	801d886 <_fflush_r+0x62>
 801d882:	68ac      	ldr	r4, [r5, #8]
 801d884:	e7df      	b.n	801d846 <_fflush_r+0x22>
 801d886:	4b04      	ldr	r3, [pc, #16]	; (801d898 <_fflush_r+0x74>)
 801d888:	429c      	cmp	r4, r3
 801d88a:	bf08      	it	eq
 801d88c:	68ec      	ldreq	r4, [r5, #12]
 801d88e:	e7da      	b.n	801d846 <_fflush_r+0x22>
 801d890:	08038b98 	.word	0x08038b98
 801d894:	08038bb8 	.word	0x08038bb8
 801d898:	08038b78 	.word	0x08038b78

0801d89c <std>:
 801d89c:	2300      	movs	r3, #0
 801d89e:	b510      	push	{r4, lr}
 801d8a0:	4604      	mov	r4, r0
 801d8a2:	e9c0 3300 	strd	r3, r3, [r0]
 801d8a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d8aa:	6083      	str	r3, [r0, #8]
 801d8ac:	8181      	strh	r1, [r0, #12]
 801d8ae:	6643      	str	r3, [r0, #100]	; 0x64
 801d8b0:	81c2      	strh	r2, [r0, #14]
 801d8b2:	6183      	str	r3, [r0, #24]
 801d8b4:	4619      	mov	r1, r3
 801d8b6:	2208      	movs	r2, #8
 801d8b8:	305c      	adds	r0, #92	; 0x5c
 801d8ba:	f7ff fa43 	bl	801cd44 <memset>
 801d8be:	4b05      	ldr	r3, [pc, #20]	; (801d8d4 <std+0x38>)
 801d8c0:	6263      	str	r3, [r4, #36]	; 0x24
 801d8c2:	4b05      	ldr	r3, [pc, #20]	; (801d8d8 <std+0x3c>)
 801d8c4:	62a3      	str	r3, [r4, #40]	; 0x28
 801d8c6:	4b05      	ldr	r3, [pc, #20]	; (801d8dc <std+0x40>)
 801d8c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d8ca:	4b05      	ldr	r3, [pc, #20]	; (801d8e0 <std+0x44>)
 801d8cc:	6224      	str	r4, [r4, #32]
 801d8ce:	6323      	str	r3, [r4, #48]	; 0x30
 801d8d0:	bd10      	pop	{r4, pc}
 801d8d2:	bf00      	nop
 801d8d4:	0801db71 	.word	0x0801db71
 801d8d8:	0801db93 	.word	0x0801db93
 801d8dc:	0801dbcb 	.word	0x0801dbcb
 801d8e0:	0801dbef 	.word	0x0801dbef

0801d8e4 <_cleanup_r>:
 801d8e4:	4901      	ldr	r1, [pc, #4]	; (801d8ec <_cleanup_r+0x8>)
 801d8e6:	f000 b8af 	b.w	801da48 <_fwalk_reent>
 801d8ea:	bf00      	nop
 801d8ec:	0801d825 	.word	0x0801d825

0801d8f0 <__sfmoreglue>:
 801d8f0:	b570      	push	{r4, r5, r6, lr}
 801d8f2:	2268      	movs	r2, #104	; 0x68
 801d8f4:	1e4d      	subs	r5, r1, #1
 801d8f6:	4355      	muls	r5, r2
 801d8f8:	460e      	mov	r6, r1
 801d8fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d8fe:	f7ff fa95 	bl	801ce2c <_malloc_r>
 801d902:	4604      	mov	r4, r0
 801d904:	b140      	cbz	r0, 801d918 <__sfmoreglue+0x28>
 801d906:	2100      	movs	r1, #0
 801d908:	e9c0 1600 	strd	r1, r6, [r0]
 801d90c:	300c      	adds	r0, #12
 801d90e:	60a0      	str	r0, [r4, #8]
 801d910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d914:	f7ff fa16 	bl	801cd44 <memset>
 801d918:	4620      	mov	r0, r4
 801d91a:	bd70      	pop	{r4, r5, r6, pc}

0801d91c <__sfp_lock_acquire>:
 801d91c:	4801      	ldr	r0, [pc, #4]	; (801d924 <__sfp_lock_acquire+0x8>)
 801d91e:	f000 b8b3 	b.w	801da88 <__retarget_lock_acquire_recursive>
 801d922:	bf00      	nop
 801d924:	24003761 	.word	0x24003761

0801d928 <__sfp_lock_release>:
 801d928:	4801      	ldr	r0, [pc, #4]	; (801d930 <__sfp_lock_release+0x8>)
 801d92a:	f000 b8ae 	b.w	801da8a <__retarget_lock_release_recursive>
 801d92e:	bf00      	nop
 801d930:	24003761 	.word	0x24003761

0801d934 <__sinit_lock_acquire>:
 801d934:	4801      	ldr	r0, [pc, #4]	; (801d93c <__sinit_lock_acquire+0x8>)
 801d936:	f000 b8a7 	b.w	801da88 <__retarget_lock_acquire_recursive>
 801d93a:	bf00      	nop
 801d93c:	24003762 	.word	0x24003762

0801d940 <__sinit_lock_release>:
 801d940:	4801      	ldr	r0, [pc, #4]	; (801d948 <__sinit_lock_release+0x8>)
 801d942:	f000 b8a2 	b.w	801da8a <__retarget_lock_release_recursive>
 801d946:	bf00      	nop
 801d948:	24003762 	.word	0x24003762

0801d94c <__sinit>:
 801d94c:	b510      	push	{r4, lr}
 801d94e:	4604      	mov	r4, r0
 801d950:	f7ff fff0 	bl	801d934 <__sinit_lock_acquire>
 801d954:	69a3      	ldr	r3, [r4, #24]
 801d956:	b11b      	cbz	r3, 801d960 <__sinit+0x14>
 801d958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d95c:	f7ff bff0 	b.w	801d940 <__sinit_lock_release>
 801d960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d964:	6523      	str	r3, [r4, #80]	; 0x50
 801d966:	4b13      	ldr	r3, [pc, #76]	; (801d9b4 <__sinit+0x68>)
 801d968:	4a13      	ldr	r2, [pc, #76]	; (801d9b8 <__sinit+0x6c>)
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	62a2      	str	r2, [r4, #40]	; 0x28
 801d96e:	42a3      	cmp	r3, r4
 801d970:	bf04      	itt	eq
 801d972:	2301      	moveq	r3, #1
 801d974:	61a3      	streq	r3, [r4, #24]
 801d976:	4620      	mov	r0, r4
 801d978:	f000 f820 	bl	801d9bc <__sfp>
 801d97c:	6060      	str	r0, [r4, #4]
 801d97e:	4620      	mov	r0, r4
 801d980:	f000 f81c 	bl	801d9bc <__sfp>
 801d984:	60a0      	str	r0, [r4, #8]
 801d986:	4620      	mov	r0, r4
 801d988:	f000 f818 	bl	801d9bc <__sfp>
 801d98c:	2200      	movs	r2, #0
 801d98e:	60e0      	str	r0, [r4, #12]
 801d990:	2104      	movs	r1, #4
 801d992:	6860      	ldr	r0, [r4, #4]
 801d994:	f7ff ff82 	bl	801d89c <std>
 801d998:	68a0      	ldr	r0, [r4, #8]
 801d99a:	2201      	movs	r2, #1
 801d99c:	2109      	movs	r1, #9
 801d99e:	f7ff ff7d 	bl	801d89c <std>
 801d9a2:	68e0      	ldr	r0, [r4, #12]
 801d9a4:	2202      	movs	r2, #2
 801d9a6:	2112      	movs	r1, #18
 801d9a8:	f7ff ff78 	bl	801d89c <std>
 801d9ac:	2301      	movs	r3, #1
 801d9ae:	61a3      	str	r3, [r4, #24]
 801d9b0:	e7d2      	b.n	801d958 <__sinit+0xc>
 801d9b2:	bf00      	nop
 801d9b4:	08038b40 	.word	0x08038b40
 801d9b8:	0801d8e5 	.word	0x0801d8e5

0801d9bc <__sfp>:
 801d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9be:	4607      	mov	r7, r0
 801d9c0:	f7ff ffac 	bl	801d91c <__sfp_lock_acquire>
 801d9c4:	4b1e      	ldr	r3, [pc, #120]	; (801da40 <__sfp+0x84>)
 801d9c6:	681e      	ldr	r6, [r3, #0]
 801d9c8:	69b3      	ldr	r3, [r6, #24]
 801d9ca:	b913      	cbnz	r3, 801d9d2 <__sfp+0x16>
 801d9cc:	4630      	mov	r0, r6
 801d9ce:	f7ff ffbd 	bl	801d94c <__sinit>
 801d9d2:	3648      	adds	r6, #72	; 0x48
 801d9d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d9d8:	3b01      	subs	r3, #1
 801d9da:	d503      	bpl.n	801d9e4 <__sfp+0x28>
 801d9dc:	6833      	ldr	r3, [r6, #0]
 801d9de:	b30b      	cbz	r3, 801da24 <__sfp+0x68>
 801d9e0:	6836      	ldr	r6, [r6, #0]
 801d9e2:	e7f7      	b.n	801d9d4 <__sfp+0x18>
 801d9e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d9e8:	b9d5      	cbnz	r5, 801da20 <__sfp+0x64>
 801d9ea:	4b16      	ldr	r3, [pc, #88]	; (801da44 <__sfp+0x88>)
 801d9ec:	60e3      	str	r3, [r4, #12]
 801d9ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d9f2:	6665      	str	r5, [r4, #100]	; 0x64
 801d9f4:	f000 f847 	bl	801da86 <__retarget_lock_init_recursive>
 801d9f8:	f7ff ff96 	bl	801d928 <__sfp_lock_release>
 801d9fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801da00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801da04:	6025      	str	r5, [r4, #0]
 801da06:	61a5      	str	r5, [r4, #24]
 801da08:	2208      	movs	r2, #8
 801da0a:	4629      	mov	r1, r5
 801da0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801da10:	f7ff f998 	bl	801cd44 <memset>
 801da14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801da18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801da1c:	4620      	mov	r0, r4
 801da1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da20:	3468      	adds	r4, #104	; 0x68
 801da22:	e7d9      	b.n	801d9d8 <__sfp+0x1c>
 801da24:	2104      	movs	r1, #4
 801da26:	4638      	mov	r0, r7
 801da28:	f7ff ff62 	bl	801d8f0 <__sfmoreglue>
 801da2c:	4604      	mov	r4, r0
 801da2e:	6030      	str	r0, [r6, #0]
 801da30:	2800      	cmp	r0, #0
 801da32:	d1d5      	bne.n	801d9e0 <__sfp+0x24>
 801da34:	f7ff ff78 	bl	801d928 <__sfp_lock_release>
 801da38:	230c      	movs	r3, #12
 801da3a:	603b      	str	r3, [r7, #0]
 801da3c:	e7ee      	b.n	801da1c <__sfp+0x60>
 801da3e:	bf00      	nop
 801da40:	08038b40 	.word	0x08038b40
 801da44:	ffff0001 	.word	0xffff0001

0801da48 <_fwalk_reent>:
 801da48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da4c:	4606      	mov	r6, r0
 801da4e:	4688      	mov	r8, r1
 801da50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801da54:	2700      	movs	r7, #0
 801da56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801da5a:	f1b9 0901 	subs.w	r9, r9, #1
 801da5e:	d505      	bpl.n	801da6c <_fwalk_reent+0x24>
 801da60:	6824      	ldr	r4, [r4, #0]
 801da62:	2c00      	cmp	r4, #0
 801da64:	d1f7      	bne.n	801da56 <_fwalk_reent+0xe>
 801da66:	4638      	mov	r0, r7
 801da68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da6c:	89ab      	ldrh	r3, [r5, #12]
 801da6e:	2b01      	cmp	r3, #1
 801da70:	d907      	bls.n	801da82 <_fwalk_reent+0x3a>
 801da72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801da76:	3301      	adds	r3, #1
 801da78:	d003      	beq.n	801da82 <_fwalk_reent+0x3a>
 801da7a:	4629      	mov	r1, r5
 801da7c:	4630      	mov	r0, r6
 801da7e:	47c0      	blx	r8
 801da80:	4307      	orrs	r7, r0
 801da82:	3568      	adds	r5, #104	; 0x68
 801da84:	e7e9      	b.n	801da5a <_fwalk_reent+0x12>

0801da86 <__retarget_lock_init_recursive>:
 801da86:	4770      	bx	lr

0801da88 <__retarget_lock_acquire_recursive>:
 801da88:	4770      	bx	lr

0801da8a <__retarget_lock_release_recursive>:
 801da8a:	4770      	bx	lr

0801da8c <__swhatbuf_r>:
 801da8c:	b570      	push	{r4, r5, r6, lr}
 801da8e:	460e      	mov	r6, r1
 801da90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da94:	2900      	cmp	r1, #0
 801da96:	b096      	sub	sp, #88	; 0x58
 801da98:	4614      	mov	r4, r2
 801da9a:	461d      	mov	r5, r3
 801da9c:	da08      	bge.n	801dab0 <__swhatbuf_r+0x24>
 801da9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801daa2:	2200      	movs	r2, #0
 801daa4:	602a      	str	r2, [r5, #0]
 801daa6:	061a      	lsls	r2, r3, #24
 801daa8:	d410      	bmi.n	801dacc <__swhatbuf_r+0x40>
 801daaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801daae:	e00e      	b.n	801dace <__swhatbuf_r+0x42>
 801dab0:	466a      	mov	r2, sp
 801dab2:	f000 f8c3 	bl	801dc3c <_fstat_r>
 801dab6:	2800      	cmp	r0, #0
 801dab8:	dbf1      	blt.n	801da9e <__swhatbuf_r+0x12>
 801daba:	9a01      	ldr	r2, [sp, #4]
 801dabc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dac0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dac4:	425a      	negs	r2, r3
 801dac6:	415a      	adcs	r2, r3
 801dac8:	602a      	str	r2, [r5, #0]
 801daca:	e7ee      	b.n	801daaa <__swhatbuf_r+0x1e>
 801dacc:	2340      	movs	r3, #64	; 0x40
 801dace:	2000      	movs	r0, #0
 801dad0:	6023      	str	r3, [r4, #0]
 801dad2:	b016      	add	sp, #88	; 0x58
 801dad4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dad8 <__smakebuf_r>:
 801dad8:	898b      	ldrh	r3, [r1, #12]
 801dada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dadc:	079d      	lsls	r5, r3, #30
 801dade:	4606      	mov	r6, r0
 801dae0:	460c      	mov	r4, r1
 801dae2:	d507      	bpl.n	801daf4 <__smakebuf_r+0x1c>
 801dae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dae8:	6023      	str	r3, [r4, #0]
 801daea:	6123      	str	r3, [r4, #16]
 801daec:	2301      	movs	r3, #1
 801daee:	6163      	str	r3, [r4, #20]
 801daf0:	b002      	add	sp, #8
 801daf2:	bd70      	pop	{r4, r5, r6, pc}
 801daf4:	ab01      	add	r3, sp, #4
 801daf6:	466a      	mov	r2, sp
 801daf8:	f7ff ffc8 	bl	801da8c <__swhatbuf_r>
 801dafc:	9900      	ldr	r1, [sp, #0]
 801dafe:	4605      	mov	r5, r0
 801db00:	4630      	mov	r0, r6
 801db02:	f7ff f993 	bl	801ce2c <_malloc_r>
 801db06:	b948      	cbnz	r0, 801db1c <__smakebuf_r+0x44>
 801db08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db0c:	059a      	lsls	r2, r3, #22
 801db0e:	d4ef      	bmi.n	801daf0 <__smakebuf_r+0x18>
 801db10:	f023 0303 	bic.w	r3, r3, #3
 801db14:	f043 0302 	orr.w	r3, r3, #2
 801db18:	81a3      	strh	r3, [r4, #12]
 801db1a:	e7e3      	b.n	801dae4 <__smakebuf_r+0xc>
 801db1c:	4b0d      	ldr	r3, [pc, #52]	; (801db54 <__smakebuf_r+0x7c>)
 801db1e:	62b3      	str	r3, [r6, #40]	; 0x28
 801db20:	89a3      	ldrh	r3, [r4, #12]
 801db22:	6020      	str	r0, [r4, #0]
 801db24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db28:	81a3      	strh	r3, [r4, #12]
 801db2a:	9b00      	ldr	r3, [sp, #0]
 801db2c:	6163      	str	r3, [r4, #20]
 801db2e:	9b01      	ldr	r3, [sp, #4]
 801db30:	6120      	str	r0, [r4, #16]
 801db32:	b15b      	cbz	r3, 801db4c <__smakebuf_r+0x74>
 801db34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801db38:	4630      	mov	r0, r6
 801db3a:	f000 f891 	bl	801dc60 <_isatty_r>
 801db3e:	b128      	cbz	r0, 801db4c <__smakebuf_r+0x74>
 801db40:	89a3      	ldrh	r3, [r4, #12]
 801db42:	f023 0303 	bic.w	r3, r3, #3
 801db46:	f043 0301 	orr.w	r3, r3, #1
 801db4a:	81a3      	strh	r3, [r4, #12]
 801db4c:	89a0      	ldrh	r0, [r4, #12]
 801db4e:	4305      	orrs	r5, r0
 801db50:	81a5      	strh	r5, [r4, #12]
 801db52:	e7cd      	b.n	801daf0 <__smakebuf_r+0x18>
 801db54:	0801d8e5 	.word	0x0801d8e5

0801db58 <__malloc_lock>:
 801db58:	4801      	ldr	r0, [pc, #4]	; (801db60 <__malloc_lock+0x8>)
 801db5a:	f7ff bf95 	b.w	801da88 <__retarget_lock_acquire_recursive>
 801db5e:	bf00      	nop
 801db60:	24003760 	.word	0x24003760

0801db64 <__malloc_unlock>:
 801db64:	4801      	ldr	r0, [pc, #4]	; (801db6c <__malloc_unlock+0x8>)
 801db66:	f7ff bf90 	b.w	801da8a <__retarget_lock_release_recursive>
 801db6a:	bf00      	nop
 801db6c:	24003760 	.word	0x24003760

0801db70 <__sread>:
 801db70:	b510      	push	{r4, lr}
 801db72:	460c      	mov	r4, r1
 801db74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db78:	f000 f894 	bl	801dca4 <_read_r>
 801db7c:	2800      	cmp	r0, #0
 801db7e:	bfab      	itete	ge
 801db80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801db82:	89a3      	ldrhlt	r3, [r4, #12]
 801db84:	181b      	addge	r3, r3, r0
 801db86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801db8a:	bfac      	ite	ge
 801db8c:	6563      	strge	r3, [r4, #84]	; 0x54
 801db8e:	81a3      	strhlt	r3, [r4, #12]
 801db90:	bd10      	pop	{r4, pc}

0801db92 <__swrite>:
 801db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db96:	461f      	mov	r7, r3
 801db98:	898b      	ldrh	r3, [r1, #12]
 801db9a:	05db      	lsls	r3, r3, #23
 801db9c:	4605      	mov	r5, r0
 801db9e:	460c      	mov	r4, r1
 801dba0:	4616      	mov	r6, r2
 801dba2:	d505      	bpl.n	801dbb0 <__swrite+0x1e>
 801dba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dba8:	2302      	movs	r3, #2
 801dbaa:	2200      	movs	r2, #0
 801dbac:	f000 f868 	bl	801dc80 <_lseek_r>
 801dbb0:	89a3      	ldrh	r3, [r4, #12]
 801dbb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dbb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dbba:	81a3      	strh	r3, [r4, #12]
 801dbbc:	4632      	mov	r2, r6
 801dbbe:	463b      	mov	r3, r7
 801dbc0:	4628      	mov	r0, r5
 801dbc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dbc6:	f000 b817 	b.w	801dbf8 <_write_r>

0801dbca <__sseek>:
 801dbca:	b510      	push	{r4, lr}
 801dbcc:	460c      	mov	r4, r1
 801dbce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbd2:	f000 f855 	bl	801dc80 <_lseek_r>
 801dbd6:	1c43      	adds	r3, r0, #1
 801dbd8:	89a3      	ldrh	r3, [r4, #12]
 801dbda:	bf15      	itete	ne
 801dbdc:	6560      	strne	r0, [r4, #84]	; 0x54
 801dbde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dbe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dbe6:	81a3      	strheq	r3, [r4, #12]
 801dbe8:	bf18      	it	ne
 801dbea:	81a3      	strhne	r3, [r4, #12]
 801dbec:	bd10      	pop	{r4, pc}

0801dbee <__sclose>:
 801dbee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbf2:	f000 b813 	b.w	801dc1c <_close_r>
	...

0801dbf8 <_write_r>:
 801dbf8:	b538      	push	{r3, r4, r5, lr}
 801dbfa:	4d07      	ldr	r5, [pc, #28]	; (801dc18 <_write_r+0x20>)
 801dbfc:	4604      	mov	r4, r0
 801dbfe:	4608      	mov	r0, r1
 801dc00:	4611      	mov	r1, r2
 801dc02:	2200      	movs	r2, #0
 801dc04:	602a      	str	r2, [r5, #0]
 801dc06:	461a      	mov	r2, r3
 801dc08:	f7ed faf5 	bl	800b1f6 <_write>
 801dc0c:	1c43      	adds	r3, r0, #1
 801dc0e:	d102      	bne.n	801dc16 <_write_r+0x1e>
 801dc10:	682b      	ldr	r3, [r5, #0]
 801dc12:	b103      	cbz	r3, 801dc16 <_write_r+0x1e>
 801dc14:	6023      	str	r3, [r4, #0]
 801dc16:	bd38      	pop	{r3, r4, r5, pc}
 801dc18:	24003764 	.word	0x24003764

0801dc1c <_close_r>:
 801dc1c:	b538      	push	{r3, r4, r5, lr}
 801dc1e:	4d06      	ldr	r5, [pc, #24]	; (801dc38 <_close_r+0x1c>)
 801dc20:	2300      	movs	r3, #0
 801dc22:	4604      	mov	r4, r0
 801dc24:	4608      	mov	r0, r1
 801dc26:	602b      	str	r3, [r5, #0]
 801dc28:	f7ed fb01 	bl	800b22e <_close>
 801dc2c:	1c43      	adds	r3, r0, #1
 801dc2e:	d102      	bne.n	801dc36 <_close_r+0x1a>
 801dc30:	682b      	ldr	r3, [r5, #0]
 801dc32:	b103      	cbz	r3, 801dc36 <_close_r+0x1a>
 801dc34:	6023      	str	r3, [r4, #0]
 801dc36:	bd38      	pop	{r3, r4, r5, pc}
 801dc38:	24003764 	.word	0x24003764

0801dc3c <_fstat_r>:
 801dc3c:	b538      	push	{r3, r4, r5, lr}
 801dc3e:	4d07      	ldr	r5, [pc, #28]	; (801dc5c <_fstat_r+0x20>)
 801dc40:	2300      	movs	r3, #0
 801dc42:	4604      	mov	r4, r0
 801dc44:	4608      	mov	r0, r1
 801dc46:	4611      	mov	r1, r2
 801dc48:	602b      	str	r3, [r5, #0]
 801dc4a:	f7ed fafc 	bl	800b246 <_fstat>
 801dc4e:	1c43      	adds	r3, r0, #1
 801dc50:	d102      	bne.n	801dc58 <_fstat_r+0x1c>
 801dc52:	682b      	ldr	r3, [r5, #0]
 801dc54:	b103      	cbz	r3, 801dc58 <_fstat_r+0x1c>
 801dc56:	6023      	str	r3, [r4, #0]
 801dc58:	bd38      	pop	{r3, r4, r5, pc}
 801dc5a:	bf00      	nop
 801dc5c:	24003764 	.word	0x24003764

0801dc60 <_isatty_r>:
 801dc60:	b538      	push	{r3, r4, r5, lr}
 801dc62:	4d06      	ldr	r5, [pc, #24]	; (801dc7c <_isatty_r+0x1c>)
 801dc64:	2300      	movs	r3, #0
 801dc66:	4604      	mov	r4, r0
 801dc68:	4608      	mov	r0, r1
 801dc6a:	602b      	str	r3, [r5, #0]
 801dc6c:	f7ed fafb 	bl	800b266 <_isatty>
 801dc70:	1c43      	adds	r3, r0, #1
 801dc72:	d102      	bne.n	801dc7a <_isatty_r+0x1a>
 801dc74:	682b      	ldr	r3, [r5, #0]
 801dc76:	b103      	cbz	r3, 801dc7a <_isatty_r+0x1a>
 801dc78:	6023      	str	r3, [r4, #0]
 801dc7a:	bd38      	pop	{r3, r4, r5, pc}
 801dc7c:	24003764 	.word	0x24003764

0801dc80 <_lseek_r>:
 801dc80:	b538      	push	{r3, r4, r5, lr}
 801dc82:	4d07      	ldr	r5, [pc, #28]	; (801dca0 <_lseek_r+0x20>)
 801dc84:	4604      	mov	r4, r0
 801dc86:	4608      	mov	r0, r1
 801dc88:	4611      	mov	r1, r2
 801dc8a:	2200      	movs	r2, #0
 801dc8c:	602a      	str	r2, [r5, #0]
 801dc8e:	461a      	mov	r2, r3
 801dc90:	f7ed faf4 	bl	800b27c <_lseek>
 801dc94:	1c43      	adds	r3, r0, #1
 801dc96:	d102      	bne.n	801dc9e <_lseek_r+0x1e>
 801dc98:	682b      	ldr	r3, [r5, #0]
 801dc9a:	b103      	cbz	r3, 801dc9e <_lseek_r+0x1e>
 801dc9c:	6023      	str	r3, [r4, #0]
 801dc9e:	bd38      	pop	{r3, r4, r5, pc}
 801dca0:	24003764 	.word	0x24003764

0801dca4 <_read_r>:
 801dca4:	b538      	push	{r3, r4, r5, lr}
 801dca6:	4d07      	ldr	r5, [pc, #28]	; (801dcc4 <_read_r+0x20>)
 801dca8:	4604      	mov	r4, r0
 801dcaa:	4608      	mov	r0, r1
 801dcac:	4611      	mov	r1, r2
 801dcae:	2200      	movs	r2, #0
 801dcb0:	602a      	str	r2, [r5, #0]
 801dcb2:	461a      	mov	r2, r3
 801dcb4:	f7ed fa82 	bl	800b1bc <_read>
 801dcb8:	1c43      	adds	r3, r0, #1
 801dcba:	d102      	bne.n	801dcc2 <_read_r+0x1e>
 801dcbc:	682b      	ldr	r3, [r5, #0]
 801dcbe:	b103      	cbz	r3, 801dcc2 <_read_r+0x1e>
 801dcc0:	6023      	str	r3, [r4, #0]
 801dcc2:	bd38      	pop	{r3, r4, r5, pc}
 801dcc4:	24003764 	.word	0x24003764

0801dcc8 <_init>:
 801dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcca:	bf00      	nop
 801dccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcce:	bc08      	pop	{r3}
 801dcd0:	469e      	mov	lr, r3
 801dcd2:	4770      	bx	lr

0801dcd4 <_fini>:
 801dcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcd6:	bf00      	nop
 801dcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcda:	bc08      	pop	{r3}
 801dcdc:	469e      	mov	lr, r3
 801dcde:	4770      	bx	lr
